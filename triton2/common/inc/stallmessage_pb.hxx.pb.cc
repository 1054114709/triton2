// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "stallmessage_pb.hxx.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>
#ifdef LEAK_CHK_DEBUG_NEW
#include "debug_new.h"
#endif

namespace {

const ::google::protobuf::Descriptor* CMessageOpenStallRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageOpenStallRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageOpenStallResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageOpenStallResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageProcessReadResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageProcessReadResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageStartStallNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageStartStallNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUpdateTextRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUpdateTextRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUpdateTextResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUpdateTextResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUpdateStallRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUpdateStallRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUpdateStallResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUpdateStallResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUpdatePriceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUpdatePriceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUpdatePriceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUpdatePriceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCloseStallRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCloseStallRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCloseStallResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCloseStallResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageClickStallRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageClickStallRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageClickStallResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageClickStallResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBuyGoodsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBuyGoodsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBuyGoodsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBuyGoodsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCloseStallDlgRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCloseStallDlgRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBStallRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBStallRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageStallGetRecordRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageStallGetRecordRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageStallGetRecordResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageStallGetRecordResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageStallCleanRecordRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageStallCleanRecordRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageStallCleanRecordResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageStallCleanRecordResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StallMessageID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_stallmessage_5fpb_2ehxx() {
  protobuf_AddDesc_stallmessage_5fpb_2ehxx();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "stallmessage_pb.hxx");
  GOOGLE_CHECK(file != NULL);
  CMessageOpenStallRequest_descriptor_ = file->message_type(0);
  static const int CMessageOpenStallRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOpenStallRequest, stallname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOpenStallRequest, adcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOpenStallRequest, stalltype_),
  };
  CMessageOpenStallRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageOpenStallRequest_descriptor_,
      CMessageOpenStallRequest::default_instance_,
      CMessageOpenStallRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOpenStallRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOpenStallRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageOpenStallRequest));
  CMessageOpenStallResponse_descriptor_ = file->message_type(1);
  static const int CMessageOpenStallResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOpenStallResponse, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOpenStallResponse, errorcode_),
  };
  CMessageOpenStallResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageOpenStallResponse_descriptor_,
      CMessageOpenStallResponse::default_instance_,
      CMessageOpenStallResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOpenStallResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOpenStallResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageOpenStallResponse));
  CMessageProcessReadResult_descriptor_ = file->message_type(2);
  static const int CMessageProcessReadResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageProcessReadResult, rtncode_),
  };
  CMessageProcessReadResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageProcessReadResult_descriptor_,
      CMessageProcessReadResult::default_instance_,
      CMessageProcessReadResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageProcessReadResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageProcessReadResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageProcessReadResult));
  CMessageStartStallNotify_descriptor_ = file->message_type(3);
  static const int CMessageStartStallNotify_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStartStallNotify, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStartStallNotify, adcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStartStallNotify, stallname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStartStallNotify, stallindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStartStallNotify, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStartStallNotify, itemlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStartStallNotify, pricetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStartStallNotify, stalltype_),
  };
  CMessageStartStallNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageStartStallNotify_descriptor_,
      CMessageStartStallNotify::default_instance_,
      CMessageStartStallNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStartStallNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStartStallNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageStartStallNotify));
  CMessageUpdateTextRequest_descriptor_ = file->message_type(4);
  static const int CMessageUpdateTextRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateTextRequest, adcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateTextRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateTextRequest, stallname_),
  };
  CMessageUpdateTextRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUpdateTextRequest_descriptor_,
      CMessageUpdateTextRequest::default_instance_,
      CMessageUpdateTextRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateTextRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateTextRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUpdateTextRequest));
  CMessageUpdateTextResponse_descriptor_ = file->message_type(5);
  static const int CMessageUpdateTextResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateTextResponse, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateTextResponse, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateTextResponse, adcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateTextResponse, stallname_),
  };
  CMessageUpdateTextResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUpdateTextResponse_descriptor_,
      CMessageUpdateTextResponse::default_instance_,
      CMessageUpdateTextResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateTextResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateTextResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUpdateTextResponse));
  CMessageUpdateStallRequest_descriptor_ = file->message_type(6);
  static const int CMessageUpdateStallRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateStallRequest, itemindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateStallRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateStallRequest, stallindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateStallRequest, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateStallRequest, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateStallRequest, pricetype_),
  };
  CMessageUpdateStallRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUpdateStallRequest_descriptor_,
      CMessageUpdateStallRequest::default_instance_,
      CMessageUpdateStallRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateStallRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateStallRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUpdateStallRequest));
  CMessageUpdateStallResponse_descriptor_ = file->message_type(7);
  static const int CMessageUpdateStallResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateStallResponse, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateStallResponse, stallindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateStallResponse, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateStallResponse, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateStallResponse, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateStallResponse, pricetype_),
  };
  CMessageUpdateStallResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUpdateStallResponse_descriptor_,
      CMessageUpdateStallResponse::default_instance_,
      CMessageUpdateStallResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateStallResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateStallResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUpdateStallResponse));
  CMessageUpdatePriceRequest_descriptor_ = file->message_type(8);
  static const int CMessageUpdatePriceRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdatePriceRequest, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdatePriceRequest, stallindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdatePriceRequest, pricetype_),
  };
  CMessageUpdatePriceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUpdatePriceRequest_descriptor_,
      CMessageUpdatePriceRequest::default_instance_,
      CMessageUpdatePriceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdatePriceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdatePriceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUpdatePriceRequest));
  CMessageUpdatePriceResponse_descriptor_ = file->message_type(9);
  static const int CMessageUpdatePriceResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdatePriceResponse, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdatePriceResponse, stallindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdatePriceResponse, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdatePriceResponse, pricetype_),
  };
  CMessageUpdatePriceResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUpdatePriceResponse_descriptor_,
      CMessageUpdatePriceResponse::default_instance_,
      CMessageUpdatePriceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdatePriceResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdatePriceResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUpdatePriceResponse));
  CMessageCloseStallRequest_descriptor_ = file->message_type(10);
  static const int CMessageCloseStallRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCloseStallRequest, issaved_),
  };
  CMessageCloseStallRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCloseStallRequest_descriptor_,
      CMessageCloseStallRequest::default_instance_,
      CMessageCloseStallRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCloseStallRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCloseStallRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCloseStallRequest));
  CMessageCloseStallResponse_descriptor_ = file->message_type(11);
  static const int CMessageCloseStallResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCloseStallResponse, entityid_),
  };
  CMessageCloseStallResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCloseStallResponse_descriptor_,
      CMessageCloseStallResponse::default_instance_,
      CMessageCloseStallResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCloseStallResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCloseStallResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCloseStallResponse));
  CMessageClickStallRequest_descriptor_ = file->message_type(12);
  static const int CMessageClickStallRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageClickStallRequest, entityid_),
  };
  CMessageClickStallRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageClickStallRequest_descriptor_,
      CMessageClickStallRequest::default_instance_,
      CMessageClickStallRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageClickStallRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageClickStallRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageClickStallRequest));
  CMessageClickStallResponse_descriptor_ = file->message_type(13);
  static const int CMessageClickStallResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageClickStallResponse, itemlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageClickStallResponse, stallindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageClickStallResponse, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageClickStallResponse, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageClickStallResponse, pricetype_),
  };
  CMessageClickStallResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageClickStallResponse_descriptor_,
      CMessageClickStallResponse::default_instance_,
      CMessageClickStallResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageClickStallResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageClickStallResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageClickStallResponse));
  CMessageBuyGoodsRequest_descriptor_ = file->message_type(14);
  static const int CMessageBuyGoodsRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBuyGoodsRequest, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBuyGoodsRequest, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBuyGoodsRequest, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBuyGoodsRequest, stallindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBuyGoodsRequest, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBuyGoodsRequest, pricetype_),
  };
  CMessageBuyGoodsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBuyGoodsRequest_descriptor_,
      CMessageBuyGoodsRequest::default_instance_,
      CMessageBuyGoodsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBuyGoodsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBuyGoodsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBuyGoodsRequest));
  CMessageBuyGoodsResponse_descriptor_ = file->message_type(15);
  static const int CMessageBuyGoodsResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBuyGoodsResponse, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBuyGoodsResponse, stallindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBuyGoodsResponse, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBuyGoodsResponse, buyerentityid_),
  };
  CMessageBuyGoodsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBuyGoodsResponse_descriptor_,
      CMessageBuyGoodsResponse::default_instance_,
      CMessageBuyGoodsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBuyGoodsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBuyGoodsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBuyGoodsResponse));
  CMessageCloseStallDlgRequest_descriptor_ = file->message_type(16);
  static const int CMessageCloseStallDlgRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCloseStallDlgRequest, entityid_),
  };
  CMessageCloseStallDlgRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCloseStallDlgRequest_descriptor_,
      CMessageCloseStallDlgRequest::default_instance_,
      CMessageCloseStallDlgRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCloseStallDlgRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCloseStallDlgRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCloseStallDlgRequest));
  PBStallRecord_descriptor_ = file->message_type(17);
  static const int PBStallRecord_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStallRecord, mastername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStallRecord, buyername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStallRecord, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStallRecord, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStallRecord, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStallRecord, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStallRecord, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStallRecord, tax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStallRecord, pricetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStallRecord, fee_),
  };
  PBStallRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBStallRecord_descriptor_,
      PBStallRecord::default_instance_,
      PBStallRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStallRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStallRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBStallRecord));
  CMessageStallGetRecordRequest_descriptor_ = file->message_type(18);
  static const int CMessageStallGetRecordRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStallGetRecordRequest, entityid_),
  };
  CMessageStallGetRecordRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageStallGetRecordRequest_descriptor_,
      CMessageStallGetRecordRequest::default_instance_,
      CMessageStallGetRecordRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStallGetRecordRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStallGetRecordRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageStallGetRecordRequest));
  CMessageStallGetRecordResponse_descriptor_ = file->message_type(19);
  static const int CMessageStallGetRecordResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStallGetRecordResponse, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStallGetRecordResponse, record_),
  };
  CMessageStallGetRecordResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageStallGetRecordResponse_descriptor_,
      CMessageStallGetRecordResponse::default_instance_,
      CMessageStallGetRecordResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStallGetRecordResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStallGetRecordResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageStallGetRecordResponse));
  CMessageStallCleanRecordRequest_descriptor_ = file->message_type(20);
  static const int CMessageStallCleanRecordRequest_offsets_[1] = {
  };
  CMessageStallCleanRecordRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageStallCleanRecordRequest_descriptor_,
      CMessageStallCleanRecordRequest::default_instance_,
      CMessageStallCleanRecordRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStallCleanRecordRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStallCleanRecordRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageStallCleanRecordRequest));
  CMessageStallCleanRecordResponse_descriptor_ = file->message_type(21);
  static const int CMessageStallCleanRecordResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStallCleanRecordResponse, rtncode_),
  };
  CMessageStallCleanRecordResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageStallCleanRecordResponse_descriptor_,
      CMessageStallCleanRecordResponse::default_instance_,
      CMessageStallCleanRecordResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStallCleanRecordResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStallCleanRecordResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageStallCleanRecordResponse));
  StallMessageID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_stallmessage_5fpb_2ehxx);
}

void protobuf_RegisterTypes() {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageOpenStallRequest_descriptor_, &CMessageOpenStallRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageOpenStallResponse_descriptor_, &CMessageOpenStallResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageProcessReadResult_descriptor_, &CMessageProcessReadResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageStartStallNotify_descriptor_, &CMessageStartStallNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUpdateTextRequest_descriptor_, &CMessageUpdateTextRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUpdateTextResponse_descriptor_, &CMessageUpdateTextResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUpdateStallRequest_descriptor_, &CMessageUpdateStallRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUpdateStallResponse_descriptor_, &CMessageUpdateStallResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUpdatePriceRequest_descriptor_, &CMessageUpdatePriceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUpdatePriceResponse_descriptor_, &CMessageUpdatePriceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCloseStallRequest_descriptor_, &CMessageCloseStallRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCloseStallResponse_descriptor_, &CMessageCloseStallResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageClickStallRequest_descriptor_, &CMessageClickStallRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageClickStallResponse_descriptor_, &CMessageClickStallResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBuyGoodsRequest_descriptor_, &CMessageBuyGoodsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBuyGoodsResponse_descriptor_, &CMessageBuyGoodsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCloseStallDlgRequest_descriptor_, &CMessageCloseStallDlgRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBStallRecord_descriptor_, &PBStallRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageStallGetRecordRequest_descriptor_, &CMessageStallGetRecordRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageStallGetRecordResponse_descriptor_, &CMessageStallGetRecordResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageStallCleanRecordRequest_descriptor_, &CMessageStallCleanRecordRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageStallCleanRecordResponse_descriptor_, &CMessageStallCleanRecordResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_stallmessage_5fpb_2ehxx() {
  delete CMessageOpenStallRequest::default_instance_;
  delete CMessageOpenStallRequest_reflection_;
  delete CMessageOpenStallResponse::default_instance_;
  delete CMessageOpenStallResponse_reflection_;
  delete CMessageProcessReadResult::default_instance_;
  delete CMessageProcessReadResult_reflection_;
  delete CMessageStartStallNotify::default_instance_;
  delete CMessageStartStallNotify_reflection_;
  delete CMessageUpdateTextRequest::default_instance_;
  delete CMessageUpdateTextRequest_reflection_;
  delete CMessageUpdateTextResponse::default_instance_;
  delete CMessageUpdateTextResponse_reflection_;
  delete CMessageUpdateStallRequest::default_instance_;
  delete CMessageUpdateStallRequest_reflection_;
  delete CMessageUpdateStallResponse::default_instance_;
  delete CMessageUpdateStallResponse_reflection_;
  delete CMessageUpdatePriceRequest::default_instance_;
  delete CMessageUpdatePriceRequest_reflection_;
  delete CMessageUpdatePriceResponse::default_instance_;
  delete CMessageUpdatePriceResponse_reflection_;
  delete CMessageCloseStallRequest::default_instance_;
  delete CMessageCloseStallRequest_reflection_;
  delete CMessageCloseStallResponse::default_instance_;
  delete CMessageCloseStallResponse_reflection_;
  delete CMessageClickStallRequest::default_instance_;
  delete CMessageClickStallRequest_reflection_;
  delete CMessageClickStallResponse::default_instance_;
  delete CMessageClickStallResponse_reflection_;
  delete CMessageBuyGoodsRequest::default_instance_;
  delete CMessageBuyGoodsRequest_reflection_;
  delete CMessageBuyGoodsResponse::default_instance_;
  delete CMessageBuyGoodsResponse_reflection_;
  delete CMessageCloseStallDlgRequest::default_instance_;
  delete CMessageCloseStallDlgRequest_reflection_;
  delete PBStallRecord::default_instance_;
  delete PBStallRecord_reflection_;
  delete CMessageStallGetRecordRequest::default_instance_;
  delete CMessageStallGetRecordRequest_reflection_;
  delete CMessageStallGetRecordResponse::default_instance_;
  delete CMessageStallGetRecordResponse_reflection_;
  delete CMessageStallCleanRecordRequest::default_instance_;
  delete CMessageStallCleanRecordRequest_reflection_;
  delete CMessageStallCleanRecordResponse::default_instance_;
  delete CMessageStallCleanRecordResponse_reflection_;
}

void protobuf_AddDesc_stallmessage_5fpb_2ehxx() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_coremessage_5fpb_2ehxx();
  ::protobuf_AddDesc_property_5fpb_2ehxx();
  #ifndef _NO_PROTOBUF_STR_
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023stallmessage_pb.hxx\032\022coremessage_pb.hx"
    "x\032\017property_pb.hxx\"S\n\030CMessageOpenStallR"
    "equest\022\021\n\tStallName\030\001 \001(\t\022\021\n\tAdContent\030\002"
    " \001(\t\022\021\n\tStallType\030\003 \001(\005\"@\n\031CMessageOpenS"
    "tallResponse\022\020\n\010EntityID\030\001 \001(\r\022\021\n\tErrorC"
    "ode\030\002 \001(\005\",\n\031CMessageProcessReadResult\022\017"
    "\n\007RtnCode\030\001 \001(\r\"\274\001\n\030CMessageStartStallNo"
    "tify\022\020\n\010EntityID\030\001 \001(\r\022\021\n\tAdContent\030\002 \001("
    "\t\022\021\n\tStallName\030\003 \001(\t\022\022\n\nStallIndex\030\004 \003(\r"
    "\022\r\n\005Price\030\005 \003(\r\022\037\n\010ItemList\030\006 \003(\0132\r.PBIt"
    "emObject\022\021\n\tPriceType\030\007 \003(\r\022\021\n\tStallType"
    "\030\010 \001(\005\"O\n\031CMessageUpdateTextRequest\022\021\n\tA"
    "dContent\030\001 \001(\t\022\014\n\004Type\030\002 \001(\r\022\021\n\tStallNam"
    "e\030\003 \001(\t\"b\n\032CMessageUpdateTextResponse\022\020\n"
    "\010EntityID\030\001 \001(\r\022\014\n\004Type\030\002 \001(\r\022\021\n\tAdConte"
    "nt\030\003 \001(\t\022\021\n\tStallName\030\004 \001(\t\"\204\001\n\032CMessage"
    "UpdateStallRequest\022\021\n\tItemIndex\030\001 \001(\r\022\014\n"
    "\004Type\030\002 \001(\r\022\022\n\nStallIndex\030\003 \001(\r\022\017\n\007ItemN"
    "um\030\004 \001(\r\022\r\n\005Price\030\005 \001(\r\022\021\n\tPriceType\030\006 \001"
    "(\r\"\220\001\n\033CMessageUpdateStallResponse\022\020\n\010En"
    "tityID\030\001 \001(\r\022\022\n\nStallIndex\030\002 \001(\r\022\033\n\004Item"
    "\030\003 \001(\0132\r.PBItemObject\022\r\n\005Price\030\004 \001(\r\022\014\n\004"
    "Type\030\005 \001(\r\022\021\n\tPriceType\030\006 \001(\r\"R\n\032CMessag"
    "eUpdatePriceRequest\022\r\n\005Price\030\001 \001(\r\022\022\n\nSt"
    "allIndex\030\002 \001(\r\022\021\n\tPriceType\030\003 \001(\r\"e\n\033CMe"
    "ssageUpdatePriceResponse\022\r\n\005Price\030\001 \001(\r\022"
    "\022\n\nStallIndex\030\002 \001(\r\022\020\n\010EntityID\030\003 \001(\r\022\021\n"
    "\tPriceType\030\004 \001(\r\",\n\031CMessageCloseStallRe"
    "quest\022\017\n\007IsSaved\030\001 \001(\r\".\n\032CMessageCloseS"
    "tallResponse\022\020\n\010EntityID\030\001 \001(\r\"-\n\031CMessa"
    "geClickStallRequest\022\020\n\010EntityID\030\001 \001(\r\"\205\001"
    "\n\032CMessageClickStallResponse\022\037\n\010ItemList"
    "\030\001 \003(\0132\r.PBItemObject\022\022\n\nStallIndex\030\002 \003("
    "\r\022\020\n\010EntityID\030\003 \001(\r\022\r\n\005Price\030\004 \003(\r\022\021\n\tPr"
    "iceType\030\005 \003(\r\"\201\001\n\027CMessageBuyGoodsReques"
    "t\022\r\n\005Price\030\001 \001(\r\022\020\n\010EntityID\030\002 \001(\r\022\016\n\006Nu"
    "mber\030\003 \001(\r\022\022\n\nStallIndex\030\004 \001(\r\022\016\n\006ItemID"
    "\030\005 \001(\r\022\021\n\tPriceType\030\006 \001(\r\"g\n\030CMessageBuy"
    "GoodsResponse\022\020\n\010EntityID\030\001 \001(\r\022\022\n\nStall"
    "Index\030\002 \001(\r\022\016\n\006Number\030\003 \001(\r\022\025\n\rBuyerEnti"
    "tyID\030\004 \001(\r\"0\n\034CMessageCloseStallDlgReque"
    "st\022\020\n\010EntityID\030\001 \001(\r\"\260\001\n\rPBStallRecord\022\022"
    "\n\nMasterName\030\001 \001(\t\022\021\n\tBuyerName\030\002 \001(\t\022\016\n"
    "\006ItemID\030\003 \001(\r\022\016\n\006Number\030\004 \001(\r\022\r\n\005Price\030\005"
    " \001(\r\022\014\n\004Time\030\006 \001(\r\022\016\n\006Action\030\007 \001(\r\022\013\n\003Ta"
    "x\030\010 \001(\r\022\021\n\tPriceType\030\t \001(\r\022\013\n\003Fee\030\n \001(\r\""
    "1\n\035CMessageStallGetRecordRequest\022\020\n\010Enti"
    "tyID\030\001 \001(\r\"R\n\036CMessageStallGetRecordResp"
    "onse\022\020\n\010EntityID\030\001 \001(\r\022\036\n\006Record\030\002 \003(\0132\016"
    ".PBStallRecord\"!\n\037CMessageStallCleanReco"
    "rdRequest\"3\n CMessageStallCleanRecordRes"
    "ponse\022\017\n\007RtnCode\030\001 \001(\r*\274\005\n\016StallMessageI"
    "D\022\035\n\030ID_C2S_REQUEST_OPENSTALL\020\200P\022\036\n\031ID_S"
    "2C_RESPONSE_OPENSTALL\020\201P\022\037\n\032ID_C2S_REQUE"
    "ST_READPROCESS\020\202P\022\035\n\030ID_S2C_NOTIFY_START"
    "STALL\020\203P\022\037\n\032ID_C2S_REQUEST_UPDATEGOODS\020\204"
    "P\022 \n\033ID_S2C_RESPONSE_UPDATEGOODS\020\205P\022\037\n\032I"
    "D_C2S_REQUEST_UPDATEPRICE\020\206P\022 \n\033ID_S2C_R"
    "ESPONSE_UPDATEPRICE\020\207P\022\036\n\031ID_C2S_REQUEST"
    "_CLICKSTALL\020\211P\022\037\n\032ID_S2C_RESPONSE_CLICKS"
    "TALL\020\212P\022\034\n\027ID_C2S_REQUEST_BUYGOODS\020\213P\022\035\n"
    "\030ID_S2C_RESPONSE_BUYGOODS\020\214P\022\036\n\031ID_C2S_R"
    "EQUEST_CLOSESTALL\020\215P\022\037\n\032ID_S2C_RESPONSE_"
    "CLOSESTALL\020\216P\022\037\n\032ID_C2S_REQUEST_CLOSEDIA"
    "LOG\020\217P\022\036\n\031ID_C2S_REQUEST_UPDATETEXT\020\220P\022\037"
    "\n\032ID_S2C_RESPONSE_UPDATETEXT\020\221P\022\037\n\032ID_C2"
    "S_REQUEST_STALLRECORD\020\222P\022 \n\033ID_S2C_RESPO"
    "NSE_STALLRECORD\020\223P\022\037\n\032ID_C2S_REQUEST_CLE"
    "ANRECORD\020\224P\022 \n\033ID_S2C_RESPONSE_CLEANRECO"
    "RD\020\225PB\002H\001", 2769);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "stallmessage_pb.hxx", &protobuf_RegisterTypes);
  #endif
  CMessageOpenStallRequest::default_instance_ = new CMessageOpenStallRequest();
  CMessageOpenStallResponse::default_instance_ = new CMessageOpenStallResponse();
  CMessageProcessReadResult::default_instance_ = new CMessageProcessReadResult();
  CMessageStartStallNotify::default_instance_ = new CMessageStartStallNotify();
  CMessageUpdateTextRequest::default_instance_ = new CMessageUpdateTextRequest();
  CMessageUpdateTextResponse::default_instance_ = new CMessageUpdateTextResponse();
  CMessageUpdateStallRequest::default_instance_ = new CMessageUpdateStallRequest();
  CMessageUpdateStallResponse::default_instance_ = new CMessageUpdateStallResponse();
  CMessageUpdatePriceRequest::default_instance_ = new CMessageUpdatePriceRequest();
  CMessageUpdatePriceResponse::default_instance_ = new CMessageUpdatePriceResponse();
  CMessageCloseStallRequest::default_instance_ = new CMessageCloseStallRequest();
  CMessageCloseStallResponse::default_instance_ = new CMessageCloseStallResponse();
  CMessageClickStallRequest::default_instance_ = new CMessageClickStallRequest();
  CMessageClickStallResponse::default_instance_ = new CMessageClickStallResponse();
  CMessageBuyGoodsRequest::default_instance_ = new CMessageBuyGoodsRequest();
  CMessageBuyGoodsResponse::default_instance_ = new CMessageBuyGoodsResponse();
  CMessageCloseStallDlgRequest::default_instance_ = new CMessageCloseStallDlgRequest();
  PBStallRecord::default_instance_ = new PBStallRecord();
  CMessageStallGetRecordRequest::default_instance_ = new CMessageStallGetRecordRequest();
  CMessageStallGetRecordResponse::default_instance_ = new CMessageStallGetRecordResponse();
  CMessageStallCleanRecordRequest::default_instance_ = new CMessageStallCleanRecordRequest();
  CMessageStallCleanRecordResponse::default_instance_ = new CMessageStallCleanRecordResponse();
  CMessageOpenStallRequest::default_instance_->InitAsDefaultInstance();
  CMessageOpenStallResponse::default_instance_->InitAsDefaultInstance();
  CMessageProcessReadResult::default_instance_->InitAsDefaultInstance();
  CMessageStartStallNotify::default_instance_->InitAsDefaultInstance();
  CMessageUpdateTextRequest::default_instance_->InitAsDefaultInstance();
  CMessageUpdateTextResponse::default_instance_->InitAsDefaultInstance();
  CMessageUpdateStallRequest::default_instance_->InitAsDefaultInstance();
  CMessageUpdateStallResponse::default_instance_->InitAsDefaultInstance();
  CMessageUpdatePriceRequest::default_instance_->InitAsDefaultInstance();
  CMessageUpdatePriceResponse::default_instance_->InitAsDefaultInstance();
  CMessageCloseStallRequest::default_instance_->InitAsDefaultInstance();
  CMessageCloseStallResponse::default_instance_->InitAsDefaultInstance();
  CMessageClickStallRequest::default_instance_->InitAsDefaultInstance();
  CMessageClickStallResponse::default_instance_->InitAsDefaultInstance();
  CMessageBuyGoodsRequest::default_instance_->InitAsDefaultInstance();
  CMessageBuyGoodsResponse::default_instance_->InitAsDefaultInstance();
  CMessageCloseStallDlgRequest::default_instance_->InitAsDefaultInstance();
  PBStallRecord::default_instance_->InitAsDefaultInstance();
  CMessageStallGetRecordRequest::default_instance_->InitAsDefaultInstance();
  CMessageStallGetRecordResponse::default_instance_->InitAsDefaultInstance();
  CMessageStallCleanRecordRequest::default_instance_->InitAsDefaultInstance();
  CMessageStallCleanRecordResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_stallmessage_5fpb_2ehxx);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_stallmessage_5fpb_2ehxx {
  StaticDescriptorInitializer_stallmessage_5fpb_2ehxx() {
    protobuf_AddDesc_stallmessage_5fpb_2ehxx();
  }
} static_descriptor_initializer_stallmessage_5fpb_2ehxx_;

const ::google::protobuf::EnumDescriptor* StallMessageID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StallMessageID_descriptor_;
}
bool StallMessageID_IsValid(int value) {
  switch(value) {
    case 10240:
    case 10241:
    case 10242:
    case 10243:
    case 10244:
    case 10245:
    case 10246:
    case 10247:
    case 10249:
    case 10250:
    case 10251:
    case 10252:
    case 10253:
    case 10254:
    case 10255:
    case 10256:
    case 10257:
    case 10258:
    case 10259:
    case 10260:
    case 10261:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::std::string CMessageOpenStallRequest::_default_stallname_;
const ::std::string CMessageOpenStallRequest::_default_adcontent_;
#ifndef _MSC_VER
const int CMessageOpenStallRequest::kStallNameFieldNumber;
const int CMessageOpenStallRequest::kAdContentFieldNumber;
const int CMessageOpenStallRequest::kStallTypeFieldNumber;
#endif  // !_MSC_VER

CMessageOpenStallRequest::CMessageOpenStallRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageOpenStallRequest::InitAsDefaultInstance() {}

CMessageOpenStallRequest::CMessageOpenStallRequest(const CMessageOpenStallRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageOpenStallRequest::SharedCtor() {
  _cached_size_ = 0;
  stallname_ = const_cast< ::std::string*>(&_default_stallname_);
  adcontent_ = const_cast< ::std::string*>(&_default_adcontent_);
  stalltype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageOpenStallRequest::~CMessageOpenStallRequest() {
  SharedDtor();
}

void CMessageOpenStallRequest::SharedDtor() {
  if (stallname_ != &_default_stallname_) {
    delete stallname_;
  }
  if (adcontent_ != &_default_adcontent_) {
    delete adcontent_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageOpenStallRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageOpenStallRequest_descriptor_;
}

const CMessageOpenStallRequest& CMessageOpenStallRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stallmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageOpenStallRequest* CMessageOpenStallRequest::default_instance_ = NULL;

CMessageOpenStallRequest* CMessageOpenStallRequest::New() const {
  return new CMessageOpenStallRequest;
}

void CMessageOpenStallRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (stallname_ != &_default_stallname_) {
        stallname_->clear();
      }
    }
    if (_has_bit(1)) {
      if (adcontent_ != &_default_adcontent_) {
        adcontent_->clear();
      }
    }
    stalltype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageOpenStallRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string StallName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_stallname()));
        if (input->ExpectTag(18)) goto parse_AdContent;
        break;
      }
      
      // optional string AdContent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_AdContent:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_adcontent()));
        if (input->ExpectTag(24)) goto parse_StallType;
        break;
      }
      
      // optional int32 StallType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_StallType:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &stalltype_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageOpenStallRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageOpenStallRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string StallName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->stallname(), output);
  }
  
  // optional string AdContent = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->adcontent(), output);
  }
  
  // optional int32 StallType = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->stalltype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageOpenStallRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string StallName = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->stallname(), target);
  }
  
  // optional string AdContent = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->adcontent(), target);
  }
  
  // optional int32 StallType = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->stalltype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageOpenStallRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string StallName = 1;
    if (has_stallname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->stallname());
    }
    
    // optional string AdContent = 2;
    if (has_adcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->adcontent());
    }
    
    // optional int32 StallType = 3;
    if (has_stalltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->stalltype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageOpenStallRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageOpenStallRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageOpenStallRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageOpenStallRequest::MergeFrom(const CMessageOpenStallRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_stallname(from.stallname());
    }
    if (from._has_bit(1)) {
      set_adcontent(from.adcontent());
    }
    if (from._has_bit(2)) {
      set_stalltype(from.stalltype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageOpenStallRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageOpenStallRequest::CopyFrom(const CMessageOpenStallRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageOpenStallRequest::Swap(CMessageOpenStallRequest* other) {
  if (other != this) {
    std::swap(stallname_, other->stallname_);
    std::swap(adcontent_, other->adcontent_);
    std::swap(stalltype_, other->stalltype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageOpenStallRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageOpenStallRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageOpenStallRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageOpenStallRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageOpenStallResponse::kEntityIDFieldNumber;
const int CMessageOpenStallResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

CMessageOpenStallResponse::CMessageOpenStallResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageOpenStallResponse::InitAsDefaultInstance() {}

CMessageOpenStallResponse::CMessageOpenStallResponse(const CMessageOpenStallResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageOpenStallResponse::SharedCtor() {
  _cached_size_ = 0;
  entityid_ = 0u;
  errorcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageOpenStallResponse::~CMessageOpenStallResponse() {
  SharedDtor();
}

void CMessageOpenStallResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageOpenStallResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageOpenStallResponse_descriptor_;
}

const CMessageOpenStallResponse& CMessageOpenStallResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stallmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageOpenStallResponse* CMessageOpenStallResponse::default_instance_ = NULL;

CMessageOpenStallResponse* CMessageOpenStallResponse::New() const {
  return new CMessageOpenStallResponse;
}

void CMessageOpenStallResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entityid_ = 0u;
    errorcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageOpenStallResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 EntityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ErrorCode;
        break;
      }
      
      // optional int32 ErrorCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ErrorCode:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &errorcode_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageOpenStallResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageOpenStallResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->entityid(), output);
  }
  
  // optional int32 ErrorCode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(2, this->errorcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageOpenStallResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->entityid(), target);
  }
  
  // optional int32 ErrorCode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(2, this->errorcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageOpenStallResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 EntityID = 1;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
    // optional int32 ErrorCode = 2;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->errorcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageOpenStallResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageOpenStallResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageOpenStallResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageOpenStallResponse::MergeFrom(const CMessageOpenStallResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_entityid(from.entityid());
    }
    if (from._has_bit(1)) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageOpenStallResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageOpenStallResponse::CopyFrom(const CMessageOpenStallResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageOpenStallResponse::Swap(CMessageOpenStallResponse* other) {
  if (other != this) {
    std::swap(entityid_, other->entityid_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageOpenStallResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageOpenStallResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageOpenStallResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageOpenStallResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageProcessReadResult::kRtnCodeFieldNumber;
#endif  // !_MSC_VER

CMessageProcessReadResult::CMessageProcessReadResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageProcessReadResult::InitAsDefaultInstance() {}

CMessageProcessReadResult::CMessageProcessReadResult(const CMessageProcessReadResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageProcessReadResult::SharedCtor() {
  _cached_size_ = 0;
  rtncode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageProcessReadResult::~CMessageProcessReadResult() {
  SharedDtor();
}

void CMessageProcessReadResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageProcessReadResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageProcessReadResult_descriptor_;
}

const CMessageProcessReadResult& CMessageProcessReadResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stallmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageProcessReadResult* CMessageProcessReadResult::default_instance_ = NULL;

CMessageProcessReadResult* CMessageProcessReadResult::New() const {
  return new CMessageProcessReadResult;
}

void CMessageProcessReadResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rtncode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageProcessReadResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RtnCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rtncode_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageProcessReadResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageProcessReadResult::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RtnCode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->rtncode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageProcessReadResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RtnCode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->rtncode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageProcessReadResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RtnCode = 1;
    if (has_rtncode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rtncode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageProcessReadResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageProcessReadResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageProcessReadResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageProcessReadResult::MergeFrom(const CMessageProcessReadResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_rtncode(from.rtncode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageProcessReadResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageProcessReadResult::CopyFrom(const CMessageProcessReadResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageProcessReadResult::Swap(CMessageProcessReadResult* other) {
  if (other != this) {
    std::swap(rtncode_, other->rtncode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageProcessReadResult::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageProcessReadResult::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageProcessReadResult::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageProcessReadResult_reflection_;
}

// ===================================================================

const ::std::string CMessageStartStallNotify::_default_adcontent_;
const ::std::string CMessageStartStallNotify::_default_stallname_;
#ifndef _MSC_VER
const int CMessageStartStallNotify::kEntityIDFieldNumber;
const int CMessageStartStallNotify::kAdContentFieldNumber;
const int CMessageStartStallNotify::kStallNameFieldNumber;
const int CMessageStartStallNotify::kStallIndexFieldNumber;
const int CMessageStartStallNotify::kPriceFieldNumber;
const int CMessageStartStallNotify::kItemListFieldNumber;
const int CMessageStartStallNotify::kPriceTypeFieldNumber;
const int CMessageStartStallNotify::kStallTypeFieldNumber;
#endif  // !_MSC_VER

CMessageStartStallNotify::CMessageStartStallNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageStartStallNotify::InitAsDefaultInstance() {}

CMessageStartStallNotify::CMessageStartStallNotify(const CMessageStartStallNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageStartStallNotify::SharedCtor() {
  _cached_size_ = 0;
  entityid_ = 0u;
  adcontent_ = const_cast< ::std::string*>(&_default_adcontent_);
  stallname_ = const_cast< ::std::string*>(&_default_stallname_);
  stalltype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageStartStallNotify::~CMessageStartStallNotify() {
  SharedDtor();
}

void CMessageStartStallNotify::SharedDtor() {
  if (adcontent_ != &_default_adcontent_) {
    delete adcontent_;
  }
  if (stallname_ != &_default_stallname_) {
    delete stallname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageStartStallNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageStartStallNotify_descriptor_;
}

const CMessageStartStallNotify& CMessageStartStallNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stallmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageStartStallNotify* CMessageStartStallNotify::default_instance_ = NULL;

CMessageStartStallNotify* CMessageStartStallNotify::New() const {
  return new CMessageStartStallNotify;
}

void CMessageStartStallNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entityid_ = 0u;
    if (_has_bit(1)) {
      if (adcontent_ != &_default_adcontent_) {
        adcontent_->clear();
      }
    }
    if (_has_bit(2)) {
      if (stallname_ != &_default_stallname_) {
        stallname_->clear();
      }
    }
    stalltype_ = 0;
  }
  stallindex_.Clear();
  price_.Clear();
  itemlist_.Clear();
  pricetype_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageStartStallNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 EntityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_AdContent;
        break;
      }
      
      // optional string AdContent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_AdContent:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_adcontent()));
        if (input->ExpectTag(26)) goto parse_StallName;
        break;
      }
      
      // optional string StallName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_StallName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_stallname()));
        if (input->ExpectTag(32)) goto parse_StallIndex;
        break;
      }
      
      // repeated uint32 StallIndex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_StallIndex:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_stallindex(value);
        if (input->ExpectTag(32)) goto parse_StallIndex;
        if (input->ExpectTag(40)) goto parse_Price;
        break;
      }
      
      // repeated uint32 Price = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Price:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_price(value);
        if (input->ExpectTag(40)) goto parse_Price;
        if (input->ExpectTag(50)) goto parse_ItemList;
        break;
      }
      
      // repeated .PBItemObject ItemList = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ItemList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_itemlist()));
        if (input->ExpectTag(50)) goto parse_ItemList;
        if (input->ExpectTag(56)) goto parse_PriceType;
        break;
      }
      
      // repeated uint32 PriceType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PriceType:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_pricetype(value);
        if (input->ExpectTag(56)) goto parse_PriceType;
        if (input->ExpectTag(64)) goto parse_StallType;
        break;
      }
      
      // optional int32 StallType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_StallType:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &stalltype_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageStartStallNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageStartStallNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->entityid(), output);
  }
  
  // optional string AdContent = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->adcontent(), output);
  }
  
  // optional string StallName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->stallname(), output);
  }
  
  // repeated uint32 StallIndex = 4;
  for (int i = 0; i < this->stallindex_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->stallindex(i), output);
  }
  
  // repeated uint32 Price = 5;
  for (int i = 0; i < this->price_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->price(i), output);
  }
  
  // repeated .PBItemObject ItemList = 6;
  for (int i = 0; i < this->itemlist_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(6, this->itemlist(i), output);
  }
  
  // repeated uint32 PriceType = 7;
  for (int i = 0; i < this->pricetype_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->pricetype(i), output);
  }
  
  // optional int32 StallType = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(8, this->stalltype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageStartStallNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->entityid(), target);
  }
  
  // optional string AdContent = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->adcontent(), target);
  }
  
  // optional string StallName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->stallname(), target);
  }
  
  // repeated uint32 StallIndex = 4;
  for (int i = 0; i < this->stallindex_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->stallindex(i), target);
  }
  
  // repeated uint32 Price = 5;
  for (int i = 0; i < this->price_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->price(i), target);
  }
  
  // repeated .PBItemObject ItemList = 6;
  for (int i = 0; i < this->itemlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(6, this->itemlist(i), target);
  }
  
  // repeated uint32 PriceType = 7;
  for (int i = 0; i < this->pricetype_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->pricetype(i), target);
  }
  
  // optional int32 StallType = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(8, this->stalltype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageStartStallNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 EntityID = 1;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
    // optional string AdContent = 2;
    if (has_adcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->adcontent());
    }
    
    // optional string StallName = 3;
    if (has_stallname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->stallname());
    }
    
    // optional int32 StallType = 8;
    if (has_stalltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->stalltype());
    }
    
  }
  // repeated uint32 StallIndex = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->stallindex_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->stallindex(i));
    }
    total_size += 1 * this->stallindex_size() + data_size;
  }
  
  // repeated uint32 Price = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->price_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->price(i));
    }
    total_size += 1 * this->price_size() + data_size;
  }
  
  // repeated .PBItemObject ItemList = 6;
  total_size += 1 * this->itemlist_size();
  for (int i = 0; i < this->itemlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->itemlist(i));
  }
  
  // repeated uint32 PriceType = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->pricetype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->pricetype(i));
    }
    total_size += 1 * this->pricetype_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageStartStallNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageStartStallNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageStartStallNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageStartStallNotify::MergeFrom(const CMessageStartStallNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  stallindex_.MergeFrom(from.stallindex_);
  price_.MergeFrom(from.price_);
  itemlist_.MergeFrom(from.itemlist_);
  pricetype_.MergeFrom(from.pricetype_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_entityid(from.entityid());
    }
    if (from._has_bit(1)) {
      set_adcontent(from.adcontent());
    }
    if (from._has_bit(2)) {
      set_stallname(from.stallname());
    }
    if (from._has_bit(7)) {
      set_stalltype(from.stalltype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageStartStallNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageStartStallNotify::CopyFrom(const CMessageStartStallNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageStartStallNotify::Swap(CMessageStartStallNotify* other) {
  if (other != this) {
    std::swap(entityid_, other->entityid_);
    std::swap(adcontent_, other->adcontent_);
    std::swap(stallname_, other->stallname_);
    stallindex_.Swap(&other->stallindex_);
    price_.Swap(&other->price_);
    itemlist_.Swap(&other->itemlist_);
    pricetype_.Swap(&other->pricetype_);
    std::swap(stalltype_, other->stalltype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageStartStallNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageStartStallNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageStartStallNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageStartStallNotify_reflection_;
}

// ===================================================================

const ::std::string CMessageUpdateTextRequest::_default_adcontent_;
const ::std::string CMessageUpdateTextRequest::_default_stallname_;
#ifndef _MSC_VER
const int CMessageUpdateTextRequest::kAdContentFieldNumber;
const int CMessageUpdateTextRequest::kTypeFieldNumber;
const int CMessageUpdateTextRequest::kStallNameFieldNumber;
#endif  // !_MSC_VER

CMessageUpdateTextRequest::CMessageUpdateTextRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUpdateTextRequest::InitAsDefaultInstance() {}

CMessageUpdateTextRequest::CMessageUpdateTextRequest(const CMessageUpdateTextRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUpdateTextRequest::SharedCtor() {
  _cached_size_ = 0;
  adcontent_ = const_cast< ::std::string*>(&_default_adcontent_);
  type_ = 0u;
  stallname_ = const_cast< ::std::string*>(&_default_stallname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUpdateTextRequest::~CMessageUpdateTextRequest() {
  SharedDtor();
}

void CMessageUpdateTextRequest::SharedDtor() {
  if (adcontent_ != &_default_adcontent_) {
    delete adcontent_;
  }
  if (stallname_ != &_default_stallname_) {
    delete stallname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageUpdateTextRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUpdateTextRequest_descriptor_;
}

const CMessageUpdateTextRequest& CMessageUpdateTextRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stallmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageUpdateTextRequest* CMessageUpdateTextRequest::default_instance_ = NULL;

CMessageUpdateTextRequest* CMessageUpdateTextRequest::New() const {
  return new CMessageUpdateTextRequest;
}

void CMessageUpdateTextRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (adcontent_ != &_default_adcontent_) {
        adcontent_->clear();
      }
    }
    type_ = 0u;
    if (_has_bit(2)) {
      if (stallname_ != &_default_stallname_) {
        stallname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUpdateTextRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string AdContent = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_adcontent()));
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }
      
      // optional uint32 Type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Type:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_StallName;
        break;
      }
      
      // optional string StallName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_StallName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_stallname()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUpdateTextRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUpdateTextRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string AdContent = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->adcontent(), output);
  }
  
  // optional uint32 Type = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->type(), output);
  }
  
  // optional string StallName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->stallname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUpdateTextRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string AdContent = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->adcontent(), target);
  }
  
  // optional uint32 Type = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->type(), target);
  }
  
  // optional string StallName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->stallname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUpdateTextRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string AdContent = 1;
    if (has_adcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->adcontent());
    }
    
    // optional uint32 Type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
    // optional string StallName = 3;
    if (has_stallname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->stallname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUpdateTextRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUpdateTextRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUpdateTextRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUpdateTextRequest::MergeFrom(const CMessageUpdateTextRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_adcontent(from.adcontent());
    }
    if (from._has_bit(1)) {
      set_type(from.type());
    }
    if (from._has_bit(2)) {
      set_stallname(from.stallname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUpdateTextRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUpdateTextRequest::CopyFrom(const CMessageUpdateTextRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUpdateTextRequest::Swap(CMessageUpdateTextRequest* other) {
  if (other != this) {
    std::swap(adcontent_, other->adcontent_);
    std::swap(type_, other->type_);
    std::swap(stallname_, other->stallname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUpdateTextRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUpdateTextRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUpdateTextRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUpdateTextRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageUpdateTextResponse::_default_adcontent_;
const ::std::string CMessageUpdateTextResponse::_default_stallname_;
#ifndef _MSC_VER
const int CMessageUpdateTextResponse::kEntityIDFieldNumber;
const int CMessageUpdateTextResponse::kTypeFieldNumber;
const int CMessageUpdateTextResponse::kAdContentFieldNumber;
const int CMessageUpdateTextResponse::kStallNameFieldNumber;
#endif  // !_MSC_VER

CMessageUpdateTextResponse::CMessageUpdateTextResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUpdateTextResponse::InitAsDefaultInstance() {}

CMessageUpdateTextResponse::CMessageUpdateTextResponse(const CMessageUpdateTextResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUpdateTextResponse::SharedCtor() {
  _cached_size_ = 0;
  entityid_ = 0u;
  type_ = 0u;
  adcontent_ = const_cast< ::std::string*>(&_default_adcontent_);
  stallname_ = const_cast< ::std::string*>(&_default_stallname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUpdateTextResponse::~CMessageUpdateTextResponse() {
  SharedDtor();
}

void CMessageUpdateTextResponse::SharedDtor() {
  if (adcontent_ != &_default_adcontent_) {
    delete adcontent_;
  }
  if (stallname_ != &_default_stallname_) {
    delete stallname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageUpdateTextResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUpdateTextResponse_descriptor_;
}

const CMessageUpdateTextResponse& CMessageUpdateTextResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stallmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageUpdateTextResponse* CMessageUpdateTextResponse::default_instance_ = NULL;

CMessageUpdateTextResponse* CMessageUpdateTextResponse::New() const {
  return new CMessageUpdateTextResponse;
}

void CMessageUpdateTextResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entityid_ = 0u;
    type_ = 0u;
    if (_has_bit(2)) {
      if (adcontent_ != &_default_adcontent_) {
        adcontent_->clear();
      }
    }
    if (_has_bit(3)) {
      if (stallname_ != &_default_stallname_) {
        stallname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUpdateTextResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 EntityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }
      
      // optional uint32 Type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Type:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_AdContent;
        break;
      }
      
      // optional string AdContent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_AdContent:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_adcontent()));
        if (input->ExpectTag(34)) goto parse_StallName;
        break;
      }
      
      // optional string StallName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_StallName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_stallname()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUpdateTextResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUpdateTextResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->entityid(), output);
  }
  
  // optional uint32 Type = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->type(), output);
  }
  
  // optional string AdContent = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->adcontent(), output);
  }
  
  // optional string StallName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->stallname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUpdateTextResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->entityid(), target);
  }
  
  // optional uint32 Type = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->type(), target);
  }
  
  // optional string AdContent = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->adcontent(), target);
  }
  
  // optional string StallName = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->stallname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUpdateTextResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 EntityID = 1;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
    // optional uint32 Type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
    // optional string AdContent = 3;
    if (has_adcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->adcontent());
    }
    
    // optional string StallName = 4;
    if (has_stallname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->stallname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUpdateTextResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUpdateTextResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUpdateTextResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUpdateTextResponse::MergeFrom(const CMessageUpdateTextResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_entityid(from.entityid());
    }
    if (from._has_bit(1)) {
      set_type(from.type());
    }
    if (from._has_bit(2)) {
      set_adcontent(from.adcontent());
    }
    if (from._has_bit(3)) {
      set_stallname(from.stallname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUpdateTextResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUpdateTextResponse::CopyFrom(const CMessageUpdateTextResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUpdateTextResponse::Swap(CMessageUpdateTextResponse* other) {
  if (other != this) {
    std::swap(entityid_, other->entityid_);
    std::swap(type_, other->type_);
    std::swap(adcontent_, other->adcontent_);
    std::swap(stallname_, other->stallname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUpdateTextResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUpdateTextResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUpdateTextResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUpdateTextResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageUpdateStallRequest::kItemIndexFieldNumber;
const int CMessageUpdateStallRequest::kTypeFieldNumber;
const int CMessageUpdateStallRequest::kStallIndexFieldNumber;
const int CMessageUpdateStallRequest::kItemNumFieldNumber;
const int CMessageUpdateStallRequest::kPriceFieldNumber;
const int CMessageUpdateStallRequest::kPriceTypeFieldNumber;
#endif  // !_MSC_VER

CMessageUpdateStallRequest::CMessageUpdateStallRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUpdateStallRequest::InitAsDefaultInstance() {}

CMessageUpdateStallRequest::CMessageUpdateStallRequest(const CMessageUpdateStallRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUpdateStallRequest::SharedCtor() {
  _cached_size_ = 0;
  itemindex_ = 0u;
  type_ = 0u;
  stallindex_ = 0u;
  itemnum_ = 0u;
  price_ = 0u;
  pricetype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUpdateStallRequest::~CMessageUpdateStallRequest() {
  SharedDtor();
}

void CMessageUpdateStallRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageUpdateStallRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUpdateStallRequest_descriptor_;
}

const CMessageUpdateStallRequest& CMessageUpdateStallRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stallmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageUpdateStallRequest* CMessageUpdateStallRequest::default_instance_ = NULL;

CMessageUpdateStallRequest* CMessageUpdateStallRequest::New() const {
  return new CMessageUpdateStallRequest;
}

void CMessageUpdateStallRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemindex_ = 0u;
    type_ = 0u;
    stallindex_ = 0u;
    itemnum_ = 0u;
    price_ = 0u;
    pricetype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUpdateStallRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ItemIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemindex_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }
      
      // optional uint32 Type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Type:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_StallIndex;
        break;
      }
      
      // optional uint32 StallIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_StallIndex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &stallindex_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_ItemNum;
        break;
      }
      
      // optional uint32 ItemNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemnum_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Price;
        break;
      }
      
      // optional uint32 Price = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Price:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &price_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_PriceType;
        break;
      }
      
      // optional uint32 PriceType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PriceType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pricetype_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUpdateStallRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUpdateStallRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ItemIndex = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->itemindex(), output);
  }
  
  // optional uint32 Type = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->type(), output);
  }
  
  // optional uint32 StallIndex = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->stallindex(), output);
  }
  
  // optional uint32 ItemNum = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->itemnum(), output);
  }
  
  // optional uint32 Price = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->price(), output);
  }
  
  // optional uint32 PriceType = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->pricetype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUpdateStallRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ItemIndex = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->itemindex(), target);
  }
  
  // optional uint32 Type = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->type(), target);
  }
  
  // optional uint32 StallIndex = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->stallindex(), target);
  }
  
  // optional uint32 ItemNum = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->itemnum(), target);
  }
  
  // optional uint32 Price = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->price(), target);
  }
  
  // optional uint32 PriceType = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->pricetype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUpdateStallRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ItemIndex = 1;
    if (has_itemindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemindex());
    }
    
    // optional uint32 Type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
    // optional uint32 StallIndex = 3;
    if (has_stallindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->stallindex());
    }
    
    // optional uint32 ItemNum = 4;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemnum());
    }
    
    // optional uint32 Price = 5;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->price());
    }
    
    // optional uint32 PriceType = 6;
    if (has_pricetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pricetype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUpdateStallRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUpdateStallRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUpdateStallRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUpdateStallRequest::MergeFrom(const CMessageUpdateStallRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_itemindex(from.itemindex());
    }
    if (from._has_bit(1)) {
      set_type(from.type());
    }
    if (from._has_bit(2)) {
      set_stallindex(from.stallindex());
    }
    if (from._has_bit(3)) {
      set_itemnum(from.itemnum());
    }
    if (from._has_bit(4)) {
      set_price(from.price());
    }
    if (from._has_bit(5)) {
      set_pricetype(from.pricetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUpdateStallRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUpdateStallRequest::CopyFrom(const CMessageUpdateStallRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUpdateStallRequest::Swap(CMessageUpdateStallRequest* other) {
  if (other != this) {
    std::swap(itemindex_, other->itemindex_);
    std::swap(type_, other->type_);
    std::swap(stallindex_, other->stallindex_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(price_, other->price_);
    std::swap(pricetype_, other->pricetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUpdateStallRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUpdateStallRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUpdateStallRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUpdateStallRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageUpdateStallResponse::kEntityIDFieldNumber;
const int CMessageUpdateStallResponse::kStallIndexFieldNumber;
const int CMessageUpdateStallResponse::kItemFieldNumber;
const int CMessageUpdateStallResponse::kPriceFieldNumber;
const int CMessageUpdateStallResponse::kTypeFieldNumber;
const int CMessageUpdateStallResponse::kPriceTypeFieldNumber;
#endif  // !_MSC_VER

CMessageUpdateStallResponse::CMessageUpdateStallResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUpdateStallResponse::InitAsDefaultInstance() {  item_ = const_cast< ::PBItemObject*>(&::PBItemObject::default_instance());
}

CMessageUpdateStallResponse::CMessageUpdateStallResponse(const CMessageUpdateStallResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUpdateStallResponse::SharedCtor() {
  _cached_size_ = 0;
  entityid_ = 0u;
  stallindex_ = 0u;
  item_ = NULL;
  price_ = 0u;
  type_ = 0u;
  pricetype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUpdateStallResponse::~CMessageUpdateStallResponse() {
  SharedDtor();
}

void CMessageUpdateStallResponse::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

const ::google::protobuf::Descriptor* CMessageUpdateStallResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUpdateStallResponse_descriptor_;
}

const CMessageUpdateStallResponse& CMessageUpdateStallResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stallmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageUpdateStallResponse* CMessageUpdateStallResponse::default_instance_ = NULL;

CMessageUpdateStallResponse* CMessageUpdateStallResponse::New() const {
  return new CMessageUpdateStallResponse;
}

void CMessageUpdateStallResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entityid_ = 0u;
    stallindex_ = 0u;
    if (_has_bit(2)) {
      if (item_ != NULL) item_->::PBItemObject::Clear();
    }
    price_ = 0u;
    type_ = 0u;
    pricetype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUpdateStallResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 EntityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_StallIndex;
        break;
      }
      
      // optional uint32 StallIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_StallIndex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &stallindex_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_Item;
        break;
      }
      
      // optional .PBItemObject Item = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Item:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_item()));
        if (input->ExpectTag(32)) goto parse_Price;
        break;
      }
      
      // optional uint32 Price = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Price:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &price_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Type;
        break;
      }
      
      // optional uint32 Type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Type:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_PriceType;
        break;
      }
      
      // optional uint32 PriceType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PriceType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pricetype_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUpdateStallResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUpdateStallResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->entityid(), output);
  }
  
  // optional uint32 StallIndex = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->stallindex(), output);
  }
  
  // optional .PBItemObject Item = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->item(), output);
  }
  
  // optional uint32 Price = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->price(), output);
  }
  
  // optional uint32 Type = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->type(), output);
  }
  
  // optional uint32 PriceType = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->pricetype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUpdateStallResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->entityid(), target);
  }
  
  // optional uint32 StallIndex = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->stallindex(), target);
  }
  
  // optional .PBItemObject Item = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->item(), target);
  }
  
  // optional uint32 Price = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->price(), target);
  }
  
  // optional uint32 Type = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->type(), target);
  }
  
  // optional uint32 PriceType = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->pricetype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUpdateStallResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 EntityID = 1;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
    // optional uint32 StallIndex = 2;
    if (has_stallindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->stallindex());
    }
    
    // optional .PBItemObject Item = 3;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->item());
    }
    
    // optional uint32 Price = 4;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->price());
    }
    
    // optional uint32 Type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
    // optional uint32 PriceType = 6;
    if (has_pricetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pricetype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUpdateStallResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUpdateStallResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUpdateStallResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUpdateStallResponse::MergeFrom(const CMessageUpdateStallResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_entityid(from.entityid());
    }
    if (from._has_bit(1)) {
      set_stallindex(from.stallindex());
    }
    if (from._has_bit(2)) {
      mutable_item()->::PBItemObject::MergeFrom(from.item());
    }
    if (from._has_bit(3)) {
      set_price(from.price());
    }
    if (from._has_bit(4)) {
      set_type(from.type());
    }
    if (from._has_bit(5)) {
      set_pricetype(from.pricetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUpdateStallResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUpdateStallResponse::CopyFrom(const CMessageUpdateStallResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUpdateStallResponse::Swap(CMessageUpdateStallResponse* other) {
  if (other != this) {
    std::swap(entityid_, other->entityid_);
    std::swap(stallindex_, other->stallindex_);
    std::swap(item_, other->item_);
    std::swap(price_, other->price_);
    std::swap(type_, other->type_);
    std::swap(pricetype_, other->pricetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUpdateStallResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUpdateStallResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUpdateStallResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUpdateStallResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageUpdatePriceRequest::kPriceFieldNumber;
const int CMessageUpdatePriceRequest::kStallIndexFieldNumber;
const int CMessageUpdatePriceRequest::kPriceTypeFieldNumber;
#endif  // !_MSC_VER

CMessageUpdatePriceRequest::CMessageUpdatePriceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUpdatePriceRequest::InitAsDefaultInstance() {}

CMessageUpdatePriceRequest::CMessageUpdatePriceRequest(const CMessageUpdatePriceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUpdatePriceRequest::SharedCtor() {
  _cached_size_ = 0;
  price_ = 0u;
  stallindex_ = 0u;
  pricetype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUpdatePriceRequest::~CMessageUpdatePriceRequest() {
  SharedDtor();
}

void CMessageUpdatePriceRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageUpdatePriceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUpdatePriceRequest_descriptor_;
}

const CMessageUpdatePriceRequest& CMessageUpdatePriceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stallmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageUpdatePriceRequest* CMessageUpdatePriceRequest::default_instance_ = NULL;

CMessageUpdatePriceRequest* CMessageUpdatePriceRequest::New() const {
  return new CMessageUpdatePriceRequest;
}

void CMessageUpdatePriceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    price_ = 0u;
    stallindex_ = 0u;
    pricetype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUpdatePriceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Price = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &price_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_StallIndex;
        break;
      }
      
      // optional uint32 StallIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_StallIndex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &stallindex_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_PriceType;
        break;
      }
      
      // optional uint32 PriceType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PriceType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pricetype_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUpdatePriceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUpdatePriceRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Price = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->price(), output);
  }
  
  // optional uint32 StallIndex = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->stallindex(), output);
  }
  
  // optional uint32 PriceType = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->pricetype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUpdatePriceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Price = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->price(), target);
  }
  
  // optional uint32 StallIndex = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->stallindex(), target);
  }
  
  // optional uint32 PriceType = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->pricetype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUpdatePriceRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Price = 1;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->price());
    }
    
    // optional uint32 StallIndex = 2;
    if (has_stallindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->stallindex());
    }
    
    // optional uint32 PriceType = 3;
    if (has_pricetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pricetype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUpdatePriceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUpdatePriceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUpdatePriceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUpdatePriceRequest::MergeFrom(const CMessageUpdatePriceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_price(from.price());
    }
    if (from._has_bit(1)) {
      set_stallindex(from.stallindex());
    }
    if (from._has_bit(2)) {
      set_pricetype(from.pricetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUpdatePriceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUpdatePriceRequest::CopyFrom(const CMessageUpdatePriceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUpdatePriceRequest::Swap(CMessageUpdatePriceRequest* other) {
  if (other != this) {
    std::swap(price_, other->price_);
    std::swap(stallindex_, other->stallindex_);
    std::swap(pricetype_, other->pricetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUpdatePriceRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUpdatePriceRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUpdatePriceRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUpdatePriceRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageUpdatePriceResponse::kPriceFieldNumber;
const int CMessageUpdatePriceResponse::kStallIndexFieldNumber;
const int CMessageUpdatePriceResponse::kEntityIDFieldNumber;
const int CMessageUpdatePriceResponse::kPriceTypeFieldNumber;
#endif  // !_MSC_VER

CMessageUpdatePriceResponse::CMessageUpdatePriceResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUpdatePriceResponse::InitAsDefaultInstance() {}

CMessageUpdatePriceResponse::CMessageUpdatePriceResponse(const CMessageUpdatePriceResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUpdatePriceResponse::SharedCtor() {
  _cached_size_ = 0;
  price_ = 0u;
  stallindex_ = 0u;
  entityid_ = 0u;
  pricetype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUpdatePriceResponse::~CMessageUpdatePriceResponse() {
  SharedDtor();
}

void CMessageUpdatePriceResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageUpdatePriceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUpdatePriceResponse_descriptor_;
}

const CMessageUpdatePriceResponse& CMessageUpdatePriceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stallmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageUpdatePriceResponse* CMessageUpdatePriceResponse::default_instance_ = NULL;

CMessageUpdatePriceResponse* CMessageUpdatePriceResponse::New() const {
  return new CMessageUpdatePriceResponse;
}

void CMessageUpdatePriceResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    price_ = 0u;
    stallindex_ = 0u;
    entityid_ = 0u;
    pricetype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUpdatePriceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Price = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &price_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_StallIndex;
        break;
      }
      
      // optional uint32 StallIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_StallIndex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &stallindex_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_EntityID;
        break;
      }
      
      // optional uint32 EntityID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_PriceType;
        break;
      }
      
      // optional uint32 PriceType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PriceType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pricetype_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUpdatePriceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUpdatePriceResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Price = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->price(), output);
  }
  
  // optional uint32 StallIndex = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->stallindex(), output);
  }
  
  // optional uint32 EntityID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->entityid(), output);
  }
  
  // optional uint32 PriceType = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->pricetype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUpdatePriceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Price = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->price(), target);
  }
  
  // optional uint32 StallIndex = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->stallindex(), target);
  }
  
  // optional uint32 EntityID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->entityid(), target);
  }
  
  // optional uint32 PriceType = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->pricetype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUpdatePriceResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Price = 1;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->price());
    }
    
    // optional uint32 StallIndex = 2;
    if (has_stallindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->stallindex());
    }
    
    // optional uint32 EntityID = 3;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
    // optional uint32 PriceType = 4;
    if (has_pricetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pricetype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUpdatePriceResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUpdatePriceResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUpdatePriceResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUpdatePriceResponse::MergeFrom(const CMessageUpdatePriceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_price(from.price());
    }
    if (from._has_bit(1)) {
      set_stallindex(from.stallindex());
    }
    if (from._has_bit(2)) {
      set_entityid(from.entityid());
    }
    if (from._has_bit(3)) {
      set_pricetype(from.pricetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUpdatePriceResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUpdatePriceResponse::CopyFrom(const CMessageUpdatePriceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUpdatePriceResponse::Swap(CMessageUpdatePriceResponse* other) {
  if (other != this) {
    std::swap(price_, other->price_);
    std::swap(stallindex_, other->stallindex_);
    std::swap(entityid_, other->entityid_);
    std::swap(pricetype_, other->pricetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUpdatePriceResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUpdatePriceResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUpdatePriceResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUpdatePriceResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCloseStallRequest::kIsSavedFieldNumber;
#endif  // !_MSC_VER

CMessageCloseStallRequest::CMessageCloseStallRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCloseStallRequest::InitAsDefaultInstance() {}

CMessageCloseStallRequest::CMessageCloseStallRequest(const CMessageCloseStallRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCloseStallRequest::SharedCtor() {
  _cached_size_ = 0;
  issaved_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCloseStallRequest::~CMessageCloseStallRequest() {
  SharedDtor();
}

void CMessageCloseStallRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCloseStallRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCloseStallRequest_descriptor_;
}

const CMessageCloseStallRequest& CMessageCloseStallRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stallmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCloseStallRequest* CMessageCloseStallRequest::default_instance_ = NULL;

CMessageCloseStallRequest* CMessageCloseStallRequest::New() const {
  return new CMessageCloseStallRequest;
}

void CMessageCloseStallRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    issaved_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCloseStallRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 IsSaved = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &issaved_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCloseStallRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCloseStallRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 IsSaved = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->issaved(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCloseStallRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 IsSaved = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->issaved(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCloseStallRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 IsSaved = 1;
    if (has_issaved()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->issaved());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCloseStallRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCloseStallRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCloseStallRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCloseStallRequest::MergeFrom(const CMessageCloseStallRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_issaved(from.issaved());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCloseStallRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCloseStallRequest::CopyFrom(const CMessageCloseStallRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCloseStallRequest::Swap(CMessageCloseStallRequest* other) {
  if (other != this) {
    std::swap(issaved_, other->issaved_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCloseStallRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCloseStallRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCloseStallRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCloseStallRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCloseStallResponse::kEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageCloseStallResponse::CMessageCloseStallResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCloseStallResponse::InitAsDefaultInstance() {}

CMessageCloseStallResponse::CMessageCloseStallResponse(const CMessageCloseStallResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCloseStallResponse::SharedCtor() {
  _cached_size_ = 0;
  entityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCloseStallResponse::~CMessageCloseStallResponse() {
  SharedDtor();
}

void CMessageCloseStallResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCloseStallResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCloseStallResponse_descriptor_;
}

const CMessageCloseStallResponse& CMessageCloseStallResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stallmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCloseStallResponse* CMessageCloseStallResponse::default_instance_ = NULL;

CMessageCloseStallResponse* CMessageCloseStallResponse::New() const {
  return new CMessageCloseStallResponse;
}

void CMessageCloseStallResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCloseStallResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 EntityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCloseStallResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCloseStallResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->entityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCloseStallResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->entityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCloseStallResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 EntityID = 1;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCloseStallResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCloseStallResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCloseStallResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCloseStallResponse::MergeFrom(const CMessageCloseStallResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_entityid(from.entityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCloseStallResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCloseStallResponse::CopyFrom(const CMessageCloseStallResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCloseStallResponse::Swap(CMessageCloseStallResponse* other) {
  if (other != this) {
    std::swap(entityid_, other->entityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCloseStallResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCloseStallResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCloseStallResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCloseStallResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageClickStallRequest::kEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageClickStallRequest::CMessageClickStallRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageClickStallRequest::InitAsDefaultInstance() {}

CMessageClickStallRequest::CMessageClickStallRequest(const CMessageClickStallRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageClickStallRequest::SharedCtor() {
  _cached_size_ = 0;
  entityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageClickStallRequest::~CMessageClickStallRequest() {
  SharedDtor();
}

void CMessageClickStallRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageClickStallRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageClickStallRequest_descriptor_;
}

const CMessageClickStallRequest& CMessageClickStallRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stallmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageClickStallRequest* CMessageClickStallRequest::default_instance_ = NULL;

CMessageClickStallRequest* CMessageClickStallRequest::New() const {
  return new CMessageClickStallRequest;
}

void CMessageClickStallRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageClickStallRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 EntityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageClickStallRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageClickStallRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->entityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageClickStallRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->entityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageClickStallRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 EntityID = 1;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageClickStallRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageClickStallRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageClickStallRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageClickStallRequest::MergeFrom(const CMessageClickStallRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_entityid(from.entityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageClickStallRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageClickStallRequest::CopyFrom(const CMessageClickStallRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageClickStallRequest::Swap(CMessageClickStallRequest* other) {
  if (other != this) {
    std::swap(entityid_, other->entityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageClickStallRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageClickStallRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageClickStallRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageClickStallRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageClickStallResponse::kItemListFieldNumber;
const int CMessageClickStallResponse::kStallIndexFieldNumber;
const int CMessageClickStallResponse::kEntityIDFieldNumber;
const int CMessageClickStallResponse::kPriceFieldNumber;
const int CMessageClickStallResponse::kPriceTypeFieldNumber;
#endif  // !_MSC_VER

CMessageClickStallResponse::CMessageClickStallResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageClickStallResponse::InitAsDefaultInstance() {}

CMessageClickStallResponse::CMessageClickStallResponse(const CMessageClickStallResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageClickStallResponse::SharedCtor() {
  _cached_size_ = 0;
  entityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageClickStallResponse::~CMessageClickStallResponse() {
  SharedDtor();
}

void CMessageClickStallResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageClickStallResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageClickStallResponse_descriptor_;
}

const CMessageClickStallResponse& CMessageClickStallResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stallmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageClickStallResponse* CMessageClickStallResponse::default_instance_ = NULL;

CMessageClickStallResponse* CMessageClickStallResponse::New() const {
  return new CMessageClickStallResponse;
}

void CMessageClickStallResponse::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    entityid_ = 0u;
  }
  itemlist_.Clear();
  stallindex_.Clear();
  price_.Clear();
  pricetype_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageClickStallResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .PBItemObject ItemList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ItemList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_itemlist()));
        if (input->ExpectTag(10)) goto parse_ItemList;
        if (input->ExpectTag(16)) goto parse_StallIndex;
        break;
      }
      
      // repeated uint32 StallIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_StallIndex:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_stallindex(value);
        if (input->ExpectTag(16)) goto parse_StallIndex;
        if (input->ExpectTag(24)) goto parse_EntityID;
        break;
      }
      
      // optional uint32 EntityID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Price;
        break;
      }
      
      // repeated uint32 Price = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Price:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_price(value);
        if (input->ExpectTag(32)) goto parse_Price;
        if (input->ExpectTag(40)) goto parse_PriceType;
        break;
      }
      
      // repeated uint32 PriceType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PriceType:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_pricetype(value);
        if (input->ExpectTag(40)) goto parse_PriceType;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageClickStallResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageClickStallResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .PBItemObject ItemList = 1;
  for (int i = 0; i < this->itemlist_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->itemlist(i), output);
  }
  
  // repeated uint32 StallIndex = 2;
  for (int i = 0; i < this->stallindex_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->stallindex(i), output);
  }
  
  // optional uint32 EntityID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->entityid(), output);
  }
  
  // repeated uint32 Price = 4;
  for (int i = 0; i < this->price_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->price(i), output);
  }
  
  // repeated uint32 PriceType = 5;
  for (int i = 0; i < this->pricetype_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->pricetype(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageClickStallResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBItemObject ItemList = 1;
  for (int i = 0; i < this->itemlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->itemlist(i), target);
  }
  
  // repeated uint32 StallIndex = 2;
  for (int i = 0; i < this->stallindex_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->stallindex(i), target);
  }
  
  // optional uint32 EntityID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->entityid(), target);
  }
  
  // repeated uint32 Price = 4;
  for (int i = 0; i < this->price_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->price(i), target);
  }
  
  // repeated uint32 PriceType = 5;
  for (int i = 0; i < this->pricetype_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->pricetype(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageClickStallResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 EntityID = 3;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
  }
  // repeated .PBItemObject ItemList = 1;
  total_size += 1 * this->itemlist_size();
  for (int i = 0; i < this->itemlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->itemlist(i));
  }
  
  // repeated uint32 StallIndex = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->stallindex_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->stallindex(i));
    }
    total_size += 1 * this->stallindex_size() + data_size;
  }
  
  // repeated uint32 Price = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->price_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->price(i));
    }
    total_size += 1 * this->price_size() + data_size;
  }
  
  // repeated uint32 PriceType = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->pricetype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->pricetype(i));
    }
    total_size += 1 * this->pricetype_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageClickStallResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageClickStallResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageClickStallResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageClickStallResponse::MergeFrom(const CMessageClickStallResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemlist_.MergeFrom(from.itemlist_);
  stallindex_.MergeFrom(from.stallindex_);
  price_.MergeFrom(from.price_);
  pricetype_.MergeFrom(from.pricetype_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from._has_bit(2)) {
      set_entityid(from.entityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageClickStallResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageClickStallResponse::CopyFrom(const CMessageClickStallResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageClickStallResponse::Swap(CMessageClickStallResponse* other) {
  if (other != this) {
    itemlist_.Swap(&other->itemlist_);
    stallindex_.Swap(&other->stallindex_);
    std::swap(entityid_, other->entityid_);
    price_.Swap(&other->price_);
    pricetype_.Swap(&other->pricetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageClickStallResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageClickStallResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageClickStallResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageClickStallResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBuyGoodsRequest::kPriceFieldNumber;
const int CMessageBuyGoodsRequest::kEntityIDFieldNumber;
const int CMessageBuyGoodsRequest::kNumberFieldNumber;
const int CMessageBuyGoodsRequest::kStallIndexFieldNumber;
const int CMessageBuyGoodsRequest::kItemIDFieldNumber;
const int CMessageBuyGoodsRequest::kPriceTypeFieldNumber;
#endif  // !_MSC_VER

CMessageBuyGoodsRequest::CMessageBuyGoodsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBuyGoodsRequest::InitAsDefaultInstance() {}

CMessageBuyGoodsRequest::CMessageBuyGoodsRequest(const CMessageBuyGoodsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBuyGoodsRequest::SharedCtor() {
  _cached_size_ = 0;
  price_ = 0u;
  entityid_ = 0u;
  number_ = 0u;
  stallindex_ = 0u;
  itemid_ = 0u;
  pricetype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBuyGoodsRequest::~CMessageBuyGoodsRequest() {
  SharedDtor();
}

void CMessageBuyGoodsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageBuyGoodsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBuyGoodsRequest_descriptor_;
}

const CMessageBuyGoodsRequest& CMessageBuyGoodsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stallmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageBuyGoodsRequest* CMessageBuyGoodsRequest::default_instance_ = NULL;

CMessageBuyGoodsRequest* CMessageBuyGoodsRequest::New() const {
  return new CMessageBuyGoodsRequest;
}

void CMessageBuyGoodsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    price_ = 0u;
    entityid_ = 0u;
    number_ = 0u;
    stallindex_ = 0u;
    itemid_ = 0u;
    pricetype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBuyGoodsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Price = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &price_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_EntityID;
        break;
      }
      
      // optional uint32 EntityID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Number;
        break;
      }
      
      // optional uint32 Number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Number:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &number_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_StallIndex;
        break;
      }
      
      // optional uint32 StallIndex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_StallIndex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &stallindex_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_ItemID;
        break;
      }
      
      // optional uint32 ItemID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_PriceType;
        break;
      }
      
      // optional uint32 PriceType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PriceType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pricetype_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBuyGoodsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBuyGoodsRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Price = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->price(), output);
  }
  
  // optional uint32 EntityID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->entityid(), output);
  }
  
  // optional uint32 Number = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->number(), output);
  }
  
  // optional uint32 StallIndex = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->stallindex(), output);
  }
  
  // optional uint32 ItemID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->itemid(), output);
  }
  
  // optional uint32 PriceType = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->pricetype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBuyGoodsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Price = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->price(), target);
  }
  
  // optional uint32 EntityID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->entityid(), target);
  }
  
  // optional uint32 Number = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->number(), target);
  }
  
  // optional uint32 StallIndex = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->stallindex(), target);
  }
  
  // optional uint32 ItemID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->itemid(), target);
  }
  
  // optional uint32 PriceType = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->pricetype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBuyGoodsRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Price = 1;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->price());
    }
    
    // optional uint32 EntityID = 2;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
    // optional uint32 Number = 3;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->number());
    }
    
    // optional uint32 StallIndex = 4;
    if (has_stallindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->stallindex());
    }
    
    // optional uint32 ItemID = 5;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemid());
    }
    
    // optional uint32 PriceType = 6;
    if (has_pricetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pricetype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBuyGoodsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBuyGoodsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBuyGoodsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBuyGoodsRequest::MergeFrom(const CMessageBuyGoodsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_price(from.price());
    }
    if (from._has_bit(1)) {
      set_entityid(from.entityid());
    }
    if (from._has_bit(2)) {
      set_number(from.number());
    }
    if (from._has_bit(3)) {
      set_stallindex(from.stallindex());
    }
    if (from._has_bit(4)) {
      set_itemid(from.itemid());
    }
    if (from._has_bit(5)) {
      set_pricetype(from.pricetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBuyGoodsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBuyGoodsRequest::CopyFrom(const CMessageBuyGoodsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBuyGoodsRequest::Swap(CMessageBuyGoodsRequest* other) {
  if (other != this) {
    std::swap(price_, other->price_);
    std::swap(entityid_, other->entityid_);
    std::swap(number_, other->number_);
    std::swap(stallindex_, other->stallindex_);
    std::swap(itemid_, other->itemid_);
    std::swap(pricetype_, other->pricetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBuyGoodsRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBuyGoodsRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBuyGoodsRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBuyGoodsRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBuyGoodsResponse::kEntityIDFieldNumber;
const int CMessageBuyGoodsResponse::kStallIndexFieldNumber;
const int CMessageBuyGoodsResponse::kNumberFieldNumber;
const int CMessageBuyGoodsResponse::kBuyerEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageBuyGoodsResponse::CMessageBuyGoodsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBuyGoodsResponse::InitAsDefaultInstance() {}

CMessageBuyGoodsResponse::CMessageBuyGoodsResponse(const CMessageBuyGoodsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBuyGoodsResponse::SharedCtor() {
  _cached_size_ = 0;
  entityid_ = 0u;
  stallindex_ = 0u;
  number_ = 0u;
  buyerentityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBuyGoodsResponse::~CMessageBuyGoodsResponse() {
  SharedDtor();
}

void CMessageBuyGoodsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageBuyGoodsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBuyGoodsResponse_descriptor_;
}

const CMessageBuyGoodsResponse& CMessageBuyGoodsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stallmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageBuyGoodsResponse* CMessageBuyGoodsResponse::default_instance_ = NULL;

CMessageBuyGoodsResponse* CMessageBuyGoodsResponse::New() const {
  return new CMessageBuyGoodsResponse;
}

void CMessageBuyGoodsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entityid_ = 0u;
    stallindex_ = 0u;
    number_ = 0u;
    buyerentityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBuyGoodsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 EntityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_StallIndex;
        break;
      }
      
      // optional uint32 StallIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_StallIndex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &stallindex_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Number;
        break;
      }
      
      // optional uint32 Number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Number:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &number_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_BuyerEntityID;
        break;
      }
      
      // optional uint32 BuyerEntityID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BuyerEntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &buyerentityid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBuyGoodsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBuyGoodsResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->entityid(), output);
  }
  
  // optional uint32 StallIndex = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->stallindex(), output);
  }
  
  // optional uint32 Number = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->number(), output);
  }
  
  // optional uint32 BuyerEntityID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->buyerentityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBuyGoodsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->entityid(), target);
  }
  
  // optional uint32 StallIndex = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->stallindex(), target);
  }
  
  // optional uint32 Number = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->number(), target);
  }
  
  // optional uint32 BuyerEntityID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->buyerentityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBuyGoodsResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 EntityID = 1;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
    // optional uint32 StallIndex = 2;
    if (has_stallindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->stallindex());
    }
    
    // optional uint32 Number = 3;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->number());
    }
    
    // optional uint32 BuyerEntityID = 4;
    if (has_buyerentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->buyerentityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBuyGoodsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBuyGoodsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBuyGoodsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBuyGoodsResponse::MergeFrom(const CMessageBuyGoodsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_entityid(from.entityid());
    }
    if (from._has_bit(1)) {
      set_stallindex(from.stallindex());
    }
    if (from._has_bit(2)) {
      set_number(from.number());
    }
    if (from._has_bit(3)) {
      set_buyerentityid(from.buyerentityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBuyGoodsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBuyGoodsResponse::CopyFrom(const CMessageBuyGoodsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBuyGoodsResponse::Swap(CMessageBuyGoodsResponse* other) {
  if (other != this) {
    std::swap(entityid_, other->entityid_);
    std::swap(stallindex_, other->stallindex_);
    std::swap(number_, other->number_);
    std::swap(buyerentityid_, other->buyerentityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBuyGoodsResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBuyGoodsResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBuyGoodsResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBuyGoodsResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCloseStallDlgRequest::kEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageCloseStallDlgRequest::CMessageCloseStallDlgRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCloseStallDlgRequest::InitAsDefaultInstance() {}

CMessageCloseStallDlgRequest::CMessageCloseStallDlgRequest(const CMessageCloseStallDlgRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCloseStallDlgRequest::SharedCtor() {
  _cached_size_ = 0;
  entityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCloseStallDlgRequest::~CMessageCloseStallDlgRequest() {
  SharedDtor();
}

void CMessageCloseStallDlgRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCloseStallDlgRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCloseStallDlgRequest_descriptor_;
}

const CMessageCloseStallDlgRequest& CMessageCloseStallDlgRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stallmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCloseStallDlgRequest* CMessageCloseStallDlgRequest::default_instance_ = NULL;

CMessageCloseStallDlgRequest* CMessageCloseStallDlgRequest::New() const {
  return new CMessageCloseStallDlgRequest;
}

void CMessageCloseStallDlgRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCloseStallDlgRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 EntityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCloseStallDlgRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCloseStallDlgRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->entityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCloseStallDlgRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->entityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCloseStallDlgRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 EntityID = 1;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCloseStallDlgRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCloseStallDlgRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCloseStallDlgRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCloseStallDlgRequest::MergeFrom(const CMessageCloseStallDlgRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_entityid(from.entityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCloseStallDlgRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCloseStallDlgRequest::CopyFrom(const CMessageCloseStallDlgRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCloseStallDlgRequest::Swap(CMessageCloseStallDlgRequest* other) {
  if (other != this) {
    std::swap(entityid_, other->entityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCloseStallDlgRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCloseStallDlgRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCloseStallDlgRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCloseStallDlgRequest_reflection_;
}

// ===================================================================

const ::std::string PBStallRecord::_default_mastername_;
const ::std::string PBStallRecord::_default_buyername_;
#ifndef _MSC_VER
const int PBStallRecord::kMasterNameFieldNumber;
const int PBStallRecord::kBuyerNameFieldNumber;
const int PBStallRecord::kItemIDFieldNumber;
const int PBStallRecord::kNumberFieldNumber;
const int PBStallRecord::kPriceFieldNumber;
const int PBStallRecord::kTimeFieldNumber;
const int PBStallRecord::kActionFieldNumber;
const int PBStallRecord::kTaxFieldNumber;
const int PBStallRecord::kPriceTypeFieldNumber;
const int PBStallRecord::kFeeFieldNumber;
#endif  // !_MSC_VER

PBStallRecord::PBStallRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBStallRecord::InitAsDefaultInstance() {}

PBStallRecord::PBStallRecord(const PBStallRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBStallRecord::SharedCtor() {
  _cached_size_ = 0;
  mastername_ = const_cast< ::std::string*>(&_default_mastername_);
  buyername_ = const_cast< ::std::string*>(&_default_buyername_);
  itemid_ = 0u;
  number_ = 0u;
  price_ = 0u;
  time_ = 0u;
  action_ = 0u;
  tax_ = 0u;
  pricetype_ = 0u;
  fee_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBStallRecord::~PBStallRecord() {
  SharedDtor();
}

void PBStallRecord::SharedDtor() {
  if (mastername_ != &_default_mastername_) {
    delete mastername_;
  }
  if (buyername_ != &_default_buyername_) {
    delete buyername_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBStallRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBStallRecord_descriptor_;
}

const PBStallRecord& PBStallRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stallmessage_5fpb_2ehxx();  return *default_instance_;
}

PBStallRecord* PBStallRecord::default_instance_ = NULL;

PBStallRecord* PBStallRecord::New() const {
  return new PBStallRecord;
}

void PBStallRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (mastername_ != &_default_mastername_) {
        mastername_->clear();
      }
    }
    if (_has_bit(1)) {
      if (buyername_ != &_default_buyername_) {
        buyername_->clear();
      }
    }
    itemid_ = 0u;
    number_ = 0u;
    price_ = 0u;
    time_ = 0u;
    action_ = 0u;
    tax_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    pricetype_ = 0u;
    fee_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBStallRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string MasterName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_mastername()));
        if (input->ExpectTag(18)) goto parse_BuyerName;
        break;
      }
      
      // optional string BuyerName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_BuyerName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_buyername()));
        if (input->ExpectTag(24)) goto parse_ItemID;
        break;
      }
      
      // optional uint32 ItemID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Number;
        break;
      }
      
      // optional uint32 Number = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Number:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &number_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Price;
        break;
      }
      
      // optional uint32 Price = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Price:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &price_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Time;
        break;
      }
      
      // optional uint32 Time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Time:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &time_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_Action;
        break;
      }
      
      // optional uint32 Action = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Action:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &action_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_Tax;
        break;
      }
      
      // optional uint32 Tax = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Tax:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tax_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_PriceType;
        break;
      }
      
      // optional uint32 PriceType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PriceType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pricetype_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_Fee;
        break;
      }
      
      // optional uint32 Fee = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Fee:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fee_));
        _set_bit(9);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBStallRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBStallRecord::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string MasterName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->mastername(), output);
  }
  
  // optional string BuyerName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->buyername(), output);
  }
  
  // optional uint32 ItemID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->itemid(), output);
  }
  
  // optional uint32 Number = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->number(), output);
  }
  
  // optional uint32 Price = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->price(), output);
  }
  
  // optional uint32 Time = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->time(), output);
  }
  
  // optional uint32 Action = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->action(), output);
  }
  
  // optional uint32 Tax = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->tax(), output);
  }
  
  // optional uint32 PriceType = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->pricetype(), output);
  }
  
  // optional uint32 Fee = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->fee(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBStallRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string MasterName = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->mastername(), target);
  }
  
  // optional string BuyerName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->buyername(), target);
  }
  
  // optional uint32 ItemID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->itemid(), target);
  }
  
  // optional uint32 Number = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->number(), target);
  }
  
  // optional uint32 Price = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->price(), target);
  }
  
  // optional uint32 Time = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->time(), target);
  }
  
  // optional uint32 Action = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->action(), target);
  }
  
  // optional uint32 Tax = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->tax(), target);
  }
  
  // optional uint32 PriceType = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->pricetype(), target);
  }
  
  // optional uint32 Fee = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->fee(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBStallRecord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string MasterName = 1;
    if (has_mastername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->mastername());
    }
    
    // optional string BuyerName = 2;
    if (has_buyername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->buyername());
    }
    
    // optional uint32 ItemID = 3;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemid());
    }
    
    // optional uint32 Number = 4;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->number());
    }
    
    // optional uint32 Price = 5;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->price());
    }
    
    // optional uint32 Time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->time());
    }
    
    // optional uint32 Action = 7;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->action());
    }
    
    // optional uint32 Tax = 8;
    if (has_tax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tax());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 PriceType = 9;
    if (has_pricetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pricetype());
    }
    
    // optional uint32 Fee = 10;
    if (has_fee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fee());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBStallRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBStallRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBStallRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBStallRecord::MergeFrom(const PBStallRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_mastername(from.mastername());
    }
    if (from._has_bit(1)) {
      set_buyername(from.buyername());
    }
    if (from._has_bit(2)) {
      set_itemid(from.itemid());
    }
    if (from._has_bit(3)) {
      set_number(from.number());
    }
    if (from._has_bit(4)) {
      set_price(from.price());
    }
    if (from._has_bit(5)) {
      set_time(from.time());
    }
    if (from._has_bit(6)) {
      set_action(from.action());
    }
    if (from._has_bit(7)) {
      set_tax(from.tax());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_pricetype(from.pricetype());
    }
    if (from._has_bit(9)) {
      set_fee(from.fee());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBStallRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBStallRecord::CopyFrom(const PBStallRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBStallRecord::Swap(PBStallRecord* other) {
  if (other != this) {
    std::swap(mastername_, other->mastername_);
    std::swap(buyername_, other->buyername_);
    std::swap(itemid_, other->itemid_);
    std::swap(number_, other->number_);
    std::swap(price_, other->price_);
    std::swap(time_, other->time_);
    std::swap(action_, other->action_);
    std::swap(tax_, other->tax_);
    std::swap(pricetype_, other->pricetype_);
    std::swap(fee_, other->fee_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBStallRecord::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBStallRecord::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBStallRecord::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBStallRecord_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageStallGetRecordRequest::kEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageStallGetRecordRequest::CMessageStallGetRecordRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageStallGetRecordRequest::InitAsDefaultInstance() {}

CMessageStallGetRecordRequest::CMessageStallGetRecordRequest(const CMessageStallGetRecordRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageStallGetRecordRequest::SharedCtor() {
  _cached_size_ = 0;
  entityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageStallGetRecordRequest::~CMessageStallGetRecordRequest() {
  SharedDtor();
}

void CMessageStallGetRecordRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageStallGetRecordRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageStallGetRecordRequest_descriptor_;
}

const CMessageStallGetRecordRequest& CMessageStallGetRecordRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stallmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageStallGetRecordRequest* CMessageStallGetRecordRequest::default_instance_ = NULL;

CMessageStallGetRecordRequest* CMessageStallGetRecordRequest::New() const {
  return new CMessageStallGetRecordRequest;
}

void CMessageStallGetRecordRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageStallGetRecordRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 EntityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageStallGetRecordRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageStallGetRecordRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->entityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageStallGetRecordRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->entityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageStallGetRecordRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 EntityID = 1;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageStallGetRecordRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageStallGetRecordRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageStallGetRecordRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageStallGetRecordRequest::MergeFrom(const CMessageStallGetRecordRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_entityid(from.entityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageStallGetRecordRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageStallGetRecordRequest::CopyFrom(const CMessageStallGetRecordRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageStallGetRecordRequest::Swap(CMessageStallGetRecordRequest* other) {
  if (other != this) {
    std::swap(entityid_, other->entityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageStallGetRecordRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageStallGetRecordRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageStallGetRecordRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageStallGetRecordRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageStallGetRecordResponse::kEntityIDFieldNumber;
const int CMessageStallGetRecordResponse::kRecordFieldNumber;
#endif  // !_MSC_VER

CMessageStallGetRecordResponse::CMessageStallGetRecordResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageStallGetRecordResponse::InitAsDefaultInstance() {}

CMessageStallGetRecordResponse::CMessageStallGetRecordResponse(const CMessageStallGetRecordResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageStallGetRecordResponse::SharedCtor() {
  _cached_size_ = 0;
  entityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageStallGetRecordResponse::~CMessageStallGetRecordResponse() {
  SharedDtor();
}

void CMessageStallGetRecordResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageStallGetRecordResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageStallGetRecordResponse_descriptor_;
}

const CMessageStallGetRecordResponse& CMessageStallGetRecordResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stallmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageStallGetRecordResponse* CMessageStallGetRecordResponse::default_instance_ = NULL;

CMessageStallGetRecordResponse* CMessageStallGetRecordResponse::New() const {
  return new CMessageStallGetRecordResponse;
}

void CMessageStallGetRecordResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entityid_ = 0u;
  }
  record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageStallGetRecordResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 EntityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Record;
        break;
      }
      
      // repeated .PBStallRecord Record = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Record:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_record()));
        if (input->ExpectTag(18)) goto parse_Record;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageStallGetRecordResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageStallGetRecordResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->entityid(), output);
  }
  
  // repeated .PBStallRecord Record = 2;
  for (int i = 0; i < this->record_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->record(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageStallGetRecordResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->entityid(), target);
  }
  
  // repeated .PBStallRecord Record = 2;
  for (int i = 0; i < this->record_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->record(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageStallGetRecordResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 EntityID = 1;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
  }
  // repeated .PBStallRecord Record = 2;
  total_size += 1 * this->record_size();
  for (int i = 0; i < this->record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->record(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageStallGetRecordResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageStallGetRecordResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageStallGetRecordResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageStallGetRecordResponse::MergeFrom(const CMessageStallGetRecordResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_.MergeFrom(from.record_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_entityid(from.entityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageStallGetRecordResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageStallGetRecordResponse::CopyFrom(const CMessageStallGetRecordResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageStallGetRecordResponse::Swap(CMessageStallGetRecordResponse* other) {
  if (other != this) {
    std::swap(entityid_, other->entityid_);
    record_.Swap(&other->record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageStallGetRecordResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageStallGetRecordResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageStallGetRecordResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageStallGetRecordResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMessageStallCleanRecordRequest::CMessageStallCleanRecordRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageStallCleanRecordRequest::InitAsDefaultInstance() {}

CMessageStallCleanRecordRequest::CMessageStallCleanRecordRequest(const CMessageStallCleanRecordRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageStallCleanRecordRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageStallCleanRecordRequest::~CMessageStallCleanRecordRequest() {
  SharedDtor();
}

void CMessageStallCleanRecordRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageStallCleanRecordRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageStallCleanRecordRequest_descriptor_;
}

const CMessageStallCleanRecordRequest& CMessageStallCleanRecordRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stallmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageStallCleanRecordRequest* CMessageStallCleanRecordRequest::default_instance_ = NULL;

CMessageStallCleanRecordRequest* CMessageStallCleanRecordRequest::New() const {
  return new CMessageStallCleanRecordRequest;
}

void CMessageStallCleanRecordRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageStallCleanRecordRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMessageStallCleanRecordRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageStallCleanRecordRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageStallCleanRecordRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageStallCleanRecordRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageStallCleanRecordRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageStallCleanRecordRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageStallCleanRecordRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageStallCleanRecordRequest::MergeFrom(const CMessageStallCleanRecordRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageStallCleanRecordRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageStallCleanRecordRequest::CopyFrom(const CMessageStallCleanRecordRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageStallCleanRecordRequest::Swap(CMessageStallCleanRecordRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageStallCleanRecordRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageStallCleanRecordRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageStallCleanRecordRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageStallCleanRecordRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageStallCleanRecordResponse::kRtnCodeFieldNumber;
#endif  // !_MSC_VER

CMessageStallCleanRecordResponse::CMessageStallCleanRecordResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageStallCleanRecordResponse::InitAsDefaultInstance() {}

CMessageStallCleanRecordResponse::CMessageStallCleanRecordResponse(const CMessageStallCleanRecordResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageStallCleanRecordResponse::SharedCtor() {
  _cached_size_ = 0;
  rtncode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageStallCleanRecordResponse::~CMessageStallCleanRecordResponse() {
  SharedDtor();
}

void CMessageStallCleanRecordResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageStallCleanRecordResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageStallCleanRecordResponse_descriptor_;
}

const CMessageStallCleanRecordResponse& CMessageStallCleanRecordResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stallmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageStallCleanRecordResponse* CMessageStallCleanRecordResponse::default_instance_ = NULL;

CMessageStallCleanRecordResponse* CMessageStallCleanRecordResponse::New() const {
  return new CMessageStallCleanRecordResponse;
}

void CMessageStallCleanRecordResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rtncode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageStallCleanRecordResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RtnCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rtncode_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageStallCleanRecordResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageStallCleanRecordResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RtnCode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->rtncode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageStallCleanRecordResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RtnCode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->rtncode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageStallCleanRecordResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RtnCode = 1;
    if (has_rtncode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rtncode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageStallCleanRecordResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageStallCleanRecordResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageStallCleanRecordResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageStallCleanRecordResponse::MergeFrom(const CMessageStallCleanRecordResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_rtncode(from.rtncode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageStallCleanRecordResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageStallCleanRecordResponse::CopyFrom(const CMessageStallCleanRecordResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageStallCleanRecordResponse::Swap(CMessageStallCleanRecordResponse* other) {
  if (other != this) {
    std::swap(rtncode_, other->rtncode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageStallCleanRecordResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageStallCleanRecordResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageStallCleanRecordResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageStallCleanRecordResponse_reflection_;
}
