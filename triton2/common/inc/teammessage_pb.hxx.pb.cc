// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "teammessage_pb.hxx.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>
#ifdef LEAK_CHK_DEBUG_NEW
#include "debug_new.h"
#endif

namespace {

const ::google::protobuf::Descriptor* CMessageCreateTeamSelf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCreateTeamSelf_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTeamInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTeamInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTeamInviteRtn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTeamInviteRtn_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTeamInvitedRequestCallBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTeamInvitedRequestCallBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTeamSearch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTeamSearch_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTeamRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTeamRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTeamRequestRtn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTeamRequestRtn_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTeamLeave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTeamLeave_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTeamNewHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTeamNewHead_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTeamTick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTeamTick_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTeamEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTeamEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTeamRequestPlayerCallBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTeamRequestPlayerCallBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTeamNotifyCallBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTeamNotifyCallBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTeamCallBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTeamCallBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTeamEndCallBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTeamEndCallBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTeamInviteAskCallBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTeamInviteAskCallBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTeamTickCallBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTeamTickCallBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTeamErrMsgCallBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTeamErrMsgCallBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTeamAskTeamMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTeamAskTeamMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTeamAskTeamCallBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTeamAskTeamCallBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTeamConscribeMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTeamConscribeMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTeamConscribeCallBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTeamConscribeCallBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTeamPropertyNotifyCallBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTeamPropertyNotifyCallBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTeamChangeDistribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTeamChangeDistribute_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTeamChangeDistributeCallBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTeamChangeDistributeCallBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTeamNotifyBuffCallBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTeamNotifyBuffCallBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTeamBuffCallBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTeamBuffCallBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTeamClearRequestList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTeamClearRequestList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTeamClearInviteList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTeamClearInviteList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTeamClearRequestCallBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTeamClearRequestCallBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTeamClearInviteCallBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTeamClearInviteCallBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTeamSearchMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTeamSearchMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTeamSearchMsgCallBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTeamSearchMsgCallBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTeamSearchConscribeMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTeamSearchConscribeMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTeamSearchConscribeCallBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTeamSearchConscribeCallBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTeamDeleteMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTeamDeleteMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTeamDeleteMsgCallBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTeamDeleteMsgCallBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTeamOrderFollow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTeamOrderFollow_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTeamOrderFollowCallBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTeamOrderFollowCallBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTeamRequestFollow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTeamRequestFollow_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTeamRequestFollowCallBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTeamRequestFollowCallBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTeamTwoParamCallBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTeamTwoParamCallBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTeamStateChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTeamStateChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRedirectJoinTeamResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRedirectJoinTeamResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRedirectTeamRelationNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRedirectTeamRelationNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRedirectCreateTeamNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRedirectCreateTeamNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTeamNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTeamNotice_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TeamMessageID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_teammessage_5fpb_2ehxx() {
  protobuf_AddDesc_teammessage_5fpb_2ehxx();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "teammessage_pb.hxx");
  GOOGLE_CHECK(file != NULL);
  CMessageCreateTeamSelf_descriptor_ = file->message_type(0);
  static const int CMessageCreateTeamSelf_offsets_[1] = {
  };
  CMessageCreateTeamSelf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCreateTeamSelf_descriptor_,
      CMessageCreateTeamSelf::default_instance_,
      CMessageCreateTeamSelf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateTeamSelf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateTeamSelf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCreateTeamSelf));
  CMessageTeamInvite_descriptor_ = file->message_type(1);
  static const int CMessageTeamInvite_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamInvite, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamInvite, charid_),
  };
  CMessageTeamInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTeamInvite_descriptor_,
      CMessageTeamInvite::default_instance_,
      CMessageTeamInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTeamInvite));
  CMessageTeamInviteRtn_descriptor_ = file->message_type(2);
  static const int CMessageTeamInviteRtn_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamInviteRtn, rtncode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamInviteRtn, inviteid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamInviteRtn, inviteentityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamInviteRtn, headcharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamInviteRtn, teamid_),
  };
  CMessageTeamInviteRtn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTeamInviteRtn_descriptor_,
      CMessageTeamInviteRtn::default_instance_,
      CMessageTeamInviteRtn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamInviteRtn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamInviteRtn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTeamInviteRtn));
  CMessageTeamInvitedRequestCallBack_descriptor_ = file->message_type(3);
  static const int CMessageTeamInvitedRequestCallBack_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamInvitedRequestCallBack, router_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamInvitedRequestCallBack, accoutid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamInvitedRequestCallBack, inviteename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamInvitedRequestCallBack, inviteid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamInvitedRequestCallBack, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamInvitedRequestCallBack, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamInvitedRequestCallBack, invitename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamInvitedRequestCallBack, nationality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamInvitedRequestCallBack, inviteeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamInvitedRequestCallBack, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamInvitedRequestCallBack, metier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamInvitedRequestCallBack, face_),
  };
  CMessageTeamInvitedRequestCallBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTeamInvitedRequestCallBack_descriptor_,
      CMessageTeamInvitedRequestCallBack::default_instance_,
      CMessageTeamInvitedRequestCallBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamInvitedRequestCallBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamInvitedRequestCallBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTeamInvitedRequestCallBack));
  CMessageTeamSearch_descriptor_ = file->message_type(4);
  static const int CMessageTeamSearch_offsets_[1] = {
  };
  CMessageTeamSearch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTeamSearch_descriptor_,
      CMessageTeamSearch::default_instance_,
      CMessageTeamSearch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamSearch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamSearch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTeamSearch));
  CMessageTeamRequest_descriptor_ = file->message_type(5);
  static const int CMessageTeamRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamRequest, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamRequest, charid_),
  };
  CMessageTeamRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTeamRequest_descriptor_,
      CMessageTeamRequest::default_instance_,
      CMessageTeamRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTeamRequest));
  CMessageTeamRequestRtn_descriptor_ = file->message_type(6);
  static const int CMessageTeamRequestRtn_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamRequestRtn, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamRequestRtn, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamRequestRtn, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamRequestRtn, accountid_),
  };
  CMessageTeamRequestRtn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTeamRequestRtn_descriptor_,
      CMessageTeamRequestRtn::default_instance_,
      CMessageTeamRequestRtn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamRequestRtn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamRequestRtn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTeamRequestRtn));
  CMessageTeamLeave_descriptor_ = file->message_type(7);
  static const int CMessageTeamLeave_offsets_[1] = {
  };
  CMessageTeamLeave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTeamLeave_descriptor_,
      CMessageTeamLeave::default_instance_,
      CMessageTeamLeave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamLeave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamLeave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTeamLeave));
  CMessageTeamNewHead_descriptor_ = file->message_type(8);
  static const int CMessageTeamNewHead_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamNewHead, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamNewHead, entityid_),
  };
  CMessageTeamNewHead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTeamNewHead_descriptor_,
      CMessageTeamNewHead::default_instance_,
      CMessageTeamNewHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamNewHead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamNewHead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTeamNewHead));
  CMessageTeamTick_descriptor_ = file->message_type(9);
  static const int CMessageTeamTick_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamTick, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamTick, charid_),
  };
  CMessageTeamTick_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTeamTick_descriptor_,
      CMessageTeamTick::default_instance_,
      CMessageTeamTick_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamTick, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamTick, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTeamTick));
  CMessageTeamEnd_descriptor_ = file->message_type(10);
  static const int CMessageTeamEnd_offsets_[1] = {
  };
  CMessageTeamEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTeamEnd_descriptor_,
      CMessageTeamEnd::default_instance_,
      CMessageTeamEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTeamEnd));
  CMessageTeamRequestPlayerCallBack_descriptor_ = file->message_type(11);
  static const int CMessageTeamRequestPlayerCallBack_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamRequestPlayerCallBack, router_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamRequestPlayerCallBack, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamRequestPlayerCallBack, face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamRequestPlayerCallBack, nationality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamRequestPlayerCallBack, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamRequestPlayerCallBack, accoutid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamRequestPlayerCallBack, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamRequestPlayerCallBack, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamRequestPlayerCallBack, metier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamRequestPlayerCallBack, charid_),
  };
  CMessageTeamRequestPlayerCallBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTeamRequestPlayerCallBack_descriptor_,
      CMessageTeamRequestPlayerCallBack::default_instance_,
      CMessageTeamRequestPlayerCallBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamRequestPlayerCallBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamRequestPlayerCallBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTeamRequestPlayerCallBack));
  CMessageTeamNotifyCallBack_descriptor_ = file->message_type(12);
  static const int CMessageTeamNotifyCallBack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamNotifyCallBack, router_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamNotifyCallBack, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamNotifyCallBack, member_),
  };
  CMessageTeamNotifyCallBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTeamNotifyCallBack_descriptor_,
      CMessageTeamNotifyCallBack::default_instance_,
      CMessageTeamNotifyCallBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamNotifyCallBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamNotifyCallBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTeamNotifyCallBack));
  CMessageTeamCallBack_descriptor_ = file->message_type(13);
  static const int CMessageTeamCallBack_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamCallBack, headername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamCallBack, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamCallBack, buff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamCallBack, headetyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamCallBack, member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamCallBack, buffsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamCallBack, distribute_),
  };
  CMessageTeamCallBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTeamCallBack_descriptor_,
      CMessageTeamCallBack::default_instance_,
      CMessageTeamCallBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamCallBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamCallBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTeamCallBack));
  CMessageTeamEndCallBack_descriptor_ = file->message_type(14);
  static const int CMessageTeamEndCallBack_offsets_[1] = {
  };
  CMessageTeamEndCallBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTeamEndCallBack_descriptor_,
      CMessageTeamEndCallBack::default_instance_,
      CMessageTeamEndCallBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamEndCallBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamEndCallBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTeamEndCallBack));
  CMessageTeamInviteAskCallBack_descriptor_ = file->message_type(15);
  static const int CMessageTeamInviteAskCallBack_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamInviteAskCallBack, router_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamInviteAskCallBack, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamInviteAskCallBack, headname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamInviteAskCallBack, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamInviteAskCallBack, nationality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamInviteAskCallBack, member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamInviteAskCallBack, bufflen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamInviteAskCallBack, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamInviteAskCallBack, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamInviteAskCallBack, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamInviteAskCallBack, distribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamInviteAskCallBack, buff_),
  };
  CMessageTeamInviteAskCallBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTeamInviteAskCallBack_descriptor_,
      CMessageTeamInviteAskCallBack::default_instance_,
      CMessageTeamInviteAskCallBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamInviteAskCallBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamInviteAskCallBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTeamInviteAskCallBack));
  CMessageTeamTickCallBack_descriptor_ = file->message_type(16);
  static const int CMessageTeamTickCallBack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamTickCallBack, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamTickCallBack, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamTickCallBack, entityid_),
  };
  CMessageTeamTickCallBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTeamTickCallBack_descriptor_,
      CMessageTeamTickCallBack::default_instance_,
      CMessageTeamTickCallBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamTickCallBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamTickCallBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTeamTickCallBack));
  CMessageTeamErrMsgCallBack_descriptor_ = file->message_type(17);
  static const int CMessageTeamErrMsgCallBack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamErrMsgCallBack, router_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamErrMsgCallBack, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamErrMsgCallBack, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamErrMsgCallBack, charid_),
  };
  CMessageTeamErrMsgCallBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTeamErrMsgCallBack_descriptor_,
      CMessageTeamErrMsgCallBack::default_instance_,
      CMessageTeamErrMsgCallBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamErrMsgCallBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamErrMsgCallBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTeamErrMsgCallBack));
  CMessageTeamAskTeamMsg_descriptor_ = file->message_type(18);
  static const int CMessageTeamAskTeamMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamAskTeamMsg, conscribetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamAskTeamMsg, subtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamAskTeamMsg, msg_),
  };
  CMessageTeamAskTeamMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTeamAskTeamMsg_descriptor_,
      CMessageTeamAskTeamMsg::default_instance_,
      CMessageTeamAskTeamMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamAskTeamMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamAskTeamMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTeamAskTeamMsg));
  CMessageTeamAskTeamCallBack_descriptor_ = file->message_type(19);
  static const int CMessageTeamAskTeamCallBack_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamAskTeamCallBack, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamAskTeamCallBack, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamAskTeamCallBack, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamAskTeamCallBack, subtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamAskTeamCallBack, metier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamAskTeamCallBack, conscribetype_),
  };
  CMessageTeamAskTeamCallBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTeamAskTeamCallBack_descriptor_,
      CMessageTeamAskTeamCallBack::default_instance_,
      CMessageTeamAskTeamCallBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamAskTeamCallBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamAskTeamCallBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTeamAskTeamCallBack));
  CMessageTeamConscribeMsg_descriptor_ = file->message_type(20);
  static const int CMessageTeamConscribeMsg_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamConscribeMsg, conscribetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamConscribeMsg, subtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamConscribeMsg, maxlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamConscribeMsg, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamConscribeMsg, minlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamConscribeMsg, metier_),
  };
  CMessageTeamConscribeMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTeamConscribeMsg_descriptor_,
      CMessageTeamConscribeMsg::default_instance_,
      CMessageTeamConscribeMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamConscribeMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamConscribeMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTeamConscribeMsg));
  CMessageTeamConscribeCallBack_descriptor_ = file->message_type(21);
  static const int CMessageTeamConscribeCallBack_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamConscribeCallBack, maxlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamConscribeCallBack, metier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamConscribeCallBack, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamConscribeCallBack, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamConscribeCallBack, minlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamConscribeCallBack, conscribetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamConscribeCallBack, subtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamConscribeCallBack, headername_),
  };
  CMessageTeamConscribeCallBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTeamConscribeCallBack_descriptor_,
      CMessageTeamConscribeCallBack::default_instance_,
      CMessageTeamConscribeCallBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamConscribeCallBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamConscribeCallBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTeamConscribeCallBack));
  CMessageTeamPropertyNotifyCallBack_descriptor_ = file->message_type(22);
  static const int CMessageTeamPropertyNotifyCallBack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamPropertyNotifyCallBack, router_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamPropertyNotifyCallBack, itempro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamPropertyNotifyCallBack, itemsize_),
  };
  CMessageTeamPropertyNotifyCallBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTeamPropertyNotifyCallBack_descriptor_,
      CMessageTeamPropertyNotifyCallBack::default_instance_,
      CMessageTeamPropertyNotifyCallBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamPropertyNotifyCallBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamPropertyNotifyCallBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTeamPropertyNotifyCallBack));
  CMessageTeamChangeDistribute_descriptor_ = file->message_type(23);
  static const int CMessageTeamChangeDistribute_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamChangeDistribute, distribute_),
  };
  CMessageTeamChangeDistribute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTeamChangeDistribute_descriptor_,
      CMessageTeamChangeDistribute::default_instance_,
      CMessageTeamChangeDistribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamChangeDistribute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamChangeDistribute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTeamChangeDistribute));
  CMessageTeamChangeDistributeCallBack_descriptor_ = file->message_type(24);
  static const int CMessageTeamChangeDistributeCallBack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamChangeDistributeCallBack, distribute_),
  };
  CMessageTeamChangeDistributeCallBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTeamChangeDistributeCallBack_descriptor_,
      CMessageTeamChangeDistributeCallBack::default_instance_,
      CMessageTeamChangeDistributeCallBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamChangeDistributeCallBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamChangeDistributeCallBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTeamChangeDistributeCallBack));
  CMessageTeamNotifyBuffCallBack_descriptor_ = file->message_type(25);
  static const int CMessageTeamNotifyBuffCallBack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamNotifyBuffCallBack, isadd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamNotifyBuffCallBack, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamNotifyBuffCallBack, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamNotifyBuffCallBack, buffid_),
  };
  CMessageTeamNotifyBuffCallBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTeamNotifyBuffCallBack_descriptor_,
      CMessageTeamNotifyBuffCallBack::default_instance_,
      CMessageTeamNotifyBuffCallBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamNotifyBuffCallBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamNotifyBuffCallBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTeamNotifyBuffCallBack));
  CMessageTeamBuffCallBack_descriptor_ = file->message_type(26);
  static const int CMessageTeamBuffCallBack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamBuffCallBack, buffsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamBuffCallBack, bufflist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamBuffCallBack, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamBuffCallBack, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamBuffCallBack, buffcount_),
  };
  CMessageTeamBuffCallBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTeamBuffCallBack_descriptor_,
      CMessageTeamBuffCallBack::default_instance_,
      CMessageTeamBuffCallBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamBuffCallBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamBuffCallBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTeamBuffCallBack));
  CMessageTeamClearRequestList_descriptor_ = file->message_type(27);
  static const int CMessageTeamClearRequestList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamClearRequestList, charid_),
  };
  CMessageTeamClearRequestList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTeamClearRequestList_descriptor_,
      CMessageTeamClearRequestList::default_instance_,
      CMessageTeamClearRequestList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamClearRequestList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamClearRequestList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTeamClearRequestList));
  CMessageTeamClearInviteList_descriptor_ = file->message_type(28);
  static const int CMessageTeamClearInviteList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamClearInviteList, charid_),
  };
  CMessageTeamClearInviteList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTeamClearInviteList_descriptor_,
      CMessageTeamClearInviteList::default_instance_,
      CMessageTeamClearInviteList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamClearInviteList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamClearInviteList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTeamClearInviteList));
  CMessageTeamClearRequestCallBack_descriptor_ = file->message_type(29);
  static const int CMessageTeamClearRequestCallBack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamClearRequestCallBack, charid_),
  };
  CMessageTeamClearRequestCallBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTeamClearRequestCallBack_descriptor_,
      CMessageTeamClearRequestCallBack::default_instance_,
      CMessageTeamClearRequestCallBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamClearRequestCallBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamClearRequestCallBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTeamClearRequestCallBack));
  CMessageTeamClearInviteCallBack_descriptor_ = file->message_type(30);
  static const int CMessageTeamClearInviteCallBack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamClearInviteCallBack, charid_),
  };
  CMessageTeamClearInviteCallBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTeamClearInviteCallBack_descriptor_,
      CMessageTeamClearInviteCallBack::default_instance_,
      CMessageTeamClearInviteCallBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamClearInviteCallBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamClearInviteCallBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTeamClearInviteCallBack));
  CMessageTeamSearchMsg_descriptor_ = file->message_type(31);
  static const int CMessageTeamSearchMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamSearchMsg, conscibetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamSearchMsg, subtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamSearchMsg, pageindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamSearchMsg, msgtype_),
  };
  CMessageTeamSearchMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTeamSearchMsg_descriptor_,
      CMessageTeamSearchMsg::default_instance_,
      CMessageTeamSearchMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamSearchMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamSearchMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTeamSearchMsg));
  CMessageTeamSearchMsgCallBack_descriptor_ = file->message_type(32);
  static const int CMessageTeamSearchMsgCallBack_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamSearchMsgCallBack, router_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamSearchMsgCallBack, totalpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamSearchMsgCallBack, msgbuff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamSearchMsgCallBack, msgsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamSearchMsgCallBack, pageindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamSearchMsgCallBack, bufflen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamSearchMsgCallBack, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamSearchMsgCallBack, msgcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamSearchMsgCallBack, msg_),
  };
  CMessageTeamSearchMsgCallBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTeamSearchMsgCallBack_descriptor_,
      CMessageTeamSearchMsgCallBack::default_instance_,
      CMessageTeamSearchMsgCallBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamSearchMsgCallBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamSearchMsgCallBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTeamSearchMsgCallBack));
  CMessageTeamSearchConscribeMsg_descriptor_ = file->message_type(33);
  static const int CMessageTeamSearchConscribeMsg_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamSearchConscribeMsg, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamSearchConscribeMsg, maxlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamSearchConscribeMsg, pageindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamSearchConscribeMsg, minlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamSearchConscribeMsg, conscribetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamSearchConscribeMsg, metier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamSearchConscribeMsg, subtype_),
  };
  CMessageTeamSearchConscribeMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTeamSearchConscribeMsg_descriptor_,
      CMessageTeamSearchConscribeMsg::default_instance_,
      CMessageTeamSearchConscribeMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamSearchConscribeMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamSearchConscribeMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTeamSearchConscribeMsg));
  CMessageTeamSearchConscribeCallBack_descriptor_ = file->message_type(34);
  static const int CMessageTeamSearchConscribeCallBack_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamSearchConscribeCallBack, router_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamSearchConscribeCallBack, msgbuff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamSearchConscribeCallBack, bufflen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamSearchConscribeCallBack, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamSearchConscribeCallBack, msgcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamSearchConscribeCallBack, pageindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamSearchConscribeCallBack, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamSearchConscribeCallBack, msgsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamSearchConscribeCallBack, totalpage_),
  };
  CMessageTeamSearchConscribeCallBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTeamSearchConscribeCallBack_descriptor_,
      CMessageTeamSearchConscribeCallBack::default_instance_,
      CMessageTeamSearchConscribeCallBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamSearchConscribeCallBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamSearchConscribeCallBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTeamSearchConscribeCallBack));
  CMessageTeamDeleteMsg_descriptor_ = file->message_type(35);
  static const int CMessageTeamDeleteMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamDeleteMsg, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamDeleteMsg, charid_),
  };
  CMessageTeamDeleteMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTeamDeleteMsg_descriptor_,
      CMessageTeamDeleteMsg::default_instance_,
      CMessageTeamDeleteMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamDeleteMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamDeleteMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTeamDeleteMsg));
  CMessageTeamDeleteMsgCallBack_descriptor_ = file->message_type(36);
  static const int CMessageTeamDeleteMsgCallBack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamDeleteMsgCallBack, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamDeleteMsgCallBack, msgtype_),
  };
  CMessageTeamDeleteMsgCallBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTeamDeleteMsgCallBack_descriptor_,
      CMessageTeamDeleteMsgCallBack::default_instance_,
      CMessageTeamDeleteMsgCallBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamDeleteMsgCallBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamDeleteMsgCallBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTeamDeleteMsgCallBack));
  CMessageTeamOrderFollow_descriptor_ = file->message_type(37);
  static const int CMessageTeamOrderFollow_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamOrderFollow, code_),
  };
  CMessageTeamOrderFollow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTeamOrderFollow_descriptor_,
      CMessageTeamOrderFollow::default_instance_,
      CMessageTeamOrderFollow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamOrderFollow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamOrderFollow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTeamOrderFollow));
  CMessageTeamOrderFollowCallBack_descriptor_ = file->message_type(38);
  static const int CMessageTeamOrderFollowCallBack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamOrderFollowCallBack, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamOrderFollowCallBack, headername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamOrderFollowCallBack, code_),
  };
  CMessageTeamOrderFollowCallBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTeamOrderFollowCallBack_descriptor_,
      CMessageTeamOrderFollowCallBack::default_instance_,
      CMessageTeamOrderFollowCallBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamOrderFollowCallBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamOrderFollowCallBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTeamOrderFollowCallBack));
  CMessageTeamRequestFollow_descriptor_ = file->message_type(39);
  static const int CMessageTeamRequestFollow_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamRequestFollow, code_),
  };
  CMessageTeamRequestFollow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTeamRequestFollow_descriptor_,
      CMessageTeamRequestFollow::default_instance_,
      CMessageTeamRequestFollow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamRequestFollow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamRequestFollow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTeamRequestFollow));
  CMessageTeamRequestFollowCallBack_descriptor_ = file->message_type(40);
  static const int CMessageTeamRequestFollowCallBack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamRequestFollowCallBack, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamRequestFollowCallBack, charid_),
  };
  CMessageTeamRequestFollowCallBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTeamRequestFollowCallBack_descriptor_,
      CMessageTeamRequestFollowCallBack::default_instance_,
      CMessageTeamRequestFollowCallBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamRequestFollowCallBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamRequestFollowCallBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTeamRequestFollowCallBack));
  CMessageTeamTwoParamCallBack_descriptor_ = file->message_type(41);
  static const int CMessageTeamTwoParamCallBack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamTwoParamCallBack, desname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamTwoParamCallBack, descharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamTwoParamCallBack, srcname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamTwoParamCallBack, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamTwoParamCallBack, srccharid_),
  };
  CMessageTeamTwoParamCallBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTeamTwoParamCallBack_descriptor_,
      CMessageTeamTwoParamCallBack::default_instance_,
      CMessageTeamTwoParamCallBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamTwoParamCallBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamTwoParamCallBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTeamTwoParamCallBack));
  CMessageTeamStateChange_descriptor_ = file->message_type(42);
  static const int CMessageTeamStateChange_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamStateChange, teamflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamStateChange, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamStateChange, entityid_),
  };
  CMessageTeamStateChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTeamStateChange_descriptor_,
      CMessageTeamStateChange::default_instance_,
      CMessageTeamStateChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamStateChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamStateChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTeamStateChange));
  CMessageRedirectJoinTeamResponse_descriptor_ = file->message_type(43);
  static const int CMessageRedirectJoinTeamResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectJoinTeamResponse, router_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectJoinTeamResponse, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectJoinTeamResponse, headid_),
  };
  CMessageRedirectJoinTeamResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRedirectJoinTeamResponse_descriptor_,
      CMessageRedirectJoinTeamResponse::default_instance_,
      CMessageRedirectJoinTeamResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectJoinTeamResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectJoinTeamResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRedirectJoinTeamResponse));
  CMessageRedirectTeamRelationNotice_descriptor_ = file->message_type(44);
  static const int CMessageRedirectTeamRelationNotice_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectTeamRelationNotice, router_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectTeamRelationNotice, descharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectTeamRelationNotice, isadd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectTeamRelationNotice, srccharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectTeamRelationNotice, desname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectTeamRelationNotice, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectTeamRelationNotice, srcname_),
  };
  CMessageRedirectTeamRelationNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRedirectTeamRelationNotice_descriptor_,
      CMessageRedirectTeamRelationNotice::default_instance_,
      CMessageRedirectTeamRelationNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectTeamRelationNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectTeamRelationNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRedirectTeamRelationNotice));
  CMessageRedirectCreateTeamNotice_descriptor_ = file->message_type(45);
  static const int CMessageRedirectCreateTeamNotice_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectCreateTeamNotice, router_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectCreateTeamNotice, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectCreateTeamNotice, srccharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectCreateTeamNotice, charname_),
  };
  CMessageRedirectCreateTeamNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRedirectCreateTeamNotice_descriptor_,
      CMessageRedirectCreateTeamNotice::default_instance_,
      CMessageRedirectCreateTeamNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectCreateTeamNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectCreateTeamNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRedirectCreateTeamNotice));
  CMessageTeamNotice_descriptor_ = file->message_type(46);
  static const int CMessageTeamNotice_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamNotice, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamNotice, param2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamNotice, param1_),
  };
  CMessageTeamNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTeamNotice_descriptor_,
      CMessageTeamNotice::default_instance_,
      CMessageTeamNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTeamNotice));
  TeamMessageID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_teammessage_5fpb_2ehxx);
}

void protobuf_RegisterTypes() {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCreateTeamSelf_descriptor_, &CMessageCreateTeamSelf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTeamInvite_descriptor_, &CMessageTeamInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTeamInviteRtn_descriptor_, &CMessageTeamInviteRtn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTeamInvitedRequestCallBack_descriptor_, &CMessageTeamInvitedRequestCallBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTeamSearch_descriptor_, &CMessageTeamSearch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTeamRequest_descriptor_, &CMessageTeamRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTeamRequestRtn_descriptor_, &CMessageTeamRequestRtn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTeamLeave_descriptor_, &CMessageTeamLeave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTeamNewHead_descriptor_, &CMessageTeamNewHead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTeamTick_descriptor_, &CMessageTeamTick::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTeamEnd_descriptor_, &CMessageTeamEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTeamRequestPlayerCallBack_descriptor_, &CMessageTeamRequestPlayerCallBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTeamNotifyCallBack_descriptor_, &CMessageTeamNotifyCallBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTeamCallBack_descriptor_, &CMessageTeamCallBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTeamEndCallBack_descriptor_, &CMessageTeamEndCallBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTeamInviteAskCallBack_descriptor_, &CMessageTeamInviteAskCallBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTeamTickCallBack_descriptor_, &CMessageTeamTickCallBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTeamErrMsgCallBack_descriptor_, &CMessageTeamErrMsgCallBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTeamAskTeamMsg_descriptor_, &CMessageTeamAskTeamMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTeamAskTeamCallBack_descriptor_, &CMessageTeamAskTeamCallBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTeamConscribeMsg_descriptor_, &CMessageTeamConscribeMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTeamConscribeCallBack_descriptor_, &CMessageTeamConscribeCallBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTeamPropertyNotifyCallBack_descriptor_, &CMessageTeamPropertyNotifyCallBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTeamChangeDistribute_descriptor_, &CMessageTeamChangeDistribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTeamChangeDistributeCallBack_descriptor_, &CMessageTeamChangeDistributeCallBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTeamNotifyBuffCallBack_descriptor_, &CMessageTeamNotifyBuffCallBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTeamBuffCallBack_descriptor_, &CMessageTeamBuffCallBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTeamClearRequestList_descriptor_, &CMessageTeamClearRequestList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTeamClearInviteList_descriptor_, &CMessageTeamClearInviteList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTeamClearRequestCallBack_descriptor_, &CMessageTeamClearRequestCallBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTeamClearInviteCallBack_descriptor_, &CMessageTeamClearInviteCallBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTeamSearchMsg_descriptor_, &CMessageTeamSearchMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTeamSearchMsgCallBack_descriptor_, &CMessageTeamSearchMsgCallBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTeamSearchConscribeMsg_descriptor_, &CMessageTeamSearchConscribeMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTeamSearchConscribeCallBack_descriptor_, &CMessageTeamSearchConscribeCallBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTeamDeleteMsg_descriptor_, &CMessageTeamDeleteMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTeamDeleteMsgCallBack_descriptor_, &CMessageTeamDeleteMsgCallBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTeamOrderFollow_descriptor_, &CMessageTeamOrderFollow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTeamOrderFollowCallBack_descriptor_, &CMessageTeamOrderFollowCallBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTeamRequestFollow_descriptor_, &CMessageTeamRequestFollow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTeamRequestFollowCallBack_descriptor_, &CMessageTeamRequestFollowCallBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTeamTwoParamCallBack_descriptor_, &CMessageTeamTwoParamCallBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTeamStateChange_descriptor_, &CMessageTeamStateChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRedirectJoinTeamResponse_descriptor_, &CMessageRedirectJoinTeamResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRedirectTeamRelationNotice_descriptor_, &CMessageRedirectTeamRelationNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRedirectCreateTeamNotice_descriptor_, &CMessageRedirectCreateTeamNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTeamNotice_descriptor_, &CMessageTeamNotice::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_teammessage_5fpb_2ehxx() {
  delete CMessageCreateTeamSelf::default_instance_;
  delete CMessageCreateTeamSelf_reflection_;
  delete CMessageTeamInvite::default_instance_;
  delete CMessageTeamInvite_reflection_;
  delete CMessageTeamInviteRtn::default_instance_;
  delete CMessageTeamInviteRtn_reflection_;
  delete CMessageTeamInvitedRequestCallBack::default_instance_;
  delete CMessageTeamInvitedRequestCallBack_reflection_;
  delete CMessageTeamSearch::default_instance_;
  delete CMessageTeamSearch_reflection_;
  delete CMessageTeamRequest::default_instance_;
  delete CMessageTeamRequest_reflection_;
  delete CMessageTeamRequestRtn::default_instance_;
  delete CMessageTeamRequestRtn_reflection_;
  delete CMessageTeamLeave::default_instance_;
  delete CMessageTeamLeave_reflection_;
  delete CMessageTeamNewHead::default_instance_;
  delete CMessageTeamNewHead_reflection_;
  delete CMessageTeamTick::default_instance_;
  delete CMessageTeamTick_reflection_;
  delete CMessageTeamEnd::default_instance_;
  delete CMessageTeamEnd_reflection_;
  delete CMessageTeamRequestPlayerCallBack::default_instance_;
  delete CMessageTeamRequestPlayerCallBack_reflection_;
  delete CMessageTeamNotifyCallBack::default_instance_;
  delete CMessageTeamNotifyCallBack_reflection_;
  delete CMessageTeamCallBack::default_instance_;
  delete CMessageTeamCallBack_reflection_;
  delete CMessageTeamEndCallBack::default_instance_;
  delete CMessageTeamEndCallBack_reflection_;
  delete CMessageTeamInviteAskCallBack::default_instance_;
  delete CMessageTeamInviteAskCallBack_reflection_;
  delete CMessageTeamTickCallBack::default_instance_;
  delete CMessageTeamTickCallBack_reflection_;
  delete CMessageTeamErrMsgCallBack::default_instance_;
  delete CMessageTeamErrMsgCallBack_reflection_;
  delete CMessageTeamAskTeamMsg::default_instance_;
  delete CMessageTeamAskTeamMsg_reflection_;
  delete CMessageTeamAskTeamCallBack::default_instance_;
  delete CMessageTeamAskTeamCallBack_reflection_;
  delete CMessageTeamConscribeMsg::default_instance_;
  delete CMessageTeamConscribeMsg_reflection_;
  delete CMessageTeamConscribeCallBack::default_instance_;
  delete CMessageTeamConscribeCallBack_reflection_;
  delete CMessageTeamPropertyNotifyCallBack::default_instance_;
  delete CMessageTeamPropertyNotifyCallBack_reflection_;
  delete CMessageTeamChangeDistribute::default_instance_;
  delete CMessageTeamChangeDistribute_reflection_;
  delete CMessageTeamChangeDistributeCallBack::default_instance_;
  delete CMessageTeamChangeDistributeCallBack_reflection_;
  delete CMessageTeamNotifyBuffCallBack::default_instance_;
  delete CMessageTeamNotifyBuffCallBack_reflection_;
  delete CMessageTeamBuffCallBack::default_instance_;
  delete CMessageTeamBuffCallBack_reflection_;
  delete CMessageTeamClearRequestList::default_instance_;
  delete CMessageTeamClearRequestList_reflection_;
  delete CMessageTeamClearInviteList::default_instance_;
  delete CMessageTeamClearInviteList_reflection_;
  delete CMessageTeamClearRequestCallBack::default_instance_;
  delete CMessageTeamClearRequestCallBack_reflection_;
  delete CMessageTeamClearInviteCallBack::default_instance_;
  delete CMessageTeamClearInviteCallBack_reflection_;
  delete CMessageTeamSearchMsg::default_instance_;
  delete CMessageTeamSearchMsg_reflection_;
  delete CMessageTeamSearchMsgCallBack::default_instance_;
  delete CMessageTeamSearchMsgCallBack_reflection_;
  delete CMessageTeamSearchConscribeMsg::default_instance_;
  delete CMessageTeamSearchConscribeMsg_reflection_;
  delete CMessageTeamSearchConscribeCallBack::default_instance_;
  delete CMessageTeamSearchConscribeCallBack_reflection_;
  delete CMessageTeamDeleteMsg::default_instance_;
  delete CMessageTeamDeleteMsg_reflection_;
  delete CMessageTeamDeleteMsgCallBack::default_instance_;
  delete CMessageTeamDeleteMsgCallBack_reflection_;
  delete CMessageTeamOrderFollow::default_instance_;
  delete CMessageTeamOrderFollow_reflection_;
  delete CMessageTeamOrderFollowCallBack::default_instance_;
  delete CMessageTeamOrderFollowCallBack_reflection_;
  delete CMessageTeamRequestFollow::default_instance_;
  delete CMessageTeamRequestFollow_reflection_;
  delete CMessageTeamRequestFollowCallBack::default_instance_;
  delete CMessageTeamRequestFollowCallBack_reflection_;
  delete CMessageTeamTwoParamCallBack::default_instance_;
  delete CMessageTeamTwoParamCallBack_reflection_;
  delete CMessageTeamStateChange::default_instance_;
  delete CMessageTeamStateChange_reflection_;
  delete CMessageRedirectJoinTeamResponse::default_instance_;
  delete CMessageRedirectJoinTeamResponse_reflection_;
  delete CMessageRedirectTeamRelationNotice::default_instance_;
  delete CMessageRedirectTeamRelationNotice_reflection_;
  delete CMessageRedirectCreateTeamNotice::default_instance_;
  delete CMessageRedirectCreateTeamNotice_reflection_;
  delete CMessageTeamNotice::default_instance_;
  delete CMessageTeamNotice_reflection_;
}

void protobuf_AddDesc_teammessage_5fpb_2ehxx() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_coremessage_5fpb_2ehxx();
  ::protobuf_AddDesc_property_5fpb_2ehxx();
  #ifndef _NO_PROTOBUF_STR_
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022teammessage_pb.hxx\032\022coremessage_pb.hxx"
    "\032\017property_pb.hxx\"\030\n\026CMessageCreateTeamS"
    "elf\"6\n\022CMessageTeamInvite\022\020\n\010EntityID\030\001 "
    "\001(\r\022\016\n\006CharID\030\002 \001(\r\"v\n\025CMessageTeamInvit"
    "eRtn\022\017\n\007RtnCode\030\001 \001(\r\022\020\n\010InviteID\030\002 \001(\r\022"
    "\026\n\016InviteEntityID\030\003 \001(\r\022\022\n\nHeadCharID\030\004 "
    "\001(\r\022\016\n\006TeamID\030\005 \001(\r\"\206\002\n\"CMessageTeamInvi"
    "tedRequestCallBack\022\037\n\006Router\030\001 \001(\0132\017.CMe"
    "ssageRouter\022\020\n\010AccoutID\030\002 \001(\r\022\023\n\013Invitee"
    "Name\030\003 \001(\t\022\020\n\010InviteID\030\004 \001(\r\022\020\n\010EntityID"
    "\030\005 \001(\r\022\r\n\005Level\030\006 \001(\r\022\022\n\nInviteName\030\007 \001("
    "\t\022\023\n\013Nationality\030\010 \001(\r\022\021\n\tInviteeID\030\t \001("
    "\r\022\013\n\003Sex\030\n \001(\r\022\016\n\006Metier\030\013 \001(\r\022\014\n\004Face\030\014"
    " \001(\r\"\024\n\022CMessageTeamSearch\"7\n\023CMessageTe"
    "amRequest\022\020\n\010EntityID\030\001 \001(\r\022\016\n\006CharID\030\002 "
    "\001(\r\"[\n\026CMessageTeamRequestRtn\022\016\n\006CharID\030"
    "\001 \001(\r\022\020\n\010EntityID\030\002 \001(\r\022\014\n\004Code\030\003 \001(\r\022\021\n"
    "\tAccountID\030\004 \001(\r\"\023\n\021CMessageTeamLeave\"7\n"
    "\023CMessageTeamNewHead\022\016\n\006CharID\030\001 \001(\r\022\020\n\010"
    "EntityID\030\002 \001(\r\"4\n\020CMessageTeamTick\022\020\n\010En"
    "tityID\030\001 \001(\r\022\016\n\006CharID\030\002 \001(\r\"\021\n\017CMessage"
    "TeamEnd\"\325\001\n!CMessageTeamRequestPlayerCal"
    "lBack\022\037\n\006Router\030\001 \001(\0132\017.CMessageRouter\022\020"
    "\n\010EntityID\030\002 \001(\r\022\014\n\004Face\030\003 \001(\r\022\023\n\013Nation"
    "ality\030\004 \001(\r\022\014\n\004Name\030\005 \001(\t\022\020\n\010AccoutID\030\006 "
    "\001(\r\022\r\n\005Level\030\007 \001(\r\022\013\n\003Sex\030\010 \001(\r\022\016\n\006Metie"
    "r\030\t \001(\r\022\016\n\006CharID\030\n \001(\r\"f\n\032CMessageTeamN"
    "otifyCallBack\022\037\n\006Router\030\001 \001(\0132\017.CMessage"
    "Router\022\014\n\004Code\030\002 \001(\r\022\031\n\006Member\030\003 \001(\0132\t.P"
    "BMember\"\233\001\n\024CMessageTeamCallBack\022\022\n\nHead"
    "erName\030\001 \001(\t\022\r\n\005Count\030\002 \001(\r\022\014\n\004Buff\030\003 \001("
    "\t\022\021\n\tHeadEtyID\030\004 \001(\r\022\031\n\006Member\030\005 \003(\0132\t.P"
    "BMember\022\020\n\010BuffSize\030\006 \001(\r\022\022\n\nDistribute\030"
    "\007 \001(\r\"\031\n\027CMessageTeamEndCallBack\"\204\002\n\035CMe"
    "ssageTeamInviteAskCallBack\022\037\n\006Router\030\001 \001"
    "(\0132\017.CMessageRouter\022\r\n\005Count\030\002 \001(\r\022\020\n\010He"
    "adName\030\003 \001(\t\022\014\n\004Name\030\004 \001(\t\022\023\n\013Nationalit"
    "y\030\005 \001(\r\022\031\n\006Member\030\006 \003(\0132\t.PBMember\022\017\n\007Bu"
    "ffLen\030\007 \001(\r\022\016\n\006CharID\030\010 \001(\r\022\020\n\010EntityID\030"
    "\t \001(\r\022\016\n\006TeamID\030\n \001(\r\022\022\n\nDistribute\030\013 \001("
    "\r\022\014\n\004Buff\030\014 \001(\t\"J\n\030CMessageTeamTickCallB"
    "ack\022\014\n\004Name\030\001 \001(\t\022\016\n\006CharID\030\002 \001(\r\022\020\n\010Ent"
    "ityID\030\003 \001(\r\"i\n\032CMessageTeamErrMsgCallBac"
    "k\022\037\n\006Router\030\001 \001(\0132\017.CMessageRouter\022\014\n\004Na"
    "me\030\002 \001(\t\022\014\n\004Code\030\003 \001(\r\022\016\n\006CharID\030\004 \001(\r\"M"
    "\n\026CMessageTeamAskTeamMsg\022\025\n\rConscribeTyp"
    "e\030\001 \001(\r\022\017\n\007SubType\030\002 \001(\r\022\013\n\003Msg\030\003 \001(\t\"\177\n"
    "\033CMessageTeamAskTeamCallBack\022\013\n\003Msg\030\001 \001("
    "\t\022\014\n\004Name\030\002 \001(\t\022\r\n\005Level\030\003 \001(\r\022\017\n\007SubTyp"
    "e\030\004 \001(\r\022\016\n\006Metier\030\005 \001(\r\022\025\n\rConscribeType"
    "\030\006 \001(\r\"\203\001\n\030CMessageTeamConscribeMsg\022\025\n\rC"
    "onscribeType\030\001 \001(\r\022\017\n\007SubType\030\002 \001(\r\022\020\n\010M"
    "axLevel\030\003 \001(\r\022\013\n\003Msg\030\004 \001(\t\022\020\n\010MinLevel\030\005"
    " \001(\r\022\016\n\006Metier\030\006 \001(\r\"\253\001\n\035CMessageTeamCon"
    "scribeCallBack\022\020\n\010MaxLevel\030\001 \001(\r\022\016\n\006Meti"
    "er\030\002 \001(\r\022\013\n\003Msg\030\003 \001(\t\022\r\n\005Count\030\004 \001(\r\022\020\n\010"
    "MinLevel\030\005 \001(\r\022\025\n\rConscribeType\030\006 \001(\r\022\017\n"
    "\007SubType\030\007 \001(\r\022\022\n\nHeaderName\030\010 \001(\t\"s\n\"CM"
    "essageTeamPropertyNotifyCallBack\022\037\n\006Rout"
    "er\030\001 \001(\0132\017.CMessageRouter\022\032\n\007ItemPro\030\002 \003"
    "(\0132\t.PBMember\022\020\n\010ItemSize\030\003 \001(\r\"2\n\034CMess"
    "ageTeamChangeDistribute\022\022\n\nDistribute\030\001 "
    "\001(\r\":\n$CMessageTeamChangeDistributeCallB"
    "ack\022\022\n\nDistribute\030\001 \001(\r\"]\n\036CMessageTeamN"
    "otifyBuffCallBack\022\r\n\005IsAdd\030\001 \001(\r\022\014\n\004Name"
    "\030\002 \001(\t\022\016\n\006CharID\030\003 \001(\r\022\016\n\006BuffID\030\004 \001(\r\"o"
    "\n\030CMessageTeamBuffCallBack\022\020\n\010BuffSize\030\001"
    " \001(\r\022\020\n\010BuffList\030\002 \001(\t\022\014\n\004Name\030\003 \001(\t\022\016\n\006"
    "CharID\030\004 \001(\r\022\021\n\tBuffCount\030\005 \001(\r\".\n\034CMess"
    "ageTeamClearRequestList\022\016\n\006CharID\030\001 \001(\r\""
    "-\n\033CMessageTeamClearInviteList\022\016\n\006CharID"
    "\030\001 \001(\r\"2\n CMessageTeamClearRequestCallBa"
    "ck\022\016\n\006CharID\030\001 \001(\r\"1\n\037CMessageTeamClearI"
    "nviteCallBack\022\016\n\006CharID\030\001 \001(\r\"b\n\025CMessag"
    "eTeamSearchMsg\022\024\n\014ConscibeType\030\001 \001(\r\022\017\n\007"
    "SubType\030\002 \001(\r\022\021\n\tPageIndex\030\003 \001(\r\022\017\n\007MsgT"
    "ype\030\004 \001(\r\"\325\001\n\035CMessageTeamSearchMsgCallB"
    "ack\022\037\n\006Router\030\001 \001(\0132\017.CMessageRouter\022\021\n\t"
    "TotalPage\030\002 \001(\r\022\017\n\007MsgBuff\030\003 \001(\014\022\017\n\007MsgS"
    "ize\030\004 \001(\r\022\021\n\tPageIndex\030\005 \001(\r\022\017\n\007BuffLen\030"
    "\006 \001(\r\022\017\n\007MsgType\030\007 \001(\r\022\020\n\010MsgCount\030\010 \001(\r"
    "\022\027\n\003Msg\030\t \003(\0132\n.PBTeamMsg\"\240\001\n\036CMessageTe"
    "amSearchConscribeMsg\022\017\n\007MsgType\030\001 \001(\r\022\020\n"
    "\010MaxLevel\030\002 \001(\r\022\021\n\tPageIndex\030\003 \001(\r\022\020\n\010Mi"
    "nLevel\030\004 \001(\r\022\025\n\rConscribeType\030\005 \001(\r\022\016\n\006M"
    "etier\030\006 \001(\r\022\017\n\007SubType\030\007 \001(\r\"\333\001\n#CMessag"
    "eTeamSearchConscribeCallBack\022\037\n\006Router\030\001"
    " \001(\0132\017.CMessageRouter\022\017\n\007MsgBuff\030\002 \001(\014\022\017"
    "\n\007BuffLen\030\003 \001(\r\022\017\n\007MsgType\030\004 \001(\r\022\020\n\010MsgC"
    "ount\030\005 \001(\r\022\021\n\tPageIndex\030\006 \001(\r\022\027\n\003Msg\030\007 \003"
    "(\0132\n.PBTeamMsg\022\017\n\007MsgSize\030\010 \001(\r\022\021\n\tTotal"
    "Page\030\t \001(\r\"8\n\025CMessageTeamDeleteMsg\022\017\n\007M"
    "sgType\030\001 \001(\r\022\016\n\006CharID\030\002 \001(\r\"B\n\035CMessage"
    "TeamDeleteMsgCallBack\022\020\n\010EntityID\030\001 \001(\r\022"
    "\017\n\007MsgType\030\002 \001(\r\"\'\n\027CMessageTeamOrderFol"
    "low\022\014\n\004Code\030\001 \001(\r\"S\n\037CMessageTeamOrderFo"
    "llowCallBack\022\016\n\006CharID\030\001 \001(\r\022\022\n\nHeaderNa"
    "me\030\002 \001(\t\022\014\n\004Code\030\003 \001(\r\")\n\031CMessageTeamRe"
    "questFollow\022\014\n\004Code\030\001 \001(\r\"A\n!CMessageTea"
    "mRequestFollowCallBack\022\014\n\004Name\030\001 \001(\t\022\016\n\006"
    "CharID\030\002 \001(\r\"t\n\034CMessageTeamTwoParamCall"
    "Back\022\017\n\007DesName\030\001 \001(\t\022\021\n\tDesCharID\030\002 \001(\r"
    "\022\017\n\007SrcName\030\003 \001(\t\022\014\n\004Code\030\004 \001(\r\022\021\n\tSrcCh"
    "arID\030\005 \001(\r\"M\n\027CMessageTeamStateChange\022\020\n"
    "\010TeamFlag\030\001 \001(\r\022\016\n\006CharID\030\002 \001(\r\022\020\n\010Entit"
    "yID\030\003 \001(\r\"c\n CMessageRedirectJoinTeamRes"
    "ponse\022\037\n\006Router\030\001 \001(\0132\017.CMessageRouter\022\016"
    "\n\006ItemID\030\002 \001(\r\022\016\n\006HeadID\030\003 \001(\r\"\252\001\n\"CMess"
    "ageRedirectTeamRelationNotice\022\037\n\006Router\030"
    "\001 \001(\0132\017.CMessageRouter\022\021\n\tDesCharID\030\002 \001("
    "\r\022\r\n\005IsAdd\030\003 \001(\r\022\021\n\tSrcCharID\030\004 \001(\r\022\017\n\007D"
    "esName\030\005 \001(\t\022\014\n\004Type\030\006 \001(\r\022\017\n\007SrcName\030\007 "
    "\001(\t\"x\n CMessageRedirectCreateTeamNotice\022"
    "\037\n\006Router\030\001 \001(\0132\017.CMessageRouter\022\016\n\006Char"
    "ID\030\002 \001(\r\022\021\n\tSrcCharID\030\003 \001(\r\022\020\n\010CharName\030"
    "\004 \001(\t\"B\n\022CMessageTeamNotice\022\014\n\004Code\030\001 \001("
    "\r\022\016\n\006Param2\030\002 \001(\t\022\016\n\006Param1\030\003 \001(\t*\301\014\n\rTe"
    "amMessageID\022\036\n\031ID_C2S_REQUEST_CREATETEAM"
    "\020\2018\022\032\n\025ID_C2S_REQUEST_INVITE\020\2028\022\035\n\030ID_C2"
    "S_REQUEST_INVITERTN\020\2038\022\"\n\035ID_C2S_REQUEST"
    "_INVITEDREQUEST\020\204<\022\032\n\025ID_C2S_REQUEST_SEA"
    "RCH\020\2058\022\036\n\031ID_C2S_REQUEST_ASKFORJOIN\020\2068\022\034"
    "\n\027ID_C2S_REQUEST_APPLYRTN\020\2078\022\031\n\024ID_C2S_R"
    "EQUEST_LEAVE\020\2108\022\033\n\026ID_C2S_REQUEST_NEWHEA"
    "D\020\2118\022\030\n\023ID_C2S_REQUEST_TICK\020\2128\022\033\n\026ID_C2S"
    "_REQUEST_ENDTEAM\020\2138\022\037\n\032ID_S2C_REQUEST_PR"
    "OPOSERRTN\020\214<\022\036\n\031ID_S2C_NOTIFY_SYNITEMLIS"
    "T\020\215<\022\033\n\026ID_S2C_NOTIFY_ITEMLIST\020\2168\022\032\n\025ID_"
    "S2C_NOTIFY_ENDTEAM\020\2178\022\035\n\030ID_S2C_NOTIFY_A"
    "SKJOINRTN\020\220<\022\032\n\025ID_S2C_NOTIFY_TICKRTN\020\2218"
    "\022\033\n\026ID_S2C_NOTIFY_ERRORMSG\020\222<\022\035\n\030ID_C2S_"
    "NOTIFY_ASKTEAMMSG\020\2238\022\035\n\030ID_S2C_NOTIFY_AS"
    "KTEAMTRN\020\2248\022\037\n\032ID_S2C_NOTIFY_CONSCRIBERT"
    "N\020\2258\022\037\n\032ID_C2S_NOTIFY_CONSCRIBEMSG\020\2268\022\036\n"
    "\031ID_S2C_NOTIFY_SYNPROPERTY\020\227<\022$\n\037ID_C2S_"
    "REQUEST_CHANGEDISTRIBUTE\020\2308\022&\n!ID_S2C_NO"
    "TIFY_CHANGEDISTRIBUTERTN\020\2318\022\032\n\025ID_S2C_NO"
    "TIFY_SYNBUFF\020\2328\022\033\n\026ID_C2S_REQUEST_BUFFRT"
    "N\020\2338\022\036\n\031ID_C2S_REQUEST_ALIVESTATE\020\234<\022$\n\037"
    "ID_C2S_REQUEST_CLEARREQUESTLIST\020\2358\022#\n\036ID"
    "_C2S_REQUEST_CLEARINVITELIST\020\2368\022\'\n\"ID_S2"
    "C_NOTIFY_CLEARREQUESTCALLBACK\020\2378\022&\n!ID_S"
    "2C_NOTIFY_CLEARINVITECALLBACK\020\2408\022\035\n\030ID_C"
    "2S_REQUEST_SEARCHMSG\020\2418\022#\n\036ID_C2S_REQUES"
    "T_SRHCONSCRIBEMSG\020\2428\022$\n\037ID_S2C_NOTIFY_SE"
    "ARCHMSGCALLBACK\020\243<\022\'\n\"ID_S2C_NOTIFY_SRHC"
    "ONSCRIBECALLBACK\020\244<\022\032\n\025ID_C2S_REQUEST_DE"
    "LMSG\020\2458\022!\n\034ID_S2C_NOTIFY_DELMSGCALLBACK\020"
    "\2468\022\037\n\032ID_C2S_REQUEST_ORDERFOLLOW\020\2478\022!\n\034I"
    "D_C2S_REQUEST_REQUESTFOLLOW\020\2508\022!\n\034ID_S2C"
    "_NOTIFY_ORDERFOLLOWRTN\020\2518\022#\n\036ID_S2C_NOTI"
    "FY_REQUESTFOLLOWRTN\020\2528\022\037\n\032ID_S2C_NOTIFY_"
    "2PARAMNOTIFY\020\2538\022\"\n\035ID_S2C_NOTIFY_CHANGET"
    "EAMSTATE\020\2548\022%\n ID_S2S_RESPONSE_REDIRECTJ"
    "OINTEAM\020\255<\022#\n\036ID_S2S_NOTIFY_REDIRECTRELA"
    "TION\020\256<\022%\n ID_S2S_NOTIFY_REDIRECTCREATET"
    "EAM\020\257<\022\035\n\030ID_S2C_NOTIFY_TEAMNOTICE\020\2608B\002H"
    "\001", 6281);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "teammessage_pb.hxx", &protobuf_RegisterTypes);
  #endif
  CMessageCreateTeamSelf::default_instance_ = new CMessageCreateTeamSelf();
  CMessageTeamInvite::default_instance_ = new CMessageTeamInvite();
  CMessageTeamInviteRtn::default_instance_ = new CMessageTeamInviteRtn();
  CMessageTeamInvitedRequestCallBack::default_instance_ = new CMessageTeamInvitedRequestCallBack();
  CMessageTeamSearch::default_instance_ = new CMessageTeamSearch();
  CMessageTeamRequest::default_instance_ = new CMessageTeamRequest();
  CMessageTeamRequestRtn::default_instance_ = new CMessageTeamRequestRtn();
  CMessageTeamLeave::default_instance_ = new CMessageTeamLeave();
  CMessageTeamNewHead::default_instance_ = new CMessageTeamNewHead();
  CMessageTeamTick::default_instance_ = new CMessageTeamTick();
  CMessageTeamEnd::default_instance_ = new CMessageTeamEnd();
  CMessageTeamRequestPlayerCallBack::default_instance_ = new CMessageTeamRequestPlayerCallBack();
  CMessageTeamNotifyCallBack::default_instance_ = new CMessageTeamNotifyCallBack();
  CMessageTeamCallBack::default_instance_ = new CMessageTeamCallBack();
  CMessageTeamEndCallBack::default_instance_ = new CMessageTeamEndCallBack();
  CMessageTeamInviteAskCallBack::default_instance_ = new CMessageTeamInviteAskCallBack();
  CMessageTeamTickCallBack::default_instance_ = new CMessageTeamTickCallBack();
  CMessageTeamErrMsgCallBack::default_instance_ = new CMessageTeamErrMsgCallBack();
  CMessageTeamAskTeamMsg::default_instance_ = new CMessageTeamAskTeamMsg();
  CMessageTeamAskTeamCallBack::default_instance_ = new CMessageTeamAskTeamCallBack();
  CMessageTeamConscribeMsg::default_instance_ = new CMessageTeamConscribeMsg();
  CMessageTeamConscribeCallBack::default_instance_ = new CMessageTeamConscribeCallBack();
  CMessageTeamPropertyNotifyCallBack::default_instance_ = new CMessageTeamPropertyNotifyCallBack();
  CMessageTeamChangeDistribute::default_instance_ = new CMessageTeamChangeDistribute();
  CMessageTeamChangeDistributeCallBack::default_instance_ = new CMessageTeamChangeDistributeCallBack();
  CMessageTeamNotifyBuffCallBack::default_instance_ = new CMessageTeamNotifyBuffCallBack();
  CMessageTeamBuffCallBack::default_instance_ = new CMessageTeamBuffCallBack();
  CMessageTeamClearRequestList::default_instance_ = new CMessageTeamClearRequestList();
  CMessageTeamClearInviteList::default_instance_ = new CMessageTeamClearInviteList();
  CMessageTeamClearRequestCallBack::default_instance_ = new CMessageTeamClearRequestCallBack();
  CMessageTeamClearInviteCallBack::default_instance_ = new CMessageTeamClearInviteCallBack();
  CMessageTeamSearchMsg::default_instance_ = new CMessageTeamSearchMsg();
  CMessageTeamSearchMsgCallBack::default_instance_ = new CMessageTeamSearchMsgCallBack();
  CMessageTeamSearchConscribeMsg::default_instance_ = new CMessageTeamSearchConscribeMsg();
  CMessageTeamSearchConscribeCallBack::default_instance_ = new CMessageTeamSearchConscribeCallBack();
  CMessageTeamDeleteMsg::default_instance_ = new CMessageTeamDeleteMsg();
  CMessageTeamDeleteMsgCallBack::default_instance_ = new CMessageTeamDeleteMsgCallBack();
  CMessageTeamOrderFollow::default_instance_ = new CMessageTeamOrderFollow();
  CMessageTeamOrderFollowCallBack::default_instance_ = new CMessageTeamOrderFollowCallBack();
  CMessageTeamRequestFollow::default_instance_ = new CMessageTeamRequestFollow();
  CMessageTeamRequestFollowCallBack::default_instance_ = new CMessageTeamRequestFollowCallBack();
  CMessageTeamTwoParamCallBack::default_instance_ = new CMessageTeamTwoParamCallBack();
  CMessageTeamStateChange::default_instance_ = new CMessageTeamStateChange();
  CMessageRedirectJoinTeamResponse::default_instance_ = new CMessageRedirectJoinTeamResponse();
  CMessageRedirectTeamRelationNotice::default_instance_ = new CMessageRedirectTeamRelationNotice();
  CMessageRedirectCreateTeamNotice::default_instance_ = new CMessageRedirectCreateTeamNotice();
  CMessageTeamNotice::default_instance_ = new CMessageTeamNotice();
  CMessageCreateTeamSelf::default_instance_->InitAsDefaultInstance();
  CMessageTeamInvite::default_instance_->InitAsDefaultInstance();
  CMessageTeamInviteRtn::default_instance_->InitAsDefaultInstance();
  CMessageTeamInvitedRequestCallBack::default_instance_->InitAsDefaultInstance();
  CMessageTeamSearch::default_instance_->InitAsDefaultInstance();
  CMessageTeamRequest::default_instance_->InitAsDefaultInstance();
  CMessageTeamRequestRtn::default_instance_->InitAsDefaultInstance();
  CMessageTeamLeave::default_instance_->InitAsDefaultInstance();
  CMessageTeamNewHead::default_instance_->InitAsDefaultInstance();
  CMessageTeamTick::default_instance_->InitAsDefaultInstance();
  CMessageTeamEnd::default_instance_->InitAsDefaultInstance();
  CMessageTeamRequestPlayerCallBack::default_instance_->InitAsDefaultInstance();
  CMessageTeamNotifyCallBack::default_instance_->InitAsDefaultInstance();
  CMessageTeamCallBack::default_instance_->InitAsDefaultInstance();
  CMessageTeamEndCallBack::default_instance_->InitAsDefaultInstance();
  CMessageTeamInviteAskCallBack::default_instance_->InitAsDefaultInstance();
  CMessageTeamTickCallBack::default_instance_->InitAsDefaultInstance();
  CMessageTeamErrMsgCallBack::default_instance_->InitAsDefaultInstance();
  CMessageTeamAskTeamMsg::default_instance_->InitAsDefaultInstance();
  CMessageTeamAskTeamCallBack::default_instance_->InitAsDefaultInstance();
  CMessageTeamConscribeMsg::default_instance_->InitAsDefaultInstance();
  CMessageTeamConscribeCallBack::default_instance_->InitAsDefaultInstance();
  CMessageTeamPropertyNotifyCallBack::default_instance_->InitAsDefaultInstance();
  CMessageTeamChangeDistribute::default_instance_->InitAsDefaultInstance();
  CMessageTeamChangeDistributeCallBack::default_instance_->InitAsDefaultInstance();
  CMessageTeamNotifyBuffCallBack::default_instance_->InitAsDefaultInstance();
  CMessageTeamBuffCallBack::default_instance_->InitAsDefaultInstance();
  CMessageTeamClearRequestList::default_instance_->InitAsDefaultInstance();
  CMessageTeamClearInviteList::default_instance_->InitAsDefaultInstance();
  CMessageTeamClearRequestCallBack::default_instance_->InitAsDefaultInstance();
  CMessageTeamClearInviteCallBack::default_instance_->InitAsDefaultInstance();
  CMessageTeamSearchMsg::default_instance_->InitAsDefaultInstance();
  CMessageTeamSearchMsgCallBack::default_instance_->InitAsDefaultInstance();
  CMessageTeamSearchConscribeMsg::default_instance_->InitAsDefaultInstance();
  CMessageTeamSearchConscribeCallBack::default_instance_->InitAsDefaultInstance();
  CMessageTeamDeleteMsg::default_instance_->InitAsDefaultInstance();
  CMessageTeamDeleteMsgCallBack::default_instance_->InitAsDefaultInstance();
  CMessageTeamOrderFollow::default_instance_->InitAsDefaultInstance();
  CMessageTeamOrderFollowCallBack::default_instance_->InitAsDefaultInstance();
  CMessageTeamRequestFollow::default_instance_->InitAsDefaultInstance();
  CMessageTeamRequestFollowCallBack::default_instance_->InitAsDefaultInstance();
  CMessageTeamTwoParamCallBack::default_instance_->InitAsDefaultInstance();
  CMessageTeamStateChange::default_instance_->InitAsDefaultInstance();
  CMessageRedirectJoinTeamResponse::default_instance_->InitAsDefaultInstance();
  CMessageRedirectTeamRelationNotice::default_instance_->InitAsDefaultInstance();
  CMessageRedirectCreateTeamNotice::default_instance_->InitAsDefaultInstance();
  CMessageTeamNotice::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_teammessage_5fpb_2ehxx);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_teammessage_5fpb_2ehxx {
  StaticDescriptorInitializer_teammessage_5fpb_2ehxx() {
    protobuf_AddDesc_teammessage_5fpb_2ehxx();
  }
} static_descriptor_initializer_teammessage_5fpb_2ehxx_;

const ::google::protobuf::EnumDescriptor* TeamMessageID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamMessageID_descriptor_;
}
bool TeamMessageID_IsValid(int value) {
  switch(value) {
    case 7169:
    case 7170:
    case 7171:
    case 7173:
    case 7174:
    case 7175:
    case 7176:
    case 7177:
    case 7178:
    case 7179:
    case 7182:
    case 7183:
    case 7185:
    case 7187:
    case 7188:
    case 7189:
    case 7190:
    case 7192:
    case 7193:
    case 7194:
    case 7195:
    case 7197:
    case 7198:
    case 7199:
    case 7200:
    case 7201:
    case 7202:
    case 7205:
    case 7206:
    case 7207:
    case 7208:
    case 7209:
    case 7210:
    case 7211:
    case 7212:
    case 7216:
    case 7684:
    case 7692:
    case 7693:
    case 7696:
    case 7698:
    case 7703:
    case 7708:
    case 7715:
    case 7716:
    case 7725:
    case 7726:
    case 7727:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMessageCreateTeamSelf::CMessageCreateTeamSelf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCreateTeamSelf::InitAsDefaultInstance() {}

CMessageCreateTeamSelf::CMessageCreateTeamSelf(const CMessageCreateTeamSelf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCreateTeamSelf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCreateTeamSelf::~CMessageCreateTeamSelf() {
  SharedDtor();
}

void CMessageCreateTeamSelf::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCreateTeamSelf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCreateTeamSelf_descriptor_;
}

const CMessageCreateTeamSelf& CMessageCreateTeamSelf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teammessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCreateTeamSelf* CMessageCreateTeamSelf::default_instance_ = NULL;

CMessageCreateTeamSelf* CMessageCreateTeamSelf::New() const {
  return new CMessageCreateTeamSelf;
}

void CMessageCreateTeamSelf::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCreateTeamSelf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMessageCreateTeamSelf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCreateTeamSelf::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCreateTeamSelf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCreateTeamSelf::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCreateTeamSelf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCreateTeamSelf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCreateTeamSelf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCreateTeamSelf::MergeFrom(const CMessageCreateTeamSelf& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCreateTeamSelf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCreateTeamSelf::CopyFrom(const CMessageCreateTeamSelf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCreateTeamSelf::Swap(CMessageCreateTeamSelf* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCreateTeamSelf::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCreateTeamSelf::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCreateTeamSelf::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCreateTeamSelf_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageTeamInvite::kEntityIDFieldNumber;
const int CMessageTeamInvite::kCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageTeamInvite::CMessageTeamInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTeamInvite::InitAsDefaultInstance() {}

CMessageTeamInvite::CMessageTeamInvite(const CMessageTeamInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTeamInvite::SharedCtor() {
  _cached_size_ = 0;
  entityid_ = 0u;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTeamInvite::~CMessageTeamInvite() {
  SharedDtor();
}

void CMessageTeamInvite::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTeamInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamInvite_descriptor_;
}

const CMessageTeamInvite& CMessageTeamInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teammessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTeamInvite* CMessageTeamInvite::default_instance_ = NULL;

CMessageTeamInvite* CMessageTeamInvite::New() const {
  return new CMessageTeamInvite;
}

void CMessageTeamInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entityid_ = 0u;
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTeamInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 EntityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTeamInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTeamInvite::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->entityid(), output);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTeamInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->entityid(), target);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTeamInvite::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 EntityID = 1;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
    // optional uint32 CharID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTeamInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTeamInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTeamInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTeamInvite::MergeFrom(const CMessageTeamInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_entityid(from.entityid());
    }
    if (from._has_bit(1)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTeamInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamInvite::CopyFrom(const CMessageTeamInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamInvite::Swap(CMessageTeamInvite* other) {
  if (other != this) {
    std::swap(entityid_, other->entityid_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTeamInvite::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTeamInvite::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTeamInvite::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamInvite_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageTeamInviteRtn::kRtnCodeFieldNumber;
const int CMessageTeamInviteRtn::kInviteIDFieldNumber;
const int CMessageTeamInviteRtn::kInviteEntityIDFieldNumber;
const int CMessageTeamInviteRtn::kHeadCharIDFieldNumber;
const int CMessageTeamInviteRtn::kTeamIDFieldNumber;
#endif  // !_MSC_VER

CMessageTeamInviteRtn::CMessageTeamInviteRtn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTeamInviteRtn::InitAsDefaultInstance() {}

CMessageTeamInviteRtn::CMessageTeamInviteRtn(const CMessageTeamInviteRtn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTeamInviteRtn::SharedCtor() {
  _cached_size_ = 0;
  rtncode_ = 0u;
  inviteid_ = 0u;
  inviteentityid_ = 0u;
  headcharid_ = 0u;
  teamid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTeamInviteRtn::~CMessageTeamInviteRtn() {
  SharedDtor();
}

void CMessageTeamInviteRtn::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTeamInviteRtn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamInviteRtn_descriptor_;
}

const CMessageTeamInviteRtn& CMessageTeamInviteRtn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teammessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTeamInviteRtn* CMessageTeamInviteRtn::default_instance_ = NULL;

CMessageTeamInviteRtn* CMessageTeamInviteRtn::New() const {
  return new CMessageTeamInviteRtn;
}

void CMessageTeamInviteRtn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rtncode_ = 0u;
    inviteid_ = 0u;
    inviteentityid_ = 0u;
    headcharid_ = 0u;
    teamid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTeamInviteRtn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RtnCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rtncode_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_InviteID;
        break;
      }
      
      // optional uint32 InviteID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InviteID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &inviteid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_InviteEntityID;
        break;
      }
      
      // optional uint32 InviteEntityID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InviteEntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &inviteentityid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_HeadCharID;
        break;
      }
      
      // optional uint32 HeadCharID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HeadCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &headcharid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_TeamID;
        break;
      }
      
      // optional uint32 TeamID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TeamID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &teamid_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTeamInviteRtn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTeamInviteRtn::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RtnCode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->rtncode(), output);
  }
  
  // optional uint32 InviteID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->inviteid(), output);
  }
  
  // optional uint32 InviteEntityID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->inviteentityid(), output);
  }
  
  // optional uint32 HeadCharID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->headcharid(), output);
  }
  
  // optional uint32 TeamID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->teamid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTeamInviteRtn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RtnCode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->rtncode(), target);
  }
  
  // optional uint32 InviteID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->inviteid(), target);
  }
  
  // optional uint32 InviteEntityID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->inviteentityid(), target);
  }
  
  // optional uint32 HeadCharID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->headcharid(), target);
  }
  
  // optional uint32 TeamID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->teamid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTeamInviteRtn::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RtnCode = 1;
    if (has_rtncode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rtncode());
    }
    
    // optional uint32 InviteID = 2;
    if (has_inviteid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->inviteid());
    }
    
    // optional uint32 InviteEntityID = 3;
    if (has_inviteentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->inviteentityid());
    }
    
    // optional uint32 HeadCharID = 4;
    if (has_headcharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->headcharid());
    }
    
    // optional uint32 TeamID = 5;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->teamid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTeamInviteRtn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTeamInviteRtn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTeamInviteRtn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTeamInviteRtn::MergeFrom(const CMessageTeamInviteRtn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_rtncode(from.rtncode());
    }
    if (from._has_bit(1)) {
      set_inviteid(from.inviteid());
    }
    if (from._has_bit(2)) {
      set_inviteentityid(from.inviteentityid());
    }
    if (from._has_bit(3)) {
      set_headcharid(from.headcharid());
    }
    if (from._has_bit(4)) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTeamInviteRtn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamInviteRtn::CopyFrom(const CMessageTeamInviteRtn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamInviteRtn::Swap(CMessageTeamInviteRtn* other) {
  if (other != this) {
    std::swap(rtncode_, other->rtncode_);
    std::swap(inviteid_, other->inviteid_);
    std::swap(inviteentityid_, other->inviteentityid_);
    std::swap(headcharid_, other->headcharid_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTeamInviteRtn::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTeamInviteRtn::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTeamInviteRtn::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamInviteRtn_reflection_;
}

// ===================================================================

const ::std::string CMessageTeamInvitedRequestCallBack::_default_inviteename_;
const ::std::string CMessageTeamInvitedRequestCallBack::_default_invitename_;
#ifndef _MSC_VER
const int CMessageTeamInvitedRequestCallBack::kRouterFieldNumber;
const int CMessageTeamInvitedRequestCallBack::kAccoutIDFieldNumber;
const int CMessageTeamInvitedRequestCallBack::kInviteeNameFieldNumber;
const int CMessageTeamInvitedRequestCallBack::kInviteIDFieldNumber;
const int CMessageTeamInvitedRequestCallBack::kEntityIDFieldNumber;
const int CMessageTeamInvitedRequestCallBack::kLevelFieldNumber;
const int CMessageTeamInvitedRequestCallBack::kInviteNameFieldNumber;
const int CMessageTeamInvitedRequestCallBack::kNationalityFieldNumber;
const int CMessageTeamInvitedRequestCallBack::kInviteeIDFieldNumber;
const int CMessageTeamInvitedRequestCallBack::kSexFieldNumber;
const int CMessageTeamInvitedRequestCallBack::kMetierFieldNumber;
const int CMessageTeamInvitedRequestCallBack::kFaceFieldNumber;
#endif  // !_MSC_VER

CMessageTeamInvitedRequestCallBack::CMessageTeamInvitedRequestCallBack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTeamInvitedRequestCallBack::InitAsDefaultInstance() {  router_ = const_cast< ::CMessageRouter*>(&::CMessageRouter::default_instance());
}

CMessageTeamInvitedRequestCallBack::CMessageTeamInvitedRequestCallBack(const CMessageTeamInvitedRequestCallBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTeamInvitedRequestCallBack::SharedCtor() {
  _cached_size_ = 0;
  router_ = NULL;
  accoutid_ = 0u;
  inviteename_ = const_cast< ::std::string*>(&_default_inviteename_);
  inviteid_ = 0u;
  entityid_ = 0u;
  level_ = 0u;
  invitename_ = const_cast< ::std::string*>(&_default_invitename_);
  nationality_ = 0u;
  inviteeid_ = 0u;
  sex_ = 0u;
  metier_ = 0u;
  face_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTeamInvitedRequestCallBack::~CMessageTeamInvitedRequestCallBack() {
  SharedDtor();
}

void CMessageTeamInvitedRequestCallBack::SharedDtor() {
  if (inviteename_ != &_default_inviteename_) {
    delete inviteename_;
  }
  if (invitename_ != &_default_invitename_) {
    delete invitename_;
  }
  if (this != default_instance_) {
    delete router_;
  }
}

const ::google::protobuf::Descriptor* CMessageTeamInvitedRequestCallBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamInvitedRequestCallBack_descriptor_;
}

const CMessageTeamInvitedRequestCallBack& CMessageTeamInvitedRequestCallBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teammessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTeamInvitedRequestCallBack* CMessageTeamInvitedRequestCallBack::default_instance_ = NULL;

CMessageTeamInvitedRequestCallBack* CMessageTeamInvitedRequestCallBack::New() const {
  return new CMessageTeamInvitedRequestCallBack;
}

void CMessageTeamInvitedRequestCallBack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (router_ != NULL) router_->::CMessageRouter::Clear();
    }
    accoutid_ = 0u;
    if (_has_bit(2)) {
      if (inviteename_ != &_default_inviteename_) {
        inviteename_->clear();
      }
    }
    inviteid_ = 0u;
    entityid_ = 0u;
    level_ = 0u;
    if (_has_bit(6)) {
      if (invitename_ != &_default_invitename_) {
        invitename_->clear();
      }
    }
    nationality_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    inviteeid_ = 0u;
    sex_ = 0u;
    metier_ = 0u;
    face_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTeamInvitedRequestCallBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CMessageRouter Router = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_router()));
        if (input->ExpectTag(16)) goto parse_AccoutID;
        break;
      }
      
      // optional uint32 AccoutID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AccoutID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accoutid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_InviteeName;
        break;
      }
      
      // optional string InviteeName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_InviteeName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_inviteename()));
        if (input->ExpectTag(32)) goto parse_InviteID;
        break;
      }
      
      // optional uint32 InviteID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InviteID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &inviteid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_EntityID;
        break;
      }
      
      // optional uint32 EntityID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(5);
        if (input->ExpectTag(58)) goto parse_InviteName;
        break;
      }
      
      // optional string InviteName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_InviteName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_invitename()));
        if (input->ExpectTag(64)) goto parse_Nationality;
        break;
      }
      
      // optional uint32 Nationality = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Nationality:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &nationality_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_InviteeID;
        break;
      }
      
      // optional uint32 InviteeID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InviteeID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &inviteeid_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_Sex;
        break;
      }
      
      // optional uint32 Sex = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Sex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sex_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_Metier;
        break;
      }
      
      // optional uint32 Metier = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Metier:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &metier_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_Face;
        break;
      }
      
      // optional uint32 Face = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Face:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &face_));
        _set_bit(11);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTeamInvitedRequestCallBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTeamInvitedRequestCallBack::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->router(), output);
  }
  
  // optional uint32 AccoutID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->accoutid(), output);
  }
  
  // optional string InviteeName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->inviteename(), output);
  }
  
  // optional uint32 InviteID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->inviteid(), output);
  }
  
  // optional uint32 EntityID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->entityid(), output);
  }
  
  // optional uint32 Level = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->level(), output);
  }
  
  // optional string InviteName = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteString(7, this->invitename(), output);
  }
  
  // optional uint32 Nationality = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->nationality(), output);
  }
  
  // optional uint32 InviteeID = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->inviteeid(), output);
  }
  
  // optional uint32 Sex = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->sex(), output);
  }
  
  // optional uint32 Metier = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->metier(), output);
  }
  
  // optional uint32 Face = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->face(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTeamInvitedRequestCallBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->router(), target);
  }
  
  // optional uint32 AccoutID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->accoutid(), target);
  }
  
  // optional string InviteeName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->inviteename(), target);
  }
  
  // optional uint32 InviteID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->inviteid(), target);
  }
  
  // optional uint32 EntityID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->entityid(), target);
  }
  
  // optional uint32 Level = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->level(), target);
  }
  
  // optional string InviteName = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(7, this->invitename(), target);
  }
  
  // optional uint32 Nationality = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->nationality(), target);
  }
  
  // optional uint32 InviteeID = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->inviteeid(), target);
  }
  
  // optional uint32 Sex = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->sex(), target);
  }
  
  // optional uint32 Metier = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->metier(), target);
  }
  
  // optional uint32 Face = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->face(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTeamInvitedRequestCallBack::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMessageRouter Router = 1;
    if (has_router()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->router());
    }
    
    // optional uint32 AccoutID = 2;
    if (has_accoutid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accoutid());
    }
    
    // optional string InviteeName = 3;
    if (has_inviteename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->inviteename());
    }
    
    // optional uint32 InviteID = 4;
    if (has_inviteid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->inviteid());
    }
    
    // optional uint32 EntityID = 5;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
    // optional uint32 Level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
    // optional string InviteName = 7;
    if (has_invitename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->invitename());
    }
    
    // optional uint32 Nationality = 8;
    if (has_nationality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->nationality());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 InviteeID = 9;
    if (has_inviteeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->inviteeid());
    }
    
    // optional uint32 Sex = 10;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sex());
    }
    
    // optional uint32 Metier = 11;
    if (has_metier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->metier());
    }
    
    // optional uint32 Face = 12;
    if (has_face()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->face());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTeamInvitedRequestCallBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTeamInvitedRequestCallBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTeamInvitedRequestCallBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTeamInvitedRequestCallBack::MergeFrom(const CMessageTeamInvitedRequestCallBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_router()->::CMessageRouter::MergeFrom(from.router());
    }
    if (from._has_bit(1)) {
      set_accoutid(from.accoutid());
    }
    if (from._has_bit(2)) {
      set_inviteename(from.inviteename());
    }
    if (from._has_bit(3)) {
      set_inviteid(from.inviteid());
    }
    if (from._has_bit(4)) {
      set_entityid(from.entityid());
    }
    if (from._has_bit(5)) {
      set_level(from.level());
    }
    if (from._has_bit(6)) {
      set_invitename(from.invitename());
    }
    if (from._has_bit(7)) {
      set_nationality(from.nationality());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_inviteeid(from.inviteeid());
    }
    if (from._has_bit(9)) {
      set_sex(from.sex());
    }
    if (from._has_bit(10)) {
      set_metier(from.metier());
    }
    if (from._has_bit(11)) {
      set_face(from.face());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTeamInvitedRequestCallBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamInvitedRequestCallBack::CopyFrom(const CMessageTeamInvitedRequestCallBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamInvitedRequestCallBack::Swap(CMessageTeamInvitedRequestCallBack* other) {
  if (other != this) {
    std::swap(router_, other->router_);
    std::swap(accoutid_, other->accoutid_);
    std::swap(inviteename_, other->inviteename_);
    std::swap(inviteid_, other->inviteid_);
    std::swap(entityid_, other->entityid_);
    std::swap(level_, other->level_);
    std::swap(invitename_, other->invitename_);
    std::swap(nationality_, other->nationality_);
    std::swap(inviteeid_, other->inviteeid_);
    std::swap(sex_, other->sex_);
    std::swap(metier_, other->metier_);
    std::swap(face_, other->face_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTeamInvitedRequestCallBack::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTeamInvitedRequestCallBack::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTeamInvitedRequestCallBack::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamInvitedRequestCallBack_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMessageTeamSearch::CMessageTeamSearch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTeamSearch::InitAsDefaultInstance() {}

CMessageTeamSearch::CMessageTeamSearch(const CMessageTeamSearch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTeamSearch::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTeamSearch::~CMessageTeamSearch() {
  SharedDtor();
}

void CMessageTeamSearch::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTeamSearch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamSearch_descriptor_;
}

const CMessageTeamSearch& CMessageTeamSearch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teammessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTeamSearch* CMessageTeamSearch::default_instance_ = NULL;

CMessageTeamSearch* CMessageTeamSearch::New() const {
  return new CMessageTeamSearch;
}

void CMessageTeamSearch::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTeamSearch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMessageTeamSearch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTeamSearch::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTeamSearch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTeamSearch::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTeamSearch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTeamSearch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTeamSearch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTeamSearch::MergeFrom(const CMessageTeamSearch& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTeamSearch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamSearch::CopyFrom(const CMessageTeamSearch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamSearch::Swap(CMessageTeamSearch* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTeamSearch::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTeamSearch::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTeamSearch::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamSearch_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageTeamRequest::kEntityIDFieldNumber;
const int CMessageTeamRequest::kCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageTeamRequest::CMessageTeamRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTeamRequest::InitAsDefaultInstance() {}

CMessageTeamRequest::CMessageTeamRequest(const CMessageTeamRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTeamRequest::SharedCtor() {
  _cached_size_ = 0;
  entityid_ = 0u;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTeamRequest::~CMessageTeamRequest() {
  SharedDtor();
}

void CMessageTeamRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTeamRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamRequest_descriptor_;
}

const CMessageTeamRequest& CMessageTeamRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teammessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTeamRequest* CMessageTeamRequest::default_instance_ = NULL;

CMessageTeamRequest* CMessageTeamRequest::New() const {
  return new CMessageTeamRequest;
}

void CMessageTeamRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entityid_ = 0u;
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTeamRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 EntityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTeamRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTeamRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->entityid(), output);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTeamRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->entityid(), target);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTeamRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 EntityID = 1;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
    // optional uint32 CharID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTeamRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTeamRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTeamRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTeamRequest::MergeFrom(const CMessageTeamRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_entityid(from.entityid());
    }
    if (from._has_bit(1)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTeamRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamRequest::CopyFrom(const CMessageTeamRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamRequest::Swap(CMessageTeamRequest* other) {
  if (other != this) {
    std::swap(entityid_, other->entityid_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTeamRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTeamRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTeamRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageTeamRequestRtn::kCharIDFieldNumber;
const int CMessageTeamRequestRtn::kEntityIDFieldNumber;
const int CMessageTeamRequestRtn::kCodeFieldNumber;
const int CMessageTeamRequestRtn::kAccountIDFieldNumber;
#endif  // !_MSC_VER

CMessageTeamRequestRtn::CMessageTeamRequestRtn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTeamRequestRtn::InitAsDefaultInstance() {}

CMessageTeamRequestRtn::CMessageTeamRequestRtn(const CMessageTeamRequestRtn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTeamRequestRtn::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  entityid_ = 0u;
  code_ = 0u;
  accountid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTeamRequestRtn::~CMessageTeamRequestRtn() {
  SharedDtor();
}

void CMessageTeamRequestRtn::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTeamRequestRtn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamRequestRtn_descriptor_;
}

const CMessageTeamRequestRtn& CMessageTeamRequestRtn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teammessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTeamRequestRtn* CMessageTeamRequestRtn::default_instance_ = NULL;

CMessageTeamRequestRtn* CMessageTeamRequestRtn::New() const {
  return new CMessageTeamRequestRtn;
}

void CMessageTeamRequestRtn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    entityid_ = 0u;
    code_ = 0u;
    accountid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTeamRequestRtn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_EntityID;
        break;
      }
      
      // optional uint32 EntityID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Code;
        break;
      }
      
      // optional uint32 Code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Code:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &code_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_AccountID;
        break;
      }
      
      // optional uint32 AccountID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AccountID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTeamRequestRtn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTeamRequestRtn::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 EntityID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->entityid(), output);
  }
  
  // optional uint32 Code = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->code(), output);
  }
  
  // optional uint32 AccountID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->accountid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTeamRequestRtn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 EntityID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->entityid(), target);
  }
  
  // optional uint32 Code = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->code(), target);
  }
  
  // optional uint32 AccountID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->accountid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTeamRequestRtn::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 EntityID = 2;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
    // optional uint32 Code = 3;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->code());
    }
    
    // optional uint32 AccountID = 4;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTeamRequestRtn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTeamRequestRtn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTeamRequestRtn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTeamRequestRtn::MergeFrom(const CMessageTeamRequestRtn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_entityid(from.entityid());
    }
    if (from._has_bit(2)) {
      set_code(from.code());
    }
    if (from._has_bit(3)) {
      set_accountid(from.accountid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTeamRequestRtn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamRequestRtn::CopyFrom(const CMessageTeamRequestRtn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamRequestRtn::Swap(CMessageTeamRequestRtn* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(entityid_, other->entityid_);
    std::swap(code_, other->code_);
    std::swap(accountid_, other->accountid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTeamRequestRtn::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTeamRequestRtn::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTeamRequestRtn::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamRequestRtn_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMessageTeamLeave::CMessageTeamLeave()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTeamLeave::InitAsDefaultInstance() {}

CMessageTeamLeave::CMessageTeamLeave(const CMessageTeamLeave& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTeamLeave::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTeamLeave::~CMessageTeamLeave() {
  SharedDtor();
}

void CMessageTeamLeave::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTeamLeave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamLeave_descriptor_;
}

const CMessageTeamLeave& CMessageTeamLeave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teammessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTeamLeave* CMessageTeamLeave::default_instance_ = NULL;

CMessageTeamLeave* CMessageTeamLeave::New() const {
  return new CMessageTeamLeave;
}

void CMessageTeamLeave::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTeamLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMessageTeamLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTeamLeave::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTeamLeave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTeamLeave::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTeamLeave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTeamLeave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTeamLeave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTeamLeave::MergeFrom(const CMessageTeamLeave& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTeamLeave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamLeave::CopyFrom(const CMessageTeamLeave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamLeave::Swap(CMessageTeamLeave* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTeamLeave::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTeamLeave::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTeamLeave::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamLeave_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageTeamNewHead::kCharIDFieldNumber;
const int CMessageTeamNewHead::kEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageTeamNewHead::CMessageTeamNewHead()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTeamNewHead::InitAsDefaultInstance() {}

CMessageTeamNewHead::CMessageTeamNewHead(const CMessageTeamNewHead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTeamNewHead::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  entityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTeamNewHead::~CMessageTeamNewHead() {
  SharedDtor();
}

void CMessageTeamNewHead::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTeamNewHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamNewHead_descriptor_;
}

const CMessageTeamNewHead& CMessageTeamNewHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teammessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTeamNewHead* CMessageTeamNewHead::default_instance_ = NULL;

CMessageTeamNewHead* CMessageTeamNewHead::New() const {
  return new CMessageTeamNewHead;
}

void CMessageTeamNewHead::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    entityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTeamNewHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_EntityID;
        break;
      }
      
      // optional uint32 EntityID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTeamNewHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTeamNewHead::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 EntityID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->entityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTeamNewHead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 EntityID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->entityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTeamNewHead::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 EntityID = 2;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTeamNewHead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTeamNewHead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTeamNewHead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTeamNewHead::MergeFrom(const CMessageTeamNewHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_entityid(from.entityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTeamNewHead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamNewHead::CopyFrom(const CMessageTeamNewHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamNewHead::Swap(CMessageTeamNewHead* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(entityid_, other->entityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTeamNewHead::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTeamNewHead::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTeamNewHead::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamNewHead_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageTeamTick::kEntityIDFieldNumber;
const int CMessageTeamTick::kCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageTeamTick::CMessageTeamTick()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTeamTick::InitAsDefaultInstance() {}

CMessageTeamTick::CMessageTeamTick(const CMessageTeamTick& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTeamTick::SharedCtor() {
  _cached_size_ = 0;
  entityid_ = 0u;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTeamTick::~CMessageTeamTick() {
  SharedDtor();
}

void CMessageTeamTick::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTeamTick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamTick_descriptor_;
}

const CMessageTeamTick& CMessageTeamTick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teammessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTeamTick* CMessageTeamTick::default_instance_ = NULL;

CMessageTeamTick* CMessageTeamTick::New() const {
  return new CMessageTeamTick;
}

void CMessageTeamTick::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entityid_ = 0u;
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTeamTick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 EntityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTeamTick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTeamTick::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->entityid(), output);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTeamTick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->entityid(), target);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTeamTick::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 EntityID = 1;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
    // optional uint32 CharID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTeamTick::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTeamTick* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTeamTick*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTeamTick::MergeFrom(const CMessageTeamTick& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_entityid(from.entityid());
    }
    if (from._has_bit(1)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTeamTick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamTick::CopyFrom(const CMessageTeamTick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamTick::Swap(CMessageTeamTick* other) {
  if (other != this) {
    std::swap(entityid_, other->entityid_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTeamTick::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTeamTick::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTeamTick::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamTick_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMessageTeamEnd::CMessageTeamEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTeamEnd::InitAsDefaultInstance() {}

CMessageTeamEnd::CMessageTeamEnd(const CMessageTeamEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTeamEnd::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTeamEnd::~CMessageTeamEnd() {
  SharedDtor();
}

void CMessageTeamEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTeamEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamEnd_descriptor_;
}

const CMessageTeamEnd& CMessageTeamEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teammessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTeamEnd* CMessageTeamEnd::default_instance_ = NULL;

CMessageTeamEnd* CMessageTeamEnd::New() const {
  return new CMessageTeamEnd;
}

void CMessageTeamEnd::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTeamEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMessageTeamEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTeamEnd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTeamEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTeamEnd::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTeamEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTeamEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTeamEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTeamEnd::MergeFrom(const CMessageTeamEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTeamEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamEnd::CopyFrom(const CMessageTeamEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamEnd::Swap(CMessageTeamEnd* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTeamEnd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTeamEnd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTeamEnd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamEnd_reflection_;
}

// ===================================================================

const ::std::string CMessageTeamRequestPlayerCallBack::_default_name_;
#ifndef _MSC_VER
const int CMessageTeamRequestPlayerCallBack::kRouterFieldNumber;
const int CMessageTeamRequestPlayerCallBack::kEntityIDFieldNumber;
const int CMessageTeamRequestPlayerCallBack::kFaceFieldNumber;
const int CMessageTeamRequestPlayerCallBack::kNationalityFieldNumber;
const int CMessageTeamRequestPlayerCallBack::kNameFieldNumber;
const int CMessageTeamRequestPlayerCallBack::kAccoutIDFieldNumber;
const int CMessageTeamRequestPlayerCallBack::kLevelFieldNumber;
const int CMessageTeamRequestPlayerCallBack::kSexFieldNumber;
const int CMessageTeamRequestPlayerCallBack::kMetierFieldNumber;
const int CMessageTeamRequestPlayerCallBack::kCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageTeamRequestPlayerCallBack::CMessageTeamRequestPlayerCallBack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTeamRequestPlayerCallBack::InitAsDefaultInstance() {  router_ = const_cast< ::CMessageRouter*>(&::CMessageRouter::default_instance());
}

CMessageTeamRequestPlayerCallBack::CMessageTeamRequestPlayerCallBack(const CMessageTeamRequestPlayerCallBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTeamRequestPlayerCallBack::SharedCtor() {
  _cached_size_ = 0;
  router_ = NULL;
  entityid_ = 0u;
  face_ = 0u;
  nationality_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  accoutid_ = 0u;
  level_ = 0u;
  sex_ = 0u;
  metier_ = 0u;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTeamRequestPlayerCallBack::~CMessageTeamRequestPlayerCallBack() {
  SharedDtor();
}

void CMessageTeamRequestPlayerCallBack::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
    delete router_;
  }
}

const ::google::protobuf::Descriptor* CMessageTeamRequestPlayerCallBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamRequestPlayerCallBack_descriptor_;
}

const CMessageTeamRequestPlayerCallBack& CMessageTeamRequestPlayerCallBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teammessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTeamRequestPlayerCallBack* CMessageTeamRequestPlayerCallBack::default_instance_ = NULL;

CMessageTeamRequestPlayerCallBack* CMessageTeamRequestPlayerCallBack::New() const {
  return new CMessageTeamRequestPlayerCallBack;
}

void CMessageTeamRequestPlayerCallBack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (router_ != NULL) router_->::CMessageRouter::Clear();
    }
    entityid_ = 0u;
    face_ = 0u;
    nationality_ = 0u;
    if (_has_bit(4)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    accoutid_ = 0u;
    level_ = 0u;
    sex_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    metier_ = 0u;
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTeamRequestPlayerCallBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CMessageRouter Router = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_router()));
        if (input->ExpectTag(16)) goto parse_EntityID;
        break;
      }
      
      // optional uint32 EntityID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Face;
        break;
      }
      
      // optional uint32 Face = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Face:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &face_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Nationality;
        break;
      }
      
      // optional uint32 Nationality = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Nationality:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &nationality_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_Name;
        break;
      }
      
      // optional string Name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(48)) goto parse_AccoutID;
        break;
      }
      
      // optional uint32 AccoutID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AccoutID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accoutid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_Sex;
        break;
      }
      
      // optional uint32 Sex = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Sex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sex_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_Metier;
        break;
      }
      
      // optional uint32 Metier = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Metier:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &metier_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(9);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTeamRequestPlayerCallBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTeamRequestPlayerCallBack::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->router(), output);
  }
  
  // optional uint32 EntityID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->entityid(), output);
  }
  
  // optional uint32 Face = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->face(), output);
  }
  
  // optional uint32 Nationality = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->nationality(), output);
  }
  
  // optional string Name = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->name(), output);
  }
  
  // optional uint32 AccoutID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->accoutid(), output);
  }
  
  // optional uint32 Level = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->level(), output);
  }
  
  // optional uint32 Sex = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->sex(), output);
  }
  
  // optional uint32 Metier = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->metier(), output);
  }
  
  // optional uint32 CharID = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->charid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTeamRequestPlayerCallBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->router(), target);
  }
  
  // optional uint32 EntityID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->entityid(), target);
  }
  
  // optional uint32 Face = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->face(), target);
  }
  
  // optional uint32 Nationality = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->nationality(), target);
  }
  
  // optional string Name = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->name(), target);
  }
  
  // optional uint32 AccoutID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->accoutid(), target);
  }
  
  // optional uint32 Level = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->level(), target);
  }
  
  // optional uint32 Sex = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->sex(), target);
  }
  
  // optional uint32 Metier = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->metier(), target);
  }
  
  // optional uint32 CharID = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->charid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTeamRequestPlayerCallBack::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMessageRouter Router = 1;
    if (has_router()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->router());
    }
    
    // optional uint32 EntityID = 2;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
    // optional uint32 Face = 3;
    if (has_face()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->face());
    }
    
    // optional uint32 Nationality = 4;
    if (has_nationality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->nationality());
    }
    
    // optional string Name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional uint32 AccoutID = 6;
    if (has_accoutid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accoutid());
    }
    
    // optional uint32 Level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
    // optional uint32 Sex = 8;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sex());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 Metier = 9;
    if (has_metier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->metier());
    }
    
    // optional uint32 CharID = 10;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTeamRequestPlayerCallBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTeamRequestPlayerCallBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTeamRequestPlayerCallBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTeamRequestPlayerCallBack::MergeFrom(const CMessageTeamRequestPlayerCallBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_router()->::CMessageRouter::MergeFrom(from.router());
    }
    if (from._has_bit(1)) {
      set_entityid(from.entityid());
    }
    if (from._has_bit(2)) {
      set_face(from.face());
    }
    if (from._has_bit(3)) {
      set_nationality(from.nationality());
    }
    if (from._has_bit(4)) {
      set_name(from.name());
    }
    if (from._has_bit(5)) {
      set_accoutid(from.accoutid());
    }
    if (from._has_bit(6)) {
      set_level(from.level());
    }
    if (from._has_bit(7)) {
      set_sex(from.sex());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_metier(from.metier());
    }
    if (from._has_bit(9)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTeamRequestPlayerCallBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamRequestPlayerCallBack::CopyFrom(const CMessageTeamRequestPlayerCallBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamRequestPlayerCallBack::Swap(CMessageTeamRequestPlayerCallBack* other) {
  if (other != this) {
    std::swap(router_, other->router_);
    std::swap(entityid_, other->entityid_);
    std::swap(face_, other->face_);
    std::swap(nationality_, other->nationality_);
    std::swap(name_, other->name_);
    std::swap(accoutid_, other->accoutid_);
    std::swap(level_, other->level_);
    std::swap(sex_, other->sex_);
    std::swap(metier_, other->metier_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTeamRequestPlayerCallBack::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTeamRequestPlayerCallBack::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTeamRequestPlayerCallBack::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamRequestPlayerCallBack_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageTeamNotifyCallBack::kRouterFieldNumber;
const int CMessageTeamNotifyCallBack::kCodeFieldNumber;
const int CMessageTeamNotifyCallBack::kMemberFieldNumber;
#endif  // !_MSC_VER

CMessageTeamNotifyCallBack::CMessageTeamNotifyCallBack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTeamNotifyCallBack::InitAsDefaultInstance() {  router_ = const_cast< ::CMessageRouter*>(&::CMessageRouter::default_instance());
  member_ = const_cast< ::PBMember*>(&::PBMember::default_instance());
}

CMessageTeamNotifyCallBack::CMessageTeamNotifyCallBack(const CMessageTeamNotifyCallBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTeamNotifyCallBack::SharedCtor() {
  _cached_size_ = 0;
  router_ = NULL;
  code_ = 0u;
  member_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTeamNotifyCallBack::~CMessageTeamNotifyCallBack() {
  SharedDtor();
}

void CMessageTeamNotifyCallBack::SharedDtor() {
  if (this != default_instance_) {
    delete router_;
    delete member_;
  }
}

const ::google::protobuf::Descriptor* CMessageTeamNotifyCallBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamNotifyCallBack_descriptor_;
}

const CMessageTeamNotifyCallBack& CMessageTeamNotifyCallBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teammessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTeamNotifyCallBack* CMessageTeamNotifyCallBack::default_instance_ = NULL;

CMessageTeamNotifyCallBack* CMessageTeamNotifyCallBack::New() const {
  return new CMessageTeamNotifyCallBack;
}

void CMessageTeamNotifyCallBack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (router_ != NULL) router_->::CMessageRouter::Clear();
    }
    code_ = 0u;
    if (_has_bit(2)) {
      if (member_ != NULL) member_->::PBMember::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTeamNotifyCallBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CMessageRouter Router = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_router()));
        if (input->ExpectTag(16)) goto parse_Code;
        break;
      }
      
      // optional uint32 Code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Code:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &code_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_Member;
        break;
      }
      
      // optional .PBMember Member = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Member:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_member()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTeamNotifyCallBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTeamNotifyCallBack::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->router(), output);
  }
  
  // optional uint32 Code = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->code(), output);
  }
  
  // optional .PBMember Member = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->member(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTeamNotifyCallBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->router(), target);
  }
  
  // optional uint32 Code = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->code(), target);
  }
  
  // optional .PBMember Member = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->member(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTeamNotifyCallBack::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMessageRouter Router = 1;
    if (has_router()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->router());
    }
    
    // optional uint32 Code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->code());
    }
    
    // optional .PBMember Member = 3;
    if (has_member()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->member());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTeamNotifyCallBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTeamNotifyCallBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTeamNotifyCallBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTeamNotifyCallBack::MergeFrom(const CMessageTeamNotifyCallBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_router()->::CMessageRouter::MergeFrom(from.router());
    }
    if (from._has_bit(1)) {
      set_code(from.code());
    }
    if (from._has_bit(2)) {
      mutable_member()->::PBMember::MergeFrom(from.member());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTeamNotifyCallBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamNotifyCallBack::CopyFrom(const CMessageTeamNotifyCallBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamNotifyCallBack::Swap(CMessageTeamNotifyCallBack* other) {
  if (other != this) {
    std::swap(router_, other->router_);
    std::swap(code_, other->code_);
    std::swap(member_, other->member_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTeamNotifyCallBack::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTeamNotifyCallBack::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTeamNotifyCallBack::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamNotifyCallBack_reflection_;
}

// ===================================================================

const ::std::string CMessageTeamCallBack::_default_headername_;
const ::std::string CMessageTeamCallBack::_default_buff_;
#ifndef _MSC_VER
const int CMessageTeamCallBack::kHeaderNameFieldNumber;
const int CMessageTeamCallBack::kCountFieldNumber;
const int CMessageTeamCallBack::kBuffFieldNumber;
const int CMessageTeamCallBack::kHeadEtyIDFieldNumber;
const int CMessageTeamCallBack::kMemberFieldNumber;
const int CMessageTeamCallBack::kBuffSizeFieldNumber;
const int CMessageTeamCallBack::kDistributeFieldNumber;
#endif  // !_MSC_VER

CMessageTeamCallBack::CMessageTeamCallBack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTeamCallBack::InitAsDefaultInstance() {}

CMessageTeamCallBack::CMessageTeamCallBack(const CMessageTeamCallBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTeamCallBack::SharedCtor() {
  _cached_size_ = 0;
  headername_ = const_cast< ::std::string*>(&_default_headername_);
  count_ = 0u;
  buff_ = const_cast< ::std::string*>(&_default_buff_);
  headetyid_ = 0u;
  buffsize_ = 0u;
  distribute_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTeamCallBack::~CMessageTeamCallBack() {
  SharedDtor();
}

void CMessageTeamCallBack::SharedDtor() {
  if (headername_ != &_default_headername_) {
    delete headername_;
  }
  if (buff_ != &_default_buff_) {
    delete buff_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTeamCallBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamCallBack_descriptor_;
}

const CMessageTeamCallBack& CMessageTeamCallBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teammessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTeamCallBack* CMessageTeamCallBack::default_instance_ = NULL;

CMessageTeamCallBack* CMessageTeamCallBack::New() const {
  return new CMessageTeamCallBack;
}

void CMessageTeamCallBack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headername_ != &_default_headername_) {
        headername_->clear();
      }
    }
    count_ = 0u;
    if (_has_bit(2)) {
      if (buff_ != &_default_buff_) {
        buff_->clear();
      }
    }
    headetyid_ = 0u;
    buffsize_ = 0u;
    distribute_ = 0u;
  }
  member_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTeamCallBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string HeaderName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_headername()));
        if (input->ExpectTag(16)) goto parse_Count;
        break;
      }
      
      // optional uint32 Count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Count:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &count_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_Buff;
        break;
      }
      
      // optional string Buff = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Buff:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_buff()));
        if (input->ExpectTag(32)) goto parse_HeadEtyID;
        break;
      }
      
      // optional uint32 HeadEtyID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HeadEtyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &headetyid_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_Member;
        break;
      }
      
      // repeated .PBMember Member = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Member:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_member()));
        if (input->ExpectTag(42)) goto parse_Member;
        if (input->ExpectTag(48)) goto parse_BuffSize;
        break;
      }
      
      // optional uint32 BuffSize = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BuffSize:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &buffsize_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_Distribute;
        break;
      }
      
      // optional uint32 Distribute = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Distribute:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &distribute_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTeamCallBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTeamCallBack::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string HeaderName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->headername(), output);
  }
  
  // optional uint32 Count = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->count(), output);
  }
  
  // optional string Buff = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->buff(), output);
  }
  
  // optional uint32 HeadEtyID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->headetyid(), output);
  }
  
  // repeated .PBMember Member = 5;
  for (int i = 0; i < this->member_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(5, this->member(i), output);
  }
  
  // optional uint32 BuffSize = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->buffsize(), output);
  }
  
  // optional uint32 Distribute = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->distribute(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTeamCallBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string HeaderName = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->headername(), target);
  }
  
  // optional uint32 Count = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->count(), target);
  }
  
  // optional string Buff = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->buff(), target);
  }
  
  // optional uint32 HeadEtyID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->headetyid(), target);
  }
  
  // repeated .PBMember Member = 5;
  for (int i = 0; i < this->member_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(5, this->member(i), target);
  }
  
  // optional uint32 BuffSize = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->buffsize(), target);
  }
  
  // optional uint32 Distribute = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->distribute(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTeamCallBack::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string HeaderName = 1;
    if (has_headername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->headername());
    }
    
    // optional uint32 Count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->count());
    }
    
    // optional string Buff = 3;
    if (has_buff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->buff());
    }
    
    // optional uint32 HeadEtyID = 4;
    if (has_headetyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->headetyid());
    }
    
    // optional uint32 BuffSize = 6;
    if (has_buffsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->buffsize());
    }
    
    // optional uint32 Distribute = 7;
    if (has_distribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->distribute());
    }
    
  }
  // repeated .PBMember Member = 5;
  total_size += 1 * this->member_size();
  for (int i = 0; i < this->member_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->member(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTeamCallBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTeamCallBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTeamCallBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTeamCallBack::MergeFrom(const CMessageTeamCallBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_.MergeFrom(from.member_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_headername(from.headername());
    }
    if (from._has_bit(1)) {
      set_count(from.count());
    }
    if (from._has_bit(2)) {
      set_buff(from.buff());
    }
    if (from._has_bit(3)) {
      set_headetyid(from.headetyid());
    }
    if (from._has_bit(5)) {
      set_buffsize(from.buffsize());
    }
    if (from._has_bit(6)) {
      set_distribute(from.distribute());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTeamCallBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamCallBack::CopyFrom(const CMessageTeamCallBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamCallBack::Swap(CMessageTeamCallBack* other) {
  if (other != this) {
    std::swap(headername_, other->headername_);
    std::swap(count_, other->count_);
    std::swap(buff_, other->buff_);
    std::swap(headetyid_, other->headetyid_);
    member_.Swap(&other->member_);
    std::swap(buffsize_, other->buffsize_);
    std::swap(distribute_, other->distribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTeamCallBack::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTeamCallBack::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTeamCallBack::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamCallBack_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMessageTeamEndCallBack::CMessageTeamEndCallBack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTeamEndCallBack::InitAsDefaultInstance() {}

CMessageTeamEndCallBack::CMessageTeamEndCallBack(const CMessageTeamEndCallBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTeamEndCallBack::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTeamEndCallBack::~CMessageTeamEndCallBack() {
  SharedDtor();
}

void CMessageTeamEndCallBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTeamEndCallBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamEndCallBack_descriptor_;
}

const CMessageTeamEndCallBack& CMessageTeamEndCallBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teammessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTeamEndCallBack* CMessageTeamEndCallBack::default_instance_ = NULL;

CMessageTeamEndCallBack* CMessageTeamEndCallBack::New() const {
  return new CMessageTeamEndCallBack;
}

void CMessageTeamEndCallBack::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTeamEndCallBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMessageTeamEndCallBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTeamEndCallBack::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTeamEndCallBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTeamEndCallBack::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTeamEndCallBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTeamEndCallBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTeamEndCallBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTeamEndCallBack::MergeFrom(const CMessageTeamEndCallBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTeamEndCallBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamEndCallBack::CopyFrom(const CMessageTeamEndCallBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamEndCallBack::Swap(CMessageTeamEndCallBack* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTeamEndCallBack::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTeamEndCallBack::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTeamEndCallBack::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamEndCallBack_reflection_;
}

// ===================================================================

const ::std::string CMessageTeamInviteAskCallBack::_default_headname_;
const ::std::string CMessageTeamInviteAskCallBack::_default_name_;
const ::std::string CMessageTeamInviteAskCallBack::_default_buff_;
#ifndef _MSC_VER
const int CMessageTeamInviteAskCallBack::kRouterFieldNumber;
const int CMessageTeamInviteAskCallBack::kCountFieldNumber;
const int CMessageTeamInviteAskCallBack::kHeadNameFieldNumber;
const int CMessageTeamInviteAskCallBack::kNameFieldNumber;
const int CMessageTeamInviteAskCallBack::kNationalityFieldNumber;
const int CMessageTeamInviteAskCallBack::kMemberFieldNumber;
const int CMessageTeamInviteAskCallBack::kBuffLenFieldNumber;
const int CMessageTeamInviteAskCallBack::kCharIDFieldNumber;
const int CMessageTeamInviteAskCallBack::kEntityIDFieldNumber;
const int CMessageTeamInviteAskCallBack::kTeamIDFieldNumber;
const int CMessageTeamInviteAskCallBack::kDistributeFieldNumber;
const int CMessageTeamInviteAskCallBack::kBuffFieldNumber;
#endif  // !_MSC_VER

CMessageTeamInviteAskCallBack::CMessageTeamInviteAskCallBack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTeamInviteAskCallBack::InitAsDefaultInstance() {  router_ = const_cast< ::CMessageRouter*>(&::CMessageRouter::default_instance());
}

CMessageTeamInviteAskCallBack::CMessageTeamInviteAskCallBack(const CMessageTeamInviteAskCallBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTeamInviteAskCallBack::SharedCtor() {
  _cached_size_ = 0;
  router_ = NULL;
  count_ = 0u;
  headname_ = const_cast< ::std::string*>(&_default_headname_);
  name_ = const_cast< ::std::string*>(&_default_name_);
  nationality_ = 0u;
  bufflen_ = 0u;
  charid_ = 0u;
  entityid_ = 0u;
  teamid_ = 0u;
  distribute_ = 0u;
  buff_ = const_cast< ::std::string*>(&_default_buff_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTeamInviteAskCallBack::~CMessageTeamInviteAskCallBack() {
  SharedDtor();
}

void CMessageTeamInviteAskCallBack::SharedDtor() {
  if (headname_ != &_default_headname_) {
    delete headname_;
  }
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (buff_ != &_default_buff_) {
    delete buff_;
  }
  if (this != default_instance_) {
    delete router_;
  }
}

const ::google::protobuf::Descriptor* CMessageTeamInviteAskCallBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamInviteAskCallBack_descriptor_;
}

const CMessageTeamInviteAskCallBack& CMessageTeamInviteAskCallBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teammessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTeamInviteAskCallBack* CMessageTeamInviteAskCallBack::default_instance_ = NULL;

CMessageTeamInviteAskCallBack* CMessageTeamInviteAskCallBack::New() const {
  return new CMessageTeamInviteAskCallBack;
}

void CMessageTeamInviteAskCallBack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (router_ != NULL) router_->::CMessageRouter::Clear();
    }
    count_ = 0u;
    if (_has_bit(2)) {
      if (headname_ != &_default_headname_) {
        headname_->clear();
      }
    }
    if (_has_bit(3)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    nationality_ = 0u;
    bufflen_ = 0u;
    charid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    entityid_ = 0u;
    teamid_ = 0u;
    distribute_ = 0u;
    if (_has_bit(11)) {
      if (buff_ != &_default_buff_) {
        buff_->clear();
      }
    }
  }
  member_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTeamInviteAskCallBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CMessageRouter Router = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_router()));
        if (input->ExpectTag(16)) goto parse_Count;
        break;
      }
      
      // optional uint32 Count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Count:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &count_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_HeadName;
        break;
      }
      
      // optional string HeadName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_HeadName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_headname()));
        if (input->ExpectTag(34)) goto parse_Name;
        break;
      }
      
      // optional string Name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(40)) goto parse_Nationality;
        break;
      }
      
      // optional uint32 Nationality = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Nationality:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &nationality_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_Member;
        break;
      }
      
      // repeated .PBMember Member = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Member:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_member()));
        if (input->ExpectTag(50)) goto parse_Member;
        if (input->ExpectTag(56)) goto parse_BuffLen;
        break;
      }
      
      // optional uint32 BuffLen = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BuffLen:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &bufflen_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_EntityID;
        break;
      }
      
      // optional uint32 EntityID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_TeamID;
        break;
      }
      
      // optional uint32 TeamID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TeamID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &teamid_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_Distribute;
        break;
      }
      
      // optional uint32 Distribute = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Distribute:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &distribute_));
        _set_bit(10);
        if (input->ExpectTag(98)) goto parse_Buff;
        break;
      }
      
      // optional string Buff = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Buff:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_buff()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTeamInviteAskCallBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTeamInviteAskCallBack::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->router(), output);
  }
  
  // optional uint32 Count = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->count(), output);
  }
  
  // optional string HeadName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->headname(), output);
  }
  
  // optional string Name = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->name(), output);
  }
  
  // optional uint32 Nationality = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->nationality(), output);
  }
  
  // repeated .PBMember Member = 6;
  for (int i = 0; i < this->member_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(6, this->member(i), output);
  }
  
  // optional uint32 BuffLen = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->bufflen(), output);
  }
  
  // optional uint32 CharID = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->charid(), output);
  }
  
  // optional uint32 EntityID = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->entityid(), output);
  }
  
  // optional uint32 TeamID = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->teamid(), output);
  }
  
  // optional uint32 Distribute = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->distribute(), output);
  }
  
  // optional string Buff = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteString(12, this->buff(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTeamInviteAskCallBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->router(), target);
  }
  
  // optional uint32 Count = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->count(), target);
  }
  
  // optional string HeadName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->headname(), target);
  }
  
  // optional string Name = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->name(), target);
  }
  
  // optional uint32 Nationality = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->nationality(), target);
  }
  
  // repeated .PBMember Member = 6;
  for (int i = 0; i < this->member_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(6, this->member(i), target);
  }
  
  // optional uint32 BuffLen = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->bufflen(), target);
  }
  
  // optional uint32 CharID = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->charid(), target);
  }
  
  // optional uint32 EntityID = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->entityid(), target);
  }
  
  // optional uint32 TeamID = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->teamid(), target);
  }
  
  // optional uint32 Distribute = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->distribute(), target);
  }
  
  // optional string Buff = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(12, this->buff(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTeamInviteAskCallBack::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMessageRouter Router = 1;
    if (has_router()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->router());
    }
    
    // optional uint32 Count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->count());
    }
    
    // optional string HeadName = 3;
    if (has_headname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->headname());
    }
    
    // optional string Name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional uint32 Nationality = 5;
    if (has_nationality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->nationality());
    }
    
    // optional uint32 BuffLen = 7;
    if (has_bufflen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->bufflen());
    }
    
    // optional uint32 CharID = 8;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 EntityID = 9;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
    // optional uint32 TeamID = 10;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->teamid());
    }
    
    // optional uint32 Distribute = 11;
    if (has_distribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->distribute());
    }
    
    // optional string Buff = 12;
    if (has_buff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->buff());
    }
    
  }
  // repeated .PBMember Member = 6;
  total_size += 1 * this->member_size();
  for (int i = 0; i < this->member_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->member(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTeamInviteAskCallBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTeamInviteAskCallBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTeamInviteAskCallBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTeamInviteAskCallBack::MergeFrom(const CMessageTeamInviteAskCallBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_.MergeFrom(from.member_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_router()->::CMessageRouter::MergeFrom(from.router());
    }
    if (from._has_bit(1)) {
      set_count(from.count());
    }
    if (from._has_bit(2)) {
      set_headname(from.headname());
    }
    if (from._has_bit(3)) {
      set_name(from.name());
    }
    if (from._has_bit(4)) {
      set_nationality(from.nationality());
    }
    if (from._has_bit(6)) {
      set_bufflen(from.bufflen());
    }
    if (from._has_bit(7)) {
      set_charid(from.charid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_entityid(from.entityid());
    }
    if (from._has_bit(9)) {
      set_teamid(from.teamid());
    }
    if (from._has_bit(10)) {
      set_distribute(from.distribute());
    }
    if (from._has_bit(11)) {
      set_buff(from.buff());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTeamInviteAskCallBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamInviteAskCallBack::CopyFrom(const CMessageTeamInviteAskCallBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamInviteAskCallBack::Swap(CMessageTeamInviteAskCallBack* other) {
  if (other != this) {
    std::swap(router_, other->router_);
    std::swap(count_, other->count_);
    std::swap(headname_, other->headname_);
    std::swap(name_, other->name_);
    std::swap(nationality_, other->nationality_);
    member_.Swap(&other->member_);
    std::swap(bufflen_, other->bufflen_);
    std::swap(charid_, other->charid_);
    std::swap(entityid_, other->entityid_);
    std::swap(teamid_, other->teamid_);
    std::swap(distribute_, other->distribute_);
    std::swap(buff_, other->buff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTeamInviteAskCallBack::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTeamInviteAskCallBack::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTeamInviteAskCallBack::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamInviteAskCallBack_reflection_;
}

// ===================================================================

const ::std::string CMessageTeamTickCallBack::_default_name_;
#ifndef _MSC_VER
const int CMessageTeamTickCallBack::kNameFieldNumber;
const int CMessageTeamTickCallBack::kCharIDFieldNumber;
const int CMessageTeamTickCallBack::kEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageTeamTickCallBack::CMessageTeamTickCallBack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTeamTickCallBack::InitAsDefaultInstance() {}

CMessageTeamTickCallBack::CMessageTeamTickCallBack(const CMessageTeamTickCallBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTeamTickCallBack::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  charid_ = 0u;
  entityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTeamTickCallBack::~CMessageTeamTickCallBack() {
  SharedDtor();
}

void CMessageTeamTickCallBack::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTeamTickCallBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamTickCallBack_descriptor_;
}

const CMessageTeamTickCallBack& CMessageTeamTickCallBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teammessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTeamTickCallBack* CMessageTeamTickCallBack::default_instance_ = NULL;

CMessageTeamTickCallBack* CMessageTeamTickCallBack::New() const {
  return new CMessageTeamTickCallBack;
}

void CMessageTeamTickCallBack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    charid_ = 0u;
    entityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTeamTickCallBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(16)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_EntityID;
        break;
      }
      
      // optional uint32 EntityID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTeamTickCallBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTeamTickCallBack::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string Name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->name(), output);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charid(), output);
  }
  
  // optional uint32 EntityID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->entityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTeamTickCallBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Name = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->name(), target);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charid(), target);
  }
  
  // optional uint32 EntityID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->entityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTeamTickCallBack::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional uint32 CharID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 EntityID = 3;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTeamTickCallBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTeamTickCallBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTeamTickCallBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTeamTickCallBack::MergeFrom(const CMessageTeamTickCallBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_charid(from.charid());
    }
    if (from._has_bit(2)) {
      set_entityid(from.entityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTeamTickCallBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamTickCallBack::CopyFrom(const CMessageTeamTickCallBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamTickCallBack::Swap(CMessageTeamTickCallBack* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(charid_, other->charid_);
    std::swap(entityid_, other->entityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTeamTickCallBack::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTeamTickCallBack::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTeamTickCallBack::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamTickCallBack_reflection_;
}

// ===================================================================

const ::std::string CMessageTeamErrMsgCallBack::_default_name_;
#ifndef _MSC_VER
const int CMessageTeamErrMsgCallBack::kRouterFieldNumber;
const int CMessageTeamErrMsgCallBack::kNameFieldNumber;
const int CMessageTeamErrMsgCallBack::kCodeFieldNumber;
const int CMessageTeamErrMsgCallBack::kCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageTeamErrMsgCallBack::CMessageTeamErrMsgCallBack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTeamErrMsgCallBack::InitAsDefaultInstance() {  router_ = const_cast< ::CMessageRouter*>(&::CMessageRouter::default_instance());
}

CMessageTeamErrMsgCallBack::CMessageTeamErrMsgCallBack(const CMessageTeamErrMsgCallBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTeamErrMsgCallBack::SharedCtor() {
  _cached_size_ = 0;
  router_ = NULL;
  name_ = const_cast< ::std::string*>(&_default_name_);
  code_ = 0u;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTeamErrMsgCallBack::~CMessageTeamErrMsgCallBack() {
  SharedDtor();
}

void CMessageTeamErrMsgCallBack::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
    delete router_;
  }
}

const ::google::protobuf::Descriptor* CMessageTeamErrMsgCallBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamErrMsgCallBack_descriptor_;
}

const CMessageTeamErrMsgCallBack& CMessageTeamErrMsgCallBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teammessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTeamErrMsgCallBack* CMessageTeamErrMsgCallBack::default_instance_ = NULL;

CMessageTeamErrMsgCallBack* CMessageTeamErrMsgCallBack::New() const {
  return new CMessageTeamErrMsgCallBack;
}

void CMessageTeamErrMsgCallBack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (router_ != NULL) router_->::CMessageRouter::Clear();
    }
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    code_ = 0u;
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTeamErrMsgCallBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CMessageRouter Router = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_router()));
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }
      
      // optional string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(24)) goto parse_Code;
        break;
      }
      
      // optional uint32 Code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Code:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &code_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTeamErrMsgCallBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTeamErrMsgCallBack::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->router(), output);
  }
  
  // optional string Name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->name(), output);
  }
  
  // optional uint32 Code = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->code(), output);
  }
  
  // optional uint32 CharID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->charid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTeamErrMsgCallBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->router(), target);
  }
  
  // optional string Name = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->name(), target);
  }
  
  // optional uint32 Code = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->code(), target);
  }
  
  // optional uint32 CharID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->charid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTeamErrMsgCallBack::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMessageRouter Router = 1;
    if (has_router()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->router());
    }
    
    // optional string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional uint32 Code = 3;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->code());
    }
    
    // optional uint32 CharID = 4;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTeamErrMsgCallBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTeamErrMsgCallBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTeamErrMsgCallBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTeamErrMsgCallBack::MergeFrom(const CMessageTeamErrMsgCallBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_router()->::CMessageRouter::MergeFrom(from.router());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      set_code(from.code());
    }
    if (from._has_bit(3)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTeamErrMsgCallBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamErrMsgCallBack::CopyFrom(const CMessageTeamErrMsgCallBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamErrMsgCallBack::Swap(CMessageTeamErrMsgCallBack* other) {
  if (other != this) {
    std::swap(router_, other->router_);
    std::swap(name_, other->name_);
    std::swap(code_, other->code_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTeamErrMsgCallBack::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTeamErrMsgCallBack::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTeamErrMsgCallBack::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamErrMsgCallBack_reflection_;
}

// ===================================================================

const ::std::string CMessageTeamAskTeamMsg::_default_msg_;
#ifndef _MSC_VER
const int CMessageTeamAskTeamMsg::kConscribeTypeFieldNumber;
const int CMessageTeamAskTeamMsg::kSubTypeFieldNumber;
const int CMessageTeamAskTeamMsg::kMsgFieldNumber;
#endif  // !_MSC_VER

CMessageTeamAskTeamMsg::CMessageTeamAskTeamMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTeamAskTeamMsg::InitAsDefaultInstance() {}

CMessageTeamAskTeamMsg::CMessageTeamAskTeamMsg(const CMessageTeamAskTeamMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTeamAskTeamMsg::SharedCtor() {
  _cached_size_ = 0;
  conscribetype_ = 0u;
  subtype_ = 0u;
  msg_ = const_cast< ::std::string*>(&_default_msg_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTeamAskTeamMsg::~CMessageTeamAskTeamMsg() {
  SharedDtor();
}

void CMessageTeamAskTeamMsg::SharedDtor() {
  if (msg_ != &_default_msg_) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTeamAskTeamMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamAskTeamMsg_descriptor_;
}

const CMessageTeamAskTeamMsg& CMessageTeamAskTeamMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teammessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTeamAskTeamMsg* CMessageTeamAskTeamMsg::default_instance_ = NULL;

CMessageTeamAskTeamMsg* CMessageTeamAskTeamMsg::New() const {
  return new CMessageTeamAskTeamMsg;
}

void CMessageTeamAskTeamMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    conscribetype_ = 0u;
    subtype_ = 0u;
    if (_has_bit(2)) {
      if (msg_ != &_default_msg_) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTeamAskTeamMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ConscribeType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &conscribetype_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_SubType;
        break;
      }
      
      // optional uint32 SubType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SubType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &subtype_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_Msg;
        break;
      }
      
      // optional string Msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Msg:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_msg()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTeamAskTeamMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTeamAskTeamMsg::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ConscribeType = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->conscribetype(), output);
  }
  
  // optional uint32 SubType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->subtype(), output);
  }
  
  // optional string Msg = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTeamAskTeamMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ConscribeType = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->conscribetype(), target);
  }
  
  // optional uint32 SubType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->subtype(), target);
  }
  
  // optional string Msg = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTeamAskTeamMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ConscribeType = 1;
    if (has_conscribetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->conscribetype());
    }
    
    // optional uint32 SubType = 2;
    if (has_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->subtype());
    }
    
    // optional string Msg = 3;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTeamAskTeamMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTeamAskTeamMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTeamAskTeamMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTeamAskTeamMsg::MergeFrom(const CMessageTeamAskTeamMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_conscribetype(from.conscribetype());
    }
    if (from._has_bit(1)) {
      set_subtype(from.subtype());
    }
    if (from._has_bit(2)) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTeamAskTeamMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamAskTeamMsg::CopyFrom(const CMessageTeamAskTeamMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamAskTeamMsg::Swap(CMessageTeamAskTeamMsg* other) {
  if (other != this) {
    std::swap(conscribetype_, other->conscribetype_);
    std::swap(subtype_, other->subtype_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTeamAskTeamMsg::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTeamAskTeamMsg::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTeamAskTeamMsg::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamAskTeamMsg_reflection_;
}

// ===================================================================

const ::std::string CMessageTeamAskTeamCallBack::_default_msg_;
const ::std::string CMessageTeamAskTeamCallBack::_default_name_;
#ifndef _MSC_VER
const int CMessageTeamAskTeamCallBack::kMsgFieldNumber;
const int CMessageTeamAskTeamCallBack::kNameFieldNumber;
const int CMessageTeamAskTeamCallBack::kLevelFieldNumber;
const int CMessageTeamAskTeamCallBack::kSubTypeFieldNumber;
const int CMessageTeamAskTeamCallBack::kMetierFieldNumber;
const int CMessageTeamAskTeamCallBack::kConscribeTypeFieldNumber;
#endif  // !_MSC_VER

CMessageTeamAskTeamCallBack::CMessageTeamAskTeamCallBack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTeamAskTeamCallBack::InitAsDefaultInstance() {}

CMessageTeamAskTeamCallBack::CMessageTeamAskTeamCallBack(const CMessageTeamAskTeamCallBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTeamAskTeamCallBack::SharedCtor() {
  _cached_size_ = 0;
  msg_ = const_cast< ::std::string*>(&_default_msg_);
  name_ = const_cast< ::std::string*>(&_default_name_);
  level_ = 0u;
  subtype_ = 0u;
  metier_ = 0u;
  conscribetype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTeamAskTeamCallBack::~CMessageTeamAskTeamCallBack() {
  SharedDtor();
}

void CMessageTeamAskTeamCallBack::SharedDtor() {
  if (msg_ != &_default_msg_) {
    delete msg_;
  }
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTeamAskTeamCallBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamAskTeamCallBack_descriptor_;
}

const CMessageTeamAskTeamCallBack& CMessageTeamAskTeamCallBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teammessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTeamAskTeamCallBack* CMessageTeamAskTeamCallBack::default_instance_ = NULL;

CMessageTeamAskTeamCallBack* CMessageTeamAskTeamCallBack::New() const {
  return new CMessageTeamAskTeamCallBack;
}

void CMessageTeamAskTeamCallBack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (msg_ != &_default_msg_) {
        msg_->clear();
      }
    }
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    level_ = 0u;
    subtype_ = 0u;
    metier_ = 0u;
    conscribetype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTeamAskTeamCallBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string Msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_msg()));
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }
      
      // optional string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(24)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_SubType;
        break;
      }
      
      // optional uint32 SubType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SubType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &subtype_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Metier;
        break;
      }
      
      // optional uint32 Metier = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Metier:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &metier_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_ConscribeType;
        break;
      }
      
      // optional uint32 ConscribeType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ConscribeType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &conscribetype_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTeamAskTeamCallBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTeamAskTeamCallBack::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string Msg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->msg(), output);
  }
  
  // optional string Name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->name(), output);
  }
  
  // optional uint32 Level = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->level(), output);
  }
  
  // optional uint32 SubType = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->subtype(), output);
  }
  
  // optional uint32 Metier = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->metier(), output);
  }
  
  // optional uint32 ConscribeType = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->conscribetype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTeamAskTeamCallBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Msg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->msg(), target);
  }
  
  // optional string Name = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->name(), target);
  }
  
  // optional uint32 Level = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->level(), target);
  }
  
  // optional uint32 SubType = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->subtype(), target);
  }
  
  // optional uint32 Metier = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->metier(), target);
  }
  
  // optional uint32 ConscribeType = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->conscribetype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTeamAskTeamCallBack::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->msg());
    }
    
    // optional string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional uint32 Level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
    // optional uint32 SubType = 4;
    if (has_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->subtype());
    }
    
    // optional uint32 Metier = 5;
    if (has_metier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->metier());
    }
    
    // optional uint32 ConscribeType = 6;
    if (has_conscribetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->conscribetype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTeamAskTeamCallBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTeamAskTeamCallBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTeamAskTeamCallBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTeamAskTeamCallBack::MergeFrom(const CMessageTeamAskTeamCallBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_msg(from.msg());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      set_level(from.level());
    }
    if (from._has_bit(3)) {
      set_subtype(from.subtype());
    }
    if (from._has_bit(4)) {
      set_metier(from.metier());
    }
    if (from._has_bit(5)) {
      set_conscribetype(from.conscribetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTeamAskTeamCallBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamAskTeamCallBack::CopyFrom(const CMessageTeamAskTeamCallBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamAskTeamCallBack::Swap(CMessageTeamAskTeamCallBack* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(subtype_, other->subtype_);
    std::swap(metier_, other->metier_);
    std::swap(conscribetype_, other->conscribetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTeamAskTeamCallBack::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTeamAskTeamCallBack::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTeamAskTeamCallBack::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamAskTeamCallBack_reflection_;
}

// ===================================================================

const ::std::string CMessageTeamConscribeMsg::_default_msg_;
#ifndef _MSC_VER
const int CMessageTeamConscribeMsg::kConscribeTypeFieldNumber;
const int CMessageTeamConscribeMsg::kSubTypeFieldNumber;
const int CMessageTeamConscribeMsg::kMaxLevelFieldNumber;
const int CMessageTeamConscribeMsg::kMsgFieldNumber;
const int CMessageTeamConscribeMsg::kMinLevelFieldNumber;
const int CMessageTeamConscribeMsg::kMetierFieldNumber;
#endif  // !_MSC_VER

CMessageTeamConscribeMsg::CMessageTeamConscribeMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTeamConscribeMsg::InitAsDefaultInstance() {}

CMessageTeamConscribeMsg::CMessageTeamConscribeMsg(const CMessageTeamConscribeMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTeamConscribeMsg::SharedCtor() {
  _cached_size_ = 0;
  conscribetype_ = 0u;
  subtype_ = 0u;
  maxlevel_ = 0u;
  msg_ = const_cast< ::std::string*>(&_default_msg_);
  minlevel_ = 0u;
  metier_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTeamConscribeMsg::~CMessageTeamConscribeMsg() {
  SharedDtor();
}

void CMessageTeamConscribeMsg::SharedDtor() {
  if (msg_ != &_default_msg_) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTeamConscribeMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamConscribeMsg_descriptor_;
}

const CMessageTeamConscribeMsg& CMessageTeamConscribeMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teammessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTeamConscribeMsg* CMessageTeamConscribeMsg::default_instance_ = NULL;

CMessageTeamConscribeMsg* CMessageTeamConscribeMsg::New() const {
  return new CMessageTeamConscribeMsg;
}

void CMessageTeamConscribeMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    conscribetype_ = 0u;
    subtype_ = 0u;
    maxlevel_ = 0u;
    if (_has_bit(3)) {
      if (msg_ != &_default_msg_) {
        msg_->clear();
      }
    }
    minlevel_ = 0u;
    metier_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTeamConscribeMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ConscribeType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &conscribetype_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_SubType;
        break;
      }
      
      // optional uint32 SubType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SubType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &subtype_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_MaxLevel;
        break;
      }
      
      // optional uint32 MaxLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxlevel_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_Msg;
        break;
      }
      
      // optional string Msg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Msg:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_msg()));
        if (input->ExpectTag(40)) goto parse_MinLevel;
        break;
      }
      
      // optional uint32 MinLevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MinLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &minlevel_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Metier;
        break;
      }
      
      // optional uint32 Metier = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Metier:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &metier_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTeamConscribeMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTeamConscribeMsg::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ConscribeType = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->conscribetype(), output);
  }
  
  // optional uint32 SubType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->subtype(), output);
  }
  
  // optional uint32 MaxLevel = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->maxlevel(), output);
  }
  
  // optional string Msg = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->msg(), output);
  }
  
  // optional uint32 MinLevel = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->minlevel(), output);
  }
  
  // optional uint32 Metier = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->metier(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTeamConscribeMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ConscribeType = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->conscribetype(), target);
  }
  
  // optional uint32 SubType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->subtype(), target);
  }
  
  // optional uint32 MaxLevel = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->maxlevel(), target);
  }
  
  // optional string Msg = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->msg(), target);
  }
  
  // optional uint32 MinLevel = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->minlevel(), target);
  }
  
  // optional uint32 Metier = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->metier(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTeamConscribeMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ConscribeType = 1;
    if (has_conscribetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->conscribetype());
    }
    
    // optional uint32 SubType = 2;
    if (has_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->subtype());
    }
    
    // optional uint32 MaxLevel = 3;
    if (has_maxlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxlevel());
    }
    
    // optional string Msg = 4;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->msg());
    }
    
    // optional uint32 MinLevel = 5;
    if (has_minlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->minlevel());
    }
    
    // optional uint32 Metier = 6;
    if (has_metier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->metier());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTeamConscribeMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTeamConscribeMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTeamConscribeMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTeamConscribeMsg::MergeFrom(const CMessageTeamConscribeMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_conscribetype(from.conscribetype());
    }
    if (from._has_bit(1)) {
      set_subtype(from.subtype());
    }
    if (from._has_bit(2)) {
      set_maxlevel(from.maxlevel());
    }
    if (from._has_bit(3)) {
      set_msg(from.msg());
    }
    if (from._has_bit(4)) {
      set_minlevel(from.minlevel());
    }
    if (from._has_bit(5)) {
      set_metier(from.metier());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTeamConscribeMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamConscribeMsg::CopyFrom(const CMessageTeamConscribeMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamConscribeMsg::Swap(CMessageTeamConscribeMsg* other) {
  if (other != this) {
    std::swap(conscribetype_, other->conscribetype_);
    std::swap(subtype_, other->subtype_);
    std::swap(maxlevel_, other->maxlevel_);
    std::swap(msg_, other->msg_);
    std::swap(minlevel_, other->minlevel_);
    std::swap(metier_, other->metier_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTeamConscribeMsg::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTeamConscribeMsg::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTeamConscribeMsg::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamConscribeMsg_reflection_;
}

// ===================================================================

const ::std::string CMessageTeamConscribeCallBack::_default_msg_;
const ::std::string CMessageTeamConscribeCallBack::_default_headername_;
#ifndef _MSC_VER
const int CMessageTeamConscribeCallBack::kMaxLevelFieldNumber;
const int CMessageTeamConscribeCallBack::kMetierFieldNumber;
const int CMessageTeamConscribeCallBack::kMsgFieldNumber;
const int CMessageTeamConscribeCallBack::kCountFieldNumber;
const int CMessageTeamConscribeCallBack::kMinLevelFieldNumber;
const int CMessageTeamConscribeCallBack::kConscribeTypeFieldNumber;
const int CMessageTeamConscribeCallBack::kSubTypeFieldNumber;
const int CMessageTeamConscribeCallBack::kHeaderNameFieldNumber;
#endif  // !_MSC_VER

CMessageTeamConscribeCallBack::CMessageTeamConscribeCallBack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTeamConscribeCallBack::InitAsDefaultInstance() {}

CMessageTeamConscribeCallBack::CMessageTeamConscribeCallBack(const CMessageTeamConscribeCallBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTeamConscribeCallBack::SharedCtor() {
  _cached_size_ = 0;
  maxlevel_ = 0u;
  metier_ = 0u;
  msg_ = const_cast< ::std::string*>(&_default_msg_);
  count_ = 0u;
  minlevel_ = 0u;
  conscribetype_ = 0u;
  subtype_ = 0u;
  headername_ = const_cast< ::std::string*>(&_default_headername_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTeamConscribeCallBack::~CMessageTeamConscribeCallBack() {
  SharedDtor();
}

void CMessageTeamConscribeCallBack::SharedDtor() {
  if (msg_ != &_default_msg_) {
    delete msg_;
  }
  if (headername_ != &_default_headername_) {
    delete headername_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTeamConscribeCallBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamConscribeCallBack_descriptor_;
}

const CMessageTeamConscribeCallBack& CMessageTeamConscribeCallBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teammessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTeamConscribeCallBack* CMessageTeamConscribeCallBack::default_instance_ = NULL;

CMessageTeamConscribeCallBack* CMessageTeamConscribeCallBack::New() const {
  return new CMessageTeamConscribeCallBack;
}

void CMessageTeamConscribeCallBack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    maxlevel_ = 0u;
    metier_ = 0u;
    if (_has_bit(2)) {
      if (msg_ != &_default_msg_) {
        msg_->clear();
      }
    }
    count_ = 0u;
    minlevel_ = 0u;
    conscribetype_ = 0u;
    subtype_ = 0u;
    if (_has_bit(7)) {
      if (headername_ != &_default_headername_) {
        headername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTeamConscribeCallBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 MaxLevel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxlevel_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Metier;
        break;
      }
      
      // optional uint32 Metier = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Metier:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &metier_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_Msg;
        break;
      }
      
      // optional string Msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Msg:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_msg()));
        if (input->ExpectTag(32)) goto parse_Count;
        break;
      }
      
      // optional uint32 Count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Count:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &count_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_MinLevel;
        break;
      }
      
      // optional uint32 MinLevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MinLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &minlevel_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_ConscribeType;
        break;
      }
      
      // optional uint32 ConscribeType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ConscribeType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &conscribetype_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_SubType;
        break;
      }
      
      // optional uint32 SubType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SubType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &subtype_));
        _set_bit(6);
        if (input->ExpectTag(66)) goto parse_HeaderName;
        break;
      }
      
      // optional string HeaderName = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_HeaderName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_headername()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTeamConscribeCallBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTeamConscribeCallBack::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 MaxLevel = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->maxlevel(), output);
  }
  
  // optional uint32 Metier = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->metier(), output);
  }
  
  // optional string Msg = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->msg(), output);
  }
  
  // optional uint32 Count = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->count(), output);
  }
  
  // optional uint32 MinLevel = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->minlevel(), output);
  }
  
  // optional uint32 ConscribeType = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->conscribetype(), output);
  }
  
  // optional uint32 SubType = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->subtype(), output);
  }
  
  // optional string HeaderName = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteString(8, this->headername(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTeamConscribeCallBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 MaxLevel = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->maxlevel(), target);
  }
  
  // optional uint32 Metier = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->metier(), target);
  }
  
  // optional string Msg = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->msg(), target);
  }
  
  // optional uint32 Count = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->count(), target);
  }
  
  // optional uint32 MinLevel = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->minlevel(), target);
  }
  
  // optional uint32 ConscribeType = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->conscribetype(), target);
  }
  
  // optional uint32 SubType = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->subtype(), target);
  }
  
  // optional string HeaderName = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(8, this->headername(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTeamConscribeCallBack::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MaxLevel = 1;
    if (has_maxlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxlevel());
    }
    
    // optional uint32 Metier = 2;
    if (has_metier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->metier());
    }
    
    // optional string Msg = 3;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->msg());
    }
    
    // optional uint32 Count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->count());
    }
    
    // optional uint32 MinLevel = 5;
    if (has_minlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->minlevel());
    }
    
    // optional uint32 ConscribeType = 6;
    if (has_conscribetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->conscribetype());
    }
    
    // optional uint32 SubType = 7;
    if (has_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->subtype());
    }
    
    // optional string HeaderName = 8;
    if (has_headername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->headername());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTeamConscribeCallBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTeamConscribeCallBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTeamConscribeCallBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTeamConscribeCallBack::MergeFrom(const CMessageTeamConscribeCallBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_maxlevel(from.maxlevel());
    }
    if (from._has_bit(1)) {
      set_metier(from.metier());
    }
    if (from._has_bit(2)) {
      set_msg(from.msg());
    }
    if (from._has_bit(3)) {
      set_count(from.count());
    }
    if (from._has_bit(4)) {
      set_minlevel(from.minlevel());
    }
    if (from._has_bit(5)) {
      set_conscribetype(from.conscribetype());
    }
    if (from._has_bit(6)) {
      set_subtype(from.subtype());
    }
    if (from._has_bit(7)) {
      set_headername(from.headername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTeamConscribeCallBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamConscribeCallBack::CopyFrom(const CMessageTeamConscribeCallBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamConscribeCallBack::Swap(CMessageTeamConscribeCallBack* other) {
  if (other != this) {
    std::swap(maxlevel_, other->maxlevel_);
    std::swap(metier_, other->metier_);
    std::swap(msg_, other->msg_);
    std::swap(count_, other->count_);
    std::swap(minlevel_, other->minlevel_);
    std::swap(conscribetype_, other->conscribetype_);
    std::swap(subtype_, other->subtype_);
    std::swap(headername_, other->headername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTeamConscribeCallBack::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTeamConscribeCallBack::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTeamConscribeCallBack::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamConscribeCallBack_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageTeamPropertyNotifyCallBack::kRouterFieldNumber;
const int CMessageTeamPropertyNotifyCallBack::kItemProFieldNumber;
const int CMessageTeamPropertyNotifyCallBack::kItemSizeFieldNumber;
#endif  // !_MSC_VER

CMessageTeamPropertyNotifyCallBack::CMessageTeamPropertyNotifyCallBack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTeamPropertyNotifyCallBack::InitAsDefaultInstance() {  router_ = const_cast< ::CMessageRouter*>(&::CMessageRouter::default_instance());
}

CMessageTeamPropertyNotifyCallBack::CMessageTeamPropertyNotifyCallBack(const CMessageTeamPropertyNotifyCallBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTeamPropertyNotifyCallBack::SharedCtor() {
  _cached_size_ = 0;
  router_ = NULL;
  itemsize_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTeamPropertyNotifyCallBack::~CMessageTeamPropertyNotifyCallBack() {
  SharedDtor();
}

void CMessageTeamPropertyNotifyCallBack::SharedDtor() {
  if (this != default_instance_) {
    delete router_;
  }
}

const ::google::protobuf::Descriptor* CMessageTeamPropertyNotifyCallBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamPropertyNotifyCallBack_descriptor_;
}

const CMessageTeamPropertyNotifyCallBack& CMessageTeamPropertyNotifyCallBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teammessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTeamPropertyNotifyCallBack* CMessageTeamPropertyNotifyCallBack::default_instance_ = NULL;

CMessageTeamPropertyNotifyCallBack* CMessageTeamPropertyNotifyCallBack::New() const {
  return new CMessageTeamPropertyNotifyCallBack;
}

void CMessageTeamPropertyNotifyCallBack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (router_ != NULL) router_->::CMessageRouter::Clear();
    }
    itemsize_ = 0u;
  }
  itempro_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTeamPropertyNotifyCallBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CMessageRouter Router = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_router()));
        if (input->ExpectTag(18)) goto parse_ItemPro;
        break;
      }
      
      // repeated .PBMember ItemPro = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ItemPro:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_itempro()));
        if (input->ExpectTag(18)) goto parse_ItemPro;
        if (input->ExpectTag(24)) goto parse_ItemSize;
        break;
      }
      
      // optional uint32 ItemSize = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemSize:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemsize_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTeamPropertyNotifyCallBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTeamPropertyNotifyCallBack::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->router(), output);
  }
  
  // repeated .PBMember ItemPro = 2;
  for (int i = 0; i < this->itempro_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->itempro(i), output);
  }
  
  // optional uint32 ItemSize = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->itemsize(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTeamPropertyNotifyCallBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->router(), target);
  }
  
  // repeated .PBMember ItemPro = 2;
  for (int i = 0; i < this->itempro_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->itempro(i), target);
  }
  
  // optional uint32 ItemSize = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->itemsize(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTeamPropertyNotifyCallBack::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMessageRouter Router = 1;
    if (has_router()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->router());
    }
    
    // optional uint32 ItemSize = 3;
    if (has_itemsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemsize());
    }
    
  }
  // repeated .PBMember ItemPro = 2;
  total_size += 1 * this->itempro_size();
  for (int i = 0; i < this->itempro_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->itempro(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTeamPropertyNotifyCallBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTeamPropertyNotifyCallBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTeamPropertyNotifyCallBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTeamPropertyNotifyCallBack::MergeFrom(const CMessageTeamPropertyNotifyCallBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  itempro_.MergeFrom(from.itempro_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_router()->::CMessageRouter::MergeFrom(from.router());
    }
    if (from._has_bit(2)) {
      set_itemsize(from.itemsize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTeamPropertyNotifyCallBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamPropertyNotifyCallBack::CopyFrom(const CMessageTeamPropertyNotifyCallBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamPropertyNotifyCallBack::Swap(CMessageTeamPropertyNotifyCallBack* other) {
  if (other != this) {
    std::swap(router_, other->router_);
    itempro_.Swap(&other->itempro_);
    std::swap(itemsize_, other->itemsize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTeamPropertyNotifyCallBack::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTeamPropertyNotifyCallBack::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTeamPropertyNotifyCallBack::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamPropertyNotifyCallBack_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageTeamChangeDistribute::kDistributeFieldNumber;
#endif  // !_MSC_VER

CMessageTeamChangeDistribute::CMessageTeamChangeDistribute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTeamChangeDistribute::InitAsDefaultInstance() {}

CMessageTeamChangeDistribute::CMessageTeamChangeDistribute(const CMessageTeamChangeDistribute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTeamChangeDistribute::SharedCtor() {
  _cached_size_ = 0;
  distribute_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTeamChangeDistribute::~CMessageTeamChangeDistribute() {
  SharedDtor();
}

void CMessageTeamChangeDistribute::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTeamChangeDistribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamChangeDistribute_descriptor_;
}

const CMessageTeamChangeDistribute& CMessageTeamChangeDistribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teammessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTeamChangeDistribute* CMessageTeamChangeDistribute::default_instance_ = NULL;

CMessageTeamChangeDistribute* CMessageTeamChangeDistribute::New() const {
  return new CMessageTeamChangeDistribute;
}

void CMessageTeamChangeDistribute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    distribute_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTeamChangeDistribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Distribute = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &distribute_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTeamChangeDistribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTeamChangeDistribute::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Distribute = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->distribute(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTeamChangeDistribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Distribute = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->distribute(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTeamChangeDistribute::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Distribute = 1;
    if (has_distribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->distribute());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTeamChangeDistribute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTeamChangeDistribute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTeamChangeDistribute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTeamChangeDistribute::MergeFrom(const CMessageTeamChangeDistribute& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_distribute(from.distribute());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTeamChangeDistribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamChangeDistribute::CopyFrom(const CMessageTeamChangeDistribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamChangeDistribute::Swap(CMessageTeamChangeDistribute* other) {
  if (other != this) {
    std::swap(distribute_, other->distribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTeamChangeDistribute::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTeamChangeDistribute::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTeamChangeDistribute::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamChangeDistribute_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageTeamChangeDistributeCallBack::kDistributeFieldNumber;
#endif  // !_MSC_VER

CMessageTeamChangeDistributeCallBack::CMessageTeamChangeDistributeCallBack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTeamChangeDistributeCallBack::InitAsDefaultInstance() {}

CMessageTeamChangeDistributeCallBack::CMessageTeamChangeDistributeCallBack(const CMessageTeamChangeDistributeCallBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTeamChangeDistributeCallBack::SharedCtor() {
  _cached_size_ = 0;
  distribute_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTeamChangeDistributeCallBack::~CMessageTeamChangeDistributeCallBack() {
  SharedDtor();
}

void CMessageTeamChangeDistributeCallBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTeamChangeDistributeCallBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamChangeDistributeCallBack_descriptor_;
}

const CMessageTeamChangeDistributeCallBack& CMessageTeamChangeDistributeCallBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teammessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTeamChangeDistributeCallBack* CMessageTeamChangeDistributeCallBack::default_instance_ = NULL;

CMessageTeamChangeDistributeCallBack* CMessageTeamChangeDistributeCallBack::New() const {
  return new CMessageTeamChangeDistributeCallBack;
}

void CMessageTeamChangeDistributeCallBack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    distribute_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTeamChangeDistributeCallBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Distribute = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &distribute_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTeamChangeDistributeCallBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTeamChangeDistributeCallBack::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Distribute = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->distribute(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTeamChangeDistributeCallBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Distribute = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->distribute(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTeamChangeDistributeCallBack::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Distribute = 1;
    if (has_distribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->distribute());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTeamChangeDistributeCallBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTeamChangeDistributeCallBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTeamChangeDistributeCallBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTeamChangeDistributeCallBack::MergeFrom(const CMessageTeamChangeDistributeCallBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_distribute(from.distribute());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTeamChangeDistributeCallBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamChangeDistributeCallBack::CopyFrom(const CMessageTeamChangeDistributeCallBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamChangeDistributeCallBack::Swap(CMessageTeamChangeDistributeCallBack* other) {
  if (other != this) {
    std::swap(distribute_, other->distribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTeamChangeDistributeCallBack::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTeamChangeDistributeCallBack::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTeamChangeDistributeCallBack::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamChangeDistributeCallBack_reflection_;
}

// ===================================================================

const ::std::string CMessageTeamNotifyBuffCallBack::_default_name_;
#ifndef _MSC_VER
const int CMessageTeamNotifyBuffCallBack::kIsAddFieldNumber;
const int CMessageTeamNotifyBuffCallBack::kNameFieldNumber;
const int CMessageTeamNotifyBuffCallBack::kCharIDFieldNumber;
const int CMessageTeamNotifyBuffCallBack::kBuffIDFieldNumber;
#endif  // !_MSC_VER

CMessageTeamNotifyBuffCallBack::CMessageTeamNotifyBuffCallBack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTeamNotifyBuffCallBack::InitAsDefaultInstance() {}

CMessageTeamNotifyBuffCallBack::CMessageTeamNotifyBuffCallBack(const CMessageTeamNotifyBuffCallBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTeamNotifyBuffCallBack::SharedCtor() {
  _cached_size_ = 0;
  isadd_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  charid_ = 0u;
  buffid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTeamNotifyBuffCallBack::~CMessageTeamNotifyBuffCallBack() {
  SharedDtor();
}

void CMessageTeamNotifyBuffCallBack::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTeamNotifyBuffCallBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamNotifyBuffCallBack_descriptor_;
}

const CMessageTeamNotifyBuffCallBack& CMessageTeamNotifyBuffCallBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teammessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTeamNotifyBuffCallBack* CMessageTeamNotifyBuffCallBack::default_instance_ = NULL;

CMessageTeamNotifyBuffCallBack* CMessageTeamNotifyBuffCallBack::New() const {
  return new CMessageTeamNotifyBuffCallBack;
}

void CMessageTeamNotifyBuffCallBack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isadd_ = 0u;
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    charid_ = 0u;
    buffid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTeamNotifyBuffCallBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 IsAdd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &isadd_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }
      
      // optional string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(24)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_BuffID;
        break;
      }
      
      // optional uint32 BuffID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BuffID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &buffid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTeamNotifyBuffCallBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTeamNotifyBuffCallBack::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 IsAdd = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->isadd(), output);
  }
  
  // optional string Name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->name(), output);
  }
  
  // optional uint32 CharID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->charid(), output);
  }
  
  // optional uint32 BuffID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->buffid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTeamNotifyBuffCallBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 IsAdd = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->isadd(), target);
  }
  
  // optional string Name = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->name(), target);
  }
  
  // optional uint32 CharID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->charid(), target);
  }
  
  // optional uint32 BuffID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->buffid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTeamNotifyBuffCallBack::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 IsAdd = 1;
    if (has_isadd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->isadd());
    }
    
    // optional string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional uint32 CharID = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 BuffID = 4;
    if (has_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->buffid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTeamNotifyBuffCallBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTeamNotifyBuffCallBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTeamNotifyBuffCallBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTeamNotifyBuffCallBack::MergeFrom(const CMessageTeamNotifyBuffCallBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_isadd(from.isadd());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      set_charid(from.charid());
    }
    if (from._has_bit(3)) {
      set_buffid(from.buffid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTeamNotifyBuffCallBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamNotifyBuffCallBack::CopyFrom(const CMessageTeamNotifyBuffCallBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamNotifyBuffCallBack::Swap(CMessageTeamNotifyBuffCallBack* other) {
  if (other != this) {
    std::swap(isadd_, other->isadd_);
    std::swap(name_, other->name_);
    std::swap(charid_, other->charid_);
    std::swap(buffid_, other->buffid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTeamNotifyBuffCallBack::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTeamNotifyBuffCallBack::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTeamNotifyBuffCallBack::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamNotifyBuffCallBack_reflection_;
}

// ===================================================================

const ::std::string CMessageTeamBuffCallBack::_default_bufflist_;
const ::std::string CMessageTeamBuffCallBack::_default_name_;
#ifndef _MSC_VER
const int CMessageTeamBuffCallBack::kBuffSizeFieldNumber;
const int CMessageTeamBuffCallBack::kBuffListFieldNumber;
const int CMessageTeamBuffCallBack::kNameFieldNumber;
const int CMessageTeamBuffCallBack::kCharIDFieldNumber;
const int CMessageTeamBuffCallBack::kBuffCountFieldNumber;
#endif  // !_MSC_VER

CMessageTeamBuffCallBack::CMessageTeamBuffCallBack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTeamBuffCallBack::InitAsDefaultInstance() {}

CMessageTeamBuffCallBack::CMessageTeamBuffCallBack(const CMessageTeamBuffCallBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTeamBuffCallBack::SharedCtor() {
  _cached_size_ = 0;
  buffsize_ = 0u;
  bufflist_ = const_cast< ::std::string*>(&_default_bufflist_);
  name_ = const_cast< ::std::string*>(&_default_name_);
  charid_ = 0u;
  buffcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTeamBuffCallBack::~CMessageTeamBuffCallBack() {
  SharedDtor();
}

void CMessageTeamBuffCallBack::SharedDtor() {
  if (bufflist_ != &_default_bufflist_) {
    delete bufflist_;
  }
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTeamBuffCallBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamBuffCallBack_descriptor_;
}

const CMessageTeamBuffCallBack& CMessageTeamBuffCallBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teammessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTeamBuffCallBack* CMessageTeamBuffCallBack::default_instance_ = NULL;

CMessageTeamBuffCallBack* CMessageTeamBuffCallBack::New() const {
  return new CMessageTeamBuffCallBack;
}

void CMessageTeamBuffCallBack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buffsize_ = 0u;
    if (_has_bit(1)) {
      if (bufflist_ != &_default_bufflist_) {
        bufflist_->clear();
      }
    }
    if (_has_bit(2)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    charid_ = 0u;
    buffcount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTeamBuffCallBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 BuffSize = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &buffsize_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_BuffList;
        break;
      }
      
      // optional string BuffList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_BuffList:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_bufflist()));
        if (input->ExpectTag(26)) goto parse_Name;
        break;
      }
      
      // optional string Name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(32)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_BuffCount;
        break;
      }
      
      // optional uint32 BuffCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BuffCount:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &buffcount_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTeamBuffCallBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTeamBuffCallBack::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 BuffSize = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->buffsize(), output);
  }
  
  // optional string BuffList = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->bufflist(), output);
  }
  
  // optional string Name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->name(), output);
  }
  
  // optional uint32 CharID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->charid(), output);
  }
  
  // optional uint32 BuffCount = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->buffcount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTeamBuffCallBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 BuffSize = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->buffsize(), target);
  }
  
  // optional string BuffList = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->bufflist(), target);
  }
  
  // optional string Name = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->name(), target);
  }
  
  // optional uint32 CharID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->charid(), target);
  }
  
  // optional uint32 BuffCount = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->buffcount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTeamBuffCallBack::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BuffSize = 1;
    if (has_buffsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->buffsize());
    }
    
    // optional string BuffList = 2;
    if (has_bufflist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->bufflist());
    }
    
    // optional string Name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional uint32 CharID = 4;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 BuffCount = 5;
    if (has_buffcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->buffcount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTeamBuffCallBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTeamBuffCallBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTeamBuffCallBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTeamBuffCallBack::MergeFrom(const CMessageTeamBuffCallBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_buffsize(from.buffsize());
    }
    if (from._has_bit(1)) {
      set_bufflist(from.bufflist());
    }
    if (from._has_bit(2)) {
      set_name(from.name());
    }
    if (from._has_bit(3)) {
      set_charid(from.charid());
    }
    if (from._has_bit(4)) {
      set_buffcount(from.buffcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTeamBuffCallBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamBuffCallBack::CopyFrom(const CMessageTeamBuffCallBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamBuffCallBack::Swap(CMessageTeamBuffCallBack* other) {
  if (other != this) {
    std::swap(buffsize_, other->buffsize_);
    std::swap(bufflist_, other->bufflist_);
    std::swap(name_, other->name_);
    std::swap(charid_, other->charid_);
    std::swap(buffcount_, other->buffcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTeamBuffCallBack::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTeamBuffCallBack::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTeamBuffCallBack::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamBuffCallBack_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageTeamClearRequestList::kCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageTeamClearRequestList::CMessageTeamClearRequestList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTeamClearRequestList::InitAsDefaultInstance() {}

CMessageTeamClearRequestList::CMessageTeamClearRequestList(const CMessageTeamClearRequestList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTeamClearRequestList::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTeamClearRequestList::~CMessageTeamClearRequestList() {
  SharedDtor();
}

void CMessageTeamClearRequestList::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTeamClearRequestList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamClearRequestList_descriptor_;
}

const CMessageTeamClearRequestList& CMessageTeamClearRequestList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teammessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTeamClearRequestList* CMessageTeamClearRequestList::default_instance_ = NULL;

CMessageTeamClearRequestList* CMessageTeamClearRequestList::New() const {
  return new CMessageTeamClearRequestList;
}

void CMessageTeamClearRequestList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTeamClearRequestList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTeamClearRequestList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTeamClearRequestList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTeamClearRequestList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTeamClearRequestList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTeamClearRequestList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTeamClearRequestList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTeamClearRequestList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTeamClearRequestList::MergeFrom(const CMessageTeamClearRequestList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTeamClearRequestList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamClearRequestList::CopyFrom(const CMessageTeamClearRequestList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamClearRequestList::Swap(CMessageTeamClearRequestList* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTeamClearRequestList::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTeamClearRequestList::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTeamClearRequestList::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamClearRequestList_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageTeamClearInviteList::kCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageTeamClearInviteList::CMessageTeamClearInviteList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTeamClearInviteList::InitAsDefaultInstance() {}

CMessageTeamClearInviteList::CMessageTeamClearInviteList(const CMessageTeamClearInviteList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTeamClearInviteList::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTeamClearInviteList::~CMessageTeamClearInviteList() {
  SharedDtor();
}

void CMessageTeamClearInviteList::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTeamClearInviteList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamClearInviteList_descriptor_;
}

const CMessageTeamClearInviteList& CMessageTeamClearInviteList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teammessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTeamClearInviteList* CMessageTeamClearInviteList::default_instance_ = NULL;

CMessageTeamClearInviteList* CMessageTeamClearInviteList::New() const {
  return new CMessageTeamClearInviteList;
}

void CMessageTeamClearInviteList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTeamClearInviteList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTeamClearInviteList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTeamClearInviteList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTeamClearInviteList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTeamClearInviteList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTeamClearInviteList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTeamClearInviteList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTeamClearInviteList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTeamClearInviteList::MergeFrom(const CMessageTeamClearInviteList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTeamClearInviteList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamClearInviteList::CopyFrom(const CMessageTeamClearInviteList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamClearInviteList::Swap(CMessageTeamClearInviteList* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTeamClearInviteList::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTeamClearInviteList::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTeamClearInviteList::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamClearInviteList_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageTeamClearRequestCallBack::kCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageTeamClearRequestCallBack::CMessageTeamClearRequestCallBack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTeamClearRequestCallBack::InitAsDefaultInstance() {}

CMessageTeamClearRequestCallBack::CMessageTeamClearRequestCallBack(const CMessageTeamClearRequestCallBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTeamClearRequestCallBack::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTeamClearRequestCallBack::~CMessageTeamClearRequestCallBack() {
  SharedDtor();
}

void CMessageTeamClearRequestCallBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTeamClearRequestCallBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamClearRequestCallBack_descriptor_;
}

const CMessageTeamClearRequestCallBack& CMessageTeamClearRequestCallBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teammessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTeamClearRequestCallBack* CMessageTeamClearRequestCallBack::default_instance_ = NULL;

CMessageTeamClearRequestCallBack* CMessageTeamClearRequestCallBack::New() const {
  return new CMessageTeamClearRequestCallBack;
}

void CMessageTeamClearRequestCallBack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTeamClearRequestCallBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTeamClearRequestCallBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTeamClearRequestCallBack::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTeamClearRequestCallBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTeamClearRequestCallBack::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTeamClearRequestCallBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTeamClearRequestCallBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTeamClearRequestCallBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTeamClearRequestCallBack::MergeFrom(const CMessageTeamClearRequestCallBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTeamClearRequestCallBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamClearRequestCallBack::CopyFrom(const CMessageTeamClearRequestCallBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamClearRequestCallBack::Swap(CMessageTeamClearRequestCallBack* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTeamClearRequestCallBack::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTeamClearRequestCallBack::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTeamClearRequestCallBack::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamClearRequestCallBack_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageTeamClearInviteCallBack::kCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageTeamClearInviteCallBack::CMessageTeamClearInviteCallBack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTeamClearInviteCallBack::InitAsDefaultInstance() {}

CMessageTeamClearInviteCallBack::CMessageTeamClearInviteCallBack(const CMessageTeamClearInviteCallBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTeamClearInviteCallBack::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTeamClearInviteCallBack::~CMessageTeamClearInviteCallBack() {
  SharedDtor();
}

void CMessageTeamClearInviteCallBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTeamClearInviteCallBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamClearInviteCallBack_descriptor_;
}

const CMessageTeamClearInviteCallBack& CMessageTeamClearInviteCallBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teammessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTeamClearInviteCallBack* CMessageTeamClearInviteCallBack::default_instance_ = NULL;

CMessageTeamClearInviteCallBack* CMessageTeamClearInviteCallBack::New() const {
  return new CMessageTeamClearInviteCallBack;
}

void CMessageTeamClearInviteCallBack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTeamClearInviteCallBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTeamClearInviteCallBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTeamClearInviteCallBack::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTeamClearInviteCallBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTeamClearInviteCallBack::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTeamClearInviteCallBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTeamClearInviteCallBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTeamClearInviteCallBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTeamClearInviteCallBack::MergeFrom(const CMessageTeamClearInviteCallBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTeamClearInviteCallBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamClearInviteCallBack::CopyFrom(const CMessageTeamClearInviteCallBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamClearInviteCallBack::Swap(CMessageTeamClearInviteCallBack* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTeamClearInviteCallBack::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTeamClearInviteCallBack::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTeamClearInviteCallBack::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamClearInviteCallBack_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageTeamSearchMsg::kConscibeTypeFieldNumber;
const int CMessageTeamSearchMsg::kSubTypeFieldNumber;
const int CMessageTeamSearchMsg::kPageIndexFieldNumber;
const int CMessageTeamSearchMsg::kMsgTypeFieldNumber;
#endif  // !_MSC_VER

CMessageTeamSearchMsg::CMessageTeamSearchMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTeamSearchMsg::InitAsDefaultInstance() {}

CMessageTeamSearchMsg::CMessageTeamSearchMsg(const CMessageTeamSearchMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTeamSearchMsg::SharedCtor() {
  _cached_size_ = 0;
  conscibetype_ = 0u;
  subtype_ = 0u;
  pageindex_ = 0u;
  msgtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTeamSearchMsg::~CMessageTeamSearchMsg() {
  SharedDtor();
}

void CMessageTeamSearchMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTeamSearchMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamSearchMsg_descriptor_;
}

const CMessageTeamSearchMsg& CMessageTeamSearchMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teammessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTeamSearchMsg* CMessageTeamSearchMsg::default_instance_ = NULL;

CMessageTeamSearchMsg* CMessageTeamSearchMsg::New() const {
  return new CMessageTeamSearchMsg;
}

void CMessageTeamSearchMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    conscibetype_ = 0u;
    subtype_ = 0u;
    pageindex_ = 0u;
    msgtype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTeamSearchMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ConscibeType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &conscibetype_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_SubType;
        break;
      }
      
      // optional uint32 SubType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SubType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &subtype_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_PageIndex;
        break;
      }
      
      // optional uint32 PageIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PageIndex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pageindex_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_MsgType;
        break;
      }
      
      // optional uint32 MsgType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MsgType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &msgtype_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTeamSearchMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTeamSearchMsg::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ConscibeType = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->conscibetype(), output);
  }
  
  // optional uint32 SubType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->subtype(), output);
  }
  
  // optional uint32 PageIndex = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->pageindex(), output);
  }
  
  // optional uint32 MsgType = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->msgtype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTeamSearchMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ConscibeType = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->conscibetype(), target);
  }
  
  // optional uint32 SubType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->subtype(), target);
  }
  
  // optional uint32 PageIndex = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->pageindex(), target);
  }
  
  // optional uint32 MsgType = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->msgtype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTeamSearchMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ConscibeType = 1;
    if (has_conscibetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->conscibetype());
    }
    
    // optional uint32 SubType = 2;
    if (has_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->subtype());
    }
    
    // optional uint32 PageIndex = 3;
    if (has_pageindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pageindex());
    }
    
    // optional uint32 MsgType = 4;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->msgtype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTeamSearchMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTeamSearchMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTeamSearchMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTeamSearchMsg::MergeFrom(const CMessageTeamSearchMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_conscibetype(from.conscibetype());
    }
    if (from._has_bit(1)) {
      set_subtype(from.subtype());
    }
    if (from._has_bit(2)) {
      set_pageindex(from.pageindex());
    }
    if (from._has_bit(3)) {
      set_msgtype(from.msgtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTeamSearchMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamSearchMsg::CopyFrom(const CMessageTeamSearchMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamSearchMsg::Swap(CMessageTeamSearchMsg* other) {
  if (other != this) {
    std::swap(conscibetype_, other->conscibetype_);
    std::swap(subtype_, other->subtype_);
    std::swap(pageindex_, other->pageindex_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTeamSearchMsg::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTeamSearchMsg::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTeamSearchMsg::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamSearchMsg_reflection_;
}

// ===================================================================

const ::std::string CMessageTeamSearchMsgCallBack::_default_msgbuff_;
#ifndef _MSC_VER
const int CMessageTeamSearchMsgCallBack::kRouterFieldNumber;
const int CMessageTeamSearchMsgCallBack::kTotalPageFieldNumber;
const int CMessageTeamSearchMsgCallBack::kMsgBuffFieldNumber;
const int CMessageTeamSearchMsgCallBack::kMsgSizeFieldNumber;
const int CMessageTeamSearchMsgCallBack::kPageIndexFieldNumber;
const int CMessageTeamSearchMsgCallBack::kBuffLenFieldNumber;
const int CMessageTeamSearchMsgCallBack::kMsgTypeFieldNumber;
const int CMessageTeamSearchMsgCallBack::kMsgCountFieldNumber;
const int CMessageTeamSearchMsgCallBack::kMsgFieldNumber;
#endif  // !_MSC_VER

CMessageTeamSearchMsgCallBack::CMessageTeamSearchMsgCallBack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTeamSearchMsgCallBack::InitAsDefaultInstance() {  router_ = const_cast< ::CMessageRouter*>(&::CMessageRouter::default_instance());
}

CMessageTeamSearchMsgCallBack::CMessageTeamSearchMsgCallBack(const CMessageTeamSearchMsgCallBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTeamSearchMsgCallBack::SharedCtor() {
  _cached_size_ = 0;
  router_ = NULL;
  totalpage_ = 0u;
  msgbuff_ = const_cast< ::std::string*>(&_default_msgbuff_);
  msgsize_ = 0u;
  pageindex_ = 0u;
  bufflen_ = 0u;
  msgtype_ = 0u;
  msgcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTeamSearchMsgCallBack::~CMessageTeamSearchMsgCallBack() {
  SharedDtor();
}

void CMessageTeamSearchMsgCallBack::SharedDtor() {
  if (msgbuff_ != &_default_msgbuff_) {
    delete msgbuff_;
  }
  if (this != default_instance_) {
    delete router_;
  }
}

const ::google::protobuf::Descriptor* CMessageTeamSearchMsgCallBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamSearchMsgCallBack_descriptor_;
}

const CMessageTeamSearchMsgCallBack& CMessageTeamSearchMsgCallBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teammessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTeamSearchMsgCallBack* CMessageTeamSearchMsgCallBack::default_instance_ = NULL;

CMessageTeamSearchMsgCallBack* CMessageTeamSearchMsgCallBack::New() const {
  return new CMessageTeamSearchMsgCallBack;
}

void CMessageTeamSearchMsgCallBack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (router_ != NULL) router_->::CMessageRouter::Clear();
    }
    totalpage_ = 0u;
    if (_has_bit(2)) {
      if (msgbuff_ != &_default_msgbuff_) {
        msgbuff_->clear();
      }
    }
    msgsize_ = 0u;
    pageindex_ = 0u;
    bufflen_ = 0u;
    msgtype_ = 0u;
    msgcount_ = 0u;
  }
  msg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTeamSearchMsgCallBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CMessageRouter Router = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_router()));
        if (input->ExpectTag(16)) goto parse_TotalPage;
        break;
      }
      
      // optional uint32 TotalPage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TotalPage:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &totalpage_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_MsgBuff;
        break;
      }
      
      // optional bytes MsgBuff = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MsgBuff:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_msgbuff()));
        if (input->ExpectTag(32)) goto parse_MsgSize;
        break;
      }
      
      // optional uint32 MsgSize = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MsgSize:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &msgsize_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_PageIndex;
        break;
      }
      
      // optional uint32 PageIndex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PageIndex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pageindex_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_BuffLen;
        break;
      }
      
      // optional uint32 BuffLen = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BuffLen:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &bufflen_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_MsgType;
        break;
      }
      
      // optional uint32 MsgType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MsgType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &msgtype_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_MsgCount;
        break;
      }
      
      // optional uint32 MsgCount = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MsgCount:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &msgcount_));
        _set_bit(7);
        if (input->ExpectTag(74)) goto parse_Msg;
        break;
      }
      
      // repeated .PBTeamMsg Msg = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Msg:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_msg()));
        if (input->ExpectTag(74)) goto parse_Msg;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTeamSearchMsgCallBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTeamSearchMsgCallBack::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->router(), output);
  }
  
  // optional uint32 TotalPage = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->totalpage(), output);
  }
  
  // optional bytes MsgBuff = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->msgbuff(), output);
  }
  
  // optional uint32 MsgSize = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->msgsize(), output);
  }
  
  // optional uint32 PageIndex = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->pageindex(), output);
  }
  
  // optional uint32 BuffLen = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->bufflen(), output);
  }
  
  // optional uint32 MsgType = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->msgtype(), output);
  }
  
  // optional uint32 MsgCount = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->msgcount(), output);
  }
  
  // repeated .PBTeamMsg Msg = 9;
  for (int i = 0; i < this->msg_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(9, this->msg(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTeamSearchMsgCallBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->router(), target);
  }
  
  // optional uint32 TotalPage = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->totalpage(), target);
  }
  
  // optional bytes MsgBuff = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->msgbuff(), target);
  }
  
  // optional uint32 MsgSize = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->msgsize(), target);
  }
  
  // optional uint32 PageIndex = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->pageindex(), target);
  }
  
  // optional uint32 BuffLen = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->bufflen(), target);
  }
  
  // optional uint32 MsgType = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->msgtype(), target);
  }
  
  // optional uint32 MsgCount = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->msgcount(), target);
  }
  
  // repeated .PBTeamMsg Msg = 9;
  for (int i = 0; i < this->msg_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(9, this->msg(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTeamSearchMsgCallBack::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMessageRouter Router = 1;
    if (has_router()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->router());
    }
    
    // optional uint32 TotalPage = 2;
    if (has_totalpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->totalpage());
    }
    
    // optional bytes MsgBuff = 3;
    if (has_msgbuff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->msgbuff());
    }
    
    // optional uint32 MsgSize = 4;
    if (has_msgsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->msgsize());
    }
    
    // optional uint32 PageIndex = 5;
    if (has_pageindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pageindex());
    }
    
    // optional uint32 BuffLen = 6;
    if (has_bufflen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->bufflen());
    }
    
    // optional uint32 MsgType = 7;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->msgtype());
    }
    
    // optional uint32 MsgCount = 8;
    if (has_msgcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->msgcount());
    }
    
  }
  // repeated .PBTeamMsg Msg = 9;
  total_size += 1 * this->msg_size();
  for (int i = 0; i < this->msg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->msg(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTeamSearchMsgCallBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTeamSearchMsgCallBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTeamSearchMsgCallBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTeamSearchMsgCallBack::MergeFrom(const CMessageTeamSearchMsgCallBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  msg_.MergeFrom(from.msg_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_router()->::CMessageRouter::MergeFrom(from.router());
    }
    if (from._has_bit(1)) {
      set_totalpage(from.totalpage());
    }
    if (from._has_bit(2)) {
      set_msgbuff(from.msgbuff());
    }
    if (from._has_bit(3)) {
      set_msgsize(from.msgsize());
    }
    if (from._has_bit(4)) {
      set_pageindex(from.pageindex());
    }
    if (from._has_bit(5)) {
      set_bufflen(from.bufflen());
    }
    if (from._has_bit(6)) {
      set_msgtype(from.msgtype());
    }
    if (from._has_bit(7)) {
      set_msgcount(from.msgcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTeamSearchMsgCallBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamSearchMsgCallBack::CopyFrom(const CMessageTeamSearchMsgCallBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamSearchMsgCallBack::Swap(CMessageTeamSearchMsgCallBack* other) {
  if (other != this) {
    std::swap(router_, other->router_);
    std::swap(totalpage_, other->totalpage_);
    std::swap(msgbuff_, other->msgbuff_);
    std::swap(msgsize_, other->msgsize_);
    std::swap(pageindex_, other->pageindex_);
    std::swap(bufflen_, other->bufflen_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(msgcount_, other->msgcount_);
    msg_.Swap(&other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTeamSearchMsgCallBack::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTeamSearchMsgCallBack::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTeamSearchMsgCallBack::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamSearchMsgCallBack_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageTeamSearchConscribeMsg::kMsgTypeFieldNumber;
const int CMessageTeamSearchConscribeMsg::kMaxLevelFieldNumber;
const int CMessageTeamSearchConscribeMsg::kPageIndexFieldNumber;
const int CMessageTeamSearchConscribeMsg::kMinLevelFieldNumber;
const int CMessageTeamSearchConscribeMsg::kConscribeTypeFieldNumber;
const int CMessageTeamSearchConscribeMsg::kMetierFieldNumber;
const int CMessageTeamSearchConscribeMsg::kSubTypeFieldNumber;
#endif  // !_MSC_VER

CMessageTeamSearchConscribeMsg::CMessageTeamSearchConscribeMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTeamSearchConscribeMsg::InitAsDefaultInstance() {}

CMessageTeamSearchConscribeMsg::CMessageTeamSearchConscribeMsg(const CMessageTeamSearchConscribeMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTeamSearchConscribeMsg::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 0u;
  maxlevel_ = 0u;
  pageindex_ = 0u;
  minlevel_ = 0u;
  conscribetype_ = 0u;
  metier_ = 0u;
  subtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTeamSearchConscribeMsg::~CMessageTeamSearchConscribeMsg() {
  SharedDtor();
}

void CMessageTeamSearchConscribeMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTeamSearchConscribeMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamSearchConscribeMsg_descriptor_;
}

const CMessageTeamSearchConscribeMsg& CMessageTeamSearchConscribeMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teammessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTeamSearchConscribeMsg* CMessageTeamSearchConscribeMsg::default_instance_ = NULL;

CMessageTeamSearchConscribeMsg* CMessageTeamSearchConscribeMsg::New() const {
  return new CMessageTeamSearchConscribeMsg;
}

void CMessageTeamSearchConscribeMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgtype_ = 0u;
    maxlevel_ = 0u;
    pageindex_ = 0u;
    minlevel_ = 0u;
    conscribetype_ = 0u;
    metier_ = 0u;
    subtype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTeamSearchConscribeMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 MsgType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &msgtype_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_MaxLevel;
        break;
      }
      
      // optional uint32 MaxLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxlevel_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_PageIndex;
        break;
      }
      
      // optional uint32 PageIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PageIndex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pageindex_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_MinLevel;
        break;
      }
      
      // optional uint32 MinLevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MinLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &minlevel_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_ConscribeType;
        break;
      }
      
      // optional uint32 ConscribeType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ConscribeType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &conscribetype_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Metier;
        break;
      }
      
      // optional uint32 Metier = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Metier:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &metier_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_SubType;
        break;
      }
      
      // optional uint32 SubType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SubType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &subtype_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTeamSearchConscribeMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTeamSearchConscribeMsg::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 MsgType = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->msgtype(), output);
  }
  
  // optional uint32 MaxLevel = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->maxlevel(), output);
  }
  
  // optional uint32 PageIndex = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->pageindex(), output);
  }
  
  // optional uint32 MinLevel = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->minlevel(), output);
  }
  
  // optional uint32 ConscribeType = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->conscribetype(), output);
  }
  
  // optional uint32 Metier = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->metier(), output);
  }
  
  // optional uint32 SubType = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->subtype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTeamSearchConscribeMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 MsgType = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->msgtype(), target);
  }
  
  // optional uint32 MaxLevel = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->maxlevel(), target);
  }
  
  // optional uint32 PageIndex = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->pageindex(), target);
  }
  
  // optional uint32 MinLevel = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->minlevel(), target);
  }
  
  // optional uint32 ConscribeType = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->conscribetype(), target);
  }
  
  // optional uint32 Metier = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->metier(), target);
  }
  
  // optional uint32 SubType = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->subtype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTeamSearchConscribeMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MsgType = 1;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->msgtype());
    }
    
    // optional uint32 MaxLevel = 2;
    if (has_maxlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxlevel());
    }
    
    // optional uint32 PageIndex = 3;
    if (has_pageindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pageindex());
    }
    
    // optional uint32 MinLevel = 4;
    if (has_minlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->minlevel());
    }
    
    // optional uint32 ConscribeType = 5;
    if (has_conscribetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->conscribetype());
    }
    
    // optional uint32 Metier = 6;
    if (has_metier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->metier());
    }
    
    // optional uint32 SubType = 7;
    if (has_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->subtype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTeamSearchConscribeMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTeamSearchConscribeMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTeamSearchConscribeMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTeamSearchConscribeMsg::MergeFrom(const CMessageTeamSearchConscribeMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_msgtype(from.msgtype());
    }
    if (from._has_bit(1)) {
      set_maxlevel(from.maxlevel());
    }
    if (from._has_bit(2)) {
      set_pageindex(from.pageindex());
    }
    if (from._has_bit(3)) {
      set_minlevel(from.minlevel());
    }
    if (from._has_bit(4)) {
      set_conscribetype(from.conscribetype());
    }
    if (from._has_bit(5)) {
      set_metier(from.metier());
    }
    if (from._has_bit(6)) {
      set_subtype(from.subtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTeamSearchConscribeMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamSearchConscribeMsg::CopyFrom(const CMessageTeamSearchConscribeMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamSearchConscribeMsg::Swap(CMessageTeamSearchConscribeMsg* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(maxlevel_, other->maxlevel_);
    std::swap(pageindex_, other->pageindex_);
    std::swap(minlevel_, other->minlevel_);
    std::swap(conscribetype_, other->conscribetype_);
    std::swap(metier_, other->metier_);
    std::swap(subtype_, other->subtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTeamSearchConscribeMsg::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTeamSearchConscribeMsg::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTeamSearchConscribeMsg::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamSearchConscribeMsg_reflection_;
}

// ===================================================================

const ::std::string CMessageTeamSearchConscribeCallBack::_default_msgbuff_;
#ifndef _MSC_VER
const int CMessageTeamSearchConscribeCallBack::kRouterFieldNumber;
const int CMessageTeamSearchConscribeCallBack::kMsgBuffFieldNumber;
const int CMessageTeamSearchConscribeCallBack::kBuffLenFieldNumber;
const int CMessageTeamSearchConscribeCallBack::kMsgTypeFieldNumber;
const int CMessageTeamSearchConscribeCallBack::kMsgCountFieldNumber;
const int CMessageTeamSearchConscribeCallBack::kPageIndexFieldNumber;
const int CMessageTeamSearchConscribeCallBack::kMsgFieldNumber;
const int CMessageTeamSearchConscribeCallBack::kMsgSizeFieldNumber;
const int CMessageTeamSearchConscribeCallBack::kTotalPageFieldNumber;
#endif  // !_MSC_VER

CMessageTeamSearchConscribeCallBack::CMessageTeamSearchConscribeCallBack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTeamSearchConscribeCallBack::InitAsDefaultInstance() {  router_ = const_cast< ::CMessageRouter*>(&::CMessageRouter::default_instance());
}

CMessageTeamSearchConscribeCallBack::CMessageTeamSearchConscribeCallBack(const CMessageTeamSearchConscribeCallBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTeamSearchConscribeCallBack::SharedCtor() {
  _cached_size_ = 0;
  router_ = NULL;
  msgbuff_ = const_cast< ::std::string*>(&_default_msgbuff_);
  bufflen_ = 0u;
  msgtype_ = 0u;
  msgcount_ = 0u;
  pageindex_ = 0u;
  msgsize_ = 0u;
  totalpage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTeamSearchConscribeCallBack::~CMessageTeamSearchConscribeCallBack() {
  SharedDtor();
}

void CMessageTeamSearchConscribeCallBack::SharedDtor() {
  if (msgbuff_ != &_default_msgbuff_) {
    delete msgbuff_;
  }
  if (this != default_instance_) {
    delete router_;
  }
}

const ::google::protobuf::Descriptor* CMessageTeamSearchConscribeCallBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamSearchConscribeCallBack_descriptor_;
}

const CMessageTeamSearchConscribeCallBack& CMessageTeamSearchConscribeCallBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teammessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTeamSearchConscribeCallBack* CMessageTeamSearchConscribeCallBack::default_instance_ = NULL;

CMessageTeamSearchConscribeCallBack* CMessageTeamSearchConscribeCallBack::New() const {
  return new CMessageTeamSearchConscribeCallBack;
}

void CMessageTeamSearchConscribeCallBack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (router_ != NULL) router_->::CMessageRouter::Clear();
    }
    if (_has_bit(1)) {
      if (msgbuff_ != &_default_msgbuff_) {
        msgbuff_->clear();
      }
    }
    bufflen_ = 0u;
    msgtype_ = 0u;
    msgcount_ = 0u;
    pageindex_ = 0u;
    msgsize_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    totalpage_ = 0u;
  }
  msg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTeamSearchConscribeCallBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CMessageRouter Router = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_router()));
        if (input->ExpectTag(18)) goto parse_MsgBuff;
        break;
      }
      
      // optional bytes MsgBuff = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MsgBuff:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_msgbuff()));
        if (input->ExpectTag(24)) goto parse_BuffLen;
        break;
      }
      
      // optional uint32 BuffLen = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BuffLen:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &bufflen_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_MsgType;
        break;
      }
      
      // optional uint32 MsgType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MsgType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &msgtype_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_MsgCount;
        break;
      }
      
      // optional uint32 MsgCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MsgCount:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &msgcount_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_PageIndex;
        break;
      }
      
      // optional uint32 PageIndex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PageIndex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pageindex_));
        _set_bit(5);
        if (input->ExpectTag(58)) goto parse_Msg;
        break;
      }
      
      // repeated .PBTeamMsg Msg = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Msg:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_msg()));
        if (input->ExpectTag(58)) goto parse_Msg;
        if (input->ExpectTag(64)) goto parse_MsgSize;
        break;
      }
      
      // optional uint32 MsgSize = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MsgSize:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &msgsize_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_TotalPage;
        break;
      }
      
      // optional uint32 TotalPage = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TotalPage:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &totalpage_));
        _set_bit(8);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTeamSearchConscribeCallBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTeamSearchConscribeCallBack::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->router(), output);
  }
  
  // optional bytes MsgBuff = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->msgbuff(), output);
  }
  
  // optional uint32 BuffLen = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->bufflen(), output);
  }
  
  // optional uint32 MsgType = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->msgtype(), output);
  }
  
  // optional uint32 MsgCount = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->msgcount(), output);
  }
  
  // optional uint32 PageIndex = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->pageindex(), output);
  }
  
  // repeated .PBTeamMsg Msg = 7;
  for (int i = 0; i < this->msg_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(7, this->msg(i), output);
  }
  
  // optional uint32 MsgSize = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->msgsize(), output);
  }
  
  // optional uint32 TotalPage = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->totalpage(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTeamSearchConscribeCallBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->router(), target);
  }
  
  // optional bytes MsgBuff = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->msgbuff(), target);
  }
  
  // optional uint32 BuffLen = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->bufflen(), target);
  }
  
  // optional uint32 MsgType = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->msgtype(), target);
  }
  
  // optional uint32 MsgCount = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->msgcount(), target);
  }
  
  // optional uint32 PageIndex = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->pageindex(), target);
  }
  
  // repeated .PBTeamMsg Msg = 7;
  for (int i = 0; i < this->msg_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(7, this->msg(i), target);
  }
  
  // optional uint32 MsgSize = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->msgsize(), target);
  }
  
  // optional uint32 TotalPage = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->totalpage(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTeamSearchConscribeCallBack::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMessageRouter Router = 1;
    if (has_router()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->router());
    }
    
    // optional bytes MsgBuff = 2;
    if (has_msgbuff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->msgbuff());
    }
    
    // optional uint32 BuffLen = 3;
    if (has_bufflen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->bufflen());
    }
    
    // optional uint32 MsgType = 4;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->msgtype());
    }
    
    // optional uint32 MsgCount = 5;
    if (has_msgcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->msgcount());
    }
    
    // optional uint32 PageIndex = 6;
    if (has_pageindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pageindex());
    }
    
    // optional uint32 MsgSize = 8;
    if (has_msgsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->msgsize());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 TotalPage = 9;
    if (has_totalpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->totalpage());
    }
    
  }
  // repeated .PBTeamMsg Msg = 7;
  total_size += 1 * this->msg_size();
  for (int i = 0; i < this->msg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->msg(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTeamSearchConscribeCallBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTeamSearchConscribeCallBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTeamSearchConscribeCallBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTeamSearchConscribeCallBack::MergeFrom(const CMessageTeamSearchConscribeCallBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  msg_.MergeFrom(from.msg_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_router()->::CMessageRouter::MergeFrom(from.router());
    }
    if (from._has_bit(1)) {
      set_msgbuff(from.msgbuff());
    }
    if (from._has_bit(2)) {
      set_bufflen(from.bufflen());
    }
    if (from._has_bit(3)) {
      set_msgtype(from.msgtype());
    }
    if (from._has_bit(4)) {
      set_msgcount(from.msgcount());
    }
    if (from._has_bit(5)) {
      set_pageindex(from.pageindex());
    }
    if (from._has_bit(7)) {
      set_msgsize(from.msgsize());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_totalpage(from.totalpage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTeamSearchConscribeCallBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamSearchConscribeCallBack::CopyFrom(const CMessageTeamSearchConscribeCallBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamSearchConscribeCallBack::Swap(CMessageTeamSearchConscribeCallBack* other) {
  if (other != this) {
    std::swap(router_, other->router_);
    std::swap(msgbuff_, other->msgbuff_);
    std::swap(bufflen_, other->bufflen_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(msgcount_, other->msgcount_);
    std::swap(pageindex_, other->pageindex_);
    msg_.Swap(&other->msg_);
    std::swap(msgsize_, other->msgsize_);
    std::swap(totalpage_, other->totalpage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTeamSearchConscribeCallBack::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTeamSearchConscribeCallBack::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTeamSearchConscribeCallBack::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamSearchConscribeCallBack_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageTeamDeleteMsg::kMsgTypeFieldNumber;
const int CMessageTeamDeleteMsg::kCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageTeamDeleteMsg::CMessageTeamDeleteMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTeamDeleteMsg::InitAsDefaultInstance() {}

CMessageTeamDeleteMsg::CMessageTeamDeleteMsg(const CMessageTeamDeleteMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTeamDeleteMsg::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 0u;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTeamDeleteMsg::~CMessageTeamDeleteMsg() {
  SharedDtor();
}

void CMessageTeamDeleteMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTeamDeleteMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamDeleteMsg_descriptor_;
}

const CMessageTeamDeleteMsg& CMessageTeamDeleteMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teammessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTeamDeleteMsg* CMessageTeamDeleteMsg::default_instance_ = NULL;

CMessageTeamDeleteMsg* CMessageTeamDeleteMsg::New() const {
  return new CMessageTeamDeleteMsg;
}

void CMessageTeamDeleteMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgtype_ = 0u;
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTeamDeleteMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 MsgType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &msgtype_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTeamDeleteMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTeamDeleteMsg::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 MsgType = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->msgtype(), output);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTeamDeleteMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 MsgType = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->msgtype(), target);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTeamDeleteMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MsgType = 1;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->msgtype());
    }
    
    // optional uint32 CharID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTeamDeleteMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTeamDeleteMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTeamDeleteMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTeamDeleteMsg::MergeFrom(const CMessageTeamDeleteMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_msgtype(from.msgtype());
    }
    if (from._has_bit(1)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTeamDeleteMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamDeleteMsg::CopyFrom(const CMessageTeamDeleteMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamDeleteMsg::Swap(CMessageTeamDeleteMsg* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTeamDeleteMsg::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTeamDeleteMsg::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTeamDeleteMsg::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamDeleteMsg_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageTeamDeleteMsgCallBack::kEntityIDFieldNumber;
const int CMessageTeamDeleteMsgCallBack::kMsgTypeFieldNumber;
#endif  // !_MSC_VER

CMessageTeamDeleteMsgCallBack::CMessageTeamDeleteMsgCallBack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTeamDeleteMsgCallBack::InitAsDefaultInstance() {}

CMessageTeamDeleteMsgCallBack::CMessageTeamDeleteMsgCallBack(const CMessageTeamDeleteMsgCallBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTeamDeleteMsgCallBack::SharedCtor() {
  _cached_size_ = 0;
  entityid_ = 0u;
  msgtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTeamDeleteMsgCallBack::~CMessageTeamDeleteMsgCallBack() {
  SharedDtor();
}

void CMessageTeamDeleteMsgCallBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTeamDeleteMsgCallBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamDeleteMsgCallBack_descriptor_;
}

const CMessageTeamDeleteMsgCallBack& CMessageTeamDeleteMsgCallBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teammessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTeamDeleteMsgCallBack* CMessageTeamDeleteMsgCallBack::default_instance_ = NULL;

CMessageTeamDeleteMsgCallBack* CMessageTeamDeleteMsgCallBack::New() const {
  return new CMessageTeamDeleteMsgCallBack;
}

void CMessageTeamDeleteMsgCallBack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entityid_ = 0u;
    msgtype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTeamDeleteMsgCallBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 EntityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_MsgType;
        break;
      }
      
      // optional uint32 MsgType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MsgType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &msgtype_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTeamDeleteMsgCallBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTeamDeleteMsgCallBack::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->entityid(), output);
  }
  
  // optional uint32 MsgType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->msgtype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTeamDeleteMsgCallBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->entityid(), target);
  }
  
  // optional uint32 MsgType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->msgtype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTeamDeleteMsgCallBack::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 EntityID = 1;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
    // optional uint32 MsgType = 2;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->msgtype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTeamDeleteMsgCallBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTeamDeleteMsgCallBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTeamDeleteMsgCallBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTeamDeleteMsgCallBack::MergeFrom(const CMessageTeamDeleteMsgCallBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_entityid(from.entityid());
    }
    if (from._has_bit(1)) {
      set_msgtype(from.msgtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTeamDeleteMsgCallBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamDeleteMsgCallBack::CopyFrom(const CMessageTeamDeleteMsgCallBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamDeleteMsgCallBack::Swap(CMessageTeamDeleteMsgCallBack* other) {
  if (other != this) {
    std::swap(entityid_, other->entityid_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTeamDeleteMsgCallBack::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTeamDeleteMsgCallBack::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTeamDeleteMsgCallBack::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamDeleteMsgCallBack_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageTeamOrderFollow::kCodeFieldNumber;
#endif  // !_MSC_VER

CMessageTeamOrderFollow::CMessageTeamOrderFollow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTeamOrderFollow::InitAsDefaultInstance() {}

CMessageTeamOrderFollow::CMessageTeamOrderFollow(const CMessageTeamOrderFollow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTeamOrderFollow::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTeamOrderFollow::~CMessageTeamOrderFollow() {
  SharedDtor();
}

void CMessageTeamOrderFollow::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTeamOrderFollow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamOrderFollow_descriptor_;
}

const CMessageTeamOrderFollow& CMessageTeamOrderFollow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teammessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTeamOrderFollow* CMessageTeamOrderFollow::default_instance_ = NULL;

CMessageTeamOrderFollow* CMessageTeamOrderFollow::New() const {
  return new CMessageTeamOrderFollow;
}

void CMessageTeamOrderFollow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTeamOrderFollow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &code_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTeamOrderFollow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTeamOrderFollow::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Code = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTeamOrderFollow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Code = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTeamOrderFollow::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTeamOrderFollow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTeamOrderFollow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTeamOrderFollow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTeamOrderFollow::MergeFrom(const CMessageTeamOrderFollow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTeamOrderFollow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamOrderFollow::CopyFrom(const CMessageTeamOrderFollow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamOrderFollow::Swap(CMessageTeamOrderFollow* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTeamOrderFollow::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTeamOrderFollow::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTeamOrderFollow::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamOrderFollow_reflection_;
}

// ===================================================================

const ::std::string CMessageTeamOrderFollowCallBack::_default_headername_;
#ifndef _MSC_VER
const int CMessageTeamOrderFollowCallBack::kCharIDFieldNumber;
const int CMessageTeamOrderFollowCallBack::kHeaderNameFieldNumber;
const int CMessageTeamOrderFollowCallBack::kCodeFieldNumber;
#endif  // !_MSC_VER

CMessageTeamOrderFollowCallBack::CMessageTeamOrderFollowCallBack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTeamOrderFollowCallBack::InitAsDefaultInstance() {}

CMessageTeamOrderFollowCallBack::CMessageTeamOrderFollowCallBack(const CMessageTeamOrderFollowCallBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTeamOrderFollowCallBack::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  headername_ = const_cast< ::std::string*>(&_default_headername_);
  code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTeamOrderFollowCallBack::~CMessageTeamOrderFollowCallBack() {
  SharedDtor();
}

void CMessageTeamOrderFollowCallBack::SharedDtor() {
  if (headername_ != &_default_headername_) {
    delete headername_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTeamOrderFollowCallBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamOrderFollowCallBack_descriptor_;
}

const CMessageTeamOrderFollowCallBack& CMessageTeamOrderFollowCallBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teammessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTeamOrderFollowCallBack* CMessageTeamOrderFollowCallBack::default_instance_ = NULL;

CMessageTeamOrderFollowCallBack* CMessageTeamOrderFollowCallBack::New() const {
  return new CMessageTeamOrderFollowCallBack;
}

void CMessageTeamOrderFollowCallBack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (_has_bit(1)) {
      if (headername_ != &_default_headername_) {
        headername_->clear();
      }
    }
    code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTeamOrderFollowCallBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_HeaderName;
        break;
      }
      
      // optional string HeaderName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_HeaderName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_headername()));
        if (input->ExpectTag(24)) goto parse_Code;
        break;
      }
      
      // optional uint32 Code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Code:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &code_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTeamOrderFollowCallBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTeamOrderFollowCallBack::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional string HeaderName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->headername(), output);
  }
  
  // optional uint32 Code = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTeamOrderFollowCallBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional string HeaderName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->headername(), target);
  }
  
  // optional uint32 Code = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTeamOrderFollowCallBack::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional string HeaderName = 2;
    if (has_headername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->headername());
    }
    
    // optional uint32 Code = 3;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTeamOrderFollowCallBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTeamOrderFollowCallBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTeamOrderFollowCallBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTeamOrderFollowCallBack::MergeFrom(const CMessageTeamOrderFollowCallBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_headername(from.headername());
    }
    if (from._has_bit(2)) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTeamOrderFollowCallBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamOrderFollowCallBack::CopyFrom(const CMessageTeamOrderFollowCallBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamOrderFollowCallBack::Swap(CMessageTeamOrderFollowCallBack* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(headername_, other->headername_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTeamOrderFollowCallBack::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTeamOrderFollowCallBack::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTeamOrderFollowCallBack::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamOrderFollowCallBack_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageTeamRequestFollow::kCodeFieldNumber;
#endif  // !_MSC_VER

CMessageTeamRequestFollow::CMessageTeamRequestFollow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTeamRequestFollow::InitAsDefaultInstance() {}

CMessageTeamRequestFollow::CMessageTeamRequestFollow(const CMessageTeamRequestFollow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTeamRequestFollow::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTeamRequestFollow::~CMessageTeamRequestFollow() {
  SharedDtor();
}

void CMessageTeamRequestFollow::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTeamRequestFollow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamRequestFollow_descriptor_;
}

const CMessageTeamRequestFollow& CMessageTeamRequestFollow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teammessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTeamRequestFollow* CMessageTeamRequestFollow::default_instance_ = NULL;

CMessageTeamRequestFollow* CMessageTeamRequestFollow::New() const {
  return new CMessageTeamRequestFollow;
}

void CMessageTeamRequestFollow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTeamRequestFollow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &code_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTeamRequestFollow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTeamRequestFollow::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Code = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTeamRequestFollow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Code = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTeamRequestFollow::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTeamRequestFollow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTeamRequestFollow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTeamRequestFollow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTeamRequestFollow::MergeFrom(const CMessageTeamRequestFollow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTeamRequestFollow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamRequestFollow::CopyFrom(const CMessageTeamRequestFollow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamRequestFollow::Swap(CMessageTeamRequestFollow* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTeamRequestFollow::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTeamRequestFollow::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTeamRequestFollow::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamRequestFollow_reflection_;
}

// ===================================================================

const ::std::string CMessageTeamRequestFollowCallBack::_default_name_;
#ifndef _MSC_VER
const int CMessageTeamRequestFollowCallBack::kNameFieldNumber;
const int CMessageTeamRequestFollowCallBack::kCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageTeamRequestFollowCallBack::CMessageTeamRequestFollowCallBack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTeamRequestFollowCallBack::InitAsDefaultInstance() {}

CMessageTeamRequestFollowCallBack::CMessageTeamRequestFollowCallBack(const CMessageTeamRequestFollowCallBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTeamRequestFollowCallBack::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTeamRequestFollowCallBack::~CMessageTeamRequestFollowCallBack() {
  SharedDtor();
}

void CMessageTeamRequestFollowCallBack::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTeamRequestFollowCallBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamRequestFollowCallBack_descriptor_;
}

const CMessageTeamRequestFollowCallBack& CMessageTeamRequestFollowCallBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teammessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTeamRequestFollowCallBack* CMessageTeamRequestFollowCallBack::default_instance_ = NULL;

CMessageTeamRequestFollowCallBack* CMessageTeamRequestFollowCallBack::New() const {
  return new CMessageTeamRequestFollowCallBack;
}

void CMessageTeamRequestFollowCallBack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTeamRequestFollowCallBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(16)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTeamRequestFollowCallBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTeamRequestFollowCallBack::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string Name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->name(), output);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTeamRequestFollowCallBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Name = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->name(), target);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTeamRequestFollowCallBack::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional uint32 CharID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTeamRequestFollowCallBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTeamRequestFollowCallBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTeamRequestFollowCallBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTeamRequestFollowCallBack::MergeFrom(const CMessageTeamRequestFollowCallBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTeamRequestFollowCallBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamRequestFollowCallBack::CopyFrom(const CMessageTeamRequestFollowCallBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamRequestFollowCallBack::Swap(CMessageTeamRequestFollowCallBack* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTeamRequestFollowCallBack::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTeamRequestFollowCallBack::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTeamRequestFollowCallBack::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamRequestFollowCallBack_reflection_;
}

// ===================================================================

const ::std::string CMessageTeamTwoParamCallBack::_default_desname_;
const ::std::string CMessageTeamTwoParamCallBack::_default_srcname_;
#ifndef _MSC_VER
const int CMessageTeamTwoParamCallBack::kDesNameFieldNumber;
const int CMessageTeamTwoParamCallBack::kDesCharIDFieldNumber;
const int CMessageTeamTwoParamCallBack::kSrcNameFieldNumber;
const int CMessageTeamTwoParamCallBack::kCodeFieldNumber;
const int CMessageTeamTwoParamCallBack::kSrcCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageTeamTwoParamCallBack::CMessageTeamTwoParamCallBack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTeamTwoParamCallBack::InitAsDefaultInstance() {}

CMessageTeamTwoParamCallBack::CMessageTeamTwoParamCallBack(const CMessageTeamTwoParamCallBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTeamTwoParamCallBack::SharedCtor() {
  _cached_size_ = 0;
  desname_ = const_cast< ::std::string*>(&_default_desname_);
  descharid_ = 0u;
  srcname_ = const_cast< ::std::string*>(&_default_srcname_);
  code_ = 0u;
  srccharid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTeamTwoParamCallBack::~CMessageTeamTwoParamCallBack() {
  SharedDtor();
}

void CMessageTeamTwoParamCallBack::SharedDtor() {
  if (desname_ != &_default_desname_) {
    delete desname_;
  }
  if (srcname_ != &_default_srcname_) {
    delete srcname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTeamTwoParamCallBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamTwoParamCallBack_descriptor_;
}

const CMessageTeamTwoParamCallBack& CMessageTeamTwoParamCallBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teammessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTeamTwoParamCallBack* CMessageTeamTwoParamCallBack::default_instance_ = NULL;

CMessageTeamTwoParamCallBack* CMessageTeamTwoParamCallBack::New() const {
  return new CMessageTeamTwoParamCallBack;
}

void CMessageTeamTwoParamCallBack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (desname_ != &_default_desname_) {
        desname_->clear();
      }
    }
    descharid_ = 0u;
    if (_has_bit(2)) {
      if (srcname_ != &_default_srcname_) {
        srcname_->clear();
      }
    }
    code_ = 0u;
    srccharid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTeamTwoParamCallBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string DesName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_desname()));
        if (input->ExpectTag(16)) goto parse_DesCharID;
        break;
      }
      
      // optional uint32 DesCharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DesCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &descharid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_SrcName;
        break;
      }
      
      // optional string SrcName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SrcName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_srcname()));
        if (input->ExpectTag(32)) goto parse_Code;
        break;
      }
      
      // optional uint32 Code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Code:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &code_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_SrcCharID;
        break;
      }
      
      // optional uint32 SrcCharID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SrcCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srccharid_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTeamTwoParamCallBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTeamTwoParamCallBack::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string DesName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->desname(), output);
  }
  
  // optional uint32 DesCharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->descharid(), output);
  }
  
  // optional string SrcName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->srcname(), output);
  }
  
  // optional uint32 Code = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->code(), output);
  }
  
  // optional uint32 SrcCharID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->srccharid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTeamTwoParamCallBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string DesName = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->desname(), target);
  }
  
  // optional uint32 DesCharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->descharid(), target);
  }
  
  // optional string SrcName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->srcname(), target);
  }
  
  // optional uint32 Code = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->code(), target);
  }
  
  // optional uint32 SrcCharID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->srccharid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTeamTwoParamCallBack::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string DesName = 1;
    if (has_desname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->desname());
    }
    
    // optional uint32 DesCharID = 2;
    if (has_descharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->descharid());
    }
    
    // optional string SrcName = 3;
    if (has_srcname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->srcname());
    }
    
    // optional uint32 Code = 4;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->code());
    }
    
    // optional uint32 SrcCharID = 5;
    if (has_srccharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srccharid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTeamTwoParamCallBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTeamTwoParamCallBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTeamTwoParamCallBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTeamTwoParamCallBack::MergeFrom(const CMessageTeamTwoParamCallBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_desname(from.desname());
    }
    if (from._has_bit(1)) {
      set_descharid(from.descharid());
    }
    if (from._has_bit(2)) {
      set_srcname(from.srcname());
    }
    if (from._has_bit(3)) {
      set_code(from.code());
    }
    if (from._has_bit(4)) {
      set_srccharid(from.srccharid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTeamTwoParamCallBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamTwoParamCallBack::CopyFrom(const CMessageTeamTwoParamCallBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamTwoParamCallBack::Swap(CMessageTeamTwoParamCallBack* other) {
  if (other != this) {
    std::swap(desname_, other->desname_);
    std::swap(descharid_, other->descharid_);
    std::swap(srcname_, other->srcname_);
    std::swap(code_, other->code_);
    std::swap(srccharid_, other->srccharid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTeamTwoParamCallBack::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTeamTwoParamCallBack::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTeamTwoParamCallBack::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamTwoParamCallBack_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageTeamStateChange::kTeamFlagFieldNumber;
const int CMessageTeamStateChange::kCharIDFieldNumber;
const int CMessageTeamStateChange::kEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageTeamStateChange::CMessageTeamStateChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTeamStateChange::InitAsDefaultInstance() {}

CMessageTeamStateChange::CMessageTeamStateChange(const CMessageTeamStateChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTeamStateChange::SharedCtor() {
  _cached_size_ = 0;
  teamflag_ = 0u;
  charid_ = 0u;
  entityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTeamStateChange::~CMessageTeamStateChange() {
  SharedDtor();
}

void CMessageTeamStateChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTeamStateChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamStateChange_descriptor_;
}

const CMessageTeamStateChange& CMessageTeamStateChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teammessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTeamStateChange* CMessageTeamStateChange::default_instance_ = NULL;

CMessageTeamStateChange* CMessageTeamStateChange::New() const {
  return new CMessageTeamStateChange;
}

void CMessageTeamStateChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamflag_ = 0u;
    charid_ = 0u;
    entityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTeamStateChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TeamFlag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &teamflag_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_EntityID;
        break;
      }
      
      // optional uint32 EntityID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTeamStateChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTeamStateChange::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TeamFlag = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->teamflag(), output);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charid(), output);
  }
  
  // optional uint32 EntityID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->entityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTeamStateChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TeamFlag = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->teamflag(), target);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charid(), target);
  }
  
  // optional uint32 EntityID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->entityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTeamStateChange::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TeamFlag = 1;
    if (has_teamflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->teamflag());
    }
    
    // optional uint32 CharID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 EntityID = 3;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTeamStateChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTeamStateChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTeamStateChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTeamStateChange::MergeFrom(const CMessageTeamStateChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_teamflag(from.teamflag());
    }
    if (from._has_bit(1)) {
      set_charid(from.charid());
    }
    if (from._has_bit(2)) {
      set_entityid(from.entityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTeamStateChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamStateChange::CopyFrom(const CMessageTeamStateChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamStateChange::Swap(CMessageTeamStateChange* other) {
  if (other != this) {
    std::swap(teamflag_, other->teamflag_);
    std::swap(charid_, other->charid_);
    std::swap(entityid_, other->entityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTeamStateChange::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTeamStateChange::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTeamStateChange::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamStateChange_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageRedirectJoinTeamResponse::kRouterFieldNumber;
const int CMessageRedirectJoinTeamResponse::kItemIDFieldNumber;
const int CMessageRedirectJoinTeamResponse::kHeadIDFieldNumber;
#endif  // !_MSC_VER

CMessageRedirectJoinTeamResponse::CMessageRedirectJoinTeamResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRedirectJoinTeamResponse::InitAsDefaultInstance() {  router_ = const_cast< ::CMessageRouter*>(&::CMessageRouter::default_instance());
}

CMessageRedirectJoinTeamResponse::CMessageRedirectJoinTeamResponse(const CMessageRedirectJoinTeamResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRedirectJoinTeamResponse::SharedCtor() {
  _cached_size_ = 0;
  router_ = NULL;
  itemid_ = 0u;
  headid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRedirectJoinTeamResponse::~CMessageRedirectJoinTeamResponse() {
  SharedDtor();
}

void CMessageRedirectJoinTeamResponse::SharedDtor() {
  if (this != default_instance_) {
    delete router_;
  }
}

const ::google::protobuf::Descriptor* CMessageRedirectJoinTeamResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRedirectJoinTeamResponse_descriptor_;
}

const CMessageRedirectJoinTeamResponse& CMessageRedirectJoinTeamResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teammessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRedirectJoinTeamResponse* CMessageRedirectJoinTeamResponse::default_instance_ = NULL;

CMessageRedirectJoinTeamResponse* CMessageRedirectJoinTeamResponse::New() const {
  return new CMessageRedirectJoinTeamResponse;
}

void CMessageRedirectJoinTeamResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (router_ != NULL) router_->::CMessageRouter::Clear();
    }
    itemid_ = 0u;
    headid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRedirectJoinTeamResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CMessageRouter Router = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_router()));
        if (input->ExpectTag(16)) goto parse_ItemID;
        break;
      }
      
      // optional uint32 ItemID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_HeadID;
        break;
      }
      
      // optional uint32 HeadID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HeadID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &headid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageRedirectJoinTeamResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRedirectJoinTeamResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->router(), output);
  }
  
  // optional uint32 ItemID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->itemid(), output);
  }
  
  // optional uint32 HeadID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->headid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRedirectJoinTeamResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->router(), target);
  }
  
  // optional uint32 ItemID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->itemid(), target);
  }
  
  // optional uint32 HeadID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->headid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRedirectJoinTeamResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMessageRouter Router = 1;
    if (has_router()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->router());
    }
    
    // optional uint32 ItemID = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemid());
    }
    
    // optional uint32 HeadID = 3;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->headid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRedirectJoinTeamResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRedirectJoinTeamResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRedirectJoinTeamResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRedirectJoinTeamResponse::MergeFrom(const CMessageRedirectJoinTeamResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_router()->::CMessageRouter::MergeFrom(from.router());
    }
    if (from._has_bit(1)) {
      set_itemid(from.itemid());
    }
    if (from._has_bit(2)) {
      set_headid(from.headid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRedirectJoinTeamResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRedirectJoinTeamResponse::CopyFrom(const CMessageRedirectJoinTeamResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRedirectJoinTeamResponse::Swap(CMessageRedirectJoinTeamResponse* other) {
  if (other != this) {
    std::swap(router_, other->router_);
    std::swap(itemid_, other->itemid_);
    std::swap(headid_, other->headid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRedirectJoinTeamResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRedirectJoinTeamResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRedirectJoinTeamResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRedirectJoinTeamResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageRedirectTeamRelationNotice::_default_desname_;
const ::std::string CMessageRedirectTeamRelationNotice::_default_srcname_;
#ifndef _MSC_VER
const int CMessageRedirectTeamRelationNotice::kRouterFieldNumber;
const int CMessageRedirectTeamRelationNotice::kDesCharIDFieldNumber;
const int CMessageRedirectTeamRelationNotice::kIsAddFieldNumber;
const int CMessageRedirectTeamRelationNotice::kSrcCharIDFieldNumber;
const int CMessageRedirectTeamRelationNotice::kDesNameFieldNumber;
const int CMessageRedirectTeamRelationNotice::kTypeFieldNumber;
const int CMessageRedirectTeamRelationNotice::kSrcNameFieldNumber;
#endif  // !_MSC_VER

CMessageRedirectTeamRelationNotice::CMessageRedirectTeamRelationNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRedirectTeamRelationNotice::InitAsDefaultInstance() {  router_ = const_cast< ::CMessageRouter*>(&::CMessageRouter::default_instance());
}

CMessageRedirectTeamRelationNotice::CMessageRedirectTeamRelationNotice(const CMessageRedirectTeamRelationNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRedirectTeamRelationNotice::SharedCtor() {
  _cached_size_ = 0;
  router_ = NULL;
  descharid_ = 0u;
  isadd_ = 0u;
  srccharid_ = 0u;
  desname_ = const_cast< ::std::string*>(&_default_desname_);
  type_ = 0u;
  srcname_ = const_cast< ::std::string*>(&_default_srcname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRedirectTeamRelationNotice::~CMessageRedirectTeamRelationNotice() {
  SharedDtor();
}

void CMessageRedirectTeamRelationNotice::SharedDtor() {
  if (desname_ != &_default_desname_) {
    delete desname_;
  }
  if (srcname_ != &_default_srcname_) {
    delete srcname_;
  }
  if (this != default_instance_) {
    delete router_;
  }
}

const ::google::protobuf::Descriptor* CMessageRedirectTeamRelationNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRedirectTeamRelationNotice_descriptor_;
}

const CMessageRedirectTeamRelationNotice& CMessageRedirectTeamRelationNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teammessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRedirectTeamRelationNotice* CMessageRedirectTeamRelationNotice::default_instance_ = NULL;

CMessageRedirectTeamRelationNotice* CMessageRedirectTeamRelationNotice::New() const {
  return new CMessageRedirectTeamRelationNotice;
}

void CMessageRedirectTeamRelationNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (router_ != NULL) router_->::CMessageRouter::Clear();
    }
    descharid_ = 0u;
    isadd_ = 0u;
    srccharid_ = 0u;
    if (_has_bit(4)) {
      if (desname_ != &_default_desname_) {
        desname_->clear();
      }
    }
    type_ = 0u;
    if (_has_bit(6)) {
      if (srcname_ != &_default_srcname_) {
        srcname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRedirectTeamRelationNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CMessageRouter Router = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_router()));
        if (input->ExpectTag(16)) goto parse_DesCharID;
        break;
      }
      
      // optional uint32 DesCharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DesCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &descharid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_IsAdd;
        break;
      }
      
      // optional uint32 IsAdd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IsAdd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &isadd_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_SrcCharID;
        break;
      }
      
      // optional uint32 SrcCharID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SrcCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srccharid_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_DesName;
        break;
      }
      
      // optional string DesName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_DesName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_desname()));
        if (input->ExpectTag(48)) goto parse_Type;
        break;
      }
      
      // optional uint32 Type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Type:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(5);
        if (input->ExpectTag(58)) goto parse_SrcName;
        break;
      }
      
      // optional string SrcName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SrcName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_srcname()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageRedirectTeamRelationNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRedirectTeamRelationNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->router(), output);
  }
  
  // optional uint32 DesCharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->descharid(), output);
  }
  
  // optional uint32 IsAdd = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->isadd(), output);
  }
  
  // optional uint32 SrcCharID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->srccharid(), output);
  }
  
  // optional string DesName = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->desname(), output);
  }
  
  // optional uint32 Type = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->type(), output);
  }
  
  // optional string SrcName = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteString(7, this->srcname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRedirectTeamRelationNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->router(), target);
  }
  
  // optional uint32 DesCharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->descharid(), target);
  }
  
  // optional uint32 IsAdd = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->isadd(), target);
  }
  
  // optional uint32 SrcCharID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->srccharid(), target);
  }
  
  // optional string DesName = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->desname(), target);
  }
  
  // optional uint32 Type = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->type(), target);
  }
  
  // optional string SrcName = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(7, this->srcname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRedirectTeamRelationNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMessageRouter Router = 1;
    if (has_router()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->router());
    }
    
    // optional uint32 DesCharID = 2;
    if (has_descharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->descharid());
    }
    
    // optional uint32 IsAdd = 3;
    if (has_isadd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->isadd());
    }
    
    // optional uint32 SrcCharID = 4;
    if (has_srccharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srccharid());
    }
    
    // optional string DesName = 5;
    if (has_desname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->desname());
    }
    
    // optional uint32 Type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
    // optional string SrcName = 7;
    if (has_srcname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->srcname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRedirectTeamRelationNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRedirectTeamRelationNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRedirectTeamRelationNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRedirectTeamRelationNotice::MergeFrom(const CMessageRedirectTeamRelationNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_router()->::CMessageRouter::MergeFrom(from.router());
    }
    if (from._has_bit(1)) {
      set_descharid(from.descharid());
    }
    if (from._has_bit(2)) {
      set_isadd(from.isadd());
    }
    if (from._has_bit(3)) {
      set_srccharid(from.srccharid());
    }
    if (from._has_bit(4)) {
      set_desname(from.desname());
    }
    if (from._has_bit(5)) {
      set_type(from.type());
    }
    if (from._has_bit(6)) {
      set_srcname(from.srcname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRedirectTeamRelationNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRedirectTeamRelationNotice::CopyFrom(const CMessageRedirectTeamRelationNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRedirectTeamRelationNotice::Swap(CMessageRedirectTeamRelationNotice* other) {
  if (other != this) {
    std::swap(router_, other->router_);
    std::swap(descharid_, other->descharid_);
    std::swap(isadd_, other->isadd_);
    std::swap(srccharid_, other->srccharid_);
    std::swap(desname_, other->desname_);
    std::swap(type_, other->type_);
    std::swap(srcname_, other->srcname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRedirectTeamRelationNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRedirectTeamRelationNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRedirectTeamRelationNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRedirectTeamRelationNotice_reflection_;
}

// ===================================================================

const ::std::string CMessageRedirectCreateTeamNotice::_default_charname_;
#ifndef _MSC_VER
const int CMessageRedirectCreateTeamNotice::kRouterFieldNumber;
const int CMessageRedirectCreateTeamNotice::kCharIDFieldNumber;
const int CMessageRedirectCreateTeamNotice::kSrcCharIDFieldNumber;
const int CMessageRedirectCreateTeamNotice::kCharNameFieldNumber;
#endif  // !_MSC_VER

CMessageRedirectCreateTeamNotice::CMessageRedirectCreateTeamNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRedirectCreateTeamNotice::InitAsDefaultInstance() {  router_ = const_cast< ::CMessageRouter*>(&::CMessageRouter::default_instance());
}

CMessageRedirectCreateTeamNotice::CMessageRedirectCreateTeamNotice(const CMessageRedirectCreateTeamNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRedirectCreateTeamNotice::SharedCtor() {
  _cached_size_ = 0;
  router_ = NULL;
  charid_ = 0u;
  srccharid_ = 0u;
  charname_ = const_cast< ::std::string*>(&_default_charname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRedirectCreateTeamNotice::~CMessageRedirectCreateTeamNotice() {
  SharedDtor();
}

void CMessageRedirectCreateTeamNotice::SharedDtor() {
  if (charname_ != &_default_charname_) {
    delete charname_;
  }
  if (this != default_instance_) {
    delete router_;
  }
}

const ::google::protobuf::Descriptor* CMessageRedirectCreateTeamNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRedirectCreateTeamNotice_descriptor_;
}

const CMessageRedirectCreateTeamNotice& CMessageRedirectCreateTeamNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teammessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRedirectCreateTeamNotice* CMessageRedirectCreateTeamNotice::default_instance_ = NULL;

CMessageRedirectCreateTeamNotice* CMessageRedirectCreateTeamNotice::New() const {
  return new CMessageRedirectCreateTeamNotice;
}

void CMessageRedirectCreateTeamNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (router_ != NULL) router_->::CMessageRouter::Clear();
    }
    charid_ = 0u;
    srccharid_ = 0u;
    if (_has_bit(3)) {
      if (charname_ != &_default_charname_) {
        charname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRedirectCreateTeamNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CMessageRouter Router = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_router()));
        if (input->ExpectTag(16)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_SrcCharID;
        break;
      }
      
      // optional uint32 SrcCharID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SrcCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srccharid_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_CharName;
        break;
      }
      
      // optional string CharName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CharName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_charname()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageRedirectCreateTeamNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRedirectCreateTeamNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->router(), output);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charid(), output);
  }
  
  // optional uint32 SrcCharID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->srccharid(), output);
  }
  
  // optional string CharName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->charname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRedirectCreateTeamNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->router(), target);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charid(), target);
  }
  
  // optional uint32 SrcCharID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->srccharid(), target);
  }
  
  // optional string CharName = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->charname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRedirectCreateTeamNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMessageRouter Router = 1;
    if (has_router()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->router());
    }
    
    // optional uint32 CharID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 SrcCharID = 3;
    if (has_srccharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srccharid());
    }
    
    // optional string CharName = 4;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->charname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRedirectCreateTeamNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRedirectCreateTeamNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRedirectCreateTeamNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRedirectCreateTeamNotice::MergeFrom(const CMessageRedirectCreateTeamNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_router()->::CMessageRouter::MergeFrom(from.router());
    }
    if (from._has_bit(1)) {
      set_charid(from.charid());
    }
    if (from._has_bit(2)) {
      set_srccharid(from.srccharid());
    }
    if (from._has_bit(3)) {
      set_charname(from.charname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRedirectCreateTeamNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRedirectCreateTeamNotice::CopyFrom(const CMessageRedirectCreateTeamNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRedirectCreateTeamNotice::Swap(CMessageRedirectCreateTeamNotice* other) {
  if (other != this) {
    std::swap(router_, other->router_);
    std::swap(charid_, other->charid_);
    std::swap(srccharid_, other->srccharid_);
    std::swap(charname_, other->charname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRedirectCreateTeamNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRedirectCreateTeamNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRedirectCreateTeamNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRedirectCreateTeamNotice_reflection_;
}

// ===================================================================

const ::std::string CMessageTeamNotice::_default_param2_;
const ::std::string CMessageTeamNotice::_default_param1_;
#ifndef _MSC_VER
const int CMessageTeamNotice::kCodeFieldNumber;
const int CMessageTeamNotice::kParam2FieldNumber;
const int CMessageTeamNotice::kParam1FieldNumber;
#endif  // !_MSC_VER

CMessageTeamNotice::CMessageTeamNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTeamNotice::InitAsDefaultInstance() {}

CMessageTeamNotice::CMessageTeamNotice(const CMessageTeamNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTeamNotice::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0u;
  param2_ = const_cast< ::std::string*>(&_default_param2_);
  param1_ = const_cast< ::std::string*>(&_default_param1_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTeamNotice::~CMessageTeamNotice() {
  SharedDtor();
}

void CMessageTeamNotice::SharedDtor() {
  if (param2_ != &_default_param2_) {
    delete param2_;
  }
  if (param1_ != &_default_param1_) {
    delete param1_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTeamNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamNotice_descriptor_;
}

const CMessageTeamNotice& CMessageTeamNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teammessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTeamNotice* CMessageTeamNotice::default_instance_ = NULL;

CMessageTeamNotice* CMessageTeamNotice::New() const {
  return new CMessageTeamNotice;
}

void CMessageTeamNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0u;
    if (_has_bit(1)) {
      if (param2_ != &_default_param2_) {
        param2_->clear();
      }
    }
    if (_has_bit(2)) {
      if (param1_ != &_default_param1_) {
        param1_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTeamNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &code_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Param2;
        break;
      }
      
      // optional string Param2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Param2:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_param2()));
        if (input->ExpectTag(26)) goto parse_Param1;
        break;
      }
      
      // optional string Param1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Param1:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_param1()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTeamNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTeamNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Code = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->code(), output);
  }
  
  // optional string Param2 = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->param2(), output);
  }
  
  // optional string Param1 = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->param1(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTeamNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Code = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->code(), target);
  }
  
  // optional string Param2 = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->param2(), target);
  }
  
  // optional string Param1 = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->param1(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTeamNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->code());
    }
    
    // optional string Param2 = 2;
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->param2());
    }
    
    // optional string Param1 = 3;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->param1());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTeamNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTeamNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTeamNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTeamNotice::MergeFrom(const CMessageTeamNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_code(from.code());
    }
    if (from._has_bit(1)) {
      set_param2(from.param2());
    }
    if (from._has_bit(2)) {
      set_param1(from.param1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTeamNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamNotice::CopyFrom(const CMessageTeamNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamNotice::Swap(CMessageTeamNotice* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(param2_, other->param2_);
    std::swap(param1_, other->param1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTeamNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTeamNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTeamNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamNotice_reflection_;
}
