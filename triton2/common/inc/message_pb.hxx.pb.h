// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_message_5fpb_2ehxx__INCLUDED
#define PROTOBUF_message_5fpb_2ehxx__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_message_5fpb_2ehxx();
void protobuf_AssignDesc_message_5fpb_2ehxx();
void protobuf_ShutdownFile_message_5fpb_2ehxx();

class CCSHead;
class CMessageHead;
class CMessage;

enum enMessageFE {
  FE_TIMER = 0,
  FE_CLIENT = 1,
  FE_SCENCESERVER = 2,
  FE_LOGINSERVER = 3,
  FE_INFOSERVER = 4,
  FE_GATESERVER = 5,
  FE_DATASERVER = 6,
  FE_ROUTERSERVER = 7,
  FE_PROXYSERVER = 8,
  FE_GLOBALSERVER = 9,
  FE_COUNTRY = 10,
  FE_FAMILY = 11,
  FE_CORPS = 12,
  FE_DUNGEONSERVER = 13,
  FE_OTHERGATE = 14
};
const ::google::protobuf::EnumDescriptor* enMessageFE_descriptor();
bool enMessageFE_IsValid(int value);
const enMessageFE enMessageFE_MIN = FE_TIMER;
const enMessageFE enMessageFE_MAX = FE_OTHERGATE;

inline const ::std::string& enMessageFE_Name(enMessageFE value) {
  return ::google::protobuf::internal::NameOfEnum(
    enMessageFE_descriptor(), value);
}
inline bool enMessageFE_Parse(
    const ::std::string& name, enMessageFE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<enMessageFE>(
    enMessageFE_descriptor(), name, value);
}
enum enMessageType {
  REQUEST = 0,
  RESPONSE = 1,
  NOTIFY = 2,
  ACK = 3
};
const ::google::protobuf::EnumDescriptor* enMessageType_descriptor();
bool enMessageType_IsValid(int value);
const enMessageType enMessageType_MIN = REQUEST;
const enMessageType enMessageType_MAX = ACK;

inline const ::std::string& enMessageType_Name(enMessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    enMessageType_descriptor(), value);
}
inline bool enMessageType_Parse(
    const ::std::string& name, enMessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<enMessageType>(
    enMessageType_descriptor(), name, value);
}
enum EmModuleFlagForMessage {
  MESSAGE_GLOBAL = 0,
  MESSAGE_CORE = 1024,
  MESSAGE_PROPERTY = 2048,
  MESSAGE_MAP = 3072,
  MESSAGE_TASK = 4096,
  MESSAGE_CHAT = 5120,
  MESSAGE_FRIEND = 6144,
  MESSAGE_TEAM = 7168,
  MESSAGE_MAIL = 8192,
  MESSAGE_TRADE = 9216,
  MESSAGE_STALL = 10240,
  MESSAGE_REPETION = 11264,
  MESSAGE_ACTIVITY = 12288,
  MESSAGE_FAMILY = 13312,
  MESSAGE_CORPS = 14336,
  MESSAGE_RANK = 15360,
  MESSAGE_GM = 16384,
  MESSAGE_LOG = 17408,
  MESSAGE_IB = 18432,
  MESSAGE_JUDGE = 19456,
  MESSAGE_ACHIEVE = 20480,
  MESSAGE_COUNTRY = 21504,
  MESSAGE_BOURSE = 22528,
  MESSAGE_MARRIAGE = 23552,
  MESSAGE_CAMP = 24576,
  MESSAGE_GLOBALDUNGEON = 25600,
  MESSAGE_DB = 31744
};
const ::google::protobuf::EnumDescriptor* EmModuleFlagForMessage_descriptor();
bool EmModuleFlagForMessage_IsValid(int value);
const EmModuleFlagForMessage EmModuleFlagForMessage_MIN = MESSAGE_GLOBAL;
const EmModuleFlagForMessage EmModuleFlagForMessage_MAX = MESSAGE_DB;

inline const ::std::string& EmModuleFlagForMessage_Name(EmModuleFlagForMessage value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmModuleFlagForMessage_descriptor(), value);
}
inline bool EmModuleFlagForMessage_Parse(
    const ::std::string& name, EmModuleFlagForMessage* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmModuleFlagForMessage>(
    EmModuleFlagForMessage_descriptor(), name, value);
}
// ===================================================================

class CCSHead : public ::google::protobuf::Message {
 public:
  CCSHead();
  virtual ~CCSHead();
  
  CCSHead(const CCSHead& from);
  
  inline CCSHead& operator=(const CCSHead& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CCSHead& default_instance();
  void Swap(CCSHead* other);
  
  // implements Message ----------------------------------------------
  
  CCSHead* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CCSHead& from);
  void MergeFrom(const CCSHead& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 Uin = 1;
  inline bool has_uin() const;
  inline void clear_uin();
  static const int kUinFieldNumber = 1;
  inline ::google::protobuf::uint32 uin() const;
  inline void set_uin(::google::protobuf::uint32 value);
  
  // optional uint32 DialogID = 2;
  inline bool has_dialogid() const;
  inline void clear_dialogid();
  static const int kDialogIDFieldNumber = 2;
  inline ::google::protobuf::uint32 dialogid() const;
  inline void set_dialogid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 uin_;
  ::google::protobuf::uint32 dialogid_;
  friend void  protobuf_AddDesc_message_5fpb_2ehxx();
  friend void protobuf_AssignDesc_message_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_message_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CCSHead* default_instance_;
};
// -------------------------------------------------------------------

class CMessageHead : public ::google::protobuf::Message {
 public:
  CMessageHead();
  virtual ~CMessageHead();
  
  CMessageHead(const CMessageHead& from);
  
  inline CMessageHead& operator=(const CMessageHead& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageHead& default_instance();
  void Swap(CMessageHead* other);
  
  // implements Message ----------------------------------------------
  
  CMessageHead* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageHead& from);
  void MergeFrom(const CMessageHead& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 DstFE = 1;
  inline bool has_dstfe() const;
  inline void clear_dstfe();
  static const int kDstFEFieldNumber = 1;
  inline ::google::protobuf::uint32 dstfe() const;
  inline void set_dstfe(::google::protobuf::uint32 value);
  
  // optional uint32 MsgSeq = 2;
  inline bool has_msgseq() const;
  inline void clear_msgseq();
  static const int kMsgSeqFieldNumber = 2;
  inline ::google::protobuf::uint32 msgseq() const;
  inline void set_msgseq(::google::protobuf::uint32 value);
  
  // optional uint32 SrcFE = 3;
  inline bool has_srcfe() const;
  inline void clear_srcfe();
  static const int kSrcFEFieldNumber = 3;
  inline ::google::protobuf::uint32 srcfe() const;
  inline void set_srcfe(::google::protobuf::uint32 value);
  
  // optional uint32 MessageID = 4;
  inline bool has_messageid() const;
  inline void clear_messageid();
  static const int kMessageIDFieldNumber = 4;
  inline ::google::protobuf::uint32 messageid() const;
  inline void set_messageid(::google::protobuf::uint32 value);
  
  // optional uint32 SrcID = 5;
  inline bool has_srcid() const;
  inline void clear_srcid();
  static const int kSrcIDFieldNumber = 5;
  inline ::google::protobuf::uint32 srcid() const;
  inline void set_srcid(::google::protobuf::uint32 value);
  
  // optional uint32 DstID = 6;
  inline bool has_dstid() const;
  inline void clear_dstid();
  static const int kDstIDFieldNumber = 6;
  inline ::google::protobuf::uint32 dstid() const;
  inline void set_dstid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 dstfe_;
  ::google::protobuf::uint32 msgseq_;
  ::google::protobuf::uint32 srcfe_;
  ::google::protobuf::uint32 messageid_;
  ::google::protobuf::uint32 srcid_;
  ::google::protobuf::uint32 dstid_;
  friend void  protobuf_AddDesc_message_5fpb_2ehxx();
  friend void protobuf_AssignDesc_message_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_message_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageHead* default_instance_;
};
// -------------------------------------------------------------------

class CMessage : public ::google::protobuf::Message {
 public:
  CMessage();
  virtual ~CMessage();
  
  CMessage(const CMessage& from);
  
  inline CMessage& operator=(const CMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessage& default_instance();
  void Swap(CMessage* other);
  
  // implements Message ----------------------------------------------
  
  CMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessage& from);
  void MergeFrom(const CMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .CMessageHead MsgHead = 1;
  inline bool has_msghead() const;
  inline void clear_msghead();
  static const int kMsgHeadFieldNumber = 1;
  inline const ::CMessageHead& msghead() const;
  inline ::CMessageHead* mutable_msghead();
  
  // optional fixed32 MsgPara = 2;
  inline bool has_msgpara() const;
  inline void clear_msgpara();
  static const int kMsgParaFieldNumber = 2;
  inline ::google::protobuf::uint32 msgpara() const;
  inline void set_msgpara(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::CMessageHead* msghead_;
  ::google::protobuf::uint32 msgpara_;
  friend void  protobuf_AddDesc_message_5fpb_2ehxx();
  friend void protobuf_AssignDesc_message_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_message_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessage* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// CCSHead

// optional uint32 Uin = 1;
inline bool CCSHead::has_uin() const {
  return _has_bit(0);
}
inline void CCSHead::clear_uin() {
  uin_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CCSHead::uin() const {
  return uin_;
}
inline void CCSHead::set_uin(::google::protobuf::uint32 value) {
  _set_bit(0);
  uin_ = value;
}

// optional uint32 DialogID = 2;
inline bool CCSHead::has_dialogid() const {
  return _has_bit(1);
}
inline void CCSHead::clear_dialogid() {
  dialogid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CCSHead::dialogid() const {
  return dialogid_;
}
inline void CCSHead::set_dialogid(::google::protobuf::uint32 value) {
  _set_bit(1);
  dialogid_ = value;
}

// -------------------------------------------------------------------

// CMessageHead

// optional uint32 DstFE = 1;
inline bool CMessageHead::has_dstfe() const {
  return _has_bit(0);
}
inline void CMessageHead::clear_dstfe() {
  dstfe_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageHead::dstfe() const {
  return dstfe_;
}
inline void CMessageHead::set_dstfe(::google::protobuf::uint32 value) {
  _set_bit(0);
  dstfe_ = value;
}

// optional uint32 MsgSeq = 2;
inline bool CMessageHead::has_msgseq() const {
  return _has_bit(1);
}
inline void CMessageHead::clear_msgseq() {
  msgseq_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageHead::msgseq() const {
  return msgseq_;
}
inline void CMessageHead::set_msgseq(::google::protobuf::uint32 value) {
  _set_bit(1);
  msgseq_ = value;
}

// optional uint32 SrcFE = 3;
inline bool CMessageHead::has_srcfe() const {
  return _has_bit(2);
}
inline void CMessageHead::clear_srcfe() {
  srcfe_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageHead::srcfe() const {
  return srcfe_;
}
inline void CMessageHead::set_srcfe(::google::protobuf::uint32 value) {
  _set_bit(2);
  srcfe_ = value;
}

// optional uint32 MessageID = 4;
inline bool CMessageHead::has_messageid() const {
  return _has_bit(3);
}
inline void CMessageHead::clear_messageid() {
  messageid_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessageHead::messageid() const {
  return messageid_;
}
inline void CMessageHead::set_messageid(::google::protobuf::uint32 value) {
  _set_bit(3);
  messageid_ = value;
}

// optional uint32 SrcID = 5;
inline bool CMessageHead::has_srcid() const {
  return _has_bit(4);
}
inline void CMessageHead::clear_srcid() {
  srcid_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 CMessageHead::srcid() const {
  return srcid_;
}
inline void CMessageHead::set_srcid(::google::protobuf::uint32 value) {
  _set_bit(4);
  srcid_ = value;
}

// optional uint32 DstID = 6;
inline bool CMessageHead::has_dstid() const {
  return _has_bit(5);
}
inline void CMessageHead::clear_dstid() {
  dstid_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 CMessageHead::dstid() const {
  return dstid_;
}
inline void CMessageHead::set_dstid(::google::protobuf::uint32 value) {
  _set_bit(5);
  dstid_ = value;
}

// -------------------------------------------------------------------

// CMessage

// required .CMessageHead MsgHead = 1;
inline bool CMessage::has_msghead() const {
  return _has_bit(0);
}
inline void CMessage::clear_msghead() {
  if (msghead_ != NULL) msghead_->::CMessageHead::Clear();
  _clear_bit(0);
}
inline const ::CMessageHead& CMessage::msghead() const {
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
}
inline ::CMessageHead* CMessage::mutable_msghead() {
  _set_bit(0);
  if (msghead_ == NULL) msghead_ = new ::CMessageHead;
  return msghead_;
}

// optional fixed32 MsgPara = 2;
inline bool CMessage::has_msgpara() const {
  return _has_bit(1);
}
inline void CMessage::clear_msgpara() {
  msgpara_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessage::msgpara() const {
  return msgpara_;
}
inline void CMessage::set_msgpara(::google::protobuf::uint32 value) {
  _set_bit(1);
  msgpara_ = value;
}

#endif  // PROTOBUF_message_5fpb_2ehxx__INCLUDED
