// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "countrymessage_pb.hxx.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>
#ifdef LEAK_CHK_DEBUG_NEW
#include "debug_new.h"
#endif

namespace {

const ::google::protobuf::Descriptor* PBOfficialData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBOfficialData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBOfficialList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBOfficialList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCountryInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCountryInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCountryInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCountryInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageJoinCountryRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageJoinCountryRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageJoinCountryResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageJoinCountryResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageJoinCountryNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageJoinCountryNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLeaveCountryRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLeaveCountryRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLeaveCountryResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLeaveCountryResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageSetOfficialRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageSetOfficialRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageSetOfficialResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageSetOfficialResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUnSetOfficialRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUnSetOfficialRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUnSetOfficialResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUnSetOfficialResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUseFunctionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUseFunctionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUseFunctionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUseFunctionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageOfficialInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageOfficialInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageOfficialInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageOfficialInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUseTimeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUseTimeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUseTimeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUseTimeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageWorldQuestRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageWorldQuestRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageWorldQuestResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageWorldQuestResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageWorldAnswerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageWorldAnswerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageWorldAnswerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageWorldAnswerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageWorldAnswerNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageWorldAnswerNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageWorldQuestNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageWorldQuestNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageWorldResultNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageWorldResultNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWorldStatusData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWorldStatusData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageWorldInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageWorldInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageWorldInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageWorldInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageOfficialChangeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageOfficialChangeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePlayerGSInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePlayerGSInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerGSInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerGSInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldStatusInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldStatusInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GTAndLWInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GTAndLWInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePlayerGSInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePlayerGSInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePlayerGSInfoNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePlayerGSInfoNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageKingChangeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageKingChangeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageSummonPlayerNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageSummonPlayerNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetAwardRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetAwardRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetAwardResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetAwardResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageStartCountryRedstoneNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageStartCountryRedstoneNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeleportData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeleportData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageSubmitWarRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageSubmitWarRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageSubmitWarResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageSubmitWarResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageEnterWarRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageEnterWarRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageEnterWarResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageEnterWarResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageQueryWarCampRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageQueryWarCampRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageQueryWarCampResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageQueryWarCampResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageQueryWarNumRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageQueryWarNumRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* WarNumData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WarNumData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageQueryWarNumResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageQueryWarNumResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* WarDetailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WarDetailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageQueryWarInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageQueryWarInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageQueryWarInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageQueryWarInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* WarRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WarRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageQueryWarRankRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageQueryWarRankRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageQueryWarRankResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageQueryWarRankResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageWarSourceNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageWarSourceNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBidCampRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBidCampRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBidCampResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBidCampResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCampBidInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCampBidInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCampBidInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCampBidInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCampResInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCampResInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCampResInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCampResInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetWarAwardRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetWarAwardRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetWarAwardResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetWarAwardResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* NPCWarInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NPCWarInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageWarInfoNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageWarInfoNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageQueryWarAwardRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageQueryWarAwardRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageQueryWarAwardResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageQueryWarAwardResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageWarHonorNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageWarHonorNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageWarCampNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageWarCampNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageModifyRateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageModifyRateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageModifyRateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageModifyRateResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageModifyRateNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageModifyRateNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetTaxRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetTaxRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetTaxResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetTaxResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageQueryStoneNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageQueryStoneNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRefuseSummonRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRefuseSummonRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRefuseSummonNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRefuseSummonNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCampWeakForceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCampWeakForceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCampWeakListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCampWeakListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCampWeakListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCampWeakListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCampGetAwardRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCampGetAwardRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCampGetAwardResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCampGetAwardResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageAccuseKingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageAccuseKingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageAccuseKingResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageAccuseKingResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageAccuseKingNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageAccuseKingNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageAccuseStatusNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageAccuseStatusNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePowerInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePowerInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PowerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PowerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePowerInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePowerInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageMakeGuoTanNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageMakeGuoTanNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageMakeLuanWuNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageMakeLuanWuNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CountryMessageID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EM_CampMessageID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_countrymessage_5fpb_2ehxx() {
  protobuf_AddDesc_countrymessage_5fpb_2ehxx();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "countrymessage_pb.hxx");
  GOOGLE_CHECK(file != NULL);
  PBOfficialData_descriptor_ = file->message_type(0);
  static const int PBOfficialData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOfficialData, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOfficialData, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOfficialData, officiallevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOfficialData, officialorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOfficialData, usetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOfficialData, usex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOfficialData, usey_),
  };
  PBOfficialData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBOfficialData_descriptor_,
      PBOfficialData::default_instance_,
      PBOfficialData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOfficialData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOfficialData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBOfficialData));
  PBOfficialList_descriptor_ = file->message_type(1);
  static const int PBOfficialList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOfficialList, officialdata_),
  };
  PBOfficialList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBOfficialList_descriptor_,
      PBOfficialList::default_instance_,
      PBOfficialList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOfficialList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOfficialList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBOfficialList));
  CMessageCountryInfoRequest_descriptor_ = file->message_type(2);
  static const int CMessageCountryInfoRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCountryInfoRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCountryInfoRequest, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCountryInfoRequest, needfull_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCountryInfoRequest, worldid_),
  };
  CMessageCountryInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCountryInfoRequest_descriptor_,
      CMessageCountryInfoRequest::default_instance_,
      CMessageCountryInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCountryInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCountryInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCountryInfoRequest));
  CMessageCountryInfoResponse_descriptor_ = file->message_type(3);
  static const int CMessageCountryInfoResponse_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCountryInfoResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCountryInfoResponse, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCountryInfoResponse, kingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCountryInfoResponse, kingname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCountryInfoResponse, corpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCountryInfoResponse, corpsname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCountryInfoResponse, unionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCountryInfoResponse, unionname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCountryInfoResponse, peoplenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCountryInfoResponse, kingpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCountryInfoResponse, map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCountryInfoResponse, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCountryInfoResponse, wizard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCountryInfoResponse, constructvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCountryInfoResponse, constructlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCountryInfoResponse, notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCountryInfoResponse, battleinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCountryInfoResponse, needfull_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCountryInfoResponse, worldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCountryInfoResponse, worldlevel_),
  };
  CMessageCountryInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCountryInfoResponse_descriptor_,
      CMessageCountryInfoResponse::default_instance_,
      CMessageCountryInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCountryInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCountryInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCountryInfoResponse));
  CMessageJoinCountryRequest_descriptor_ = file->message_type(4);
  static const int CMessageJoinCountryRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJoinCountryRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJoinCountryRequest, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJoinCountryRequest, npcentityid_),
  };
  CMessageJoinCountryRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageJoinCountryRequest_descriptor_,
      CMessageJoinCountryRequest::default_instance_,
      CMessageJoinCountryRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJoinCountryRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJoinCountryRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageJoinCountryRequest));
  CMessageJoinCountryResponse_descriptor_ = file->message_type(5);
  static const int CMessageJoinCountryResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJoinCountryResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJoinCountryResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJoinCountryResponse, countryid_),
  };
  CMessageJoinCountryResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageJoinCountryResponse_descriptor_,
      CMessageJoinCountryResponse::default_instance_,
      CMessageJoinCountryResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJoinCountryResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJoinCountryResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageJoinCountryResponse));
  CMessageJoinCountryNotify_descriptor_ = file->message_type(6);
  static const int CMessageJoinCountryNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJoinCountryNotify, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJoinCountryNotify, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJoinCountryNotify, kingid_),
  };
  CMessageJoinCountryNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageJoinCountryNotify_descriptor_,
      CMessageJoinCountryNotify::default_instance_,
      CMessageJoinCountryNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJoinCountryNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJoinCountryNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageJoinCountryNotify));
  CMessageLeaveCountryRequest_descriptor_ = file->message_type(7);
  static const int CMessageLeaveCountryRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLeaveCountryRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLeaveCountryRequest, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLeaveCountryRequest, npcentityid_),
  };
  CMessageLeaveCountryRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLeaveCountryRequest_descriptor_,
      CMessageLeaveCountryRequest::default_instance_,
      CMessageLeaveCountryRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLeaveCountryRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLeaveCountryRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLeaveCountryRequest));
  CMessageLeaveCountryResponse_descriptor_ = file->message_type(8);
  static const int CMessageLeaveCountryResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLeaveCountryResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLeaveCountryResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLeaveCountryResponse, countryid_),
  };
  CMessageLeaveCountryResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLeaveCountryResponse_descriptor_,
      CMessageLeaveCountryResponse::default_instance_,
      CMessageLeaveCountryResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLeaveCountryResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLeaveCountryResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLeaveCountryResponse));
  CMessageSetOfficialRequest_descriptor_ = file->message_type(9);
  static const int CMessageSetOfficialRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetOfficialRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetOfficialRequest, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetOfficialRequest, officiallevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetOfficialRequest, officialorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetOfficialRequest, normalset_),
  };
  CMessageSetOfficialRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageSetOfficialRequest_descriptor_,
      CMessageSetOfficialRequest::default_instance_,
      CMessageSetOfficialRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetOfficialRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetOfficialRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageSetOfficialRequest));
  CMessageSetOfficialResponse_descriptor_ = file->message_type(10);
  static const int CMessageSetOfficialResponse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetOfficialResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetOfficialResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetOfficialResponse, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetOfficialResponse, officiallevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetOfficialResponse, officialorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetOfficialResponse, normalset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetOfficialResponse, targetid_),
  };
  CMessageSetOfficialResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageSetOfficialResponse_descriptor_,
      CMessageSetOfficialResponse::default_instance_,
      CMessageSetOfficialResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetOfficialResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetOfficialResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageSetOfficialResponse));
  CMessageUnSetOfficialRequest_descriptor_ = file->message_type(11);
  static const int CMessageUnSetOfficialRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnSetOfficialRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnSetOfficialRequest, officiallevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnSetOfficialRequest, officialorder_),
  };
  CMessageUnSetOfficialRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUnSetOfficialRequest_descriptor_,
      CMessageUnSetOfficialRequest::default_instance_,
      CMessageUnSetOfficialRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnSetOfficialRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnSetOfficialRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUnSetOfficialRequest));
  CMessageUnSetOfficialResponse_descriptor_ = file->message_type(12);
  static const int CMessageUnSetOfficialResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnSetOfficialResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnSetOfficialResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnSetOfficialResponse, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnSetOfficialResponse, officiallevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnSetOfficialResponse, officialorder_),
  };
  CMessageUnSetOfficialResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUnSetOfficialResponse_descriptor_,
      CMessageUnSetOfficialResponse::default_instance_,
      CMessageUnSetOfficialResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnSetOfficialResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnSetOfficialResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUnSetOfficialResponse));
  CMessageUseFunctionRequest_descriptor_ = file->message_type(13);
  static const int CMessageUseFunctionRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseFunctionRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseFunctionRequest, functiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseFunctionRequest, functionorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseFunctionRequest, targetname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseFunctionRequest, teleport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseFunctionRequest, intparam1_),
  };
  CMessageUseFunctionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUseFunctionRequest_descriptor_,
      CMessageUseFunctionRequest::default_instance_,
      CMessageUseFunctionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseFunctionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseFunctionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUseFunctionRequest));
  CMessageUseFunctionResponse_descriptor_ = file->message_type(14);
  static const int CMessageUseFunctionResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseFunctionResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseFunctionResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseFunctionResponse, functiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseFunctionResponse, functionorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseFunctionResponse, targetname_),
  };
  CMessageUseFunctionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUseFunctionResponse_descriptor_,
      CMessageUseFunctionResponse::default_instance_,
      CMessageUseFunctionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseFunctionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseFunctionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUseFunctionResponse));
  CMessageOfficialInfoRequest_descriptor_ = file->message_type(15);
  static const int CMessageOfficialInfoRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOfficialInfoRequest, charid_),
  };
  CMessageOfficialInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageOfficialInfoRequest_descriptor_,
      CMessageOfficialInfoRequest::default_instance_,
      CMessageOfficialInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOfficialInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOfficialInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageOfficialInfoRequest));
  CMessageOfficialInfoResponse_descriptor_ = file->message_type(16);
  static const int CMessageOfficialInfoResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOfficialInfoResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOfficialInfoResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOfficialInfoResponse, officiallist_),
  };
  CMessageOfficialInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageOfficialInfoResponse_descriptor_,
      CMessageOfficialInfoResponse::default_instance_,
      CMessageOfficialInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOfficialInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOfficialInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageOfficialInfoResponse));
  CMessageUseTimeRequest_descriptor_ = file->message_type(17);
  static const int CMessageUseTimeRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseTimeRequest, charid_),
  };
  CMessageUseTimeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUseTimeRequest_descriptor_,
      CMessageUseTimeRequest::default_instance_,
      CMessageUseTimeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseTimeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseTimeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUseTimeRequest));
  CMessageUseTimeResponse_descriptor_ = file->message_type(18);
  static const int CMessageUseTimeResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseTimeResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseTimeResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseTimeResponse, officialdata_),
  };
  CMessageUseTimeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUseTimeResponse_descriptor_,
      CMessageUseTimeResponse::default_instance_,
      CMessageUseTimeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseTimeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseTimeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUseTimeResponse));
  CMessageWorldQuestRequest_descriptor_ = file->message_type(19);
  static const int CMessageWorldQuestRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldQuestRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldQuestRequest, worldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldQuestRequest, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldQuestRequest, npcentityid_),
  };
  CMessageWorldQuestRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageWorldQuestRequest_descriptor_,
      CMessageWorldQuestRequest::default_instance_,
      CMessageWorldQuestRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldQuestRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldQuestRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageWorldQuestRequest));
  CMessageWorldQuestResponse_descriptor_ = file->message_type(20);
  static const int CMessageWorldQuestResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldQuestResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldQuestResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldQuestResponse, worldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldQuestResponse, optype_),
  };
  CMessageWorldQuestResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageWorldQuestResponse_descriptor_,
      CMessageWorldQuestResponse::default_instance_,
      CMessageWorldQuestResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldQuestResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldQuestResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageWorldQuestResponse));
  CMessageWorldAnswerRequest_descriptor_ = file->message_type(21);
  static const int CMessageWorldAnswerRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldAnswerRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldAnswerRequest, worldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldAnswerRequest, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldAnswerRequest, answer_),
  };
  CMessageWorldAnswerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageWorldAnswerRequest_descriptor_,
      CMessageWorldAnswerRequest::default_instance_,
      CMessageWorldAnswerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldAnswerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldAnswerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageWorldAnswerRequest));
  CMessageWorldAnswerResponse_descriptor_ = file->message_type(22);
  static const int CMessageWorldAnswerResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldAnswerResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldAnswerResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldAnswerResponse, worldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldAnswerResponse, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldAnswerResponse, answer_),
  };
  CMessageWorldAnswerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageWorldAnswerResponse_descriptor_,
      CMessageWorldAnswerResponse::default_instance_,
      CMessageWorldAnswerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldAnswerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldAnswerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageWorldAnswerResponse));
  CMessageWorldAnswerNotify_descriptor_ = file->message_type(23);
  static const int CMessageWorldAnswerNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldAnswerNotify, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldAnswerNotify, srcworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldAnswerNotify, desworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldAnswerNotify, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldAnswerNotify, answer_),
  };
  CMessageWorldAnswerNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageWorldAnswerNotify_descriptor_,
      CMessageWorldAnswerNotify::default_instance_,
      CMessageWorldAnswerNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldAnswerNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldAnswerNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageWorldAnswerNotify));
  CMessageWorldQuestNotify_descriptor_ = file->message_type(24);
  static const int CMessageWorldQuestNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldQuestNotify, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldQuestNotify, worldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldQuestNotify, optype_),
  };
  CMessageWorldQuestNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageWorldQuestNotify_descriptor_,
      CMessageWorldQuestNotify::default_instance_,
      CMessageWorldQuestNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldQuestNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldQuestNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageWorldQuestNotify));
  CMessageWorldResultNotify_descriptor_ = file->message_type(25);
  static const int CMessageWorldResultNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldResultNotify, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldResultNotify, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldResultNotify, srcworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldResultNotify, desworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldResultNotify, optype_),
  };
  CMessageWorldResultNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageWorldResultNotify_descriptor_,
      CMessageWorldResultNotify::default_instance_,
      CMessageWorldResultNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldResultNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldResultNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageWorldResultNotify));
  CWorldStatusData_descriptor_ = file->message_type(26);
  static const int CWorldStatusData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorldStatusData, worldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorldStatusData, friends_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorldStatusData, nation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorldStatusData, kingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorldStatusData, kingname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorldStatusData, corpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorldStatusData, corpsname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorldStatusData, unionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorldStatusData, unionname_),
  };
  CWorldStatusData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWorldStatusData_descriptor_,
      CWorldStatusData::default_instance_,
      CWorldStatusData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorldStatusData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorldStatusData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWorldStatusData));
  CMessageWorldInfoRequest_descriptor_ = file->message_type(27);
  static const int CMessageWorldInfoRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldInfoRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldInfoRequest, worldid_),
  };
  CMessageWorldInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageWorldInfoRequest_descriptor_,
      CMessageWorldInfoRequest::default_instance_,
      CMessageWorldInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageWorldInfoRequest));
  CMessageWorldInfoResponse_descriptor_ = file->message_type(28);
  static const int CMessageWorldInfoResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldInfoResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldInfoResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldInfoResponse, worldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldInfoResponse, worlddata_),
  };
  CMessageWorldInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageWorldInfoResponse_descriptor_,
      CMessageWorldInfoResponse::default_instance_,
      CMessageWorldInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWorldInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageWorldInfoResponse));
  CMessageOfficialChangeNotify_descriptor_ = file->message_type(29);
  static const int CMessageOfficialChangeNotify_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOfficialChangeNotify, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOfficialChangeNotify, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOfficialChangeNotify, officiallevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOfficialChangeNotify, officialorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOfficialChangeNotify, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOfficialChangeNotify, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOfficialChangeNotify, worldid_),
  };
  CMessageOfficialChangeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageOfficialChangeNotify_descriptor_,
      CMessageOfficialChangeNotify::default_instance_,
      CMessageOfficialChangeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOfficialChangeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOfficialChangeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageOfficialChangeNotify));
  CMessagePlayerGSInfoRequest_descriptor_ = file->message_type(30);
  static const int CMessagePlayerGSInfoRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerGSInfoRequest, srccharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerGSInfoRequest, infocharid_),
  };
  CMessagePlayerGSInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePlayerGSInfoRequest_descriptor_,
      CMessagePlayerGSInfoRequest::default_instance_,
      CMessagePlayerGSInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerGSInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerGSInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePlayerGSInfoRequest));
  PlayerGSInfo_descriptor_ = file->message_type(31);
  static const int PlayerGSInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGSInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGSInfo, familyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGSInfo, familyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGSInfo, familyhead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGSInfo, corpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGSInfo, corpsname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGSInfo, corpshead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGSInfo, unionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGSInfo, unionname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGSInfo, unionhead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGSInfo, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGSInfo, officialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGSInfo, kingid_),
  };
  PlayerGSInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerGSInfo_descriptor_,
      PlayerGSInfo::default_instance_,
      PlayerGSInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGSInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGSInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerGSInfo));
  WorldStatusInfo_descriptor_ = file->message_type(32);
  static const int WorldStatusInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusInfo, srcworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusInfo, desworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusInfo, status_),
  };
  WorldStatusInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldStatusInfo_descriptor_,
      WorldStatusInfo::default_instance_,
      WorldStatusInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldStatusInfo));
  GTAndLWInfo_descriptor_ = file->message_type(33);
  static const int GTAndLWInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAndLWInfo, srcworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAndLWInfo, desworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAndLWInfo, targettime_),
  };
  GTAndLWInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GTAndLWInfo_descriptor_,
      GTAndLWInfo::default_instance_,
      GTAndLWInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAndLWInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAndLWInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GTAndLWInfo));
  CMessagePlayerGSInfoResponse_descriptor_ = file->message_type(34);
  static const int CMessagePlayerGSInfoResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerGSInfoResponse, srccharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerGSInfoResponse, playerinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerGSInfoResponse, worldinfo_),
  };
  CMessagePlayerGSInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePlayerGSInfoResponse_descriptor_,
      CMessagePlayerGSInfoResponse::default_instance_,
      CMessagePlayerGSInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerGSInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerGSInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePlayerGSInfoResponse));
  CMessagePlayerGSInfoNotify_descriptor_ = file->message_type(35);
  static const int CMessagePlayerGSInfoNotify_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerGSInfoNotify, srccharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerGSInfoNotify, playerinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerGSInfoNotify, worldinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerGSInfoNotify, warstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerGSInfoNotify, winworld_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerGSInfoNotify, taxrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerGSInfoNotify, gtinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerGSInfoNotify, lwinfo_),
  };
  CMessagePlayerGSInfoNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePlayerGSInfoNotify_descriptor_,
      CMessagePlayerGSInfoNotify::default_instance_,
      CMessagePlayerGSInfoNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerGSInfoNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerGSInfoNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePlayerGSInfoNotify));
  CMessageKingChangeNotify_descriptor_ = file->message_type(36);
  static const int CMessageKingChangeNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKingChangeNotify, worldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKingChangeNotify, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKingChangeNotify, kingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKingChangeNotify, kingname_),
  };
  CMessageKingChangeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageKingChangeNotify_descriptor_,
      CMessageKingChangeNotify::default_instance_,
      CMessageKingChangeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKingChangeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKingChangeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageKingChangeNotify));
  CMessageSummonPlayerNotify_descriptor_ = file->message_type(37);
  static const int CMessageSummonPlayerNotify_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSummonPlayerNotify, srcname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSummonPlayerNotify, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSummonPlayerNotify, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSummonPlayerNotify, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSummonPlayerNotify, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSummonPlayerNotify, tokenid_),
  };
  CMessageSummonPlayerNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageSummonPlayerNotify_descriptor_,
      CMessageSummonPlayerNotify::default_instance_,
      CMessageSummonPlayerNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSummonPlayerNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSummonPlayerNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageSummonPlayerNotify));
  CMessageGetAwardRequest_descriptor_ = file->message_type(38);
  static const int CMessageGetAwardRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetAwardRequest, npcentityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetAwardRequest, awardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetAwardRequest, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetAwardRequest, type_),
  };
  CMessageGetAwardRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetAwardRequest_descriptor_,
      CMessageGetAwardRequest::default_instance_,
      CMessageGetAwardRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetAwardRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetAwardRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetAwardRequest));
  CMessageGetAwardResponse_descriptor_ = file->message_type(39);
  static const int CMessageGetAwardResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetAwardResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetAwardResponse, awardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetAwardResponse, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetAwardResponse, type_),
  };
  CMessageGetAwardResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetAwardResponse_descriptor_,
      CMessageGetAwardResponse::default_instance_,
      CMessageGetAwardResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetAwardResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetAwardResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetAwardResponse));
  CMessageStartCountryRedstoneNotify_descriptor_ = file->message_type(40);
  static const int CMessageStartCountryRedstoneNotify_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStartCountryRedstoneNotify, managername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStartCountryRedstoneNotify, managerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStartCountryRedstoneNotify, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStartCountryRedstoneNotify, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStartCountryRedstoneNotify, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStartCountryRedstoneNotify, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStartCountryRedstoneNotify, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStartCountryRedstoneNotify, redstonetype_),
  };
  CMessageStartCountryRedstoneNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageStartCountryRedstoneNotify_descriptor_,
      CMessageStartCountryRedstoneNotify::default_instance_,
      CMessageStartCountryRedstoneNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStartCountryRedstoneNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStartCountryRedstoneNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageStartCountryRedstoneNotify));
  TeleportData_descriptor_ = file->message_type(41);
  static const int TeleportData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeleportData, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeleportData, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeleportData, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeleportData, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeleportData, tokenid_),
  };
  TeleportData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeleportData_descriptor_,
      TeleportData::default_instance_,
      TeleportData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeleportData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeleportData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeleportData));
  CMessageSubmitWarRequest_descriptor_ = file->message_type(42);
  static const int CMessageSubmitWarRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSubmitWarRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSubmitWarRequest, npcentityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSubmitWarRequest, warserial_),
  };
  CMessageSubmitWarRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageSubmitWarRequest_descriptor_,
      CMessageSubmitWarRequest::default_instance_,
      CMessageSubmitWarRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSubmitWarRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSubmitWarRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageSubmitWarRequest));
  CMessageSubmitWarResponse_descriptor_ = file->message_type(43);
  static const int CMessageSubmitWarResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSubmitWarResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSubmitWarResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSubmitWarResponse, warserial_),
  };
  CMessageSubmitWarResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageSubmitWarResponse_descriptor_,
      CMessageSubmitWarResponse::default_instance_,
      CMessageSubmitWarResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSubmitWarResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSubmitWarResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageSubmitWarResponse));
  CMessageEnterWarRequest_descriptor_ = file->message_type(44);
  static const int CMessageEnterWarRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterWarRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterWarRequest, warid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterWarRequest, npcentityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterWarRequest, warserial_),
  };
  CMessageEnterWarRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageEnterWarRequest_descriptor_,
      CMessageEnterWarRequest::default_instance_,
      CMessageEnterWarRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterWarRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterWarRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageEnterWarRequest));
  CMessageEnterWarResponse_descriptor_ = file->message_type(45);
  static const int CMessageEnterWarResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterWarResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterWarResponse, warid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterWarResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterWarResponse, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterWarResponse, posy_),
  };
  CMessageEnterWarResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageEnterWarResponse_descriptor_,
      CMessageEnterWarResponse::default_instance_,
      CMessageEnterWarResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterWarResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterWarResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageEnterWarResponse));
  CMessageQueryWarCampRequest_descriptor_ = file->message_type(46);
  static const int CMessageQueryWarCampRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryWarCampRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryWarCampRequest, npcentityid_),
  };
  CMessageQueryWarCampRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageQueryWarCampRequest_descriptor_,
      CMessageQueryWarCampRequest::default_instance_,
      CMessageQueryWarCampRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryWarCampRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryWarCampRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageQueryWarCampRequest));
  CMessageQueryWarCampResponse_descriptor_ = file->message_type(47);
  static const int CMessageQueryWarCampResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryWarCampResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryWarCampResponse, worldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryWarCampResponse, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryWarCampResponse, money_),
  };
  CMessageQueryWarCampResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageQueryWarCampResponse_descriptor_,
      CMessageQueryWarCampResponse::default_instance_,
      CMessageQueryWarCampResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryWarCampResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryWarCampResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageQueryWarCampResponse));
  CMessageQueryWarNumRequest_descriptor_ = file->message_type(48);
  static const int CMessageQueryWarNumRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryWarNumRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryWarNumRequest, npcentityid_),
  };
  CMessageQueryWarNumRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageQueryWarNumRequest_descriptor_,
      CMessageQueryWarNumRequest::default_instance_,
      CMessageQueryWarNumRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryWarNumRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryWarNumRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageQueryWarNumRequest));
  WarNumData_descriptor_ = file->message_type(49);
  static const int WarNumData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarNumData, worldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarNumData, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarNumData, currentnum_),
  };
  WarNumData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WarNumData_descriptor_,
      WarNumData::default_instance_,
      WarNumData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarNumData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarNumData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WarNumData));
  CMessageQueryWarNumResponse_descriptor_ = file->message_type(50);
  static const int CMessageQueryWarNumResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryWarNumResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryWarNumResponse, wardata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryWarNumResponse, campid_),
  };
  CMessageQueryWarNumResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageQueryWarNumResponse_descriptor_,
      CMessageQueryWarNumResponse::default_instance_,
      CMessageQueryWarNumResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryWarNumResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryWarNumResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageQueryWarNumResponse));
  WarDetailInfo_descriptor_ = file->message_type(51);
  static const int WarDetailInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarDetailInfo, worldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarDetailInfo, currentnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarDetailInfo, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarDetailInfo, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarDetailInfo, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarDetailInfo, kill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarDetailInfo, campid_),
  };
  WarDetailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WarDetailInfo_descriptor_,
      WarDetailInfo::default_instance_,
      WarDetailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarDetailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarDetailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WarDetailInfo));
  CMessageQueryWarInfoRequest_descriptor_ = file->message_type(52);
  static const int CMessageQueryWarInfoRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryWarInfoRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryWarInfoRequest, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryWarInfoRequest, npcentityid_),
  };
  CMessageQueryWarInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageQueryWarInfoRequest_descriptor_,
      CMessageQueryWarInfoRequest::default_instance_,
      CMessageQueryWarInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryWarInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryWarInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageQueryWarInfoRequest));
  CMessageQueryWarInfoResponse_descriptor_ = file->message_type(53);
  static const int CMessageQueryWarInfoResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryWarInfoResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryWarInfoResponse, campinfo_),
  };
  CMessageQueryWarInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageQueryWarInfoResponse_descriptor_,
      CMessageQueryWarInfoResponse::default_instance_,
      CMessageQueryWarInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryWarInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryWarInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageQueryWarInfoResponse));
  WarRankInfo_descriptor_ = file->message_type(54);
  static const int WarRankInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarRankInfo, worldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarRankInfo, metierid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarRankInfo, kill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarRankInfo, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarRankInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarRankInfo, honor_),
  };
  WarRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WarRankInfo_descriptor_,
      WarRankInfo::default_instance_,
      WarRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WarRankInfo));
  CMessageQueryWarRankRequest_descriptor_ = file->message_type(55);
  static const int CMessageQueryWarRankRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryWarRankRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryWarRankRequest, npcentityid_),
  };
  CMessageQueryWarRankRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageQueryWarRankRequest_descriptor_,
      CMessageQueryWarRankRequest::default_instance_,
      CMessageQueryWarRankRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryWarRankRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryWarRankRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageQueryWarRankRequest));
  CMessageQueryWarRankResponse_descriptor_ = file->message_type(56);
  static const int CMessageQueryWarRankResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryWarRankResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryWarRankResponse, rankinfo_),
  };
  CMessageQueryWarRankResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageQueryWarRankResponse_descriptor_,
      CMessageQueryWarRankResponse::default_instance_,
      CMessageQueryWarRankResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryWarRankResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryWarRankResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageQueryWarRankResponse));
  CMessageWarSourceNotify_descriptor_ = file->message_type(57);
  static const int CMessageWarSourceNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarSourceNotify, worldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarSourceNotify, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarSourceNotify, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarSourceNotify, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarSourceNotify, sourcenum_),
  };
  CMessageWarSourceNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageWarSourceNotify_descriptor_,
      CMessageWarSourceNotify::default_instance_,
      CMessageWarSourceNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarSourceNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarSourceNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageWarSourceNotify));
  CMessageBidCampRequest_descriptor_ = file->message_type(58);
  static const int CMessageBidCampRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBidCampRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBidCampRequest, npcentityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBidCampRequest, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBidCampRequest, campid_),
  };
  CMessageBidCampRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBidCampRequest_descriptor_,
      CMessageBidCampRequest::default_instance_,
      CMessageBidCampRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBidCampRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBidCampRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBidCampRequest));
  CMessageBidCampResponse_descriptor_ = file->message_type(59);
  static const int CMessageBidCampResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBidCampResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBidCampResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBidCampResponse, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBidCampResponse, campid_),
  };
  CMessageBidCampResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBidCampResponse_descriptor_,
      CMessageBidCampResponse::default_instance_,
      CMessageBidCampResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBidCampResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBidCampResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBidCampResponse));
  CMessageCampBidInfoRequest_descriptor_ = file->message_type(60);
  static const int CMessageCampBidInfoRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCampBidInfoRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCampBidInfoRequest, npcentityid_),
  };
  CMessageCampBidInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCampBidInfoRequest_descriptor_,
      CMessageCampBidInfoRequest::default_instance_,
      CMessageCampBidInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCampBidInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCampBidInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCampBidInfoRequest));
  CMessageCampBidInfoResponse_descriptor_ = file->message_type(61);
  static const int CMessageCampBidInfoResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCampBidInfoResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCampBidInfoResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCampBidInfoResponse, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCampBidInfoResponse, campid_),
  };
  CMessageCampBidInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCampBidInfoResponse_descriptor_,
      CMessageCampBidInfoResponse::default_instance_,
      CMessageCampBidInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCampBidInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCampBidInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCampBidInfoResponse));
  CMessageCampResInfoRequest_descriptor_ = file->message_type(62);
  static const int CMessageCampResInfoRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCampResInfoRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCampResInfoRequest, npcentityid_),
  };
  CMessageCampResInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCampResInfoRequest_descriptor_,
      CMessageCampResInfoRequest::default_instance_,
      CMessageCampResInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCampResInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCampResInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCampResInfoRequest));
  CMessageCampResInfoResponse_descriptor_ = file->message_type(63);
  static const int CMessageCampResInfoResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCampResInfoResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCampResInfoResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCampResInfoResponse, worldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCampResInfoResponse, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCampResInfoResponse, money_),
  };
  CMessageCampResInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCampResInfoResponse_descriptor_,
      CMessageCampResInfoResponse::default_instance_,
      CMessageCampResInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCampResInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCampResInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCampResInfoResponse));
  CMessageGetWarAwardRequest_descriptor_ = file->message_type(64);
  static const int CMessageGetWarAwardRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetWarAwardRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetWarAwardRequest, warserial_),
  };
  CMessageGetWarAwardRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetWarAwardRequest_descriptor_,
      CMessageGetWarAwardRequest::default_instance_,
      CMessageGetWarAwardRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetWarAwardRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetWarAwardRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetWarAwardRequest));
  CMessageGetWarAwardResponse_descriptor_ = file->message_type(65);
  static const int CMessageGetWarAwardResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetWarAwardResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetWarAwardResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetWarAwardResponse, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetWarAwardResponse, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetWarAwardResponse, validtime_),
  };
  CMessageGetWarAwardResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetWarAwardResponse_descriptor_,
      CMessageGetWarAwardResponse::default_instance_,
      CMessageGetWarAwardResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetWarAwardResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetWarAwardResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetWarAwardResponse));
  NPCWarInfo_descriptor_ = file->message_type(66);
  static const int NPCWarInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCWarInfo, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCWarInfo, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCWarInfo, worldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCWarInfo, tempid_),
  };
  NPCWarInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NPCWarInfo_descriptor_,
      NPCWarInfo::default_instance_,
      NPCWarInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCWarInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCWarInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NPCWarInfo));
  CMessageWarInfoNotify_descriptor_ = file->message_type(67);
  static const int CMessageWarInfoNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarInfoNotify, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarInfoNotify, warinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarInfoNotify, stoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarInfoNotify, stonex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarInfoNotify, stoney_),
  };
  CMessageWarInfoNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageWarInfoNotify_descriptor_,
      CMessageWarInfoNotify::default_instance_,
      CMessageWarInfoNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarInfoNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarInfoNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageWarInfoNotify));
  CMessageQueryWarAwardRequest_descriptor_ = file->message_type(68);
  static const int CMessageQueryWarAwardRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryWarAwardRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryWarAwardRequest, warserial_),
  };
  CMessageQueryWarAwardRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageQueryWarAwardRequest_descriptor_,
      CMessageQueryWarAwardRequest::default_instance_,
      CMessageQueryWarAwardRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryWarAwardRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryWarAwardRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageQueryWarAwardRequest));
  CMessageQueryWarAwardResponse_descriptor_ = file->message_type(69);
  static const int CMessageQueryWarAwardResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryWarAwardResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryWarAwardResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryWarAwardResponse, winmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryWarAwardResponse, bestmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryWarAwardResponse, winitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryWarAwardResponse, rank_),
  };
  CMessageQueryWarAwardResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageQueryWarAwardResponse_descriptor_,
      CMessageQueryWarAwardResponse::default_instance_,
      CMessageQueryWarAwardResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryWarAwardResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryWarAwardResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageQueryWarAwardResponse));
  CMessageWarHonorNotify_descriptor_ = file->message_type(70);
  static const int CMessageWarHonorNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarHonorNotify, totalhonor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarHonorNotify, freehonor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarHonorNotify, warhonor_),
  };
  CMessageWarHonorNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageWarHonorNotify_descriptor_,
      CMessageWarHonorNotify::default_instance_,
      CMessageWarHonorNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarHonorNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarHonorNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageWarHonorNotify));
  CMessageWarCampNotify_descriptor_ = file->message_type(71);
  static const int CMessageWarCampNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarCampNotify, worldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarCampNotify, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarCampNotify, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarCampNotify, bidcampid_),
  };
  CMessageWarCampNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageWarCampNotify_descriptor_,
      CMessageWarCampNotify::default_instance_,
      CMessageWarCampNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarCampNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarCampNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageWarCampNotify));
  CMessageModifyRateRequest_descriptor_ = file->message_type(72);
  static const int CMessageModifyRateRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifyRateRequest, rateorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifyRateRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifyRateRequest, npcentityid_),
  };
  CMessageModifyRateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageModifyRateRequest_descriptor_,
      CMessageModifyRateRequest::default_instance_,
      CMessageModifyRateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifyRateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifyRateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageModifyRateRequest));
  CMessageModifyRateResponse_descriptor_ = file->message_type(73);
  static const int CMessageModifyRateResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifyRateResponse, rateorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifyRateResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifyRateResponse, charid_),
  };
  CMessageModifyRateResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageModifyRateResponse_descriptor_,
      CMessageModifyRateResponse::default_instance_,
      CMessageModifyRateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifyRateResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifyRateResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageModifyRateResponse));
  CMessageModifyRateNotify_descriptor_ = file->message_type(74);
  static const int CMessageModifyRateNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifyRateNotify, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifyRateNotify, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifyRateNotify, real_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifyRateNotify, winworld_),
  };
  CMessageModifyRateNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageModifyRateNotify_descriptor_,
      CMessageModifyRateNotify::default_instance_,
      CMessageModifyRateNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifyRateNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifyRateNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageModifyRateNotify));
  CMessageGetTaxRequest_descriptor_ = file->message_type(75);
  static const int CMessageGetTaxRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetTaxRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetTaxRequest, query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetTaxRequest, npcentityid_),
  };
  CMessageGetTaxRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetTaxRequest_descriptor_,
      CMessageGetTaxRequest::default_instance_,
      CMessageGetTaxRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetTaxRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetTaxRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetTaxRequest));
  CMessageGetTaxResponse_descriptor_ = file->message_type(76);
  static const int CMessageGetTaxResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetTaxResponse, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetTaxResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetTaxResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetTaxResponse, query_),
  };
  CMessageGetTaxResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetTaxResponse_descriptor_,
      CMessageGetTaxResponse::default_instance_,
      CMessageGetTaxResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetTaxResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetTaxResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetTaxResponse));
  CMessageQueryStoneNotify_descriptor_ = file->message_type(77);
  static const int CMessageQueryStoneNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryStoneNotify, stoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryStoneNotify, stonex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryStoneNotify, stoney_),
  };
  CMessageQueryStoneNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageQueryStoneNotify_descriptor_,
      CMessageQueryStoneNotify::default_instance_,
      CMessageQueryStoneNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryStoneNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryStoneNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageQueryStoneNotify));
  CMessageRefuseSummonRequest_descriptor_ = file->message_type(78);
  static const int CMessageRefuseSummonRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRefuseSummonRequest, asynteletokenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRefuseSummonRequest, srccharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRefuseSummonRequest, descharid_),
  };
  CMessageRefuseSummonRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRefuseSummonRequest_descriptor_,
      CMessageRefuseSummonRequest::default_instance_,
      CMessageRefuseSummonRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRefuseSummonRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRefuseSummonRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRefuseSummonRequest));
  CMessageRefuseSummonNotify_descriptor_ = file->message_type(79);
  static const int CMessageRefuseSummonNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRefuseSummonNotify, srcname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRefuseSummonNotify, desname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRefuseSummonNotify, srccharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRefuseSummonNotify, descharid_),
  };
  CMessageRefuseSummonNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRefuseSummonNotify_descriptor_,
      CMessageRefuseSummonNotify::default_instance_,
      CMessageRefuseSummonNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRefuseSummonNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRefuseSummonNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRefuseSummonNotify));
  PBCampWeakForceInfo_descriptor_ = file->message_type(80);
  static const int PBCampWeakForceInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCampWeakForceInfo, camp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCampWeakForceInfo, level_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCampWeakForceInfo, honer_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCampWeakForceInfo, total_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCampWeakForceInfo, weak_level_),
  };
  PBCampWeakForceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCampWeakForceInfo_descriptor_,
      PBCampWeakForceInfo::default_instance_,
      PBCampWeakForceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCampWeakForceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCampWeakForceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCampWeakForceInfo));
  CMessageCampWeakListRequest_descriptor_ = file->message_type(81);
  static const int CMessageCampWeakListRequest_offsets_[1] = {
  };
  CMessageCampWeakListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCampWeakListRequest_descriptor_,
      CMessageCampWeakListRequest::default_instance_,
      CMessageCampWeakListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCampWeakListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCampWeakListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCampWeakListRequest));
  CMessageCampWeakListResponse_descriptor_ = file->message_type(82);
  static const int CMessageCampWeakListResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCampWeakListResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCampWeakListResponse, camp_info_),
  };
  CMessageCampWeakListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCampWeakListResponse_descriptor_,
      CMessageCampWeakListResponse::default_instance_,
      CMessageCampWeakListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCampWeakListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCampWeakListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCampWeakListResponse));
  CMessageCampGetAwardRequest_descriptor_ = file->message_type(83);
  static const int CMessageCampGetAwardRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCampGetAwardRequest, npc_entity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCampGetAwardRequest, award_type_),
  };
  CMessageCampGetAwardRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCampGetAwardRequest_descriptor_,
      CMessageCampGetAwardRequest::default_instance_,
      CMessageCampGetAwardRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCampGetAwardRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCampGetAwardRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCampGetAwardRequest));
  CMessageCampGetAwardResponse_descriptor_ = file->message_type(84);
  static const int CMessageCampGetAwardResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCampGetAwardResponse, errcode_),
  };
  CMessageCampGetAwardResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCampGetAwardResponse_descriptor_,
      CMessageCampGetAwardResponse::default_instance_,
      CMessageCampGetAwardResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCampGetAwardResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCampGetAwardResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCampGetAwardResponse));
  CMessageAccuseKingRequest_descriptor_ = file->message_type(85);
  static const int CMessageAccuseKingRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAccuseKingRequest, accuseresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAccuseKingRequest, worldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAccuseKingRequest, charid_),
  };
  CMessageAccuseKingRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageAccuseKingRequest_descriptor_,
      CMessageAccuseKingRequest::default_instance_,
      CMessageAccuseKingRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAccuseKingRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAccuseKingRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageAccuseKingRequest));
  CMessageAccuseKingResponse_descriptor_ = file->message_type(86);
  static const int CMessageAccuseKingResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAccuseKingResponse, responseresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAccuseKingResponse, accuseresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAccuseKingResponse, charid_),
  };
  CMessageAccuseKingResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageAccuseKingResponse_descriptor_,
      CMessageAccuseKingResponse::default_instance_,
      CMessageAccuseKingResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAccuseKingResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAccuseKingResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageAccuseKingResponse));
  CMessageAccuseKingNotify_descriptor_ = file->message_type(87);
  static const int CMessageAccuseKingNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAccuseKingNotify, kingname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAccuseKingNotify, charid_),
  };
  CMessageAccuseKingNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageAccuseKingNotify_descriptor_,
      CMessageAccuseKingNotify::default_instance_,
      CMessageAccuseKingNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAccuseKingNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAccuseKingNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageAccuseKingNotify));
  CMessageAccuseStatusNotify_descriptor_ = file->message_type(88);
  static const int CMessageAccuseStatusNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAccuseStatusNotify, kingname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAccuseStatusNotify, yesnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAccuseStatusNotify, nonum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAccuseStatusNotify, abortnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAccuseStatusNotify, charid_),
  };
  CMessageAccuseStatusNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageAccuseStatusNotify_descriptor_,
      CMessageAccuseStatusNotify::default_instance_,
      CMessageAccuseStatusNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAccuseStatusNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAccuseStatusNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageAccuseStatusNotify));
  CMessagePowerInfoRequest_descriptor_ = file->message_type(89);
  static const int CMessagePowerInfoRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePowerInfoRequest, charid_),
  };
  CMessagePowerInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePowerInfoRequest_descriptor_,
      CMessagePowerInfoRequest::default_instance_,
      CMessagePowerInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePowerInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePowerInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePowerInfoRequest));
  PowerInfo_descriptor_ = file->message_type(90);
  static const int PowerInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerInfo, powertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerInfo, world_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerInfo, changetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerInfo, changevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerInfo, time_),
  };
  PowerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PowerInfo_descriptor_,
      PowerInfo::default_instance_,
      PowerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PowerInfo));
  CMessagePowerInfoResponse_descriptor_ = file->message_type(91);
  static const int CMessagePowerInfoResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePowerInfoResponse, powerhistory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePowerInfoResponse, poweradd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePowerInfoResponse, powerdel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePowerInfoResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePowerInfoResponse, charid_),
  };
  CMessagePowerInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePowerInfoResponse_descriptor_,
      CMessagePowerInfoResponse::default_instance_,
      CMessagePowerInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePowerInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePowerInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePowerInfoResponse));
  CMessageMakeGuoTanNotify_descriptor_ = file->message_type(92);
  static const int CMessageMakeGuoTanNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeGuoTanNotify, srcworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeGuoTanNotify, desworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeGuoTanNotify, targettime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeGuoTanNotify, kingname_),
  };
  CMessageMakeGuoTanNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageMakeGuoTanNotify_descriptor_,
      CMessageMakeGuoTanNotify::default_instance_,
      CMessageMakeGuoTanNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeGuoTanNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeGuoTanNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageMakeGuoTanNotify));
  CMessageMakeLuanWuNotify_descriptor_ = file->message_type(93);
  static const int CMessageMakeLuanWuNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeLuanWuNotify, srcworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeLuanWuNotify, desworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeLuanWuNotify, targettime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeLuanWuNotify, kingname_),
  };
  CMessageMakeLuanWuNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageMakeLuanWuNotify_descriptor_,
      CMessageMakeLuanWuNotify::default_instance_,
      CMessageMakeLuanWuNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeLuanWuNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeLuanWuNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageMakeLuanWuNotify));
  CountryMessageID_descriptor_ = file->enum_type(0);
  EM_CampMessageID_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_countrymessage_5fpb_2ehxx);
}

void protobuf_RegisterTypes() {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBOfficialData_descriptor_, &PBOfficialData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBOfficialList_descriptor_, &PBOfficialList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCountryInfoRequest_descriptor_, &CMessageCountryInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCountryInfoResponse_descriptor_, &CMessageCountryInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageJoinCountryRequest_descriptor_, &CMessageJoinCountryRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageJoinCountryResponse_descriptor_, &CMessageJoinCountryResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageJoinCountryNotify_descriptor_, &CMessageJoinCountryNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLeaveCountryRequest_descriptor_, &CMessageLeaveCountryRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLeaveCountryResponse_descriptor_, &CMessageLeaveCountryResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageSetOfficialRequest_descriptor_, &CMessageSetOfficialRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageSetOfficialResponse_descriptor_, &CMessageSetOfficialResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUnSetOfficialRequest_descriptor_, &CMessageUnSetOfficialRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUnSetOfficialResponse_descriptor_, &CMessageUnSetOfficialResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUseFunctionRequest_descriptor_, &CMessageUseFunctionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUseFunctionResponse_descriptor_, &CMessageUseFunctionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageOfficialInfoRequest_descriptor_, &CMessageOfficialInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageOfficialInfoResponse_descriptor_, &CMessageOfficialInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUseTimeRequest_descriptor_, &CMessageUseTimeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUseTimeResponse_descriptor_, &CMessageUseTimeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageWorldQuestRequest_descriptor_, &CMessageWorldQuestRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageWorldQuestResponse_descriptor_, &CMessageWorldQuestResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageWorldAnswerRequest_descriptor_, &CMessageWorldAnswerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageWorldAnswerResponse_descriptor_, &CMessageWorldAnswerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageWorldAnswerNotify_descriptor_, &CMessageWorldAnswerNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageWorldQuestNotify_descriptor_, &CMessageWorldQuestNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageWorldResultNotify_descriptor_, &CMessageWorldResultNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWorldStatusData_descriptor_, &CWorldStatusData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageWorldInfoRequest_descriptor_, &CMessageWorldInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageWorldInfoResponse_descriptor_, &CMessageWorldInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageOfficialChangeNotify_descriptor_, &CMessageOfficialChangeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePlayerGSInfoRequest_descriptor_, &CMessagePlayerGSInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerGSInfo_descriptor_, &PlayerGSInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldStatusInfo_descriptor_, &WorldStatusInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GTAndLWInfo_descriptor_, &GTAndLWInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePlayerGSInfoResponse_descriptor_, &CMessagePlayerGSInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePlayerGSInfoNotify_descriptor_, &CMessagePlayerGSInfoNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageKingChangeNotify_descriptor_, &CMessageKingChangeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageSummonPlayerNotify_descriptor_, &CMessageSummonPlayerNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetAwardRequest_descriptor_, &CMessageGetAwardRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetAwardResponse_descriptor_, &CMessageGetAwardResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageStartCountryRedstoneNotify_descriptor_, &CMessageStartCountryRedstoneNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeleportData_descriptor_, &TeleportData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageSubmitWarRequest_descriptor_, &CMessageSubmitWarRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageSubmitWarResponse_descriptor_, &CMessageSubmitWarResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageEnterWarRequest_descriptor_, &CMessageEnterWarRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageEnterWarResponse_descriptor_, &CMessageEnterWarResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageQueryWarCampRequest_descriptor_, &CMessageQueryWarCampRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageQueryWarCampResponse_descriptor_, &CMessageQueryWarCampResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageQueryWarNumRequest_descriptor_, &CMessageQueryWarNumRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WarNumData_descriptor_, &WarNumData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageQueryWarNumResponse_descriptor_, &CMessageQueryWarNumResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WarDetailInfo_descriptor_, &WarDetailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageQueryWarInfoRequest_descriptor_, &CMessageQueryWarInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageQueryWarInfoResponse_descriptor_, &CMessageQueryWarInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WarRankInfo_descriptor_, &WarRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageQueryWarRankRequest_descriptor_, &CMessageQueryWarRankRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageQueryWarRankResponse_descriptor_, &CMessageQueryWarRankResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageWarSourceNotify_descriptor_, &CMessageWarSourceNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBidCampRequest_descriptor_, &CMessageBidCampRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBidCampResponse_descriptor_, &CMessageBidCampResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCampBidInfoRequest_descriptor_, &CMessageCampBidInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCampBidInfoResponse_descriptor_, &CMessageCampBidInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCampResInfoRequest_descriptor_, &CMessageCampResInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCampResInfoResponse_descriptor_, &CMessageCampResInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetWarAwardRequest_descriptor_, &CMessageGetWarAwardRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetWarAwardResponse_descriptor_, &CMessageGetWarAwardResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NPCWarInfo_descriptor_, &NPCWarInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageWarInfoNotify_descriptor_, &CMessageWarInfoNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageQueryWarAwardRequest_descriptor_, &CMessageQueryWarAwardRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageQueryWarAwardResponse_descriptor_, &CMessageQueryWarAwardResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageWarHonorNotify_descriptor_, &CMessageWarHonorNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageWarCampNotify_descriptor_, &CMessageWarCampNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageModifyRateRequest_descriptor_, &CMessageModifyRateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageModifyRateResponse_descriptor_, &CMessageModifyRateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageModifyRateNotify_descriptor_, &CMessageModifyRateNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetTaxRequest_descriptor_, &CMessageGetTaxRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetTaxResponse_descriptor_, &CMessageGetTaxResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageQueryStoneNotify_descriptor_, &CMessageQueryStoneNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRefuseSummonRequest_descriptor_, &CMessageRefuseSummonRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRefuseSummonNotify_descriptor_, &CMessageRefuseSummonNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCampWeakForceInfo_descriptor_, &PBCampWeakForceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCampWeakListRequest_descriptor_, &CMessageCampWeakListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCampWeakListResponse_descriptor_, &CMessageCampWeakListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCampGetAwardRequest_descriptor_, &CMessageCampGetAwardRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCampGetAwardResponse_descriptor_, &CMessageCampGetAwardResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageAccuseKingRequest_descriptor_, &CMessageAccuseKingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageAccuseKingResponse_descriptor_, &CMessageAccuseKingResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageAccuseKingNotify_descriptor_, &CMessageAccuseKingNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageAccuseStatusNotify_descriptor_, &CMessageAccuseStatusNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePowerInfoRequest_descriptor_, &CMessagePowerInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PowerInfo_descriptor_, &PowerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePowerInfoResponse_descriptor_, &CMessagePowerInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageMakeGuoTanNotify_descriptor_, &CMessageMakeGuoTanNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageMakeLuanWuNotify_descriptor_, &CMessageMakeLuanWuNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_countrymessage_5fpb_2ehxx() {
  delete PBOfficialData::default_instance_;
  delete PBOfficialData_reflection_;
  delete PBOfficialList::default_instance_;
  delete PBOfficialList_reflection_;
  delete CMessageCountryInfoRequest::default_instance_;
  delete CMessageCountryInfoRequest_reflection_;
  delete CMessageCountryInfoResponse::default_instance_;
  delete CMessageCountryInfoResponse_reflection_;
  delete CMessageJoinCountryRequest::default_instance_;
  delete CMessageJoinCountryRequest_reflection_;
  delete CMessageJoinCountryResponse::default_instance_;
  delete CMessageJoinCountryResponse_reflection_;
  delete CMessageJoinCountryNotify::default_instance_;
  delete CMessageJoinCountryNotify_reflection_;
  delete CMessageLeaveCountryRequest::default_instance_;
  delete CMessageLeaveCountryRequest_reflection_;
  delete CMessageLeaveCountryResponse::default_instance_;
  delete CMessageLeaveCountryResponse_reflection_;
  delete CMessageSetOfficialRequest::default_instance_;
  delete CMessageSetOfficialRequest_reflection_;
  delete CMessageSetOfficialResponse::default_instance_;
  delete CMessageSetOfficialResponse_reflection_;
  delete CMessageUnSetOfficialRequest::default_instance_;
  delete CMessageUnSetOfficialRequest_reflection_;
  delete CMessageUnSetOfficialResponse::default_instance_;
  delete CMessageUnSetOfficialResponse_reflection_;
  delete CMessageUseFunctionRequest::default_instance_;
  delete CMessageUseFunctionRequest_reflection_;
  delete CMessageUseFunctionResponse::default_instance_;
  delete CMessageUseFunctionResponse_reflection_;
  delete CMessageOfficialInfoRequest::default_instance_;
  delete CMessageOfficialInfoRequest_reflection_;
  delete CMessageOfficialInfoResponse::default_instance_;
  delete CMessageOfficialInfoResponse_reflection_;
  delete CMessageUseTimeRequest::default_instance_;
  delete CMessageUseTimeRequest_reflection_;
  delete CMessageUseTimeResponse::default_instance_;
  delete CMessageUseTimeResponse_reflection_;
  delete CMessageWorldQuestRequest::default_instance_;
  delete CMessageWorldQuestRequest_reflection_;
  delete CMessageWorldQuestResponse::default_instance_;
  delete CMessageWorldQuestResponse_reflection_;
  delete CMessageWorldAnswerRequest::default_instance_;
  delete CMessageWorldAnswerRequest_reflection_;
  delete CMessageWorldAnswerResponse::default_instance_;
  delete CMessageWorldAnswerResponse_reflection_;
  delete CMessageWorldAnswerNotify::default_instance_;
  delete CMessageWorldAnswerNotify_reflection_;
  delete CMessageWorldQuestNotify::default_instance_;
  delete CMessageWorldQuestNotify_reflection_;
  delete CMessageWorldResultNotify::default_instance_;
  delete CMessageWorldResultNotify_reflection_;
  delete CWorldStatusData::default_instance_;
  delete CWorldStatusData_reflection_;
  delete CMessageWorldInfoRequest::default_instance_;
  delete CMessageWorldInfoRequest_reflection_;
  delete CMessageWorldInfoResponse::default_instance_;
  delete CMessageWorldInfoResponse_reflection_;
  delete CMessageOfficialChangeNotify::default_instance_;
  delete CMessageOfficialChangeNotify_reflection_;
  delete CMessagePlayerGSInfoRequest::default_instance_;
  delete CMessagePlayerGSInfoRequest_reflection_;
  delete PlayerGSInfo::default_instance_;
  delete PlayerGSInfo_reflection_;
  delete WorldStatusInfo::default_instance_;
  delete WorldStatusInfo_reflection_;
  delete GTAndLWInfo::default_instance_;
  delete GTAndLWInfo_reflection_;
  delete CMessagePlayerGSInfoResponse::default_instance_;
  delete CMessagePlayerGSInfoResponse_reflection_;
  delete CMessagePlayerGSInfoNotify::default_instance_;
  delete CMessagePlayerGSInfoNotify_reflection_;
  delete CMessageKingChangeNotify::default_instance_;
  delete CMessageKingChangeNotify_reflection_;
  delete CMessageSummonPlayerNotify::default_instance_;
  delete CMessageSummonPlayerNotify_reflection_;
  delete CMessageGetAwardRequest::default_instance_;
  delete CMessageGetAwardRequest_reflection_;
  delete CMessageGetAwardResponse::default_instance_;
  delete CMessageGetAwardResponse_reflection_;
  delete CMessageStartCountryRedstoneNotify::default_instance_;
  delete CMessageStartCountryRedstoneNotify_reflection_;
  delete TeleportData::default_instance_;
  delete TeleportData_reflection_;
  delete CMessageSubmitWarRequest::default_instance_;
  delete CMessageSubmitWarRequest_reflection_;
  delete CMessageSubmitWarResponse::default_instance_;
  delete CMessageSubmitWarResponse_reflection_;
  delete CMessageEnterWarRequest::default_instance_;
  delete CMessageEnterWarRequest_reflection_;
  delete CMessageEnterWarResponse::default_instance_;
  delete CMessageEnterWarResponse_reflection_;
  delete CMessageQueryWarCampRequest::default_instance_;
  delete CMessageQueryWarCampRequest_reflection_;
  delete CMessageQueryWarCampResponse::default_instance_;
  delete CMessageQueryWarCampResponse_reflection_;
  delete CMessageQueryWarNumRequest::default_instance_;
  delete CMessageQueryWarNumRequest_reflection_;
  delete WarNumData::default_instance_;
  delete WarNumData_reflection_;
  delete CMessageQueryWarNumResponse::default_instance_;
  delete CMessageQueryWarNumResponse_reflection_;
  delete WarDetailInfo::default_instance_;
  delete WarDetailInfo_reflection_;
  delete CMessageQueryWarInfoRequest::default_instance_;
  delete CMessageQueryWarInfoRequest_reflection_;
  delete CMessageQueryWarInfoResponse::default_instance_;
  delete CMessageQueryWarInfoResponse_reflection_;
  delete WarRankInfo::default_instance_;
  delete WarRankInfo_reflection_;
  delete CMessageQueryWarRankRequest::default_instance_;
  delete CMessageQueryWarRankRequest_reflection_;
  delete CMessageQueryWarRankResponse::default_instance_;
  delete CMessageQueryWarRankResponse_reflection_;
  delete CMessageWarSourceNotify::default_instance_;
  delete CMessageWarSourceNotify_reflection_;
  delete CMessageBidCampRequest::default_instance_;
  delete CMessageBidCampRequest_reflection_;
  delete CMessageBidCampResponse::default_instance_;
  delete CMessageBidCampResponse_reflection_;
  delete CMessageCampBidInfoRequest::default_instance_;
  delete CMessageCampBidInfoRequest_reflection_;
  delete CMessageCampBidInfoResponse::default_instance_;
  delete CMessageCampBidInfoResponse_reflection_;
  delete CMessageCampResInfoRequest::default_instance_;
  delete CMessageCampResInfoRequest_reflection_;
  delete CMessageCampResInfoResponse::default_instance_;
  delete CMessageCampResInfoResponse_reflection_;
  delete CMessageGetWarAwardRequest::default_instance_;
  delete CMessageGetWarAwardRequest_reflection_;
  delete CMessageGetWarAwardResponse::default_instance_;
  delete CMessageGetWarAwardResponse_reflection_;
  delete NPCWarInfo::default_instance_;
  delete NPCWarInfo_reflection_;
  delete CMessageWarInfoNotify::default_instance_;
  delete CMessageWarInfoNotify_reflection_;
  delete CMessageQueryWarAwardRequest::default_instance_;
  delete CMessageQueryWarAwardRequest_reflection_;
  delete CMessageQueryWarAwardResponse::default_instance_;
  delete CMessageQueryWarAwardResponse_reflection_;
  delete CMessageWarHonorNotify::default_instance_;
  delete CMessageWarHonorNotify_reflection_;
  delete CMessageWarCampNotify::default_instance_;
  delete CMessageWarCampNotify_reflection_;
  delete CMessageModifyRateRequest::default_instance_;
  delete CMessageModifyRateRequest_reflection_;
  delete CMessageModifyRateResponse::default_instance_;
  delete CMessageModifyRateResponse_reflection_;
  delete CMessageModifyRateNotify::default_instance_;
  delete CMessageModifyRateNotify_reflection_;
  delete CMessageGetTaxRequest::default_instance_;
  delete CMessageGetTaxRequest_reflection_;
  delete CMessageGetTaxResponse::default_instance_;
  delete CMessageGetTaxResponse_reflection_;
  delete CMessageQueryStoneNotify::default_instance_;
  delete CMessageQueryStoneNotify_reflection_;
  delete CMessageRefuseSummonRequest::default_instance_;
  delete CMessageRefuseSummonRequest_reflection_;
  delete CMessageRefuseSummonNotify::default_instance_;
  delete CMessageRefuseSummonNotify_reflection_;
  delete PBCampWeakForceInfo::default_instance_;
  delete PBCampWeakForceInfo_reflection_;
  delete CMessageCampWeakListRequest::default_instance_;
  delete CMessageCampWeakListRequest_reflection_;
  delete CMessageCampWeakListResponse::default_instance_;
  delete CMessageCampWeakListResponse_reflection_;
  delete CMessageCampGetAwardRequest::default_instance_;
  delete CMessageCampGetAwardRequest_reflection_;
  delete CMessageCampGetAwardResponse::default_instance_;
  delete CMessageCampGetAwardResponse_reflection_;
  delete CMessageAccuseKingRequest::default_instance_;
  delete CMessageAccuseKingRequest_reflection_;
  delete CMessageAccuseKingResponse::default_instance_;
  delete CMessageAccuseKingResponse_reflection_;
  delete CMessageAccuseKingNotify::default_instance_;
  delete CMessageAccuseKingNotify_reflection_;
  delete CMessageAccuseStatusNotify::default_instance_;
  delete CMessageAccuseStatusNotify_reflection_;
  delete CMessagePowerInfoRequest::default_instance_;
  delete CMessagePowerInfoRequest_reflection_;
  delete PowerInfo::default_instance_;
  delete PowerInfo_reflection_;
  delete CMessagePowerInfoResponse::default_instance_;
  delete CMessagePowerInfoResponse_reflection_;
  delete CMessageMakeGuoTanNotify::default_instance_;
  delete CMessageMakeGuoTanNotify_reflection_;
  delete CMessageMakeLuanWuNotify::default_instance_;
  delete CMessageMakeLuanWuNotify_reflection_;
}

void protobuf_AddDesc_countrymessage_5fpb_2ehxx() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_corpsinfo_5fpb_2ehxx();
  #ifndef _NO_PROTOBUF_STR_
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025countrymessage_pb.hxx\032\020corpsinfo_pb.hx"
    "x\"\216\001\n\016PBOfficialData\022\016\n\006CharID\030\001 \001(\r\022\020\n\010"
    "CharName\030\002 \001(\t\022\025\n\rOfficialLevel\030\003 \001(\r\022\025\n"
    "\rOfficialOrder\030\004 \001(\r\022\020\n\010UseTimes\030\005 \003(\r\022\014"
    "\n\004UseX\030\006 \003(\r\022\014\n\004UseY\030\007 \003(\r\"7\n\016PBOfficial"
    "List\022%\n\014OfficialData\030\001 \003(\0132\017.PBOfficialD"
    "ata\"b\n\032CMessageCountryInfoRequest\022\016\n\006Cha"
    "rID\030\001 \001(\r\022\021\n\tCountryID\030\002 \001(\r\022\020\n\010NeedFull"
    "\030\003 \001(\r\022\017\n\007WorldID\030\004 \001(\r\"\232\003\n\033CMessageCoun"
    "tryInfoResponse\022\016\n\006CharID\030\001 \001(\r\022\021\n\tCount"
    "ryID\030\002 \001(\r\022\016\n\006KingID\030\003 \001(\r\022\020\n\010KingName\030\004"
    " \001(\t\022\017\n\007CorpsID\030\005 \001(\r\022\021\n\tCorpsName\030\006 \001(\t"
    "\022\017\n\007UnionID\030\007 \001(\r\022\021\n\tUnionName\030\010 \001(\t\022\021\n\t"
    "PeopleNum\030\t \001(\r\022\021\n\tKingPower\030\n \001(\r\022\013\n\003Ma"
    "p\030\013 \001(\r\022\014\n\004Gold\030\014 \001(\r\022\016\n\006Wizard\030\r \003(\r\022\026\n"
    "\016ConstructValue\030\016 \003(\r\022\026\n\016ConstructLevel\030"
    "\017 \003(\r\022\016\n\006Notice\030\020 \001(\t\022&\n\nBattleInfo\030\021 \001("
    "\0132\022.PBCorpsBattleList\022\020\n\010NeedFull\030\022 \001(\r\022"
    "\017\n\007WorldID\030\023 \001(\r\022\022\n\nWorldLevel\030\024 \001(\r\"T\n\032"
    "CMessageJoinCountryRequest\022\016\n\006CharID\030\001 \001"
    "(\r\022\021\n\tCountryID\030\002 \001(\r\022\023\n\013NPCEntityID\030\003 \001"
    "(\r\"P\n\033CMessageJoinCountryResponse\022\016\n\006Cha"
    "rID\030\001 \001(\r\022\016\n\006Result\030\002 \001(\r\022\021\n\tCountryID\030\003"
    " \001(\r\"N\n\031CMessageJoinCountryNotify\022\016\n\006Cha"
    "rID\030\001 \001(\r\022\021\n\tCountryID\030\002 \001(\r\022\016\n\006KingID\030\003"
    " \001(\r\"U\n\033CMessageLeaveCountryRequest\022\016\n\006C"
    "harID\030\001 \001(\r\022\021\n\tCountryID\030\002 \001(\r\022\023\n\013NPCEnt"
    "ityID\030\003 \001(\r\"Q\n\034CMessageLeaveCountryRespo"
    "nse\022\016\n\006CharID\030\001 \001(\r\022\016\n\006Result\030\002 \001(\r\022\021\n\tC"
    "ountryID\030\003 \001(\r\"\177\n\032CMessageSetOfficialReq"
    "uest\022\016\n\006CharID\030\001 \001(\r\022\020\n\010CharName\030\002 \001(\t\022\025"
    "\n\rOfficialLevel\030\003 \001(\r\022\025\n\rOfficialOrder\030\004"
    " \001(\r\022\021\n\tNormalSet\030\005 \001(\r\"\242\001\n\033CMessageSetO"
    "fficialResponse\022\016\n\006CharID\030\001 \001(\r\022\016\n\006Resul"
    "t\030\002 \001(\r\022\020\n\010CharName\030\003 \001(\t\022\025\n\rOfficialLev"
    "el\030\004 \001(\r\022\025\n\rOfficialOrder\030\005 \001(\r\022\021\n\tNorma"
    "lSet\030\006 \001(\r\022\020\n\010TargetID\030\007 \001(\r\"\\\n\034CMessage"
    "UnSetOfficialRequest\022\016\n\006CharID\030\001 \001(\r\022\025\n\r"
    "OfficialLevel\030\002 \001(\r\022\025\n\rOfficialOrder\030\003 \001"
    "(\r\"\177\n\035CMessageUnSetOfficialResponse\022\016\n\006C"
    "harID\030\001 \001(\r\022\016\n\006Result\030\002 \001(\r\022\020\n\010CharName\030"
    "\003 \001(\t\022\025\n\rOfficialLevel\030\004 \001(\r\022\025\n\rOfficial"
    "Order\030\005 \001(\r\"\241\001\n\032CMessageUseFunctionReque"
    "st\022\016\n\006CharID\030\001 \001(\r\022\024\n\014FunctionType\030\002 \001(\r"
    "\022\025\n\rFunctionOrder\030\003 \001(\r\022\022\n\nTargetName\030\004 "
    "\001(\t\022\037\n\010Teleport\030\005 \001(\0132\r.TeleportData\022\021\n\t"
    "IntParam1\030\006 \001(\r\"~\n\033CMessageUseFunctionRe"
    "sponse\022\016\n\006CharID\030\001 \001(\r\022\016\n\006Result\030\002 \001(\r\022\024"
    "\n\014FunctionType\030\003 \001(\r\022\025\n\rFunctionOrder\030\004 "
    "\001(\r\022\022\n\nTargetName\030\005 \001(\t\"-\n\033CMessageOffic"
    "ialInfoRequest\022\016\n\006CharID\030\001 \001(\r\"e\n\034CMessa"
    "geOfficialInfoResponse\022\016\n\006CharID\030\001 \001(\r\022\016"
    "\n\006Result\030\002 \001(\r\022%\n\014OfficialList\030\003 \001(\0132\017.P"
    "BOfficialList\"(\n\026CMessageUseTimeRequest\022"
    "\016\n\006CharID\030\001 \001(\r\"`\n\027CMessageUseTimeRespon"
    "se\022\016\n\006CharID\030\001 \001(\r\022\016\n\006Result\030\002 \001(\r\022%\n\014Of"
    "ficialData\030\003 \001(\0132\017.PBOfficialData\"a\n\031CMe"
    "ssageWorldQuestRequest\022\016\n\006CharID\030\001 \001(\r\022\017"
    "\n\007WorldID\030\002 \001(\r\022\016\n\006OpType\030\003 \001(\r\022\023\n\013NPCEn"
    "tityID\030\004 \001(\r\"]\n\032CMessageWorldQuestRespon"
    "se\022\016\n\006CharID\030\001 \001(\r\022\016\n\006Result\030\002 \001(\r\022\017\n\007Wo"
    "rldID\030\003 \001(\r\022\016\n\006OpType\030\004 \001(\r\"]\n\032CMessageW"
    "orldAnswerRequest\022\016\n\006CharID\030\001 \001(\r\022\017\n\007Wor"
    "ldID\030\002 \001(\r\022\016\n\006OpType\030\003 \001(\r\022\016\n\006Answer\030\004 \001"
    "(\r\"n\n\033CMessageWorldAnswerResponse\022\016\n\006Cha"
    "rID\030\001 \001(\r\022\016\n\006Result\030\002 \001(\r\022\017\n\007WorldID\030\003 \001"
    "(\r\022\016\n\006OpType\030\004 \001(\r\022\016\n\006Answer\030\005 \001(\r\"s\n\031CM"
    "essageWorldAnswerNotify\022\016\n\006CharID\030\001 \001(\r\022"
    "\022\n\nSrcWorldID\030\002 \001(\r\022\022\n\nDesWorldID\030\003 \001(\r\022"
    "\016\n\006OpType\030\004 \001(\r\022\016\n\006Answer\030\005 \001(\r\"K\n\030CMess"
    "ageWorldQuestNotify\022\016\n\006CharID\030\001 \001(\r\022\017\n\007W"
    "orldID\030\002 \001(\r\022\016\n\006OpType\030\003 \001(\r\"s\n\031CMessage"
    "WorldResultNotify\022\016\n\006CharID\030\001 \001(\r\022\016\n\006Res"
    "ult\030\002 \001(\r\022\022\n\nSrcWorldID\030\003 \001(\r\022\022\n\nDesWorl"
    "dID\030\004 \001(\r\022\016\n\006OpType\030\005 \001(\r\"\256\001\n\020CWorldStat"
    "usData\022\017\n\007WorldID\030\001 \001(\r\022\017\n\007Friends\030\002 \001(\r"
    "\022\016\n\006Nation\030\003 \001(\r\022\016\n\006KingID\030\004 \001(\r\022\020\n\010King"
    "Name\030\005 \001(\t\022\017\n\007CorpsID\030\006 \001(\r\022\021\n\tCorpsName"
    "\030\007 \001(\t\022\017\n\007UnionID\030\010 \001(\r\022\021\n\tUnionName\030\t \001"
    "(\t\";\n\030CMessageWorldInfoRequest\022\016\n\006CharID"
    "\030\001 \001(\r\022\017\n\007WorldID\030\002 \001(\r\"r\n\031CMessageWorld"
    "InfoResponse\022\016\n\006CharID\030\001 \001(\r\022\016\n\006Result\030\002"
    " \001(\r\022\017\n\007WorldID\030\003 \001(\r\022$\n\tWorldData\030\004 \003(\013"
    "2\021.CWorldStatusData\"\240\001\n\034CMessageOfficial"
    "ChangeNotify\022\016\n\006CharID\030\001 \001(\r\022\020\n\010CharName"
    "\030\002 \001(\t\022\025\n\rOfficialLevel\030\003 \001(\r\022\025\n\rOfficia"
    "lOrder\030\004 \001(\r\022\021\n\tCountryID\030\005 \001(\r\022\014\n\004Type\030"
    "\006 \001(\r\022\017\n\007WorldID\030\007 \001(\r\"D\n\033CMessagePlayer"
    "GSInfoRequest\022\021\n\tSrcCharID\030\001 \003(\r\022\022\n\nInfo"
    "CharID\030\002 \003(\r\"\375\001\n\014PlayerGSInfo\022\016\n\006CharID\030"
    "\001 \001(\r\022\020\n\010FamilyID\030\002 \001(\r\022\022\n\nFamilyName\030\003 "
    "\001(\t\022\022\n\nFamilyHead\030\004 \001(\r\022\017\n\007CorpsID\030\005 \001(\r"
    "\022\021\n\tCorpsName\030\006 \001(\t\022\021\n\tCorpsHead\030\007 \001(\r\022\017"
    "\n\007UnionID\030\010 \001(\r\022\021\n\tUnionName\030\t \001(\t\022\021\n\tUn"
    "ionHead\030\n \001(\r\022\021\n\tCountryID\030\013 \001(\r\022\022\n\nOffi"
    "cialID\030\014 \001(\r\022\016\n\006KingID\030\r \001(\r\"I\n\017WorldSta"
    "tusInfo\022\022\n\nSrcWorldID\030\001 \001(\r\022\022\n\nDesWorldI"
    "D\030\002 \001(\r\022\016\n\006Status\030\003 \001(\r\"I\n\013GTAndLWInfo\022\022"
    "\n\nSrcWorldID\030\001 \001(\r\022\022\n\nDesWorldID\030\002 \001(\r\022\022"
    "\n\nTargetTime\030\003 \001(\r\"y\n\034CMessagePlayerGSIn"
    "foResponse\022\021\n\tSrcCharID\030\001 \001(\r\022!\n\nPlayerI"
    "nfo\030\002 \003(\0132\r.PlayerGSInfo\022#\n\tWorldInfo\030\003 "
    "\003(\0132\020.WorldStatusInfo\"\350\001\n\032CMessagePlayer"
    "GSInfoNotify\022\021\n\tSrcCharID\030\001 \001(\r\022!\n\nPlaye"
    "rInfo\030\002 \003(\0132\r.PlayerGSInfo\022#\n\tWorldInfo\030"
    "\003 \003(\0132\020.WorldStatusInfo\022\020\n\010WarState\030\004 \001("
    "\r\022\020\n\010WinWorld\030\005 \001(\r\022\017\n\007TaxRate\030\006 \001(\r\022\034\n\006"
    "GTInfo\030\007 \003(\0132\014.GTAndLWInfo\022\034\n\006LWInfo\030\010 \003"
    "(\0132\014.GTAndLWInfo\"`\n\030CMessageKingChangeNo"
    "tify\022\017\n\007WorldID\030\001 \001(\r\022\021\n\tCountryID\030\002 \001(\r"
    "\022\016\n\006KingID\030\003 \001(\r\022\020\n\010KingName\030\004 \001(\t\"y\n\032CM"
    "essageSummonPlayerNotify\022\017\n\007SrcName\030\001 \001("
    "\t\022\016\n\006LineID\030\002 \001(\r\022\r\n\005MapID\030\003 \001(\r\022\014\n\004PosX"
    "\030\004 \001(\r\022\014\n\004PosY\030\005 \001(\r\022\017\n\007TokenID\030\006 \001(\r\"]\n"
    "\027CMessageGetAwardRequest\022\023\n\013NPCEntityID\030"
    "\001 \001(\r\022\017\n\007AwardID\030\002 \001(\r\022\016\n\006TempID\030\003 \001(\r\022\014"
    "\n\004Type\030\004 \001(\r\"Y\n\030CMessageGetAwardResponse"
    "\022\016\n\006Result\030\001 \001(\r\022\017\n\007AwardID\030\002 \001(\r\022\016\n\006Tem"
    "pID\030\003 \001(\r\022\014\n\004Type\030\004 \001(\r\"\260\001\n\"CMessageStar"
    "tCountryRedstoneNotify\022\023\n\013ManagerName\030\001 "
    "\001(\t\022\021\n\tManagerID\030\002 \001(\r\022\016\n\006LineID\030\003 \001(\r\022\r"
    "\n\005MapID\030\004 \001(\r\022\014\n\004PosX\030\005 \001(\r\022\014\n\004PosY\030\006 \001("
    "\r\022\021\n\tCountryID\030\007 \001(\r\022\024\n\014RedstoneType\030\010 \001"
    "(\r\"Z\n\014TeleportData\022\016\n\006LineID\030\001 \001(\r\022\r\n\005Ma"
    "pID\030\002 \001(\r\022\014\n\004PosX\030\003 \001(\r\022\014\n\004PosY\030\004 \001(\r\022\017\n"
    "\007TokenID\030\005 \001(\r\"R\n\030CMessageSubmitWarReque"
    "st\022\016\n\006CharID\030\001 \001(\r\022\023\n\013NPCEntityID\030\002 \001(\r\022"
    "\021\n\tWarSerial\030\003 \001(\r\"N\n\031CMessageSubmitWarR"
    "esponse\022\016\n\006CharID\030\001 \001(\r\022\016\n\006Result\030\002 \001(\r\022"
    "\021\n\tWarSerial\030\003 \001(\r\"`\n\027CMessageEnterWarRe"
    "quest\022\016\n\006CharID\030\001 \001(\r\022\r\n\005WarID\030\002 \001(\r\022\023\n\013"
    "NPCEntityID\030\003 \001(\r\022\021\n\tWarSerial\030\004 \001(\r\"e\n\030"
    "CMessageEnterWarResponse\022\016\n\006CharID\030\001 \001(\r"
    "\022\r\n\005WarID\030\002 \001(\r\022\016\n\006Result\030\003 \001(\r\022\014\n\004PosX\030"
    "\004 \001(\r\022\014\n\004PosY\030\005 \001(\r\"B\n\033CMessageQueryWarC"
    "ampRequest\022\016\n\006CharID\030\001 \001(\r\022\023\n\013NPCEntityI"
    "D\030\002 \001(\r\"^\n\034CMessageQueryWarCampResponse\022"
    "\016\n\006CharID\030\001 \001(\r\022\017\n\007WorldID\030\002 \003(\r\022\016\n\006Camp"
    "ID\030\003 \003(\r\022\r\n\005Money\030\004 \003(\r\"A\n\032CMessageQuery"
    "WarNumRequest\022\016\n\006CharID\030\001 \001(\r\022\023\n\013NPCEnti"
    "tyID\030\002 \001(\r\"A\n\nWarNumData\022\017\n\007WorldID\030\001 \001("
    "\r\022\016\n\006CampID\030\002 \001(\r\022\022\n\nCurrentNum\030\003 \001(\r\"[\n"
    "\033CMessageQueryWarNumResponse\022\016\n\006CharID\030\001"
    " \001(\r\022\034\n\007WarData\030\002 \003(\0132\013.WarNumData\022\016\n\006Ca"
    "mpID\030\003 \001(\r\"\201\001\n\rWarDetailInfo\022\017\n\007WorldID\030"
    "\001 \001(\r\022\022\n\nCurrentNum\030\002 \001(\r\022\r\n\005Power\030\003 \001(\r"
    "\022\014\n\004Flag\030\004 \001(\r\022\020\n\010Resource\030\005 \001(\r\022\014\n\004Kill"
    "\030\006 \001(\r\022\016\n\006CampID\030\007 \001(\r\"R\n\033CMessageQueryW"
    "arInfoRequest\022\016\n\006CharID\030\001 \001(\r\022\016\n\006CampID\030"
    "\002 \003(\r\022\023\n\013NPCEntityID\030\003 \001(\r\"P\n\034CMessageQu"
    "eryWarInfoResponse\022\016\n\006CharID\030\001 \001(\r\022 \n\010Ca"
    "mpInfo\030\002 \003(\0132\016.WarDetailInfo\"m\n\013WarRankI"
    "nfo\022\017\n\007WorldID\030\001 \001(\r\022\020\n\010MetierID\030\002 \001(\r\022\014"
    "\n\004Kill\030\003 \001(\r\022\020\n\010CharName\030\004 \001(\t\022\014\n\004Rank\030\005"
    " \001(\r\022\r\n\005Honor\030\006 \001(\r\"B\n\033CMessageQueryWarR"
    "ankRequest\022\016\n\006CharID\030\001 \001(\r\022\023\n\013NPCEntityI"
    "D\030\002 \001(\r\"N\n\034CMessageQueryWarRankResponse\022"
    "\016\n\006CharID\030\001 \001(\r\022\036\n\010RankInfo\030\002 \003(\0132\014.WarR"
    "ankInfo\"n\n\027CMessageWarSourceNotify\022\017\n\007Wo"
    "rldID\030\001 \001(\r\022\r\n\005MapID\030\002 \001(\r\022\020\n\010Resource\030\003"
    " \001(\r\022\016\n\006CharID\030\004 \001(\r\022\021\n\tSourceNum\030\005 \001(\r\""
    "\\\n\026CMessageBidCampRequest\022\016\n\006CharID\030\001 \001("
    "\r\022\023\n\013NPCEntityID\030\002 \001(\r\022\r\n\005Money\030\003 \001(\r\022\016\n"
    "\006CampID\030\004 \001(\r\"X\n\027CMessageBidCampResponse"
    "\022\016\n\006CharID\030\001 \001(\r\022\016\n\006Result\030\002 \001(\r\022\r\n\005Mone"
    "y\030\003 \001(\r\022\016\n\006CampID\030\004 \001(\r\"A\n\032CMessageCampB"
    "idInfoRequest\022\016\n\006CharID\030\001 \001(\r\022\023\n\013NPCEnti"
    "tyID\030\002 \001(\r\"\\\n\033CMessageCampBidInfoRespons"
    "e\022\016\n\006CharID\030\001 \001(\r\022\016\n\006Result\030\002 \001(\r\022\r\n\005Mon"
    "ey\030\003 \001(\r\022\016\n\006CampID\030\004 \001(\r\"A\n\032CMessageCamp"
    "ResInfoRequest\022\016\n\006CharID\030\001 \001(\r\022\023\n\013NPCEnt"
    "ityID\030\002 \001(\r\"m\n\033CMessageCampResInfoRespon"
    "se\022\016\n\006CharID\030\001 \001(\r\022\016\n\006Result\030\002 \001(\r\022\017\n\007Wo"
    "rldID\030\003 \003(\r\022\016\n\006CampID\030\004 \003(\r\022\r\n\005Money\030\005 \003"
    "(\r\"?\n\032CMessageGetWarAwardRequest\022\016\n\006Char"
    "ID\030\001 \001(\r\022\021\n\tWarSerial\030\002 \001(\r\"m\n\033CMessageG"
    "etWarAwardResponse\022\016\n\006CharID\030\001 \001(\r\022\016\n\006Re"
    "sult\030\002 \001(\r\022\r\n\005Money\030\003 \001(\r\022\014\n\004Rank\030\004 \001(\r\022"
    "\021\n\tValidTime\030\005 \001(\r\"I\n\nNPCWarInfo\022\014\n\004PosX"
    "\030\001 \001(\r\022\014\n\004PosY\030\002 \001(\r\022\017\n\007WorldID\030\003 \001(\r\022\016\n"
    "\006TempID\030\004 \001(\r\"u\n\025CMessageWarInfoNotify\022\r"
    "\n\005MapID\030\001 \001(\r\022\034\n\007WarInfo\030\002 \003(\0132\013.NPCWarI"
    "nfo\022\017\n\007StoneID\030\003 \001(\r\022\016\n\006StoneX\030\004 \001(\r\022\016\n\006"
    "StoneY\030\005 \001(\r\"A\n\034CMessageQueryWarAwardReq"
    "uest\022\016\n\006CharID\030\001 \001(\r\022\021\n\tWarSerial\030\002 \001(\r\""
    "\203\001\n\035CMessageQueryWarAwardResponse\022\016\n\006Cha"
    "rID\030\001 \001(\r\022\016\n\006Result\030\002 \001(\r\022\020\n\010WinMoney\030\003 "
    "\001(\r\022\021\n\tBestMoney\030\004 \001(\r\022\017\n\007WinItem\030\005 \003(\r\022"
    "\014\n\004Rank\030\006 \001(\r\"Q\n\026CMessageWarHonorNotify\022"
    "\022\n\nTotalHonor\030\001 \001(\r\022\021\n\tFreeHonor\030\002 \001(\r\022\020"
    "\n\010WarHonor\030\003 \001(\r\"Z\n\025CMessageWarCampNotif"
    "y\022\017\n\007WorldID\030\001 \003(\r\022\016\n\006CampID\030\002 \003(\r\022\r\n\005Mo"
    "ney\030\003 \003(\r\022\021\n\tBidCampID\030\004 \003(\r\"S\n\031CMessage"
    "ModifyRateRequest\022\021\n\tRateOrder\030\001 \001(\r\022\016\n\006"
    "CharID\030\002 \001(\r\022\023\n\013NPCEntityID\030\003 \001(\r\"O\n\032CMe"
    "ssageModifyRateResponse\022\021\n\tRateOrder\030\001 \001"
    "(\r\022\016\n\006Result\030\002 \001(\r\022\016\n\006CharID\030\003 \001(\r\"V\n\030CM"
    "essageModifyRateNotify\022\014\n\004Rate\030\001 \001(\r\022\014\n\004"
    "Name\030\002 \001(\t\022\014\n\004Real\030\003 \001(\r\022\020\n\010WinWorld\030\004 \001"
    "(\r\"K\n\025CMessageGetTaxRequest\022\016\n\006CharID\030\001 "
    "\001(\r\022\r\n\005Query\030\002 \001(\r\022\023\n\013NPCEntityID\030\003 \001(\r\""
    "V\n\026CMessageGetTaxResponse\022\r\n\005Money\030\001 \001(\r"
    "\022\016\n\006Result\030\002 \001(\r\022\016\n\006CharID\030\003 \001(\r\022\r\n\005Quer"
    "y\030\004 \001(\r\"K\n\030CMessageQueryStoneNotify\022\017\n\007S"
    "toneID\030\001 \001(\r\022\016\n\006StoneX\030\002 \001(\r\022\016\n\006StoneY\030\003"
    " \001(\r\"\\\n\033CMessageRefuseSummonRequest\022\027\n\017A"
    "synTeleTokenID\030\001 \001(\r\022\021\n\tSrcCharID\030\002 \001(\r\022"
    "\021\n\tDesCharID\030\003 \001(\r\"d\n\032CMessageRefuseSumm"
    "onNotify\022\017\n\007SrcName\030\001 \001(\t\022\017\n\007DesName\030\002 \001"
    "(\t\022\021\n\tSrcCharID\030\003 \001(\r\022\021\n\tDesCharID\030\004 \001(\r"
    "\"y\n\023PBCampWeakForceInfo\022\017\n\007camp_id\030\001 \001(\r"
    "\022\023\n\013level_score\030\002 \001(\r\022\023\n\013honer_score\030\003 \001"
    "(\r\022\023\n\013total_score\030\004 \001(\r\022\022\n\nweak_level\030\005 "
    "\001(\r\"\035\n\033CMessageCampWeakListRequest\"X\n\034CM"
    "essageCampWeakListResponse\022\017\n\007errcode\030\001 "
    "\001(\r\022\'\n\tcamp_info\030\002 \003(\0132\024.PBCampWeakForce"
    "Info\"H\n\033CMessageCampGetAwardRequest\022\025\n\rn"
    "pc_entity_id\030\001 \001(\r\022\022\n\naward_type\030\002 \001(\r\"/"
    "\n\034CMessageCampGetAwardResponse\022\017\n\007errcod"
    "e\030\001 \001(\r\"R\n\031CMessageAccuseKingRequest\022\024\n\014"
    "AccuseResult\030\001 \001(\r\022\017\n\007WorldID\030\002 \001(\r\022\016\n\006C"
    "harID\030\003 \001(\r\"Z\n\032CMessageAccuseKingRespons"
    "e\022\026\n\016ResponseResult\030\001 \001(\r\022\024\n\014AccuseResul"
    "t\030\002 \001(\r\022\016\n\006CharID\030\003 \001(\r\"<\n\030CMessageAccus"
    "eKingNotify\022\020\n\010KingName\030\001 \001(\t\022\016\n\006CharID\030"
    "\002 \001(\r\"o\n\032CMessageAccuseStatusNotify\022\020\n\010K"
    "ingName\030\001 \001(\t\022\016\n\006YesNum\030\002 \001(\r\022\r\n\005NoNum\030\003"
    " \001(\r\022\020\n\010AbortNum\030\004 \001(\r\022\016\n\006CharID\030\005 \001(\r\"*"
    "\n\030CMessagePowerInfoRequest\022\016\n\006CharID\030\001 \001"
    "(\r\"d\n\tPowerInfo\022\021\n\tPowerType\030\001 \001(\r\022\r\n\005Wo"
    "rld\030\002 \001(\r\022\022\n\nChangeType\030\003 \001(\r\022\023\n\013ChangeV"
    "alue\030\004 \001(\r\022\014\n\004Time\030\005 \001(\r\"\201\001\n\031CMessagePow"
    "erInfoResponse\022 \n\014PowerHistory\030\001 \003(\0132\n.P"
    "owerInfo\022\020\n\010PowerAdd\030\002 \001(\r\022\020\n\010PowerDel\030\003"
    " \001(\r\022\016\n\006Result\030\004 \001(\r\022\016\n\006CharID\030\005 \001(\r\"h\n\030"
    "CMessageMakeGuoTanNotify\022\022\n\nSrcWorldID\030\001"
    " \001(\r\022\022\n\nDesWorldID\030\002 \001(\r\022\022\n\nTargetTime\030\003"
    " \001(\r\022\020\n\010KingName\030\004 \001(\t\"h\n\030CMessageMakeLu"
    "anWuNotify\022\022\n\nSrcWorldID\030\001 \001(\r\022\022\n\nDesWor"
    "ldID\030\002 \001(\r\022\022\n\nTargetTime\030\003 \001(\r\022\020\n\010KingNa"
    "me\030\004 \001(\t*\247\024\n\020CountryMessageID\022 \n\032ID_C2S_"
    "REQUEST_COUNTRYINFO\020\201\250\001\022!\n\033ID_S2C_RESPON"
    "SE_COUNTRYINFO\020\202\250\001\022 \n\032ID_C2S_REQUEST_JOI"
    "NCOUNTRY\020\203\250\001\022!\n\033ID_S2C_RESPONSE_JOINCOUN"
    "TRY\020\204\250\001\022!\n\033ID_C2S_REQUEST_LEAVECOUNTRY\020\205"
    "\250\001\022\"\n\034ID_S2C_RESPONSE_LEAVECOUNTRY\020\206\250\001\022 "
    "\n\032ID_C2S_REQUEST_SETOFFICIAL\020\207\250\001\022!\n\033ID_S"
    "2C_RESPONSE_SETOFFICIAL\020\210\250\001\022\"\n\034ID_C2S_RE"
    "QUEST_UNSETOFFICIAL\020\211\250\001\022#\n\035ID_S2C_RESPON"
    "SE_UNSETOFFICIAL\020\212\250\001\022 \n\032ID_C2S_REQUEST_U"
    "SEFUNCTION\020\213\250\001\022!\n\033ID_S2C_RESPONSE_USEFUN"
    "CTION\020\214\250\001\022!\n\033ID_C2S_REQUEST_OFFICIALINFO"
    "\020\215\250\001\022\"\n\034ID_S2C_RESPONSE_OFFICIALINFO\020\216\250\001"
    "\022\034\n\026ID_C2S_REQUEST_USETIME\020\217\250\001\022\035\n\027ID_S2C"
    "_RESPONSE_USETIME\020\220\250\001\022\037\n\031ID_C2S_REQUEST_"
    "WORLDQUEST\020\221\250\001\022 \n\032ID_S2C_RESPONSE_WORLDQ"
    "UEST\020\222\250\001\022\036\n\030ID_S2C_NOTIFY_WORLDQUEST\020\223\250\001"
    "\022 \n\032ID_C2S_REQUEST_WORLDANSWER\020\224\250\001\022!\n\033ID"
    "_S2C_RESPONSE_WORLDANSWER\020\225\250\001\022\037\n\031ID_S2C_"
    "NOTIFY_WORLDRESULT\020\226\250\001\022\036\n\030ID_C2S_REQUEST"
    "_WORLDINFO\020\227\250\001\022\037\n\031ID_S2C_RESPONSE_WORLDI"
    "NFO\020\230\250\001\022\037\n\031ID_S2C_NOTIFY_JOINCOUNTRY\020\231\250\001"
    "\022\"\n\034ID_S2C_NOTIFY_OFFICIALCHANGE\020\232\250\001\022\037\n\031"
    "ID_S2C_NOTIFY_WORLDANSWER\020\233\250\001\022!\n\033ID_C2S_"
    "REQUEST_PLAYERGSINFO\020\234\250\001\022\"\n\034ID_S2C_RESPO"
    "NSE_PLAYERGSINFO\020\235\250\001\022 \n\032ID_S2C_NOTIFY_PL"
    "AYERGSINFO\020\236\250\001\022\036\n\030ID_S2C_NOTIFY_KINGCHAN"
    "GE\020\240\250\001\022\035\n\027ID_C2S_REQUEST_GETAWARD\020\241\250\001\022\036\n"
    "\030ID_S2C_RESPONSE_GETAWARD\020\242\250\001\022(\n\"ID_S2C_"
    "NOTIFY_STARTCOUNTRYREDSTONE\020\243\250\001\022 \n\032ID_S2"
    "C_NOTIFY_SUMMONPLAYER\020\244\250\001\022\036\n\030ID_C2S_REQU"
    "EST_SUBMITWAR\020\245\250\001\022\037\n\031ID_S2C_RESPONSE_SUB"
    "MITWAR\020\246\250\001\022\035\n\027ID_C2S_REQUEST_ENTERWAR\020\247\250"
    "\001\022\036\n\030ID_S2C_RESPONSE_ENTERWAR\020\250\250\001\022!\n\033ID_"
    "C2S_REQUEST_QUERYWARCAMP\020\251\250\001\022\"\n\034ID_S2C_R"
    "ESPONSE_QUERYWARCAMP\020\252\250\001\022 \n\032ID_C2S_REQUE"
    "ST_QUERYWARNUM\020\253\250\001\022!\n\033ID_S2C_RESPONSE_QU"
    "ERYWARNUM\020\254\250\001\022!\n\033ID_C2S_REQUEST_QUERYWAR"
    "INFO\020\255\250\001\022\"\n\034ID_S2C_RESPONSE_QUERYWARINFO"
    "\020\256\250\001\022\036\n\030ID_C2S_REQUEST_QUERYRANK\020\260\250\001\022\037\n\031"
    "ID_S2C_RESPONSE_QUERYRANK\020\261\250\001\022\035\n\027ID_S2C_"
    "NOTIFY_WARSOURCE\020\262\250\001\022\034\n\026ID_C2S_REQUEST_B"
    "IDCAMP\020\263\250\001\022\035\n\027ID_S2C_RESPONSE_BIDCAMP\020\264\250"
    "\001\022 \n\032ID_C2S_REQUEST_CAMPBIDINFO\020\265\250\001\022!\n\033I"
    "D_S2C_RESPONSE_CAMPBIDINFO\020\266\250\001\022 \n\032ID_C2S"
    "_REQUEST_CAMPRESINFO\020\267\250\001\022!\n\033ID_S2C_RESPO"
    "NSE_CAMPRESINFO\020\270\250\001\022 \n\032ID_C2S_REQUEST_GE"
    "TWARAWARD\020\271\250\001\022!\n\033ID_S2C_RESPONSE_GETWARA"
    "WARD\020\272\250\001\022\033\n\025ID_S2C_NOTIFY_WARINFO\020\273\250\001\022\"\n"
    "\034ID_C2S_REQUEST_QUERYWARAWARD\020\274\250\001\022#\n\035ID_"
    "S2C_RESPONSE_QUERYWARAWARD\020\275\250\001\022\034\n\026ID_S2C"
    "_NOTIFY_WARHONOR\020\276\250\001\022\033\n\025ID_S2C_NOTIFY_WA"
    "RCAMP\020\300\250\001\022\037\n\031ID_C2S_REQUEST_MODIFYRATE\020\301"
    "\250\001\022 \n\032ID_S2C_RESPONSE_MODIFYRATE\020\302\250\001\022\036\n\030"
    "ID_S2C_NOTIFY_MODIFYRATE\020\303\250\001\022\033\n\025ID_C2S_R"
    "EQUEST_GETTAX\020\304\250\001\022\034\n\026ID_S2C_RESPONSE_GET"
    "TAX\020\305\250\001\022\036\n\030ID_S2C_NOTIFY_QUERYSTONE\020\306\250\001\022"
    "!\n\033ID_C2S_REQUEST_REFUSESUMMON\020\307\250\001\022 \n\032ID"
    "_S2C_NOTIFY_REFUSESUMMON\020\310\250\001\022\037\n\031ID_C2S_R"
    "EQUEST_ACCUSEKING\020\311\250\001\022 \n\032ID_S2C_RESPONSE"
    "_ACCUSEKING\020\312\250\001\022\036\n\030ID_S2C_NOTIFY_ACCUSEK"
    "ING\020\313\250\001\022 \n\032ID_S2C_NOTIFY_ACCUSESTATUS\020\314\250"
    "\001\022\036\n\030ID_C2S_REQUEST_POWERINFO\020\315\250\001\022\037\n\031ID_"
    "S2C_RESPONSE_POWERINFO\020\316\250\001\022\036\n\030ID_S2C_NOT"
    "IFY_MAKEGUOTAN\020\320\250\001\022\036\n\030ID_S2C_NOTIFY_MAKE"
    "LUANWU\020\321\250\001*\353\001\n\020EM_CampMessageID\022!\n\033ID_C2"
    "S_CAMPWEAKLIST_REQUEST\020\201\252\001\022\"\n\034ID_S2C_CAM"
    "PWEAKLIST_RESPONSE\020\202\252\001\022#\n\035ID_C2S_CAMPAWA"
    "RDQUERY_REQUEST\020\203\252\001\022$\n\036ID_S2C_CAMPAWARDQ"
    "UERY_RESPONSE\020\204\252\001\022!\n\033ID_C2S_CAMPGETAWARD"
    "_REQUEST\020\205\252\001\022\"\n\034ID_S2C_CAMPGETAWARD_RESP"
    "ONSE\020\206\252\001B\002H\001", 12452);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "countrymessage_pb.hxx", &protobuf_RegisterTypes);
  #endif
  PBOfficialData::default_instance_ = new PBOfficialData();
  PBOfficialList::default_instance_ = new PBOfficialList();
  CMessageCountryInfoRequest::default_instance_ = new CMessageCountryInfoRequest();
  CMessageCountryInfoResponse::default_instance_ = new CMessageCountryInfoResponse();
  CMessageJoinCountryRequest::default_instance_ = new CMessageJoinCountryRequest();
  CMessageJoinCountryResponse::default_instance_ = new CMessageJoinCountryResponse();
  CMessageJoinCountryNotify::default_instance_ = new CMessageJoinCountryNotify();
  CMessageLeaveCountryRequest::default_instance_ = new CMessageLeaveCountryRequest();
  CMessageLeaveCountryResponse::default_instance_ = new CMessageLeaveCountryResponse();
  CMessageSetOfficialRequest::default_instance_ = new CMessageSetOfficialRequest();
  CMessageSetOfficialResponse::default_instance_ = new CMessageSetOfficialResponse();
  CMessageUnSetOfficialRequest::default_instance_ = new CMessageUnSetOfficialRequest();
  CMessageUnSetOfficialResponse::default_instance_ = new CMessageUnSetOfficialResponse();
  CMessageUseFunctionRequest::default_instance_ = new CMessageUseFunctionRequest();
  CMessageUseFunctionResponse::default_instance_ = new CMessageUseFunctionResponse();
  CMessageOfficialInfoRequest::default_instance_ = new CMessageOfficialInfoRequest();
  CMessageOfficialInfoResponse::default_instance_ = new CMessageOfficialInfoResponse();
  CMessageUseTimeRequest::default_instance_ = new CMessageUseTimeRequest();
  CMessageUseTimeResponse::default_instance_ = new CMessageUseTimeResponse();
  CMessageWorldQuestRequest::default_instance_ = new CMessageWorldQuestRequest();
  CMessageWorldQuestResponse::default_instance_ = new CMessageWorldQuestResponse();
  CMessageWorldAnswerRequest::default_instance_ = new CMessageWorldAnswerRequest();
  CMessageWorldAnswerResponse::default_instance_ = new CMessageWorldAnswerResponse();
  CMessageWorldAnswerNotify::default_instance_ = new CMessageWorldAnswerNotify();
  CMessageWorldQuestNotify::default_instance_ = new CMessageWorldQuestNotify();
  CMessageWorldResultNotify::default_instance_ = new CMessageWorldResultNotify();
  CWorldStatusData::default_instance_ = new CWorldStatusData();
  CMessageWorldInfoRequest::default_instance_ = new CMessageWorldInfoRequest();
  CMessageWorldInfoResponse::default_instance_ = new CMessageWorldInfoResponse();
  CMessageOfficialChangeNotify::default_instance_ = new CMessageOfficialChangeNotify();
  CMessagePlayerGSInfoRequest::default_instance_ = new CMessagePlayerGSInfoRequest();
  PlayerGSInfo::default_instance_ = new PlayerGSInfo();
  WorldStatusInfo::default_instance_ = new WorldStatusInfo();
  GTAndLWInfo::default_instance_ = new GTAndLWInfo();
  CMessagePlayerGSInfoResponse::default_instance_ = new CMessagePlayerGSInfoResponse();
  CMessagePlayerGSInfoNotify::default_instance_ = new CMessagePlayerGSInfoNotify();
  CMessageKingChangeNotify::default_instance_ = new CMessageKingChangeNotify();
  CMessageSummonPlayerNotify::default_instance_ = new CMessageSummonPlayerNotify();
  CMessageGetAwardRequest::default_instance_ = new CMessageGetAwardRequest();
  CMessageGetAwardResponse::default_instance_ = new CMessageGetAwardResponse();
  CMessageStartCountryRedstoneNotify::default_instance_ = new CMessageStartCountryRedstoneNotify();
  TeleportData::default_instance_ = new TeleportData();
  CMessageSubmitWarRequest::default_instance_ = new CMessageSubmitWarRequest();
  CMessageSubmitWarResponse::default_instance_ = new CMessageSubmitWarResponse();
  CMessageEnterWarRequest::default_instance_ = new CMessageEnterWarRequest();
  CMessageEnterWarResponse::default_instance_ = new CMessageEnterWarResponse();
  CMessageQueryWarCampRequest::default_instance_ = new CMessageQueryWarCampRequest();
  CMessageQueryWarCampResponse::default_instance_ = new CMessageQueryWarCampResponse();
  CMessageQueryWarNumRequest::default_instance_ = new CMessageQueryWarNumRequest();
  WarNumData::default_instance_ = new WarNumData();
  CMessageQueryWarNumResponse::default_instance_ = new CMessageQueryWarNumResponse();
  WarDetailInfo::default_instance_ = new WarDetailInfo();
  CMessageQueryWarInfoRequest::default_instance_ = new CMessageQueryWarInfoRequest();
  CMessageQueryWarInfoResponse::default_instance_ = new CMessageQueryWarInfoResponse();
  WarRankInfo::default_instance_ = new WarRankInfo();
  CMessageQueryWarRankRequest::default_instance_ = new CMessageQueryWarRankRequest();
  CMessageQueryWarRankResponse::default_instance_ = new CMessageQueryWarRankResponse();
  CMessageWarSourceNotify::default_instance_ = new CMessageWarSourceNotify();
  CMessageBidCampRequest::default_instance_ = new CMessageBidCampRequest();
  CMessageBidCampResponse::default_instance_ = new CMessageBidCampResponse();
  CMessageCampBidInfoRequest::default_instance_ = new CMessageCampBidInfoRequest();
  CMessageCampBidInfoResponse::default_instance_ = new CMessageCampBidInfoResponse();
  CMessageCampResInfoRequest::default_instance_ = new CMessageCampResInfoRequest();
  CMessageCampResInfoResponse::default_instance_ = new CMessageCampResInfoResponse();
  CMessageGetWarAwardRequest::default_instance_ = new CMessageGetWarAwardRequest();
  CMessageGetWarAwardResponse::default_instance_ = new CMessageGetWarAwardResponse();
  NPCWarInfo::default_instance_ = new NPCWarInfo();
  CMessageWarInfoNotify::default_instance_ = new CMessageWarInfoNotify();
  CMessageQueryWarAwardRequest::default_instance_ = new CMessageQueryWarAwardRequest();
  CMessageQueryWarAwardResponse::default_instance_ = new CMessageQueryWarAwardResponse();
  CMessageWarHonorNotify::default_instance_ = new CMessageWarHonorNotify();
  CMessageWarCampNotify::default_instance_ = new CMessageWarCampNotify();
  CMessageModifyRateRequest::default_instance_ = new CMessageModifyRateRequest();
  CMessageModifyRateResponse::default_instance_ = new CMessageModifyRateResponse();
  CMessageModifyRateNotify::default_instance_ = new CMessageModifyRateNotify();
  CMessageGetTaxRequest::default_instance_ = new CMessageGetTaxRequest();
  CMessageGetTaxResponse::default_instance_ = new CMessageGetTaxResponse();
  CMessageQueryStoneNotify::default_instance_ = new CMessageQueryStoneNotify();
  CMessageRefuseSummonRequest::default_instance_ = new CMessageRefuseSummonRequest();
  CMessageRefuseSummonNotify::default_instance_ = new CMessageRefuseSummonNotify();
  PBCampWeakForceInfo::default_instance_ = new PBCampWeakForceInfo();
  CMessageCampWeakListRequest::default_instance_ = new CMessageCampWeakListRequest();
  CMessageCampWeakListResponse::default_instance_ = new CMessageCampWeakListResponse();
  CMessageCampGetAwardRequest::default_instance_ = new CMessageCampGetAwardRequest();
  CMessageCampGetAwardResponse::default_instance_ = new CMessageCampGetAwardResponse();
  CMessageAccuseKingRequest::default_instance_ = new CMessageAccuseKingRequest();
  CMessageAccuseKingResponse::default_instance_ = new CMessageAccuseKingResponse();
  CMessageAccuseKingNotify::default_instance_ = new CMessageAccuseKingNotify();
  CMessageAccuseStatusNotify::default_instance_ = new CMessageAccuseStatusNotify();
  CMessagePowerInfoRequest::default_instance_ = new CMessagePowerInfoRequest();
  PowerInfo::default_instance_ = new PowerInfo();
  CMessagePowerInfoResponse::default_instance_ = new CMessagePowerInfoResponse();
  CMessageMakeGuoTanNotify::default_instance_ = new CMessageMakeGuoTanNotify();
  CMessageMakeLuanWuNotify::default_instance_ = new CMessageMakeLuanWuNotify();
  PBOfficialData::default_instance_->InitAsDefaultInstance();
  PBOfficialList::default_instance_->InitAsDefaultInstance();
  CMessageCountryInfoRequest::default_instance_->InitAsDefaultInstance();
  CMessageCountryInfoResponse::default_instance_->InitAsDefaultInstance();
  CMessageJoinCountryRequest::default_instance_->InitAsDefaultInstance();
  CMessageJoinCountryResponse::default_instance_->InitAsDefaultInstance();
  CMessageJoinCountryNotify::default_instance_->InitAsDefaultInstance();
  CMessageLeaveCountryRequest::default_instance_->InitAsDefaultInstance();
  CMessageLeaveCountryResponse::default_instance_->InitAsDefaultInstance();
  CMessageSetOfficialRequest::default_instance_->InitAsDefaultInstance();
  CMessageSetOfficialResponse::default_instance_->InitAsDefaultInstance();
  CMessageUnSetOfficialRequest::default_instance_->InitAsDefaultInstance();
  CMessageUnSetOfficialResponse::default_instance_->InitAsDefaultInstance();
  CMessageUseFunctionRequest::default_instance_->InitAsDefaultInstance();
  CMessageUseFunctionResponse::default_instance_->InitAsDefaultInstance();
  CMessageOfficialInfoRequest::default_instance_->InitAsDefaultInstance();
  CMessageOfficialInfoResponse::default_instance_->InitAsDefaultInstance();
  CMessageUseTimeRequest::default_instance_->InitAsDefaultInstance();
  CMessageUseTimeResponse::default_instance_->InitAsDefaultInstance();
  CMessageWorldQuestRequest::default_instance_->InitAsDefaultInstance();
  CMessageWorldQuestResponse::default_instance_->InitAsDefaultInstance();
  CMessageWorldAnswerRequest::default_instance_->InitAsDefaultInstance();
  CMessageWorldAnswerResponse::default_instance_->InitAsDefaultInstance();
  CMessageWorldAnswerNotify::default_instance_->InitAsDefaultInstance();
  CMessageWorldQuestNotify::default_instance_->InitAsDefaultInstance();
  CMessageWorldResultNotify::default_instance_->InitAsDefaultInstance();
  CWorldStatusData::default_instance_->InitAsDefaultInstance();
  CMessageWorldInfoRequest::default_instance_->InitAsDefaultInstance();
  CMessageWorldInfoResponse::default_instance_->InitAsDefaultInstance();
  CMessageOfficialChangeNotify::default_instance_->InitAsDefaultInstance();
  CMessagePlayerGSInfoRequest::default_instance_->InitAsDefaultInstance();
  PlayerGSInfo::default_instance_->InitAsDefaultInstance();
  WorldStatusInfo::default_instance_->InitAsDefaultInstance();
  GTAndLWInfo::default_instance_->InitAsDefaultInstance();
  CMessagePlayerGSInfoResponse::default_instance_->InitAsDefaultInstance();
  CMessagePlayerGSInfoNotify::default_instance_->InitAsDefaultInstance();
  CMessageKingChangeNotify::default_instance_->InitAsDefaultInstance();
  CMessageSummonPlayerNotify::default_instance_->InitAsDefaultInstance();
  CMessageGetAwardRequest::default_instance_->InitAsDefaultInstance();
  CMessageGetAwardResponse::default_instance_->InitAsDefaultInstance();
  CMessageStartCountryRedstoneNotify::default_instance_->InitAsDefaultInstance();
  TeleportData::default_instance_->InitAsDefaultInstance();
  CMessageSubmitWarRequest::default_instance_->InitAsDefaultInstance();
  CMessageSubmitWarResponse::default_instance_->InitAsDefaultInstance();
  CMessageEnterWarRequest::default_instance_->InitAsDefaultInstance();
  CMessageEnterWarResponse::default_instance_->InitAsDefaultInstance();
  CMessageQueryWarCampRequest::default_instance_->InitAsDefaultInstance();
  CMessageQueryWarCampResponse::default_instance_->InitAsDefaultInstance();
  CMessageQueryWarNumRequest::default_instance_->InitAsDefaultInstance();
  WarNumData::default_instance_->InitAsDefaultInstance();
  CMessageQueryWarNumResponse::default_instance_->InitAsDefaultInstance();
  WarDetailInfo::default_instance_->InitAsDefaultInstance();
  CMessageQueryWarInfoRequest::default_instance_->InitAsDefaultInstance();
  CMessageQueryWarInfoResponse::default_instance_->InitAsDefaultInstance();
  WarRankInfo::default_instance_->InitAsDefaultInstance();
  CMessageQueryWarRankRequest::default_instance_->InitAsDefaultInstance();
  CMessageQueryWarRankResponse::default_instance_->InitAsDefaultInstance();
  CMessageWarSourceNotify::default_instance_->InitAsDefaultInstance();
  CMessageBidCampRequest::default_instance_->InitAsDefaultInstance();
  CMessageBidCampResponse::default_instance_->InitAsDefaultInstance();
  CMessageCampBidInfoRequest::default_instance_->InitAsDefaultInstance();
  CMessageCampBidInfoResponse::default_instance_->InitAsDefaultInstance();
  CMessageCampResInfoRequest::default_instance_->InitAsDefaultInstance();
  CMessageCampResInfoResponse::default_instance_->InitAsDefaultInstance();
  CMessageGetWarAwardRequest::default_instance_->InitAsDefaultInstance();
  CMessageGetWarAwardResponse::default_instance_->InitAsDefaultInstance();
  NPCWarInfo::default_instance_->InitAsDefaultInstance();
  CMessageWarInfoNotify::default_instance_->InitAsDefaultInstance();
  CMessageQueryWarAwardRequest::default_instance_->InitAsDefaultInstance();
  CMessageQueryWarAwardResponse::default_instance_->InitAsDefaultInstance();
  CMessageWarHonorNotify::default_instance_->InitAsDefaultInstance();
  CMessageWarCampNotify::default_instance_->InitAsDefaultInstance();
  CMessageModifyRateRequest::default_instance_->InitAsDefaultInstance();
  CMessageModifyRateResponse::default_instance_->InitAsDefaultInstance();
  CMessageModifyRateNotify::default_instance_->InitAsDefaultInstance();
  CMessageGetTaxRequest::default_instance_->InitAsDefaultInstance();
  CMessageGetTaxResponse::default_instance_->InitAsDefaultInstance();
  CMessageQueryStoneNotify::default_instance_->InitAsDefaultInstance();
  CMessageRefuseSummonRequest::default_instance_->InitAsDefaultInstance();
  CMessageRefuseSummonNotify::default_instance_->InitAsDefaultInstance();
  PBCampWeakForceInfo::default_instance_->InitAsDefaultInstance();
  CMessageCampWeakListRequest::default_instance_->InitAsDefaultInstance();
  CMessageCampWeakListResponse::default_instance_->InitAsDefaultInstance();
  CMessageCampGetAwardRequest::default_instance_->InitAsDefaultInstance();
  CMessageCampGetAwardResponse::default_instance_->InitAsDefaultInstance();
  CMessageAccuseKingRequest::default_instance_->InitAsDefaultInstance();
  CMessageAccuseKingResponse::default_instance_->InitAsDefaultInstance();
  CMessageAccuseKingNotify::default_instance_->InitAsDefaultInstance();
  CMessageAccuseStatusNotify::default_instance_->InitAsDefaultInstance();
  CMessagePowerInfoRequest::default_instance_->InitAsDefaultInstance();
  PowerInfo::default_instance_->InitAsDefaultInstance();
  CMessagePowerInfoResponse::default_instance_->InitAsDefaultInstance();
  CMessageMakeGuoTanNotify::default_instance_->InitAsDefaultInstance();
  CMessageMakeLuanWuNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_countrymessage_5fpb_2ehxx);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_countrymessage_5fpb_2ehxx {
  StaticDescriptorInitializer_countrymessage_5fpb_2ehxx() {
    protobuf_AddDesc_countrymessage_5fpb_2ehxx();
  }
} static_descriptor_initializer_countrymessage_5fpb_2ehxx_;

const ::google::protobuf::EnumDescriptor* CountryMessageID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CountryMessageID_descriptor_;
}
bool CountryMessageID_IsValid(int value) {
  switch(value) {
    case 21505:
    case 21506:
    case 21507:
    case 21508:
    case 21509:
    case 21510:
    case 21511:
    case 21512:
    case 21513:
    case 21514:
    case 21515:
    case 21516:
    case 21517:
    case 21518:
    case 21519:
    case 21520:
    case 21521:
    case 21522:
    case 21523:
    case 21524:
    case 21525:
    case 21526:
    case 21527:
    case 21528:
    case 21529:
    case 21530:
    case 21531:
    case 21532:
    case 21533:
    case 21534:
    case 21536:
    case 21537:
    case 21538:
    case 21539:
    case 21540:
    case 21541:
    case 21542:
    case 21543:
    case 21544:
    case 21545:
    case 21546:
    case 21547:
    case 21548:
    case 21549:
    case 21550:
    case 21552:
    case 21553:
    case 21554:
    case 21555:
    case 21556:
    case 21557:
    case 21558:
    case 21559:
    case 21560:
    case 21561:
    case 21562:
    case 21563:
    case 21564:
    case 21565:
    case 21566:
    case 21568:
    case 21569:
    case 21570:
    case 21571:
    case 21572:
    case 21573:
    case 21574:
    case 21575:
    case 21576:
    case 21577:
    case 21578:
    case 21579:
    case 21580:
    case 21581:
    case 21582:
    case 21584:
    case 21585:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EM_CampMessageID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EM_CampMessageID_descriptor_;
}
bool EM_CampMessageID_IsValid(int value) {
  switch(value) {
    case 21761:
    case 21762:
    case 21763:
    case 21764:
    case 21765:
    case 21766:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::std::string PBOfficialData::_default_charname_;
#ifndef _MSC_VER
const int PBOfficialData::kCharIDFieldNumber;
const int PBOfficialData::kCharNameFieldNumber;
const int PBOfficialData::kOfficialLevelFieldNumber;
const int PBOfficialData::kOfficialOrderFieldNumber;
const int PBOfficialData::kUseTimesFieldNumber;
const int PBOfficialData::kUseXFieldNumber;
const int PBOfficialData::kUseYFieldNumber;
#endif  // !_MSC_VER

PBOfficialData::PBOfficialData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBOfficialData::InitAsDefaultInstance() {}

PBOfficialData::PBOfficialData(const PBOfficialData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBOfficialData::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  charname_ = const_cast< ::std::string*>(&_default_charname_);
  officiallevel_ = 0u;
  officialorder_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBOfficialData::~PBOfficialData() {
  SharedDtor();
}

void PBOfficialData::SharedDtor() {
  if (charname_ != &_default_charname_) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBOfficialData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBOfficialData_descriptor_;
}

const PBOfficialData& PBOfficialData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

PBOfficialData* PBOfficialData::default_instance_ = NULL;

PBOfficialData* PBOfficialData::New() const {
  return new PBOfficialData;
}

void PBOfficialData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (_has_bit(1)) {
      if (charname_ != &_default_charname_) {
        charname_->clear();
      }
    }
    officiallevel_ = 0u;
    officialorder_ = 0u;
  }
  usetimes_.Clear();
  usex_.Clear();
  usey_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBOfficialData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_CharName;
        break;
      }
      
      // optional string CharName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CharName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_charname()));
        if (input->ExpectTag(24)) goto parse_OfficialLevel;
        break;
      }
      
      // optional uint32 OfficialLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OfficialLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &officiallevel_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_OfficialOrder;
        break;
      }
      
      // optional uint32 OfficialOrder = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OfficialOrder:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &officialorder_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_UseTimes;
        break;
      }
      
      // repeated uint32 UseTimes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UseTimes:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_usetimes(value);
        if (input->ExpectTag(40)) goto parse_UseTimes;
        if (input->ExpectTag(48)) goto parse_UseX;
        break;
      }
      
      // repeated uint32 UseX = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UseX:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_usex(value);
        if (input->ExpectTag(48)) goto parse_UseX;
        if (input->ExpectTag(56)) goto parse_UseY;
        break;
      }
      
      // repeated uint32 UseY = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UseY:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_usey(value);
        if (input->ExpectTag(56)) goto parse_UseY;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBOfficialData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBOfficialData::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional string CharName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->charname(), output);
  }
  
  // optional uint32 OfficialLevel = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->officiallevel(), output);
  }
  
  // optional uint32 OfficialOrder = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->officialorder(), output);
  }
  
  // repeated uint32 UseTimes = 5;
  for (int i = 0; i < this->usetimes_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->usetimes(i), output);
  }
  
  // repeated uint32 UseX = 6;
  for (int i = 0; i < this->usex_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->usex(i), output);
  }
  
  // repeated uint32 UseY = 7;
  for (int i = 0; i < this->usey_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->usey(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBOfficialData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional string CharName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->charname(), target);
  }
  
  // optional uint32 OfficialLevel = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->officiallevel(), target);
  }
  
  // optional uint32 OfficialOrder = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->officialorder(), target);
  }
  
  // repeated uint32 UseTimes = 5;
  for (int i = 0; i < this->usetimes_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->usetimes(i), target);
  }
  
  // repeated uint32 UseX = 6;
  for (int i = 0; i < this->usex_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->usex(i), target);
  }
  
  // repeated uint32 UseY = 7;
  for (int i = 0; i < this->usey_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->usey(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBOfficialData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional string CharName = 2;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->charname());
    }
    
    // optional uint32 OfficialLevel = 3;
    if (has_officiallevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->officiallevel());
    }
    
    // optional uint32 OfficialOrder = 4;
    if (has_officialorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->officialorder());
    }
    
  }
  // repeated uint32 UseTimes = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->usetimes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->usetimes(i));
    }
    total_size += 1 * this->usetimes_size() + data_size;
  }
  
  // repeated uint32 UseX = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->usex_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->usex(i));
    }
    total_size += 1 * this->usex_size() + data_size;
  }
  
  // repeated uint32 UseY = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->usey_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->usey(i));
    }
    total_size += 1 * this->usey_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBOfficialData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBOfficialData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBOfficialData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBOfficialData::MergeFrom(const PBOfficialData& from) {
  GOOGLE_CHECK_NE(&from, this);
  usetimes_.MergeFrom(from.usetimes_);
  usex_.MergeFrom(from.usex_);
  usey_.MergeFrom(from.usey_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_charname(from.charname());
    }
    if (from._has_bit(2)) {
      set_officiallevel(from.officiallevel());
    }
    if (from._has_bit(3)) {
      set_officialorder(from.officialorder());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBOfficialData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBOfficialData::CopyFrom(const PBOfficialData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBOfficialData::Swap(PBOfficialData* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(officiallevel_, other->officiallevel_);
    std::swap(officialorder_, other->officialorder_);
    usetimes_.Swap(&other->usetimes_);
    usex_.Swap(&other->usex_);
    usey_.Swap(&other->usey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBOfficialData::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBOfficialData::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBOfficialData::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBOfficialData_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBOfficialList::kOfficialDataFieldNumber;
#endif  // !_MSC_VER

PBOfficialList::PBOfficialList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBOfficialList::InitAsDefaultInstance() {}

PBOfficialList::PBOfficialList(const PBOfficialList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBOfficialList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBOfficialList::~PBOfficialList() {
  SharedDtor();
}

void PBOfficialList::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBOfficialList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBOfficialList_descriptor_;
}

const PBOfficialList& PBOfficialList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

PBOfficialList* PBOfficialList::default_instance_ = NULL;

PBOfficialList* PBOfficialList::New() const {
  return new PBOfficialList;
}

void PBOfficialList::Clear() {
  officialdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBOfficialList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .PBOfficialData OfficialData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_OfficialData:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_officialdata()));
        if (input->ExpectTag(10)) goto parse_OfficialData;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBOfficialList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBOfficialList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .PBOfficialData OfficialData = 1;
  for (int i = 0; i < this->officialdata_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->officialdata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBOfficialList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBOfficialData OfficialData = 1;
  for (int i = 0; i < this->officialdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->officialdata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBOfficialList::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBOfficialData OfficialData = 1;
  total_size += 1 * this->officialdata_size();
  for (int i = 0; i < this->officialdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->officialdata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBOfficialList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBOfficialList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBOfficialList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBOfficialList::MergeFrom(const PBOfficialList& from) {
  GOOGLE_CHECK_NE(&from, this);
  officialdata_.MergeFrom(from.officialdata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBOfficialList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBOfficialList::CopyFrom(const PBOfficialList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBOfficialList::Swap(PBOfficialList* other) {
  if (other != this) {
    officialdata_.Swap(&other->officialdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBOfficialList::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBOfficialList::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBOfficialList::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBOfficialList_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCountryInfoRequest::kCharIDFieldNumber;
const int CMessageCountryInfoRequest::kCountryIDFieldNumber;
const int CMessageCountryInfoRequest::kNeedFullFieldNumber;
const int CMessageCountryInfoRequest::kWorldIDFieldNumber;
#endif  // !_MSC_VER

CMessageCountryInfoRequest::CMessageCountryInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCountryInfoRequest::InitAsDefaultInstance() {}

CMessageCountryInfoRequest::CMessageCountryInfoRequest(const CMessageCountryInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCountryInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  countryid_ = 0u;
  needfull_ = 0u;
  worldid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCountryInfoRequest::~CMessageCountryInfoRequest() {
  SharedDtor();
}

void CMessageCountryInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCountryInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCountryInfoRequest_descriptor_;
}

const CMessageCountryInfoRequest& CMessageCountryInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCountryInfoRequest* CMessageCountryInfoRequest::default_instance_ = NULL;

CMessageCountryInfoRequest* CMessageCountryInfoRequest::New() const {
  return new CMessageCountryInfoRequest;
}

void CMessageCountryInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    countryid_ = 0u;
    needfull_ = 0u;
    worldid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCountryInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CountryID;
        break;
      }
      
      // optional uint32 CountryID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CountryID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &countryid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_NeedFull;
        break;
      }
      
      // optional uint32 NeedFull = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NeedFull:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &needfull_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_WorldID;
        break;
      }
      
      // optional uint32 WorldID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WorldID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &worldid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCountryInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCountryInfoRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 CountryID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->countryid(), output);
  }
  
  // optional uint32 NeedFull = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->needfull(), output);
  }
  
  // optional uint32 WorldID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->worldid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCountryInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 CountryID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->countryid(), target);
  }
  
  // optional uint32 NeedFull = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->needfull(), target);
  }
  
  // optional uint32 WorldID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->worldid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCountryInfoRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 CountryID = 2;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->countryid());
    }
    
    // optional uint32 NeedFull = 3;
    if (has_needfull()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->needfull());
    }
    
    // optional uint32 WorldID = 4;
    if (has_worldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->worldid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCountryInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCountryInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCountryInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCountryInfoRequest::MergeFrom(const CMessageCountryInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_countryid(from.countryid());
    }
    if (from._has_bit(2)) {
      set_needfull(from.needfull());
    }
    if (from._has_bit(3)) {
      set_worldid(from.worldid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCountryInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCountryInfoRequest::CopyFrom(const CMessageCountryInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCountryInfoRequest::Swap(CMessageCountryInfoRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(countryid_, other->countryid_);
    std::swap(needfull_, other->needfull_);
    std::swap(worldid_, other->worldid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCountryInfoRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCountryInfoRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCountryInfoRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCountryInfoRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageCountryInfoResponse::_default_kingname_;
const ::std::string CMessageCountryInfoResponse::_default_corpsname_;
const ::std::string CMessageCountryInfoResponse::_default_unionname_;
const ::std::string CMessageCountryInfoResponse::_default_notice_;
#ifndef _MSC_VER
const int CMessageCountryInfoResponse::kCharIDFieldNumber;
const int CMessageCountryInfoResponse::kCountryIDFieldNumber;
const int CMessageCountryInfoResponse::kKingIDFieldNumber;
const int CMessageCountryInfoResponse::kKingNameFieldNumber;
const int CMessageCountryInfoResponse::kCorpsIDFieldNumber;
const int CMessageCountryInfoResponse::kCorpsNameFieldNumber;
const int CMessageCountryInfoResponse::kUnionIDFieldNumber;
const int CMessageCountryInfoResponse::kUnionNameFieldNumber;
const int CMessageCountryInfoResponse::kPeopleNumFieldNumber;
const int CMessageCountryInfoResponse::kKingPowerFieldNumber;
const int CMessageCountryInfoResponse::kMapFieldNumber;
const int CMessageCountryInfoResponse::kGoldFieldNumber;
const int CMessageCountryInfoResponse::kWizardFieldNumber;
const int CMessageCountryInfoResponse::kConstructValueFieldNumber;
const int CMessageCountryInfoResponse::kConstructLevelFieldNumber;
const int CMessageCountryInfoResponse::kNoticeFieldNumber;
const int CMessageCountryInfoResponse::kBattleInfoFieldNumber;
const int CMessageCountryInfoResponse::kNeedFullFieldNumber;
const int CMessageCountryInfoResponse::kWorldIDFieldNumber;
const int CMessageCountryInfoResponse::kWorldLevelFieldNumber;
#endif  // !_MSC_VER

CMessageCountryInfoResponse::CMessageCountryInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCountryInfoResponse::InitAsDefaultInstance() {  battleinfo_ = const_cast< ::PBCorpsBattleList*>(&::PBCorpsBattleList::default_instance());
}

CMessageCountryInfoResponse::CMessageCountryInfoResponse(const CMessageCountryInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCountryInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  countryid_ = 0u;
  kingid_ = 0u;
  kingname_ = const_cast< ::std::string*>(&_default_kingname_);
  corpsid_ = 0u;
  corpsname_ = const_cast< ::std::string*>(&_default_corpsname_);
  unionid_ = 0u;
  unionname_ = const_cast< ::std::string*>(&_default_unionname_);
  peoplenum_ = 0u;
  kingpower_ = 0u;
  map_ = 0u;
  gold_ = 0u;
  notice_ = const_cast< ::std::string*>(&_default_notice_);
  battleinfo_ = NULL;
  needfull_ = 0u;
  worldid_ = 0u;
  worldlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCountryInfoResponse::~CMessageCountryInfoResponse() {
  SharedDtor();
}

void CMessageCountryInfoResponse::SharedDtor() {
  if (kingname_ != &_default_kingname_) {
    delete kingname_;
  }
  if (corpsname_ != &_default_corpsname_) {
    delete corpsname_;
  }
  if (unionname_ != &_default_unionname_) {
    delete unionname_;
  }
  if (notice_ != &_default_notice_) {
    delete notice_;
  }
  if (this != default_instance_) {
    delete battleinfo_;
  }
}

const ::google::protobuf::Descriptor* CMessageCountryInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCountryInfoResponse_descriptor_;
}

const CMessageCountryInfoResponse& CMessageCountryInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCountryInfoResponse* CMessageCountryInfoResponse::default_instance_ = NULL;

CMessageCountryInfoResponse* CMessageCountryInfoResponse::New() const {
  return new CMessageCountryInfoResponse;
}

void CMessageCountryInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    countryid_ = 0u;
    kingid_ = 0u;
    if (_has_bit(3)) {
      if (kingname_ != &_default_kingname_) {
        kingname_->clear();
      }
    }
    corpsid_ = 0u;
    if (_has_bit(5)) {
      if (corpsname_ != &_default_corpsname_) {
        corpsname_->clear();
      }
    }
    unionid_ = 0u;
    if (_has_bit(7)) {
      if (unionname_ != &_default_unionname_) {
        unionname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    peoplenum_ = 0u;
    kingpower_ = 0u;
    map_ = 0u;
    gold_ = 0u;
    if (_has_bit(15)) {
      if (notice_ != &_default_notice_) {
        notice_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (_has_bit(16)) {
      if (battleinfo_ != NULL) battleinfo_->::PBCorpsBattleList::Clear();
    }
    needfull_ = 0u;
    worldid_ = 0u;
    worldlevel_ = 0u;
  }
  wizard_.Clear();
  constructvalue_.Clear();
  constructlevel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCountryInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CountryID;
        break;
      }
      
      // optional uint32 CountryID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CountryID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &countryid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_KingID;
        break;
      }
      
      // optional uint32 KingID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_KingID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &kingid_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_KingName;
        break;
      }
      
      // optional string KingName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_KingName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_kingname()));
        if (input->ExpectTag(40)) goto parse_CorpsID;
        break;
      }
      
      // optional uint32 CorpsID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_CorpsName;
        break;
      }
      
      // optional string CorpsName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_corpsname()));
        if (input->ExpectTag(56)) goto parse_UnionID;
        break;
      }
      
      // optional uint32 UnionID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UnionID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &unionid_));
        _set_bit(6);
        if (input->ExpectTag(66)) goto parse_UnionName;
        break;
      }
      
      // optional string UnionName = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_UnionName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_unionname()));
        if (input->ExpectTag(72)) goto parse_PeopleNum;
        break;
      }
      
      // optional uint32 PeopleNum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PeopleNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &peoplenum_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_KingPower;
        break;
      }
      
      // optional uint32 KingPower = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_KingPower:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &kingpower_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_Map;
        break;
      }
      
      // optional uint32 Map = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Map:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &map_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_Gold;
        break;
      }
      
      // optional uint32 Gold = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Gold:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &gold_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_Wizard;
        break;
      }
      
      // repeated uint32 Wizard = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Wizard:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_wizard(value);
        if (input->ExpectTag(104)) goto parse_Wizard;
        if (input->ExpectTag(112)) goto parse_ConstructValue;
        break;
      }
      
      // repeated uint32 ConstructValue = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ConstructValue:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_constructvalue(value);
        if (input->ExpectTag(112)) goto parse_ConstructValue;
        if (input->ExpectTag(120)) goto parse_ConstructLevel;
        break;
      }
      
      // repeated uint32 ConstructLevel = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ConstructLevel:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_constructlevel(value);
        if (input->ExpectTag(120)) goto parse_ConstructLevel;
        if (input->ExpectTag(130)) goto parse_Notice;
        break;
      }
      
      // optional string Notice = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Notice:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_notice()));
        if (input->ExpectTag(138)) goto parse_BattleInfo;
        break;
      }
      
      // optional .PBCorpsBattleList BattleInfo = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_BattleInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_battleinfo()));
        if (input->ExpectTag(144)) goto parse_NeedFull;
        break;
      }
      
      // optional uint32 NeedFull = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NeedFull:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &needfull_));
        _set_bit(17);
        if (input->ExpectTag(152)) goto parse_WorldID;
        break;
      }
      
      // optional uint32 WorldID = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WorldID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &worldid_));
        _set_bit(18);
        if (input->ExpectTag(160)) goto parse_WorldLevel;
        break;
      }
      
      // optional uint32 WorldLevel = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WorldLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &worldlevel_));
        _set_bit(19);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCountryInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCountryInfoResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 CountryID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->countryid(), output);
  }
  
  // optional uint32 KingID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->kingid(), output);
  }
  
  // optional string KingName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->kingname(), output);
  }
  
  // optional uint32 CorpsID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->corpsid(), output);
  }
  
  // optional string CorpsName = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteString(6, this->corpsname(), output);
  }
  
  // optional uint32 UnionID = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->unionid(), output);
  }
  
  // optional string UnionName = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteString(8, this->unionname(), output);
  }
  
  // optional uint32 PeopleNum = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->peoplenum(), output);
  }
  
  // optional uint32 KingPower = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->kingpower(), output);
  }
  
  // optional uint32 Map = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->map(), output);
  }
  
  // optional uint32 Gold = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->gold(), output);
  }
  
  // repeated uint32 Wizard = 13;
  for (int i = 0; i < this->wizard_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->wizard(i), output);
  }
  
  // repeated uint32 ConstructValue = 14;
  for (int i = 0; i < this->constructvalue_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->constructvalue(i), output);
  }
  
  // repeated uint32 ConstructLevel = 15;
  for (int i = 0; i < this->constructlevel_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(15, this->constructlevel(i), output);
  }
  
  // optional string Notice = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteString(16, this->notice(), output);
  }
  
  // optional .PBCorpsBattleList BattleInfo = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(17, this->battleinfo(), output);
  }
  
  // optional uint32 NeedFull = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(18, this->needfull(), output);
  }
  
  // optional uint32 WorldID = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(19, this->worldid(), output);
  }
  
  // optional uint32 WorldLevel = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(20, this->worldlevel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCountryInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 CountryID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->countryid(), target);
  }
  
  // optional uint32 KingID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->kingid(), target);
  }
  
  // optional string KingName = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->kingname(), target);
  }
  
  // optional uint32 CorpsID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->corpsid(), target);
  }
  
  // optional string CorpsName = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(6, this->corpsname(), target);
  }
  
  // optional uint32 UnionID = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->unionid(), target);
  }
  
  // optional string UnionName = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(8, this->unionname(), target);
  }
  
  // optional uint32 PeopleNum = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->peoplenum(), target);
  }
  
  // optional uint32 KingPower = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->kingpower(), target);
  }
  
  // optional uint32 Map = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->map(), target);
  }
  
  // optional uint32 Gold = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->gold(), target);
  }
  
  // repeated uint32 Wizard = 13;
  for (int i = 0; i < this->wizard_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->wizard(i), target);
  }
  
  // repeated uint32 ConstructValue = 14;
  for (int i = 0; i < this->constructvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->constructvalue(i), target);
  }
  
  // repeated uint32 ConstructLevel = 15;
  for (int i = 0; i < this->constructlevel_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(15, this->constructlevel(i), target);
  }
  
  // optional string Notice = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(16, this->notice(), target);
  }
  
  // optional .PBCorpsBattleList BattleInfo = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(17, this->battleinfo(), target);
  }
  
  // optional uint32 NeedFull = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(18, this->needfull(), target);
  }
  
  // optional uint32 WorldID = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(19, this->worldid(), target);
  }
  
  // optional uint32 WorldLevel = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(20, this->worldlevel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCountryInfoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 CountryID = 2;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->countryid());
    }
    
    // optional uint32 KingID = 3;
    if (has_kingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->kingid());
    }
    
    // optional string KingName = 4;
    if (has_kingname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->kingname());
    }
    
    // optional uint32 CorpsID = 5;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
    // optional string CorpsName = 6;
    if (has_corpsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->corpsname());
    }
    
    // optional uint32 UnionID = 7;
    if (has_unionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->unionid());
    }
    
    // optional string UnionName = 8;
    if (has_unionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->unionname());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 PeopleNum = 9;
    if (has_peoplenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->peoplenum());
    }
    
    // optional uint32 KingPower = 10;
    if (has_kingpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->kingpower());
    }
    
    // optional uint32 Map = 11;
    if (has_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->map());
    }
    
    // optional uint32 Gold = 12;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->gold());
    }
    
    // optional string Notice = 16;
    if (has_notice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::StringSize(this->notice());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .PBCorpsBattleList BattleInfo = 17;
    if (has_battleinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->battleinfo());
    }
    
    // optional uint32 NeedFull = 18;
    if (has_needfull()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->needfull());
    }
    
    // optional uint32 WorldID = 19;
    if (has_worldid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->worldid());
    }
    
    // optional uint32 WorldLevel = 20;
    if (has_worldlevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->worldlevel());
    }
    
  }
  // repeated uint32 Wizard = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->wizard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->wizard(i));
    }
    total_size += 1 * this->wizard_size() + data_size;
  }
  
  // repeated uint32 ConstructValue = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->constructvalue_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->constructvalue(i));
    }
    total_size += 1 * this->constructvalue_size() + data_size;
  }
  
  // repeated uint32 ConstructLevel = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->constructlevel_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->constructlevel(i));
    }
    total_size += 1 * this->constructlevel_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCountryInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCountryInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCountryInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCountryInfoResponse::MergeFrom(const CMessageCountryInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  wizard_.MergeFrom(from.wizard_);
  constructvalue_.MergeFrom(from.constructvalue_);
  constructlevel_.MergeFrom(from.constructlevel_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_countryid(from.countryid());
    }
    if (from._has_bit(2)) {
      set_kingid(from.kingid());
    }
    if (from._has_bit(3)) {
      set_kingname(from.kingname());
    }
    if (from._has_bit(4)) {
      set_corpsid(from.corpsid());
    }
    if (from._has_bit(5)) {
      set_corpsname(from.corpsname());
    }
    if (from._has_bit(6)) {
      set_unionid(from.unionid());
    }
    if (from._has_bit(7)) {
      set_unionname(from.unionname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_peoplenum(from.peoplenum());
    }
    if (from._has_bit(9)) {
      set_kingpower(from.kingpower());
    }
    if (from._has_bit(10)) {
      set_map(from.map());
    }
    if (from._has_bit(11)) {
      set_gold(from.gold());
    }
    if (from._has_bit(15)) {
      set_notice(from.notice());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      mutable_battleinfo()->::PBCorpsBattleList::MergeFrom(from.battleinfo());
    }
    if (from._has_bit(17)) {
      set_needfull(from.needfull());
    }
    if (from._has_bit(18)) {
      set_worldid(from.worldid());
    }
    if (from._has_bit(19)) {
      set_worldlevel(from.worldlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCountryInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCountryInfoResponse::CopyFrom(const CMessageCountryInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCountryInfoResponse::Swap(CMessageCountryInfoResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(countryid_, other->countryid_);
    std::swap(kingid_, other->kingid_);
    std::swap(kingname_, other->kingname_);
    std::swap(corpsid_, other->corpsid_);
    std::swap(corpsname_, other->corpsname_);
    std::swap(unionid_, other->unionid_);
    std::swap(unionname_, other->unionname_);
    std::swap(peoplenum_, other->peoplenum_);
    std::swap(kingpower_, other->kingpower_);
    std::swap(map_, other->map_);
    std::swap(gold_, other->gold_);
    wizard_.Swap(&other->wizard_);
    constructvalue_.Swap(&other->constructvalue_);
    constructlevel_.Swap(&other->constructlevel_);
    std::swap(notice_, other->notice_);
    std::swap(battleinfo_, other->battleinfo_);
    std::swap(needfull_, other->needfull_);
    std::swap(worldid_, other->worldid_);
    std::swap(worldlevel_, other->worldlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCountryInfoResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCountryInfoResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCountryInfoResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCountryInfoResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageJoinCountryRequest::kCharIDFieldNumber;
const int CMessageJoinCountryRequest::kCountryIDFieldNumber;
const int CMessageJoinCountryRequest::kNPCEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageJoinCountryRequest::CMessageJoinCountryRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageJoinCountryRequest::InitAsDefaultInstance() {}

CMessageJoinCountryRequest::CMessageJoinCountryRequest(const CMessageJoinCountryRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageJoinCountryRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  countryid_ = 0u;
  npcentityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageJoinCountryRequest::~CMessageJoinCountryRequest() {
  SharedDtor();
}

void CMessageJoinCountryRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageJoinCountryRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageJoinCountryRequest_descriptor_;
}

const CMessageJoinCountryRequest& CMessageJoinCountryRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageJoinCountryRequest* CMessageJoinCountryRequest::default_instance_ = NULL;

CMessageJoinCountryRequest* CMessageJoinCountryRequest::New() const {
  return new CMessageJoinCountryRequest;
}

void CMessageJoinCountryRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    countryid_ = 0u;
    npcentityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageJoinCountryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CountryID;
        break;
      }
      
      // optional uint32 CountryID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CountryID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &countryid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_NPCEntityID;
        break;
      }
      
      // optional uint32 NPCEntityID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NPCEntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcentityid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageJoinCountryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageJoinCountryRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 CountryID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->countryid(), output);
  }
  
  // optional uint32 NPCEntityID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->npcentityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageJoinCountryRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 CountryID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->countryid(), target);
  }
  
  // optional uint32 NPCEntityID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->npcentityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageJoinCountryRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 CountryID = 2;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->countryid());
    }
    
    // optional uint32 NPCEntityID = 3;
    if (has_npcentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcentityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageJoinCountryRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageJoinCountryRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageJoinCountryRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageJoinCountryRequest::MergeFrom(const CMessageJoinCountryRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_countryid(from.countryid());
    }
    if (from._has_bit(2)) {
      set_npcentityid(from.npcentityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageJoinCountryRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageJoinCountryRequest::CopyFrom(const CMessageJoinCountryRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageJoinCountryRequest::Swap(CMessageJoinCountryRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(countryid_, other->countryid_);
    std::swap(npcentityid_, other->npcentityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageJoinCountryRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageJoinCountryRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageJoinCountryRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageJoinCountryRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageJoinCountryResponse::kCharIDFieldNumber;
const int CMessageJoinCountryResponse::kResultFieldNumber;
const int CMessageJoinCountryResponse::kCountryIDFieldNumber;
#endif  // !_MSC_VER

CMessageJoinCountryResponse::CMessageJoinCountryResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageJoinCountryResponse::InitAsDefaultInstance() {}

CMessageJoinCountryResponse::CMessageJoinCountryResponse(const CMessageJoinCountryResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageJoinCountryResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  result_ = 0u;
  countryid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageJoinCountryResponse::~CMessageJoinCountryResponse() {
  SharedDtor();
}

void CMessageJoinCountryResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageJoinCountryResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageJoinCountryResponse_descriptor_;
}

const CMessageJoinCountryResponse& CMessageJoinCountryResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageJoinCountryResponse* CMessageJoinCountryResponse::default_instance_ = NULL;

CMessageJoinCountryResponse* CMessageJoinCountryResponse::New() const {
  return new CMessageJoinCountryResponse;
}

void CMessageJoinCountryResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    result_ = 0u;
    countryid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageJoinCountryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_CountryID;
        break;
      }
      
      // optional uint32 CountryID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CountryID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &countryid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageJoinCountryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageJoinCountryResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  // optional uint32 CountryID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->countryid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageJoinCountryResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  // optional uint32 CountryID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->countryid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageJoinCountryResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 CountryID = 3;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->countryid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageJoinCountryResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageJoinCountryResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageJoinCountryResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageJoinCountryResponse::MergeFrom(const CMessageJoinCountryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_countryid(from.countryid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageJoinCountryResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageJoinCountryResponse::CopyFrom(const CMessageJoinCountryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageJoinCountryResponse::Swap(CMessageJoinCountryResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(result_, other->result_);
    std::swap(countryid_, other->countryid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageJoinCountryResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageJoinCountryResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageJoinCountryResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageJoinCountryResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageJoinCountryNotify::kCharIDFieldNumber;
const int CMessageJoinCountryNotify::kCountryIDFieldNumber;
const int CMessageJoinCountryNotify::kKingIDFieldNumber;
#endif  // !_MSC_VER

CMessageJoinCountryNotify::CMessageJoinCountryNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageJoinCountryNotify::InitAsDefaultInstance() {}

CMessageJoinCountryNotify::CMessageJoinCountryNotify(const CMessageJoinCountryNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageJoinCountryNotify::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  countryid_ = 0u;
  kingid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageJoinCountryNotify::~CMessageJoinCountryNotify() {
  SharedDtor();
}

void CMessageJoinCountryNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageJoinCountryNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageJoinCountryNotify_descriptor_;
}

const CMessageJoinCountryNotify& CMessageJoinCountryNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageJoinCountryNotify* CMessageJoinCountryNotify::default_instance_ = NULL;

CMessageJoinCountryNotify* CMessageJoinCountryNotify::New() const {
  return new CMessageJoinCountryNotify;
}

void CMessageJoinCountryNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    countryid_ = 0u;
    kingid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageJoinCountryNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CountryID;
        break;
      }
      
      // optional uint32 CountryID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CountryID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &countryid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_KingID;
        break;
      }
      
      // optional uint32 KingID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_KingID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &kingid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageJoinCountryNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageJoinCountryNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 CountryID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->countryid(), output);
  }
  
  // optional uint32 KingID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->kingid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageJoinCountryNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 CountryID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->countryid(), target);
  }
  
  // optional uint32 KingID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->kingid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageJoinCountryNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 CountryID = 2;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->countryid());
    }
    
    // optional uint32 KingID = 3;
    if (has_kingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->kingid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageJoinCountryNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageJoinCountryNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageJoinCountryNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageJoinCountryNotify::MergeFrom(const CMessageJoinCountryNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_countryid(from.countryid());
    }
    if (from._has_bit(2)) {
      set_kingid(from.kingid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageJoinCountryNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageJoinCountryNotify::CopyFrom(const CMessageJoinCountryNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageJoinCountryNotify::Swap(CMessageJoinCountryNotify* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(countryid_, other->countryid_);
    std::swap(kingid_, other->kingid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageJoinCountryNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageJoinCountryNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageJoinCountryNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageJoinCountryNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLeaveCountryRequest::kCharIDFieldNumber;
const int CMessageLeaveCountryRequest::kCountryIDFieldNumber;
const int CMessageLeaveCountryRequest::kNPCEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageLeaveCountryRequest::CMessageLeaveCountryRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLeaveCountryRequest::InitAsDefaultInstance() {}

CMessageLeaveCountryRequest::CMessageLeaveCountryRequest(const CMessageLeaveCountryRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLeaveCountryRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  countryid_ = 0u;
  npcentityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLeaveCountryRequest::~CMessageLeaveCountryRequest() {
  SharedDtor();
}

void CMessageLeaveCountryRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLeaveCountryRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLeaveCountryRequest_descriptor_;
}

const CMessageLeaveCountryRequest& CMessageLeaveCountryRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageLeaveCountryRequest* CMessageLeaveCountryRequest::default_instance_ = NULL;

CMessageLeaveCountryRequest* CMessageLeaveCountryRequest::New() const {
  return new CMessageLeaveCountryRequest;
}

void CMessageLeaveCountryRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    countryid_ = 0u;
    npcentityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLeaveCountryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CountryID;
        break;
      }
      
      // optional uint32 CountryID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CountryID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &countryid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_NPCEntityID;
        break;
      }
      
      // optional uint32 NPCEntityID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NPCEntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcentityid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLeaveCountryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLeaveCountryRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 CountryID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->countryid(), output);
  }
  
  // optional uint32 NPCEntityID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->npcentityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLeaveCountryRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 CountryID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->countryid(), target);
  }
  
  // optional uint32 NPCEntityID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->npcentityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLeaveCountryRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 CountryID = 2;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->countryid());
    }
    
    // optional uint32 NPCEntityID = 3;
    if (has_npcentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcentityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLeaveCountryRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLeaveCountryRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLeaveCountryRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLeaveCountryRequest::MergeFrom(const CMessageLeaveCountryRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_countryid(from.countryid());
    }
    if (from._has_bit(2)) {
      set_npcentityid(from.npcentityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLeaveCountryRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLeaveCountryRequest::CopyFrom(const CMessageLeaveCountryRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLeaveCountryRequest::Swap(CMessageLeaveCountryRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(countryid_, other->countryid_);
    std::swap(npcentityid_, other->npcentityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLeaveCountryRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLeaveCountryRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLeaveCountryRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLeaveCountryRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLeaveCountryResponse::kCharIDFieldNumber;
const int CMessageLeaveCountryResponse::kResultFieldNumber;
const int CMessageLeaveCountryResponse::kCountryIDFieldNumber;
#endif  // !_MSC_VER

CMessageLeaveCountryResponse::CMessageLeaveCountryResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLeaveCountryResponse::InitAsDefaultInstance() {}

CMessageLeaveCountryResponse::CMessageLeaveCountryResponse(const CMessageLeaveCountryResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLeaveCountryResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  result_ = 0u;
  countryid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLeaveCountryResponse::~CMessageLeaveCountryResponse() {
  SharedDtor();
}

void CMessageLeaveCountryResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLeaveCountryResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLeaveCountryResponse_descriptor_;
}

const CMessageLeaveCountryResponse& CMessageLeaveCountryResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageLeaveCountryResponse* CMessageLeaveCountryResponse::default_instance_ = NULL;

CMessageLeaveCountryResponse* CMessageLeaveCountryResponse::New() const {
  return new CMessageLeaveCountryResponse;
}

void CMessageLeaveCountryResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    result_ = 0u;
    countryid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLeaveCountryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_CountryID;
        break;
      }
      
      // optional uint32 CountryID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CountryID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &countryid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLeaveCountryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLeaveCountryResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  // optional uint32 CountryID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->countryid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLeaveCountryResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  // optional uint32 CountryID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->countryid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLeaveCountryResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 CountryID = 3;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->countryid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLeaveCountryResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLeaveCountryResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLeaveCountryResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLeaveCountryResponse::MergeFrom(const CMessageLeaveCountryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_countryid(from.countryid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLeaveCountryResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLeaveCountryResponse::CopyFrom(const CMessageLeaveCountryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLeaveCountryResponse::Swap(CMessageLeaveCountryResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(result_, other->result_);
    std::swap(countryid_, other->countryid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLeaveCountryResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLeaveCountryResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLeaveCountryResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLeaveCountryResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageSetOfficialRequest::_default_charname_;
#ifndef _MSC_VER
const int CMessageSetOfficialRequest::kCharIDFieldNumber;
const int CMessageSetOfficialRequest::kCharNameFieldNumber;
const int CMessageSetOfficialRequest::kOfficialLevelFieldNumber;
const int CMessageSetOfficialRequest::kOfficialOrderFieldNumber;
const int CMessageSetOfficialRequest::kNormalSetFieldNumber;
#endif  // !_MSC_VER

CMessageSetOfficialRequest::CMessageSetOfficialRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageSetOfficialRequest::InitAsDefaultInstance() {}

CMessageSetOfficialRequest::CMessageSetOfficialRequest(const CMessageSetOfficialRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageSetOfficialRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  charname_ = const_cast< ::std::string*>(&_default_charname_);
  officiallevel_ = 0u;
  officialorder_ = 0u;
  normalset_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageSetOfficialRequest::~CMessageSetOfficialRequest() {
  SharedDtor();
}

void CMessageSetOfficialRequest::SharedDtor() {
  if (charname_ != &_default_charname_) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageSetOfficialRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageSetOfficialRequest_descriptor_;
}

const CMessageSetOfficialRequest& CMessageSetOfficialRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageSetOfficialRequest* CMessageSetOfficialRequest::default_instance_ = NULL;

CMessageSetOfficialRequest* CMessageSetOfficialRequest::New() const {
  return new CMessageSetOfficialRequest;
}

void CMessageSetOfficialRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (_has_bit(1)) {
      if (charname_ != &_default_charname_) {
        charname_->clear();
      }
    }
    officiallevel_ = 0u;
    officialorder_ = 0u;
    normalset_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageSetOfficialRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_CharName;
        break;
      }
      
      // optional string CharName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CharName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_charname()));
        if (input->ExpectTag(24)) goto parse_OfficialLevel;
        break;
      }
      
      // optional uint32 OfficialLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OfficialLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &officiallevel_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_OfficialOrder;
        break;
      }
      
      // optional uint32 OfficialOrder = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OfficialOrder:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &officialorder_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_NormalSet;
        break;
      }
      
      // optional uint32 NormalSet = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NormalSet:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &normalset_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageSetOfficialRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageSetOfficialRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional string CharName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->charname(), output);
  }
  
  // optional uint32 OfficialLevel = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->officiallevel(), output);
  }
  
  // optional uint32 OfficialOrder = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->officialorder(), output);
  }
  
  // optional uint32 NormalSet = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->normalset(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageSetOfficialRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional string CharName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->charname(), target);
  }
  
  // optional uint32 OfficialLevel = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->officiallevel(), target);
  }
  
  // optional uint32 OfficialOrder = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->officialorder(), target);
  }
  
  // optional uint32 NormalSet = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->normalset(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageSetOfficialRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional string CharName = 2;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->charname());
    }
    
    // optional uint32 OfficialLevel = 3;
    if (has_officiallevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->officiallevel());
    }
    
    // optional uint32 OfficialOrder = 4;
    if (has_officialorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->officialorder());
    }
    
    // optional uint32 NormalSet = 5;
    if (has_normalset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->normalset());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageSetOfficialRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageSetOfficialRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageSetOfficialRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageSetOfficialRequest::MergeFrom(const CMessageSetOfficialRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_charname(from.charname());
    }
    if (from._has_bit(2)) {
      set_officiallevel(from.officiallevel());
    }
    if (from._has_bit(3)) {
      set_officialorder(from.officialorder());
    }
    if (from._has_bit(4)) {
      set_normalset(from.normalset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageSetOfficialRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSetOfficialRequest::CopyFrom(const CMessageSetOfficialRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSetOfficialRequest::Swap(CMessageSetOfficialRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(officiallevel_, other->officiallevel_);
    std::swap(officialorder_, other->officialorder_);
    std::swap(normalset_, other->normalset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageSetOfficialRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageSetOfficialRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageSetOfficialRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageSetOfficialRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageSetOfficialResponse::_default_charname_;
#ifndef _MSC_VER
const int CMessageSetOfficialResponse::kCharIDFieldNumber;
const int CMessageSetOfficialResponse::kResultFieldNumber;
const int CMessageSetOfficialResponse::kCharNameFieldNumber;
const int CMessageSetOfficialResponse::kOfficialLevelFieldNumber;
const int CMessageSetOfficialResponse::kOfficialOrderFieldNumber;
const int CMessageSetOfficialResponse::kNormalSetFieldNumber;
const int CMessageSetOfficialResponse::kTargetIDFieldNumber;
#endif  // !_MSC_VER

CMessageSetOfficialResponse::CMessageSetOfficialResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageSetOfficialResponse::InitAsDefaultInstance() {}

CMessageSetOfficialResponse::CMessageSetOfficialResponse(const CMessageSetOfficialResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageSetOfficialResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  result_ = 0u;
  charname_ = const_cast< ::std::string*>(&_default_charname_);
  officiallevel_ = 0u;
  officialorder_ = 0u;
  normalset_ = 0u;
  targetid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageSetOfficialResponse::~CMessageSetOfficialResponse() {
  SharedDtor();
}

void CMessageSetOfficialResponse::SharedDtor() {
  if (charname_ != &_default_charname_) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageSetOfficialResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageSetOfficialResponse_descriptor_;
}

const CMessageSetOfficialResponse& CMessageSetOfficialResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageSetOfficialResponse* CMessageSetOfficialResponse::default_instance_ = NULL;

CMessageSetOfficialResponse* CMessageSetOfficialResponse::New() const {
  return new CMessageSetOfficialResponse;
}

void CMessageSetOfficialResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    result_ = 0u;
    if (_has_bit(2)) {
      if (charname_ != &_default_charname_) {
        charname_->clear();
      }
    }
    officiallevel_ = 0u;
    officialorder_ = 0u;
    normalset_ = 0u;
    targetid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageSetOfficialResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_CharName;
        break;
      }
      
      // optional string CharName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CharName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_charname()));
        if (input->ExpectTag(32)) goto parse_OfficialLevel;
        break;
      }
      
      // optional uint32 OfficialLevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OfficialLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &officiallevel_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_OfficialOrder;
        break;
      }
      
      // optional uint32 OfficialOrder = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OfficialOrder:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &officialorder_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_NormalSet;
        break;
      }
      
      // optional uint32 NormalSet = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NormalSet:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &normalset_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_TargetID;
        break;
      }
      
      // optional uint32 TargetID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TargetID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &targetid_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageSetOfficialResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageSetOfficialResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  // optional string CharName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->charname(), output);
  }
  
  // optional uint32 OfficialLevel = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->officiallevel(), output);
  }
  
  // optional uint32 OfficialOrder = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->officialorder(), output);
  }
  
  // optional uint32 NormalSet = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->normalset(), output);
  }
  
  // optional uint32 TargetID = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->targetid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageSetOfficialResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  // optional string CharName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->charname(), target);
  }
  
  // optional uint32 OfficialLevel = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->officiallevel(), target);
  }
  
  // optional uint32 OfficialOrder = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->officialorder(), target);
  }
  
  // optional uint32 NormalSet = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->normalset(), target);
  }
  
  // optional uint32 TargetID = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->targetid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageSetOfficialResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional string CharName = 3;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->charname());
    }
    
    // optional uint32 OfficialLevel = 4;
    if (has_officiallevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->officiallevel());
    }
    
    // optional uint32 OfficialOrder = 5;
    if (has_officialorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->officialorder());
    }
    
    // optional uint32 NormalSet = 6;
    if (has_normalset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->normalset());
    }
    
    // optional uint32 TargetID = 7;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->targetid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageSetOfficialResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageSetOfficialResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageSetOfficialResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageSetOfficialResponse::MergeFrom(const CMessageSetOfficialResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_charname(from.charname());
    }
    if (from._has_bit(3)) {
      set_officiallevel(from.officiallevel());
    }
    if (from._has_bit(4)) {
      set_officialorder(from.officialorder());
    }
    if (from._has_bit(5)) {
      set_normalset(from.normalset());
    }
    if (from._has_bit(6)) {
      set_targetid(from.targetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageSetOfficialResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSetOfficialResponse::CopyFrom(const CMessageSetOfficialResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSetOfficialResponse::Swap(CMessageSetOfficialResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(result_, other->result_);
    std::swap(charname_, other->charname_);
    std::swap(officiallevel_, other->officiallevel_);
    std::swap(officialorder_, other->officialorder_);
    std::swap(normalset_, other->normalset_);
    std::swap(targetid_, other->targetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageSetOfficialResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageSetOfficialResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageSetOfficialResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageSetOfficialResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageUnSetOfficialRequest::kCharIDFieldNumber;
const int CMessageUnSetOfficialRequest::kOfficialLevelFieldNumber;
const int CMessageUnSetOfficialRequest::kOfficialOrderFieldNumber;
#endif  // !_MSC_VER

CMessageUnSetOfficialRequest::CMessageUnSetOfficialRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUnSetOfficialRequest::InitAsDefaultInstance() {}

CMessageUnSetOfficialRequest::CMessageUnSetOfficialRequest(const CMessageUnSetOfficialRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUnSetOfficialRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  officiallevel_ = 0u;
  officialorder_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUnSetOfficialRequest::~CMessageUnSetOfficialRequest() {
  SharedDtor();
}

void CMessageUnSetOfficialRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageUnSetOfficialRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUnSetOfficialRequest_descriptor_;
}

const CMessageUnSetOfficialRequest& CMessageUnSetOfficialRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageUnSetOfficialRequest* CMessageUnSetOfficialRequest::default_instance_ = NULL;

CMessageUnSetOfficialRequest* CMessageUnSetOfficialRequest::New() const {
  return new CMessageUnSetOfficialRequest;
}

void CMessageUnSetOfficialRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    officiallevel_ = 0u;
    officialorder_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUnSetOfficialRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_OfficialLevel;
        break;
      }
      
      // optional uint32 OfficialLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OfficialLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &officiallevel_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_OfficialOrder;
        break;
      }
      
      // optional uint32 OfficialOrder = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OfficialOrder:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &officialorder_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUnSetOfficialRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUnSetOfficialRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 OfficialLevel = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->officiallevel(), output);
  }
  
  // optional uint32 OfficialOrder = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->officialorder(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUnSetOfficialRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 OfficialLevel = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->officiallevel(), target);
  }
  
  // optional uint32 OfficialOrder = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->officialorder(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUnSetOfficialRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 OfficialLevel = 2;
    if (has_officiallevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->officiallevel());
    }
    
    // optional uint32 OfficialOrder = 3;
    if (has_officialorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->officialorder());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUnSetOfficialRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUnSetOfficialRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUnSetOfficialRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUnSetOfficialRequest::MergeFrom(const CMessageUnSetOfficialRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_officiallevel(from.officiallevel());
    }
    if (from._has_bit(2)) {
      set_officialorder(from.officialorder());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUnSetOfficialRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUnSetOfficialRequest::CopyFrom(const CMessageUnSetOfficialRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUnSetOfficialRequest::Swap(CMessageUnSetOfficialRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(officiallevel_, other->officiallevel_);
    std::swap(officialorder_, other->officialorder_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUnSetOfficialRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUnSetOfficialRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUnSetOfficialRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUnSetOfficialRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageUnSetOfficialResponse::_default_charname_;
#ifndef _MSC_VER
const int CMessageUnSetOfficialResponse::kCharIDFieldNumber;
const int CMessageUnSetOfficialResponse::kResultFieldNumber;
const int CMessageUnSetOfficialResponse::kCharNameFieldNumber;
const int CMessageUnSetOfficialResponse::kOfficialLevelFieldNumber;
const int CMessageUnSetOfficialResponse::kOfficialOrderFieldNumber;
#endif  // !_MSC_VER

CMessageUnSetOfficialResponse::CMessageUnSetOfficialResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUnSetOfficialResponse::InitAsDefaultInstance() {}

CMessageUnSetOfficialResponse::CMessageUnSetOfficialResponse(const CMessageUnSetOfficialResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUnSetOfficialResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  result_ = 0u;
  charname_ = const_cast< ::std::string*>(&_default_charname_);
  officiallevel_ = 0u;
  officialorder_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUnSetOfficialResponse::~CMessageUnSetOfficialResponse() {
  SharedDtor();
}

void CMessageUnSetOfficialResponse::SharedDtor() {
  if (charname_ != &_default_charname_) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageUnSetOfficialResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUnSetOfficialResponse_descriptor_;
}

const CMessageUnSetOfficialResponse& CMessageUnSetOfficialResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageUnSetOfficialResponse* CMessageUnSetOfficialResponse::default_instance_ = NULL;

CMessageUnSetOfficialResponse* CMessageUnSetOfficialResponse::New() const {
  return new CMessageUnSetOfficialResponse;
}

void CMessageUnSetOfficialResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    result_ = 0u;
    if (_has_bit(2)) {
      if (charname_ != &_default_charname_) {
        charname_->clear();
      }
    }
    officiallevel_ = 0u;
    officialorder_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUnSetOfficialResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_CharName;
        break;
      }
      
      // optional string CharName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CharName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_charname()));
        if (input->ExpectTag(32)) goto parse_OfficialLevel;
        break;
      }
      
      // optional uint32 OfficialLevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OfficialLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &officiallevel_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_OfficialOrder;
        break;
      }
      
      // optional uint32 OfficialOrder = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OfficialOrder:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &officialorder_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUnSetOfficialResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUnSetOfficialResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  // optional string CharName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->charname(), output);
  }
  
  // optional uint32 OfficialLevel = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->officiallevel(), output);
  }
  
  // optional uint32 OfficialOrder = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->officialorder(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUnSetOfficialResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  // optional string CharName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->charname(), target);
  }
  
  // optional uint32 OfficialLevel = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->officiallevel(), target);
  }
  
  // optional uint32 OfficialOrder = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->officialorder(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUnSetOfficialResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional string CharName = 3;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->charname());
    }
    
    // optional uint32 OfficialLevel = 4;
    if (has_officiallevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->officiallevel());
    }
    
    // optional uint32 OfficialOrder = 5;
    if (has_officialorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->officialorder());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUnSetOfficialResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUnSetOfficialResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUnSetOfficialResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUnSetOfficialResponse::MergeFrom(const CMessageUnSetOfficialResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_charname(from.charname());
    }
    if (from._has_bit(3)) {
      set_officiallevel(from.officiallevel());
    }
    if (from._has_bit(4)) {
      set_officialorder(from.officialorder());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUnSetOfficialResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUnSetOfficialResponse::CopyFrom(const CMessageUnSetOfficialResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUnSetOfficialResponse::Swap(CMessageUnSetOfficialResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(result_, other->result_);
    std::swap(charname_, other->charname_);
    std::swap(officiallevel_, other->officiallevel_);
    std::swap(officialorder_, other->officialorder_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUnSetOfficialResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUnSetOfficialResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUnSetOfficialResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUnSetOfficialResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageUseFunctionRequest::_default_targetname_;
#ifndef _MSC_VER
const int CMessageUseFunctionRequest::kCharIDFieldNumber;
const int CMessageUseFunctionRequest::kFunctionTypeFieldNumber;
const int CMessageUseFunctionRequest::kFunctionOrderFieldNumber;
const int CMessageUseFunctionRequest::kTargetNameFieldNumber;
const int CMessageUseFunctionRequest::kTeleportFieldNumber;
const int CMessageUseFunctionRequest::kIntParam1FieldNumber;
#endif  // !_MSC_VER

CMessageUseFunctionRequest::CMessageUseFunctionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUseFunctionRequest::InitAsDefaultInstance() {  teleport_ = const_cast< ::TeleportData*>(&::TeleportData::default_instance());
}

CMessageUseFunctionRequest::CMessageUseFunctionRequest(const CMessageUseFunctionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUseFunctionRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  functiontype_ = 0u;
  functionorder_ = 0u;
  targetname_ = const_cast< ::std::string*>(&_default_targetname_);
  teleport_ = NULL;
  intparam1_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUseFunctionRequest::~CMessageUseFunctionRequest() {
  SharedDtor();
}

void CMessageUseFunctionRequest::SharedDtor() {
  if (targetname_ != &_default_targetname_) {
    delete targetname_;
  }
  if (this != default_instance_) {
    delete teleport_;
  }
}

const ::google::protobuf::Descriptor* CMessageUseFunctionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUseFunctionRequest_descriptor_;
}

const CMessageUseFunctionRequest& CMessageUseFunctionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageUseFunctionRequest* CMessageUseFunctionRequest::default_instance_ = NULL;

CMessageUseFunctionRequest* CMessageUseFunctionRequest::New() const {
  return new CMessageUseFunctionRequest;
}

void CMessageUseFunctionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    functiontype_ = 0u;
    functionorder_ = 0u;
    if (_has_bit(3)) {
      if (targetname_ != &_default_targetname_) {
        targetname_->clear();
      }
    }
    if (_has_bit(4)) {
      if (teleport_ != NULL) teleport_->::TeleportData::Clear();
    }
    intparam1_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUseFunctionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_FunctionType;
        break;
      }
      
      // optional uint32 FunctionType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FunctionType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &functiontype_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_FunctionOrder;
        break;
      }
      
      // optional uint32 FunctionOrder = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FunctionOrder:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &functionorder_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_TargetName;
        break;
      }
      
      // optional string TargetName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_TargetName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_targetname()));
        if (input->ExpectTag(42)) goto parse_Teleport;
        break;
      }
      
      // optional .TeleportData Teleport = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Teleport:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_teleport()));
        if (input->ExpectTag(48)) goto parse_IntParam1;
        break;
      }
      
      // optional uint32 IntParam1 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IntParam1:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &intparam1_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUseFunctionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUseFunctionRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 FunctionType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->functiontype(), output);
  }
  
  // optional uint32 FunctionOrder = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->functionorder(), output);
  }
  
  // optional string TargetName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->targetname(), output);
  }
  
  // optional .TeleportData Teleport = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(5, this->teleport(), output);
  }
  
  // optional uint32 IntParam1 = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->intparam1(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUseFunctionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 FunctionType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->functiontype(), target);
  }
  
  // optional uint32 FunctionOrder = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->functionorder(), target);
  }
  
  // optional string TargetName = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->targetname(), target);
  }
  
  // optional .TeleportData Teleport = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(5, this->teleport(), target);
  }
  
  // optional uint32 IntParam1 = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->intparam1(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUseFunctionRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 FunctionType = 2;
    if (has_functiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->functiontype());
    }
    
    // optional uint32 FunctionOrder = 3;
    if (has_functionorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->functionorder());
    }
    
    // optional string TargetName = 4;
    if (has_targetname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->targetname());
    }
    
    // optional .TeleportData Teleport = 5;
    if (has_teleport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->teleport());
    }
    
    // optional uint32 IntParam1 = 6;
    if (has_intparam1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->intparam1());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUseFunctionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUseFunctionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUseFunctionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUseFunctionRequest::MergeFrom(const CMessageUseFunctionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_functiontype(from.functiontype());
    }
    if (from._has_bit(2)) {
      set_functionorder(from.functionorder());
    }
    if (from._has_bit(3)) {
      set_targetname(from.targetname());
    }
    if (from._has_bit(4)) {
      mutable_teleport()->::TeleportData::MergeFrom(from.teleport());
    }
    if (from._has_bit(5)) {
      set_intparam1(from.intparam1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUseFunctionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUseFunctionRequest::CopyFrom(const CMessageUseFunctionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUseFunctionRequest::Swap(CMessageUseFunctionRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(functiontype_, other->functiontype_);
    std::swap(functionorder_, other->functionorder_);
    std::swap(targetname_, other->targetname_);
    std::swap(teleport_, other->teleport_);
    std::swap(intparam1_, other->intparam1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUseFunctionRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUseFunctionRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUseFunctionRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUseFunctionRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageUseFunctionResponse::_default_targetname_;
#ifndef _MSC_VER
const int CMessageUseFunctionResponse::kCharIDFieldNumber;
const int CMessageUseFunctionResponse::kResultFieldNumber;
const int CMessageUseFunctionResponse::kFunctionTypeFieldNumber;
const int CMessageUseFunctionResponse::kFunctionOrderFieldNumber;
const int CMessageUseFunctionResponse::kTargetNameFieldNumber;
#endif  // !_MSC_VER

CMessageUseFunctionResponse::CMessageUseFunctionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUseFunctionResponse::InitAsDefaultInstance() {}

CMessageUseFunctionResponse::CMessageUseFunctionResponse(const CMessageUseFunctionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUseFunctionResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  result_ = 0u;
  functiontype_ = 0u;
  functionorder_ = 0u;
  targetname_ = const_cast< ::std::string*>(&_default_targetname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUseFunctionResponse::~CMessageUseFunctionResponse() {
  SharedDtor();
}

void CMessageUseFunctionResponse::SharedDtor() {
  if (targetname_ != &_default_targetname_) {
    delete targetname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageUseFunctionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUseFunctionResponse_descriptor_;
}

const CMessageUseFunctionResponse& CMessageUseFunctionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageUseFunctionResponse* CMessageUseFunctionResponse::default_instance_ = NULL;

CMessageUseFunctionResponse* CMessageUseFunctionResponse::New() const {
  return new CMessageUseFunctionResponse;
}

void CMessageUseFunctionResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    result_ = 0u;
    functiontype_ = 0u;
    functionorder_ = 0u;
    if (_has_bit(4)) {
      if (targetname_ != &_default_targetname_) {
        targetname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUseFunctionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_FunctionType;
        break;
      }
      
      // optional uint32 FunctionType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FunctionType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &functiontype_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_FunctionOrder;
        break;
      }
      
      // optional uint32 FunctionOrder = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FunctionOrder:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &functionorder_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_TargetName;
        break;
      }
      
      // optional string TargetName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_TargetName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_targetname()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUseFunctionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUseFunctionResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  // optional uint32 FunctionType = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->functiontype(), output);
  }
  
  // optional uint32 FunctionOrder = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->functionorder(), output);
  }
  
  // optional string TargetName = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->targetname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUseFunctionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  // optional uint32 FunctionType = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->functiontype(), target);
  }
  
  // optional uint32 FunctionOrder = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->functionorder(), target);
  }
  
  // optional string TargetName = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->targetname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUseFunctionResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 FunctionType = 3;
    if (has_functiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->functiontype());
    }
    
    // optional uint32 FunctionOrder = 4;
    if (has_functionorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->functionorder());
    }
    
    // optional string TargetName = 5;
    if (has_targetname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->targetname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUseFunctionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUseFunctionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUseFunctionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUseFunctionResponse::MergeFrom(const CMessageUseFunctionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_functiontype(from.functiontype());
    }
    if (from._has_bit(3)) {
      set_functionorder(from.functionorder());
    }
    if (from._has_bit(4)) {
      set_targetname(from.targetname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUseFunctionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUseFunctionResponse::CopyFrom(const CMessageUseFunctionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUseFunctionResponse::Swap(CMessageUseFunctionResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(result_, other->result_);
    std::swap(functiontype_, other->functiontype_);
    std::swap(functionorder_, other->functionorder_);
    std::swap(targetname_, other->targetname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUseFunctionResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUseFunctionResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUseFunctionResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUseFunctionResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageOfficialInfoRequest::kCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageOfficialInfoRequest::CMessageOfficialInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageOfficialInfoRequest::InitAsDefaultInstance() {}

CMessageOfficialInfoRequest::CMessageOfficialInfoRequest(const CMessageOfficialInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageOfficialInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageOfficialInfoRequest::~CMessageOfficialInfoRequest() {
  SharedDtor();
}

void CMessageOfficialInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageOfficialInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageOfficialInfoRequest_descriptor_;
}

const CMessageOfficialInfoRequest& CMessageOfficialInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageOfficialInfoRequest* CMessageOfficialInfoRequest::default_instance_ = NULL;

CMessageOfficialInfoRequest* CMessageOfficialInfoRequest::New() const {
  return new CMessageOfficialInfoRequest;
}

void CMessageOfficialInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageOfficialInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageOfficialInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageOfficialInfoRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageOfficialInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageOfficialInfoRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageOfficialInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageOfficialInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageOfficialInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageOfficialInfoRequest::MergeFrom(const CMessageOfficialInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageOfficialInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageOfficialInfoRequest::CopyFrom(const CMessageOfficialInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageOfficialInfoRequest::Swap(CMessageOfficialInfoRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageOfficialInfoRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageOfficialInfoRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageOfficialInfoRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageOfficialInfoRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageOfficialInfoResponse::kCharIDFieldNumber;
const int CMessageOfficialInfoResponse::kResultFieldNumber;
const int CMessageOfficialInfoResponse::kOfficialListFieldNumber;
#endif  // !_MSC_VER

CMessageOfficialInfoResponse::CMessageOfficialInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageOfficialInfoResponse::InitAsDefaultInstance() {  officiallist_ = const_cast< ::PBOfficialList*>(&::PBOfficialList::default_instance());
}

CMessageOfficialInfoResponse::CMessageOfficialInfoResponse(const CMessageOfficialInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageOfficialInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  result_ = 0u;
  officiallist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageOfficialInfoResponse::~CMessageOfficialInfoResponse() {
  SharedDtor();
}

void CMessageOfficialInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete officiallist_;
  }
}

const ::google::protobuf::Descriptor* CMessageOfficialInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageOfficialInfoResponse_descriptor_;
}

const CMessageOfficialInfoResponse& CMessageOfficialInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageOfficialInfoResponse* CMessageOfficialInfoResponse::default_instance_ = NULL;

CMessageOfficialInfoResponse* CMessageOfficialInfoResponse::New() const {
  return new CMessageOfficialInfoResponse;
}

void CMessageOfficialInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    result_ = 0u;
    if (_has_bit(2)) {
      if (officiallist_ != NULL) officiallist_->::PBOfficialList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageOfficialInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_OfficialList;
        break;
      }
      
      // optional .PBOfficialList OfficialList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_OfficialList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_officiallist()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageOfficialInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageOfficialInfoResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  // optional .PBOfficialList OfficialList = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->officiallist(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageOfficialInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  // optional .PBOfficialList OfficialList = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->officiallist(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageOfficialInfoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional .PBOfficialList OfficialList = 3;
    if (has_officiallist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->officiallist());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageOfficialInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageOfficialInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageOfficialInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageOfficialInfoResponse::MergeFrom(const CMessageOfficialInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      mutable_officiallist()->::PBOfficialList::MergeFrom(from.officiallist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageOfficialInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageOfficialInfoResponse::CopyFrom(const CMessageOfficialInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageOfficialInfoResponse::Swap(CMessageOfficialInfoResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(result_, other->result_);
    std::swap(officiallist_, other->officiallist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageOfficialInfoResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageOfficialInfoResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageOfficialInfoResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageOfficialInfoResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageUseTimeRequest::kCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageUseTimeRequest::CMessageUseTimeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUseTimeRequest::InitAsDefaultInstance() {}

CMessageUseTimeRequest::CMessageUseTimeRequest(const CMessageUseTimeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUseTimeRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUseTimeRequest::~CMessageUseTimeRequest() {
  SharedDtor();
}

void CMessageUseTimeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageUseTimeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUseTimeRequest_descriptor_;
}

const CMessageUseTimeRequest& CMessageUseTimeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageUseTimeRequest* CMessageUseTimeRequest::default_instance_ = NULL;

CMessageUseTimeRequest* CMessageUseTimeRequest::New() const {
  return new CMessageUseTimeRequest;
}

void CMessageUseTimeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUseTimeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUseTimeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUseTimeRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUseTimeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUseTimeRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUseTimeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUseTimeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUseTimeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUseTimeRequest::MergeFrom(const CMessageUseTimeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUseTimeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUseTimeRequest::CopyFrom(const CMessageUseTimeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUseTimeRequest::Swap(CMessageUseTimeRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUseTimeRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUseTimeRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUseTimeRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUseTimeRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageUseTimeResponse::kCharIDFieldNumber;
const int CMessageUseTimeResponse::kResultFieldNumber;
const int CMessageUseTimeResponse::kOfficialDataFieldNumber;
#endif  // !_MSC_VER

CMessageUseTimeResponse::CMessageUseTimeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUseTimeResponse::InitAsDefaultInstance() {  officialdata_ = const_cast< ::PBOfficialData*>(&::PBOfficialData::default_instance());
}

CMessageUseTimeResponse::CMessageUseTimeResponse(const CMessageUseTimeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUseTimeResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  result_ = 0u;
  officialdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUseTimeResponse::~CMessageUseTimeResponse() {
  SharedDtor();
}

void CMessageUseTimeResponse::SharedDtor() {
  if (this != default_instance_) {
    delete officialdata_;
  }
}

const ::google::protobuf::Descriptor* CMessageUseTimeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUseTimeResponse_descriptor_;
}

const CMessageUseTimeResponse& CMessageUseTimeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageUseTimeResponse* CMessageUseTimeResponse::default_instance_ = NULL;

CMessageUseTimeResponse* CMessageUseTimeResponse::New() const {
  return new CMessageUseTimeResponse;
}

void CMessageUseTimeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    result_ = 0u;
    if (_has_bit(2)) {
      if (officialdata_ != NULL) officialdata_->::PBOfficialData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUseTimeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_OfficialData;
        break;
      }
      
      // optional .PBOfficialData OfficialData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_OfficialData:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_officialdata()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUseTimeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUseTimeResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  // optional .PBOfficialData OfficialData = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->officialdata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUseTimeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  // optional .PBOfficialData OfficialData = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->officialdata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUseTimeResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional .PBOfficialData OfficialData = 3;
    if (has_officialdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->officialdata());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUseTimeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUseTimeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUseTimeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUseTimeResponse::MergeFrom(const CMessageUseTimeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      mutable_officialdata()->::PBOfficialData::MergeFrom(from.officialdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUseTimeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUseTimeResponse::CopyFrom(const CMessageUseTimeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUseTimeResponse::Swap(CMessageUseTimeResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(result_, other->result_);
    std::swap(officialdata_, other->officialdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUseTimeResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUseTimeResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUseTimeResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUseTimeResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageWorldQuestRequest::kCharIDFieldNumber;
const int CMessageWorldQuestRequest::kWorldIDFieldNumber;
const int CMessageWorldQuestRequest::kOpTypeFieldNumber;
const int CMessageWorldQuestRequest::kNPCEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageWorldQuestRequest::CMessageWorldQuestRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageWorldQuestRequest::InitAsDefaultInstance() {}

CMessageWorldQuestRequest::CMessageWorldQuestRequest(const CMessageWorldQuestRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageWorldQuestRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  worldid_ = 0u;
  optype_ = 0u;
  npcentityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageWorldQuestRequest::~CMessageWorldQuestRequest() {
  SharedDtor();
}

void CMessageWorldQuestRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageWorldQuestRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageWorldQuestRequest_descriptor_;
}

const CMessageWorldQuestRequest& CMessageWorldQuestRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageWorldQuestRequest* CMessageWorldQuestRequest::default_instance_ = NULL;

CMessageWorldQuestRequest* CMessageWorldQuestRequest::New() const {
  return new CMessageWorldQuestRequest;
}

void CMessageWorldQuestRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    worldid_ = 0u;
    optype_ = 0u;
    npcentityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageWorldQuestRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_WorldID;
        break;
      }
      
      // optional uint32 WorldID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WorldID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &worldid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_OpType;
        break;
      }
      
      // optional uint32 OpType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &optype_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_NPCEntityID;
        break;
      }
      
      // optional uint32 NPCEntityID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NPCEntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcentityid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageWorldQuestRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageWorldQuestRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 WorldID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->worldid(), output);
  }
  
  // optional uint32 OpType = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->optype(), output);
  }
  
  // optional uint32 NPCEntityID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->npcentityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageWorldQuestRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 WorldID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->worldid(), target);
  }
  
  // optional uint32 OpType = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->optype(), target);
  }
  
  // optional uint32 NPCEntityID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->npcentityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageWorldQuestRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 WorldID = 2;
    if (has_worldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->worldid());
    }
    
    // optional uint32 OpType = 3;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->optype());
    }
    
    // optional uint32 NPCEntityID = 4;
    if (has_npcentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcentityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageWorldQuestRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageWorldQuestRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageWorldQuestRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageWorldQuestRequest::MergeFrom(const CMessageWorldQuestRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_worldid(from.worldid());
    }
    if (from._has_bit(2)) {
      set_optype(from.optype());
    }
    if (from._has_bit(3)) {
      set_npcentityid(from.npcentityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageWorldQuestRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageWorldQuestRequest::CopyFrom(const CMessageWorldQuestRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageWorldQuestRequest::Swap(CMessageWorldQuestRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(worldid_, other->worldid_);
    std::swap(optype_, other->optype_);
    std::swap(npcentityid_, other->npcentityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageWorldQuestRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageWorldQuestRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageWorldQuestRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageWorldQuestRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageWorldQuestResponse::kCharIDFieldNumber;
const int CMessageWorldQuestResponse::kResultFieldNumber;
const int CMessageWorldQuestResponse::kWorldIDFieldNumber;
const int CMessageWorldQuestResponse::kOpTypeFieldNumber;
#endif  // !_MSC_VER

CMessageWorldQuestResponse::CMessageWorldQuestResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageWorldQuestResponse::InitAsDefaultInstance() {}

CMessageWorldQuestResponse::CMessageWorldQuestResponse(const CMessageWorldQuestResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageWorldQuestResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  result_ = 0u;
  worldid_ = 0u;
  optype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageWorldQuestResponse::~CMessageWorldQuestResponse() {
  SharedDtor();
}

void CMessageWorldQuestResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageWorldQuestResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageWorldQuestResponse_descriptor_;
}

const CMessageWorldQuestResponse& CMessageWorldQuestResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageWorldQuestResponse* CMessageWorldQuestResponse::default_instance_ = NULL;

CMessageWorldQuestResponse* CMessageWorldQuestResponse::New() const {
  return new CMessageWorldQuestResponse;
}

void CMessageWorldQuestResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    result_ = 0u;
    worldid_ = 0u;
    optype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageWorldQuestResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_WorldID;
        break;
      }
      
      // optional uint32 WorldID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WorldID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &worldid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_OpType;
        break;
      }
      
      // optional uint32 OpType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &optype_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageWorldQuestResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageWorldQuestResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  // optional uint32 WorldID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->worldid(), output);
  }
  
  // optional uint32 OpType = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->optype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageWorldQuestResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  // optional uint32 WorldID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->worldid(), target);
  }
  
  // optional uint32 OpType = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->optype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageWorldQuestResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 WorldID = 3;
    if (has_worldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->worldid());
    }
    
    // optional uint32 OpType = 4;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->optype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageWorldQuestResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageWorldQuestResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageWorldQuestResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageWorldQuestResponse::MergeFrom(const CMessageWorldQuestResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_worldid(from.worldid());
    }
    if (from._has_bit(3)) {
      set_optype(from.optype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageWorldQuestResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageWorldQuestResponse::CopyFrom(const CMessageWorldQuestResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageWorldQuestResponse::Swap(CMessageWorldQuestResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(result_, other->result_);
    std::swap(worldid_, other->worldid_);
    std::swap(optype_, other->optype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageWorldQuestResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageWorldQuestResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageWorldQuestResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageWorldQuestResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageWorldAnswerRequest::kCharIDFieldNumber;
const int CMessageWorldAnswerRequest::kWorldIDFieldNumber;
const int CMessageWorldAnswerRequest::kOpTypeFieldNumber;
const int CMessageWorldAnswerRequest::kAnswerFieldNumber;
#endif  // !_MSC_VER

CMessageWorldAnswerRequest::CMessageWorldAnswerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageWorldAnswerRequest::InitAsDefaultInstance() {}

CMessageWorldAnswerRequest::CMessageWorldAnswerRequest(const CMessageWorldAnswerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageWorldAnswerRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  worldid_ = 0u;
  optype_ = 0u;
  answer_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageWorldAnswerRequest::~CMessageWorldAnswerRequest() {
  SharedDtor();
}

void CMessageWorldAnswerRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageWorldAnswerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageWorldAnswerRequest_descriptor_;
}

const CMessageWorldAnswerRequest& CMessageWorldAnswerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageWorldAnswerRequest* CMessageWorldAnswerRequest::default_instance_ = NULL;

CMessageWorldAnswerRequest* CMessageWorldAnswerRequest::New() const {
  return new CMessageWorldAnswerRequest;
}

void CMessageWorldAnswerRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    worldid_ = 0u;
    optype_ = 0u;
    answer_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageWorldAnswerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_WorldID;
        break;
      }
      
      // optional uint32 WorldID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WorldID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &worldid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_OpType;
        break;
      }
      
      // optional uint32 OpType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &optype_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Answer;
        break;
      }
      
      // optional uint32 Answer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Answer:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &answer_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageWorldAnswerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageWorldAnswerRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 WorldID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->worldid(), output);
  }
  
  // optional uint32 OpType = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->optype(), output);
  }
  
  // optional uint32 Answer = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->answer(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageWorldAnswerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 WorldID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->worldid(), target);
  }
  
  // optional uint32 OpType = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->optype(), target);
  }
  
  // optional uint32 Answer = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->answer(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageWorldAnswerRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 WorldID = 2;
    if (has_worldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->worldid());
    }
    
    // optional uint32 OpType = 3;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->optype());
    }
    
    // optional uint32 Answer = 4;
    if (has_answer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->answer());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageWorldAnswerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageWorldAnswerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageWorldAnswerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageWorldAnswerRequest::MergeFrom(const CMessageWorldAnswerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_worldid(from.worldid());
    }
    if (from._has_bit(2)) {
      set_optype(from.optype());
    }
    if (from._has_bit(3)) {
      set_answer(from.answer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageWorldAnswerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageWorldAnswerRequest::CopyFrom(const CMessageWorldAnswerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageWorldAnswerRequest::Swap(CMessageWorldAnswerRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(worldid_, other->worldid_);
    std::swap(optype_, other->optype_);
    std::swap(answer_, other->answer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageWorldAnswerRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageWorldAnswerRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageWorldAnswerRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageWorldAnswerRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageWorldAnswerResponse::kCharIDFieldNumber;
const int CMessageWorldAnswerResponse::kResultFieldNumber;
const int CMessageWorldAnswerResponse::kWorldIDFieldNumber;
const int CMessageWorldAnswerResponse::kOpTypeFieldNumber;
const int CMessageWorldAnswerResponse::kAnswerFieldNumber;
#endif  // !_MSC_VER

CMessageWorldAnswerResponse::CMessageWorldAnswerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageWorldAnswerResponse::InitAsDefaultInstance() {}

CMessageWorldAnswerResponse::CMessageWorldAnswerResponse(const CMessageWorldAnswerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageWorldAnswerResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  result_ = 0u;
  worldid_ = 0u;
  optype_ = 0u;
  answer_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageWorldAnswerResponse::~CMessageWorldAnswerResponse() {
  SharedDtor();
}

void CMessageWorldAnswerResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageWorldAnswerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageWorldAnswerResponse_descriptor_;
}

const CMessageWorldAnswerResponse& CMessageWorldAnswerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageWorldAnswerResponse* CMessageWorldAnswerResponse::default_instance_ = NULL;

CMessageWorldAnswerResponse* CMessageWorldAnswerResponse::New() const {
  return new CMessageWorldAnswerResponse;
}

void CMessageWorldAnswerResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    result_ = 0u;
    worldid_ = 0u;
    optype_ = 0u;
    answer_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageWorldAnswerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_WorldID;
        break;
      }
      
      // optional uint32 WorldID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WorldID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &worldid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_OpType;
        break;
      }
      
      // optional uint32 OpType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &optype_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Answer;
        break;
      }
      
      // optional uint32 Answer = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Answer:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &answer_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageWorldAnswerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageWorldAnswerResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  // optional uint32 WorldID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->worldid(), output);
  }
  
  // optional uint32 OpType = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->optype(), output);
  }
  
  // optional uint32 Answer = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->answer(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageWorldAnswerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  // optional uint32 WorldID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->worldid(), target);
  }
  
  // optional uint32 OpType = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->optype(), target);
  }
  
  // optional uint32 Answer = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->answer(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageWorldAnswerResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 WorldID = 3;
    if (has_worldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->worldid());
    }
    
    // optional uint32 OpType = 4;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->optype());
    }
    
    // optional uint32 Answer = 5;
    if (has_answer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->answer());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageWorldAnswerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageWorldAnswerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageWorldAnswerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageWorldAnswerResponse::MergeFrom(const CMessageWorldAnswerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_worldid(from.worldid());
    }
    if (from._has_bit(3)) {
      set_optype(from.optype());
    }
    if (from._has_bit(4)) {
      set_answer(from.answer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageWorldAnswerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageWorldAnswerResponse::CopyFrom(const CMessageWorldAnswerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageWorldAnswerResponse::Swap(CMessageWorldAnswerResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(result_, other->result_);
    std::swap(worldid_, other->worldid_);
    std::swap(optype_, other->optype_);
    std::swap(answer_, other->answer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageWorldAnswerResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageWorldAnswerResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageWorldAnswerResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageWorldAnswerResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageWorldAnswerNotify::kCharIDFieldNumber;
const int CMessageWorldAnswerNotify::kSrcWorldIDFieldNumber;
const int CMessageWorldAnswerNotify::kDesWorldIDFieldNumber;
const int CMessageWorldAnswerNotify::kOpTypeFieldNumber;
const int CMessageWorldAnswerNotify::kAnswerFieldNumber;
#endif  // !_MSC_VER

CMessageWorldAnswerNotify::CMessageWorldAnswerNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageWorldAnswerNotify::InitAsDefaultInstance() {}

CMessageWorldAnswerNotify::CMessageWorldAnswerNotify(const CMessageWorldAnswerNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageWorldAnswerNotify::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  srcworldid_ = 0u;
  desworldid_ = 0u;
  optype_ = 0u;
  answer_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageWorldAnswerNotify::~CMessageWorldAnswerNotify() {
  SharedDtor();
}

void CMessageWorldAnswerNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageWorldAnswerNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageWorldAnswerNotify_descriptor_;
}

const CMessageWorldAnswerNotify& CMessageWorldAnswerNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageWorldAnswerNotify* CMessageWorldAnswerNotify::default_instance_ = NULL;

CMessageWorldAnswerNotify* CMessageWorldAnswerNotify::New() const {
  return new CMessageWorldAnswerNotify;
}

void CMessageWorldAnswerNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    srcworldid_ = 0u;
    desworldid_ = 0u;
    optype_ = 0u;
    answer_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageWorldAnswerNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_SrcWorldID;
        break;
      }
      
      // optional uint32 SrcWorldID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SrcWorldID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srcworldid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_DesWorldID;
        break;
      }
      
      // optional uint32 DesWorldID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DesWorldID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &desworldid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_OpType;
        break;
      }
      
      // optional uint32 OpType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &optype_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Answer;
        break;
      }
      
      // optional uint32 Answer = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Answer:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &answer_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageWorldAnswerNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageWorldAnswerNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 SrcWorldID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->srcworldid(), output);
  }
  
  // optional uint32 DesWorldID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->desworldid(), output);
  }
  
  // optional uint32 OpType = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->optype(), output);
  }
  
  // optional uint32 Answer = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->answer(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageWorldAnswerNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 SrcWorldID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->srcworldid(), target);
  }
  
  // optional uint32 DesWorldID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->desworldid(), target);
  }
  
  // optional uint32 OpType = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->optype(), target);
  }
  
  // optional uint32 Answer = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->answer(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageWorldAnswerNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 SrcWorldID = 2;
    if (has_srcworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srcworldid());
    }
    
    // optional uint32 DesWorldID = 3;
    if (has_desworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->desworldid());
    }
    
    // optional uint32 OpType = 4;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->optype());
    }
    
    // optional uint32 Answer = 5;
    if (has_answer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->answer());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageWorldAnswerNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageWorldAnswerNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageWorldAnswerNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageWorldAnswerNotify::MergeFrom(const CMessageWorldAnswerNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_srcworldid(from.srcworldid());
    }
    if (from._has_bit(2)) {
      set_desworldid(from.desworldid());
    }
    if (from._has_bit(3)) {
      set_optype(from.optype());
    }
    if (from._has_bit(4)) {
      set_answer(from.answer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageWorldAnswerNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageWorldAnswerNotify::CopyFrom(const CMessageWorldAnswerNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageWorldAnswerNotify::Swap(CMessageWorldAnswerNotify* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(srcworldid_, other->srcworldid_);
    std::swap(desworldid_, other->desworldid_);
    std::swap(optype_, other->optype_);
    std::swap(answer_, other->answer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageWorldAnswerNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageWorldAnswerNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageWorldAnswerNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageWorldAnswerNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageWorldQuestNotify::kCharIDFieldNumber;
const int CMessageWorldQuestNotify::kWorldIDFieldNumber;
const int CMessageWorldQuestNotify::kOpTypeFieldNumber;
#endif  // !_MSC_VER

CMessageWorldQuestNotify::CMessageWorldQuestNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageWorldQuestNotify::InitAsDefaultInstance() {}

CMessageWorldQuestNotify::CMessageWorldQuestNotify(const CMessageWorldQuestNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageWorldQuestNotify::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  worldid_ = 0u;
  optype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageWorldQuestNotify::~CMessageWorldQuestNotify() {
  SharedDtor();
}

void CMessageWorldQuestNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageWorldQuestNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageWorldQuestNotify_descriptor_;
}

const CMessageWorldQuestNotify& CMessageWorldQuestNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageWorldQuestNotify* CMessageWorldQuestNotify::default_instance_ = NULL;

CMessageWorldQuestNotify* CMessageWorldQuestNotify::New() const {
  return new CMessageWorldQuestNotify;
}

void CMessageWorldQuestNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    worldid_ = 0u;
    optype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageWorldQuestNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_WorldID;
        break;
      }
      
      // optional uint32 WorldID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WorldID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &worldid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_OpType;
        break;
      }
      
      // optional uint32 OpType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &optype_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageWorldQuestNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageWorldQuestNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 WorldID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->worldid(), output);
  }
  
  // optional uint32 OpType = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->optype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageWorldQuestNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 WorldID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->worldid(), target);
  }
  
  // optional uint32 OpType = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->optype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageWorldQuestNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 WorldID = 2;
    if (has_worldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->worldid());
    }
    
    // optional uint32 OpType = 3;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->optype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageWorldQuestNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageWorldQuestNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageWorldQuestNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageWorldQuestNotify::MergeFrom(const CMessageWorldQuestNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_worldid(from.worldid());
    }
    if (from._has_bit(2)) {
      set_optype(from.optype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageWorldQuestNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageWorldQuestNotify::CopyFrom(const CMessageWorldQuestNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageWorldQuestNotify::Swap(CMessageWorldQuestNotify* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(worldid_, other->worldid_);
    std::swap(optype_, other->optype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageWorldQuestNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageWorldQuestNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageWorldQuestNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageWorldQuestNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageWorldResultNotify::kCharIDFieldNumber;
const int CMessageWorldResultNotify::kResultFieldNumber;
const int CMessageWorldResultNotify::kSrcWorldIDFieldNumber;
const int CMessageWorldResultNotify::kDesWorldIDFieldNumber;
const int CMessageWorldResultNotify::kOpTypeFieldNumber;
#endif  // !_MSC_VER

CMessageWorldResultNotify::CMessageWorldResultNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageWorldResultNotify::InitAsDefaultInstance() {}

CMessageWorldResultNotify::CMessageWorldResultNotify(const CMessageWorldResultNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageWorldResultNotify::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  result_ = 0u;
  srcworldid_ = 0u;
  desworldid_ = 0u;
  optype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageWorldResultNotify::~CMessageWorldResultNotify() {
  SharedDtor();
}

void CMessageWorldResultNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageWorldResultNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageWorldResultNotify_descriptor_;
}

const CMessageWorldResultNotify& CMessageWorldResultNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageWorldResultNotify* CMessageWorldResultNotify::default_instance_ = NULL;

CMessageWorldResultNotify* CMessageWorldResultNotify::New() const {
  return new CMessageWorldResultNotify;
}

void CMessageWorldResultNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    result_ = 0u;
    srcworldid_ = 0u;
    desworldid_ = 0u;
    optype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageWorldResultNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_SrcWorldID;
        break;
      }
      
      // optional uint32 SrcWorldID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SrcWorldID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srcworldid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_DesWorldID;
        break;
      }
      
      // optional uint32 DesWorldID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DesWorldID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &desworldid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_OpType;
        break;
      }
      
      // optional uint32 OpType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &optype_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageWorldResultNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageWorldResultNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  // optional uint32 SrcWorldID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->srcworldid(), output);
  }
  
  // optional uint32 DesWorldID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->desworldid(), output);
  }
  
  // optional uint32 OpType = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->optype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageWorldResultNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  // optional uint32 SrcWorldID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->srcworldid(), target);
  }
  
  // optional uint32 DesWorldID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->desworldid(), target);
  }
  
  // optional uint32 OpType = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->optype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageWorldResultNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 SrcWorldID = 3;
    if (has_srcworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srcworldid());
    }
    
    // optional uint32 DesWorldID = 4;
    if (has_desworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->desworldid());
    }
    
    // optional uint32 OpType = 5;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->optype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageWorldResultNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageWorldResultNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageWorldResultNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageWorldResultNotify::MergeFrom(const CMessageWorldResultNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_srcworldid(from.srcworldid());
    }
    if (from._has_bit(3)) {
      set_desworldid(from.desworldid());
    }
    if (from._has_bit(4)) {
      set_optype(from.optype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageWorldResultNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageWorldResultNotify::CopyFrom(const CMessageWorldResultNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageWorldResultNotify::Swap(CMessageWorldResultNotify* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(result_, other->result_);
    std::swap(srcworldid_, other->srcworldid_);
    std::swap(desworldid_, other->desworldid_);
    std::swap(optype_, other->optype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageWorldResultNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageWorldResultNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageWorldResultNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageWorldResultNotify_reflection_;
}

// ===================================================================

const ::std::string CWorldStatusData::_default_kingname_;
const ::std::string CWorldStatusData::_default_corpsname_;
const ::std::string CWorldStatusData::_default_unionname_;
#ifndef _MSC_VER
const int CWorldStatusData::kWorldIDFieldNumber;
const int CWorldStatusData::kFriendsFieldNumber;
const int CWorldStatusData::kNationFieldNumber;
const int CWorldStatusData::kKingIDFieldNumber;
const int CWorldStatusData::kKingNameFieldNumber;
const int CWorldStatusData::kCorpsIDFieldNumber;
const int CWorldStatusData::kCorpsNameFieldNumber;
const int CWorldStatusData::kUnionIDFieldNumber;
const int CWorldStatusData::kUnionNameFieldNumber;
#endif  // !_MSC_VER

CWorldStatusData::CWorldStatusData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWorldStatusData::InitAsDefaultInstance() {}

CWorldStatusData::CWorldStatusData(const CWorldStatusData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWorldStatusData::SharedCtor() {
  _cached_size_ = 0;
  worldid_ = 0u;
  friends_ = 0u;
  nation_ = 0u;
  kingid_ = 0u;
  kingname_ = const_cast< ::std::string*>(&_default_kingname_);
  corpsid_ = 0u;
  corpsname_ = const_cast< ::std::string*>(&_default_corpsname_);
  unionid_ = 0u;
  unionname_ = const_cast< ::std::string*>(&_default_unionname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWorldStatusData::~CWorldStatusData() {
  SharedDtor();
}

void CWorldStatusData::SharedDtor() {
  if (kingname_ != &_default_kingname_) {
    delete kingname_;
  }
  if (corpsname_ != &_default_corpsname_) {
    delete corpsname_;
  }
  if (unionname_ != &_default_unionname_) {
    delete unionname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CWorldStatusData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWorldStatusData_descriptor_;
}

const CWorldStatusData& CWorldStatusData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CWorldStatusData* CWorldStatusData::default_instance_ = NULL;

CWorldStatusData* CWorldStatusData::New() const {
  return new CWorldStatusData;
}

void CWorldStatusData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    worldid_ = 0u;
    friends_ = 0u;
    nation_ = 0u;
    kingid_ = 0u;
    if (_has_bit(4)) {
      if (kingname_ != &_default_kingname_) {
        kingname_->clear();
      }
    }
    corpsid_ = 0u;
    if (_has_bit(6)) {
      if (corpsname_ != &_default_corpsname_) {
        corpsname_->clear();
      }
    }
    unionid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (unionname_ != &_default_unionname_) {
        unionname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWorldStatusData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 WorldID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &worldid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Friends;
        break;
      }
      
      // optional uint32 Friends = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Friends:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &friends_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Nation;
        break;
      }
      
      // optional uint32 Nation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Nation:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &nation_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_KingID;
        break;
      }
      
      // optional uint32 KingID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_KingID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &kingid_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_KingName;
        break;
      }
      
      // optional string KingName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_KingName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_kingname()));
        if (input->ExpectTag(48)) goto parse_CorpsID;
        break;
      }
      
      // optional uint32 CorpsID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(5);
        if (input->ExpectTag(58)) goto parse_CorpsName;
        break;
      }
      
      // optional string CorpsName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_corpsname()));
        if (input->ExpectTag(64)) goto parse_UnionID;
        break;
      }
      
      // optional uint32 UnionID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UnionID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &unionid_));
        _set_bit(7);
        if (input->ExpectTag(74)) goto parse_UnionName;
        break;
      }
      
      // optional string UnionName = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_UnionName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_unionname()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWorldStatusData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CWorldStatusData::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 WorldID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->worldid(), output);
  }
  
  // optional uint32 Friends = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->friends(), output);
  }
  
  // optional uint32 Nation = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->nation(), output);
  }
  
  // optional uint32 KingID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->kingid(), output);
  }
  
  // optional string KingName = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->kingname(), output);
  }
  
  // optional uint32 CorpsID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->corpsid(), output);
  }
  
  // optional string CorpsName = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteString(7, this->corpsname(), output);
  }
  
  // optional uint32 UnionID = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->unionid(), output);
  }
  
  // optional string UnionName = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteString(9, this->unionname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWorldStatusData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 WorldID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->worldid(), target);
  }
  
  // optional uint32 Friends = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->friends(), target);
  }
  
  // optional uint32 Nation = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->nation(), target);
  }
  
  // optional uint32 KingID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->kingid(), target);
  }
  
  // optional string KingName = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->kingname(), target);
  }
  
  // optional uint32 CorpsID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->corpsid(), target);
  }
  
  // optional string CorpsName = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(7, this->corpsname(), target);
  }
  
  // optional uint32 UnionID = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->unionid(), target);
  }
  
  // optional string UnionName = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(9, this->unionname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWorldStatusData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 WorldID = 1;
    if (has_worldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->worldid());
    }
    
    // optional uint32 Friends = 2;
    if (has_friends()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->friends());
    }
    
    // optional uint32 Nation = 3;
    if (has_nation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->nation());
    }
    
    // optional uint32 KingID = 4;
    if (has_kingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->kingid());
    }
    
    // optional string KingName = 5;
    if (has_kingname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->kingname());
    }
    
    // optional uint32 CorpsID = 6;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
    // optional string CorpsName = 7;
    if (has_corpsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->corpsname());
    }
    
    // optional uint32 UnionID = 8;
    if (has_unionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->unionid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string UnionName = 9;
    if (has_unionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->unionname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CWorldStatusData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWorldStatusData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWorldStatusData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWorldStatusData::MergeFrom(const CWorldStatusData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_worldid(from.worldid());
    }
    if (from._has_bit(1)) {
      set_friends(from.friends());
    }
    if (from._has_bit(2)) {
      set_nation(from.nation());
    }
    if (from._has_bit(3)) {
      set_kingid(from.kingid());
    }
    if (from._has_bit(4)) {
      set_kingname(from.kingname());
    }
    if (from._has_bit(5)) {
      set_corpsid(from.corpsid());
    }
    if (from._has_bit(6)) {
      set_corpsname(from.corpsname());
    }
    if (from._has_bit(7)) {
      set_unionid(from.unionid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_unionname(from.unionname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWorldStatusData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorldStatusData::CopyFrom(const CWorldStatusData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorldStatusData::Swap(CWorldStatusData* other) {
  if (other != this) {
    std::swap(worldid_, other->worldid_);
    std::swap(friends_, other->friends_);
    std::swap(nation_, other->nation_);
    std::swap(kingid_, other->kingid_);
    std::swap(kingname_, other->kingname_);
    std::swap(corpsid_, other->corpsid_);
    std::swap(corpsname_, other->corpsname_);
    std::swap(unionid_, other->unionid_);
    std::swap(unionname_, other->unionname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CWorldStatusData::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CWorldStatusData::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CWorldStatusData::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CWorldStatusData_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageWorldInfoRequest::kCharIDFieldNumber;
const int CMessageWorldInfoRequest::kWorldIDFieldNumber;
#endif  // !_MSC_VER

CMessageWorldInfoRequest::CMessageWorldInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageWorldInfoRequest::InitAsDefaultInstance() {}

CMessageWorldInfoRequest::CMessageWorldInfoRequest(const CMessageWorldInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageWorldInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  worldid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageWorldInfoRequest::~CMessageWorldInfoRequest() {
  SharedDtor();
}

void CMessageWorldInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageWorldInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageWorldInfoRequest_descriptor_;
}

const CMessageWorldInfoRequest& CMessageWorldInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageWorldInfoRequest* CMessageWorldInfoRequest::default_instance_ = NULL;

CMessageWorldInfoRequest* CMessageWorldInfoRequest::New() const {
  return new CMessageWorldInfoRequest;
}

void CMessageWorldInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    worldid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageWorldInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_WorldID;
        break;
      }
      
      // optional uint32 WorldID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WorldID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &worldid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageWorldInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageWorldInfoRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 WorldID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->worldid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageWorldInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 WorldID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->worldid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageWorldInfoRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 WorldID = 2;
    if (has_worldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->worldid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageWorldInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageWorldInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageWorldInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageWorldInfoRequest::MergeFrom(const CMessageWorldInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_worldid(from.worldid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageWorldInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageWorldInfoRequest::CopyFrom(const CMessageWorldInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageWorldInfoRequest::Swap(CMessageWorldInfoRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(worldid_, other->worldid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageWorldInfoRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageWorldInfoRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageWorldInfoRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageWorldInfoRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageWorldInfoResponse::kCharIDFieldNumber;
const int CMessageWorldInfoResponse::kResultFieldNumber;
const int CMessageWorldInfoResponse::kWorldIDFieldNumber;
const int CMessageWorldInfoResponse::kWorldDataFieldNumber;
#endif  // !_MSC_VER

CMessageWorldInfoResponse::CMessageWorldInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageWorldInfoResponse::InitAsDefaultInstance() {}

CMessageWorldInfoResponse::CMessageWorldInfoResponse(const CMessageWorldInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageWorldInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  result_ = 0u;
  worldid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageWorldInfoResponse::~CMessageWorldInfoResponse() {
  SharedDtor();
}

void CMessageWorldInfoResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageWorldInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageWorldInfoResponse_descriptor_;
}

const CMessageWorldInfoResponse& CMessageWorldInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageWorldInfoResponse* CMessageWorldInfoResponse::default_instance_ = NULL;

CMessageWorldInfoResponse* CMessageWorldInfoResponse::New() const {
  return new CMessageWorldInfoResponse;
}

void CMessageWorldInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    result_ = 0u;
    worldid_ = 0u;
  }
  worlddata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageWorldInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_WorldID;
        break;
      }
      
      // optional uint32 WorldID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WorldID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &worldid_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_WorldData;
        break;
      }
      
      // repeated .CWorldStatusData WorldData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_WorldData:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_worlddata()));
        if (input->ExpectTag(34)) goto parse_WorldData;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageWorldInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageWorldInfoResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  // optional uint32 WorldID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->worldid(), output);
  }
  
  // repeated .CWorldStatusData WorldData = 4;
  for (int i = 0; i < this->worlddata_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->worlddata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageWorldInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  // optional uint32 WorldID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->worldid(), target);
  }
  
  // repeated .CWorldStatusData WorldData = 4;
  for (int i = 0; i < this->worlddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(4, this->worlddata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageWorldInfoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 WorldID = 3;
    if (has_worldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->worldid());
    }
    
  }
  // repeated .CWorldStatusData WorldData = 4;
  total_size += 1 * this->worlddata_size();
  for (int i = 0; i < this->worlddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->worlddata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageWorldInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageWorldInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageWorldInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageWorldInfoResponse::MergeFrom(const CMessageWorldInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  worlddata_.MergeFrom(from.worlddata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_worldid(from.worldid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageWorldInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageWorldInfoResponse::CopyFrom(const CMessageWorldInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageWorldInfoResponse::Swap(CMessageWorldInfoResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(result_, other->result_);
    std::swap(worldid_, other->worldid_);
    worlddata_.Swap(&other->worlddata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageWorldInfoResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageWorldInfoResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageWorldInfoResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageWorldInfoResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageOfficialChangeNotify::_default_charname_;
#ifndef _MSC_VER
const int CMessageOfficialChangeNotify::kCharIDFieldNumber;
const int CMessageOfficialChangeNotify::kCharNameFieldNumber;
const int CMessageOfficialChangeNotify::kOfficialLevelFieldNumber;
const int CMessageOfficialChangeNotify::kOfficialOrderFieldNumber;
const int CMessageOfficialChangeNotify::kCountryIDFieldNumber;
const int CMessageOfficialChangeNotify::kTypeFieldNumber;
const int CMessageOfficialChangeNotify::kWorldIDFieldNumber;
#endif  // !_MSC_VER

CMessageOfficialChangeNotify::CMessageOfficialChangeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageOfficialChangeNotify::InitAsDefaultInstance() {}

CMessageOfficialChangeNotify::CMessageOfficialChangeNotify(const CMessageOfficialChangeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageOfficialChangeNotify::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  charname_ = const_cast< ::std::string*>(&_default_charname_);
  officiallevel_ = 0u;
  officialorder_ = 0u;
  countryid_ = 0u;
  type_ = 0u;
  worldid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageOfficialChangeNotify::~CMessageOfficialChangeNotify() {
  SharedDtor();
}

void CMessageOfficialChangeNotify::SharedDtor() {
  if (charname_ != &_default_charname_) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageOfficialChangeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageOfficialChangeNotify_descriptor_;
}

const CMessageOfficialChangeNotify& CMessageOfficialChangeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageOfficialChangeNotify* CMessageOfficialChangeNotify::default_instance_ = NULL;

CMessageOfficialChangeNotify* CMessageOfficialChangeNotify::New() const {
  return new CMessageOfficialChangeNotify;
}

void CMessageOfficialChangeNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (_has_bit(1)) {
      if (charname_ != &_default_charname_) {
        charname_->clear();
      }
    }
    officiallevel_ = 0u;
    officialorder_ = 0u;
    countryid_ = 0u;
    type_ = 0u;
    worldid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageOfficialChangeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_CharName;
        break;
      }
      
      // optional string CharName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CharName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_charname()));
        if (input->ExpectTag(24)) goto parse_OfficialLevel;
        break;
      }
      
      // optional uint32 OfficialLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OfficialLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &officiallevel_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_OfficialOrder;
        break;
      }
      
      // optional uint32 OfficialOrder = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OfficialOrder:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &officialorder_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_CountryID;
        break;
      }
      
      // optional uint32 CountryID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CountryID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &countryid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Type;
        break;
      }
      
      // optional uint32 Type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Type:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_WorldID;
        break;
      }
      
      // optional uint32 WorldID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WorldID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &worldid_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageOfficialChangeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageOfficialChangeNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional string CharName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->charname(), output);
  }
  
  // optional uint32 OfficialLevel = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->officiallevel(), output);
  }
  
  // optional uint32 OfficialOrder = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->officialorder(), output);
  }
  
  // optional uint32 CountryID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->countryid(), output);
  }
  
  // optional uint32 Type = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->type(), output);
  }
  
  // optional uint32 WorldID = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->worldid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageOfficialChangeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional string CharName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->charname(), target);
  }
  
  // optional uint32 OfficialLevel = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->officiallevel(), target);
  }
  
  // optional uint32 OfficialOrder = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->officialorder(), target);
  }
  
  // optional uint32 CountryID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->countryid(), target);
  }
  
  // optional uint32 Type = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->type(), target);
  }
  
  // optional uint32 WorldID = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->worldid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageOfficialChangeNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional string CharName = 2;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->charname());
    }
    
    // optional uint32 OfficialLevel = 3;
    if (has_officiallevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->officiallevel());
    }
    
    // optional uint32 OfficialOrder = 4;
    if (has_officialorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->officialorder());
    }
    
    // optional uint32 CountryID = 5;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->countryid());
    }
    
    // optional uint32 Type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
    // optional uint32 WorldID = 7;
    if (has_worldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->worldid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageOfficialChangeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageOfficialChangeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageOfficialChangeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageOfficialChangeNotify::MergeFrom(const CMessageOfficialChangeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_charname(from.charname());
    }
    if (from._has_bit(2)) {
      set_officiallevel(from.officiallevel());
    }
    if (from._has_bit(3)) {
      set_officialorder(from.officialorder());
    }
    if (from._has_bit(4)) {
      set_countryid(from.countryid());
    }
    if (from._has_bit(5)) {
      set_type(from.type());
    }
    if (from._has_bit(6)) {
      set_worldid(from.worldid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageOfficialChangeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageOfficialChangeNotify::CopyFrom(const CMessageOfficialChangeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageOfficialChangeNotify::Swap(CMessageOfficialChangeNotify* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(officiallevel_, other->officiallevel_);
    std::swap(officialorder_, other->officialorder_);
    std::swap(countryid_, other->countryid_);
    std::swap(type_, other->type_);
    std::swap(worldid_, other->worldid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageOfficialChangeNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageOfficialChangeNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageOfficialChangeNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageOfficialChangeNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessagePlayerGSInfoRequest::kSrcCharIDFieldNumber;
const int CMessagePlayerGSInfoRequest::kInfoCharIDFieldNumber;
#endif  // !_MSC_VER

CMessagePlayerGSInfoRequest::CMessagePlayerGSInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePlayerGSInfoRequest::InitAsDefaultInstance() {}

CMessagePlayerGSInfoRequest::CMessagePlayerGSInfoRequest(const CMessagePlayerGSInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePlayerGSInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePlayerGSInfoRequest::~CMessagePlayerGSInfoRequest() {
  SharedDtor();
}

void CMessagePlayerGSInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessagePlayerGSInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerGSInfoRequest_descriptor_;
}

const CMessagePlayerGSInfoRequest& CMessagePlayerGSInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePlayerGSInfoRequest* CMessagePlayerGSInfoRequest::default_instance_ = NULL;

CMessagePlayerGSInfoRequest* CMessagePlayerGSInfoRequest::New() const {
  return new CMessagePlayerGSInfoRequest;
}

void CMessagePlayerGSInfoRequest::Clear() {
  srccharid_.Clear();
  infocharid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePlayerGSInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated uint32 SrcCharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SrcCharID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_srccharid(value);
        if (input->ExpectTag(8)) goto parse_SrcCharID;
        if (input->ExpectTag(16)) goto parse_InfoCharID;
        break;
      }
      
      // repeated uint32 InfoCharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InfoCharID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_infocharid(value);
        if (input->ExpectTag(16)) goto parse_InfoCharID;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePlayerGSInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePlayerGSInfoRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated uint32 SrcCharID = 1;
  for (int i = 0; i < this->srccharid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->srccharid(i), output);
  }
  
  // repeated uint32 InfoCharID = 2;
  for (int i = 0; i < this->infocharid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->infocharid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePlayerGSInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 SrcCharID = 1;
  for (int i = 0; i < this->srccharid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->srccharid(i), target);
  }
  
  // repeated uint32 InfoCharID = 2;
  for (int i = 0; i < this->infocharid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->infocharid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePlayerGSInfoRequest::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 SrcCharID = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->srccharid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->srccharid(i));
    }
    total_size += 1 * this->srccharid_size() + data_size;
  }
  
  // repeated uint32 InfoCharID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->infocharid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->infocharid(i));
    }
    total_size += 1 * this->infocharid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePlayerGSInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePlayerGSInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePlayerGSInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePlayerGSInfoRequest::MergeFrom(const CMessagePlayerGSInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  srccharid_.MergeFrom(from.srccharid_);
  infocharid_.MergeFrom(from.infocharid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePlayerGSInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerGSInfoRequest::CopyFrom(const CMessagePlayerGSInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerGSInfoRequest::Swap(CMessagePlayerGSInfoRequest* other) {
  if (other != this) {
    srccharid_.Swap(&other->srccharid_);
    infocharid_.Swap(&other->infocharid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePlayerGSInfoRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePlayerGSInfoRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePlayerGSInfoRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerGSInfoRequest_reflection_;
}

// ===================================================================

const ::std::string PlayerGSInfo::_default_familyname_;
const ::std::string PlayerGSInfo::_default_corpsname_;
const ::std::string PlayerGSInfo::_default_unionname_;
#ifndef _MSC_VER
const int PlayerGSInfo::kCharIDFieldNumber;
const int PlayerGSInfo::kFamilyIDFieldNumber;
const int PlayerGSInfo::kFamilyNameFieldNumber;
const int PlayerGSInfo::kFamilyHeadFieldNumber;
const int PlayerGSInfo::kCorpsIDFieldNumber;
const int PlayerGSInfo::kCorpsNameFieldNumber;
const int PlayerGSInfo::kCorpsHeadFieldNumber;
const int PlayerGSInfo::kUnionIDFieldNumber;
const int PlayerGSInfo::kUnionNameFieldNumber;
const int PlayerGSInfo::kUnionHeadFieldNumber;
const int PlayerGSInfo::kCountryIDFieldNumber;
const int PlayerGSInfo::kOfficialIDFieldNumber;
const int PlayerGSInfo::kKingIDFieldNumber;
#endif  // !_MSC_VER

PlayerGSInfo::PlayerGSInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerGSInfo::InitAsDefaultInstance() {}

PlayerGSInfo::PlayerGSInfo(const PlayerGSInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerGSInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  familyid_ = 0u;
  familyname_ = const_cast< ::std::string*>(&_default_familyname_);
  familyhead_ = 0u;
  corpsid_ = 0u;
  corpsname_ = const_cast< ::std::string*>(&_default_corpsname_);
  corpshead_ = 0u;
  unionid_ = 0u;
  unionname_ = const_cast< ::std::string*>(&_default_unionname_);
  unionhead_ = 0u;
  countryid_ = 0u;
  officialid_ = 0u;
  kingid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerGSInfo::~PlayerGSInfo() {
  SharedDtor();
}

void PlayerGSInfo::SharedDtor() {
  if (familyname_ != &_default_familyname_) {
    delete familyname_;
  }
  if (corpsname_ != &_default_corpsname_) {
    delete corpsname_;
  }
  if (unionname_ != &_default_unionname_) {
    delete unionname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PlayerGSInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerGSInfo_descriptor_;
}

const PlayerGSInfo& PlayerGSInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

PlayerGSInfo* PlayerGSInfo::default_instance_ = NULL;

PlayerGSInfo* PlayerGSInfo::New() const {
  return new PlayerGSInfo;
}

void PlayerGSInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    familyid_ = 0u;
    if (_has_bit(2)) {
      if (familyname_ != &_default_familyname_) {
        familyname_->clear();
      }
    }
    familyhead_ = 0u;
    corpsid_ = 0u;
    if (_has_bit(5)) {
      if (corpsname_ != &_default_corpsname_) {
        corpsname_->clear();
      }
    }
    corpshead_ = 0u;
    unionid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (unionname_ != &_default_unionname_) {
        unionname_->clear();
      }
    }
    unionhead_ = 0u;
    countryid_ = 0u;
    officialid_ = 0u;
    kingid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerGSInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_FamilyID;
        break;
      }
      
      // optional uint32 FamilyID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_FamilyName;
        break;
      }
      
      // optional string FamilyName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FamilyName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_familyname()));
        if (input->ExpectTag(32)) goto parse_FamilyHead;
        break;
      }
      
      // optional uint32 FamilyHead = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyHead:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyhead_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_CorpsID;
        break;
      }
      
      // optional uint32 CorpsID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_CorpsName;
        break;
      }
      
      // optional string CorpsName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_corpsname()));
        if (input->ExpectTag(56)) goto parse_CorpsHead;
        break;
      }
      
      // optional uint32 CorpsHead = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsHead:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpshead_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_UnionID;
        break;
      }
      
      // optional uint32 UnionID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UnionID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &unionid_));
        _set_bit(7);
        if (input->ExpectTag(74)) goto parse_UnionName;
        break;
      }
      
      // optional string UnionName = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_UnionName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_unionname()));
        if (input->ExpectTag(80)) goto parse_UnionHead;
        break;
      }
      
      // optional uint32 UnionHead = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UnionHead:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &unionhead_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_CountryID;
        break;
      }
      
      // optional uint32 CountryID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CountryID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &countryid_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_OfficialID;
        break;
      }
      
      // optional uint32 OfficialID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OfficialID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &officialid_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_KingID;
        break;
      }
      
      // optional uint32 KingID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_KingID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &kingid_));
        _set_bit(12);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerGSInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PlayerGSInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 FamilyID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->familyid(), output);
  }
  
  // optional string FamilyName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->familyname(), output);
  }
  
  // optional uint32 FamilyHead = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->familyhead(), output);
  }
  
  // optional uint32 CorpsID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->corpsid(), output);
  }
  
  // optional string CorpsName = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteString(6, this->corpsname(), output);
  }
  
  // optional uint32 CorpsHead = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->corpshead(), output);
  }
  
  // optional uint32 UnionID = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->unionid(), output);
  }
  
  // optional string UnionName = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteString(9, this->unionname(), output);
  }
  
  // optional uint32 UnionHead = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->unionhead(), output);
  }
  
  // optional uint32 CountryID = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->countryid(), output);
  }
  
  // optional uint32 OfficialID = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->officialid(), output);
  }
  
  // optional uint32 KingID = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->kingid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerGSInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 FamilyID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->familyid(), target);
  }
  
  // optional string FamilyName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->familyname(), target);
  }
  
  // optional uint32 FamilyHead = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->familyhead(), target);
  }
  
  // optional uint32 CorpsID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->corpsid(), target);
  }
  
  // optional string CorpsName = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(6, this->corpsname(), target);
  }
  
  // optional uint32 CorpsHead = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->corpshead(), target);
  }
  
  // optional uint32 UnionID = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->unionid(), target);
  }
  
  // optional string UnionName = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(9, this->unionname(), target);
  }
  
  // optional uint32 UnionHead = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->unionhead(), target);
  }
  
  // optional uint32 CountryID = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->countryid(), target);
  }
  
  // optional uint32 OfficialID = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->officialid(), target);
  }
  
  // optional uint32 KingID = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->kingid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerGSInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 FamilyID = 2;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
    // optional string FamilyName = 3;
    if (has_familyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->familyname());
    }
    
    // optional uint32 FamilyHead = 4;
    if (has_familyhead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyhead());
    }
    
    // optional uint32 CorpsID = 5;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
    // optional string CorpsName = 6;
    if (has_corpsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->corpsname());
    }
    
    // optional uint32 CorpsHead = 7;
    if (has_corpshead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpshead());
    }
    
    // optional uint32 UnionID = 8;
    if (has_unionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->unionid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string UnionName = 9;
    if (has_unionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->unionname());
    }
    
    // optional uint32 UnionHead = 10;
    if (has_unionhead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->unionhead());
    }
    
    // optional uint32 CountryID = 11;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->countryid());
    }
    
    // optional uint32 OfficialID = 12;
    if (has_officialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->officialid());
    }
    
    // optional uint32 KingID = 13;
    if (has_kingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->kingid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PlayerGSInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerGSInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerGSInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerGSInfo::MergeFrom(const PlayerGSInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_familyid(from.familyid());
    }
    if (from._has_bit(2)) {
      set_familyname(from.familyname());
    }
    if (from._has_bit(3)) {
      set_familyhead(from.familyhead());
    }
    if (from._has_bit(4)) {
      set_corpsid(from.corpsid());
    }
    if (from._has_bit(5)) {
      set_corpsname(from.corpsname());
    }
    if (from._has_bit(6)) {
      set_corpshead(from.corpshead());
    }
    if (from._has_bit(7)) {
      set_unionid(from.unionid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_unionname(from.unionname());
    }
    if (from._has_bit(9)) {
      set_unionhead(from.unionhead());
    }
    if (from._has_bit(10)) {
      set_countryid(from.countryid());
    }
    if (from._has_bit(11)) {
      set_officialid(from.officialid());
    }
    if (from._has_bit(12)) {
      set_kingid(from.kingid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerGSInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerGSInfo::CopyFrom(const PlayerGSInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerGSInfo::Swap(PlayerGSInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(familyid_, other->familyid_);
    std::swap(familyname_, other->familyname_);
    std::swap(familyhead_, other->familyhead_);
    std::swap(corpsid_, other->corpsid_);
    std::swap(corpsname_, other->corpsname_);
    std::swap(corpshead_, other->corpshead_);
    std::swap(unionid_, other->unionid_);
    std::swap(unionname_, other->unionname_);
    std::swap(unionhead_, other->unionhead_);
    std::swap(countryid_, other->countryid_);
    std::swap(officialid_, other->officialid_);
    std::swap(kingid_, other->kingid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PlayerGSInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PlayerGSInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PlayerGSInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PlayerGSInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int WorldStatusInfo::kSrcWorldIDFieldNumber;
const int WorldStatusInfo::kDesWorldIDFieldNumber;
const int WorldStatusInfo::kStatusFieldNumber;
#endif  // !_MSC_VER

WorldStatusInfo::WorldStatusInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldStatusInfo::InitAsDefaultInstance() {}

WorldStatusInfo::WorldStatusInfo(const WorldStatusInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldStatusInfo::SharedCtor() {
  _cached_size_ = 0;
  srcworldid_ = 0u;
  desworldid_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldStatusInfo::~WorldStatusInfo() {
  SharedDtor();
}

void WorldStatusInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* WorldStatusInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldStatusInfo_descriptor_;
}

const WorldStatusInfo& WorldStatusInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

WorldStatusInfo* WorldStatusInfo::default_instance_ = NULL;

WorldStatusInfo* WorldStatusInfo::New() const {
  return new WorldStatusInfo;
}

void WorldStatusInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    srcworldid_ = 0u;
    desworldid_ = 0u;
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldStatusInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 SrcWorldID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srcworldid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_DesWorldID;
        break;
      }
      
      // optional uint32 DesWorldID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DesWorldID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &desworldid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Status;
        break;
      }
      
      // optional uint32 Status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Status:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &status_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldStatusInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    WorldStatusInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 SrcWorldID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->srcworldid(), output);
  }
  
  // optional uint32 DesWorldID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->desworldid(), output);
  }
  
  // optional uint32 Status = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldStatusInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 SrcWorldID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->srcworldid(), target);
  }
  
  // optional uint32 DesWorldID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->desworldid(), target);
  }
  
  // optional uint32 Status = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldStatusInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SrcWorldID = 1;
    if (has_srcworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srcworldid());
    }
    
    // optional uint32 DesWorldID = 2;
    if (has_desworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->desworldid());
    }
    
    // optional uint32 Status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void WorldStatusInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldStatusInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldStatusInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldStatusInfo::MergeFrom(const WorldStatusInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_srcworldid(from.srcworldid());
    }
    if (from._has_bit(1)) {
      set_desworldid(from.desworldid());
    }
    if (from._has_bit(2)) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldStatusInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldStatusInfo::CopyFrom(const WorldStatusInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldStatusInfo::Swap(WorldStatusInfo* other) {
  if (other != this) {
    std::swap(srcworldid_, other->srcworldid_);
    std::swap(desworldid_, other->desworldid_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool WorldStatusInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* WorldStatusInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* WorldStatusInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return WorldStatusInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int GTAndLWInfo::kSrcWorldIDFieldNumber;
const int GTAndLWInfo::kDesWorldIDFieldNumber;
const int GTAndLWInfo::kTargetTimeFieldNumber;
#endif  // !_MSC_VER

GTAndLWInfo::GTAndLWInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GTAndLWInfo::InitAsDefaultInstance() {}

GTAndLWInfo::GTAndLWInfo(const GTAndLWInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GTAndLWInfo::SharedCtor() {
  _cached_size_ = 0;
  srcworldid_ = 0u;
  desworldid_ = 0u;
  targettime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GTAndLWInfo::~GTAndLWInfo() {
  SharedDtor();
}

void GTAndLWInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* GTAndLWInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GTAndLWInfo_descriptor_;
}

const GTAndLWInfo& GTAndLWInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

GTAndLWInfo* GTAndLWInfo::default_instance_ = NULL;

GTAndLWInfo* GTAndLWInfo::New() const {
  return new GTAndLWInfo;
}

void GTAndLWInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    srcworldid_ = 0u;
    desworldid_ = 0u;
    targettime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GTAndLWInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 SrcWorldID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srcworldid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_DesWorldID;
        break;
      }
      
      // optional uint32 DesWorldID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DesWorldID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &desworldid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_TargetTime;
        break;
      }
      
      // optional uint32 TargetTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TargetTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &targettime_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GTAndLWInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    GTAndLWInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 SrcWorldID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->srcworldid(), output);
  }
  
  // optional uint32 DesWorldID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->desworldid(), output);
  }
  
  // optional uint32 TargetTime = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->targettime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GTAndLWInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 SrcWorldID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->srcworldid(), target);
  }
  
  // optional uint32 DesWorldID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->desworldid(), target);
  }
  
  // optional uint32 TargetTime = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->targettime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GTAndLWInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SrcWorldID = 1;
    if (has_srcworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srcworldid());
    }
    
    // optional uint32 DesWorldID = 2;
    if (has_desworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->desworldid());
    }
    
    // optional uint32 TargetTime = 3;
    if (has_targettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->targettime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void GTAndLWInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GTAndLWInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GTAndLWInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GTAndLWInfo::MergeFrom(const GTAndLWInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_srcworldid(from.srcworldid());
    }
    if (from._has_bit(1)) {
      set_desworldid(from.desworldid());
    }
    if (from._has_bit(2)) {
      set_targettime(from.targettime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GTAndLWInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GTAndLWInfo::CopyFrom(const GTAndLWInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GTAndLWInfo::Swap(GTAndLWInfo* other) {
  if (other != this) {
    std::swap(srcworldid_, other->srcworldid_);
    std::swap(desworldid_, other->desworldid_);
    std::swap(targettime_, other->targettime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool GTAndLWInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* GTAndLWInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* GTAndLWInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return GTAndLWInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessagePlayerGSInfoResponse::kSrcCharIDFieldNumber;
const int CMessagePlayerGSInfoResponse::kPlayerInfoFieldNumber;
const int CMessagePlayerGSInfoResponse::kWorldInfoFieldNumber;
#endif  // !_MSC_VER

CMessagePlayerGSInfoResponse::CMessagePlayerGSInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePlayerGSInfoResponse::InitAsDefaultInstance() {}

CMessagePlayerGSInfoResponse::CMessagePlayerGSInfoResponse(const CMessagePlayerGSInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePlayerGSInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  srccharid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePlayerGSInfoResponse::~CMessagePlayerGSInfoResponse() {
  SharedDtor();
}

void CMessagePlayerGSInfoResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessagePlayerGSInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerGSInfoResponse_descriptor_;
}

const CMessagePlayerGSInfoResponse& CMessagePlayerGSInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePlayerGSInfoResponse* CMessagePlayerGSInfoResponse::default_instance_ = NULL;

CMessagePlayerGSInfoResponse* CMessagePlayerGSInfoResponse::New() const {
  return new CMessagePlayerGSInfoResponse;
}

void CMessagePlayerGSInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    srccharid_ = 0u;
  }
  playerinfo_.Clear();
  worldinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePlayerGSInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 SrcCharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srccharid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_PlayerInfo;
        break;
      }
      
      // repeated .PlayerGSInfo PlayerInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_PlayerInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_playerinfo()));
        if (input->ExpectTag(18)) goto parse_PlayerInfo;
        if (input->ExpectTag(26)) goto parse_WorldInfo;
        break;
      }
      
      // repeated .WorldStatusInfo WorldInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_WorldInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_worldinfo()));
        if (input->ExpectTag(26)) goto parse_WorldInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePlayerGSInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePlayerGSInfoResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 SrcCharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->srccharid(), output);
  }
  
  // repeated .PlayerGSInfo PlayerInfo = 2;
  for (int i = 0; i < this->playerinfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->playerinfo(i), output);
  }
  
  // repeated .WorldStatusInfo WorldInfo = 3;
  for (int i = 0; i < this->worldinfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->worldinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePlayerGSInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 SrcCharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->srccharid(), target);
  }
  
  // repeated .PlayerGSInfo PlayerInfo = 2;
  for (int i = 0; i < this->playerinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->playerinfo(i), target);
  }
  
  // repeated .WorldStatusInfo WorldInfo = 3;
  for (int i = 0; i < this->worldinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->worldinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePlayerGSInfoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SrcCharID = 1;
    if (has_srccharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srccharid());
    }
    
  }
  // repeated .PlayerGSInfo PlayerInfo = 2;
  total_size += 1 * this->playerinfo_size();
  for (int i = 0; i < this->playerinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->playerinfo(i));
  }
  
  // repeated .WorldStatusInfo WorldInfo = 3;
  total_size += 1 * this->worldinfo_size();
  for (int i = 0; i < this->worldinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->worldinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePlayerGSInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePlayerGSInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePlayerGSInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePlayerGSInfoResponse::MergeFrom(const CMessagePlayerGSInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerinfo_.MergeFrom(from.playerinfo_);
  worldinfo_.MergeFrom(from.worldinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_srccharid(from.srccharid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePlayerGSInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerGSInfoResponse::CopyFrom(const CMessagePlayerGSInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerGSInfoResponse::Swap(CMessagePlayerGSInfoResponse* other) {
  if (other != this) {
    std::swap(srccharid_, other->srccharid_);
    playerinfo_.Swap(&other->playerinfo_);
    worldinfo_.Swap(&other->worldinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePlayerGSInfoResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePlayerGSInfoResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePlayerGSInfoResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerGSInfoResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessagePlayerGSInfoNotify::kSrcCharIDFieldNumber;
const int CMessagePlayerGSInfoNotify::kPlayerInfoFieldNumber;
const int CMessagePlayerGSInfoNotify::kWorldInfoFieldNumber;
const int CMessagePlayerGSInfoNotify::kWarStateFieldNumber;
const int CMessagePlayerGSInfoNotify::kWinWorldFieldNumber;
const int CMessagePlayerGSInfoNotify::kTaxRateFieldNumber;
const int CMessagePlayerGSInfoNotify::kGTInfoFieldNumber;
const int CMessagePlayerGSInfoNotify::kLWInfoFieldNumber;
#endif  // !_MSC_VER

CMessagePlayerGSInfoNotify::CMessagePlayerGSInfoNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePlayerGSInfoNotify::InitAsDefaultInstance() {}

CMessagePlayerGSInfoNotify::CMessagePlayerGSInfoNotify(const CMessagePlayerGSInfoNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePlayerGSInfoNotify::SharedCtor() {
  _cached_size_ = 0;
  srccharid_ = 0u;
  warstate_ = 0u;
  winworld_ = 0u;
  taxrate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePlayerGSInfoNotify::~CMessagePlayerGSInfoNotify() {
  SharedDtor();
}

void CMessagePlayerGSInfoNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessagePlayerGSInfoNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerGSInfoNotify_descriptor_;
}

const CMessagePlayerGSInfoNotify& CMessagePlayerGSInfoNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePlayerGSInfoNotify* CMessagePlayerGSInfoNotify::default_instance_ = NULL;

CMessagePlayerGSInfoNotify* CMessagePlayerGSInfoNotify::New() const {
  return new CMessagePlayerGSInfoNotify;
}

void CMessagePlayerGSInfoNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    srccharid_ = 0u;
    warstate_ = 0u;
    winworld_ = 0u;
    taxrate_ = 0u;
  }
  playerinfo_.Clear();
  worldinfo_.Clear();
  gtinfo_.Clear();
  lwinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePlayerGSInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 SrcCharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srccharid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_PlayerInfo;
        break;
      }
      
      // repeated .PlayerGSInfo PlayerInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_PlayerInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_playerinfo()));
        if (input->ExpectTag(18)) goto parse_PlayerInfo;
        if (input->ExpectTag(26)) goto parse_WorldInfo;
        break;
      }
      
      // repeated .WorldStatusInfo WorldInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_WorldInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_worldinfo()));
        if (input->ExpectTag(26)) goto parse_WorldInfo;
        if (input->ExpectTag(32)) goto parse_WarState;
        break;
      }
      
      // optional uint32 WarState = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarState:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warstate_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_WinWorld;
        break;
      }
      
      // optional uint32 WinWorld = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WinWorld:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &winworld_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_TaxRate;
        break;
      }
      
      // optional uint32 TaxRate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TaxRate:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taxrate_));
        _set_bit(5);
        if (input->ExpectTag(58)) goto parse_GTInfo;
        break;
      }
      
      // repeated .GTAndLWInfo GTInfo = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_GTInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_gtinfo()));
        if (input->ExpectTag(58)) goto parse_GTInfo;
        if (input->ExpectTag(66)) goto parse_LWInfo;
        break;
      }
      
      // repeated .GTAndLWInfo LWInfo = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_LWInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_lwinfo()));
        if (input->ExpectTag(66)) goto parse_LWInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePlayerGSInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePlayerGSInfoNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 SrcCharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->srccharid(), output);
  }
  
  // repeated .PlayerGSInfo PlayerInfo = 2;
  for (int i = 0; i < this->playerinfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->playerinfo(i), output);
  }
  
  // repeated .WorldStatusInfo WorldInfo = 3;
  for (int i = 0; i < this->worldinfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->worldinfo(i), output);
  }
  
  // optional uint32 WarState = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->warstate(), output);
  }
  
  // optional uint32 WinWorld = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->winworld(), output);
  }
  
  // optional uint32 TaxRate = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->taxrate(), output);
  }
  
  // repeated .GTAndLWInfo GTInfo = 7;
  for (int i = 0; i < this->gtinfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(7, this->gtinfo(i), output);
  }
  
  // repeated .GTAndLWInfo LWInfo = 8;
  for (int i = 0; i < this->lwinfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(8, this->lwinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePlayerGSInfoNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 SrcCharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->srccharid(), target);
  }
  
  // repeated .PlayerGSInfo PlayerInfo = 2;
  for (int i = 0; i < this->playerinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->playerinfo(i), target);
  }
  
  // repeated .WorldStatusInfo WorldInfo = 3;
  for (int i = 0; i < this->worldinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->worldinfo(i), target);
  }
  
  // optional uint32 WarState = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->warstate(), target);
  }
  
  // optional uint32 WinWorld = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->winworld(), target);
  }
  
  // optional uint32 TaxRate = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->taxrate(), target);
  }
  
  // repeated .GTAndLWInfo GTInfo = 7;
  for (int i = 0; i < this->gtinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(7, this->gtinfo(i), target);
  }
  
  // repeated .GTAndLWInfo LWInfo = 8;
  for (int i = 0; i < this->lwinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(8, this->lwinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePlayerGSInfoNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SrcCharID = 1;
    if (has_srccharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srccharid());
    }
    
    // optional uint32 WarState = 4;
    if (has_warstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warstate());
    }
    
    // optional uint32 WinWorld = 5;
    if (has_winworld()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->winworld());
    }
    
    // optional uint32 TaxRate = 6;
    if (has_taxrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taxrate());
    }
    
  }
  // repeated .PlayerGSInfo PlayerInfo = 2;
  total_size += 1 * this->playerinfo_size();
  for (int i = 0; i < this->playerinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->playerinfo(i));
  }
  
  // repeated .WorldStatusInfo WorldInfo = 3;
  total_size += 1 * this->worldinfo_size();
  for (int i = 0; i < this->worldinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->worldinfo(i));
  }
  
  // repeated .GTAndLWInfo GTInfo = 7;
  total_size += 1 * this->gtinfo_size();
  for (int i = 0; i < this->gtinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->gtinfo(i));
  }
  
  // repeated .GTAndLWInfo LWInfo = 8;
  total_size += 1 * this->lwinfo_size();
  for (int i = 0; i < this->lwinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->lwinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePlayerGSInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePlayerGSInfoNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePlayerGSInfoNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePlayerGSInfoNotify::MergeFrom(const CMessagePlayerGSInfoNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerinfo_.MergeFrom(from.playerinfo_);
  worldinfo_.MergeFrom(from.worldinfo_);
  gtinfo_.MergeFrom(from.gtinfo_);
  lwinfo_.MergeFrom(from.lwinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_srccharid(from.srccharid());
    }
    if (from._has_bit(3)) {
      set_warstate(from.warstate());
    }
    if (from._has_bit(4)) {
      set_winworld(from.winworld());
    }
    if (from._has_bit(5)) {
      set_taxrate(from.taxrate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePlayerGSInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerGSInfoNotify::CopyFrom(const CMessagePlayerGSInfoNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerGSInfoNotify::Swap(CMessagePlayerGSInfoNotify* other) {
  if (other != this) {
    std::swap(srccharid_, other->srccharid_);
    playerinfo_.Swap(&other->playerinfo_);
    worldinfo_.Swap(&other->worldinfo_);
    std::swap(warstate_, other->warstate_);
    std::swap(winworld_, other->winworld_);
    std::swap(taxrate_, other->taxrate_);
    gtinfo_.Swap(&other->gtinfo_);
    lwinfo_.Swap(&other->lwinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePlayerGSInfoNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePlayerGSInfoNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePlayerGSInfoNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerGSInfoNotify_reflection_;
}

// ===================================================================

const ::std::string CMessageKingChangeNotify::_default_kingname_;
#ifndef _MSC_VER
const int CMessageKingChangeNotify::kWorldIDFieldNumber;
const int CMessageKingChangeNotify::kCountryIDFieldNumber;
const int CMessageKingChangeNotify::kKingIDFieldNumber;
const int CMessageKingChangeNotify::kKingNameFieldNumber;
#endif  // !_MSC_VER

CMessageKingChangeNotify::CMessageKingChangeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageKingChangeNotify::InitAsDefaultInstance() {}

CMessageKingChangeNotify::CMessageKingChangeNotify(const CMessageKingChangeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageKingChangeNotify::SharedCtor() {
  _cached_size_ = 0;
  worldid_ = 0u;
  countryid_ = 0u;
  kingid_ = 0u;
  kingname_ = const_cast< ::std::string*>(&_default_kingname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageKingChangeNotify::~CMessageKingChangeNotify() {
  SharedDtor();
}

void CMessageKingChangeNotify::SharedDtor() {
  if (kingname_ != &_default_kingname_) {
    delete kingname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageKingChangeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageKingChangeNotify_descriptor_;
}

const CMessageKingChangeNotify& CMessageKingChangeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageKingChangeNotify* CMessageKingChangeNotify::default_instance_ = NULL;

CMessageKingChangeNotify* CMessageKingChangeNotify::New() const {
  return new CMessageKingChangeNotify;
}

void CMessageKingChangeNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    worldid_ = 0u;
    countryid_ = 0u;
    kingid_ = 0u;
    if (_has_bit(3)) {
      if (kingname_ != &_default_kingname_) {
        kingname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageKingChangeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 WorldID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &worldid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CountryID;
        break;
      }
      
      // optional uint32 CountryID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CountryID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &countryid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_KingID;
        break;
      }
      
      // optional uint32 KingID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_KingID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &kingid_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_KingName;
        break;
      }
      
      // optional string KingName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_KingName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_kingname()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageKingChangeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageKingChangeNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 WorldID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->worldid(), output);
  }
  
  // optional uint32 CountryID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->countryid(), output);
  }
  
  // optional uint32 KingID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->kingid(), output);
  }
  
  // optional string KingName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->kingname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageKingChangeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 WorldID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->worldid(), target);
  }
  
  // optional uint32 CountryID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->countryid(), target);
  }
  
  // optional uint32 KingID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->kingid(), target);
  }
  
  // optional string KingName = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->kingname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageKingChangeNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 WorldID = 1;
    if (has_worldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->worldid());
    }
    
    // optional uint32 CountryID = 2;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->countryid());
    }
    
    // optional uint32 KingID = 3;
    if (has_kingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->kingid());
    }
    
    // optional string KingName = 4;
    if (has_kingname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->kingname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageKingChangeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageKingChangeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageKingChangeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageKingChangeNotify::MergeFrom(const CMessageKingChangeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_worldid(from.worldid());
    }
    if (from._has_bit(1)) {
      set_countryid(from.countryid());
    }
    if (from._has_bit(2)) {
      set_kingid(from.kingid());
    }
    if (from._has_bit(3)) {
      set_kingname(from.kingname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageKingChangeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageKingChangeNotify::CopyFrom(const CMessageKingChangeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageKingChangeNotify::Swap(CMessageKingChangeNotify* other) {
  if (other != this) {
    std::swap(worldid_, other->worldid_);
    std::swap(countryid_, other->countryid_);
    std::swap(kingid_, other->kingid_);
    std::swap(kingname_, other->kingname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageKingChangeNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageKingChangeNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageKingChangeNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageKingChangeNotify_reflection_;
}

// ===================================================================

const ::std::string CMessageSummonPlayerNotify::_default_srcname_;
#ifndef _MSC_VER
const int CMessageSummonPlayerNotify::kSrcNameFieldNumber;
const int CMessageSummonPlayerNotify::kLineIDFieldNumber;
const int CMessageSummonPlayerNotify::kMapIDFieldNumber;
const int CMessageSummonPlayerNotify::kPosXFieldNumber;
const int CMessageSummonPlayerNotify::kPosYFieldNumber;
const int CMessageSummonPlayerNotify::kTokenIDFieldNumber;
#endif  // !_MSC_VER

CMessageSummonPlayerNotify::CMessageSummonPlayerNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageSummonPlayerNotify::InitAsDefaultInstance() {}

CMessageSummonPlayerNotify::CMessageSummonPlayerNotify(const CMessageSummonPlayerNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageSummonPlayerNotify::SharedCtor() {
  _cached_size_ = 0;
  srcname_ = const_cast< ::std::string*>(&_default_srcname_);
  lineid_ = 0u;
  mapid_ = 0u;
  posx_ = 0u;
  posy_ = 0u;
  tokenid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageSummonPlayerNotify::~CMessageSummonPlayerNotify() {
  SharedDtor();
}

void CMessageSummonPlayerNotify::SharedDtor() {
  if (srcname_ != &_default_srcname_) {
    delete srcname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageSummonPlayerNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageSummonPlayerNotify_descriptor_;
}

const CMessageSummonPlayerNotify& CMessageSummonPlayerNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageSummonPlayerNotify* CMessageSummonPlayerNotify::default_instance_ = NULL;

CMessageSummonPlayerNotify* CMessageSummonPlayerNotify::New() const {
  return new CMessageSummonPlayerNotify;
}

void CMessageSummonPlayerNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (srcname_ != &_default_srcname_) {
        srcname_->clear();
      }
    }
    lineid_ = 0u;
    mapid_ = 0u;
    posx_ = 0u;
    posy_ = 0u;
    tokenid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageSummonPlayerNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string SrcName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_srcname()));
        if (input->ExpectTag(16)) goto parse_LineID;
        break;
      }
      
      // optional uint32 LineID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lineid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_PosX;
        break;
      }
      
      // optional uint32 PosX = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosX:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posx_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_PosY;
        break;
      }
      
      // optional uint32 PosY = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posy_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_TokenID;
        break;
      }
      
      // optional uint32 TokenID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TokenID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tokenid_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageSummonPlayerNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageSummonPlayerNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string SrcName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->srcname(), output);
  }
  
  // optional uint32 LineID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->lineid(), output);
  }
  
  // optional uint32 MapID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->mapid(), output);
  }
  
  // optional uint32 PosX = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->posx(), output);
  }
  
  // optional uint32 PosY = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->posy(), output);
  }
  
  // optional uint32 TokenID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->tokenid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageSummonPlayerNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string SrcName = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->srcname(), target);
  }
  
  // optional uint32 LineID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->lineid(), target);
  }
  
  // optional uint32 MapID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->mapid(), target);
  }
  
  // optional uint32 PosX = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->posx(), target);
  }
  
  // optional uint32 PosY = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->posy(), target);
  }
  
  // optional uint32 TokenID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->tokenid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageSummonPlayerNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string SrcName = 1;
    if (has_srcname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->srcname());
    }
    
    // optional uint32 LineID = 2;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lineid());
    }
    
    // optional uint32 MapID = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 PosX = 4;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posx());
    }
    
    // optional uint32 PosY = 5;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posy());
    }
    
    // optional uint32 TokenID = 6;
    if (has_tokenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tokenid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageSummonPlayerNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageSummonPlayerNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageSummonPlayerNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageSummonPlayerNotify::MergeFrom(const CMessageSummonPlayerNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_srcname(from.srcname());
    }
    if (from._has_bit(1)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(2)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(3)) {
      set_posx(from.posx());
    }
    if (from._has_bit(4)) {
      set_posy(from.posy());
    }
    if (from._has_bit(5)) {
      set_tokenid(from.tokenid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageSummonPlayerNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSummonPlayerNotify::CopyFrom(const CMessageSummonPlayerNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSummonPlayerNotify::Swap(CMessageSummonPlayerNotify* other) {
  if (other != this) {
    std::swap(srcname_, other->srcname_);
    std::swap(lineid_, other->lineid_);
    std::swap(mapid_, other->mapid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(tokenid_, other->tokenid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageSummonPlayerNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageSummonPlayerNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageSummonPlayerNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageSummonPlayerNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetAwardRequest::kNPCEntityIDFieldNumber;
const int CMessageGetAwardRequest::kAwardIDFieldNumber;
const int CMessageGetAwardRequest::kTempIDFieldNumber;
const int CMessageGetAwardRequest::kTypeFieldNumber;
#endif  // !_MSC_VER

CMessageGetAwardRequest::CMessageGetAwardRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetAwardRequest::InitAsDefaultInstance() {}

CMessageGetAwardRequest::CMessageGetAwardRequest(const CMessageGetAwardRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetAwardRequest::SharedCtor() {
  _cached_size_ = 0;
  npcentityid_ = 0u;
  awardid_ = 0u;
  tempid_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetAwardRequest::~CMessageGetAwardRequest() {
  SharedDtor();
}

void CMessageGetAwardRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGetAwardRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetAwardRequest_descriptor_;
}

const CMessageGetAwardRequest& CMessageGetAwardRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetAwardRequest* CMessageGetAwardRequest::default_instance_ = NULL;

CMessageGetAwardRequest* CMessageGetAwardRequest::New() const {
  return new CMessageGetAwardRequest;
}

void CMessageGetAwardRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npcentityid_ = 0u;
    awardid_ = 0u;
    tempid_ = 0u;
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetAwardRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 NPCEntityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcentityid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_AwardID;
        break;
      }
      
      // optional uint32 AwardID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AwardID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &awardid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_TempID;
        break;
      }
      
      // optional uint32 TempID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TempID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Type;
        break;
      }
      
      // optional uint32 Type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Type:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetAwardRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetAwardRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 NPCEntityID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->npcentityid(), output);
  }
  
  // optional uint32 AwardID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->awardid(), output);
  }
  
  // optional uint32 TempID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->tempid(), output);
  }
  
  // optional uint32 Type = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetAwardRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 NPCEntityID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->npcentityid(), target);
  }
  
  // optional uint32 AwardID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->awardid(), target);
  }
  
  // optional uint32 TempID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->tempid(), target);
  }
  
  // optional uint32 Type = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetAwardRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 NPCEntityID = 1;
    if (has_npcentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcentityid());
    }
    
    // optional uint32 AwardID = 2;
    if (has_awardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->awardid());
    }
    
    // optional uint32 TempID = 3;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional uint32 Type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetAwardRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetAwardRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetAwardRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetAwardRequest::MergeFrom(const CMessageGetAwardRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_npcentityid(from.npcentityid());
    }
    if (from._has_bit(1)) {
      set_awardid(from.awardid());
    }
    if (from._has_bit(2)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(3)) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetAwardRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetAwardRequest::CopyFrom(const CMessageGetAwardRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetAwardRequest::Swap(CMessageGetAwardRequest* other) {
  if (other != this) {
    std::swap(npcentityid_, other->npcentityid_);
    std::swap(awardid_, other->awardid_);
    std::swap(tempid_, other->tempid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetAwardRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetAwardRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetAwardRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetAwardRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetAwardResponse::kResultFieldNumber;
const int CMessageGetAwardResponse::kAwardIDFieldNumber;
const int CMessageGetAwardResponse::kTempIDFieldNumber;
const int CMessageGetAwardResponse::kTypeFieldNumber;
#endif  // !_MSC_VER

CMessageGetAwardResponse::CMessageGetAwardResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetAwardResponse::InitAsDefaultInstance() {}

CMessageGetAwardResponse::CMessageGetAwardResponse(const CMessageGetAwardResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetAwardResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  awardid_ = 0u;
  tempid_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetAwardResponse::~CMessageGetAwardResponse() {
  SharedDtor();
}

void CMessageGetAwardResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGetAwardResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetAwardResponse_descriptor_;
}

const CMessageGetAwardResponse& CMessageGetAwardResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetAwardResponse* CMessageGetAwardResponse::default_instance_ = NULL;

CMessageGetAwardResponse* CMessageGetAwardResponse::New() const {
  return new CMessageGetAwardResponse;
}

void CMessageGetAwardResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    awardid_ = 0u;
    tempid_ = 0u;
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetAwardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_AwardID;
        break;
      }
      
      // optional uint32 AwardID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AwardID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &awardid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_TempID;
        break;
      }
      
      // optional uint32 TempID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TempID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Type;
        break;
      }
      
      // optional uint32 Type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Type:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetAwardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetAwardResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // optional uint32 AwardID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->awardid(), output);
  }
  
  // optional uint32 TempID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->tempid(), output);
  }
  
  // optional uint32 Type = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetAwardResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // optional uint32 AwardID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->awardid(), target);
  }
  
  // optional uint32 TempID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->tempid(), target);
  }
  
  // optional uint32 Type = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetAwardResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 AwardID = 2;
    if (has_awardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->awardid());
    }
    
    // optional uint32 TempID = 3;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional uint32 Type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetAwardResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetAwardResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetAwardResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetAwardResponse::MergeFrom(const CMessageGetAwardResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_awardid(from.awardid());
    }
    if (from._has_bit(2)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(3)) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetAwardResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetAwardResponse::CopyFrom(const CMessageGetAwardResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetAwardResponse::Swap(CMessageGetAwardResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(awardid_, other->awardid_);
    std::swap(tempid_, other->tempid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetAwardResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetAwardResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetAwardResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetAwardResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageStartCountryRedstoneNotify::_default_managername_;
#ifndef _MSC_VER
const int CMessageStartCountryRedstoneNotify::kManagerNameFieldNumber;
const int CMessageStartCountryRedstoneNotify::kManagerIDFieldNumber;
const int CMessageStartCountryRedstoneNotify::kLineIDFieldNumber;
const int CMessageStartCountryRedstoneNotify::kMapIDFieldNumber;
const int CMessageStartCountryRedstoneNotify::kPosXFieldNumber;
const int CMessageStartCountryRedstoneNotify::kPosYFieldNumber;
const int CMessageStartCountryRedstoneNotify::kCountryIDFieldNumber;
const int CMessageStartCountryRedstoneNotify::kRedstoneTypeFieldNumber;
#endif  // !_MSC_VER

CMessageStartCountryRedstoneNotify::CMessageStartCountryRedstoneNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageStartCountryRedstoneNotify::InitAsDefaultInstance() {}

CMessageStartCountryRedstoneNotify::CMessageStartCountryRedstoneNotify(const CMessageStartCountryRedstoneNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageStartCountryRedstoneNotify::SharedCtor() {
  _cached_size_ = 0;
  managername_ = const_cast< ::std::string*>(&_default_managername_);
  managerid_ = 0u;
  lineid_ = 0u;
  mapid_ = 0u;
  posx_ = 0u;
  posy_ = 0u;
  countryid_ = 0u;
  redstonetype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageStartCountryRedstoneNotify::~CMessageStartCountryRedstoneNotify() {
  SharedDtor();
}

void CMessageStartCountryRedstoneNotify::SharedDtor() {
  if (managername_ != &_default_managername_) {
    delete managername_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageStartCountryRedstoneNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageStartCountryRedstoneNotify_descriptor_;
}

const CMessageStartCountryRedstoneNotify& CMessageStartCountryRedstoneNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageStartCountryRedstoneNotify* CMessageStartCountryRedstoneNotify::default_instance_ = NULL;

CMessageStartCountryRedstoneNotify* CMessageStartCountryRedstoneNotify::New() const {
  return new CMessageStartCountryRedstoneNotify;
}

void CMessageStartCountryRedstoneNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (managername_ != &_default_managername_) {
        managername_->clear();
      }
    }
    managerid_ = 0u;
    lineid_ = 0u;
    mapid_ = 0u;
    posx_ = 0u;
    posy_ = 0u;
    countryid_ = 0u;
    redstonetype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageStartCountryRedstoneNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string ManagerName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_managername()));
        if (input->ExpectTag(16)) goto parse_ManagerID;
        break;
      }
      
      // optional uint32 ManagerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ManagerID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &managerid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_LineID;
        break;
      }
      
      // optional uint32 LineID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lineid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_PosX;
        break;
      }
      
      // optional uint32 PosX = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosX:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posx_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_PosY;
        break;
      }
      
      // optional uint32 PosY = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posy_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_CountryID;
        break;
      }
      
      // optional uint32 CountryID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CountryID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &countryid_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_RedstoneType;
        break;
      }
      
      // optional uint32 RedstoneType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RedstoneType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &redstonetype_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageStartCountryRedstoneNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageStartCountryRedstoneNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string ManagerName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->managername(), output);
  }
  
  // optional uint32 ManagerID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->managerid(), output);
  }
  
  // optional uint32 LineID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->lineid(), output);
  }
  
  // optional uint32 MapID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->mapid(), output);
  }
  
  // optional uint32 PosX = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->posx(), output);
  }
  
  // optional uint32 PosY = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->posy(), output);
  }
  
  // optional uint32 CountryID = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->countryid(), output);
  }
  
  // optional uint32 RedstoneType = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->redstonetype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageStartCountryRedstoneNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string ManagerName = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->managername(), target);
  }
  
  // optional uint32 ManagerID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->managerid(), target);
  }
  
  // optional uint32 LineID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->lineid(), target);
  }
  
  // optional uint32 MapID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->mapid(), target);
  }
  
  // optional uint32 PosX = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->posx(), target);
  }
  
  // optional uint32 PosY = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->posy(), target);
  }
  
  // optional uint32 CountryID = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->countryid(), target);
  }
  
  // optional uint32 RedstoneType = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->redstonetype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageStartCountryRedstoneNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ManagerName = 1;
    if (has_managername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->managername());
    }
    
    // optional uint32 ManagerID = 2;
    if (has_managerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->managerid());
    }
    
    // optional uint32 LineID = 3;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lineid());
    }
    
    // optional uint32 MapID = 4;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 PosX = 5;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posx());
    }
    
    // optional uint32 PosY = 6;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posy());
    }
    
    // optional uint32 CountryID = 7;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->countryid());
    }
    
    // optional uint32 RedstoneType = 8;
    if (has_redstonetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->redstonetype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageStartCountryRedstoneNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageStartCountryRedstoneNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageStartCountryRedstoneNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageStartCountryRedstoneNotify::MergeFrom(const CMessageStartCountryRedstoneNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_managername(from.managername());
    }
    if (from._has_bit(1)) {
      set_managerid(from.managerid());
    }
    if (from._has_bit(2)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(3)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(4)) {
      set_posx(from.posx());
    }
    if (from._has_bit(5)) {
      set_posy(from.posy());
    }
    if (from._has_bit(6)) {
      set_countryid(from.countryid());
    }
    if (from._has_bit(7)) {
      set_redstonetype(from.redstonetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageStartCountryRedstoneNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageStartCountryRedstoneNotify::CopyFrom(const CMessageStartCountryRedstoneNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageStartCountryRedstoneNotify::Swap(CMessageStartCountryRedstoneNotify* other) {
  if (other != this) {
    std::swap(managername_, other->managername_);
    std::swap(managerid_, other->managerid_);
    std::swap(lineid_, other->lineid_);
    std::swap(mapid_, other->mapid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(countryid_, other->countryid_);
    std::swap(redstonetype_, other->redstonetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageStartCountryRedstoneNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageStartCountryRedstoneNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageStartCountryRedstoneNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageStartCountryRedstoneNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int TeleportData::kLineIDFieldNumber;
const int TeleportData::kMapIDFieldNumber;
const int TeleportData::kPosXFieldNumber;
const int TeleportData::kPosYFieldNumber;
const int TeleportData::kTokenIDFieldNumber;
#endif  // !_MSC_VER

TeleportData::TeleportData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeleportData::InitAsDefaultInstance() {}

TeleportData::TeleportData(const TeleportData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeleportData::SharedCtor() {
  _cached_size_ = 0;
  lineid_ = 0u;
  mapid_ = 0u;
  posx_ = 0u;
  posy_ = 0u;
  tokenid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeleportData::~TeleportData() {
  SharedDtor();
}

void TeleportData::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* TeleportData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeleportData_descriptor_;
}

const TeleportData& TeleportData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

TeleportData* TeleportData::default_instance_ = NULL;

TeleportData* TeleportData::New() const {
  return new TeleportData;
}

void TeleportData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lineid_ = 0u;
    mapid_ = 0u;
    posx_ = 0u;
    posy_ = 0u;
    tokenid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeleportData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 LineID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lineid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_PosX;
        break;
      }
      
      // optional uint32 PosX = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosX:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posx_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_PosY;
        break;
      }
      
      // optional uint32 PosY = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posy_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_TokenID;
        break;
      }
      
      // optional uint32 TokenID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TokenID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tokenid_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeleportData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    TeleportData::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 LineID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->lineid(), output);
  }
  
  // optional uint32 MapID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->mapid(), output);
  }
  
  // optional uint32 PosX = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->posx(), output);
  }
  
  // optional uint32 PosY = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->posy(), output);
  }
  
  // optional uint32 TokenID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->tokenid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeleportData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 LineID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->lineid(), target);
  }
  
  // optional uint32 MapID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->mapid(), target);
  }
  
  // optional uint32 PosX = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->posx(), target);
  }
  
  // optional uint32 PosY = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->posy(), target);
  }
  
  // optional uint32 TokenID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->tokenid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeleportData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 LineID = 1;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lineid());
    }
    
    // optional uint32 MapID = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 PosX = 3;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posx());
    }
    
    // optional uint32 PosY = 4;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posy());
    }
    
    // optional uint32 TokenID = 5;
    if (has_tokenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tokenid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void TeleportData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeleportData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeleportData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeleportData::MergeFrom(const TeleportData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(1)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(2)) {
      set_posx(from.posx());
    }
    if (from._has_bit(3)) {
      set_posy(from.posy());
    }
    if (from._has_bit(4)) {
      set_tokenid(from.tokenid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeleportData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeleportData::CopyFrom(const TeleportData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeleportData::Swap(TeleportData* other) {
  if (other != this) {
    std::swap(lineid_, other->lineid_);
    std::swap(mapid_, other->mapid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(tokenid_, other->tokenid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool TeleportData::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* TeleportData::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* TeleportData::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return TeleportData_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageSubmitWarRequest::kCharIDFieldNumber;
const int CMessageSubmitWarRequest::kNPCEntityIDFieldNumber;
const int CMessageSubmitWarRequest::kWarSerialFieldNumber;
#endif  // !_MSC_VER

CMessageSubmitWarRequest::CMessageSubmitWarRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageSubmitWarRequest::InitAsDefaultInstance() {}

CMessageSubmitWarRequest::CMessageSubmitWarRequest(const CMessageSubmitWarRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageSubmitWarRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  npcentityid_ = 0u;
  warserial_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageSubmitWarRequest::~CMessageSubmitWarRequest() {
  SharedDtor();
}

void CMessageSubmitWarRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageSubmitWarRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageSubmitWarRequest_descriptor_;
}

const CMessageSubmitWarRequest& CMessageSubmitWarRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageSubmitWarRequest* CMessageSubmitWarRequest::default_instance_ = NULL;

CMessageSubmitWarRequest* CMessageSubmitWarRequest::New() const {
  return new CMessageSubmitWarRequest;
}

void CMessageSubmitWarRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    npcentityid_ = 0u;
    warserial_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageSubmitWarRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_NPCEntityID;
        break;
      }
      
      // optional uint32 NPCEntityID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NPCEntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcentityid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_WarSerial;
        break;
      }
      
      // optional uint32 WarSerial = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarSerial:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warserial_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageSubmitWarRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageSubmitWarRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 NPCEntityID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->npcentityid(), output);
  }
  
  // optional uint32 WarSerial = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->warserial(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageSubmitWarRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 NPCEntityID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->npcentityid(), target);
  }
  
  // optional uint32 WarSerial = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->warserial(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageSubmitWarRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 NPCEntityID = 2;
    if (has_npcentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcentityid());
    }
    
    // optional uint32 WarSerial = 3;
    if (has_warserial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warserial());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageSubmitWarRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageSubmitWarRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageSubmitWarRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageSubmitWarRequest::MergeFrom(const CMessageSubmitWarRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_npcentityid(from.npcentityid());
    }
    if (from._has_bit(2)) {
      set_warserial(from.warserial());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageSubmitWarRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSubmitWarRequest::CopyFrom(const CMessageSubmitWarRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSubmitWarRequest::Swap(CMessageSubmitWarRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(npcentityid_, other->npcentityid_);
    std::swap(warserial_, other->warserial_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageSubmitWarRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageSubmitWarRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageSubmitWarRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageSubmitWarRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageSubmitWarResponse::kCharIDFieldNumber;
const int CMessageSubmitWarResponse::kResultFieldNumber;
const int CMessageSubmitWarResponse::kWarSerialFieldNumber;
#endif  // !_MSC_VER

CMessageSubmitWarResponse::CMessageSubmitWarResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageSubmitWarResponse::InitAsDefaultInstance() {}

CMessageSubmitWarResponse::CMessageSubmitWarResponse(const CMessageSubmitWarResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageSubmitWarResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  result_ = 0u;
  warserial_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageSubmitWarResponse::~CMessageSubmitWarResponse() {
  SharedDtor();
}

void CMessageSubmitWarResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageSubmitWarResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageSubmitWarResponse_descriptor_;
}

const CMessageSubmitWarResponse& CMessageSubmitWarResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageSubmitWarResponse* CMessageSubmitWarResponse::default_instance_ = NULL;

CMessageSubmitWarResponse* CMessageSubmitWarResponse::New() const {
  return new CMessageSubmitWarResponse;
}

void CMessageSubmitWarResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    result_ = 0u;
    warserial_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageSubmitWarResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_WarSerial;
        break;
      }
      
      // optional uint32 WarSerial = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarSerial:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warserial_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageSubmitWarResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageSubmitWarResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  // optional uint32 WarSerial = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->warserial(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageSubmitWarResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  // optional uint32 WarSerial = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->warserial(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageSubmitWarResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 WarSerial = 3;
    if (has_warserial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warserial());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageSubmitWarResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageSubmitWarResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageSubmitWarResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageSubmitWarResponse::MergeFrom(const CMessageSubmitWarResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_warserial(from.warserial());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageSubmitWarResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSubmitWarResponse::CopyFrom(const CMessageSubmitWarResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSubmitWarResponse::Swap(CMessageSubmitWarResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(result_, other->result_);
    std::swap(warserial_, other->warserial_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageSubmitWarResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageSubmitWarResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageSubmitWarResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageSubmitWarResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageEnterWarRequest::kCharIDFieldNumber;
const int CMessageEnterWarRequest::kWarIDFieldNumber;
const int CMessageEnterWarRequest::kNPCEntityIDFieldNumber;
const int CMessageEnterWarRequest::kWarSerialFieldNumber;
#endif  // !_MSC_VER

CMessageEnterWarRequest::CMessageEnterWarRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageEnterWarRequest::InitAsDefaultInstance() {}

CMessageEnterWarRequest::CMessageEnterWarRequest(const CMessageEnterWarRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageEnterWarRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  warid_ = 0u;
  npcentityid_ = 0u;
  warserial_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageEnterWarRequest::~CMessageEnterWarRequest() {
  SharedDtor();
}

void CMessageEnterWarRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageEnterWarRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageEnterWarRequest_descriptor_;
}

const CMessageEnterWarRequest& CMessageEnterWarRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageEnterWarRequest* CMessageEnterWarRequest::default_instance_ = NULL;

CMessageEnterWarRequest* CMessageEnterWarRequest::New() const {
  return new CMessageEnterWarRequest;
}

void CMessageEnterWarRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    warid_ = 0u;
    npcentityid_ = 0u;
    warserial_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageEnterWarRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_WarID;
        break;
      }
      
      // optional uint32 WarID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_NPCEntityID;
        break;
      }
      
      // optional uint32 NPCEntityID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NPCEntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcentityid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_WarSerial;
        break;
      }
      
      // optional uint32 WarSerial = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarSerial:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warserial_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageEnterWarRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageEnterWarRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 WarID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->warid(), output);
  }
  
  // optional uint32 NPCEntityID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->npcentityid(), output);
  }
  
  // optional uint32 WarSerial = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->warserial(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageEnterWarRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 WarID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->warid(), target);
  }
  
  // optional uint32 NPCEntityID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->npcentityid(), target);
  }
  
  // optional uint32 WarSerial = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->warserial(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageEnterWarRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 WarID = 2;
    if (has_warid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warid());
    }
    
    // optional uint32 NPCEntityID = 3;
    if (has_npcentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcentityid());
    }
    
    // optional uint32 WarSerial = 4;
    if (has_warserial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warserial());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageEnterWarRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageEnterWarRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageEnterWarRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageEnterWarRequest::MergeFrom(const CMessageEnterWarRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_warid(from.warid());
    }
    if (from._has_bit(2)) {
      set_npcentityid(from.npcentityid());
    }
    if (from._has_bit(3)) {
      set_warserial(from.warserial());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageEnterWarRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageEnterWarRequest::CopyFrom(const CMessageEnterWarRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageEnterWarRequest::Swap(CMessageEnterWarRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(warid_, other->warid_);
    std::swap(npcentityid_, other->npcentityid_);
    std::swap(warserial_, other->warserial_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageEnterWarRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageEnterWarRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageEnterWarRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageEnterWarRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageEnterWarResponse::kCharIDFieldNumber;
const int CMessageEnterWarResponse::kWarIDFieldNumber;
const int CMessageEnterWarResponse::kResultFieldNumber;
const int CMessageEnterWarResponse::kPosXFieldNumber;
const int CMessageEnterWarResponse::kPosYFieldNumber;
#endif  // !_MSC_VER

CMessageEnterWarResponse::CMessageEnterWarResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageEnterWarResponse::InitAsDefaultInstance() {}

CMessageEnterWarResponse::CMessageEnterWarResponse(const CMessageEnterWarResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageEnterWarResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  warid_ = 0u;
  result_ = 0u;
  posx_ = 0u;
  posy_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageEnterWarResponse::~CMessageEnterWarResponse() {
  SharedDtor();
}

void CMessageEnterWarResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageEnterWarResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageEnterWarResponse_descriptor_;
}

const CMessageEnterWarResponse& CMessageEnterWarResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageEnterWarResponse* CMessageEnterWarResponse::default_instance_ = NULL;

CMessageEnterWarResponse* CMessageEnterWarResponse::New() const {
  return new CMessageEnterWarResponse;
}

void CMessageEnterWarResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    warid_ = 0u;
    result_ = 0u;
    posx_ = 0u;
    posy_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageEnterWarResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_WarID;
        break;
      }
      
      // optional uint32 WarID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_PosX;
        break;
      }
      
      // optional uint32 PosX = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosX:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posx_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_PosY;
        break;
      }
      
      // optional uint32 PosY = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posy_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageEnterWarResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageEnterWarResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 WarID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->warid(), output);
  }
  
  // optional uint32 Result = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->result(), output);
  }
  
  // optional uint32 PosX = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->posx(), output);
  }
  
  // optional uint32 PosY = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->posy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageEnterWarResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 WarID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->warid(), target);
  }
  
  // optional uint32 Result = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->result(), target);
  }
  
  // optional uint32 PosX = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->posx(), target);
  }
  
  // optional uint32 PosY = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->posy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageEnterWarResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 WarID = 2;
    if (has_warid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warid());
    }
    
    // optional uint32 Result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 PosX = 4;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posx());
    }
    
    // optional uint32 PosY = 5;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posy());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageEnterWarResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageEnterWarResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageEnterWarResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageEnterWarResponse::MergeFrom(const CMessageEnterWarResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_warid(from.warid());
    }
    if (from._has_bit(2)) {
      set_result(from.result());
    }
    if (from._has_bit(3)) {
      set_posx(from.posx());
    }
    if (from._has_bit(4)) {
      set_posy(from.posy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageEnterWarResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageEnterWarResponse::CopyFrom(const CMessageEnterWarResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageEnterWarResponse::Swap(CMessageEnterWarResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(warid_, other->warid_);
    std::swap(result_, other->result_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageEnterWarResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageEnterWarResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageEnterWarResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageEnterWarResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageQueryWarCampRequest::kCharIDFieldNumber;
const int CMessageQueryWarCampRequest::kNPCEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageQueryWarCampRequest::CMessageQueryWarCampRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageQueryWarCampRequest::InitAsDefaultInstance() {}

CMessageQueryWarCampRequest::CMessageQueryWarCampRequest(const CMessageQueryWarCampRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageQueryWarCampRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  npcentityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageQueryWarCampRequest::~CMessageQueryWarCampRequest() {
  SharedDtor();
}

void CMessageQueryWarCampRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageQueryWarCampRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryWarCampRequest_descriptor_;
}

const CMessageQueryWarCampRequest& CMessageQueryWarCampRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageQueryWarCampRequest* CMessageQueryWarCampRequest::default_instance_ = NULL;

CMessageQueryWarCampRequest* CMessageQueryWarCampRequest::New() const {
  return new CMessageQueryWarCampRequest;
}

void CMessageQueryWarCampRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    npcentityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageQueryWarCampRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_NPCEntityID;
        break;
      }
      
      // optional uint32 NPCEntityID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NPCEntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcentityid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageQueryWarCampRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageQueryWarCampRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 NPCEntityID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->npcentityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageQueryWarCampRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 NPCEntityID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->npcentityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageQueryWarCampRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 NPCEntityID = 2;
    if (has_npcentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcentityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageQueryWarCampRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageQueryWarCampRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageQueryWarCampRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageQueryWarCampRequest::MergeFrom(const CMessageQueryWarCampRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_npcentityid(from.npcentityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageQueryWarCampRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryWarCampRequest::CopyFrom(const CMessageQueryWarCampRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryWarCampRequest::Swap(CMessageQueryWarCampRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(npcentityid_, other->npcentityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageQueryWarCampRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageQueryWarCampRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageQueryWarCampRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryWarCampRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageQueryWarCampResponse::kCharIDFieldNumber;
const int CMessageQueryWarCampResponse::kWorldIDFieldNumber;
const int CMessageQueryWarCampResponse::kCampIDFieldNumber;
const int CMessageQueryWarCampResponse::kMoneyFieldNumber;
#endif  // !_MSC_VER

CMessageQueryWarCampResponse::CMessageQueryWarCampResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageQueryWarCampResponse::InitAsDefaultInstance() {}

CMessageQueryWarCampResponse::CMessageQueryWarCampResponse(const CMessageQueryWarCampResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageQueryWarCampResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageQueryWarCampResponse::~CMessageQueryWarCampResponse() {
  SharedDtor();
}

void CMessageQueryWarCampResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageQueryWarCampResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryWarCampResponse_descriptor_;
}

const CMessageQueryWarCampResponse& CMessageQueryWarCampResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageQueryWarCampResponse* CMessageQueryWarCampResponse::default_instance_ = NULL;

CMessageQueryWarCampResponse* CMessageQueryWarCampResponse::New() const {
  return new CMessageQueryWarCampResponse;
}

void CMessageQueryWarCampResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  worldid_.Clear();
  campid_.Clear();
  money_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageQueryWarCampResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_WorldID;
        break;
      }
      
      // repeated uint32 WorldID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WorldID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_worldid(value);
        if (input->ExpectTag(16)) goto parse_WorldID;
        if (input->ExpectTag(24)) goto parse_CampID;
        break;
      }
      
      // repeated uint32 CampID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CampID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_campid(value);
        if (input->ExpectTag(24)) goto parse_CampID;
        if (input->ExpectTag(32)) goto parse_Money;
        break;
      }
      
      // repeated uint32 Money = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_money(value);
        if (input->ExpectTag(32)) goto parse_Money;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageQueryWarCampResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageQueryWarCampResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // repeated uint32 WorldID = 2;
  for (int i = 0; i < this->worldid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->worldid(i), output);
  }
  
  // repeated uint32 CampID = 3;
  for (int i = 0; i < this->campid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->campid(i), output);
  }
  
  // repeated uint32 Money = 4;
  for (int i = 0; i < this->money_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->money(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageQueryWarCampResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // repeated uint32 WorldID = 2;
  for (int i = 0; i < this->worldid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->worldid(i), target);
  }
  
  // repeated uint32 CampID = 3;
  for (int i = 0; i < this->campid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->campid(i), target);
  }
  
  // repeated uint32 Money = 4;
  for (int i = 0; i < this->money_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->money(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageQueryWarCampResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  // repeated uint32 WorldID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->worldid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->worldid(i));
    }
    total_size += 1 * this->worldid_size() + data_size;
  }
  
  // repeated uint32 CampID = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->campid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->campid(i));
    }
    total_size += 1 * this->campid_size() + data_size;
  }
  
  // repeated uint32 Money = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->money_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->money(i));
    }
    total_size += 1 * this->money_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageQueryWarCampResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageQueryWarCampResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageQueryWarCampResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageQueryWarCampResponse::MergeFrom(const CMessageQueryWarCampResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  worldid_.MergeFrom(from.worldid_);
  campid_.MergeFrom(from.campid_);
  money_.MergeFrom(from.money_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageQueryWarCampResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryWarCampResponse::CopyFrom(const CMessageQueryWarCampResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryWarCampResponse::Swap(CMessageQueryWarCampResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    worldid_.Swap(&other->worldid_);
    campid_.Swap(&other->campid_);
    money_.Swap(&other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageQueryWarCampResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageQueryWarCampResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageQueryWarCampResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryWarCampResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageQueryWarNumRequest::kCharIDFieldNumber;
const int CMessageQueryWarNumRequest::kNPCEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageQueryWarNumRequest::CMessageQueryWarNumRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageQueryWarNumRequest::InitAsDefaultInstance() {}

CMessageQueryWarNumRequest::CMessageQueryWarNumRequest(const CMessageQueryWarNumRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageQueryWarNumRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  npcentityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageQueryWarNumRequest::~CMessageQueryWarNumRequest() {
  SharedDtor();
}

void CMessageQueryWarNumRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageQueryWarNumRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryWarNumRequest_descriptor_;
}

const CMessageQueryWarNumRequest& CMessageQueryWarNumRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageQueryWarNumRequest* CMessageQueryWarNumRequest::default_instance_ = NULL;

CMessageQueryWarNumRequest* CMessageQueryWarNumRequest::New() const {
  return new CMessageQueryWarNumRequest;
}

void CMessageQueryWarNumRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    npcentityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageQueryWarNumRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_NPCEntityID;
        break;
      }
      
      // optional uint32 NPCEntityID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NPCEntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcentityid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageQueryWarNumRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageQueryWarNumRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 NPCEntityID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->npcentityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageQueryWarNumRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 NPCEntityID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->npcentityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageQueryWarNumRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 NPCEntityID = 2;
    if (has_npcentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcentityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageQueryWarNumRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageQueryWarNumRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageQueryWarNumRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageQueryWarNumRequest::MergeFrom(const CMessageQueryWarNumRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_npcentityid(from.npcentityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageQueryWarNumRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryWarNumRequest::CopyFrom(const CMessageQueryWarNumRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryWarNumRequest::Swap(CMessageQueryWarNumRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(npcentityid_, other->npcentityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageQueryWarNumRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageQueryWarNumRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageQueryWarNumRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryWarNumRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int WarNumData::kWorldIDFieldNumber;
const int WarNumData::kCampIDFieldNumber;
const int WarNumData::kCurrentNumFieldNumber;
#endif  // !_MSC_VER

WarNumData::WarNumData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WarNumData::InitAsDefaultInstance() {}

WarNumData::WarNumData(const WarNumData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WarNumData::SharedCtor() {
  _cached_size_ = 0;
  worldid_ = 0u;
  campid_ = 0u;
  currentnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WarNumData::~WarNumData() {
  SharedDtor();
}

void WarNumData::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* WarNumData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WarNumData_descriptor_;
}

const WarNumData& WarNumData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

WarNumData* WarNumData::default_instance_ = NULL;

WarNumData* WarNumData::New() const {
  return new WarNumData;
}

void WarNumData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    worldid_ = 0u;
    campid_ = 0u;
    currentnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WarNumData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 WorldID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &worldid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CampID;
        break;
      }
      
      // optional uint32 CampID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CampID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &campid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_CurrentNum;
        break;
      }
      
      // optional uint32 CurrentNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CurrentNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &currentnum_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WarNumData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    WarNumData::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 WorldID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->worldid(), output);
  }
  
  // optional uint32 CampID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->campid(), output);
  }
  
  // optional uint32 CurrentNum = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->currentnum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WarNumData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 WorldID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->worldid(), target);
  }
  
  // optional uint32 CampID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->campid(), target);
  }
  
  // optional uint32 CurrentNum = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->currentnum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WarNumData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 WorldID = 1;
    if (has_worldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->worldid());
    }
    
    // optional uint32 CampID = 2;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->campid());
    }
    
    // optional uint32 CurrentNum = 3;
    if (has_currentnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->currentnum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void WarNumData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WarNumData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WarNumData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WarNumData::MergeFrom(const WarNumData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_worldid(from.worldid());
    }
    if (from._has_bit(1)) {
      set_campid(from.campid());
    }
    if (from._has_bit(2)) {
      set_currentnum(from.currentnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WarNumData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarNumData::CopyFrom(const WarNumData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarNumData::Swap(WarNumData* other) {
  if (other != this) {
    std::swap(worldid_, other->worldid_);
    std::swap(campid_, other->campid_);
    std::swap(currentnum_, other->currentnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool WarNumData::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* WarNumData::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* WarNumData::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return WarNumData_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageQueryWarNumResponse::kCharIDFieldNumber;
const int CMessageQueryWarNumResponse::kWarDataFieldNumber;
const int CMessageQueryWarNumResponse::kCampIDFieldNumber;
#endif  // !_MSC_VER

CMessageQueryWarNumResponse::CMessageQueryWarNumResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageQueryWarNumResponse::InitAsDefaultInstance() {}

CMessageQueryWarNumResponse::CMessageQueryWarNumResponse(const CMessageQueryWarNumResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageQueryWarNumResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  campid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageQueryWarNumResponse::~CMessageQueryWarNumResponse() {
  SharedDtor();
}

void CMessageQueryWarNumResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageQueryWarNumResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryWarNumResponse_descriptor_;
}

const CMessageQueryWarNumResponse& CMessageQueryWarNumResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageQueryWarNumResponse* CMessageQueryWarNumResponse::default_instance_ = NULL;

CMessageQueryWarNumResponse* CMessageQueryWarNumResponse::New() const {
  return new CMessageQueryWarNumResponse;
}

void CMessageQueryWarNumResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    campid_ = 0u;
  }
  wardata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageQueryWarNumResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_WarData;
        break;
      }
      
      // repeated .WarNumData WarData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_WarData:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_wardata()));
        if (input->ExpectTag(18)) goto parse_WarData;
        if (input->ExpectTag(24)) goto parse_CampID;
        break;
      }
      
      // optional uint32 CampID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CampID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &campid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageQueryWarNumResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageQueryWarNumResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // repeated .WarNumData WarData = 2;
  for (int i = 0; i < this->wardata_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->wardata(i), output);
  }
  
  // optional uint32 CampID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->campid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageQueryWarNumResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // repeated .WarNumData WarData = 2;
  for (int i = 0; i < this->wardata_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->wardata(i), target);
  }
  
  // optional uint32 CampID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->campid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageQueryWarNumResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 CampID = 3;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->campid());
    }
    
  }
  // repeated .WarNumData WarData = 2;
  total_size += 1 * this->wardata_size();
  for (int i = 0; i < this->wardata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->wardata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageQueryWarNumResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageQueryWarNumResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageQueryWarNumResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageQueryWarNumResponse::MergeFrom(const CMessageQueryWarNumResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  wardata_.MergeFrom(from.wardata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(2)) {
      set_campid(from.campid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageQueryWarNumResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryWarNumResponse::CopyFrom(const CMessageQueryWarNumResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryWarNumResponse::Swap(CMessageQueryWarNumResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    wardata_.Swap(&other->wardata_);
    std::swap(campid_, other->campid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageQueryWarNumResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageQueryWarNumResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageQueryWarNumResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryWarNumResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int WarDetailInfo::kWorldIDFieldNumber;
const int WarDetailInfo::kCurrentNumFieldNumber;
const int WarDetailInfo::kPowerFieldNumber;
const int WarDetailInfo::kFlagFieldNumber;
const int WarDetailInfo::kResourceFieldNumber;
const int WarDetailInfo::kKillFieldNumber;
const int WarDetailInfo::kCampIDFieldNumber;
#endif  // !_MSC_VER

WarDetailInfo::WarDetailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WarDetailInfo::InitAsDefaultInstance() {}

WarDetailInfo::WarDetailInfo(const WarDetailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WarDetailInfo::SharedCtor() {
  _cached_size_ = 0;
  worldid_ = 0u;
  currentnum_ = 0u;
  power_ = 0u;
  flag_ = 0u;
  resource_ = 0u;
  kill_ = 0u;
  campid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WarDetailInfo::~WarDetailInfo() {
  SharedDtor();
}

void WarDetailInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* WarDetailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WarDetailInfo_descriptor_;
}

const WarDetailInfo& WarDetailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

WarDetailInfo* WarDetailInfo::default_instance_ = NULL;

WarDetailInfo* WarDetailInfo::New() const {
  return new WarDetailInfo;
}

void WarDetailInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    worldid_ = 0u;
    currentnum_ = 0u;
    power_ = 0u;
    flag_ = 0u;
    resource_ = 0u;
    kill_ = 0u;
    campid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WarDetailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 WorldID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &worldid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CurrentNum;
        break;
      }
      
      // optional uint32 CurrentNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CurrentNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &currentnum_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Power;
        break;
      }
      
      // optional uint32 Power = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Power:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &power_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Flag;
        break;
      }
      
      // optional uint32 Flag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Flag:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &flag_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Resource;
        break;
      }
      
      // optional uint32 Resource = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Resource:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &resource_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Kill;
        break;
      }
      
      // optional uint32 Kill = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Kill:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &kill_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_CampID;
        break;
      }
      
      // optional uint32 CampID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CampID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &campid_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WarDetailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    WarDetailInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 WorldID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->worldid(), output);
  }
  
  // optional uint32 CurrentNum = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->currentnum(), output);
  }
  
  // optional uint32 Power = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->power(), output);
  }
  
  // optional uint32 Flag = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->flag(), output);
  }
  
  // optional uint32 Resource = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->resource(), output);
  }
  
  // optional uint32 Kill = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->kill(), output);
  }
  
  // optional uint32 CampID = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->campid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WarDetailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 WorldID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->worldid(), target);
  }
  
  // optional uint32 CurrentNum = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->currentnum(), target);
  }
  
  // optional uint32 Power = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->power(), target);
  }
  
  // optional uint32 Flag = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->flag(), target);
  }
  
  // optional uint32 Resource = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->resource(), target);
  }
  
  // optional uint32 Kill = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->kill(), target);
  }
  
  // optional uint32 CampID = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->campid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WarDetailInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 WorldID = 1;
    if (has_worldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->worldid());
    }
    
    // optional uint32 CurrentNum = 2;
    if (has_currentnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->currentnum());
    }
    
    // optional uint32 Power = 3;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->power());
    }
    
    // optional uint32 Flag = 4;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->flag());
    }
    
    // optional uint32 Resource = 5;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->resource());
    }
    
    // optional uint32 Kill = 6;
    if (has_kill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->kill());
    }
    
    // optional uint32 CampID = 7;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->campid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void WarDetailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WarDetailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WarDetailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WarDetailInfo::MergeFrom(const WarDetailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_worldid(from.worldid());
    }
    if (from._has_bit(1)) {
      set_currentnum(from.currentnum());
    }
    if (from._has_bit(2)) {
      set_power(from.power());
    }
    if (from._has_bit(3)) {
      set_flag(from.flag());
    }
    if (from._has_bit(4)) {
      set_resource(from.resource());
    }
    if (from._has_bit(5)) {
      set_kill(from.kill());
    }
    if (from._has_bit(6)) {
      set_campid(from.campid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WarDetailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarDetailInfo::CopyFrom(const WarDetailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarDetailInfo::Swap(WarDetailInfo* other) {
  if (other != this) {
    std::swap(worldid_, other->worldid_);
    std::swap(currentnum_, other->currentnum_);
    std::swap(power_, other->power_);
    std::swap(flag_, other->flag_);
    std::swap(resource_, other->resource_);
    std::swap(kill_, other->kill_);
    std::swap(campid_, other->campid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool WarDetailInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* WarDetailInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* WarDetailInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return WarDetailInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageQueryWarInfoRequest::kCharIDFieldNumber;
const int CMessageQueryWarInfoRequest::kCampIDFieldNumber;
const int CMessageQueryWarInfoRequest::kNPCEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageQueryWarInfoRequest::CMessageQueryWarInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageQueryWarInfoRequest::InitAsDefaultInstance() {}

CMessageQueryWarInfoRequest::CMessageQueryWarInfoRequest(const CMessageQueryWarInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageQueryWarInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  npcentityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageQueryWarInfoRequest::~CMessageQueryWarInfoRequest() {
  SharedDtor();
}

void CMessageQueryWarInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageQueryWarInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryWarInfoRequest_descriptor_;
}

const CMessageQueryWarInfoRequest& CMessageQueryWarInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageQueryWarInfoRequest* CMessageQueryWarInfoRequest::default_instance_ = NULL;

CMessageQueryWarInfoRequest* CMessageQueryWarInfoRequest::New() const {
  return new CMessageQueryWarInfoRequest;
}

void CMessageQueryWarInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    npcentityid_ = 0u;
  }
  campid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageQueryWarInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CampID;
        break;
      }
      
      // repeated uint32 CampID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CampID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_campid(value);
        if (input->ExpectTag(16)) goto parse_CampID;
        if (input->ExpectTag(24)) goto parse_NPCEntityID;
        break;
      }
      
      // optional uint32 NPCEntityID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NPCEntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcentityid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageQueryWarInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageQueryWarInfoRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // repeated uint32 CampID = 2;
  for (int i = 0; i < this->campid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->campid(i), output);
  }
  
  // optional uint32 NPCEntityID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->npcentityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageQueryWarInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // repeated uint32 CampID = 2;
  for (int i = 0; i < this->campid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->campid(i), target);
  }
  
  // optional uint32 NPCEntityID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->npcentityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageQueryWarInfoRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 NPCEntityID = 3;
    if (has_npcentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcentityid());
    }
    
  }
  // repeated uint32 CampID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->campid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->campid(i));
    }
    total_size += 1 * this->campid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageQueryWarInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageQueryWarInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageQueryWarInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageQueryWarInfoRequest::MergeFrom(const CMessageQueryWarInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  campid_.MergeFrom(from.campid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(2)) {
      set_npcentityid(from.npcentityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageQueryWarInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryWarInfoRequest::CopyFrom(const CMessageQueryWarInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryWarInfoRequest::Swap(CMessageQueryWarInfoRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    campid_.Swap(&other->campid_);
    std::swap(npcentityid_, other->npcentityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageQueryWarInfoRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageQueryWarInfoRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageQueryWarInfoRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryWarInfoRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageQueryWarInfoResponse::kCharIDFieldNumber;
const int CMessageQueryWarInfoResponse::kCampInfoFieldNumber;
#endif  // !_MSC_VER

CMessageQueryWarInfoResponse::CMessageQueryWarInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageQueryWarInfoResponse::InitAsDefaultInstance() {}

CMessageQueryWarInfoResponse::CMessageQueryWarInfoResponse(const CMessageQueryWarInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageQueryWarInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageQueryWarInfoResponse::~CMessageQueryWarInfoResponse() {
  SharedDtor();
}

void CMessageQueryWarInfoResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageQueryWarInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryWarInfoResponse_descriptor_;
}

const CMessageQueryWarInfoResponse& CMessageQueryWarInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageQueryWarInfoResponse* CMessageQueryWarInfoResponse::default_instance_ = NULL;

CMessageQueryWarInfoResponse* CMessageQueryWarInfoResponse::New() const {
  return new CMessageQueryWarInfoResponse;
}

void CMessageQueryWarInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  campinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageQueryWarInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_CampInfo;
        break;
      }
      
      // repeated .WarDetailInfo CampInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CampInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_campinfo()));
        if (input->ExpectTag(18)) goto parse_CampInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageQueryWarInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageQueryWarInfoResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // repeated .WarDetailInfo CampInfo = 2;
  for (int i = 0; i < this->campinfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->campinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageQueryWarInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // repeated .WarDetailInfo CampInfo = 2;
  for (int i = 0; i < this->campinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->campinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageQueryWarInfoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  // repeated .WarDetailInfo CampInfo = 2;
  total_size += 1 * this->campinfo_size();
  for (int i = 0; i < this->campinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->campinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageQueryWarInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageQueryWarInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageQueryWarInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageQueryWarInfoResponse::MergeFrom(const CMessageQueryWarInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  campinfo_.MergeFrom(from.campinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageQueryWarInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryWarInfoResponse::CopyFrom(const CMessageQueryWarInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryWarInfoResponse::Swap(CMessageQueryWarInfoResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    campinfo_.Swap(&other->campinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageQueryWarInfoResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageQueryWarInfoResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageQueryWarInfoResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryWarInfoResponse_reflection_;
}

// ===================================================================

const ::std::string WarRankInfo::_default_charname_;
#ifndef _MSC_VER
const int WarRankInfo::kWorldIDFieldNumber;
const int WarRankInfo::kMetierIDFieldNumber;
const int WarRankInfo::kKillFieldNumber;
const int WarRankInfo::kCharNameFieldNumber;
const int WarRankInfo::kRankFieldNumber;
const int WarRankInfo::kHonorFieldNumber;
#endif  // !_MSC_VER

WarRankInfo::WarRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WarRankInfo::InitAsDefaultInstance() {}

WarRankInfo::WarRankInfo(const WarRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WarRankInfo::SharedCtor() {
  _cached_size_ = 0;
  worldid_ = 0u;
  metierid_ = 0u;
  kill_ = 0u;
  charname_ = const_cast< ::std::string*>(&_default_charname_);
  rank_ = 0u;
  honor_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WarRankInfo::~WarRankInfo() {
  SharedDtor();
}

void WarRankInfo::SharedDtor() {
  if (charname_ != &_default_charname_) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* WarRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WarRankInfo_descriptor_;
}

const WarRankInfo& WarRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

WarRankInfo* WarRankInfo::default_instance_ = NULL;

WarRankInfo* WarRankInfo::New() const {
  return new WarRankInfo;
}

void WarRankInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    worldid_ = 0u;
    metierid_ = 0u;
    kill_ = 0u;
    if (_has_bit(3)) {
      if (charname_ != &_default_charname_) {
        charname_->clear();
      }
    }
    rank_ = 0u;
    honor_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WarRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 WorldID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &worldid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_MetierID;
        break;
      }
      
      // optional uint32 MetierID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MetierID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &metierid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Kill;
        break;
      }
      
      // optional uint32 Kill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Kill:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &kill_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_CharName;
        break;
      }
      
      // optional string CharName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CharName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_charname()));
        if (input->ExpectTag(40)) goto parse_Rank;
        break;
      }
      
      // optional uint32 Rank = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Rank:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rank_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Honor;
        break;
      }
      
      // optional uint32 Honor = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Honor:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &honor_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WarRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    WarRankInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 WorldID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->worldid(), output);
  }
  
  // optional uint32 MetierID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->metierid(), output);
  }
  
  // optional uint32 Kill = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->kill(), output);
  }
  
  // optional string CharName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->charname(), output);
  }
  
  // optional uint32 Rank = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->rank(), output);
  }
  
  // optional uint32 Honor = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->honor(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WarRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 WorldID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->worldid(), target);
  }
  
  // optional uint32 MetierID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->metierid(), target);
  }
  
  // optional uint32 Kill = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->kill(), target);
  }
  
  // optional string CharName = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->charname(), target);
  }
  
  // optional uint32 Rank = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->rank(), target);
  }
  
  // optional uint32 Honor = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->honor(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WarRankInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 WorldID = 1;
    if (has_worldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->worldid());
    }
    
    // optional uint32 MetierID = 2;
    if (has_metierid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->metierid());
    }
    
    // optional uint32 Kill = 3;
    if (has_kill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->kill());
    }
    
    // optional string CharName = 4;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->charname());
    }
    
    // optional uint32 Rank = 5;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rank());
    }
    
    // optional uint32 Honor = 6;
    if (has_honor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->honor());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void WarRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WarRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WarRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WarRankInfo::MergeFrom(const WarRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_worldid(from.worldid());
    }
    if (from._has_bit(1)) {
      set_metierid(from.metierid());
    }
    if (from._has_bit(2)) {
      set_kill(from.kill());
    }
    if (from._has_bit(3)) {
      set_charname(from.charname());
    }
    if (from._has_bit(4)) {
      set_rank(from.rank());
    }
    if (from._has_bit(5)) {
      set_honor(from.honor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WarRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarRankInfo::CopyFrom(const WarRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarRankInfo::Swap(WarRankInfo* other) {
  if (other != this) {
    std::swap(worldid_, other->worldid_);
    std::swap(metierid_, other->metierid_);
    std::swap(kill_, other->kill_);
    std::swap(charname_, other->charname_);
    std::swap(rank_, other->rank_);
    std::swap(honor_, other->honor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool WarRankInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* WarRankInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* WarRankInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return WarRankInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageQueryWarRankRequest::kCharIDFieldNumber;
const int CMessageQueryWarRankRequest::kNPCEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageQueryWarRankRequest::CMessageQueryWarRankRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageQueryWarRankRequest::InitAsDefaultInstance() {}

CMessageQueryWarRankRequest::CMessageQueryWarRankRequest(const CMessageQueryWarRankRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageQueryWarRankRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  npcentityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageQueryWarRankRequest::~CMessageQueryWarRankRequest() {
  SharedDtor();
}

void CMessageQueryWarRankRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageQueryWarRankRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryWarRankRequest_descriptor_;
}

const CMessageQueryWarRankRequest& CMessageQueryWarRankRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageQueryWarRankRequest* CMessageQueryWarRankRequest::default_instance_ = NULL;

CMessageQueryWarRankRequest* CMessageQueryWarRankRequest::New() const {
  return new CMessageQueryWarRankRequest;
}

void CMessageQueryWarRankRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    npcentityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageQueryWarRankRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_NPCEntityID;
        break;
      }
      
      // optional uint32 NPCEntityID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NPCEntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcentityid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageQueryWarRankRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageQueryWarRankRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 NPCEntityID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->npcentityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageQueryWarRankRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 NPCEntityID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->npcentityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageQueryWarRankRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 NPCEntityID = 2;
    if (has_npcentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcentityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageQueryWarRankRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageQueryWarRankRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageQueryWarRankRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageQueryWarRankRequest::MergeFrom(const CMessageQueryWarRankRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_npcentityid(from.npcentityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageQueryWarRankRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryWarRankRequest::CopyFrom(const CMessageQueryWarRankRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryWarRankRequest::Swap(CMessageQueryWarRankRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(npcentityid_, other->npcentityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageQueryWarRankRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageQueryWarRankRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageQueryWarRankRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryWarRankRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageQueryWarRankResponse::kCharIDFieldNumber;
const int CMessageQueryWarRankResponse::kRankInfoFieldNumber;
#endif  // !_MSC_VER

CMessageQueryWarRankResponse::CMessageQueryWarRankResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageQueryWarRankResponse::InitAsDefaultInstance() {}

CMessageQueryWarRankResponse::CMessageQueryWarRankResponse(const CMessageQueryWarRankResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageQueryWarRankResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageQueryWarRankResponse::~CMessageQueryWarRankResponse() {
  SharedDtor();
}

void CMessageQueryWarRankResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageQueryWarRankResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryWarRankResponse_descriptor_;
}

const CMessageQueryWarRankResponse& CMessageQueryWarRankResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageQueryWarRankResponse* CMessageQueryWarRankResponse::default_instance_ = NULL;

CMessageQueryWarRankResponse* CMessageQueryWarRankResponse::New() const {
  return new CMessageQueryWarRankResponse;
}

void CMessageQueryWarRankResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  rankinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageQueryWarRankResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_RankInfo;
        break;
      }
      
      // repeated .WarRankInfo RankInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RankInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_rankinfo()));
        if (input->ExpectTag(18)) goto parse_RankInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageQueryWarRankResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageQueryWarRankResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // repeated .WarRankInfo RankInfo = 2;
  for (int i = 0; i < this->rankinfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->rankinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageQueryWarRankResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // repeated .WarRankInfo RankInfo = 2;
  for (int i = 0; i < this->rankinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->rankinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageQueryWarRankResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  // repeated .WarRankInfo RankInfo = 2;
  total_size += 1 * this->rankinfo_size();
  for (int i = 0; i < this->rankinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->rankinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageQueryWarRankResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageQueryWarRankResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageQueryWarRankResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageQueryWarRankResponse::MergeFrom(const CMessageQueryWarRankResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankinfo_.MergeFrom(from.rankinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageQueryWarRankResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryWarRankResponse::CopyFrom(const CMessageQueryWarRankResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryWarRankResponse::Swap(CMessageQueryWarRankResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    rankinfo_.Swap(&other->rankinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageQueryWarRankResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageQueryWarRankResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageQueryWarRankResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryWarRankResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageWarSourceNotify::kWorldIDFieldNumber;
const int CMessageWarSourceNotify::kMapIDFieldNumber;
const int CMessageWarSourceNotify::kResourceFieldNumber;
const int CMessageWarSourceNotify::kCharIDFieldNumber;
const int CMessageWarSourceNotify::kSourceNumFieldNumber;
#endif  // !_MSC_VER

CMessageWarSourceNotify::CMessageWarSourceNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageWarSourceNotify::InitAsDefaultInstance() {}

CMessageWarSourceNotify::CMessageWarSourceNotify(const CMessageWarSourceNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageWarSourceNotify::SharedCtor() {
  _cached_size_ = 0;
  worldid_ = 0u;
  mapid_ = 0u;
  resource_ = 0u;
  charid_ = 0u;
  sourcenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageWarSourceNotify::~CMessageWarSourceNotify() {
  SharedDtor();
}

void CMessageWarSourceNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageWarSourceNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageWarSourceNotify_descriptor_;
}

const CMessageWarSourceNotify& CMessageWarSourceNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageWarSourceNotify* CMessageWarSourceNotify::default_instance_ = NULL;

CMessageWarSourceNotify* CMessageWarSourceNotify::New() const {
  return new CMessageWarSourceNotify;
}

void CMessageWarSourceNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    worldid_ = 0u;
    mapid_ = 0u;
    resource_ = 0u;
    charid_ = 0u;
    sourcenum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageWarSourceNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 WorldID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &worldid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Resource;
        break;
      }
      
      // optional uint32 Resource = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Resource:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &resource_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_SourceNum;
        break;
      }
      
      // optional uint32 SourceNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SourceNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sourcenum_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageWarSourceNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageWarSourceNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 WorldID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->worldid(), output);
  }
  
  // optional uint32 MapID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->mapid(), output);
  }
  
  // optional uint32 Resource = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->resource(), output);
  }
  
  // optional uint32 CharID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->charid(), output);
  }
  
  // optional uint32 SourceNum = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->sourcenum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageWarSourceNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 WorldID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->worldid(), target);
  }
  
  // optional uint32 MapID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->mapid(), target);
  }
  
  // optional uint32 Resource = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->resource(), target);
  }
  
  // optional uint32 CharID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->charid(), target);
  }
  
  // optional uint32 SourceNum = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->sourcenum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageWarSourceNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 WorldID = 1;
    if (has_worldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->worldid());
    }
    
    // optional uint32 MapID = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 Resource = 3;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->resource());
    }
    
    // optional uint32 CharID = 4;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 SourceNum = 5;
    if (has_sourcenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sourcenum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageWarSourceNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageWarSourceNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageWarSourceNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageWarSourceNotify::MergeFrom(const CMessageWarSourceNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_worldid(from.worldid());
    }
    if (from._has_bit(1)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(2)) {
      set_resource(from.resource());
    }
    if (from._has_bit(3)) {
      set_charid(from.charid());
    }
    if (from._has_bit(4)) {
      set_sourcenum(from.sourcenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageWarSourceNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageWarSourceNotify::CopyFrom(const CMessageWarSourceNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageWarSourceNotify::Swap(CMessageWarSourceNotify* other) {
  if (other != this) {
    std::swap(worldid_, other->worldid_);
    std::swap(mapid_, other->mapid_);
    std::swap(resource_, other->resource_);
    std::swap(charid_, other->charid_);
    std::swap(sourcenum_, other->sourcenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageWarSourceNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageWarSourceNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageWarSourceNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageWarSourceNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBidCampRequest::kCharIDFieldNumber;
const int CMessageBidCampRequest::kNPCEntityIDFieldNumber;
const int CMessageBidCampRequest::kMoneyFieldNumber;
const int CMessageBidCampRequest::kCampIDFieldNumber;
#endif  // !_MSC_VER

CMessageBidCampRequest::CMessageBidCampRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBidCampRequest::InitAsDefaultInstance() {}

CMessageBidCampRequest::CMessageBidCampRequest(const CMessageBidCampRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBidCampRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  npcentityid_ = 0u;
  money_ = 0u;
  campid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBidCampRequest::~CMessageBidCampRequest() {
  SharedDtor();
}

void CMessageBidCampRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageBidCampRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBidCampRequest_descriptor_;
}

const CMessageBidCampRequest& CMessageBidCampRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageBidCampRequest* CMessageBidCampRequest::default_instance_ = NULL;

CMessageBidCampRequest* CMessageBidCampRequest::New() const {
  return new CMessageBidCampRequest;
}

void CMessageBidCampRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    npcentityid_ = 0u;
    money_ = 0u;
    campid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBidCampRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_NPCEntityID;
        break;
      }
      
      // optional uint32 NPCEntityID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NPCEntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcentityid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Money;
        break;
      }
      
      // optional uint32 Money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_CampID;
        break;
      }
      
      // optional uint32 CampID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CampID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &campid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBidCampRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBidCampRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 NPCEntityID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->npcentityid(), output);
  }
  
  // optional uint32 Money = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->money(), output);
  }
  
  // optional uint32 CampID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->campid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBidCampRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 NPCEntityID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->npcentityid(), target);
  }
  
  // optional uint32 Money = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->money(), target);
  }
  
  // optional uint32 CampID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->campid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBidCampRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 NPCEntityID = 2;
    if (has_npcentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcentityid());
    }
    
    // optional uint32 Money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
    // optional uint32 CampID = 4;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->campid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBidCampRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBidCampRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBidCampRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBidCampRequest::MergeFrom(const CMessageBidCampRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_npcentityid(from.npcentityid());
    }
    if (from._has_bit(2)) {
      set_money(from.money());
    }
    if (from._has_bit(3)) {
      set_campid(from.campid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBidCampRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBidCampRequest::CopyFrom(const CMessageBidCampRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBidCampRequest::Swap(CMessageBidCampRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(npcentityid_, other->npcentityid_);
    std::swap(money_, other->money_);
    std::swap(campid_, other->campid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBidCampRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBidCampRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBidCampRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBidCampRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBidCampResponse::kCharIDFieldNumber;
const int CMessageBidCampResponse::kResultFieldNumber;
const int CMessageBidCampResponse::kMoneyFieldNumber;
const int CMessageBidCampResponse::kCampIDFieldNumber;
#endif  // !_MSC_VER

CMessageBidCampResponse::CMessageBidCampResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBidCampResponse::InitAsDefaultInstance() {}

CMessageBidCampResponse::CMessageBidCampResponse(const CMessageBidCampResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBidCampResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  result_ = 0u;
  money_ = 0u;
  campid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBidCampResponse::~CMessageBidCampResponse() {
  SharedDtor();
}

void CMessageBidCampResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageBidCampResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBidCampResponse_descriptor_;
}

const CMessageBidCampResponse& CMessageBidCampResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageBidCampResponse* CMessageBidCampResponse::default_instance_ = NULL;

CMessageBidCampResponse* CMessageBidCampResponse::New() const {
  return new CMessageBidCampResponse;
}

void CMessageBidCampResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    result_ = 0u;
    money_ = 0u;
    campid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBidCampResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Money;
        break;
      }
      
      // optional uint32 Money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_CampID;
        break;
      }
      
      // optional uint32 CampID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CampID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &campid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBidCampResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBidCampResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  // optional uint32 Money = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->money(), output);
  }
  
  // optional uint32 CampID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->campid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBidCampResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  // optional uint32 Money = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->money(), target);
  }
  
  // optional uint32 CampID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->campid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBidCampResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 Money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
    // optional uint32 CampID = 4;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->campid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBidCampResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBidCampResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBidCampResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBidCampResponse::MergeFrom(const CMessageBidCampResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_money(from.money());
    }
    if (from._has_bit(3)) {
      set_campid(from.campid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBidCampResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBidCampResponse::CopyFrom(const CMessageBidCampResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBidCampResponse::Swap(CMessageBidCampResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(result_, other->result_);
    std::swap(money_, other->money_);
    std::swap(campid_, other->campid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBidCampResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBidCampResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBidCampResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBidCampResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCampBidInfoRequest::kCharIDFieldNumber;
const int CMessageCampBidInfoRequest::kNPCEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageCampBidInfoRequest::CMessageCampBidInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCampBidInfoRequest::InitAsDefaultInstance() {}

CMessageCampBidInfoRequest::CMessageCampBidInfoRequest(const CMessageCampBidInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCampBidInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  npcentityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCampBidInfoRequest::~CMessageCampBidInfoRequest() {
  SharedDtor();
}

void CMessageCampBidInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCampBidInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCampBidInfoRequest_descriptor_;
}

const CMessageCampBidInfoRequest& CMessageCampBidInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCampBidInfoRequest* CMessageCampBidInfoRequest::default_instance_ = NULL;

CMessageCampBidInfoRequest* CMessageCampBidInfoRequest::New() const {
  return new CMessageCampBidInfoRequest;
}

void CMessageCampBidInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    npcentityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCampBidInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_NPCEntityID;
        break;
      }
      
      // optional uint32 NPCEntityID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NPCEntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcentityid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCampBidInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCampBidInfoRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 NPCEntityID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->npcentityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCampBidInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 NPCEntityID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->npcentityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCampBidInfoRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 NPCEntityID = 2;
    if (has_npcentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcentityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCampBidInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCampBidInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCampBidInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCampBidInfoRequest::MergeFrom(const CMessageCampBidInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_npcentityid(from.npcentityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCampBidInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCampBidInfoRequest::CopyFrom(const CMessageCampBidInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCampBidInfoRequest::Swap(CMessageCampBidInfoRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(npcentityid_, other->npcentityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCampBidInfoRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCampBidInfoRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCampBidInfoRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCampBidInfoRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCampBidInfoResponse::kCharIDFieldNumber;
const int CMessageCampBidInfoResponse::kResultFieldNumber;
const int CMessageCampBidInfoResponse::kMoneyFieldNumber;
const int CMessageCampBidInfoResponse::kCampIDFieldNumber;
#endif  // !_MSC_VER

CMessageCampBidInfoResponse::CMessageCampBidInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCampBidInfoResponse::InitAsDefaultInstance() {}

CMessageCampBidInfoResponse::CMessageCampBidInfoResponse(const CMessageCampBidInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCampBidInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  result_ = 0u;
  money_ = 0u;
  campid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCampBidInfoResponse::~CMessageCampBidInfoResponse() {
  SharedDtor();
}

void CMessageCampBidInfoResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCampBidInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCampBidInfoResponse_descriptor_;
}

const CMessageCampBidInfoResponse& CMessageCampBidInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCampBidInfoResponse* CMessageCampBidInfoResponse::default_instance_ = NULL;

CMessageCampBidInfoResponse* CMessageCampBidInfoResponse::New() const {
  return new CMessageCampBidInfoResponse;
}

void CMessageCampBidInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    result_ = 0u;
    money_ = 0u;
    campid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCampBidInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Money;
        break;
      }
      
      // optional uint32 Money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_CampID;
        break;
      }
      
      // optional uint32 CampID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CampID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &campid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCampBidInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCampBidInfoResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  // optional uint32 Money = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->money(), output);
  }
  
  // optional uint32 CampID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->campid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCampBidInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  // optional uint32 Money = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->money(), target);
  }
  
  // optional uint32 CampID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->campid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCampBidInfoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 Money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
    // optional uint32 CampID = 4;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->campid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCampBidInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCampBidInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCampBidInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCampBidInfoResponse::MergeFrom(const CMessageCampBidInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_money(from.money());
    }
    if (from._has_bit(3)) {
      set_campid(from.campid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCampBidInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCampBidInfoResponse::CopyFrom(const CMessageCampBidInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCampBidInfoResponse::Swap(CMessageCampBidInfoResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(result_, other->result_);
    std::swap(money_, other->money_);
    std::swap(campid_, other->campid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCampBidInfoResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCampBidInfoResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCampBidInfoResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCampBidInfoResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCampResInfoRequest::kCharIDFieldNumber;
const int CMessageCampResInfoRequest::kNPCEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageCampResInfoRequest::CMessageCampResInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCampResInfoRequest::InitAsDefaultInstance() {}

CMessageCampResInfoRequest::CMessageCampResInfoRequest(const CMessageCampResInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCampResInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  npcentityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCampResInfoRequest::~CMessageCampResInfoRequest() {
  SharedDtor();
}

void CMessageCampResInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCampResInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCampResInfoRequest_descriptor_;
}

const CMessageCampResInfoRequest& CMessageCampResInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCampResInfoRequest* CMessageCampResInfoRequest::default_instance_ = NULL;

CMessageCampResInfoRequest* CMessageCampResInfoRequest::New() const {
  return new CMessageCampResInfoRequest;
}

void CMessageCampResInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    npcentityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCampResInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_NPCEntityID;
        break;
      }
      
      // optional uint32 NPCEntityID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NPCEntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcentityid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCampResInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCampResInfoRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 NPCEntityID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->npcentityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCampResInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 NPCEntityID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->npcentityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCampResInfoRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 NPCEntityID = 2;
    if (has_npcentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcentityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCampResInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCampResInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCampResInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCampResInfoRequest::MergeFrom(const CMessageCampResInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_npcentityid(from.npcentityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCampResInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCampResInfoRequest::CopyFrom(const CMessageCampResInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCampResInfoRequest::Swap(CMessageCampResInfoRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(npcentityid_, other->npcentityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCampResInfoRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCampResInfoRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCampResInfoRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCampResInfoRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCampResInfoResponse::kCharIDFieldNumber;
const int CMessageCampResInfoResponse::kResultFieldNumber;
const int CMessageCampResInfoResponse::kWorldIDFieldNumber;
const int CMessageCampResInfoResponse::kCampIDFieldNumber;
const int CMessageCampResInfoResponse::kMoneyFieldNumber;
#endif  // !_MSC_VER

CMessageCampResInfoResponse::CMessageCampResInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCampResInfoResponse::InitAsDefaultInstance() {}

CMessageCampResInfoResponse::CMessageCampResInfoResponse(const CMessageCampResInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCampResInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCampResInfoResponse::~CMessageCampResInfoResponse() {
  SharedDtor();
}

void CMessageCampResInfoResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCampResInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCampResInfoResponse_descriptor_;
}

const CMessageCampResInfoResponse& CMessageCampResInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCampResInfoResponse* CMessageCampResInfoResponse::default_instance_ = NULL;

CMessageCampResInfoResponse* CMessageCampResInfoResponse::New() const {
  return new CMessageCampResInfoResponse;
}

void CMessageCampResInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    result_ = 0u;
  }
  worldid_.Clear();
  campid_.Clear();
  money_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCampResInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_WorldID;
        break;
      }
      
      // repeated uint32 WorldID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WorldID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_worldid(value);
        if (input->ExpectTag(24)) goto parse_WorldID;
        if (input->ExpectTag(32)) goto parse_CampID;
        break;
      }
      
      // repeated uint32 CampID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CampID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_campid(value);
        if (input->ExpectTag(32)) goto parse_CampID;
        if (input->ExpectTag(40)) goto parse_Money;
        break;
      }
      
      // repeated uint32 Money = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_money(value);
        if (input->ExpectTag(40)) goto parse_Money;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCampResInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCampResInfoResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  // repeated uint32 WorldID = 3;
  for (int i = 0; i < this->worldid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->worldid(i), output);
  }
  
  // repeated uint32 CampID = 4;
  for (int i = 0; i < this->campid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->campid(i), output);
  }
  
  // repeated uint32 Money = 5;
  for (int i = 0; i < this->money_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->money(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCampResInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  // repeated uint32 WorldID = 3;
  for (int i = 0; i < this->worldid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->worldid(i), target);
  }
  
  // repeated uint32 CampID = 4;
  for (int i = 0; i < this->campid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->campid(i), target);
  }
  
  // repeated uint32 Money = 5;
  for (int i = 0; i < this->money_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->money(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCampResInfoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
  }
  // repeated uint32 WorldID = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->worldid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->worldid(i));
    }
    total_size += 1 * this->worldid_size() + data_size;
  }
  
  // repeated uint32 CampID = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->campid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->campid(i));
    }
    total_size += 1 * this->campid_size() + data_size;
  }
  
  // repeated uint32 Money = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->money_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->money(i));
    }
    total_size += 1 * this->money_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCampResInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCampResInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCampResInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCampResInfoResponse::MergeFrom(const CMessageCampResInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  worldid_.MergeFrom(from.worldid_);
  campid_.MergeFrom(from.campid_);
  money_.MergeFrom(from.money_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCampResInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCampResInfoResponse::CopyFrom(const CMessageCampResInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCampResInfoResponse::Swap(CMessageCampResInfoResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(result_, other->result_);
    worldid_.Swap(&other->worldid_);
    campid_.Swap(&other->campid_);
    money_.Swap(&other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCampResInfoResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCampResInfoResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCampResInfoResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCampResInfoResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetWarAwardRequest::kCharIDFieldNumber;
const int CMessageGetWarAwardRequest::kWarSerialFieldNumber;
#endif  // !_MSC_VER

CMessageGetWarAwardRequest::CMessageGetWarAwardRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetWarAwardRequest::InitAsDefaultInstance() {}

CMessageGetWarAwardRequest::CMessageGetWarAwardRequest(const CMessageGetWarAwardRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetWarAwardRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  warserial_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetWarAwardRequest::~CMessageGetWarAwardRequest() {
  SharedDtor();
}

void CMessageGetWarAwardRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGetWarAwardRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetWarAwardRequest_descriptor_;
}

const CMessageGetWarAwardRequest& CMessageGetWarAwardRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetWarAwardRequest* CMessageGetWarAwardRequest::default_instance_ = NULL;

CMessageGetWarAwardRequest* CMessageGetWarAwardRequest::New() const {
  return new CMessageGetWarAwardRequest;
}

void CMessageGetWarAwardRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    warserial_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetWarAwardRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_WarSerial;
        break;
      }
      
      // optional uint32 WarSerial = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarSerial:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warserial_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetWarAwardRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetWarAwardRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 WarSerial = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->warserial(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetWarAwardRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 WarSerial = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->warserial(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetWarAwardRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 WarSerial = 2;
    if (has_warserial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warserial());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetWarAwardRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetWarAwardRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetWarAwardRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetWarAwardRequest::MergeFrom(const CMessageGetWarAwardRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_warserial(from.warserial());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetWarAwardRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetWarAwardRequest::CopyFrom(const CMessageGetWarAwardRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetWarAwardRequest::Swap(CMessageGetWarAwardRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(warserial_, other->warserial_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetWarAwardRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetWarAwardRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetWarAwardRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetWarAwardRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetWarAwardResponse::kCharIDFieldNumber;
const int CMessageGetWarAwardResponse::kResultFieldNumber;
const int CMessageGetWarAwardResponse::kMoneyFieldNumber;
const int CMessageGetWarAwardResponse::kRankFieldNumber;
const int CMessageGetWarAwardResponse::kValidTimeFieldNumber;
#endif  // !_MSC_VER

CMessageGetWarAwardResponse::CMessageGetWarAwardResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetWarAwardResponse::InitAsDefaultInstance() {}

CMessageGetWarAwardResponse::CMessageGetWarAwardResponse(const CMessageGetWarAwardResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetWarAwardResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  result_ = 0u;
  money_ = 0u;
  rank_ = 0u;
  validtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetWarAwardResponse::~CMessageGetWarAwardResponse() {
  SharedDtor();
}

void CMessageGetWarAwardResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGetWarAwardResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetWarAwardResponse_descriptor_;
}

const CMessageGetWarAwardResponse& CMessageGetWarAwardResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetWarAwardResponse* CMessageGetWarAwardResponse::default_instance_ = NULL;

CMessageGetWarAwardResponse* CMessageGetWarAwardResponse::New() const {
  return new CMessageGetWarAwardResponse;
}

void CMessageGetWarAwardResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    result_ = 0u;
    money_ = 0u;
    rank_ = 0u;
    validtime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetWarAwardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Money;
        break;
      }
      
      // optional uint32 Money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Rank;
        break;
      }
      
      // optional uint32 Rank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Rank:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rank_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_ValidTime;
        break;
      }
      
      // optional uint32 ValidTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ValidTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &validtime_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetWarAwardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetWarAwardResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  // optional uint32 Money = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->money(), output);
  }
  
  // optional uint32 Rank = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->rank(), output);
  }
  
  // optional uint32 ValidTime = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->validtime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetWarAwardResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  // optional uint32 Money = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->money(), target);
  }
  
  // optional uint32 Rank = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->rank(), target);
  }
  
  // optional uint32 ValidTime = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->validtime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetWarAwardResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 Money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
    // optional uint32 Rank = 4;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rank());
    }
    
    // optional uint32 ValidTime = 5;
    if (has_validtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->validtime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetWarAwardResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetWarAwardResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetWarAwardResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetWarAwardResponse::MergeFrom(const CMessageGetWarAwardResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_money(from.money());
    }
    if (from._has_bit(3)) {
      set_rank(from.rank());
    }
    if (from._has_bit(4)) {
      set_validtime(from.validtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetWarAwardResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetWarAwardResponse::CopyFrom(const CMessageGetWarAwardResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetWarAwardResponse::Swap(CMessageGetWarAwardResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(result_, other->result_);
    std::swap(money_, other->money_);
    std::swap(rank_, other->rank_);
    std::swap(validtime_, other->validtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetWarAwardResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetWarAwardResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetWarAwardResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetWarAwardResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int NPCWarInfo::kPosXFieldNumber;
const int NPCWarInfo::kPosYFieldNumber;
const int NPCWarInfo::kWorldIDFieldNumber;
const int NPCWarInfo::kTempIDFieldNumber;
#endif  // !_MSC_VER

NPCWarInfo::NPCWarInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NPCWarInfo::InitAsDefaultInstance() {}

NPCWarInfo::NPCWarInfo(const NPCWarInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NPCWarInfo::SharedCtor() {
  _cached_size_ = 0;
  posx_ = 0u;
  posy_ = 0u;
  worldid_ = 0u;
  tempid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NPCWarInfo::~NPCWarInfo() {
  SharedDtor();
}

void NPCWarInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* NPCWarInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NPCWarInfo_descriptor_;
}

const NPCWarInfo& NPCWarInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

NPCWarInfo* NPCWarInfo::default_instance_ = NULL;

NPCWarInfo* NPCWarInfo::New() const {
  return new NPCWarInfo;
}

void NPCWarInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    posx_ = 0u;
    posy_ = 0u;
    worldid_ = 0u;
    tempid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NPCWarInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 PosX = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posx_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_PosY;
        break;
      }
      
      // optional uint32 PosY = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posy_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_WorldID;
        break;
      }
      
      // optional uint32 WorldID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WorldID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &worldid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_TempID;
        break;
      }
      
      // optional uint32 TempID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TempID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NPCWarInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    NPCWarInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 PosX = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->posx(), output);
  }
  
  // optional uint32 PosY = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->posy(), output);
  }
  
  // optional uint32 WorldID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->worldid(), output);
  }
  
  // optional uint32 TempID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->tempid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NPCWarInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 PosX = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->posx(), target);
  }
  
  // optional uint32 PosY = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->posy(), target);
  }
  
  // optional uint32 WorldID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->worldid(), target);
  }
  
  // optional uint32 TempID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->tempid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NPCWarInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 PosX = 1;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posx());
    }
    
    // optional uint32 PosY = 2;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posy());
    }
    
    // optional uint32 WorldID = 3;
    if (has_worldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->worldid());
    }
    
    // optional uint32 TempID = 4;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void NPCWarInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NPCWarInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NPCWarInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NPCWarInfo::MergeFrom(const NPCWarInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_posx(from.posx());
    }
    if (from._has_bit(1)) {
      set_posy(from.posy());
    }
    if (from._has_bit(2)) {
      set_worldid(from.worldid());
    }
    if (from._has_bit(3)) {
      set_tempid(from.tempid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NPCWarInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NPCWarInfo::CopyFrom(const NPCWarInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NPCWarInfo::Swap(NPCWarInfo* other) {
  if (other != this) {
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(worldid_, other->worldid_);
    std::swap(tempid_, other->tempid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool NPCWarInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* NPCWarInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* NPCWarInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return NPCWarInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageWarInfoNotify::kMapIDFieldNumber;
const int CMessageWarInfoNotify::kWarInfoFieldNumber;
const int CMessageWarInfoNotify::kStoneIDFieldNumber;
const int CMessageWarInfoNotify::kStoneXFieldNumber;
const int CMessageWarInfoNotify::kStoneYFieldNumber;
#endif  // !_MSC_VER

CMessageWarInfoNotify::CMessageWarInfoNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageWarInfoNotify::InitAsDefaultInstance() {}

CMessageWarInfoNotify::CMessageWarInfoNotify(const CMessageWarInfoNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageWarInfoNotify::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  stoneid_ = 0u;
  stonex_ = 0u;
  stoney_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageWarInfoNotify::~CMessageWarInfoNotify() {
  SharedDtor();
}

void CMessageWarInfoNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageWarInfoNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageWarInfoNotify_descriptor_;
}

const CMessageWarInfoNotify& CMessageWarInfoNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageWarInfoNotify* CMessageWarInfoNotify::default_instance_ = NULL;

CMessageWarInfoNotify* CMessageWarInfoNotify::New() const {
  return new CMessageWarInfoNotify;
}

void CMessageWarInfoNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0u;
    stoneid_ = 0u;
    stonex_ = 0u;
    stoney_ = 0u;
  }
  warinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageWarInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 MapID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_WarInfo;
        break;
      }
      
      // repeated .NPCWarInfo WarInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_WarInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_warinfo()));
        if (input->ExpectTag(18)) goto parse_WarInfo;
        if (input->ExpectTag(24)) goto parse_StoneID;
        break;
      }
      
      // optional uint32 StoneID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_StoneID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &stoneid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_StoneX;
        break;
      }
      
      // optional uint32 StoneX = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_StoneX:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &stonex_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_StoneY;
        break;
      }
      
      // optional uint32 StoneY = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_StoneY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &stoney_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageWarInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageWarInfoNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 MapID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->mapid(), output);
  }
  
  // repeated .NPCWarInfo WarInfo = 2;
  for (int i = 0; i < this->warinfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->warinfo(i), output);
  }
  
  // optional uint32 StoneID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->stoneid(), output);
  }
  
  // optional uint32 StoneX = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->stonex(), output);
  }
  
  // optional uint32 StoneY = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->stoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageWarInfoNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 MapID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->mapid(), target);
  }
  
  // repeated .NPCWarInfo WarInfo = 2;
  for (int i = 0; i < this->warinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->warinfo(i), target);
  }
  
  // optional uint32 StoneID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->stoneid(), target);
  }
  
  // optional uint32 StoneX = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->stonex(), target);
  }
  
  // optional uint32 StoneY = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->stoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageWarInfoNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MapID = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 StoneID = 3;
    if (has_stoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->stoneid());
    }
    
    // optional uint32 StoneX = 4;
    if (has_stonex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->stonex());
    }
    
    // optional uint32 StoneY = 5;
    if (has_stoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->stoney());
    }
    
  }
  // repeated .NPCWarInfo WarInfo = 2;
  total_size += 1 * this->warinfo_size();
  for (int i = 0; i < this->warinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->warinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageWarInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageWarInfoNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageWarInfoNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageWarInfoNotify::MergeFrom(const CMessageWarInfoNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  warinfo_.MergeFrom(from.warinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(2)) {
      set_stoneid(from.stoneid());
    }
    if (from._has_bit(3)) {
      set_stonex(from.stonex());
    }
    if (from._has_bit(4)) {
      set_stoney(from.stoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageWarInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageWarInfoNotify::CopyFrom(const CMessageWarInfoNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageWarInfoNotify::Swap(CMessageWarInfoNotify* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    warinfo_.Swap(&other->warinfo_);
    std::swap(stoneid_, other->stoneid_);
    std::swap(stonex_, other->stonex_);
    std::swap(stoney_, other->stoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageWarInfoNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageWarInfoNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageWarInfoNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageWarInfoNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageQueryWarAwardRequest::kCharIDFieldNumber;
const int CMessageQueryWarAwardRequest::kWarSerialFieldNumber;
#endif  // !_MSC_VER

CMessageQueryWarAwardRequest::CMessageQueryWarAwardRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageQueryWarAwardRequest::InitAsDefaultInstance() {}

CMessageQueryWarAwardRequest::CMessageQueryWarAwardRequest(const CMessageQueryWarAwardRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageQueryWarAwardRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  warserial_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageQueryWarAwardRequest::~CMessageQueryWarAwardRequest() {
  SharedDtor();
}

void CMessageQueryWarAwardRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageQueryWarAwardRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryWarAwardRequest_descriptor_;
}

const CMessageQueryWarAwardRequest& CMessageQueryWarAwardRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageQueryWarAwardRequest* CMessageQueryWarAwardRequest::default_instance_ = NULL;

CMessageQueryWarAwardRequest* CMessageQueryWarAwardRequest::New() const {
  return new CMessageQueryWarAwardRequest;
}

void CMessageQueryWarAwardRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    warserial_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageQueryWarAwardRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_WarSerial;
        break;
      }
      
      // optional uint32 WarSerial = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarSerial:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warserial_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageQueryWarAwardRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageQueryWarAwardRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 WarSerial = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->warserial(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageQueryWarAwardRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 WarSerial = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->warserial(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageQueryWarAwardRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 WarSerial = 2;
    if (has_warserial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warserial());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageQueryWarAwardRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageQueryWarAwardRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageQueryWarAwardRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageQueryWarAwardRequest::MergeFrom(const CMessageQueryWarAwardRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_warserial(from.warserial());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageQueryWarAwardRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryWarAwardRequest::CopyFrom(const CMessageQueryWarAwardRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryWarAwardRequest::Swap(CMessageQueryWarAwardRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(warserial_, other->warserial_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageQueryWarAwardRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageQueryWarAwardRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageQueryWarAwardRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryWarAwardRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageQueryWarAwardResponse::kCharIDFieldNumber;
const int CMessageQueryWarAwardResponse::kResultFieldNumber;
const int CMessageQueryWarAwardResponse::kWinMoneyFieldNumber;
const int CMessageQueryWarAwardResponse::kBestMoneyFieldNumber;
const int CMessageQueryWarAwardResponse::kWinItemFieldNumber;
const int CMessageQueryWarAwardResponse::kRankFieldNumber;
#endif  // !_MSC_VER

CMessageQueryWarAwardResponse::CMessageQueryWarAwardResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageQueryWarAwardResponse::InitAsDefaultInstance() {}

CMessageQueryWarAwardResponse::CMessageQueryWarAwardResponse(const CMessageQueryWarAwardResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageQueryWarAwardResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  result_ = 0u;
  winmoney_ = 0u;
  bestmoney_ = 0u;
  rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageQueryWarAwardResponse::~CMessageQueryWarAwardResponse() {
  SharedDtor();
}

void CMessageQueryWarAwardResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageQueryWarAwardResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryWarAwardResponse_descriptor_;
}

const CMessageQueryWarAwardResponse& CMessageQueryWarAwardResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageQueryWarAwardResponse* CMessageQueryWarAwardResponse::default_instance_ = NULL;

CMessageQueryWarAwardResponse* CMessageQueryWarAwardResponse::New() const {
  return new CMessageQueryWarAwardResponse;
}

void CMessageQueryWarAwardResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    result_ = 0u;
    winmoney_ = 0u;
    bestmoney_ = 0u;
    rank_ = 0u;
  }
  winitem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageQueryWarAwardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_WinMoney;
        break;
      }
      
      // optional uint32 WinMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WinMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &winmoney_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_BestMoney;
        break;
      }
      
      // optional uint32 BestMoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BestMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &bestmoney_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_WinItem;
        break;
      }
      
      // repeated uint32 WinItem = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WinItem:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_winitem(value);
        if (input->ExpectTag(40)) goto parse_WinItem;
        if (input->ExpectTag(48)) goto parse_Rank;
        break;
      }
      
      // optional uint32 Rank = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Rank:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rank_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageQueryWarAwardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageQueryWarAwardResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  // optional uint32 WinMoney = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->winmoney(), output);
  }
  
  // optional uint32 BestMoney = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->bestmoney(), output);
  }
  
  // repeated uint32 WinItem = 5;
  for (int i = 0; i < this->winitem_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->winitem(i), output);
  }
  
  // optional uint32 Rank = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->rank(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageQueryWarAwardResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  // optional uint32 WinMoney = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->winmoney(), target);
  }
  
  // optional uint32 BestMoney = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->bestmoney(), target);
  }
  
  // repeated uint32 WinItem = 5;
  for (int i = 0; i < this->winitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->winitem(i), target);
  }
  
  // optional uint32 Rank = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->rank(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageQueryWarAwardResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 WinMoney = 3;
    if (has_winmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->winmoney());
    }
    
    // optional uint32 BestMoney = 4;
    if (has_bestmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->bestmoney());
    }
    
    // optional uint32 Rank = 6;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rank());
    }
    
  }
  // repeated uint32 WinItem = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->winitem_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->winitem(i));
    }
    total_size += 1 * this->winitem_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageQueryWarAwardResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageQueryWarAwardResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageQueryWarAwardResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageQueryWarAwardResponse::MergeFrom(const CMessageQueryWarAwardResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  winitem_.MergeFrom(from.winitem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_winmoney(from.winmoney());
    }
    if (from._has_bit(3)) {
      set_bestmoney(from.bestmoney());
    }
    if (from._has_bit(5)) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageQueryWarAwardResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryWarAwardResponse::CopyFrom(const CMessageQueryWarAwardResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryWarAwardResponse::Swap(CMessageQueryWarAwardResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(result_, other->result_);
    std::swap(winmoney_, other->winmoney_);
    std::swap(bestmoney_, other->bestmoney_);
    winitem_.Swap(&other->winitem_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageQueryWarAwardResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageQueryWarAwardResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageQueryWarAwardResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryWarAwardResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageWarHonorNotify::kTotalHonorFieldNumber;
const int CMessageWarHonorNotify::kFreeHonorFieldNumber;
const int CMessageWarHonorNotify::kWarHonorFieldNumber;
#endif  // !_MSC_VER

CMessageWarHonorNotify::CMessageWarHonorNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageWarHonorNotify::InitAsDefaultInstance() {}

CMessageWarHonorNotify::CMessageWarHonorNotify(const CMessageWarHonorNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageWarHonorNotify::SharedCtor() {
  _cached_size_ = 0;
  totalhonor_ = 0u;
  freehonor_ = 0u;
  warhonor_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageWarHonorNotify::~CMessageWarHonorNotify() {
  SharedDtor();
}

void CMessageWarHonorNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageWarHonorNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageWarHonorNotify_descriptor_;
}

const CMessageWarHonorNotify& CMessageWarHonorNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageWarHonorNotify* CMessageWarHonorNotify::default_instance_ = NULL;

CMessageWarHonorNotify* CMessageWarHonorNotify::New() const {
  return new CMessageWarHonorNotify;
}

void CMessageWarHonorNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    totalhonor_ = 0u;
    freehonor_ = 0u;
    warhonor_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageWarHonorNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TotalHonor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &totalhonor_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_FreeHonor;
        break;
      }
      
      // optional uint32 FreeHonor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FreeHonor:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &freehonor_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_WarHonor;
        break;
      }
      
      // optional uint32 WarHonor = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarHonor:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warhonor_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageWarHonorNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageWarHonorNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TotalHonor = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->totalhonor(), output);
  }
  
  // optional uint32 FreeHonor = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->freehonor(), output);
  }
  
  // optional uint32 WarHonor = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->warhonor(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageWarHonorNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TotalHonor = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->totalhonor(), target);
  }
  
  // optional uint32 FreeHonor = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->freehonor(), target);
  }
  
  // optional uint32 WarHonor = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->warhonor(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageWarHonorNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TotalHonor = 1;
    if (has_totalhonor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->totalhonor());
    }
    
    // optional uint32 FreeHonor = 2;
    if (has_freehonor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->freehonor());
    }
    
    // optional uint32 WarHonor = 3;
    if (has_warhonor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warhonor());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageWarHonorNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageWarHonorNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageWarHonorNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageWarHonorNotify::MergeFrom(const CMessageWarHonorNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_totalhonor(from.totalhonor());
    }
    if (from._has_bit(1)) {
      set_freehonor(from.freehonor());
    }
    if (from._has_bit(2)) {
      set_warhonor(from.warhonor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageWarHonorNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageWarHonorNotify::CopyFrom(const CMessageWarHonorNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageWarHonorNotify::Swap(CMessageWarHonorNotify* other) {
  if (other != this) {
    std::swap(totalhonor_, other->totalhonor_);
    std::swap(freehonor_, other->freehonor_);
    std::swap(warhonor_, other->warhonor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageWarHonorNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageWarHonorNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageWarHonorNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageWarHonorNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageWarCampNotify::kWorldIDFieldNumber;
const int CMessageWarCampNotify::kCampIDFieldNumber;
const int CMessageWarCampNotify::kMoneyFieldNumber;
const int CMessageWarCampNotify::kBidCampIDFieldNumber;
#endif  // !_MSC_VER

CMessageWarCampNotify::CMessageWarCampNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageWarCampNotify::InitAsDefaultInstance() {}

CMessageWarCampNotify::CMessageWarCampNotify(const CMessageWarCampNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageWarCampNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageWarCampNotify::~CMessageWarCampNotify() {
  SharedDtor();
}

void CMessageWarCampNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageWarCampNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageWarCampNotify_descriptor_;
}

const CMessageWarCampNotify& CMessageWarCampNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageWarCampNotify* CMessageWarCampNotify::default_instance_ = NULL;

CMessageWarCampNotify* CMessageWarCampNotify::New() const {
  return new CMessageWarCampNotify;
}

void CMessageWarCampNotify::Clear() {
  worldid_.Clear();
  campid_.Clear();
  money_.Clear();
  bidcampid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageWarCampNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated uint32 WorldID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WorldID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_worldid(value);
        if (input->ExpectTag(8)) goto parse_WorldID;
        if (input->ExpectTag(16)) goto parse_CampID;
        break;
      }
      
      // repeated uint32 CampID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CampID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_campid(value);
        if (input->ExpectTag(16)) goto parse_CampID;
        if (input->ExpectTag(24)) goto parse_Money;
        break;
      }
      
      // repeated uint32 Money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_money(value);
        if (input->ExpectTag(24)) goto parse_Money;
        if (input->ExpectTag(32)) goto parse_BidCampID;
        break;
      }
      
      // repeated uint32 BidCampID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BidCampID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_bidcampid(value);
        if (input->ExpectTag(32)) goto parse_BidCampID;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageWarCampNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageWarCampNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated uint32 WorldID = 1;
  for (int i = 0; i < this->worldid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->worldid(i), output);
  }
  
  // repeated uint32 CampID = 2;
  for (int i = 0; i < this->campid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->campid(i), output);
  }
  
  // repeated uint32 Money = 3;
  for (int i = 0; i < this->money_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->money(i), output);
  }
  
  // repeated uint32 BidCampID = 4;
  for (int i = 0; i < this->bidcampid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->bidcampid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageWarCampNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 WorldID = 1;
  for (int i = 0; i < this->worldid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->worldid(i), target);
  }
  
  // repeated uint32 CampID = 2;
  for (int i = 0; i < this->campid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->campid(i), target);
  }
  
  // repeated uint32 Money = 3;
  for (int i = 0; i < this->money_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->money(i), target);
  }
  
  // repeated uint32 BidCampID = 4;
  for (int i = 0; i < this->bidcampid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->bidcampid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageWarCampNotify::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 WorldID = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->worldid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->worldid(i));
    }
    total_size += 1 * this->worldid_size() + data_size;
  }
  
  // repeated uint32 CampID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->campid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->campid(i));
    }
    total_size += 1 * this->campid_size() + data_size;
  }
  
  // repeated uint32 Money = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->money_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->money(i));
    }
    total_size += 1 * this->money_size() + data_size;
  }
  
  // repeated uint32 BidCampID = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->bidcampid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->bidcampid(i));
    }
    total_size += 1 * this->bidcampid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageWarCampNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageWarCampNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageWarCampNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageWarCampNotify::MergeFrom(const CMessageWarCampNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  worldid_.MergeFrom(from.worldid_);
  campid_.MergeFrom(from.campid_);
  money_.MergeFrom(from.money_);
  bidcampid_.MergeFrom(from.bidcampid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageWarCampNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageWarCampNotify::CopyFrom(const CMessageWarCampNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageWarCampNotify::Swap(CMessageWarCampNotify* other) {
  if (other != this) {
    worldid_.Swap(&other->worldid_);
    campid_.Swap(&other->campid_);
    money_.Swap(&other->money_);
    bidcampid_.Swap(&other->bidcampid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageWarCampNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageWarCampNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageWarCampNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageWarCampNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageModifyRateRequest::kRateOrderFieldNumber;
const int CMessageModifyRateRequest::kCharIDFieldNumber;
const int CMessageModifyRateRequest::kNPCEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageModifyRateRequest::CMessageModifyRateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageModifyRateRequest::InitAsDefaultInstance() {}

CMessageModifyRateRequest::CMessageModifyRateRequest(const CMessageModifyRateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageModifyRateRequest::SharedCtor() {
  _cached_size_ = 0;
  rateorder_ = 0u;
  charid_ = 0u;
  npcentityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageModifyRateRequest::~CMessageModifyRateRequest() {
  SharedDtor();
}

void CMessageModifyRateRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageModifyRateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageModifyRateRequest_descriptor_;
}

const CMessageModifyRateRequest& CMessageModifyRateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageModifyRateRequest* CMessageModifyRateRequest::default_instance_ = NULL;

CMessageModifyRateRequest* CMessageModifyRateRequest::New() const {
  return new CMessageModifyRateRequest;
}

void CMessageModifyRateRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rateorder_ = 0u;
    charid_ = 0u;
    npcentityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageModifyRateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RateOrder = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rateorder_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_NPCEntityID;
        break;
      }
      
      // optional uint32 NPCEntityID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NPCEntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcentityid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageModifyRateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageModifyRateRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RateOrder = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->rateorder(), output);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charid(), output);
  }
  
  // optional uint32 NPCEntityID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->npcentityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageModifyRateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RateOrder = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->rateorder(), target);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charid(), target);
  }
  
  // optional uint32 NPCEntityID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->npcentityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageModifyRateRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RateOrder = 1;
    if (has_rateorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rateorder());
    }
    
    // optional uint32 CharID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 NPCEntityID = 3;
    if (has_npcentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcentityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageModifyRateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageModifyRateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageModifyRateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageModifyRateRequest::MergeFrom(const CMessageModifyRateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_rateorder(from.rateorder());
    }
    if (from._has_bit(1)) {
      set_charid(from.charid());
    }
    if (from._has_bit(2)) {
      set_npcentityid(from.npcentityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageModifyRateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageModifyRateRequest::CopyFrom(const CMessageModifyRateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageModifyRateRequest::Swap(CMessageModifyRateRequest* other) {
  if (other != this) {
    std::swap(rateorder_, other->rateorder_);
    std::swap(charid_, other->charid_);
    std::swap(npcentityid_, other->npcentityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageModifyRateRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageModifyRateRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageModifyRateRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageModifyRateRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageModifyRateResponse::kRateOrderFieldNumber;
const int CMessageModifyRateResponse::kResultFieldNumber;
const int CMessageModifyRateResponse::kCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageModifyRateResponse::CMessageModifyRateResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageModifyRateResponse::InitAsDefaultInstance() {}

CMessageModifyRateResponse::CMessageModifyRateResponse(const CMessageModifyRateResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageModifyRateResponse::SharedCtor() {
  _cached_size_ = 0;
  rateorder_ = 0u;
  result_ = 0u;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageModifyRateResponse::~CMessageModifyRateResponse() {
  SharedDtor();
}

void CMessageModifyRateResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageModifyRateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageModifyRateResponse_descriptor_;
}

const CMessageModifyRateResponse& CMessageModifyRateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageModifyRateResponse* CMessageModifyRateResponse::default_instance_ = NULL;

CMessageModifyRateResponse* CMessageModifyRateResponse::New() const {
  return new CMessageModifyRateResponse;
}

void CMessageModifyRateResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rateorder_ = 0u;
    result_ = 0u;
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageModifyRateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RateOrder = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rateorder_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageModifyRateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageModifyRateResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RateOrder = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->rateorder(), output);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  // optional uint32 CharID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->charid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageModifyRateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RateOrder = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->rateorder(), target);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  // optional uint32 CharID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->charid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageModifyRateResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RateOrder = 1;
    if (has_rateorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rateorder());
    }
    
    // optional uint32 Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 CharID = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageModifyRateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageModifyRateResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageModifyRateResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageModifyRateResponse::MergeFrom(const CMessageModifyRateResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_rateorder(from.rateorder());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageModifyRateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageModifyRateResponse::CopyFrom(const CMessageModifyRateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageModifyRateResponse::Swap(CMessageModifyRateResponse* other) {
  if (other != this) {
    std::swap(rateorder_, other->rateorder_);
    std::swap(result_, other->result_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageModifyRateResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageModifyRateResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageModifyRateResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageModifyRateResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageModifyRateNotify::_default_name_;
#ifndef _MSC_VER
const int CMessageModifyRateNotify::kRateFieldNumber;
const int CMessageModifyRateNotify::kNameFieldNumber;
const int CMessageModifyRateNotify::kRealFieldNumber;
const int CMessageModifyRateNotify::kWinWorldFieldNumber;
#endif  // !_MSC_VER

CMessageModifyRateNotify::CMessageModifyRateNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageModifyRateNotify::InitAsDefaultInstance() {}

CMessageModifyRateNotify::CMessageModifyRateNotify(const CMessageModifyRateNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageModifyRateNotify::SharedCtor() {
  _cached_size_ = 0;
  rate_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  real_ = 0u;
  winworld_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageModifyRateNotify::~CMessageModifyRateNotify() {
  SharedDtor();
}

void CMessageModifyRateNotify::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageModifyRateNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageModifyRateNotify_descriptor_;
}

const CMessageModifyRateNotify& CMessageModifyRateNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageModifyRateNotify* CMessageModifyRateNotify::default_instance_ = NULL;

CMessageModifyRateNotify* CMessageModifyRateNotify::New() const {
  return new CMessageModifyRateNotify;
}

void CMessageModifyRateNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rate_ = 0u;
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    real_ = 0u;
    winworld_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageModifyRateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Rate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rate_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }
      
      // optional string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(24)) goto parse_Real;
        break;
      }
      
      // optional uint32 Real = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Real:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &real_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_WinWorld;
        break;
      }
      
      // optional uint32 WinWorld = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WinWorld:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &winworld_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageModifyRateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageModifyRateNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Rate = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->rate(), output);
  }
  
  // optional string Name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->name(), output);
  }
  
  // optional uint32 Real = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->real(), output);
  }
  
  // optional uint32 WinWorld = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->winworld(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageModifyRateNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Rate = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->rate(), target);
  }
  
  // optional string Name = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->name(), target);
  }
  
  // optional uint32 Real = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->real(), target);
  }
  
  // optional uint32 WinWorld = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->winworld(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageModifyRateNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Rate = 1;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rate());
    }
    
    // optional string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional uint32 Real = 3;
    if (has_real()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->real());
    }
    
    // optional uint32 WinWorld = 4;
    if (has_winworld()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->winworld());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageModifyRateNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageModifyRateNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageModifyRateNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageModifyRateNotify::MergeFrom(const CMessageModifyRateNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_rate(from.rate());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      set_real(from.real());
    }
    if (from._has_bit(3)) {
      set_winworld(from.winworld());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageModifyRateNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageModifyRateNotify::CopyFrom(const CMessageModifyRateNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageModifyRateNotify::Swap(CMessageModifyRateNotify* other) {
  if (other != this) {
    std::swap(rate_, other->rate_);
    std::swap(name_, other->name_);
    std::swap(real_, other->real_);
    std::swap(winworld_, other->winworld_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageModifyRateNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageModifyRateNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageModifyRateNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageModifyRateNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetTaxRequest::kCharIDFieldNumber;
const int CMessageGetTaxRequest::kQueryFieldNumber;
const int CMessageGetTaxRequest::kNPCEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageGetTaxRequest::CMessageGetTaxRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetTaxRequest::InitAsDefaultInstance() {}

CMessageGetTaxRequest::CMessageGetTaxRequest(const CMessageGetTaxRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetTaxRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  query_ = 0u;
  npcentityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetTaxRequest::~CMessageGetTaxRequest() {
  SharedDtor();
}

void CMessageGetTaxRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGetTaxRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetTaxRequest_descriptor_;
}

const CMessageGetTaxRequest& CMessageGetTaxRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetTaxRequest* CMessageGetTaxRequest::default_instance_ = NULL;

CMessageGetTaxRequest* CMessageGetTaxRequest::New() const {
  return new CMessageGetTaxRequest;
}

void CMessageGetTaxRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    query_ = 0u;
    npcentityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetTaxRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Query;
        break;
      }
      
      // optional uint32 Query = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Query:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &query_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_NPCEntityID;
        break;
      }
      
      // optional uint32 NPCEntityID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NPCEntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcentityid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetTaxRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetTaxRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 Query = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->query(), output);
  }
  
  // optional uint32 NPCEntityID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->npcentityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetTaxRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 Query = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->query(), target);
  }
  
  // optional uint32 NPCEntityID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->npcentityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetTaxRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 Query = 2;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->query());
    }
    
    // optional uint32 NPCEntityID = 3;
    if (has_npcentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcentityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetTaxRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetTaxRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetTaxRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetTaxRequest::MergeFrom(const CMessageGetTaxRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_query(from.query());
    }
    if (from._has_bit(2)) {
      set_npcentityid(from.npcentityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetTaxRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetTaxRequest::CopyFrom(const CMessageGetTaxRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetTaxRequest::Swap(CMessageGetTaxRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(query_, other->query_);
    std::swap(npcentityid_, other->npcentityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetTaxRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetTaxRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetTaxRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetTaxRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetTaxResponse::kMoneyFieldNumber;
const int CMessageGetTaxResponse::kResultFieldNumber;
const int CMessageGetTaxResponse::kCharIDFieldNumber;
const int CMessageGetTaxResponse::kQueryFieldNumber;
#endif  // !_MSC_VER

CMessageGetTaxResponse::CMessageGetTaxResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetTaxResponse::InitAsDefaultInstance() {}

CMessageGetTaxResponse::CMessageGetTaxResponse(const CMessageGetTaxResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetTaxResponse::SharedCtor() {
  _cached_size_ = 0;
  money_ = 0u;
  result_ = 0u;
  charid_ = 0u;
  query_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetTaxResponse::~CMessageGetTaxResponse() {
  SharedDtor();
}

void CMessageGetTaxResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGetTaxResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetTaxResponse_descriptor_;
}

const CMessageGetTaxResponse& CMessageGetTaxResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetTaxResponse* CMessageGetTaxResponse::default_instance_ = NULL;

CMessageGetTaxResponse* CMessageGetTaxResponse::New() const {
  return new CMessageGetTaxResponse;
}

void CMessageGetTaxResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    money_ = 0u;
    result_ = 0u;
    charid_ = 0u;
    query_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetTaxResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Money = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Query;
        break;
      }
      
      // optional uint32 Query = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Query:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &query_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetTaxResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetTaxResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Money = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->money(), output);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  // optional uint32 CharID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->charid(), output);
  }
  
  // optional uint32 Query = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->query(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetTaxResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Money = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->money(), target);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  // optional uint32 CharID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->charid(), target);
  }
  
  // optional uint32 Query = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->query(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetTaxResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Money = 1;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
    // optional uint32 Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 CharID = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 Query = 4;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->query());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetTaxResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetTaxResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetTaxResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetTaxResponse::MergeFrom(const CMessageGetTaxResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_money(from.money());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_charid(from.charid());
    }
    if (from._has_bit(3)) {
      set_query(from.query());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetTaxResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetTaxResponse::CopyFrom(const CMessageGetTaxResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetTaxResponse::Swap(CMessageGetTaxResponse* other) {
  if (other != this) {
    std::swap(money_, other->money_);
    std::swap(result_, other->result_);
    std::swap(charid_, other->charid_);
    std::swap(query_, other->query_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetTaxResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetTaxResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetTaxResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetTaxResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageQueryStoneNotify::kStoneIDFieldNumber;
const int CMessageQueryStoneNotify::kStoneXFieldNumber;
const int CMessageQueryStoneNotify::kStoneYFieldNumber;
#endif  // !_MSC_VER

CMessageQueryStoneNotify::CMessageQueryStoneNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageQueryStoneNotify::InitAsDefaultInstance() {}

CMessageQueryStoneNotify::CMessageQueryStoneNotify(const CMessageQueryStoneNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageQueryStoneNotify::SharedCtor() {
  _cached_size_ = 0;
  stoneid_ = 0u;
  stonex_ = 0u;
  stoney_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageQueryStoneNotify::~CMessageQueryStoneNotify() {
  SharedDtor();
}

void CMessageQueryStoneNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageQueryStoneNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryStoneNotify_descriptor_;
}

const CMessageQueryStoneNotify& CMessageQueryStoneNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageQueryStoneNotify* CMessageQueryStoneNotify::default_instance_ = NULL;

CMessageQueryStoneNotify* CMessageQueryStoneNotify::New() const {
  return new CMessageQueryStoneNotify;
}

void CMessageQueryStoneNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stoneid_ = 0u;
    stonex_ = 0u;
    stoney_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageQueryStoneNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 StoneID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &stoneid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_StoneX;
        break;
      }
      
      // optional uint32 StoneX = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_StoneX:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &stonex_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_StoneY;
        break;
      }
      
      // optional uint32 StoneY = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_StoneY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &stoney_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageQueryStoneNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageQueryStoneNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 StoneID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->stoneid(), output);
  }
  
  // optional uint32 StoneX = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->stonex(), output);
  }
  
  // optional uint32 StoneY = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->stoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageQueryStoneNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 StoneID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->stoneid(), target);
  }
  
  // optional uint32 StoneX = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->stonex(), target);
  }
  
  // optional uint32 StoneY = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->stoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageQueryStoneNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 StoneID = 1;
    if (has_stoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->stoneid());
    }
    
    // optional uint32 StoneX = 2;
    if (has_stonex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->stonex());
    }
    
    // optional uint32 StoneY = 3;
    if (has_stoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->stoney());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageQueryStoneNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageQueryStoneNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageQueryStoneNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageQueryStoneNotify::MergeFrom(const CMessageQueryStoneNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_stoneid(from.stoneid());
    }
    if (from._has_bit(1)) {
      set_stonex(from.stonex());
    }
    if (from._has_bit(2)) {
      set_stoney(from.stoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageQueryStoneNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryStoneNotify::CopyFrom(const CMessageQueryStoneNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryStoneNotify::Swap(CMessageQueryStoneNotify* other) {
  if (other != this) {
    std::swap(stoneid_, other->stoneid_);
    std::swap(stonex_, other->stonex_);
    std::swap(stoney_, other->stoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageQueryStoneNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageQueryStoneNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageQueryStoneNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryStoneNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageRefuseSummonRequest::kAsynTeleTokenIDFieldNumber;
const int CMessageRefuseSummonRequest::kSrcCharIDFieldNumber;
const int CMessageRefuseSummonRequest::kDesCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageRefuseSummonRequest::CMessageRefuseSummonRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRefuseSummonRequest::InitAsDefaultInstance() {}

CMessageRefuseSummonRequest::CMessageRefuseSummonRequest(const CMessageRefuseSummonRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRefuseSummonRequest::SharedCtor() {
  _cached_size_ = 0;
  asynteletokenid_ = 0u;
  srccharid_ = 0u;
  descharid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRefuseSummonRequest::~CMessageRefuseSummonRequest() {
  SharedDtor();
}

void CMessageRefuseSummonRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageRefuseSummonRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRefuseSummonRequest_descriptor_;
}

const CMessageRefuseSummonRequest& CMessageRefuseSummonRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRefuseSummonRequest* CMessageRefuseSummonRequest::default_instance_ = NULL;

CMessageRefuseSummonRequest* CMessageRefuseSummonRequest::New() const {
  return new CMessageRefuseSummonRequest;
}

void CMessageRefuseSummonRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    asynteletokenid_ = 0u;
    srccharid_ = 0u;
    descharid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRefuseSummonRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 AsynTeleTokenID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &asynteletokenid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_SrcCharID;
        break;
      }
      
      // optional uint32 SrcCharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SrcCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srccharid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_DesCharID;
        break;
      }
      
      // optional uint32 DesCharID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DesCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &descharid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageRefuseSummonRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRefuseSummonRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 AsynTeleTokenID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->asynteletokenid(), output);
  }
  
  // optional uint32 SrcCharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->srccharid(), output);
  }
  
  // optional uint32 DesCharID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->descharid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRefuseSummonRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 AsynTeleTokenID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->asynteletokenid(), target);
  }
  
  // optional uint32 SrcCharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->srccharid(), target);
  }
  
  // optional uint32 DesCharID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->descharid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRefuseSummonRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AsynTeleTokenID = 1;
    if (has_asynteletokenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->asynteletokenid());
    }
    
    // optional uint32 SrcCharID = 2;
    if (has_srccharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srccharid());
    }
    
    // optional uint32 DesCharID = 3;
    if (has_descharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->descharid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRefuseSummonRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRefuseSummonRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRefuseSummonRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRefuseSummonRequest::MergeFrom(const CMessageRefuseSummonRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_asynteletokenid(from.asynteletokenid());
    }
    if (from._has_bit(1)) {
      set_srccharid(from.srccharid());
    }
    if (from._has_bit(2)) {
      set_descharid(from.descharid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRefuseSummonRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRefuseSummonRequest::CopyFrom(const CMessageRefuseSummonRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRefuseSummonRequest::Swap(CMessageRefuseSummonRequest* other) {
  if (other != this) {
    std::swap(asynteletokenid_, other->asynteletokenid_);
    std::swap(srccharid_, other->srccharid_);
    std::swap(descharid_, other->descharid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRefuseSummonRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRefuseSummonRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRefuseSummonRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRefuseSummonRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageRefuseSummonNotify::_default_srcname_;
const ::std::string CMessageRefuseSummonNotify::_default_desname_;
#ifndef _MSC_VER
const int CMessageRefuseSummonNotify::kSrcNameFieldNumber;
const int CMessageRefuseSummonNotify::kDesNameFieldNumber;
const int CMessageRefuseSummonNotify::kSrcCharIDFieldNumber;
const int CMessageRefuseSummonNotify::kDesCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageRefuseSummonNotify::CMessageRefuseSummonNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRefuseSummonNotify::InitAsDefaultInstance() {}

CMessageRefuseSummonNotify::CMessageRefuseSummonNotify(const CMessageRefuseSummonNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRefuseSummonNotify::SharedCtor() {
  _cached_size_ = 0;
  srcname_ = const_cast< ::std::string*>(&_default_srcname_);
  desname_ = const_cast< ::std::string*>(&_default_desname_);
  srccharid_ = 0u;
  descharid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRefuseSummonNotify::~CMessageRefuseSummonNotify() {
  SharedDtor();
}

void CMessageRefuseSummonNotify::SharedDtor() {
  if (srcname_ != &_default_srcname_) {
    delete srcname_;
  }
  if (desname_ != &_default_desname_) {
    delete desname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageRefuseSummonNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRefuseSummonNotify_descriptor_;
}

const CMessageRefuseSummonNotify& CMessageRefuseSummonNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRefuseSummonNotify* CMessageRefuseSummonNotify::default_instance_ = NULL;

CMessageRefuseSummonNotify* CMessageRefuseSummonNotify::New() const {
  return new CMessageRefuseSummonNotify;
}

void CMessageRefuseSummonNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (srcname_ != &_default_srcname_) {
        srcname_->clear();
      }
    }
    if (_has_bit(1)) {
      if (desname_ != &_default_desname_) {
        desname_->clear();
      }
    }
    srccharid_ = 0u;
    descharid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRefuseSummonNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string SrcName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_srcname()));
        if (input->ExpectTag(18)) goto parse_DesName;
        break;
      }
      
      // optional string DesName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_DesName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_desname()));
        if (input->ExpectTag(24)) goto parse_SrcCharID;
        break;
      }
      
      // optional uint32 SrcCharID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SrcCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srccharid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_DesCharID;
        break;
      }
      
      // optional uint32 DesCharID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DesCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &descharid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageRefuseSummonNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRefuseSummonNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string SrcName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->srcname(), output);
  }
  
  // optional string DesName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->desname(), output);
  }
  
  // optional uint32 SrcCharID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->srccharid(), output);
  }
  
  // optional uint32 DesCharID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->descharid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRefuseSummonNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string SrcName = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->srcname(), target);
  }
  
  // optional string DesName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->desname(), target);
  }
  
  // optional uint32 SrcCharID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->srccharid(), target);
  }
  
  // optional uint32 DesCharID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->descharid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRefuseSummonNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string SrcName = 1;
    if (has_srcname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->srcname());
    }
    
    // optional string DesName = 2;
    if (has_desname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->desname());
    }
    
    // optional uint32 SrcCharID = 3;
    if (has_srccharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srccharid());
    }
    
    // optional uint32 DesCharID = 4;
    if (has_descharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->descharid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRefuseSummonNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRefuseSummonNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRefuseSummonNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRefuseSummonNotify::MergeFrom(const CMessageRefuseSummonNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_srcname(from.srcname());
    }
    if (from._has_bit(1)) {
      set_desname(from.desname());
    }
    if (from._has_bit(2)) {
      set_srccharid(from.srccharid());
    }
    if (from._has_bit(3)) {
      set_descharid(from.descharid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRefuseSummonNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRefuseSummonNotify::CopyFrom(const CMessageRefuseSummonNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRefuseSummonNotify::Swap(CMessageRefuseSummonNotify* other) {
  if (other != this) {
    std::swap(srcname_, other->srcname_);
    std::swap(desname_, other->desname_);
    std::swap(srccharid_, other->srccharid_);
    std::swap(descharid_, other->descharid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRefuseSummonNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRefuseSummonNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRefuseSummonNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRefuseSummonNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBCampWeakForceInfo::kCampIdFieldNumber;
const int PBCampWeakForceInfo::kLevelScoreFieldNumber;
const int PBCampWeakForceInfo::kHonerScoreFieldNumber;
const int PBCampWeakForceInfo::kTotalScoreFieldNumber;
const int PBCampWeakForceInfo::kWeakLevelFieldNumber;
#endif  // !_MSC_VER

PBCampWeakForceInfo::PBCampWeakForceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCampWeakForceInfo::InitAsDefaultInstance() {}

PBCampWeakForceInfo::PBCampWeakForceInfo(const PBCampWeakForceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCampWeakForceInfo::SharedCtor() {
  _cached_size_ = 0;
  camp_id_ = 0u;
  level_score_ = 0u;
  honer_score_ = 0u;
  total_score_ = 0u;
  weak_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCampWeakForceInfo::~PBCampWeakForceInfo() {
  SharedDtor();
}

void PBCampWeakForceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBCampWeakForceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCampWeakForceInfo_descriptor_;
}

const PBCampWeakForceInfo& PBCampWeakForceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

PBCampWeakForceInfo* PBCampWeakForceInfo::default_instance_ = NULL;

PBCampWeakForceInfo* PBCampWeakForceInfo::New() const {
  return new PBCampWeakForceInfo;
}

void PBCampWeakForceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    camp_id_ = 0u;
    level_score_ = 0u;
    honer_score_ = 0u;
    total_score_ = 0u;
    weak_level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCampWeakForceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 camp_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &camp_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_level_score;
        break;
      }
      
      // optional uint32 level_score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_level_score:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_score_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_honer_score;
        break;
      }
      
      // optional uint32 honer_score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_honer_score:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &honer_score_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_total_score;
        break;
      }
      
      // optional uint32 total_score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_total_score:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &total_score_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_weak_level;
        break;
      }
      
      // optional uint32 weak_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_weak_level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &weak_level_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCampWeakForceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBCampWeakForceInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 camp_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->camp_id(), output);
  }
  
  // optional uint32 level_score = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->level_score(), output);
  }
  
  // optional uint32 honer_score = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->honer_score(), output);
  }
  
  // optional uint32 total_score = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->total_score(), output);
  }
  
  // optional uint32 weak_level = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->weak_level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCampWeakForceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 camp_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->camp_id(), target);
  }
  
  // optional uint32 level_score = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->level_score(), target);
  }
  
  // optional uint32 honer_score = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->honer_score(), target);
  }
  
  // optional uint32 total_score = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->total_score(), target);
  }
  
  // optional uint32 weak_level = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->weak_level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCampWeakForceInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 camp_id = 1;
    if (has_camp_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->camp_id());
    }
    
    // optional uint32 level_score = 2;
    if (has_level_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level_score());
    }
    
    // optional uint32 honer_score = 3;
    if (has_honer_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->honer_score());
    }
    
    // optional uint32 total_score = 4;
    if (has_total_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->total_score());
    }
    
    // optional uint32 weak_level = 5;
    if (has_weak_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->weak_level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBCampWeakForceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCampWeakForceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCampWeakForceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCampWeakForceInfo::MergeFrom(const PBCampWeakForceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_camp_id(from.camp_id());
    }
    if (from._has_bit(1)) {
      set_level_score(from.level_score());
    }
    if (from._has_bit(2)) {
      set_honer_score(from.honer_score());
    }
    if (from._has_bit(3)) {
      set_total_score(from.total_score());
    }
    if (from._has_bit(4)) {
      set_weak_level(from.weak_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCampWeakForceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCampWeakForceInfo::CopyFrom(const PBCampWeakForceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCampWeakForceInfo::Swap(PBCampWeakForceInfo* other) {
  if (other != this) {
    std::swap(camp_id_, other->camp_id_);
    std::swap(level_score_, other->level_score_);
    std::swap(honer_score_, other->honer_score_);
    std::swap(total_score_, other->total_score_);
    std::swap(weak_level_, other->weak_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBCampWeakForceInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBCampWeakForceInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBCampWeakForceInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBCampWeakForceInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMessageCampWeakListRequest::CMessageCampWeakListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCampWeakListRequest::InitAsDefaultInstance() {}

CMessageCampWeakListRequest::CMessageCampWeakListRequest(const CMessageCampWeakListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCampWeakListRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCampWeakListRequest::~CMessageCampWeakListRequest() {
  SharedDtor();
}

void CMessageCampWeakListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCampWeakListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCampWeakListRequest_descriptor_;
}

const CMessageCampWeakListRequest& CMessageCampWeakListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCampWeakListRequest* CMessageCampWeakListRequest::default_instance_ = NULL;

CMessageCampWeakListRequest* CMessageCampWeakListRequest::New() const {
  return new CMessageCampWeakListRequest;
}

void CMessageCampWeakListRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCampWeakListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMessageCampWeakListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCampWeakListRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCampWeakListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCampWeakListRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCampWeakListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCampWeakListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCampWeakListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCampWeakListRequest::MergeFrom(const CMessageCampWeakListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCampWeakListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCampWeakListRequest::CopyFrom(const CMessageCampWeakListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCampWeakListRequest::Swap(CMessageCampWeakListRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCampWeakListRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCampWeakListRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCampWeakListRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCampWeakListRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCampWeakListResponse::kErrcodeFieldNumber;
const int CMessageCampWeakListResponse::kCampInfoFieldNumber;
#endif  // !_MSC_VER

CMessageCampWeakListResponse::CMessageCampWeakListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCampWeakListResponse::InitAsDefaultInstance() {}

CMessageCampWeakListResponse::CMessageCampWeakListResponse(const CMessageCampWeakListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCampWeakListResponse::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCampWeakListResponse::~CMessageCampWeakListResponse() {
  SharedDtor();
}

void CMessageCampWeakListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCampWeakListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCampWeakListResponse_descriptor_;
}

const CMessageCampWeakListResponse& CMessageCampWeakListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCampWeakListResponse* CMessageCampWeakListResponse::default_instance_ = NULL;

CMessageCampWeakListResponse* CMessageCampWeakListResponse::New() const {
  return new CMessageCampWeakListResponse;
}

void CMessageCampWeakListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
  }
  camp_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCampWeakListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 errcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_camp_info;
        break;
      }
      
      // repeated .PBCampWeakForceInfo camp_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_camp_info:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_camp_info()));
        if (input->ExpectTag(18)) goto parse_camp_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCampWeakListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCampWeakListResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 errcode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->errcode(), output);
  }
  
  // repeated .PBCampWeakForceInfo camp_info = 2;
  for (int i = 0; i < this->camp_info_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->camp_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCampWeakListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 errcode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  // repeated .PBCampWeakForceInfo camp_info = 2;
  for (int i = 0; i < this->camp_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->camp_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCampWeakListResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
  }
  // repeated .PBCampWeakForceInfo camp_info = 2;
  total_size += 1 * this->camp_info_size();
  for (int i = 0; i < this->camp_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->camp_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCampWeakListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCampWeakListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCampWeakListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCampWeakListResponse::MergeFrom(const CMessageCampWeakListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  camp_info_.MergeFrom(from.camp_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCampWeakListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCampWeakListResponse::CopyFrom(const CMessageCampWeakListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCampWeakListResponse::Swap(CMessageCampWeakListResponse* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    camp_info_.Swap(&other->camp_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCampWeakListResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCampWeakListResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCampWeakListResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCampWeakListResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCampGetAwardRequest::kNpcEntityIdFieldNumber;
const int CMessageCampGetAwardRequest::kAwardTypeFieldNumber;
#endif  // !_MSC_VER

CMessageCampGetAwardRequest::CMessageCampGetAwardRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCampGetAwardRequest::InitAsDefaultInstance() {}

CMessageCampGetAwardRequest::CMessageCampGetAwardRequest(const CMessageCampGetAwardRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCampGetAwardRequest::SharedCtor() {
  _cached_size_ = 0;
  npc_entity_id_ = 0u;
  award_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCampGetAwardRequest::~CMessageCampGetAwardRequest() {
  SharedDtor();
}

void CMessageCampGetAwardRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCampGetAwardRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCampGetAwardRequest_descriptor_;
}

const CMessageCampGetAwardRequest& CMessageCampGetAwardRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCampGetAwardRequest* CMessageCampGetAwardRequest::default_instance_ = NULL;

CMessageCampGetAwardRequest* CMessageCampGetAwardRequest::New() const {
  return new CMessageCampGetAwardRequest;
}

void CMessageCampGetAwardRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npc_entity_id_ = 0u;
    award_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCampGetAwardRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 npc_entity_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npc_entity_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_award_type;
        break;
      }
      
      // optional uint32 award_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_award_type:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &award_type_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCampGetAwardRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCampGetAwardRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 npc_entity_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->npc_entity_id(), output);
  }
  
  // optional uint32 award_type = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->award_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCampGetAwardRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 npc_entity_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->npc_entity_id(), target);
  }
  
  // optional uint32 award_type = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->award_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCampGetAwardRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 npc_entity_id = 1;
    if (has_npc_entity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npc_entity_id());
    }
    
    // optional uint32 award_type = 2;
    if (has_award_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->award_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCampGetAwardRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCampGetAwardRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCampGetAwardRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCampGetAwardRequest::MergeFrom(const CMessageCampGetAwardRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_npc_entity_id(from.npc_entity_id());
    }
    if (from._has_bit(1)) {
      set_award_type(from.award_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCampGetAwardRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCampGetAwardRequest::CopyFrom(const CMessageCampGetAwardRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCampGetAwardRequest::Swap(CMessageCampGetAwardRequest* other) {
  if (other != this) {
    std::swap(npc_entity_id_, other->npc_entity_id_);
    std::swap(award_type_, other->award_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCampGetAwardRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCampGetAwardRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCampGetAwardRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCampGetAwardRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCampGetAwardResponse::kErrcodeFieldNumber;
#endif  // !_MSC_VER

CMessageCampGetAwardResponse::CMessageCampGetAwardResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCampGetAwardResponse::InitAsDefaultInstance() {}

CMessageCampGetAwardResponse::CMessageCampGetAwardResponse(const CMessageCampGetAwardResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCampGetAwardResponse::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCampGetAwardResponse::~CMessageCampGetAwardResponse() {
  SharedDtor();
}

void CMessageCampGetAwardResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCampGetAwardResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCampGetAwardResponse_descriptor_;
}

const CMessageCampGetAwardResponse& CMessageCampGetAwardResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCampGetAwardResponse* CMessageCampGetAwardResponse::default_instance_ = NULL;

CMessageCampGetAwardResponse* CMessageCampGetAwardResponse::New() const {
  return new CMessageCampGetAwardResponse;
}

void CMessageCampGetAwardResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCampGetAwardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 errcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCampGetAwardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCampGetAwardResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 errcode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCampGetAwardResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 errcode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCampGetAwardResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCampGetAwardResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCampGetAwardResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCampGetAwardResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCampGetAwardResponse::MergeFrom(const CMessageCampGetAwardResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCampGetAwardResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCampGetAwardResponse::CopyFrom(const CMessageCampGetAwardResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCampGetAwardResponse::Swap(CMessageCampGetAwardResponse* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCampGetAwardResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCampGetAwardResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCampGetAwardResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCampGetAwardResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageAccuseKingRequest::kAccuseResultFieldNumber;
const int CMessageAccuseKingRequest::kWorldIDFieldNumber;
const int CMessageAccuseKingRequest::kCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageAccuseKingRequest::CMessageAccuseKingRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageAccuseKingRequest::InitAsDefaultInstance() {}

CMessageAccuseKingRequest::CMessageAccuseKingRequest(const CMessageAccuseKingRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageAccuseKingRequest::SharedCtor() {
  _cached_size_ = 0;
  accuseresult_ = 0u;
  worldid_ = 0u;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageAccuseKingRequest::~CMessageAccuseKingRequest() {
  SharedDtor();
}

void CMessageAccuseKingRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageAccuseKingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageAccuseKingRequest_descriptor_;
}

const CMessageAccuseKingRequest& CMessageAccuseKingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageAccuseKingRequest* CMessageAccuseKingRequest::default_instance_ = NULL;

CMessageAccuseKingRequest* CMessageAccuseKingRequest::New() const {
  return new CMessageAccuseKingRequest;
}

void CMessageAccuseKingRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accuseresult_ = 0u;
    worldid_ = 0u;
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageAccuseKingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 AccuseResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accuseresult_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_WorldID;
        break;
      }
      
      // optional uint32 WorldID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WorldID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &worldid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageAccuseKingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageAccuseKingRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 AccuseResult = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->accuseresult(), output);
  }
  
  // optional uint32 WorldID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->worldid(), output);
  }
  
  // optional uint32 CharID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->charid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageAccuseKingRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 AccuseResult = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->accuseresult(), target);
  }
  
  // optional uint32 WorldID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->worldid(), target);
  }
  
  // optional uint32 CharID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->charid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageAccuseKingRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AccuseResult = 1;
    if (has_accuseresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accuseresult());
    }
    
    // optional uint32 WorldID = 2;
    if (has_worldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->worldid());
    }
    
    // optional uint32 CharID = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageAccuseKingRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageAccuseKingRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageAccuseKingRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageAccuseKingRequest::MergeFrom(const CMessageAccuseKingRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_accuseresult(from.accuseresult());
    }
    if (from._has_bit(1)) {
      set_worldid(from.worldid());
    }
    if (from._has_bit(2)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageAccuseKingRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAccuseKingRequest::CopyFrom(const CMessageAccuseKingRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAccuseKingRequest::Swap(CMessageAccuseKingRequest* other) {
  if (other != this) {
    std::swap(accuseresult_, other->accuseresult_);
    std::swap(worldid_, other->worldid_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageAccuseKingRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageAccuseKingRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageAccuseKingRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageAccuseKingRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageAccuseKingResponse::kResponseResultFieldNumber;
const int CMessageAccuseKingResponse::kAccuseResultFieldNumber;
const int CMessageAccuseKingResponse::kCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageAccuseKingResponse::CMessageAccuseKingResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageAccuseKingResponse::InitAsDefaultInstance() {}

CMessageAccuseKingResponse::CMessageAccuseKingResponse(const CMessageAccuseKingResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageAccuseKingResponse::SharedCtor() {
  _cached_size_ = 0;
  responseresult_ = 0u;
  accuseresult_ = 0u;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageAccuseKingResponse::~CMessageAccuseKingResponse() {
  SharedDtor();
}

void CMessageAccuseKingResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageAccuseKingResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageAccuseKingResponse_descriptor_;
}

const CMessageAccuseKingResponse& CMessageAccuseKingResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageAccuseKingResponse* CMessageAccuseKingResponse::default_instance_ = NULL;

CMessageAccuseKingResponse* CMessageAccuseKingResponse::New() const {
  return new CMessageAccuseKingResponse;
}

void CMessageAccuseKingResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    responseresult_ = 0u;
    accuseresult_ = 0u;
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageAccuseKingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ResponseResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &responseresult_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_AccuseResult;
        break;
      }
      
      // optional uint32 AccuseResult = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AccuseResult:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accuseresult_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageAccuseKingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageAccuseKingResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ResponseResult = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->responseresult(), output);
  }
  
  // optional uint32 AccuseResult = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->accuseresult(), output);
  }
  
  // optional uint32 CharID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->charid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageAccuseKingResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ResponseResult = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->responseresult(), target);
  }
  
  // optional uint32 AccuseResult = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->accuseresult(), target);
  }
  
  // optional uint32 CharID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->charid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageAccuseKingResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ResponseResult = 1;
    if (has_responseresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->responseresult());
    }
    
    // optional uint32 AccuseResult = 2;
    if (has_accuseresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accuseresult());
    }
    
    // optional uint32 CharID = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageAccuseKingResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageAccuseKingResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageAccuseKingResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageAccuseKingResponse::MergeFrom(const CMessageAccuseKingResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_responseresult(from.responseresult());
    }
    if (from._has_bit(1)) {
      set_accuseresult(from.accuseresult());
    }
    if (from._has_bit(2)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageAccuseKingResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAccuseKingResponse::CopyFrom(const CMessageAccuseKingResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAccuseKingResponse::Swap(CMessageAccuseKingResponse* other) {
  if (other != this) {
    std::swap(responseresult_, other->responseresult_);
    std::swap(accuseresult_, other->accuseresult_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageAccuseKingResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageAccuseKingResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageAccuseKingResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageAccuseKingResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageAccuseKingNotify::_default_kingname_;
#ifndef _MSC_VER
const int CMessageAccuseKingNotify::kKingNameFieldNumber;
const int CMessageAccuseKingNotify::kCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageAccuseKingNotify::CMessageAccuseKingNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageAccuseKingNotify::InitAsDefaultInstance() {}

CMessageAccuseKingNotify::CMessageAccuseKingNotify(const CMessageAccuseKingNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageAccuseKingNotify::SharedCtor() {
  _cached_size_ = 0;
  kingname_ = const_cast< ::std::string*>(&_default_kingname_);
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageAccuseKingNotify::~CMessageAccuseKingNotify() {
  SharedDtor();
}

void CMessageAccuseKingNotify::SharedDtor() {
  if (kingname_ != &_default_kingname_) {
    delete kingname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageAccuseKingNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageAccuseKingNotify_descriptor_;
}

const CMessageAccuseKingNotify& CMessageAccuseKingNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageAccuseKingNotify* CMessageAccuseKingNotify::default_instance_ = NULL;

CMessageAccuseKingNotify* CMessageAccuseKingNotify::New() const {
  return new CMessageAccuseKingNotify;
}

void CMessageAccuseKingNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (kingname_ != &_default_kingname_) {
        kingname_->clear();
      }
    }
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageAccuseKingNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string KingName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_kingname()));
        if (input->ExpectTag(16)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageAccuseKingNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageAccuseKingNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string KingName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->kingname(), output);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageAccuseKingNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string KingName = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->kingname(), target);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageAccuseKingNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string KingName = 1;
    if (has_kingname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->kingname());
    }
    
    // optional uint32 CharID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageAccuseKingNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageAccuseKingNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageAccuseKingNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageAccuseKingNotify::MergeFrom(const CMessageAccuseKingNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_kingname(from.kingname());
    }
    if (from._has_bit(1)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageAccuseKingNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAccuseKingNotify::CopyFrom(const CMessageAccuseKingNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAccuseKingNotify::Swap(CMessageAccuseKingNotify* other) {
  if (other != this) {
    std::swap(kingname_, other->kingname_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageAccuseKingNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageAccuseKingNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageAccuseKingNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageAccuseKingNotify_reflection_;
}

// ===================================================================

const ::std::string CMessageAccuseStatusNotify::_default_kingname_;
#ifndef _MSC_VER
const int CMessageAccuseStatusNotify::kKingNameFieldNumber;
const int CMessageAccuseStatusNotify::kYesNumFieldNumber;
const int CMessageAccuseStatusNotify::kNoNumFieldNumber;
const int CMessageAccuseStatusNotify::kAbortNumFieldNumber;
const int CMessageAccuseStatusNotify::kCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageAccuseStatusNotify::CMessageAccuseStatusNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageAccuseStatusNotify::InitAsDefaultInstance() {}

CMessageAccuseStatusNotify::CMessageAccuseStatusNotify(const CMessageAccuseStatusNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageAccuseStatusNotify::SharedCtor() {
  _cached_size_ = 0;
  kingname_ = const_cast< ::std::string*>(&_default_kingname_);
  yesnum_ = 0u;
  nonum_ = 0u;
  abortnum_ = 0u;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageAccuseStatusNotify::~CMessageAccuseStatusNotify() {
  SharedDtor();
}

void CMessageAccuseStatusNotify::SharedDtor() {
  if (kingname_ != &_default_kingname_) {
    delete kingname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageAccuseStatusNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageAccuseStatusNotify_descriptor_;
}

const CMessageAccuseStatusNotify& CMessageAccuseStatusNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageAccuseStatusNotify* CMessageAccuseStatusNotify::default_instance_ = NULL;

CMessageAccuseStatusNotify* CMessageAccuseStatusNotify::New() const {
  return new CMessageAccuseStatusNotify;
}

void CMessageAccuseStatusNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (kingname_ != &_default_kingname_) {
        kingname_->clear();
      }
    }
    yesnum_ = 0u;
    nonum_ = 0u;
    abortnum_ = 0u;
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageAccuseStatusNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string KingName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_kingname()));
        if (input->ExpectTag(16)) goto parse_YesNum;
        break;
      }
      
      // optional uint32 YesNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_YesNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &yesnum_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_NoNum;
        break;
      }
      
      // optional uint32 NoNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NoNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &nonum_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_AbortNum;
        break;
      }
      
      // optional uint32 AbortNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AbortNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &abortnum_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageAccuseStatusNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageAccuseStatusNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string KingName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->kingname(), output);
  }
  
  // optional uint32 YesNum = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->yesnum(), output);
  }
  
  // optional uint32 NoNum = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->nonum(), output);
  }
  
  // optional uint32 AbortNum = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->abortnum(), output);
  }
  
  // optional uint32 CharID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->charid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageAccuseStatusNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string KingName = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->kingname(), target);
  }
  
  // optional uint32 YesNum = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->yesnum(), target);
  }
  
  // optional uint32 NoNum = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->nonum(), target);
  }
  
  // optional uint32 AbortNum = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->abortnum(), target);
  }
  
  // optional uint32 CharID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->charid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageAccuseStatusNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string KingName = 1;
    if (has_kingname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->kingname());
    }
    
    // optional uint32 YesNum = 2;
    if (has_yesnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->yesnum());
    }
    
    // optional uint32 NoNum = 3;
    if (has_nonum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->nonum());
    }
    
    // optional uint32 AbortNum = 4;
    if (has_abortnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->abortnum());
    }
    
    // optional uint32 CharID = 5;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageAccuseStatusNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageAccuseStatusNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageAccuseStatusNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageAccuseStatusNotify::MergeFrom(const CMessageAccuseStatusNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_kingname(from.kingname());
    }
    if (from._has_bit(1)) {
      set_yesnum(from.yesnum());
    }
    if (from._has_bit(2)) {
      set_nonum(from.nonum());
    }
    if (from._has_bit(3)) {
      set_abortnum(from.abortnum());
    }
    if (from._has_bit(4)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageAccuseStatusNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAccuseStatusNotify::CopyFrom(const CMessageAccuseStatusNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAccuseStatusNotify::Swap(CMessageAccuseStatusNotify* other) {
  if (other != this) {
    std::swap(kingname_, other->kingname_);
    std::swap(yesnum_, other->yesnum_);
    std::swap(nonum_, other->nonum_);
    std::swap(abortnum_, other->abortnum_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageAccuseStatusNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageAccuseStatusNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageAccuseStatusNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageAccuseStatusNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessagePowerInfoRequest::kCharIDFieldNumber;
#endif  // !_MSC_VER

CMessagePowerInfoRequest::CMessagePowerInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePowerInfoRequest::InitAsDefaultInstance() {}

CMessagePowerInfoRequest::CMessagePowerInfoRequest(const CMessagePowerInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePowerInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePowerInfoRequest::~CMessagePowerInfoRequest() {
  SharedDtor();
}

void CMessagePowerInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessagePowerInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePowerInfoRequest_descriptor_;
}

const CMessagePowerInfoRequest& CMessagePowerInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePowerInfoRequest* CMessagePowerInfoRequest::default_instance_ = NULL;

CMessagePowerInfoRequest* CMessagePowerInfoRequest::New() const {
  return new CMessagePowerInfoRequest;
}

void CMessagePowerInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePowerInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePowerInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePowerInfoRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePowerInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePowerInfoRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePowerInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePowerInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePowerInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePowerInfoRequest::MergeFrom(const CMessagePowerInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePowerInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePowerInfoRequest::CopyFrom(const CMessagePowerInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePowerInfoRequest::Swap(CMessagePowerInfoRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePowerInfoRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePowerInfoRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePowerInfoRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePowerInfoRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PowerInfo::kPowerTypeFieldNumber;
const int PowerInfo::kWorldFieldNumber;
const int PowerInfo::kChangeTypeFieldNumber;
const int PowerInfo::kChangeValueFieldNumber;
const int PowerInfo::kTimeFieldNumber;
#endif  // !_MSC_VER

PowerInfo::PowerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PowerInfo::InitAsDefaultInstance() {}

PowerInfo::PowerInfo(const PowerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PowerInfo::SharedCtor() {
  _cached_size_ = 0;
  powertype_ = 0u;
  world_ = 0u;
  changetype_ = 0u;
  changevalue_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PowerInfo::~PowerInfo() {
  SharedDtor();
}

void PowerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PowerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PowerInfo_descriptor_;
}

const PowerInfo& PowerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

PowerInfo* PowerInfo::default_instance_ = NULL;

PowerInfo* PowerInfo::New() const {
  return new PowerInfo;
}

void PowerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    powertype_ = 0u;
    world_ = 0u;
    changetype_ = 0u;
    changevalue_ = 0u;
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PowerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 PowerType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &powertype_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_World;
        break;
      }
      
      // optional uint32 World = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_World:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &world_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_ChangeType;
        break;
      }
      
      // optional uint32 ChangeType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ChangeType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &changetype_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_ChangeValue;
        break;
      }
      
      // optional uint32 ChangeValue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ChangeValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &changevalue_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Time;
        break;
      }
      
      // optional uint32 Time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Time:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &time_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PowerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PowerInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 PowerType = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->powertype(), output);
  }
  
  // optional uint32 World = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->world(), output);
  }
  
  // optional uint32 ChangeType = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->changetype(), output);
  }
  
  // optional uint32 ChangeValue = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->changevalue(), output);
  }
  
  // optional uint32 Time = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PowerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 PowerType = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->powertype(), target);
  }
  
  // optional uint32 World = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->world(), target);
  }
  
  // optional uint32 ChangeType = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->changetype(), target);
  }
  
  // optional uint32 ChangeValue = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->changevalue(), target);
  }
  
  // optional uint32 Time = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PowerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 PowerType = 1;
    if (has_powertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->powertype());
    }
    
    // optional uint32 World = 2;
    if (has_world()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->world());
    }
    
    // optional uint32 ChangeType = 3;
    if (has_changetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->changetype());
    }
    
    // optional uint32 ChangeValue = 4;
    if (has_changevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->changevalue());
    }
    
    // optional uint32 Time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PowerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PowerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PowerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PowerInfo::MergeFrom(const PowerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_powertype(from.powertype());
    }
    if (from._has_bit(1)) {
      set_world(from.world());
    }
    if (from._has_bit(2)) {
      set_changetype(from.changetype());
    }
    if (from._has_bit(3)) {
      set_changevalue(from.changevalue());
    }
    if (from._has_bit(4)) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PowerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PowerInfo::CopyFrom(const PowerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PowerInfo::Swap(PowerInfo* other) {
  if (other != this) {
    std::swap(powertype_, other->powertype_);
    std::swap(world_, other->world_);
    std::swap(changetype_, other->changetype_);
    std::swap(changevalue_, other->changevalue_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PowerInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PowerInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PowerInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PowerInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessagePowerInfoResponse::kPowerHistoryFieldNumber;
const int CMessagePowerInfoResponse::kPowerAddFieldNumber;
const int CMessagePowerInfoResponse::kPowerDelFieldNumber;
const int CMessagePowerInfoResponse::kResultFieldNumber;
const int CMessagePowerInfoResponse::kCharIDFieldNumber;
#endif  // !_MSC_VER

CMessagePowerInfoResponse::CMessagePowerInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePowerInfoResponse::InitAsDefaultInstance() {}

CMessagePowerInfoResponse::CMessagePowerInfoResponse(const CMessagePowerInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePowerInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  poweradd_ = 0u;
  powerdel_ = 0u;
  result_ = 0u;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePowerInfoResponse::~CMessagePowerInfoResponse() {
  SharedDtor();
}

void CMessagePowerInfoResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessagePowerInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePowerInfoResponse_descriptor_;
}

const CMessagePowerInfoResponse& CMessagePowerInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePowerInfoResponse* CMessagePowerInfoResponse::default_instance_ = NULL;

CMessagePowerInfoResponse* CMessagePowerInfoResponse::New() const {
  return new CMessagePowerInfoResponse;
}

void CMessagePowerInfoResponse::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    poweradd_ = 0u;
    powerdel_ = 0u;
    result_ = 0u;
    charid_ = 0u;
  }
  powerhistory_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePowerInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .PowerInfo PowerHistory = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_PowerHistory:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_powerhistory()));
        if (input->ExpectTag(10)) goto parse_PowerHistory;
        if (input->ExpectTag(16)) goto parse_PowerAdd;
        break;
      }
      
      // optional uint32 PowerAdd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PowerAdd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &poweradd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_PowerDel;
        break;
      }
      
      // optional uint32 PowerDel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PowerDel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &powerdel_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePowerInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePowerInfoResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .PowerInfo PowerHistory = 1;
  for (int i = 0; i < this->powerhistory_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->powerhistory(i), output);
  }
  
  // optional uint32 PowerAdd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->poweradd(), output);
  }
  
  // optional uint32 PowerDel = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->powerdel(), output);
  }
  
  // optional uint32 Result = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->result(), output);
  }
  
  // optional uint32 CharID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->charid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePowerInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PowerInfo PowerHistory = 1;
  for (int i = 0; i < this->powerhistory_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->powerhistory(i), target);
  }
  
  // optional uint32 PowerAdd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->poweradd(), target);
  }
  
  // optional uint32 PowerDel = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->powerdel(), target);
  }
  
  // optional uint32 Result = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->result(), target);
  }
  
  // optional uint32 CharID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->charid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePowerInfoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 PowerAdd = 2;
    if (has_poweradd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->poweradd());
    }
    
    // optional uint32 PowerDel = 3;
    if (has_powerdel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->powerdel());
    }
    
    // optional uint32 Result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 CharID = 5;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  // repeated .PowerInfo PowerHistory = 1;
  total_size += 1 * this->powerhistory_size();
  for (int i = 0; i < this->powerhistory_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->powerhistory(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePowerInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePowerInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePowerInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePowerInfoResponse::MergeFrom(const CMessagePowerInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  powerhistory_.MergeFrom(from.powerhistory_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_poweradd(from.poweradd());
    }
    if (from._has_bit(2)) {
      set_powerdel(from.powerdel());
    }
    if (from._has_bit(3)) {
      set_result(from.result());
    }
    if (from._has_bit(4)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePowerInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePowerInfoResponse::CopyFrom(const CMessagePowerInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePowerInfoResponse::Swap(CMessagePowerInfoResponse* other) {
  if (other != this) {
    powerhistory_.Swap(&other->powerhistory_);
    std::swap(poweradd_, other->poweradd_);
    std::swap(powerdel_, other->powerdel_);
    std::swap(result_, other->result_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePowerInfoResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePowerInfoResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePowerInfoResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePowerInfoResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageMakeGuoTanNotify::_default_kingname_;
#ifndef _MSC_VER
const int CMessageMakeGuoTanNotify::kSrcWorldIDFieldNumber;
const int CMessageMakeGuoTanNotify::kDesWorldIDFieldNumber;
const int CMessageMakeGuoTanNotify::kTargetTimeFieldNumber;
const int CMessageMakeGuoTanNotify::kKingNameFieldNumber;
#endif  // !_MSC_VER

CMessageMakeGuoTanNotify::CMessageMakeGuoTanNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageMakeGuoTanNotify::InitAsDefaultInstance() {}

CMessageMakeGuoTanNotify::CMessageMakeGuoTanNotify(const CMessageMakeGuoTanNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageMakeGuoTanNotify::SharedCtor() {
  _cached_size_ = 0;
  srcworldid_ = 0u;
  desworldid_ = 0u;
  targettime_ = 0u;
  kingname_ = const_cast< ::std::string*>(&_default_kingname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageMakeGuoTanNotify::~CMessageMakeGuoTanNotify() {
  SharedDtor();
}

void CMessageMakeGuoTanNotify::SharedDtor() {
  if (kingname_ != &_default_kingname_) {
    delete kingname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageMakeGuoTanNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageMakeGuoTanNotify_descriptor_;
}

const CMessageMakeGuoTanNotify& CMessageMakeGuoTanNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageMakeGuoTanNotify* CMessageMakeGuoTanNotify::default_instance_ = NULL;

CMessageMakeGuoTanNotify* CMessageMakeGuoTanNotify::New() const {
  return new CMessageMakeGuoTanNotify;
}

void CMessageMakeGuoTanNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    srcworldid_ = 0u;
    desworldid_ = 0u;
    targettime_ = 0u;
    if (_has_bit(3)) {
      if (kingname_ != &_default_kingname_) {
        kingname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageMakeGuoTanNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 SrcWorldID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srcworldid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_DesWorldID;
        break;
      }
      
      // optional uint32 DesWorldID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DesWorldID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &desworldid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_TargetTime;
        break;
      }
      
      // optional uint32 TargetTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TargetTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &targettime_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_KingName;
        break;
      }
      
      // optional string KingName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_KingName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_kingname()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageMakeGuoTanNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageMakeGuoTanNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 SrcWorldID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->srcworldid(), output);
  }
  
  // optional uint32 DesWorldID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->desworldid(), output);
  }
  
  // optional uint32 TargetTime = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->targettime(), output);
  }
  
  // optional string KingName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->kingname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageMakeGuoTanNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 SrcWorldID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->srcworldid(), target);
  }
  
  // optional uint32 DesWorldID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->desworldid(), target);
  }
  
  // optional uint32 TargetTime = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->targettime(), target);
  }
  
  // optional string KingName = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->kingname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageMakeGuoTanNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SrcWorldID = 1;
    if (has_srcworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srcworldid());
    }
    
    // optional uint32 DesWorldID = 2;
    if (has_desworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->desworldid());
    }
    
    // optional uint32 TargetTime = 3;
    if (has_targettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->targettime());
    }
    
    // optional string KingName = 4;
    if (has_kingname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->kingname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageMakeGuoTanNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageMakeGuoTanNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageMakeGuoTanNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageMakeGuoTanNotify::MergeFrom(const CMessageMakeGuoTanNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_srcworldid(from.srcworldid());
    }
    if (from._has_bit(1)) {
      set_desworldid(from.desworldid());
    }
    if (from._has_bit(2)) {
      set_targettime(from.targettime());
    }
    if (from._has_bit(3)) {
      set_kingname(from.kingname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageMakeGuoTanNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMakeGuoTanNotify::CopyFrom(const CMessageMakeGuoTanNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMakeGuoTanNotify::Swap(CMessageMakeGuoTanNotify* other) {
  if (other != this) {
    std::swap(srcworldid_, other->srcworldid_);
    std::swap(desworldid_, other->desworldid_);
    std::swap(targettime_, other->targettime_);
    std::swap(kingname_, other->kingname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageMakeGuoTanNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageMakeGuoTanNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageMakeGuoTanNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageMakeGuoTanNotify_reflection_;
}

// ===================================================================

const ::std::string CMessageMakeLuanWuNotify::_default_kingname_;
#ifndef _MSC_VER
const int CMessageMakeLuanWuNotify::kSrcWorldIDFieldNumber;
const int CMessageMakeLuanWuNotify::kDesWorldIDFieldNumber;
const int CMessageMakeLuanWuNotify::kTargetTimeFieldNumber;
const int CMessageMakeLuanWuNotify::kKingNameFieldNumber;
#endif  // !_MSC_VER

CMessageMakeLuanWuNotify::CMessageMakeLuanWuNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageMakeLuanWuNotify::InitAsDefaultInstance() {}

CMessageMakeLuanWuNotify::CMessageMakeLuanWuNotify(const CMessageMakeLuanWuNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageMakeLuanWuNotify::SharedCtor() {
  _cached_size_ = 0;
  srcworldid_ = 0u;
  desworldid_ = 0u;
  targettime_ = 0u;
  kingname_ = const_cast< ::std::string*>(&_default_kingname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageMakeLuanWuNotify::~CMessageMakeLuanWuNotify() {
  SharedDtor();
}

void CMessageMakeLuanWuNotify::SharedDtor() {
  if (kingname_ != &_default_kingname_) {
    delete kingname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageMakeLuanWuNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageMakeLuanWuNotify_descriptor_;
}

const CMessageMakeLuanWuNotify& CMessageMakeLuanWuNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_countrymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageMakeLuanWuNotify* CMessageMakeLuanWuNotify::default_instance_ = NULL;

CMessageMakeLuanWuNotify* CMessageMakeLuanWuNotify::New() const {
  return new CMessageMakeLuanWuNotify;
}

void CMessageMakeLuanWuNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    srcworldid_ = 0u;
    desworldid_ = 0u;
    targettime_ = 0u;
    if (_has_bit(3)) {
      if (kingname_ != &_default_kingname_) {
        kingname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageMakeLuanWuNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 SrcWorldID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srcworldid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_DesWorldID;
        break;
      }
      
      // optional uint32 DesWorldID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DesWorldID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &desworldid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_TargetTime;
        break;
      }
      
      // optional uint32 TargetTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TargetTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &targettime_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_KingName;
        break;
      }
      
      // optional string KingName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_KingName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_kingname()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageMakeLuanWuNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageMakeLuanWuNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 SrcWorldID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->srcworldid(), output);
  }
  
  // optional uint32 DesWorldID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->desworldid(), output);
  }
  
  // optional uint32 TargetTime = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->targettime(), output);
  }
  
  // optional string KingName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->kingname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageMakeLuanWuNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 SrcWorldID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->srcworldid(), target);
  }
  
  // optional uint32 DesWorldID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->desworldid(), target);
  }
  
  // optional uint32 TargetTime = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->targettime(), target);
  }
  
  // optional string KingName = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->kingname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageMakeLuanWuNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SrcWorldID = 1;
    if (has_srcworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srcworldid());
    }
    
    // optional uint32 DesWorldID = 2;
    if (has_desworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->desworldid());
    }
    
    // optional uint32 TargetTime = 3;
    if (has_targettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->targettime());
    }
    
    // optional string KingName = 4;
    if (has_kingname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->kingname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageMakeLuanWuNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageMakeLuanWuNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageMakeLuanWuNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageMakeLuanWuNotify::MergeFrom(const CMessageMakeLuanWuNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_srcworldid(from.srcworldid());
    }
    if (from._has_bit(1)) {
      set_desworldid(from.desworldid());
    }
    if (from._has_bit(2)) {
      set_targettime(from.targettime());
    }
    if (from._has_bit(3)) {
      set_kingname(from.kingname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageMakeLuanWuNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMakeLuanWuNotify::CopyFrom(const CMessageMakeLuanWuNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMakeLuanWuNotify::Swap(CMessageMakeLuanWuNotify* other) {
  if (other != this) {
    std::swap(srcworldid_, other->srcworldid_);
    std::swap(desworldid_, other->desworldid_);
    std::swap(targettime_, other->targettime_);
    std::swap(kingname_, other->kingname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageMakeLuanWuNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageMakeLuanWuNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageMakeLuanWuNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageMakeLuanWuNotify_reflection_;
}
