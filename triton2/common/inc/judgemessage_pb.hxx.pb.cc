// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "judgemessage_pb.hxx.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>
#ifdef LEAK_CHK_DEBUG_NEW
#include "debug_new.h"
#endif

namespace {

const ::google::protobuf::Descriptor* CMessageOpenJudgeNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageOpenJudgeNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCloseJudgeNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCloseJudgeNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageModifySingleJudgeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageModifySingleJudgeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageModifySingleJudgeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageModifySingleJudgeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageModifyJudgeListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageModifyJudgeListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageModifyJudgeListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageModifyJudgeListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageModifyJudgeNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageModifyJudgeNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBJudgeRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBJudgeRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageQueryJudgeListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageQueryJudgeListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageQueryJudgeListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageQueryJudgeListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUpdateMaxJudgeValueNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUpdateMaxJudgeValueNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageQuerySingleRecordRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageQuerySingleRecordRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageQuerySingleRecordResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageQuerySingleRecordResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* JudgeMessageID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_judgemessage_5fpb_2ehxx() {
  protobuf_AddDesc_judgemessage_5fpb_2ehxx();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "judgemessage_pb.hxx");
  GOOGLE_CHECK(file != NULL);
  CMessageOpenJudgeNotice_descriptor_ = file->message_type(0);
  static const int CMessageOpenJudgeNotice_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOpenJudgeNotice, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOpenJudgeNotice, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOpenJudgeNotice, charid_),
  };
  CMessageOpenJudgeNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageOpenJudgeNotice_descriptor_,
      CMessageOpenJudgeNotice::default_instance_,
      CMessageOpenJudgeNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOpenJudgeNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOpenJudgeNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageOpenJudgeNotice));
  CMessageCloseJudgeNotice_descriptor_ = file->message_type(1);
  static const int CMessageCloseJudgeNotice_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCloseJudgeNotice, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCloseJudgeNotice, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCloseJudgeNotice, charid_),
  };
  CMessageCloseJudgeNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCloseJudgeNotice_descriptor_,
      CMessageCloseJudgeNotice::default_instance_,
      CMessageCloseJudgeNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCloseJudgeNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCloseJudgeNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCloseJudgeNotice));
  CMessageModifySingleJudgeRequest_descriptor_ = file->message_type(2);
  static const int CMessageModifySingleJudgeRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifySingleJudgeRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifySingleJudgeRequest, srccharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifySingleJudgeRequest, desname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifySingleJudgeRequest, value_),
  };
  CMessageModifySingleJudgeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageModifySingleJudgeRequest_descriptor_,
      CMessageModifySingleJudgeRequest::default_instance_,
      CMessageModifySingleJudgeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifySingleJudgeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifySingleJudgeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageModifySingleJudgeRequest));
  CMessageModifySingleJudgeResponse_descriptor_ = file->message_type(3);
  static const int CMessageModifySingleJudgeResponse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifySingleJudgeResponse, rtncode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifySingleJudgeResponse, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifySingleJudgeResponse, desname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifySingleJudgeResponse, descharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifySingleJudgeResponse, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifySingleJudgeResponse, face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifySingleJudgeResponse, sex_),
  };
  CMessageModifySingleJudgeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageModifySingleJudgeResponse_descriptor_,
      CMessageModifySingleJudgeResponse::default_instance_,
      CMessageModifySingleJudgeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifySingleJudgeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifySingleJudgeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageModifySingleJudgeResponse));
  CMessageModifyJudgeListRequest_descriptor_ = file->message_type(4);
  static const int CMessageModifyJudgeListRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifyJudgeListRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifyJudgeListRequest, srccharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifyJudgeListRequest, data_),
  };
  CMessageModifyJudgeListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageModifyJudgeListRequest_descriptor_,
      CMessageModifyJudgeListRequest::default_instance_,
      CMessageModifyJudgeListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifyJudgeListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifyJudgeListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageModifyJudgeListRequest));
  CMessageModifyJudgeListResponse_descriptor_ = file->message_type(5);
  static const int CMessageModifyJudgeListResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifyJudgeListResponse, rtncode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifyJudgeListResponse, type_),
  };
  CMessageModifyJudgeListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageModifyJudgeListResponse_descriptor_,
      CMessageModifyJudgeListResponse::default_instance_,
      CMessageModifyJudgeListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifyJudgeListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifyJudgeListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageModifyJudgeListResponse));
  CMessageModifyJudgeNotice_descriptor_ = file->message_type(6);
  static const int CMessageModifyJudgeNotice_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifyJudgeNotice, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifyJudgeNotice, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifyJudgeNotice, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifyJudgeNotice, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifyJudgeNotice, face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifyJudgeNotice, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifyJudgeNotice, isadd_),
  };
  CMessageModifyJudgeNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageModifyJudgeNotice_descriptor_,
      CMessageModifyJudgeNotice::default_instance_,
      CMessageModifyJudgeNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifyJudgeNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifyJudgeNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageModifyJudgeNotice));
  PBJudgeRecord_descriptor_ = file->message_type(7);
  static const int PBJudgeRecord_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBJudgeRecord, srcname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBJudgeRecord, srccharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBJudgeRecord, desname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBJudgeRecord, descharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBJudgeRecord, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBJudgeRecord, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBJudgeRecord, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBJudgeRecord, face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBJudgeRecord, sex_),
  };
  PBJudgeRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBJudgeRecord_descriptor_,
      PBJudgeRecord::default_instance_,
      PBJudgeRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBJudgeRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBJudgeRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBJudgeRecord));
  CMessageQueryJudgeListRequest_descriptor_ = file->message_type(8);
  static const int CMessageQueryJudgeListRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryJudgeListRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryJudgeListRequest, condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryJudgeListRequest, action_),
  };
  CMessageQueryJudgeListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageQueryJudgeListRequest_descriptor_,
      CMessageQueryJudgeListRequest::default_instance_,
      CMessageQueryJudgeListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryJudgeListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryJudgeListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageQueryJudgeListRequest));
  CMessageQueryJudgeListResponse_descriptor_ = file->message_type(9);
  static const int CMessageQueryJudgeListResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryJudgeListResponse, favorjudgeotherlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryJudgeListResponse, badjudgeotherlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryJudgeListResponse, favorrecjudgelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryJudgeListResponse, badrecjudgelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryJudgeListResponse, favortotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryJudgeListResponse, badtotal_),
  };
  CMessageQueryJudgeListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageQueryJudgeListResponse_descriptor_,
      CMessageQueryJudgeListResponse::default_instance_,
      CMessageQueryJudgeListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryJudgeListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryJudgeListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageQueryJudgeListResponse));
  CMessageUpdateMaxJudgeValueNotice_descriptor_ = file->message_type(10);
  static const int CMessageUpdateMaxJudgeValueNotice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateMaxJudgeValueNotice, favortotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateMaxJudgeValueNotice, badtotal_),
  };
  CMessageUpdateMaxJudgeValueNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUpdateMaxJudgeValueNotice_descriptor_,
      CMessageUpdateMaxJudgeValueNotice::default_instance_,
      CMessageUpdateMaxJudgeValueNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateMaxJudgeValueNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateMaxJudgeValueNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUpdateMaxJudgeValueNotice));
  CMessageQuerySingleRecordRequest_descriptor_ = file->message_type(11);
  static const int CMessageQuerySingleRecordRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQuerySingleRecordRequest, srccharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQuerySingleRecordRequest, descharid_),
  };
  CMessageQuerySingleRecordRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageQuerySingleRecordRequest_descriptor_,
      CMessageQuerySingleRecordRequest::default_instance_,
      CMessageQuerySingleRecordRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQuerySingleRecordRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQuerySingleRecordRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageQuerySingleRecordRequest));
  CMessageQuerySingleRecordResponse_descriptor_ = file->message_type(12);
  static const int CMessageQuerySingleRecordResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQuerySingleRecordResponse, favorrecord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQuerySingleRecordResponse, badrecord_),
  };
  CMessageQuerySingleRecordResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageQuerySingleRecordResponse_descriptor_,
      CMessageQuerySingleRecordResponse::default_instance_,
      CMessageQuerySingleRecordResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQuerySingleRecordResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQuerySingleRecordResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageQuerySingleRecordResponse));
  JudgeMessageID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_judgemessage_5fpb_2ehxx);
}

void protobuf_RegisterTypes() {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageOpenJudgeNotice_descriptor_, &CMessageOpenJudgeNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCloseJudgeNotice_descriptor_, &CMessageCloseJudgeNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageModifySingleJudgeRequest_descriptor_, &CMessageModifySingleJudgeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageModifySingleJudgeResponse_descriptor_, &CMessageModifySingleJudgeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageModifyJudgeListRequest_descriptor_, &CMessageModifyJudgeListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageModifyJudgeListResponse_descriptor_, &CMessageModifyJudgeListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageModifyJudgeNotice_descriptor_, &CMessageModifyJudgeNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBJudgeRecord_descriptor_, &PBJudgeRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageQueryJudgeListRequest_descriptor_, &CMessageQueryJudgeListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageQueryJudgeListResponse_descriptor_, &CMessageQueryJudgeListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUpdateMaxJudgeValueNotice_descriptor_, &CMessageUpdateMaxJudgeValueNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageQuerySingleRecordRequest_descriptor_, &CMessageQuerySingleRecordRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageQuerySingleRecordResponse_descriptor_, &CMessageQuerySingleRecordResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_judgemessage_5fpb_2ehxx() {
  delete CMessageOpenJudgeNotice::default_instance_;
  delete CMessageOpenJudgeNotice_reflection_;
  delete CMessageCloseJudgeNotice::default_instance_;
  delete CMessageCloseJudgeNotice_reflection_;
  delete CMessageModifySingleJudgeRequest::default_instance_;
  delete CMessageModifySingleJudgeRequest_reflection_;
  delete CMessageModifySingleJudgeResponse::default_instance_;
  delete CMessageModifySingleJudgeResponse_reflection_;
  delete CMessageModifyJudgeListRequest::default_instance_;
  delete CMessageModifyJudgeListRequest_reflection_;
  delete CMessageModifyJudgeListResponse::default_instance_;
  delete CMessageModifyJudgeListResponse_reflection_;
  delete CMessageModifyJudgeNotice::default_instance_;
  delete CMessageModifyJudgeNotice_reflection_;
  delete PBJudgeRecord::default_instance_;
  delete PBJudgeRecord_reflection_;
  delete CMessageQueryJudgeListRequest::default_instance_;
  delete CMessageQueryJudgeListRequest_reflection_;
  delete CMessageQueryJudgeListResponse::default_instance_;
  delete CMessageQueryJudgeListResponse_reflection_;
  delete CMessageUpdateMaxJudgeValueNotice::default_instance_;
  delete CMessageUpdateMaxJudgeValueNotice_reflection_;
  delete CMessageQuerySingleRecordRequest::default_instance_;
  delete CMessageQuerySingleRecordRequest_reflection_;
  delete CMessageQuerySingleRecordResponse::default_instance_;
  delete CMessageQuerySingleRecordResponse_reflection_;
}

void protobuf_AddDesc_judgemessage_5fpb_2ehxx() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  #ifndef _NO_PROTOBUF_STR_
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023judgemessage_pb.hxx\"E\n\027CMessageOpenJud"
    "geNotice\022\014\n\004Type\030\001 \001(\r\022\014\n\004Name\030\002 \001(\t\022\016\n\006"
    "CharID\030\003 \001(\r\"F\n\030CMessageCloseJudgeNotice"
    "\022\014\n\004Type\030\001 \001(\r\022\014\n\004Name\030\002 \001(\t\022\016\n\006CharID\030\003"
    " \001(\r\"c\n CMessageModifySingleJudgeRequest"
    "\022\014\n\004Type\030\001 \001(\r\022\021\n\tSrcCharID\030\002 \001(\r\022\017\n\007Des"
    "Name\030\003 \001(\t\022\r\n\005Value\030\004 \001(\r\"\220\001\n!CMessageMo"
    "difySingleJudgeResponse\022\017\n\007RtnCode\030\001 \001(\r"
    "\022\014\n\004Type\030\002 \001(\r\022\017\n\007DesName\030\003 \001(\t\022\021\n\tDesCh"
    "arID\030\004 \001(\r\022\r\n\005Value\030\005 \001(\r\022\014\n\004Face\030\006 \001(\r\022"
    "\013\n\003Sex\030\007 \001(\r\"_\n\036CMessageModifyJudgeListR"
    "equest\022\014\n\004Type\030\001 \001(\r\022\021\n\tSrcCharID\030\002 \001(\r\022"
    "\034\n\004Data\030\003 \003(\0132\016.PBJudgeRecord\"@\n\037CMessag"
    "eModifyJudgeListResponse\022\017\n\007RtnCode\030\001 \001("
    "\r\022\014\n\004Type\030\002 \001(\r\"\200\001\n\031CMessageModifyJudgeN"
    "otice\022\014\n\004Type\030\001 \001(\r\022\014\n\004Name\030\002 \001(\t\022\016\n\006Cha"
    "rID\030\003 \001(\r\022\r\n\005Value\030\004 \001(\r\022\014\n\004Face\030\005 \001(\r\022\013"
    "\n\003Sex\030\006 \001(\r\022\r\n\005IsAdd\030\007 \001(\r\"\242\001\n\rPBJudgeRe"
    "cord\022\017\n\007SrcName\030\001 \001(\t\022\021\n\tSrcCharID\030\002 \001(\r"
    "\022\017\n\007DesName\030\003 \001(\t\022\021\n\tDesCharID\030\004 \001(\r\022\014\n\004"
    "Type\030\005 \001(\r\022\r\n\005Value\030\006 \001(\r\022\021\n\tTimeStamp\030\007"
    " \001(\r\022\014\n\004Face\030\010 \001(\r\022\013\n\003Sex\030\t \001(\r\"R\n\035CMess"
    "ageQueryJudgeListRequest\022\016\n\006CharID\030\001 \001(\r"
    "\022\021\n\tCondition\030\002 \001(\r\022\016\n\006Action\030\003 \001(\r\"\362\001\n\036"
    "CMessageQueryJudgeListResponse\022+\n\023FavorJ"
    "udgeOtherList\030\001 \003(\0132\016.PBJudgeRecord\022)\n\021B"
    "adJudgeOtherList\030\002 \003(\0132\016.PBJudgeRecord\022)"
    "\n\021FavorRecJudgeList\030\003 \003(\0132\016.PBJudgeRecor"
    "d\022\'\n\017BadRecJudgeList\030\004 \003(\0132\016.PBJudgeReco"
    "rd\022\022\n\nFavorTotal\030\005 \001(\r\022\020\n\010BadTotal\030\006 \001(\r"
    "\"I\n!CMessageUpdateMaxJudgeValueNotice\022\022\n"
    "\nFavorTotal\030\001 \001(\r\022\020\n\010BadTotal\030\002 \001(\r\"H\n C"
    "MessageQuerySingleRecordRequest\022\021\n\tSrcCh"
    "arID\030\001 \001(\r\022\021\n\tDesCharID\030\002 \001(\r\"k\n!CMessag"
    "eQuerySingleRecordResponse\022#\n\013FavorRecor"
    "d\030\001 \001(\0132\016.PBJudgeRecord\022!\n\tBadRecord\030\002 \001"
    "(\0132\016.PBJudgeRecord*\272\003\n\016JudgeMessageID\022\035\n"
    "\027ID_S2C_NOTIFY_OPENJUDGE\020\201\230\001\022\036\n\030ID_S2C_N"
    "OTIFY_CLOSEJUDGE\020\202\230\001\022&\n ID_C2S_REQUEST_M"
    "ODIFYJUDGESINGLE\020\203\230\001\022\'\n!ID_S2C_RESPONSE_"
    "MODIFYJUDGESINGLE\020\204\230\001\022$\n\036ID_C2S_REQUEST_"
    "MODIFYJUDGELIST\020\205\230\001\022%\n\037ID_S2C_RESPONSE_M"
    "ODIFYJUDGELIST\020\206\230\001\022\037\n\031ID_S2C_NOTIFY_MODI"
    "FYJUDGE\020\207\230\001\022#\n\035ID_C2S_REQUEST_QUERYJUDGE"
    "LIST\020\210\230\001\022$\n\036ID_S2C_RESPONSE_QUERYJUDGELI"
    "ST\020\211\230\001\022\034\n\026ID_S2C_NOTIFY_JUDGEMAX\020\212\230\001\022\037\n\031"
    "ID_C2S_REQUEST_QUERYJUDGE\020\213\230\001\022 \n\032ID_S2C_"
    "RESPONSE_QUERYJUDGE\020\214\230\001B\002H\001", 1907);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "judgemessage_pb.hxx", &protobuf_RegisterTypes);
  #endif
  CMessageOpenJudgeNotice::default_instance_ = new CMessageOpenJudgeNotice();
  CMessageCloseJudgeNotice::default_instance_ = new CMessageCloseJudgeNotice();
  CMessageModifySingleJudgeRequest::default_instance_ = new CMessageModifySingleJudgeRequest();
  CMessageModifySingleJudgeResponse::default_instance_ = new CMessageModifySingleJudgeResponse();
  CMessageModifyJudgeListRequest::default_instance_ = new CMessageModifyJudgeListRequest();
  CMessageModifyJudgeListResponse::default_instance_ = new CMessageModifyJudgeListResponse();
  CMessageModifyJudgeNotice::default_instance_ = new CMessageModifyJudgeNotice();
  PBJudgeRecord::default_instance_ = new PBJudgeRecord();
  CMessageQueryJudgeListRequest::default_instance_ = new CMessageQueryJudgeListRequest();
  CMessageQueryJudgeListResponse::default_instance_ = new CMessageQueryJudgeListResponse();
  CMessageUpdateMaxJudgeValueNotice::default_instance_ = new CMessageUpdateMaxJudgeValueNotice();
  CMessageQuerySingleRecordRequest::default_instance_ = new CMessageQuerySingleRecordRequest();
  CMessageQuerySingleRecordResponse::default_instance_ = new CMessageQuerySingleRecordResponse();
  CMessageOpenJudgeNotice::default_instance_->InitAsDefaultInstance();
  CMessageCloseJudgeNotice::default_instance_->InitAsDefaultInstance();
  CMessageModifySingleJudgeRequest::default_instance_->InitAsDefaultInstance();
  CMessageModifySingleJudgeResponse::default_instance_->InitAsDefaultInstance();
  CMessageModifyJudgeListRequest::default_instance_->InitAsDefaultInstance();
  CMessageModifyJudgeListResponse::default_instance_->InitAsDefaultInstance();
  CMessageModifyJudgeNotice::default_instance_->InitAsDefaultInstance();
  PBJudgeRecord::default_instance_->InitAsDefaultInstance();
  CMessageQueryJudgeListRequest::default_instance_->InitAsDefaultInstance();
  CMessageQueryJudgeListResponse::default_instance_->InitAsDefaultInstance();
  CMessageUpdateMaxJudgeValueNotice::default_instance_->InitAsDefaultInstance();
  CMessageQuerySingleRecordRequest::default_instance_->InitAsDefaultInstance();
  CMessageQuerySingleRecordResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_judgemessage_5fpb_2ehxx);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_judgemessage_5fpb_2ehxx {
  StaticDescriptorInitializer_judgemessage_5fpb_2ehxx() {
    protobuf_AddDesc_judgemessage_5fpb_2ehxx();
  }
} static_descriptor_initializer_judgemessage_5fpb_2ehxx_;

const ::google::protobuf::EnumDescriptor* JudgeMessageID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JudgeMessageID_descriptor_;
}
bool JudgeMessageID_IsValid(int value) {
  switch(value) {
    case 19457:
    case 19458:
    case 19459:
    case 19460:
    case 19461:
    case 19462:
    case 19463:
    case 19464:
    case 19465:
    case 19466:
    case 19467:
    case 19468:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::std::string CMessageOpenJudgeNotice::_default_name_;
#ifndef _MSC_VER
const int CMessageOpenJudgeNotice::kTypeFieldNumber;
const int CMessageOpenJudgeNotice::kNameFieldNumber;
const int CMessageOpenJudgeNotice::kCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageOpenJudgeNotice::CMessageOpenJudgeNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageOpenJudgeNotice::InitAsDefaultInstance() {}

CMessageOpenJudgeNotice::CMessageOpenJudgeNotice(const CMessageOpenJudgeNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageOpenJudgeNotice::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageOpenJudgeNotice::~CMessageOpenJudgeNotice() {
  SharedDtor();
}

void CMessageOpenJudgeNotice::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageOpenJudgeNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageOpenJudgeNotice_descriptor_;
}

const CMessageOpenJudgeNotice& CMessageOpenJudgeNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_judgemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageOpenJudgeNotice* CMessageOpenJudgeNotice::default_instance_ = NULL;

CMessageOpenJudgeNotice* CMessageOpenJudgeNotice::New() const {
  return new CMessageOpenJudgeNotice;
}

void CMessageOpenJudgeNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageOpenJudgeNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }
      
      // optional string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(24)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageOpenJudgeNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageOpenJudgeNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->type(), output);
  }
  
  // optional string Name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->name(), output);
  }
  
  // optional uint32 CharID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->charid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageOpenJudgeNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Type = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional string Name = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->name(), target);
  }
  
  // optional uint32 CharID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->charid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageOpenJudgeNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
    // optional string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional uint32 CharID = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageOpenJudgeNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageOpenJudgeNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageOpenJudgeNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageOpenJudgeNotice::MergeFrom(const CMessageOpenJudgeNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type(from.type());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageOpenJudgeNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageOpenJudgeNotice::CopyFrom(const CMessageOpenJudgeNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageOpenJudgeNotice::Swap(CMessageOpenJudgeNotice* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageOpenJudgeNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageOpenJudgeNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageOpenJudgeNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageOpenJudgeNotice_reflection_;
}

// ===================================================================

const ::std::string CMessageCloseJudgeNotice::_default_name_;
#ifndef _MSC_VER
const int CMessageCloseJudgeNotice::kTypeFieldNumber;
const int CMessageCloseJudgeNotice::kNameFieldNumber;
const int CMessageCloseJudgeNotice::kCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageCloseJudgeNotice::CMessageCloseJudgeNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCloseJudgeNotice::InitAsDefaultInstance() {}

CMessageCloseJudgeNotice::CMessageCloseJudgeNotice(const CMessageCloseJudgeNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCloseJudgeNotice::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCloseJudgeNotice::~CMessageCloseJudgeNotice() {
  SharedDtor();
}

void CMessageCloseJudgeNotice::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCloseJudgeNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCloseJudgeNotice_descriptor_;
}

const CMessageCloseJudgeNotice& CMessageCloseJudgeNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_judgemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCloseJudgeNotice* CMessageCloseJudgeNotice::default_instance_ = NULL;

CMessageCloseJudgeNotice* CMessageCloseJudgeNotice::New() const {
  return new CMessageCloseJudgeNotice;
}

void CMessageCloseJudgeNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCloseJudgeNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }
      
      // optional string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(24)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCloseJudgeNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCloseJudgeNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->type(), output);
  }
  
  // optional string Name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->name(), output);
  }
  
  // optional uint32 CharID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->charid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCloseJudgeNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Type = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional string Name = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->name(), target);
  }
  
  // optional uint32 CharID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->charid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCloseJudgeNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
    // optional string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional uint32 CharID = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCloseJudgeNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCloseJudgeNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCloseJudgeNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCloseJudgeNotice::MergeFrom(const CMessageCloseJudgeNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type(from.type());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCloseJudgeNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCloseJudgeNotice::CopyFrom(const CMessageCloseJudgeNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCloseJudgeNotice::Swap(CMessageCloseJudgeNotice* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCloseJudgeNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCloseJudgeNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCloseJudgeNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCloseJudgeNotice_reflection_;
}

// ===================================================================

const ::std::string CMessageModifySingleJudgeRequest::_default_desname_;
#ifndef _MSC_VER
const int CMessageModifySingleJudgeRequest::kTypeFieldNumber;
const int CMessageModifySingleJudgeRequest::kSrcCharIDFieldNumber;
const int CMessageModifySingleJudgeRequest::kDesNameFieldNumber;
const int CMessageModifySingleJudgeRequest::kValueFieldNumber;
#endif  // !_MSC_VER

CMessageModifySingleJudgeRequest::CMessageModifySingleJudgeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageModifySingleJudgeRequest::InitAsDefaultInstance() {}

CMessageModifySingleJudgeRequest::CMessageModifySingleJudgeRequest(const CMessageModifySingleJudgeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageModifySingleJudgeRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  srccharid_ = 0u;
  desname_ = const_cast< ::std::string*>(&_default_desname_);
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageModifySingleJudgeRequest::~CMessageModifySingleJudgeRequest() {
  SharedDtor();
}

void CMessageModifySingleJudgeRequest::SharedDtor() {
  if (desname_ != &_default_desname_) {
    delete desname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageModifySingleJudgeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageModifySingleJudgeRequest_descriptor_;
}

const CMessageModifySingleJudgeRequest& CMessageModifySingleJudgeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_judgemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageModifySingleJudgeRequest* CMessageModifySingleJudgeRequest::default_instance_ = NULL;

CMessageModifySingleJudgeRequest* CMessageModifySingleJudgeRequest::New() const {
  return new CMessageModifySingleJudgeRequest;
}

void CMessageModifySingleJudgeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    srccharid_ = 0u;
    if (_has_bit(2)) {
      if (desname_ != &_default_desname_) {
        desname_->clear();
      }
    }
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageModifySingleJudgeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_SrcCharID;
        break;
      }
      
      // optional uint32 SrcCharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SrcCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srccharid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_DesName;
        break;
      }
      
      // optional string DesName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_DesName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_desname()));
        if (input->ExpectTag(32)) goto parse_Value;
        break;
      }
      
      // optional uint32 Value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Value:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &value_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageModifySingleJudgeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageModifySingleJudgeRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->type(), output);
  }
  
  // optional uint32 SrcCharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->srccharid(), output);
  }
  
  // optional string DesName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->desname(), output);
  }
  
  // optional uint32 Value = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageModifySingleJudgeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Type = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional uint32 SrcCharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->srccharid(), target);
  }
  
  // optional string DesName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->desname(), target);
  }
  
  // optional uint32 Value = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageModifySingleJudgeRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
    // optional uint32 SrcCharID = 2;
    if (has_srccharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srccharid());
    }
    
    // optional string DesName = 3;
    if (has_desname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->desname());
    }
    
    // optional uint32 Value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageModifySingleJudgeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageModifySingleJudgeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageModifySingleJudgeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageModifySingleJudgeRequest::MergeFrom(const CMessageModifySingleJudgeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type(from.type());
    }
    if (from._has_bit(1)) {
      set_srccharid(from.srccharid());
    }
    if (from._has_bit(2)) {
      set_desname(from.desname());
    }
    if (from._has_bit(3)) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageModifySingleJudgeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageModifySingleJudgeRequest::CopyFrom(const CMessageModifySingleJudgeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageModifySingleJudgeRequest::Swap(CMessageModifySingleJudgeRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(srccharid_, other->srccharid_);
    std::swap(desname_, other->desname_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageModifySingleJudgeRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageModifySingleJudgeRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageModifySingleJudgeRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageModifySingleJudgeRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageModifySingleJudgeResponse::_default_desname_;
#ifndef _MSC_VER
const int CMessageModifySingleJudgeResponse::kRtnCodeFieldNumber;
const int CMessageModifySingleJudgeResponse::kTypeFieldNumber;
const int CMessageModifySingleJudgeResponse::kDesNameFieldNumber;
const int CMessageModifySingleJudgeResponse::kDesCharIDFieldNumber;
const int CMessageModifySingleJudgeResponse::kValueFieldNumber;
const int CMessageModifySingleJudgeResponse::kFaceFieldNumber;
const int CMessageModifySingleJudgeResponse::kSexFieldNumber;
#endif  // !_MSC_VER

CMessageModifySingleJudgeResponse::CMessageModifySingleJudgeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageModifySingleJudgeResponse::InitAsDefaultInstance() {}

CMessageModifySingleJudgeResponse::CMessageModifySingleJudgeResponse(const CMessageModifySingleJudgeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageModifySingleJudgeResponse::SharedCtor() {
  _cached_size_ = 0;
  rtncode_ = 0u;
  type_ = 0u;
  desname_ = const_cast< ::std::string*>(&_default_desname_);
  descharid_ = 0u;
  value_ = 0u;
  face_ = 0u;
  sex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageModifySingleJudgeResponse::~CMessageModifySingleJudgeResponse() {
  SharedDtor();
}

void CMessageModifySingleJudgeResponse::SharedDtor() {
  if (desname_ != &_default_desname_) {
    delete desname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageModifySingleJudgeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageModifySingleJudgeResponse_descriptor_;
}

const CMessageModifySingleJudgeResponse& CMessageModifySingleJudgeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_judgemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageModifySingleJudgeResponse* CMessageModifySingleJudgeResponse::default_instance_ = NULL;

CMessageModifySingleJudgeResponse* CMessageModifySingleJudgeResponse::New() const {
  return new CMessageModifySingleJudgeResponse;
}

void CMessageModifySingleJudgeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rtncode_ = 0u;
    type_ = 0u;
    if (_has_bit(2)) {
      if (desname_ != &_default_desname_) {
        desname_->clear();
      }
    }
    descharid_ = 0u;
    value_ = 0u;
    face_ = 0u;
    sex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageModifySingleJudgeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RtnCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rtncode_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }
      
      // optional uint32 Type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Type:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_DesName;
        break;
      }
      
      // optional string DesName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_DesName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_desname()));
        if (input->ExpectTag(32)) goto parse_DesCharID;
        break;
      }
      
      // optional uint32 DesCharID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DesCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &descharid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Value;
        break;
      }
      
      // optional uint32 Value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Value:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &value_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Face;
        break;
      }
      
      // optional uint32 Face = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Face:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &face_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_Sex;
        break;
      }
      
      // optional uint32 Sex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Sex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sex_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageModifySingleJudgeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageModifySingleJudgeResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RtnCode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->rtncode(), output);
  }
  
  // optional uint32 Type = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->type(), output);
  }
  
  // optional string DesName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->desname(), output);
  }
  
  // optional uint32 DesCharID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->descharid(), output);
  }
  
  // optional uint32 Value = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->value(), output);
  }
  
  // optional uint32 Face = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->face(), output);
  }
  
  // optional uint32 Sex = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->sex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageModifySingleJudgeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RtnCode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->rtncode(), target);
  }
  
  // optional uint32 Type = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->type(), target);
  }
  
  // optional string DesName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->desname(), target);
  }
  
  // optional uint32 DesCharID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->descharid(), target);
  }
  
  // optional uint32 Value = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->value(), target);
  }
  
  // optional uint32 Face = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->face(), target);
  }
  
  // optional uint32 Sex = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->sex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageModifySingleJudgeResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RtnCode = 1;
    if (has_rtncode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rtncode());
    }
    
    // optional uint32 Type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
    // optional string DesName = 3;
    if (has_desname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->desname());
    }
    
    // optional uint32 DesCharID = 4;
    if (has_descharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->descharid());
    }
    
    // optional uint32 Value = 5;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->value());
    }
    
    // optional uint32 Face = 6;
    if (has_face()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->face());
    }
    
    // optional uint32 Sex = 7;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageModifySingleJudgeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageModifySingleJudgeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageModifySingleJudgeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageModifySingleJudgeResponse::MergeFrom(const CMessageModifySingleJudgeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_rtncode(from.rtncode());
    }
    if (from._has_bit(1)) {
      set_type(from.type());
    }
    if (from._has_bit(2)) {
      set_desname(from.desname());
    }
    if (from._has_bit(3)) {
      set_descharid(from.descharid());
    }
    if (from._has_bit(4)) {
      set_value(from.value());
    }
    if (from._has_bit(5)) {
      set_face(from.face());
    }
    if (from._has_bit(6)) {
      set_sex(from.sex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageModifySingleJudgeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageModifySingleJudgeResponse::CopyFrom(const CMessageModifySingleJudgeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageModifySingleJudgeResponse::Swap(CMessageModifySingleJudgeResponse* other) {
  if (other != this) {
    std::swap(rtncode_, other->rtncode_);
    std::swap(type_, other->type_);
    std::swap(desname_, other->desname_);
    std::swap(descharid_, other->descharid_);
    std::swap(value_, other->value_);
    std::swap(face_, other->face_);
    std::swap(sex_, other->sex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageModifySingleJudgeResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageModifySingleJudgeResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageModifySingleJudgeResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageModifySingleJudgeResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageModifyJudgeListRequest::kTypeFieldNumber;
const int CMessageModifyJudgeListRequest::kSrcCharIDFieldNumber;
const int CMessageModifyJudgeListRequest::kDataFieldNumber;
#endif  // !_MSC_VER

CMessageModifyJudgeListRequest::CMessageModifyJudgeListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageModifyJudgeListRequest::InitAsDefaultInstance() {}

CMessageModifyJudgeListRequest::CMessageModifyJudgeListRequest(const CMessageModifyJudgeListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageModifyJudgeListRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  srccharid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageModifyJudgeListRequest::~CMessageModifyJudgeListRequest() {
  SharedDtor();
}

void CMessageModifyJudgeListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageModifyJudgeListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageModifyJudgeListRequest_descriptor_;
}

const CMessageModifyJudgeListRequest& CMessageModifyJudgeListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_judgemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageModifyJudgeListRequest* CMessageModifyJudgeListRequest::default_instance_ = NULL;

CMessageModifyJudgeListRequest* CMessageModifyJudgeListRequest::New() const {
  return new CMessageModifyJudgeListRequest;
}

void CMessageModifyJudgeListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    srccharid_ = 0u;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageModifyJudgeListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_SrcCharID;
        break;
      }
      
      // optional uint32 SrcCharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SrcCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srccharid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_Data;
        break;
      }
      
      // repeated .PBJudgeRecord Data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Data:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_data()));
        if (input->ExpectTag(26)) goto parse_Data;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageModifyJudgeListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageModifyJudgeListRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->type(), output);
  }
  
  // optional uint32 SrcCharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->srccharid(), output);
  }
  
  // repeated .PBJudgeRecord Data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->data(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageModifyJudgeListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Type = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional uint32 SrcCharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->srccharid(), target);
  }
  
  // repeated .PBJudgeRecord Data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->data(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageModifyJudgeListRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
    // optional uint32 SrcCharID = 2;
    if (has_srccharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srccharid());
    }
    
  }
  // repeated .PBJudgeRecord Data = 3;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageModifyJudgeListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageModifyJudgeListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageModifyJudgeListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageModifyJudgeListRequest::MergeFrom(const CMessageModifyJudgeListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type(from.type());
    }
    if (from._has_bit(1)) {
      set_srccharid(from.srccharid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageModifyJudgeListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageModifyJudgeListRequest::CopyFrom(const CMessageModifyJudgeListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageModifyJudgeListRequest::Swap(CMessageModifyJudgeListRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(srccharid_, other->srccharid_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageModifyJudgeListRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageModifyJudgeListRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageModifyJudgeListRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageModifyJudgeListRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageModifyJudgeListResponse::kRtnCodeFieldNumber;
const int CMessageModifyJudgeListResponse::kTypeFieldNumber;
#endif  // !_MSC_VER

CMessageModifyJudgeListResponse::CMessageModifyJudgeListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageModifyJudgeListResponse::InitAsDefaultInstance() {}

CMessageModifyJudgeListResponse::CMessageModifyJudgeListResponse(const CMessageModifyJudgeListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageModifyJudgeListResponse::SharedCtor() {
  _cached_size_ = 0;
  rtncode_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageModifyJudgeListResponse::~CMessageModifyJudgeListResponse() {
  SharedDtor();
}

void CMessageModifyJudgeListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageModifyJudgeListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageModifyJudgeListResponse_descriptor_;
}

const CMessageModifyJudgeListResponse& CMessageModifyJudgeListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_judgemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageModifyJudgeListResponse* CMessageModifyJudgeListResponse::default_instance_ = NULL;

CMessageModifyJudgeListResponse* CMessageModifyJudgeListResponse::New() const {
  return new CMessageModifyJudgeListResponse;
}

void CMessageModifyJudgeListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rtncode_ = 0u;
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageModifyJudgeListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RtnCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rtncode_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }
      
      // optional uint32 Type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Type:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageModifyJudgeListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageModifyJudgeListResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RtnCode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->rtncode(), output);
  }
  
  // optional uint32 Type = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageModifyJudgeListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RtnCode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->rtncode(), target);
  }
  
  // optional uint32 Type = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageModifyJudgeListResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RtnCode = 1;
    if (has_rtncode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rtncode());
    }
    
    // optional uint32 Type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageModifyJudgeListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageModifyJudgeListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageModifyJudgeListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageModifyJudgeListResponse::MergeFrom(const CMessageModifyJudgeListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_rtncode(from.rtncode());
    }
    if (from._has_bit(1)) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageModifyJudgeListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageModifyJudgeListResponse::CopyFrom(const CMessageModifyJudgeListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageModifyJudgeListResponse::Swap(CMessageModifyJudgeListResponse* other) {
  if (other != this) {
    std::swap(rtncode_, other->rtncode_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageModifyJudgeListResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageModifyJudgeListResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageModifyJudgeListResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageModifyJudgeListResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageModifyJudgeNotice::_default_name_;
#ifndef _MSC_VER
const int CMessageModifyJudgeNotice::kTypeFieldNumber;
const int CMessageModifyJudgeNotice::kNameFieldNumber;
const int CMessageModifyJudgeNotice::kCharIDFieldNumber;
const int CMessageModifyJudgeNotice::kValueFieldNumber;
const int CMessageModifyJudgeNotice::kFaceFieldNumber;
const int CMessageModifyJudgeNotice::kSexFieldNumber;
const int CMessageModifyJudgeNotice::kIsAddFieldNumber;
#endif  // !_MSC_VER

CMessageModifyJudgeNotice::CMessageModifyJudgeNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageModifyJudgeNotice::InitAsDefaultInstance() {}

CMessageModifyJudgeNotice::CMessageModifyJudgeNotice(const CMessageModifyJudgeNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageModifyJudgeNotice::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  charid_ = 0u;
  value_ = 0u;
  face_ = 0u;
  sex_ = 0u;
  isadd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageModifyJudgeNotice::~CMessageModifyJudgeNotice() {
  SharedDtor();
}

void CMessageModifyJudgeNotice::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageModifyJudgeNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageModifyJudgeNotice_descriptor_;
}

const CMessageModifyJudgeNotice& CMessageModifyJudgeNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_judgemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageModifyJudgeNotice* CMessageModifyJudgeNotice::default_instance_ = NULL;

CMessageModifyJudgeNotice* CMessageModifyJudgeNotice::New() const {
  return new CMessageModifyJudgeNotice;
}

void CMessageModifyJudgeNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    charid_ = 0u;
    value_ = 0u;
    face_ = 0u;
    sex_ = 0u;
    isadd_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageModifyJudgeNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }
      
      // optional string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(24)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Value;
        break;
      }
      
      // optional uint32 Value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Value:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &value_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Face;
        break;
      }
      
      // optional uint32 Face = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Face:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &face_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Sex;
        break;
      }
      
      // optional uint32 Sex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Sex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sex_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_IsAdd;
        break;
      }
      
      // optional uint32 IsAdd = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IsAdd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &isadd_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageModifyJudgeNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageModifyJudgeNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->type(), output);
  }
  
  // optional string Name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->name(), output);
  }
  
  // optional uint32 CharID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->charid(), output);
  }
  
  // optional uint32 Value = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->value(), output);
  }
  
  // optional uint32 Face = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->face(), output);
  }
  
  // optional uint32 Sex = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->sex(), output);
  }
  
  // optional uint32 IsAdd = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->isadd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageModifyJudgeNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Type = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional string Name = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->name(), target);
  }
  
  // optional uint32 CharID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->charid(), target);
  }
  
  // optional uint32 Value = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->value(), target);
  }
  
  // optional uint32 Face = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->face(), target);
  }
  
  // optional uint32 Sex = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->sex(), target);
  }
  
  // optional uint32 IsAdd = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->isadd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageModifyJudgeNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
    // optional string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional uint32 CharID = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 Value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->value());
    }
    
    // optional uint32 Face = 5;
    if (has_face()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->face());
    }
    
    // optional uint32 Sex = 6;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sex());
    }
    
    // optional uint32 IsAdd = 7;
    if (has_isadd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->isadd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageModifyJudgeNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageModifyJudgeNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageModifyJudgeNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageModifyJudgeNotice::MergeFrom(const CMessageModifyJudgeNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type(from.type());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      set_charid(from.charid());
    }
    if (from._has_bit(3)) {
      set_value(from.value());
    }
    if (from._has_bit(4)) {
      set_face(from.face());
    }
    if (from._has_bit(5)) {
      set_sex(from.sex());
    }
    if (from._has_bit(6)) {
      set_isadd(from.isadd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageModifyJudgeNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageModifyJudgeNotice::CopyFrom(const CMessageModifyJudgeNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageModifyJudgeNotice::Swap(CMessageModifyJudgeNotice* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(charid_, other->charid_);
    std::swap(value_, other->value_);
    std::swap(face_, other->face_);
    std::swap(sex_, other->sex_);
    std::swap(isadd_, other->isadd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageModifyJudgeNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageModifyJudgeNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageModifyJudgeNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageModifyJudgeNotice_reflection_;
}

// ===================================================================

const ::std::string PBJudgeRecord::_default_srcname_;
const ::std::string PBJudgeRecord::_default_desname_;
#ifndef _MSC_VER
const int PBJudgeRecord::kSrcNameFieldNumber;
const int PBJudgeRecord::kSrcCharIDFieldNumber;
const int PBJudgeRecord::kDesNameFieldNumber;
const int PBJudgeRecord::kDesCharIDFieldNumber;
const int PBJudgeRecord::kTypeFieldNumber;
const int PBJudgeRecord::kValueFieldNumber;
const int PBJudgeRecord::kTimeStampFieldNumber;
const int PBJudgeRecord::kFaceFieldNumber;
const int PBJudgeRecord::kSexFieldNumber;
#endif  // !_MSC_VER

PBJudgeRecord::PBJudgeRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBJudgeRecord::InitAsDefaultInstance() {}

PBJudgeRecord::PBJudgeRecord(const PBJudgeRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBJudgeRecord::SharedCtor() {
  _cached_size_ = 0;
  srcname_ = const_cast< ::std::string*>(&_default_srcname_);
  srccharid_ = 0u;
  desname_ = const_cast< ::std::string*>(&_default_desname_);
  descharid_ = 0u;
  type_ = 0u;
  value_ = 0u;
  timestamp_ = 0u;
  face_ = 0u;
  sex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBJudgeRecord::~PBJudgeRecord() {
  SharedDtor();
}

void PBJudgeRecord::SharedDtor() {
  if (srcname_ != &_default_srcname_) {
    delete srcname_;
  }
  if (desname_ != &_default_desname_) {
    delete desname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBJudgeRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBJudgeRecord_descriptor_;
}

const PBJudgeRecord& PBJudgeRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_judgemessage_5fpb_2ehxx();  return *default_instance_;
}

PBJudgeRecord* PBJudgeRecord::default_instance_ = NULL;

PBJudgeRecord* PBJudgeRecord::New() const {
  return new PBJudgeRecord;
}

void PBJudgeRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (srcname_ != &_default_srcname_) {
        srcname_->clear();
      }
    }
    srccharid_ = 0u;
    if (_has_bit(2)) {
      if (desname_ != &_default_desname_) {
        desname_->clear();
      }
    }
    descharid_ = 0u;
    type_ = 0u;
    value_ = 0u;
    timestamp_ = 0u;
    face_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    sex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBJudgeRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string SrcName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_srcname()));
        if (input->ExpectTag(16)) goto parse_SrcCharID;
        break;
      }
      
      // optional uint32 SrcCharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SrcCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srccharid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_DesName;
        break;
      }
      
      // optional string DesName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_DesName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_desname()));
        if (input->ExpectTag(32)) goto parse_DesCharID;
        break;
      }
      
      // optional uint32 DesCharID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DesCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &descharid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Type;
        break;
      }
      
      // optional uint32 Type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Type:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Value;
        break;
      }
      
      // optional uint32 Value = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Value:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &value_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_TimeStamp;
        break;
      }
      
      // optional uint32 TimeStamp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TimeStamp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &timestamp_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_Face;
        break;
      }
      
      // optional uint32 Face = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Face:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &face_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_Sex;
        break;
      }
      
      // optional uint32 Sex = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Sex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sex_));
        _set_bit(8);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBJudgeRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBJudgeRecord::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string SrcName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->srcname(), output);
  }
  
  // optional uint32 SrcCharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->srccharid(), output);
  }
  
  // optional string DesName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->desname(), output);
  }
  
  // optional uint32 DesCharID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->descharid(), output);
  }
  
  // optional uint32 Type = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->type(), output);
  }
  
  // optional uint32 Value = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->value(), output);
  }
  
  // optional uint32 TimeStamp = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->timestamp(), output);
  }
  
  // optional uint32 Face = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->face(), output);
  }
  
  // optional uint32 Sex = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->sex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBJudgeRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string SrcName = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->srcname(), target);
  }
  
  // optional uint32 SrcCharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->srccharid(), target);
  }
  
  // optional string DesName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->desname(), target);
  }
  
  // optional uint32 DesCharID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->descharid(), target);
  }
  
  // optional uint32 Type = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->type(), target);
  }
  
  // optional uint32 Value = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->value(), target);
  }
  
  // optional uint32 TimeStamp = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->timestamp(), target);
  }
  
  // optional uint32 Face = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->face(), target);
  }
  
  // optional uint32 Sex = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->sex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBJudgeRecord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string SrcName = 1;
    if (has_srcname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->srcname());
    }
    
    // optional uint32 SrcCharID = 2;
    if (has_srccharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srccharid());
    }
    
    // optional string DesName = 3;
    if (has_desname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->desname());
    }
    
    // optional uint32 DesCharID = 4;
    if (has_descharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->descharid());
    }
    
    // optional uint32 Type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
    // optional uint32 Value = 6;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->value());
    }
    
    // optional uint32 TimeStamp = 7;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->timestamp());
    }
    
    // optional uint32 Face = 8;
    if (has_face()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->face());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 Sex = 9;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBJudgeRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBJudgeRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBJudgeRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBJudgeRecord::MergeFrom(const PBJudgeRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_srcname(from.srcname());
    }
    if (from._has_bit(1)) {
      set_srccharid(from.srccharid());
    }
    if (from._has_bit(2)) {
      set_desname(from.desname());
    }
    if (from._has_bit(3)) {
      set_descharid(from.descharid());
    }
    if (from._has_bit(4)) {
      set_type(from.type());
    }
    if (from._has_bit(5)) {
      set_value(from.value());
    }
    if (from._has_bit(6)) {
      set_timestamp(from.timestamp());
    }
    if (from._has_bit(7)) {
      set_face(from.face());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_sex(from.sex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBJudgeRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBJudgeRecord::CopyFrom(const PBJudgeRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBJudgeRecord::Swap(PBJudgeRecord* other) {
  if (other != this) {
    std::swap(srcname_, other->srcname_);
    std::swap(srccharid_, other->srccharid_);
    std::swap(desname_, other->desname_);
    std::swap(descharid_, other->descharid_);
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(face_, other->face_);
    std::swap(sex_, other->sex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBJudgeRecord::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBJudgeRecord::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBJudgeRecord::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBJudgeRecord_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageQueryJudgeListRequest::kCharIDFieldNumber;
const int CMessageQueryJudgeListRequest::kConditionFieldNumber;
const int CMessageQueryJudgeListRequest::kActionFieldNumber;
#endif  // !_MSC_VER

CMessageQueryJudgeListRequest::CMessageQueryJudgeListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageQueryJudgeListRequest::InitAsDefaultInstance() {}

CMessageQueryJudgeListRequest::CMessageQueryJudgeListRequest(const CMessageQueryJudgeListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageQueryJudgeListRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  condition_ = 0u;
  action_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageQueryJudgeListRequest::~CMessageQueryJudgeListRequest() {
  SharedDtor();
}

void CMessageQueryJudgeListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageQueryJudgeListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryJudgeListRequest_descriptor_;
}

const CMessageQueryJudgeListRequest& CMessageQueryJudgeListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_judgemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageQueryJudgeListRequest* CMessageQueryJudgeListRequest::default_instance_ = NULL;

CMessageQueryJudgeListRequest* CMessageQueryJudgeListRequest::New() const {
  return new CMessageQueryJudgeListRequest;
}

void CMessageQueryJudgeListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    condition_ = 0u;
    action_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageQueryJudgeListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Condition;
        break;
      }
      
      // optional uint32 Condition = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Condition:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &condition_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Action;
        break;
      }
      
      // optional uint32 Action = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Action:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &action_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageQueryJudgeListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageQueryJudgeListRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 Condition = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->condition(), output);
  }
  
  // optional uint32 Action = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->action(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageQueryJudgeListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 Condition = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->condition(), target);
  }
  
  // optional uint32 Action = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->action(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageQueryJudgeListRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 Condition = 2;
    if (has_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->condition());
    }
    
    // optional uint32 Action = 3;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->action());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageQueryJudgeListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageQueryJudgeListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageQueryJudgeListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageQueryJudgeListRequest::MergeFrom(const CMessageQueryJudgeListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_condition(from.condition());
    }
    if (from._has_bit(2)) {
      set_action(from.action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageQueryJudgeListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryJudgeListRequest::CopyFrom(const CMessageQueryJudgeListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryJudgeListRequest::Swap(CMessageQueryJudgeListRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(condition_, other->condition_);
    std::swap(action_, other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageQueryJudgeListRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageQueryJudgeListRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageQueryJudgeListRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryJudgeListRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageQueryJudgeListResponse::kFavorJudgeOtherListFieldNumber;
const int CMessageQueryJudgeListResponse::kBadJudgeOtherListFieldNumber;
const int CMessageQueryJudgeListResponse::kFavorRecJudgeListFieldNumber;
const int CMessageQueryJudgeListResponse::kBadRecJudgeListFieldNumber;
const int CMessageQueryJudgeListResponse::kFavorTotalFieldNumber;
const int CMessageQueryJudgeListResponse::kBadTotalFieldNumber;
#endif  // !_MSC_VER

CMessageQueryJudgeListResponse::CMessageQueryJudgeListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageQueryJudgeListResponse::InitAsDefaultInstance() {}

CMessageQueryJudgeListResponse::CMessageQueryJudgeListResponse(const CMessageQueryJudgeListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageQueryJudgeListResponse::SharedCtor() {
  _cached_size_ = 0;
  favortotal_ = 0u;
  badtotal_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageQueryJudgeListResponse::~CMessageQueryJudgeListResponse() {
  SharedDtor();
}

void CMessageQueryJudgeListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageQueryJudgeListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryJudgeListResponse_descriptor_;
}

const CMessageQueryJudgeListResponse& CMessageQueryJudgeListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_judgemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageQueryJudgeListResponse* CMessageQueryJudgeListResponse::default_instance_ = NULL;

CMessageQueryJudgeListResponse* CMessageQueryJudgeListResponse::New() const {
  return new CMessageQueryJudgeListResponse;
}

void CMessageQueryJudgeListResponse::Clear() {
  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    favortotal_ = 0u;
    badtotal_ = 0u;
  }
  favorjudgeotherlist_.Clear();
  badjudgeotherlist_.Clear();
  favorrecjudgelist_.Clear();
  badrecjudgelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageQueryJudgeListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .PBJudgeRecord FavorJudgeOtherList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FavorJudgeOtherList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_favorjudgeotherlist()));
        if (input->ExpectTag(10)) goto parse_FavorJudgeOtherList;
        if (input->ExpectTag(18)) goto parse_BadJudgeOtherList;
        break;
      }
      
      // repeated .PBJudgeRecord BadJudgeOtherList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_BadJudgeOtherList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_badjudgeotherlist()));
        if (input->ExpectTag(18)) goto parse_BadJudgeOtherList;
        if (input->ExpectTag(26)) goto parse_FavorRecJudgeList;
        break;
      }
      
      // repeated .PBJudgeRecord FavorRecJudgeList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FavorRecJudgeList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_favorrecjudgelist()));
        if (input->ExpectTag(26)) goto parse_FavorRecJudgeList;
        if (input->ExpectTag(34)) goto parse_BadRecJudgeList;
        break;
      }
      
      // repeated .PBJudgeRecord BadRecJudgeList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_BadRecJudgeList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_badrecjudgelist()));
        if (input->ExpectTag(34)) goto parse_BadRecJudgeList;
        if (input->ExpectTag(40)) goto parse_FavorTotal;
        break;
      }
      
      // optional uint32 FavorTotal = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FavorTotal:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &favortotal_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_BadTotal;
        break;
      }
      
      // optional uint32 BadTotal = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BadTotal:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &badtotal_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageQueryJudgeListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageQueryJudgeListResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .PBJudgeRecord FavorJudgeOtherList = 1;
  for (int i = 0; i < this->favorjudgeotherlist_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->favorjudgeotherlist(i), output);
  }
  
  // repeated .PBJudgeRecord BadJudgeOtherList = 2;
  for (int i = 0; i < this->badjudgeotherlist_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->badjudgeotherlist(i), output);
  }
  
  // repeated .PBJudgeRecord FavorRecJudgeList = 3;
  for (int i = 0; i < this->favorrecjudgelist_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->favorrecjudgelist(i), output);
  }
  
  // repeated .PBJudgeRecord BadRecJudgeList = 4;
  for (int i = 0; i < this->badrecjudgelist_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->badrecjudgelist(i), output);
  }
  
  // optional uint32 FavorTotal = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->favortotal(), output);
  }
  
  // optional uint32 BadTotal = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->badtotal(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageQueryJudgeListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBJudgeRecord FavorJudgeOtherList = 1;
  for (int i = 0; i < this->favorjudgeotherlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->favorjudgeotherlist(i), target);
  }
  
  // repeated .PBJudgeRecord BadJudgeOtherList = 2;
  for (int i = 0; i < this->badjudgeotherlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->badjudgeotherlist(i), target);
  }
  
  // repeated .PBJudgeRecord FavorRecJudgeList = 3;
  for (int i = 0; i < this->favorrecjudgelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->favorrecjudgelist(i), target);
  }
  
  // repeated .PBJudgeRecord BadRecJudgeList = 4;
  for (int i = 0; i < this->badrecjudgelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(4, this->badrecjudgelist(i), target);
  }
  
  // optional uint32 FavorTotal = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->favortotal(), target);
  }
  
  // optional uint32 BadTotal = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->badtotal(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageQueryJudgeListResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    // optional uint32 FavorTotal = 5;
    if (has_favortotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->favortotal());
    }
    
    // optional uint32 BadTotal = 6;
    if (has_badtotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->badtotal());
    }
    
  }
  // repeated .PBJudgeRecord FavorJudgeOtherList = 1;
  total_size += 1 * this->favorjudgeotherlist_size();
  for (int i = 0; i < this->favorjudgeotherlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->favorjudgeotherlist(i));
  }
  
  // repeated .PBJudgeRecord BadJudgeOtherList = 2;
  total_size += 1 * this->badjudgeotherlist_size();
  for (int i = 0; i < this->badjudgeotherlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->badjudgeotherlist(i));
  }
  
  // repeated .PBJudgeRecord FavorRecJudgeList = 3;
  total_size += 1 * this->favorrecjudgelist_size();
  for (int i = 0; i < this->favorrecjudgelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->favorrecjudgelist(i));
  }
  
  // repeated .PBJudgeRecord BadRecJudgeList = 4;
  total_size += 1 * this->badrecjudgelist_size();
  for (int i = 0; i < this->badrecjudgelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->badrecjudgelist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageQueryJudgeListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageQueryJudgeListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageQueryJudgeListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageQueryJudgeListResponse::MergeFrom(const CMessageQueryJudgeListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  favorjudgeotherlist_.MergeFrom(from.favorjudgeotherlist_);
  badjudgeotherlist_.MergeFrom(from.badjudgeotherlist_);
  favorrecjudgelist_.MergeFrom(from.favorrecjudgelist_);
  badrecjudgelist_.MergeFrom(from.badrecjudgelist_);
  if (from._has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (from._has_bit(4)) {
      set_favortotal(from.favortotal());
    }
    if (from._has_bit(5)) {
      set_badtotal(from.badtotal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageQueryJudgeListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryJudgeListResponse::CopyFrom(const CMessageQueryJudgeListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryJudgeListResponse::Swap(CMessageQueryJudgeListResponse* other) {
  if (other != this) {
    favorjudgeotherlist_.Swap(&other->favorjudgeotherlist_);
    badjudgeotherlist_.Swap(&other->badjudgeotherlist_);
    favorrecjudgelist_.Swap(&other->favorrecjudgelist_);
    badrecjudgelist_.Swap(&other->badrecjudgelist_);
    std::swap(favortotal_, other->favortotal_);
    std::swap(badtotal_, other->badtotal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageQueryJudgeListResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageQueryJudgeListResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageQueryJudgeListResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryJudgeListResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageUpdateMaxJudgeValueNotice::kFavorTotalFieldNumber;
const int CMessageUpdateMaxJudgeValueNotice::kBadTotalFieldNumber;
#endif  // !_MSC_VER

CMessageUpdateMaxJudgeValueNotice::CMessageUpdateMaxJudgeValueNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUpdateMaxJudgeValueNotice::InitAsDefaultInstance() {}

CMessageUpdateMaxJudgeValueNotice::CMessageUpdateMaxJudgeValueNotice(const CMessageUpdateMaxJudgeValueNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUpdateMaxJudgeValueNotice::SharedCtor() {
  _cached_size_ = 0;
  favortotal_ = 0u;
  badtotal_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUpdateMaxJudgeValueNotice::~CMessageUpdateMaxJudgeValueNotice() {
  SharedDtor();
}

void CMessageUpdateMaxJudgeValueNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageUpdateMaxJudgeValueNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUpdateMaxJudgeValueNotice_descriptor_;
}

const CMessageUpdateMaxJudgeValueNotice& CMessageUpdateMaxJudgeValueNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_judgemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageUpdateMaxJudgeValueNotice* CMessageUpdateMaxJudgeValueNotice::default_instance_ = NULL;

CMessageUpdateMaxJudgeValueNotice* CMessageUpdateMaxJudgeValueNotice::New() const {
  return new CMessageUpdateMaxJudgeValueNotice;
}

void CMessageUpdateMaxJudgeValueNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    favortotal_ = 0u;
    badtotal_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUpdateMaxJudgeValueNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 FavorTotal = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &favortotal_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_BadTotal;
        break;
      }
      
      // optional uint32 BadTotal = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BadTotal:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &badtotal_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUpdateMaxJudgeValueNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUpdateMaxJudgeValueNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 FavorTotal = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->favortotal(), output);
  }
  
  // optional uint32 BadTotal = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->badtotal(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUpdateMaxJudgeValueNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 FavorTotal = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->favortotal(), target);
  }
  
  // optional uint32 BadTotal = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->badtotal(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUpdateMaxJudgeValueNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 FavorTotal = 1;
    if (has_favortotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->favortotal());
    }
    
    // optional uint32 BadTotal = 2;
    if (has_badtotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->badtotal());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUpdateMaxJudgeValueNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUpdateMaxJudgeValueNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUpdateMaxJudgeValueNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUpdateMaxJudgeValueNotice::MergeFrom(const CMessageUpdateMaxJudgeValueNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_favortotal(from.favortotal());
    }
    if (from._has_bit(1)) {
      set_badtotal(from.badtotal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUpdateMaxJudgeValueNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUpdateMaxJudgeValueNotice::CopyFrom(const CMessageUpdateMaxJudgeValueNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUpdateMaxJudgeValueNotice::Swap(CMessageUpdateMaxJudgeValueNotice* other) {
  if (other != this) {
    std::swap(favortotal_, other->favortotal_);
    std::swap(badtotal_, other->badtotal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUpdateMaxJudgeValueNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUpdateMaxJudgeValueNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUpdateMaxJudgeValueNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUpdateMaxJudgeValueNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageQuerySingleRecordRequest::kSrcCharIDFieldNumber;
const int CMessageQuerySingleRecordRequest::kDesCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageQuerySingleRecordRequest::CMessageQuerySingleRecordRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageQuerySingleRecordRequest::InitAsDefaultInstance() {}

CMessageQuerySingleRecordRequest::CMessageQuerySingleRecordRequest(const CMessageQuerySingleRecordRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageQuerySingleRecordRequest::SharedCtor() {
  _cached_size_ = 0;
  srccharid_ = 0u;
  descharid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageQuerySingleRecordRequest::~CMessageQuerySingleRecordRequest() {
  SharedDtor();
}

void CMessageQuerySingleRecordRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageQuerySingleRecordRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageQuerySingleRecordRequest_descriptor_;
}

const CMessageQuerySingleRecordRequest& CMessageQuerySingleRecordRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_judgemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageQuerySingleRecordRequest* CMessageQuerySingleRecordRequest::default_instance_ = NULL;

CMessageQuerySingleRecordRequest* CMessageQuerySingleRecordRequest::New() const {
  return new CMessageQuerySingleRecordRequest;
}

void CMessageQuerySingleRecordRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    srccharid_ = 0u;
    descharid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageQuerySingleRecordRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 SrcCharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srccharid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_DesCharID;
        break;
      }
      
      // optional uint32 DesCharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DesCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &descharid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageQuerySingleRecordRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageQuerySingleRecordRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 SrcCharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->srccharid(), output);
  }
  
  // optional uint32 DesCharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->descharid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageQuerySingleRecordRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 SrcCharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->srccharid(), target);
  }
  
  // optional uint32 DesCharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->descharid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageQuerySingleRecordRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SrcCharID = 1;
    if (has_srccharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srccharid());
    }
    
    // optional uint32 DesCharID = 2;
    if (has_descharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->descharid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageQuerySingleRecordRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageQuerySingleRecordRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageQuerySingleRecordRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageQuerySingleRecordRequest::MergeFrom(const CMessageQuerySingleRecordRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_srccharid(from.srccharid());
    }
    if (from._has_bit(1)) {
      set_descharid(from.descharid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageQuerySingleRecordRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQuerySingleRecordRequest::CopyFrom(const CMessageQuerySingleRecordRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQuerySingleRecordRequest::Swap(CMessageQuerySingleRecordRequest* other) {
  if (other != this) {
    std::swap(srccharid_, other->srccharid_);
    std::swap(descharid_, other->descharid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageQuerySingleRecordRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageQuerySingleRecordRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageQuerySingleRecordRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageQuerySingleRecordRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageQuerySingleRecordResponse::kFavorRecordFieldNumber;
const int CMessageQuerySingleRecordResponse::kBadRecordFieldNumber;
#endif  // !_MSC_VER

CMessageQuerySingleRecordResponse::CMessageQuerySingleRecordResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageQuerySingleRecordResponse::InitAsDefaultInstance() {  favorrecord_ = const_cast< ::PBJudgeRecord*>(&::PBJudgeRecord::default_instance());
  badrecord_ = const_cast< ::PBJudgeRecord*>(&::PBJudgeRecord::default_instance());
}

CMessageQuerySingleRecordResponse::CMessageQuerySingleRecordResponse(const CMessageQuerySingleRecordResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageQuerySingleRecordResponse::SharedCtor() {
  _cached_size_ = 0;
  favorrecord_ = NULL;
  badrecord_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageQuerySingleRecordResponse::~CMessageQuerySingleRecordResponse() {
  SharedDtor();
}

void CMessageQuerySingleRecordResponse::SharedDtor() {
  if (this != default_instance_) {
    delete favorrecord_;
    delete badrecord_;
  }
}

const ::google::protobuf::Descriptor* CMessageQuerySingleRecordResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageQuerySingleRecordResponse_descriptor_;
}

const CMessageQuerySingleRecordResponse& CMessageQuerySingleRecordResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_judgemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageQuerySingleRecordResponse* CMessageQuerySingleRecordResponse::default_instance_ = NULL;

CMessageQuerySingleRecordResponse* CMessageQuerySingleRecordResponse::New() const {
  return new CMessageQuerySingleRecordResponse;
}

void CMessageQuerySingleRecordResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (favorrecord_ != NULL) favorrecord_->::PBJudgeRecord::Clear();
    }
    if (_has_bit(1)) {
      if (badrecord_ != NULL) badrecord_->::PBJudgeRecord::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageQuerySingleRecordResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBJudgeRecord FavorRecord = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_favorrecord()));
        if (input->ExpectTag(18)) goto parse_BadRecord;
        break;
      }
      
      // optional .PBJudgeRecord BadRecord = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_BadRecord:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_badrecord()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageQuerySingleRecordResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageQuerySingleRecordResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBJudgeRecord FavorRecord = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->favorrecord(), output);
  }
  
  // optional .PBJudgeRecord BadRecord = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->badrecord(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageQuerySingleRecordResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBJudgeRecord FavorRecord = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->favorrecord(), target);
  }
  
  // optional .PBJudgeRecord BadRecord = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->badrecord(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageQuerySingleRecordResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBJudgeRecord FavorRecord = 1;
    if (has_favorrecord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->favorrecord());
    }
    
    // optional .PBJudgeRecord BadRecord = 2;
    if (has_badrecord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->badrecord());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageQuerySingleRecordResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageQuerySingleRecordResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageQuerySingleRecordResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageQuerySingleRecordResponse::MergeFrom(const CMessageQuerySingleRecordResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_favorrecord()->::PBJudgeRecord::MergeFrom(from.favorrecord());
    }
    if (from._has_bit(1)) {
      mutable_badrecord()->::PBJudgeRecord::MergeFrom(from.badrecord());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageQuerySingleRecordResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQuerySingleRecordResponse::CopyFrom(const CMessageQuerySingleRecordResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQuerySingleRecordResponse::Swap(CMessageQuerySingleRecordResponse* other) {
  if (other != this) {
    std::swap(favorrecord_, other->favorrecord_);
    std::swap(badrecord_, other->badrecord_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageQuerySingleRecordResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageQuerySingleRecordResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageQuerySingleRecordResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageQuerySingleRecordResponse_reflection_;
}
