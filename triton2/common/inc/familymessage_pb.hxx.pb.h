// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_familymessage_5fpb_2ehxx__INCLUDED
#define PROTOBUF_familymessage_5fpb_2ehxx__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "familydbinfo_pb.hxx.pb.h"

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();

class FamilyHead;
class CMessageCreatFamilyRequest;
class CMessageCreatFamilyResponse;
class CMessageInviteMemberRequest;
class CMessageInviteMemberResponse;
class CMessageFamilyInvitedNotify;
class CMessageReplyFamilyInviteRequest;
class CMessageReplyFamilyInviteResponse;
class CMessageApplyFamilyRequest;
class CMessageApplyFamilyResponse;
class CMessageMemberApplyNotify;
class CMessageReplyMemberApplyRequest;
class CMessageReplyMemberApplyResponse;
class CMessageApplyFamilySuccessNotify;
class CMessageFamilyMemberAddedNotify;
class CMessagePostAppointRequest;
class CMessagePostAppointResponse;
class CMessagePostAppointNoify;
class CMessageLeaveFamilyRequest;
class CMessageLeaveFamilyResponse;
class CMessageMemberLeaveFamilyNotify;
class CMessageGetFamilyMemberInfoRequest;
class CMessageGetFamilyMemberInfoResponse;
class CMessageGetFamilyPropertyRequest;
class CMessageGetFamilyPropertyResponse;
class CMessageGetAllFanmilyInfoRequest;
class CMessageGetAllFamilyInfoResponse;
class CMessageGetApplyListRequest;
class CMessageGetApplyListResponse;
class CMessageKickPlayerRequest;
class CMessageKickPlayerResponse;
class CMessageKickPlayerNotify;
class CMessageDisbandFamilyRequest;
class CMessageDisbandFamilyResponse;
class CMessageDisbandFamilyNotify;
class CMessageChangeFamilyNoticeRequest;
class CMessageChangeFamilyNoticeResponse;
class CMessageAppointHeaderRequest;
class CMessageAppointHeaderResponse;
class CMessageChangeHeaderNotify;
class CMessageFamilyPropertyNotify;
class CMessageInviteFamilyResultNotify;
class CMessageClearFamilyApplyRequest;
class CMessageClearFamilyApplyResponse;
class CMessageJoinCorpsNotify;
class CMessageCancelFamilyDisbandRequest;
class CMessageCancelFamilyDisbandResponse;
class CMessageChangeFamilyNoticeNotify;
class CMessageRefreshFamilyInfoRequest;
class CMessageRefreshFamilyInfoResponse;
class CMessageSetFamilyPostRequest;
class CMessageSetFamilyPostResponse;
class CMessageLevelUPFamilyRequest;
class CMessageLevelUPFamilyResponse;
class CMessageContributeFamilyMoneyRequest;
class CMessageContributeFamilyMoneyResponse;
class CMessageObtainFamilyMoneyRequest;
class CMessageObtainFamilyMoneyResponse;
class CMessageSetFamilyPostNotify;
class CMessageLevelUPFamilyNotify;
class CMessageFamilyBidNpcRequest;
class CMessageFamilyBidNpcResponse;
class CMessageMemberSubmitNotify;
class CMessageMemberSubmitRequest;
class CMessageMemberSubmitResponse;
class CMessageAbortNpcRequest;
class CMessageAbortNpcResponse;
class CMessageBidInfoRequest;
class BidResult;
class CMessageBidInfoResponse;
class CMessageFamilySubmitNotify;
class CMessageBattleResultNotify;
class CMessageFamilyPVPStarLevelUPNotify;
class CMessageMakeRoomRequest;
class CMessageMakeRoomResponse;
class CMessageChaRoomRequest;
class CMessageChaRoomResponse;
class CMessageAgreeBattleRequest;
class CMessageAgreeBattleResponse;
class CMessageQueryAllRoomRequest;
class AllRoomInfo;
class CMessageQueryAllRoomResponse;
class CMessageQueryMyRoomRequest;
class MyRoomInfo;
class CMessageQueryMyRoomResponse;
class CMessageQueryMyChaRequest;
class MyChaInfo;
class CMessageQueryMyChaResponse;
class CMessageAbortRoomRequest;
class CMessageAbortRoomResponse;
class CMessageAbortChaRequest;
class CMessageAbortChaResponse;
class CMessageContributeFamilyMoneyNotify;
class CMessageFamilyMoneyChangedNotify;
class CMessageUseFamilyExpCardNotify;
class CMessageStartFamilyBossRequest;
class CMessageMakeRoomNotify;
class CMessageStartFamilyBossResponse;
class CMessageEnterBossReptionRequest;
class CMessageEnterBossReptionResponse;
class CMessageAbortRoomNotify;
class CMessageChaRoomNotify;
class CMessageAbortChaNotify;
class CMessageFamilyGloryChangedNotify;
class CMessageMemberContributeChangedNotify;
class CMessageQueryNpcWelfareRequest;
class CMessageQueryNpcWelfareResponse;
class CMessageGetFamilyMoneyRequest;
class CMessageGetFamilyMoneyResponse;
class CMessageAbortNpcNotify;
class CMessagePreBattleNotify;
class CMessageGetExpCardRequest;
class CMessageGetExpCardResponse;
class CMessageFamilyCanLevelUPNotify;
class CMessageFamilyRepetionScoreNotify;
class GoodItem;
class CMessageGetFamilyGoodsListRequest;
class CMessageGetFamilyGoodsListResponse;
class CMessageGetFamilyExchangeGoodsListRequest;
class CMessageGetFamilyExchangeGoodsListResponse;
class CMessageChangeFamilyGoodsListNotify;
class CMessageChangeFamilyExchangeGoodsListNotify;
class CMessageUseFamilyLeagueItemNotify;
class CMessageGetHomeInfoRequest;
class CMessageGetHomeInfoResponse;
class CMessageUpgradeHomeRequest;
class CMessageUpgradeHomeResponse;
class CMessageFamilyStabilityChangedNotify;

enum FamilyMessageID {
  ID_C2S_REQUEST_CREATFAMILY = 13312,
  ID_S2C_RESPONSE_CREATFAMILY = 13313,
  ID_C2S_REQUEST_INVITEMEMBER = 13314,
  ID_S2C_RESPONSE_INVITEMEMBER = 13315,
  ID_S2C_NOTIY_FAMILYINVITED = 13316,
  ID_C2S_REQUEST_REPLYFAMILYINVITE = 13317,
  ID_S2C_RESPONSE_REPLYFAMILYINVITE = 13318,
  ID_S2C_NOTIFY_INVITERESULT = 13319,
  ID_C2S_REQUEST_FAMILYAPPLY = 13320,
  ID_S2C_RESPONSE_FAMILYAPPLY = 13321,
  ID_S2C_NOTIFY_MEMBERAPPLY = 13322,
  ID_C2S_REQUEST_REPLYMEMBERAPPLY = 13323,
  ID_S2C_RESPONSE_REPLYMEMBERAPPLY = 13324,
  ID_S2C_NOTIFY_FAMILYAPPLYSUCESS = 13325,
  ID_S2C_NOTIFY_FAMILYMEMBERADDED = 13326,
  ID_C2S_REQUEST_POSTAPPOINT = 13327,
  ID_S2C_RESPONSE_POSTAPPOINT = 13328,
  ID_S2C_NOTIFY_POSTAPPOINT = 13329,
  ID_C2S_REQUEST_LEAVEFAMILY = 13330,
  ID_S2C_RESPONSE_LEAVEFAMILY = 13331,
  ID_S2C_NOTIFY_MEMBERLEAVEFAMILY = 13332,
  ID_C2S_REQUEST_GETFAMILYMEMBERINFO = 13333,
  ID_S2C_RESPONSE_GETFAMILYMEMBERINFO = 13334,
  ID_C2S_REQUEST_GETFAMILYPROPERTY = 13335,
  ID_S2C_RESPONSE_FAMILYPROPERTY = 13336,
  ID_C2S_REQUEST_GETALLFAMILYINFO = 13337,
  ID_S2C_RESPONSE_GETALLFAMILYINFO = 13338,
  ID_C2S_REQUEST_GETAPPLYLIST = 13339,
  ID_S2C_RESPONSE_GETAPPLYLIST = 13340,
  ID_C2S_REQUEST_KICKMEMBER = 13341,
  ID_S2C_RESPONSE_KICKMEMBER = 13342,
  ID_S2C_NOTIFY_KICKPLAYER = 13343,
  ID_C2S_REQUEST_DISBANDFAMILY = 13344,
  ID_S2C_RESPONSE_DISBANDFAMILY = 13345,
  ID_S2C_NOTIFY_DISBANDFAMILY = 13346,
  ID_C2S_REQUEST_CHANGENOTICE = 13347,
  ID_S2C_RESPONSE_CHANGENOTICE = 13348,
  ID_C2S_REQUEST_APPOINTHEADER = 13349,
  ID_S2C_RESPONSE_APPOINTHEADER = 13350,
  ID_S2C_NOTIFY_CHANGERHEADER = 13351,
  ID_S2C_NOTIFY_FAMILYPEROPERTY = 13352,
  ID_C2S_REQUEST_CLEARFAMILYAPPLYLIST = 13353,
  ID_S2C_RESPONSE_CLEARFAMILYAPPLYLIST = 13354,
  ID_S2C_NOTIFY_JOINCORPS = 13355,
  ID_C2S_REQUEST_CANCELFAMILYDISBAND = 13356,
  ID_S2C_RESPONSE_CANCELFAMILYDISBAND = 13357,
  ID_S2C_NOTIFY_CHANGEFAMILYNOTICE = 13358,
  ID_C2S_REQUEST_REFRESHFAMILYINFO = 13359,
  ID_S2C_RESPONSE_REFRESHFAMILYINFO = 13360,
  ID_C2S_REQUEST_BIDNPC = 13361,
  ID_S2C_RESPONSE_BIDNPC = 13362,
  ID_S2C_NOTIFY_MEMBERSUBMIT = 13363,
  ID_C2S_REQUEST_MEMBERSUBMIT = 13364,
  ID_S2C_RESPONSE_MEMBERSUBMIT = 13365,
  ID_C2S_REQUEST_ABORTNPC = 13366,
  ID_S2C_RESPONSE_ABORTNPC = 13367,
  ID_C2S_REQUEST_BIDINFO = 13368,
  ID_S2C_RESPONSE_BIDINFO = 13369,
  ID_C2S_REQUEST_SETFAMILYMEMBERPOST = 13370,
  ID_S2C_RESPONSE_SETFAMILYMEMBERPOST = 13371,
  ID_C2S_REQUEST_LEVELUPFAMILY = 13372,
  ID_S2C_RESPONSE_LEVELUPFAMILY = 13373,
  ID_C2S_REQUEST_CONTRIBUTEFAMILYMONEY = 13374,
  ID_S2C_RESPONSE_CONTRIBUTEFAMILYMONEY = 13375,
  ID_C2S_REQUEST_OBTAINFAMILYMONEY = 13376,
  ID_S2C_RESPONSE_OBTAINFAMILYMONEY = 13377,
  ID_S2C_NOTIFY_SETFAMILYPOST = 13378,
  ID_S2C_NOTIFY_LEVELUPFAMILY = 13379,
  ID_S2C_NOTIFY_FAMILYSUBMIT = 13380,
  ID_S2C_NOTIFY_BATTLERESULT = 13381,
  ID_S2C_NOTIFY_FAMILYPVPSTARLEVELUP = 13382,
  ID_C2S_REQUEST_MAKEROOM = 13384,
  ID_S2C_RESPONSE_MAKEROOM = 13385,
  ID_C2S_REQUEST_CHAROOM = 13386,
  ID_S2C_RESPONSE_CHAROOM = 13387,
  ID_C2S_REQUEST_AGREEBATTLE = 13388,
  ID_S2C_RESPONSE_AGREEBATTLE = 13389,
  ID_C2S_REQUEST_QUERYALLROOM = 13390,
  ID_S2C_RESPONSE_QUERYALLROOM = 13391,
  ID_C2S_REQUEST_QUERYMYROOM = 13392,
  ID_S2C_RESPONSE_QUERYMYROOM = 13393,
  ID_C2S_REQUEST_QUERYMYCHA = 13394,
  ID_S2C_RESPONSE_QUERYMYCHA = 13395,
  ID_C2S_REQUEST_ABORTROOM = 13396,
  ID_S2C_RESPONSE_ABORTROOM = 13397,
  ID_C2S_REQUEST_ABORTCHA = 13398,
  ID_S2C_RESPONSE_ABORTCHA = 13399,
  ID_S2C_NOTIFY_CONTRIBUTEFAMILYMONEY = 13400,
  ID_S2C_NOTIFY_FAMILYMONEYCHANGED = 13401,
  ID_S2C_NOTIFY_USEFAMILYEXPCARD = 13402,
  ID_C2S_REQUEST_STARTFAMILYBOSS = 13403,
  ID_S2C_RESPONSE_STARTFAMILYBOSS = 13404,
  ID_C2S_REQUEST_ENTERBOSSREPTION = 13405,
  ID_S2C_RESPONSE_ENTERBOSSREPTION = 13406,
  ID_S2C_NOTIFY_MAKEROOM = 13407,
  ID_S2C_NOTIFY_ABORTROOM = 13408,
  ID_S2C_NOTIFY_CHAROOM = 13409,
  ID_S2C_NOTIFY_ABORTCHA = 13410,
  ID_S2C_NOTIFY_FAMILYGLORYCHANGED = 13411,
  ID_S2C_NOTIFY_MEMBERCONTRIBUTECHANGED = 13412,
  ID_C2S_REQUEST_QUERYNPCWELFARE = 13413,
  ID_S2C_RESPONSE_QUERYNPCWELFARE = 13414,
  ID_C2S_REQUEST_GETFAMILYMONEY = 13415,
  ID_S2C_RESPONSE_GETFAMILYMONEY = 13416,
  ID_S2C_NOTIFY_ABORTNPC = 13417,
  ID_S2C_NOTIFY_PREBATTLE = 13418,
  ID_C2S_REQUEST_GETEXPCARD = 13419,
  ID_S2C_RESPONSE_GETEXPCARD = 13420,
  ID_S2C_NOTIFY_FAMILYCANLEVELUP = 13421,
  ID_S2C_NOTIFY_FAMILYREPETIONSCORE = 13422,
  ID_C2S_REQUEST_GETFAMILYGOODSLIST = 13423,
  ID_S2C_RESPONSE_GETFAMILYGOODSLIST = 13424,
  ID_C2S_REQUEST_GETFAMILYEXCHANGEGOODSLIST = 13425,
  ID_S2C_RESPONSE_GETFAMILYEXCHANGEGOODSLIST = 13426,
  ID_S2C_NOTIFY_CHANGEFAMILYGOODSLIST = 13427,
  ID_S2C_NOTIFY_CHANGEFAMILYEXCHANGEGOODSLIST = 13428,
  ID_S2C_NOTIFY_USEFAMILYLEAGUEITEM = 13429,
  ID_C2S_REQUEST_GETHOMEINFO = 13430,
  ID_S2C_RESPONSE_GETHOMEINFO = 13431,
  ID_C2S_REQUEST_UPGRADEHOME = 13432,
  ID_S2C_RESPONSE_UPGRADEHOME = 13433,
  ID_S2C_NOTIFY_FAMILYSTABILITYCHANGED = 13434
};
const ::google::protobuf::EnumDescriptor* FamilyMessageID_descriptor();
bool FamilyMessageID_IsValid(int value);
const FamilyMessageID FamilyMessageID_MIN = ID_C2S_REQUEST_CREATFAMILY;
const FamilyMessageID FamilyMessageID_MAX = ID_S2C_NOTIFY_FAMILYSTABILITYCHANGED;

inline const ::std::string& FamilyMessageID_Name(FamilyMessageID value) {
  return ::google::protobuf::internal::NameOfEnum(
    FamilyMessageID_descriptor(), value);
}
inline bool FamilyMessageID_Parse(
    const ::std::string& name, FamilyMessageID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FamilyMessageID>(
    FamilyMessageID_descriptor(), name, value);
}
// ===================================================================

class FamilyHead : public ::google::protobuf::Message {
 public:
  FamilyHead();
  virtual ~FamilyHead();
  
  FamilyHead(const FamilyHead& from);
  
  inline FamilyHead& operator=(const FamilyHead& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FamilyHead& default_instance();
  void Swap(FamilyHead* other);
  
  // implements Message ----------------------------------------------
  
  FamilyHead* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FamilyHead& from);
  void MergeFrom(const FamilyHead& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 RoleID = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIDFieldNumber = 1;
  inline ::google::protobuf::uint32 roleid() const;
  inline void set_roleid(::google::protobuf::uint32 value);
  
  // optional uint32 MsgID = 2;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 2;
  inline ::google::protobuf::uint32 msgid() const;
  inline void set_msgid(::google::protobuf::uint32 value);
  
  // optional uint32 EntityID = 3;
  inline bool has_entityid() const;
  inline void clear_entityid();
  static const int kEntityIDFieldNumber = 3;
  inline ::google::protobuf::uint32 entityid() const;
  inline void set_entityid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 roleid_;
  ::google::protobuf::uint32 msgid_;
  ::google::protobuf::uint32 entityid_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static FamilyHead* default_instance_;
};
// -------------------------------------------------------------------

class CMessageCreatFamilyRequest : public ::google::protobuf::Message {
 public:
  CMessageCreatFamilyRequest();
  virtual ~CMessageCreatFamilyRequest();
  
  CMessageCreatFamilyRequest(const CMessageCreatFamilyRequest& from);
  
  inline CMessageCreatFamilyRequest& operator=(const CMessageCreatFamilyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageCreatFamilyRequest& default_instance();
  void Swap(CMessageCreatFamilyRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageCreatFamilyRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageCreatFamilyRequest& from);
  void MergeFrom(const CMessageCreatFamilyRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional string FamilyName = 2;
  inline bool has_familyname() const;
  inline void clear_familyname();
  static const int kFamilyNameFieldNumber = 2;
  inline const ::std::string& familyname() const;
  inline void set_familyname(const ::std::string& value);
  inline void set_familyname(const char* value);
  inline void set_familyname(const char* value, size_t size);
  inline ::std::string* mutable_familyname();
  
  // optional uint32 NpcEntityID = 3;
  inline bool has_npcentityid() const;
  inline void clear_npcentityid();
  static const int kNpcEntityIDFieldNumber = 3;
  inline ::google::protobuf::uint32 npcentityid() const;
  inline void set_npcentityid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::std::string* familyname_;
  static const ::std::string _default_familyname_;
  ::google::protobuf::uint32 npcentityid_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageCreatFamilyRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageCreatFamilyResponse : public ::google::protobuf::Message {
 public:
  CMessageCreatFamilyResponse();
  virtual ~CMessageCreatFamilyResponse();
  
  CMessageCreatFamilyResponse(const CMessageCreatFamilyResponse& from);
  
  inline CMessageCreatFamilyResponse& operator=(const CMessageCreatFamilyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageCreatFamilyResponse& default_instance();
  void Swap(CMessageCreatFamilyResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageCreatFamilyResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageCreatFamilyResponse& from);
  void MergeFrom(const CMessageCreatFamilyResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 ErrCode = 2;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);
  
  // optional uint32 FamilyID = 3;
  inline bool has_familyid() const;
  inline void clear_familyid();
  static const int kFamilyIDFieldNumber = 3;
  inline ::google::protobuf::uint32 familyid() const;
  inline void set_familyid(::google::protobuf::uint32 value);
  
  // optional string FamilyName = 4;
  inline bool has_familyname() const;
  inline void clear_familyname();
  static const int kFamilyNameFieldNumber = 4;
  inline const ::std::string& familyname() const;
  inline void set_familyname(const ::std::string& value);
  inline void set_familyname(const char* value);
  inline void set_familyname(const char* value, size_t size);
  inline ::std::string* mutable_familyname();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 errcode_;
  ::google::protobuf::uint32 familyid_;
  ::std::string* familyname_;
  static const ::std::string _default_familyname_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageCreatFamilyResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageInviteMemberRequest : public ::google::protobuf::Message {
 public:
  CMessageInviteMemberRequest();
  virtual ~CMessageInviteMemberRequest();
  
  CMessageInviteMemberRequest(const CMessageInviteMemberRequest& from);
  
  inline CMessageInviteMemberRequest& operator=(const CMessageInviteMemberRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageInviteMemberRequest& default_instance();
  void Swap(CMessageInviteMemberRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageInviteMemberRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageInviteMemberRequest& from);
  void MergeFrom(const CMessageInviteMemberRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 RoleID = 2;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIDFieldNumber = 2;
  inline ::google::protobuf::uint32 roleid() const;
  inline void set_roleid(::google::protobuf::uint32 value);
  
  // optional string RoleName = 3;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 3;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 roleid_;
  ::std::string* rolename_;
  static const ::std::string _default_rolename_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageInviteMemberRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageInviteMemberResponse : public ::google::protobuf::Message {
 public:
  CMessageInviteMemberResponse();
  virtual ~CMessageInviteMemberResponse();
  
  CMessageInviteMemberResponse(const CMessageInviteMemberResponse& from);
  
  inline CMessageInviteMemberResponse& operator=(const CMessageInviteMemberResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageInviteMemberResponse& default_instance();
  void Swap(CMessageInviteMemberResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageInviteMemberResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageInviteMemberResponse& from);
  void MergeFrom(const CMessageInviteMemberResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 Errcode = 2;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 2;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);
  
  // optional string RoleName = 3;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 3;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 errcode_;
  ::std::string* rolename_;
  static const ::std::string _default_rolename_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageInviteMemberResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageFamilyInvitedNotify : public ::google::protobuf::Message {
 public:
  CMessageFamilyInvitedNotify();
  virtual ~CMessageFamilyInvitedNotify();
  
  CMessageFamilyInvitedNotify(const CMessageFamilyInvitedNotify& from);
  
  inline CMessageFamilyInvitedNotify& operator=(const CMessageFamilyInvitedNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageFamilyInvitedNotify& default_instance();
  void Swap(CMessageFamilyInvitedNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageFamilyInvitedNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageFamilyInvitedNotify& from);
  void MergeFrom(const CMessageFamilyInvitedNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional string PlayerName = 2;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayerNameFieldNumber = 2;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  
  // optional string FamiltyName = 3;
  inline bool has_familtyname() const;
  inline void clear_familtyname();
  static const int kFamiltyNameFieldNumber = 3;
  inline const ::std::string& familtyname() const;
  inline void set_familtyname(const ::std::string& value);
  inline void set_familtyname(const char* value);
  inline void set_familtyname(const char* value, size_t size);
  inline ::std::string* mutable_familtyname();
  
  // optional uint32 RoleID = 4;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIDFieldNumber = 4;
  inline ::google::protobuf::uint32 roleid() const;
  inline void set_roleid(::google::protobuf::uint32 value);
  
  // optional uint32 FamilyID = 5;
  inline bool has_familyid() const;
  inline void clear_familyid();
  static const int kFamilyIDFieldNumber = 5;
  inline ::google::protobuf::uint32 familyid() const;
  inline void set_familyid(::google::protobuf::uint32 value);
  
  // optional uint32 FamilyLevel = 6;
  inline bool has_familylevel() const;
  inline void clear_familylevel();
  static const int kFamilyLevelFieldNumber = 6;
  inline ::google::protobuf::uint32 familylevel() const;
  inline void set_familylevel(::google::protobuf::uint32 value);
  
  // optional uint32 MemberNum = 7;
  inline bool has_membernum() const;
  inline void clear_membernum();
  static const int kMemberNumFieldNumber = 7;
  inline ::google::protobuf::uint32 membernum() const;
  inline void set_membernum(::google::protobuf::uint32 value);
  
  // optional string CorpsName = 8;
  inline bool has_corpsname() const;
  inline void clear_corpsname();
  static const int kCorpsNameFieldNumber = 8;
  inline const ::std::string& corpsname() const;
  inline void set_corpsname(const ::std::string& value);
  inline void set_corpsname(const char* value);
  inline void set_corpsname(const char* value, size_t size);
  inline ::std::string* mutable_corpsname();
  
  // optional uint32 Glory = 9;
  inline bool has_glory() const;
  inline void clear_glory();
  static const int kGloryFieldNumber = 9;
  inline ::google::protobuf::uint32 glory() const;
  inline void set_glory(::google::protobuf::uint32 value);
  
  // optional uint32 StarLevel = 10;
  inline bool has_starlevel() const;
  inline void clear_starlevel();
  static const int kStarLevelFieldNumber = 10;
  inline ::google::protobuf::uint32 starlevel() const;
  inline void set_starlevel(::google::protobuf::uint32 value);
  
  // optional uint32 NpcID = 11;
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcIDFieldNumber = 11;
  inline ::google::protobuf::uint32 npcid() const;
  inline void set_npcid(::google::protobuf::uint32 value);
  
  // optional string FamilyHeaderName = 12;
  inline bool has_familyheadername() const;
  inline void clear_familyheadername();
  static const int kFamilyHeaderNameFieldNumber = 12;
  inline const ::std::string& familyheadername() const;
  inline void set_familyheadername(const ::std::string& value);
  inline void set_familyheadername(const char* value);
  inline void set_familyheadername(const char* value, size_t size);
  inline ::std::string* mutable_familyheadername();
  
  // optional uint32 UnionID = 13;
  inline bool has_unionid() const;
  inline void clear_unionid();
  static const int kUnionIDFieldNumber = 13;
  inline ::google::protobuf::uint32 unionid() const;
  inline void set_unionid(::google::protobuf::uint32 value);
  
  // optional string UnionName = 14;
  inline bool has_unionname() const;
  inline void clear_unionname();
  static const int kUnionNameFieldNumber = 14;
  inline const ::std::string& unionname() const;
  inline void set_unionname(const ::std::string& value);
  inline void set_unionname(const char* value);
  inline void set_unionname(const char* value, size_t size);
  inline ::std::string* mutable_unionname();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::std::string* playername_;
  static const ::std::string _default_playername_;
  ::std::string* familtyname_;
  static const ::std::string _default_familtyname_;
  ::google::protobuf::uint32 roleid_;
  ::google::protobuf::uint32 familyid_;
  ::google::protobuf::uint32 familylevel_;
  ::google::protobuf::uint32 membernum_;
  ::std::string* corpsname_;
  static const ::std::string _default_corpsname_;
  ::google::protobuf::uint32 glory_;
  ::google::protobuf::uint32 starlevel_;
  ::google::protobuf::uint32 npcid_;
  ::std::string* familyheadername_;
  static const ::std::string _default_familyheadername_;
  ::google::protobuf::uint32 unionid_;
  ::std::string* unionname_;
  static const ::std::string _default_unionname_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageFamilyInvitedNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessageReplyFamilyInviteRequest : public ::google::protobuf::Message {
 public:
  CMessageReplyFamilyInviteRequest();
  virtual ~CMessageReplyFamilyInviteRequest();
  
  CMessageReplyFamilyInviteRequest(const CMessageReplyFamilyInviteRequest& from);
  
  inline CMessageReplyFamilyInviteRequest& operator=(const CMessageReplyFamilyInviteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageReplyFamilyInviteRequest& default_instance();
  void Swap(CMessageReplyFamilyInviteRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageReplyFamilyInviteRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageReplyFamilyInviteRequest& from);
  void MergeFrom(const CMessageReplyFamilyInviteRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 Result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);
  
  // optional uint32 FamilyID = 3;
  inline bool has_familyid() const;
  inline void clear_familyid();
  static const int kFamilyIDFieldNumber = 3;
  inline ::google::protobuf::uint32 familyid() const;
  inline void set_familyid(::google::protobuf::uint32 value);
  
  // optional uint32 InvitingRoleID = 4;
  inline bool has_invitingroleid() const;
  inline void clear_invitingroleid();
  static const int kInvitingRoleIDFieldNumber = 4;
  inline ::google::protobuf::uint32 invitingroleid() const;
  inline void set_invitingroleid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 result_;
  ::google::protobuf::uint32 familyid_;
  ::google::protobuf::uint32 invitingroleid_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageReplyFamilyInviteRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageReplyFamilyInviteResponse : public ::google::protobuf::Message {
 public:
  CMessageReplyFamilyInviteResponse();
  virtual ~CMessageReplyFamilyInviteResponse();
  
  CMessageReplyFamilyInviteResponse(const CMessageReplyFamilyInviteResponse& from);
  
  inline CMessageReplyFamilyInviteResponse& operator=(const CMessageReplyFamilyInviteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageReplyFamilyInviteResponse& default_instance();
  void Swap(CMessageReplyFamilyInviteResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageReplyFamilyInviteResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageReplyFamilyInviteResponse& from);
  void MergeFrom(const CMessageReplyFamilyInviteResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 Errcode = 2;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 2;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);
  
  // optional uint32 FamilyID = 3;
  inline bool has_familyid() const;
  inline void clear_familyid();
  static const int kFamilyIDFieldNumber = 3;
  inline ::google::protobuf::uint32 familyid() const;
  inline void set_familyid(::google::protobuf::uint32 value);
  
  // optional string FamilyName = 4;
  inline bool has_familyname() const;
  inline void clear_familyname();
  static const int kFamilyNameFieldNumber = 4;
  inline const ::std::string& familyname() const;
  inline void set_familyname(const ::std::string& value);
  inline void set_familyname(const char* value);
  inline void set_familyname(const char* value, size_t size);
  inline ::std::string* mutable_familyname();
  
  // optional uint32 Result = 5;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 5;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);
  
  // optional uint32 CorpsID = 6;
  inline bool has_corpsid() const;
  inline void clear_corpsid();
  static const int kCorpsIDFieldNumber = 6;
  inline ::google::protobuf::uint32 corpsid() const;
  inline void set_corpsid(::google::protobuf::uint32 value);
  
  // optional string CorpsName = 7;
  inline bool has_corpsname() const;
  inline void clear_corpsname();
  static const int kCorpsNameFieldNumber = 7;
  inline const ::std::string& corpsname() const;
  inline void set_corpsname(const ::std::string& value);
  inline void set_corpsname(const char* value);
  inline void set_corpsname(const char* value, size_t size);
  inline ::std::string* mutable_corpsname();
  
  // optional uint32 FamilyHeaderID = 8;
  inline bool has_familyheaderid() const;
  inline void clear_familyheaderid();
  static const int kFamilyHeaderIDFieldNumber = 8;
  inline ::google::protobuf::uint32 familyheaderid() const;
  inline void set_familyheaderid(::google::protobuf::uint32 value);
  
  // optional uint32 CorpsHeaderID = 9;
  inline bool has_corpsheaderid() const;
  inline void clear_corpsheaderid();
  static const int kCorpsHeaderIDFieldNumber = 9;
  inline ::google::protobuf::uint32 corpsheaderid() const;
  inline void set_corpsheaderid(::google::protobuf::uint32 value);
  
  // optional uint32 UnionID = 10;
  inline bool has_unionid() const;
  inline void clear_unionid();
  static const int kUnionIDFieldNumber = 10;
  inline ::google::protobuf::uint32 unionid() const;
  inline void set_unionid(::google::protobuf::uint32 value);
  
  // optional string UnionName = 11;
  inline bool has_unionname() const;
  inline void clear_unionname();
  static const int kUnionNameFieldNumber = 11;
  inline const ::std::string& unionname() const;
  inline void set_unionname(const ::std::string& value);
  inline void set_unionname(const char* value);
  inline void set_unionname(const char* value, size_t size);
  inline ::std::string* mutable_unionname();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 errcode_;
  ::google::protobuf::uint32 familyid_;
  ::std::string* familyname_;
  static const ::std::string _default_familyname_;
  ::google::protobuf::uint32 result_;
  ::google::protobuf::uint32 corpsid_;
  ::std::string* corpsname_;
  static const ::std::string _default_corpsname_;
  ::google::protobuf::uint32 familyheaderid_;
  ::google::protobuf::uint32 corpsheaderid_;
  ::google::protobuf::uint32 unionid_;
  ::std::string* unionname_;
  static const ::std::string _default_unionname_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageReplyFamilyInviteResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageApplyFamilyRequest : public ::google::protobuf::Message {
 public:
  CMessageApplyFamilyRequest();
  virtual ~CMessageApplyFamilyRequest();
  
  CMessageApplyFamilyRequest(const CMessageApplyFamilyRequest& from);
  
  inline CMessageApplyFamilyRequest& operator=(const CMessageApplyFamilyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageApplyFamilyRequest& default_instance();
  void Swap(CMessageApplyFamilyRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageApplyFamilyRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageApplyFamilyRequest& from);
  void MergeFrom(const CMessageApplyFamilyRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 CharID = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 2;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);
  
  // optional uint32 FamilyID = 3;
  inline bool has_familyid() const;
  inline void clear_familyid();
  static const int kFamilyIDFieldNumber = 3;
  inline ::google::protobuf::uint32 familyid() const;
  inline void set_familyid(::google::protobuf::uint32 value);
  
  // optional string FamilyName = 4;
  inline bool has_familyname() const;
  inline void clear_familyname();
  static const int kFamilyNameFieldNumber = 4;
  inline const ::std::string& familyname() const;
  inline void set_familyname(const ::std::string& value);
  inline void set_familyname(const char* value);
  inline void set_familyname(const char* value, size_t size);
  inline ::std::string* mutable_familyname();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 familyid_;
  ::std::string* familyname_;
  static const ::std::string _default_familyname_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageApplyFamilyRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageApplyFamilyResponse : public ::google::protobuf::Message {
 public:
  CMessageApplyFamilyResponse();
  virtual ~CMessageApplyFamilyResponse();
  
  CMessageApplyFamilyResponse(const CMessageApplyFamilyResponse& from);
  
  inline CMessageApplyFamilyResponse& operator=(const CMessageApplyFamilyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageApplyFamilyResponse& default_instance();
  void Swap(CMessageApplyFamilyResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageApplyFamilyResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageApplyFamilyResponse& from);
  void MergeFrom(const CMessageApplyFamilyResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 Errcode = 2;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 2;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);
  
  // optional string FamilyName = 3;
  inline bool has_familyname() const;
  inline void clear_familyname();
  static const int kFamilyNameFieldNumber = 3;
  inline const ::std::string& familyname() const;
  inline void set_familyname(const ::std::string& value);
  inline void set_familyname(const char* value);
  inline void set_familyname(const char* value, size_t size);
  inline ::std::string* mutable_familyname();
  
  // optional uint32 FamilyID = 4;
  inline bool has_familyid() const;
  inline void clear_familyid();
  static const int kFamilyIDFieldNumber = 4;
  inline ::google::protobuf::uint32 familyid() const;
  inline void set_familyid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 errcode_;
  ::std::string* familyname_;
  static const ::std::string _default_familyname_;
  ::google::protobuf::uint32 familyid_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageApplyFamilyResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageMemberApplyNotify : public ::google::protobuf::Message {
 public:
  CMessageMemberApplyNotify();
  virtual ~CMessageMemberApplyNotify();
  
  CMessageMemberApplyNotify(const CMessageMemberApplyNotify& from);
  
  inline CMessageMemberApplyNotify& operator=(const CMessageMemberApplyNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageMemberApplyNotify& default_instance();
  void Swap(CMessageMemberApplyNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageMemberApplyNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageMemberApplyNotify& from);
  void MergeFrom(const CMessageMemberApplyNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional string PlayerName = 2;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayerNameFieldNumber = 2;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  
  // optional uint32 RoleID = 3;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIDFieldNumber = 3;
  inline ::google::protobuf::uint32 roleid() const;
  inline void set_roleid(::google::protobuf::uint32 value);
  
  // optional uint32 RoleLevel = 4;
  inline bool has_rolelevel() const;
  inline void clear_rolelevel();
  static const int kRoleLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 rolelevel() const;
  inline void set_rolelevel(::google::protobuf::uint32 value);
  
  // optional uint32 RoleMetier = 5;
  inline bool has_rolemetier() const;
  inline void clear_rolemetier();
  static const int kRoleMetierFieldNumber = 5;
  inline ::google::protobuf::uint32 rolemetier() const;
  inline void set_rolemetier(::google::protobuf::uint32 value);
  
  // optional uint32 FaceType = 6;
  inline bool has_facetype() const;
  inline void clear_facetype();
  static const int kFaceTypeFieldNumber = 6;
  inline ::google::protobuf::uint32 facetype() const;
  inline void set_facetype(::google::protobuf::uint32 value);
  
  // optional uint32 RoleSex = 7;
  inline bool has_rolesex() const;
  inline void clear_rolesex();
  static const int kRoleSexFieldNumber = 7;
  inline ::google::protobuf::uint32 rolesex() const;
  inline void set_rolesex(::google::protobuf::uint32 value);
  
  // optional uint32 LineID = 8;
  inline bool has_lineid() const;
  inline void clear_lineid();
  static const int kLineIDFieldNumber = 8;
  inline ::google::protobuf::uint32 lineid() const;
  inline void set_lineid(::google::protobuf::uint32 value);
  
  // optional uint32 MapID = 9;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIDFieldNumber = 9;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::std::string* playername_;
  static const ::std::string _default_playername_;
  ::google::protobuf::uint32 roleid_;
  ::google::protobuf::uint32 rolelevel_;
  ::google::protobuf::uint32 rolemetier_;
  ::google::protobuf::uint32 facetype_;
  ::google::protobuf::uint32 rolesex_;
  ::google::protobuf::uint32 lineid_;
  ::google::protobuf::uint32 mapid_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageMemberApplyNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessageReplyMemberApplyRequest : public ::google::protobuf::Message {
 public:
  CMessageReplyMemberApplyRequest();
  virtual ~CMessageReplyMemberApplyRequest();
  
  CMessageReplyMemberApplyRequest(const CMessageReplyMemberApplyRequest& from);
  
  inline CMessageReplyMemberApplyRequest& operator=(const CMessageReplyMemberApplyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageReplyMemberApplyRequest& default_instance();
  void Swap(CMessageReplyMemberApplyRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageReplyMemberApplyRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageReplyMemberApplyRequest& from);
  void MergeFrom(const CMessageReplyMemberApplyRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 Result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);
  
  // optional uint32 RoleID = 3;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIDFieldNumber = 3;
  inline ::google::protobuf::uint32 roleid() const;
  inline void set_roleid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 result_;
  ::google::protobuf::uint32 roleid_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageReplyMemberApplyRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageReplyMemberApplyResponse : public ::google::protobuf::Message {
 public:
  CMessageReplyMemberApplyResponse();
  virtual ~CMessageReplyMemberApplyResponse();
  
  CMessageReplyMemberApplyResponse(const CMessageReplyMemberApplyResponse& from);
  
  inline CMessageReplyMemberApplyResponse& operator=(const CMessageReplyMemberApplyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageReplyMemberApplyResponse& default_instance();
  void Swap(CMessageReplyMemberApplyResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageReplyMemberApplyResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageReplyMemberApplyResponse& from);
  void MergeFrom(const CMessageReplyMemberApplyResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 Errcode = 2;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 2;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);
  
  // optional string PlayerName = 3;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayerNameFieldNumber = 3;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  
  // optional uint32 CharID = 4;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 4;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);
  
  // optional uint32 Result = 5;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 5;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 errcode_;
  ::std::string* playername_;
  static const ::std::string _default_playername_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 result_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageReplyMemberApplyResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageApplyFamilySuccessNotify : public ::google::protobuf::Message {
 public:
  CMessageApplyFamilySuccessNotify();
  virtual ~CMessageApplyFamilySuccessNotify();
  
  CMessageApplyFamilySuccessNotify(const CMessageApplyFamilySuccessNotify& from);
  
  inline CMessageApplyFamilySuccessNotify& operator=(const CMessageApplyFamilySuccessNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageApplyFamilySuccessNotify& default_instance();
  void Swap(CMessageApplyFamilySuccessNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageApplyFamilySuccessNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageApplyFamilySuccessNotify& from);
  void MergeFrom(const CMessageApplyFamilySuccessNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 Result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);
  
  // optional uint32 FamilyID = 3;
  inline bool has_familyid() const;
  inline void clear_familyid();
  static const int kFamilyIDFieldNumber = 3;
  inline ::google::protobuf::uint32 familyid() const;
  inline void set_familyid(::google::protobuf::uint32 value);
  
  // optional string FamilyName = 4;
  inline bool has_familyname() const;
  inline void clear_familyname();
  static const int kFamilyNameFieldNumber = 4;
  inline const ::std::string& familyname() const;
  inline void set_familyname(const ::std::string& value);
  inline void set_familyname(const char* value);
  inline void set_familyname(const char* value, size_t size);
  inline ::std::string* mutable_familyname();
  
  // optional uint32 CorpsID = 5;
  inline bool has_corpsid() const;
  inline void clear_corpsid();
  static const int kCorpsIDFieldNumber = 5;
  inline ::google::protobuf::uint32 corpsid() const;
  inline void set_corpsid(::google::protobuf::uint32 value);
  
  // optional string CorpsName = 6;
  inline bool has_corpsname() const;
  inline void clear_corpsname();
  static const int kCorpsNameFieldNumber = 6;
  inline const ::std::string& corpsname() const;
  inline void set_corpsname(const ::std::string& value);
  inline void set_corpsname(const char* value);
  inline void set_corpsname(const char* value, size_t size);
  inline ::std::string* mutable_corpsname();
  
  // optional uint32 FamilyHeader = 7;
  inline bool has_familyheader() const;
  inline void clear_familyheader();
  static const int kFamilyHeaderFieldNumber = 7;
  inline ::google::protobuf::uint32 familyheader() const;
  inline void set_familyheader(::google::protobuf::uint32 value);
  
  // optional uint32 CorpsHeader = 8;
  inline bool has_corpsheader() const;
  inline void clear_corpsheader();
  static const int kCorpsHeaderFieldNumber = 8;
  inline ::google::protobuf::uint32 corpsheader() const;
  inline void set_corpsheader(::google::protobuf::uint32 value);
  
  // optional uint32 UnionID = 9;
  inline bool has_unionid() const;
  inline void clear_unionid();
  static const int kUnionIDFieldNumber = 9;
  inline ::google::protobuf::uint32 unionid() const;
  inline void set_unionid(::google::protobuf::uint32 value);
  
  // optional string UnionName = 10;
  inline bool has_unionname() const;
  inline void clear_unionname();
  static const int kUnionNameFieldNumber = 10;
  inline const ::std::string& unionname() const;
  inline void set_unionname(const ::std::string& value);
  inline void set_unionname(const char* value);
  inline void set_unionname(const char* value, size_t size);
  inline ::std::string* mutable_unionname();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 result_;
  ::google::protobuf::uint32 familyid_;
  ::std::string* familyname_;
  static const ::std::string _default_familyname_;
  ::google::protobuf::uint32 corpsid_;
  ::std::string* corpsname_;
  static const ::std::string _default_corpsname_;
  ::google::protobuf::uint32 familyheader_;
  ::google::protobuf::uint32 corpsheader_;
  ::google::protobuf::uint32 unionid_;
  ::std::string* unionname_;
  static const ::std::string _default_unionname_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageApplyFamilySuccessNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessageFamilyMemberAddedNotify : public ::google::protobuf::Message {
 public:
  CMessageFamilyMemberAddedNotify();
  virtual ~CMessageFamilyMemberAddedNotify();
  
  CMessageFamilyMemberAddedNotify(const CMessageFamilyMemberAddedNotify& from);
  
  inline CMessageFamilyMemberAddedNotify& operator=(const CMessageFamilyMemberAddedNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageFamilyMemberAddedNotify& default_instance();
  void Swap(CMessageFamilyMemberAddedNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageFamilyMemberAddedNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageFamilyMemberAddedNotify& from);
  void MergeFrom(const CMessageFamilyMemberAddedNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional string ManagerName = 2;
  inline bool has_managername() const;
  inline void clear_managername();
  static const int kManagerNameFieldNumber = 2;
  inline const ::std::string& managername() const;
  inline void set_managername(const ::std::string& value);
  inline void set_managername(const char* value);
  inline void set_managername(const char* value, size_t size);
  inline ::std::string* mutable_managername();
  
  // optional .FamilyMemberInfo RoleInfo = 3;
  inline bool has_roleinfo() const;
  inline void clear_roleinfo();
  static const int kRoleInfoFieldNumber = 3;
  inline const ::FamilyMemberInfo& roleinfo() const;
  inline ::FamilyMemberInfo* mutable_roleinfo();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::std::string* managername_;
  static const ::std::string _default_managername_;
  ::FamilyMemberInfo* roleinfo_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageFamilyMemberAddedNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessagePostAppointRequest : public ::google::protobuf::Message {
 public:
  CMessagePostAppointRequest();
  virtual ~CMessagePostAppointRequest();
  
  CMessagePostAppointRequest(const CMessagePostAppointRequest& from);
  
  inline CMessagePostAppointRequest& operator=(const CMessagePostAppointRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessagePostAppointRequest& default_instance();
  void Swap(CMessagePostAppointRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessagePostAppointRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessagePostAppointRequest& from);
  void MergeFrom(const CMessagePostAppointRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 PlayerCharID = 2;
  inline bool has_playercharid() const;
  inline void clear_playercharid();
  static const int kPlayerCharIDFieldNumber = 2;
  inline ::google::protobuf::uint32 playercharid() const;
  inline void set_playercharid(::google::protobuf::uint32 value);
  
  // optional uint32 ActionKind = 3;
  inline bool has_actionkind() const;
  inline void clear_actionkind();
  static const int kActionKindFieldNumber = 3;
  inline ::google::protobuf::uint32 actionkind() const;
  inline void set_actionkind(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 playercharid_;
  ::google::protobuf::uint32 actionkind_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessagePostAppointRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessagePostAppointResponse : public ::google::protobuf::Message {
 public:
  CMessagePostAppointResponse();
  virtual ~CMessagePostAppointResponse();
  
  CMessagePostAppointResponse(const CMessagePostAppointResponse& from);
  
  inline CMessagePostAppointResponse& operator=(const CMessagePostAppointResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessagePostAppointResponse& default_instance();
  void Swap(CMessagePostAppointResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessagePostAppointResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessagePostAppointResponse& from);
  void MergeFrom(const CMessagePostAppointResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 Errcode = 2;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 2;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);
  
  // optional uint32 PlayerCharID = 3;
  inline bool has_playercharid() const;
  inline void clear_playercharid();
  static const int kPlayerCharIDFieldNumber = 3;
  inline ::google::protobuf::uint32 playercharid() const;
  inline void set_playercharid(::google::protobuf::uint32 value);
  
  // optional uint32 ActionKind = 4;
  inline bool has_actionkind() const;
  inline void clear_actionkind();
  static const int kActionKindFieldNumber = 4;
  inline ::google::protobuf::uint32 actionkind() const;
  inline void set_actionkind(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 errcode_;
  ::google::protobuf::uint32 playercharid_;
  ::google::protobuf::uint32 actionkind_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessagePostAppointResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessagePostAppointNoify : public ::google::protobuf::Message {
 public:
  CMessagePostAppointNoify();
  virtual ~CMessagePostAppointNoify();
  
  CMessagePostAppointNoify(const CMessagePostAppointNoify& from);
  
  inline CMessagePostAppointNoify& operator=(const CMessagePostAppointNoify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessagePostAppointNoify& default_instance();
  void Swap(CMessagePostAppointNoify* other);
  
  // implements Message ----------------------------------------------
  
  CMessagePostAppointNoify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessagePostAppointNoify& from);
  void MergeFrom(const CMessagePostAppointNoify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 PlayerCharID = 2;
  inline bool has_playercharid() const;
  inline void clear_playercharid();
  static const int kPlayerCharIDFieldNumber = 2;
  inline ::google::protobuf::uint32 playercharid() const;
  inline void set_playercharid(::google::protobuf::uint32 value);
  
  // optional uint32 ActionKind = 3;
  inline bool has_actionkind() const;
  inline void clear_actionkind();
  static const int kActionKindFieldNumber = 3;
  inline ::google::protobuf::uint32 actionkind() const;
  inline void set_actionkind(::google::protobuf::uint32 value);
  
  // optional string ManagerName = 4;
  inline bool has_managername() const;
  inline void clear_managername();
  static const int kManagerNameFieldNumber = 4;
  inline const ::std::string& managername() const;
  inline void set_managername(const ::std::string& value);
  inline void set_managername(const char* value);
  inline void set_managername(const char* value, size_t size);
  inline ::std::string* mutable_managername();
  
  // optional string PlayerName = 5;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayerNameFieldNumber = 5;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 playercharid_;
  ::google::protobuf::uint32 actionkind_;
  ::std::string* managername_;
  static const ::std::string _default_managername_;
  ::std::string* playername_;
  static const ::std::string _default_playername_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessagePostAppointNoify* default_instance_;
};
// -------------------------------------------------------------------

class CMessageLeaveFamilyRequest : public ::google::protobuf::Message {
 public:
  CMessageLeaveFamilyRequest();
  virtual ~CMessageLeaveFamilyRequest();
  
  CMessageLeaveFamilyRequest(const CMessageLeaveFamilyRequest& from);
  
  inline CMessageLeaveFamilyRequest& operator=(const CMessageLeaveFamilyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageLeaveFamilyRequest& default_instance();
  void Swap(CMessageLeaveFamilyRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageLeaveFamilyRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageLeaveFamilyRequest& from);
  void MergeFrom(const CMessageLeaveFamilyRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 MsgCode = 2;
  inline bool has_msgcode() const;
  inline void clear_msgcode();
  static const int kMsgCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 msgcode() const;
  inline void set_msgcode(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 msgcode_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageLeaveFamilyRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageLeaveFamilyResponse : public ::google::protobuf::Message {
 public:
  CMessageLeaveFamilyResponse();
  virtual ~CMessageLeaveFamilyResponse();
  
  CMessageLeaveFamilyResponse(const CMessageLeaveFamilyResponse& from);
  
  inline CMessageLeaveFamilyResponse& operator=(const CMessageLeaveFamilyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageLeaveFamilyResponse& default_instance();
  void Swap(CMessageLeaveFamilyResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageLeaveFamilyResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageLeaveFamilyResponse& from);
  void MergeFrom(const CMessageLeaveFamilyResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 Errcode = 2;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 2;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 errcode_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageLeaveFamilyResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageMemberLeaveFamilyNotify : public ::google::protobuf::Message {
 public:
  CMessageMemberLeaveFamilyNotify();
  virtual ~CMessageMemberLeaveFamilyNotify();
  
  CMessageMemberLeaveFamilyNotify(const CMessageMemberLeaveFamilyNotify& from);
  
  inline CMessageMemberLeaveFamilyNotify& operator=(const CMessageMemberLeaveFamilyNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageMemberLeaveFamilyNotify& default_instance();
  void Swap(CMessageMemberLeaveFamilyNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageMemberLeaveFamilyNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageMemberLeaveFamilyNotify& from);
  void MergeFrom(const CMessageMemberLeaveFamilyNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 RoleID = 2;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIDFieldNumber = 2;
  inline ::google::protobuf::uint32 roleid() const;
  inline void set_roleid(::google::protobuf::uint32 value);
  
  // optional string RoleName = 3;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 3;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  
  // optional uint32 PlayerLevel = 4;
  inline bool has_playerlevel() const;
  inline void clear_playerlevel();
  static const int kPlayerLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 playerlevel() const;
  inline void set_playerlevel(::google::protobuf::uint32 value);
  
  // optional uint32 PlayerPost = 5;
  inline bool has_playerpost() const;
  inline void clear_playerpost();
  static const int kPlayerPostFieldNumber = 5;
  inline ::google::protobuf::uint32 playerpost() const;
  inline void set_playerpost(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 roleid_;
  ::std::string* rolename_;
  static const ::std::string _default_rolename_;
  ::google::protobuf::uint32 playerlevel_;
  ::google::protobuf::uint32 playerpost_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageMemberLeaveFamilyNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessageGetFamilyMemberInfoRequest : public ::google::protobuf::Message {
 public:
  CMessageGetFamilyMemberInfoRequest();
  virtual ~CMessageGetFamilyMemberInfoRequest();
  
  CMessageGetFamilyMemberInfoRequest(const CMessageGetFamilyMemberInfoRequest& from);
  
  inline CMessageGetFamilyMemberInfoRequest& operator=(const CMessageGetFamilyMemberInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageGetFamilyMemberInfoRequest& default_instance();
  void Swap(CMessageGetFamilyMemberInfoRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageGetFamilyMemberInfoRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageGetFamilyMemberInfoRequest& from);
  void MergeFrom(const CMessageGetFamilyMemberInfoRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageGetFamilyMemberInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageGetFamilyMemberInfoResponse : public ::google::protobuf::Message {
 public:
  CMessageGetFamilyMemberInfoResponse();
  virtual ~CMessageGetFamilyMemberInfoResponse();
  
  CMessageGetFamilyMemberInfoResponse(const CMessageGetFamilyMemberInfoResponse& from);
  
  inline CMessageGetFamilyMemberInfoResponse& operator=(const CMessageGetFamilyMemberInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageGetFamilyMemberInfoResponse& default_instance();
  void Swap(CMessageGetFamilyMemberInfoResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageGetFamilyMemberInfoResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageGetFamilyMemberInfoResponse& from);
  void MergeFrom(const CMessageGetFamilyMemberInfoResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional .PBFamilyMemberList MemberInfo = 2;
  inline bool has_memberinfo() const;
  inline void clear_memberinfo();
  static const int kMemberInfoFieldNumber = 2;
  inline const ::PBFamilyMemberList& memberinfo() const;
  inline ::PBFamilyMemberList* mutable_memberinfo();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::PBFamilyMemberList* memberinfo_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageGetFamilyMemberInfoResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageGetFamilyPropertyRequest : public ::google::protobuf::Message {
 public:
  CMessageGetFamilyPropertyRequest();
  virtual ~CMessageGetFamilyPropertyRequest();
  
  CMessageGetFamilyPropertyRequest(const CMessageGetFamilyPropertyRequest& from);
  
  inline CMessageGetFamilyPropertyRequest& operator=(const CMessageGetFamilyPropertyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageGetFamilyPropertyRequest& default_instance();
  void Swap(CMessageGetFamilyPropertyRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageGetFamilyPropertyRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageGetFamilyPropertyRequest& from);
  void MergeFrom(const CMessageGetFamilyPropertyRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageGetFamilyPropertyRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageGetFamilyPropertyResponse : public ::google::protobuf::Message {
 public:
  CMessageGetFamilyPropertyResponse();
  virtual ~CMessageGetFamilyPropertyResponse();
  
  CMessageGetFamilyPropertyResponse(const CMessageGetFamilyPropertyResponse& from);
  
  inline CMessageGetFamilyPropertyResponse& operator=(const CMessageGetFamilyPropertyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageGetFamilyPropertyResponse& default_instance();
  void Swap(CMessageGetFamilyPropertyResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageGetFamilyPropertyResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageGetFamilyPropertyResponse& from);
  void MergeFrom(const CMessageGetFamilyPropertyResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional string FamilyNotice = 2;
  inline bool has_familynotice() const;
  inline void clear_familynotice();
  static const int kFamilyNoticeFieldNumber = 2;
  inline const ::std::string& familynotice() const;
  inline void set_familynotice(const ::std::string& value);
  inline void set_familynotice(const char* value);
  inline void set_familynotice(const char* value, size_t size);
  inline ::std::string* mutable_familynotice();
  
  // optional uint32 FamilyNum = 3;
  inline bool has_familynum() const;
  inline void clear_familynum();
  static const int kFamilyNumFieldNumber = 3;
  inline ::google::protobuf::uint32 familynum() const;
  inline void set_familynum(::google::protobuf::uint32 value);
  
  // optional uint32 FamilyLevel = 4;
  inline bool has_familylevel() const;
  inline void clear_familylevel();
  static const int kFamilyLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 familylevel() const;
  inline void set_familylevel(::google::protobuf::uint32 value);
  
  // optional uint32 FamilyMoney = 5;
  inline bool has_familymoney() const;
  inline void clear_familymoney();
  static const int kFamilyMoneyFieldNumber = 5;
  inline ::google::protobuf::uint32 familymoney() const;
  inline void set_familymoney(::google::protobuf::uint32 value);
  
  // optional uint32 FamilyHeaderID = 6;
  inline bool has_familyheaderid() const;
  inline void clear_familyheaderid();
  static const int kFamilyHeaderIDFieldNumber = 6;
  inline ::google::protobuf::uint32 familyheaderid() const;
  inline void set_familyheaderid(::google::protobuf::uint32 value);
  
  // optional string FamilyHeaderName = 7;
  inline bool has_familyheadername() const;
  inline void clear_familyheadername();
  static const int kFamilyHeaderNameFieldNumber = 7;
  inline const ::std::string& familyheadername() const;
  inline void set_familyheadername(const ::std::string& value);
  inline void set_familyheadername(const char* value);
  inline void set_familyheadername(const char* value, size_t size);
  inline ::std::string* mutable_familyheadername();
  
  // optional uint32 FamilyGlory = 8;
  inline bool has_familyglory() const;
  inline void clear_familyglory();
  static const int kFamilyGloryFieldNumber = 8;
  inline ::google::protobuf::uint32 familyglory() const;
  inline void set_familyglory(::google::protobuf::uint32 value);
  
  // optional uint32 NpcID = 9;
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcIDFieldNumber = 9;
  inline ::google::protobuf::uint32 npcid() const;
  inline void set_npcid(::google::protobuf::uint32 value);
  
  // optional uint32 BidMoney = 10;
  inline bool has_bidmoney() const;
  inline void clear_bidmoney();
  static const int kBidMoneyFieldNumber = 10;
  inline ::google::protobuf::uint32 bidmoney() const;
  inline void set_bidmoney(::google::protobuf::uint32 value);
  
  // optional uint32 BidTime = 11;
  inline bool has_bidtime() const;
  inline void clear_bidtime();
  static const int kBidTimeFieldNumber = 11;
  inline ::google::protobuf::uint32 bidtime() const;
  inline void set_bidtime(::google::protobuf::uint32 value);
  
  // optional uint32 WarNpcStatus = 12;
  inline bool has_warnpcstatus() const;
  inline void clear_warnpcstatus();
  static const int kWarNpcStatusFieldNumber = 12;
  inline ::google::protobuf::uint32 warnpcstatus() const;
  inline void set_warnpcstatus(::google::protobuf::uint32 value);
  
  // optional uint32 WarRank = 13;
  inline bool has_warrank() const;
  inline void clear_warrank();
  static const int kWarRankFieldNumber = 13;
  inline ::google::protobuf::uint32 warrank() const;
  inline void set_warrank(::google::protobuf::uint32 value);
  
  // optional uint32 WarWinNum = 14;
  inline bool has_warwinnum() const;
  inline void clear_warwinnum();
  static const int kWarWinNumFieldNumber = 14;
  inline ::google::protobuf::uint32 warwinnum() const;
  inline void set_warwinnum(::google::protobuf::uint32 value);
  
  // optional uint32 WarLostNum = 15;
  inline bool has_warlostnum() const;
  inline void clear_warlostnum();
  static const int kWarLostNumFieldNumber = 15;
  inline ::google::protobuf::uint32 warlostnum() const;
  inline void set_warlostnum(::google::protobuf::uint32 value);
  
  // optional uint32 FamilyStarLevel = 16;
  inline bool has_familystarlevel() const;
  inline void clear_familystarlevel();
  static const int kFamilyStarLevelFieldNumber = 16;
  inline ::google::protobuf::uint32 familystarlevel() const;
  inline void set_familystarlevel(::google::protobuf::uint32 value);
  
  // optional uint32 WarExp = 17;
  inline bool has_warexp() const;
  inline void clear_warexp();
  static const int kWarExpFieldNumber = 17;
  inline ::google::protobuf::uint32 warexp() const;
  inline void set_warexp(::google::protobuf::uint32 value);
  
  // optional uint32 WarMaxExp = 18;
  inline bool has_warmaxexp() const;
  inline void clear_warmaxexp();
  static const int kWarMaxExpFieldNumber = 18;
  inline ::google::protobuf::uint32 warmaxexp() const;
  inline void set_warmaxexp(::google::protobuf::uint32 value);
  
  // optional string EnemyFamilyName = 19;
  inline bool has_enemyfamilyname() const;
  inline void clear_enemyfamilyname();
  static const int kEnemyFamilyNameFieldNumber = 19;
  inline const ::std::string& enemyfamilyname() const;
  inline void set_enemyfamilyname(const ::std::string& value);
  inline void set_enemyfamilyname(const char* value);
  inline void set_enemyfamilyname(const char* value, size_t size);
  inline ::std::string* mutable_enemyfamilyname();
  
  // optional uint32 WarStatus = 20;
  inline bool has_warstatus() const;
  inline void clear_warstatus();
  static const int kWarStatusFieldNumber = 20;
  inline ::google::protobuf::uint32 warstatus() const;
  inline void set_warstatus(::google::protobuf::uint32 value);
  
  // optional uint32 ChallengeStatus = 21;
  inline bool has_challengestatus() const;
  inline void clear_challengestatus();
  static const int kChallengeStatusFieldNumber = 21;
  inline ::google::protobuf::uint32 challengestatus() const;
  inline void set_challengestatus(::google::protobuf::uint32 value);
  
  // optional uint32 ChallengeMoney = 22;
  inline bool has_challengemoney() const;
  inline void clear_challengemoney();
  static const int kChallengeMoneyFieldNumber = 22;
  inline ::google::protobuf::uint32 challengemoney() const;
  inline void set_challengemoney(::google::protobuf::uint32 value);
  
  // optional string ChallengeStarted = 23;
  inline bool has_challengestarted() const;
  inline void clear_challengestarted();
  static const int kChallengeStartedFieldNumber = 23;
  inline const ::std::string& challengestarted() const;
  inline void set_challengestarted(const ::std::string& value);
  inline void set_challengestarted(const char* value);
  inline void set_challengestarted(const char* value, size_t size);
  inline ::std::string* mutable_challengestarted();
  
  // optional string ChallengeReceived = 24;
  inline bool has_challengereceived() const;
  inline void clear_challengereceived();
  static const int kChallengeReceivedFieldNumber = 24;
  inline const ::std::string& challengereceived() const;
  inline void set_challengereceived(const ::std::string& value);
  inline void set_challengereceived(const char* value);
  inline void set_challengereceived(const char* value, size_t size);
  inline ::std::string* mutable_challengereceived();
  
  // optional uint32 MaxFamilyMemberNum = 25;
  inline bool has_maxfamilymembernum() const;
  inline void clear_maxfamilymembernum();
  static const int kMaxFamilyMemberNumFieldNumber = 25;
  inline ::google::protobuf::uint32 maxfamilymembernum() const;
  inline void set_maxfamilymembernum(::google::protobuf::uint32 value);
  
  // optional uint32 CanLevelUP = 26;
  inline bool has_canlevelup() const;
  inline void clear_canlevelup();
  static const int kCanLevelUPFieldNumber = 26;
  inline ::google::protobuf::uint32 canlevelup() const;
  inline void set_canlevelup(::google::protobuf::uint32 value);
  
  // optional uint32 MaxPresterNum = 27;
  inline bool has_maxpresternum() const;
  inline void clear_maxpresternum();
  static const int kMaxPresterNumFieldNumber = 27;
  inline ::google::protobuf::uint32 maxpresternum() const;
  inline void set_maxpresternum(::google::protobuf::uint32 value);
  
  // optional uint32 GloryLimit = 28;
  inline bool has_glorylimit() const;
  inline void clear_glorylimit();
  static const int kGloryLimitFieldNumber = 28;
  inline ::google::protobuf::uint32 glorylimit() const;
  inline void set_glorylimit(::google::protobuf::uint32 value);
  
  // optional uint32 LevelMoney = 29;
  inline bool has_levelmoney() const;
  inline void clear_levelmoney();
  static const int kLevelMoneyFieldNumber = 29;
  inline ::google::protobuf::uint32 levelmoney() const;
  inline void set_levelmoney(::google::protobuf::uint32 value);
  
  // optional uint32 Stability = 30;
  inline bool has_stability() const;
  inline void clear_stability();
  static const int kStabilityFieldNumber = 30;
  inline ::google::protobuf::uint32 stability() const;
  inline void set_stability(::google::protobuf::uint32 value);
  
  // optional uint32 ReduceStability = 31;
  inline bool has_reducestability() const;
  inline void clear_reducestability();
  static const int kReduceStabilityFieldNumber = 31;
  inline ::google::protobuf::uint32 reducestability() const;
  inline void set_reducestability(::google::protobuf::uint32 value);
  
  // optional uint32 ExtraRedstonExp = 32;
  inline bool has_extraredstonexp() const;
  inline void clear_extraredstonexp();
  static const int kExtraRedstonExpFieldNumber = 32;
  inline ::google::protobuf::uint32 extraredstonexp() const;
  inline void set_extraredstonexp(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::std::string* familynotice_;
  static const ::std::string _default_familynotice_;
  ::google::protobuf::uint32 familynum_;
  ::google::protobuf::uint32 familylevel_;
  ::google::protobuf::uint32 familymoney_;
  ::google::protobuf::uint32 familyheaderid_;
  ::std::string* familyheadername_;
  static const ::std::string _default_familyheadername_;
  ::google::protobuf::uint32 familyglory_;
  ::google::protobuf::uint32 npcid_;
  ::google::protobuf::uint32 bidmoney_;
  ::google::protobuf::uint32 bidtime_;
  ::google::protobuf::uint32 warnpcstatus_;
  ::google::protobuf::uint32 warrank_;
  ::google::protobuf::uint32 warwinnum_;
  ::google::protobuf::uint32 warlostnum_;
  ::google::protobuf::uint32 familystarlevel_;
  ::google::protobuf::uint32 warexp_;
  ::google::protobuf::uint32 warmaxexp_;
  ::std::string* enemyfamilyname_;
  static const ::std::string _default_enemyfamilyname_;
  ::google::protobuf::uint32 warstatus_;
  ::google::protobuf::uint32 challengestatus_;
  ::google::protobuf::uint32 challengemoney_;
  ::std::string* challengestarted_;
  static const ::std::string _default_challengestarted_;
  ::std::string* challengereceived_;
  static const ::std::string _default_challengereceived_;
  ::google::protobuf::uint32 maxfamilymembernum_;
  ::google::protobuf::uint32 canlevelup_;
  ::google::protobuf::uint32 maxpresternum_;
  ::google::protobuf::uint32 glorylimit_;
  ::google::protobuf::uint32 levelmoney_;
  ::google::protobuf::uint32 stability_;
  ::google::protobuf::uint32 reducestability_;
  ::google::protobuf::uint32 extraredstonexp_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(32 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageGetFamilyPropertyResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageGetAllFanmilyInfoRequest : public ::google::protobuf::Message {
 public:
  CMessageGetAllFanmilyInfoRequest();
  virtual ~CMessageGetAllFanmilyInfoRequest();
  
  CMessageGetAllFanmilyInfoRequest(const CMessageGetAllFanmilyInfoRequest& from);
  
  inline CMessageGetAllFanmilyInfoRequest& operator=(const CMessageGetAllFanmilyInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageGetAllFanmilyInfoRequest& default_instance();
  void Swap(CMessageGetAllFanmilyInfoRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageGetAllFanmilyInfoRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageGetAllFanmilyInfoRequest& from);
  void MergeFrom(const CMessageGetAllFanmilyInfoRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 CurPage = 2;
  inline bool has_curpage() const;
  inline void clear_curpage();
  static const int kCurPageFieldNumber = 2;
  inline ::google::protobuf::uint32 curpage() const;
  inline void set_curpage(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 curpage_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageGetAllFanmilyInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageGetAllFamilyInfoResponse : public ::google::protobuf::Message {
 public:
  CMessageGetAllFamilyInfoResponse();
  virtual ~CMessageGetAllFamilyInfoResponse();
  
  CMessageGetAllFamilyInfoResponse(const CMessageGetAllFamilyInfoResponse& from);
  
  inline CMessageGetAllFamilyInfoResponse& operator=(const CMessageGetAllFamilyInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageGetAllFamilyInfoResponse& default_instance();
  void Swap(CMessageGetAllFamilyInfoResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageGetAllFamilyInfoResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageGetAllFamilyInfoResponse& from);
  void MergeFrom(const CMessageGetAllFamilyInfoResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional .PBFamilyList FamilyInfo = 2;
  inline bool has_familyinfo() const;
  inline void clear_familyinfo();
  static const int kFamilyInfoFieldNumber = 2;
  inline const ::PBFamilyList& familyinfo() const;
  inline ::PBFamilyList* mutable_familyinfo();
  
  // optional uint32 CurPage = 3;
  inline bool has_curpage() const;
  inline void clear_curpage();
  static const int kCurPageFieldNumber = 3;
  inline ::google::protobuf::uint32 curpage() const;
  inline void set_curpage(::google::protobuf::uint32 value);
  
  // optional uint32 TotalPage = 4;
  inline bool has_totalpage() const;
  inline void clear_totalpage();
  static const int kTotalPageFieldNumber = 4;
  inline ::google::protobuf::uint32 totalpage() const;
  inline void set_totalpage(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::PBFamilyList* familyinfo_;
  ::google::protobuf::uint32 curpage_;
  ::google::protobuf::uint32 totalpage_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageGetAllFamilyInfoResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageGetApplyListRequest : public ::google::protobuf::Message {
 public:
  CMessageGetApplyListRequest();
  virtual ~CMessageGetApplyListRequest();
  
  CMessageGetApplyListRequest(const CMessageGetApplyListRequest& from);
  
  inline CMessageGetApplyListRequest& operator=(const CMessageGetApplyListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageGetApplyListRequest& default_instance();
  void Swap(CMessageGetApplyListRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageGetApplyListRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageGetApplyListRequest& from);
  void MergeFrom(const CMessageGetApplyListRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 FamilyID = 2;
  inline bool has_familyid() const;
  inline void clear_familyid();
  static const int kFamilyIDFieldNumber = 2;
  inline ::google::protobuf::uint32 familyid() const;
  inline void set_familyid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 familyid_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageGetApplyListRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageGetApplyListResponse : public ::google::protobuf::Message {
 public:
  CMessageGetApplyListResponse();
  virtual ~CMessageGetApplyListResponse();
  
  CMessageGetApplyListResponse(const CMessageGetApplyListResponse& from);
  
  inline CMessageGetApplyListResponse& operator=(const CMessageGetApplyListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageGetApplyListResponse& default_instance();
  void Swap(CMessageGetApplyListResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageGetApplyListResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageGetApplyListResponse& from);
  void MergeFrom(const CMessageGetApplyListResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional .PBApplyList ApplyList = 2;
  inline bool has_applylist() const;
  inline void clear_applylist();
  static const int kApplyListFieldNumber = 2;
  inline const ::PBApplyList& applylist() const;
  inline ::PBApplyList* mutable_applylist();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::PBApplyList* applylist_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageGetApplyListResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageKickPlayerRequest : public ::google::protobuf::Message {
 public:
  CMessageKickPlayerRequest();
  virtual ~CMessageKickPlayerRequest();
  
  CMessageKickPlayerRequest(const CMessageKickPlayerRequest& from);
  
  inline CMessageKickPlayerRequest& operator=(const CMessageKickPlayerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageKickPlayerRequest& default_instance();
  void Swap(CMessageKickPlayerRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageKickPlayerRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageKickPlayerRequest& from);
  void MergeFrom(const CMessageKickPlayerRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 PlayerCharID = 2;
  inline bool has_playercharid() const;
  inline void clear_playercharid();
  static const int kPlayerCharIDFieldNumber = 2;
  inline ::google::protobuf::uint32 playercharid() const;
  inline void set_playercharid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 playercharid_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageKickPlayerRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageKickPlayerResponse : public ::google::protobuf::Message {
 public:
  CMessageKickPlayerResponse();
  virtual ~CMessageKickPlayerResponse();
  
  CMessageKickPlayerResponse(const CMessageKickPlayerResponse& from);
  
  inline CMessageKickPlayerResponse& operator=(const CMessageKickPlayerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageKickPlayerResponse& default_instance();
  void Swap(CMessageKickPlayerResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageKickPlayerResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageKickPlayerResponse& from);
  void MergeFrom(const CMessageKickPlayerResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 Errcode = 2;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 2;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);
  
  // optional string PlayerName = 3;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayerNameFieldNumber = 3;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  
  // optional uint32 PlayerCharID = 4;
  inline bool has_playercharid() const;
  inline void clear_playercharid();
  static const int kPlayerCharIDFieldNumber = 4;
  inline ::google::protobuf::uint32 playercharid() const;
  inline void set_playercharid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 errcode_;
  ::std::string* playername_;
  static const ::std::string _default_playername_;
  ::google::protobuf::uint32 playercharid_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageKickPlayerResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageKickPlayerNotify : public ::google::protobuf::Message {
 public:
  CMessageKickPlayerNotify();
  virtual ~CMessageKickPlayerNotify();
  
  CMessageKickPlayerNotify(const CMessageKickPlayerNotify& from);
  
  inline CMessageKickPlayerNotify& operator=(const CMessageKickPlayerNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageKickPlayerNotify& default_instance();
  void Swap(CMessageKickPlayerNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageKickPlayerNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageKickPlayerNotify& from);
  void MergeFrom(const CMessageKickPlayerNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional string PlayerName = 2;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayerNameFieldNumber = 2;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  
  // optional uint32 PlayerCharID = 3;
  inline bool has_playercharid() const;
  inline void clear_playercharid();
  static const int kPlayerCharIDFieldNumber = 3;
  inline ::google::protobuf::uint32 playercharid() const;
  inline void set_playercharid(::google::protobuf::uint32 value);
  
  // optional string ManagerName = 4;
  inline bool has_managername() const;
  inline void clear_managername();
  static const int kManagerNameFieldNumber = 4;
  inline const ::std::string& managername() const;
  inline void set_managername(const ::std::string& value);
  inline void set_managername(const char* value);
  inline void set_managername(const char* value, size_t size);
  inline ::std::string* mutable_managername();
  
  // optional uint32 ManagerCharID = 5;
  inline bool has_managercharid() const;
  inline void clear_managercharid();
  static const int kManagerCharIDFieldNumber = 5;
  inline ::google::protobuf::uint32 managercharid() const;
  inline void set_managercharid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::std::string* playername_;
  static const ::std::string _default_playername_;
  ::google::protobuf::uint32 playercharid_;
  ::std::string* managername_;
  static const ::std::string _default_managername_;
  ::google::protobuf::uint32 managercharid_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageKickPlayerNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessageDisbandFamilyRequest : public ::google::protobuf::Message {
 public:
  CMessageDisbandFamilyRequest();
  virtual ~CMessageDisbandFamilyRequest();
  
  CMessageDisbandFamilyRequest(const CMessageDisbandFamilyRequest& from);
  
  inline CMessageDisbandFamilyRequest& operator=(const CMessageDisbandFamilyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageDisbandFamilyRequest& default_instance();
  void Swap(CMessageDisbandFamilyRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageDisbandFamilyRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageDisbandFamilyRequest& from);
  void MergeFrom(const CMessageDisbandFamilyRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 MsgCode = 2;
  inline bool has_msgcode() const;
  inline void clear_msgcode();
  static const int kMsgCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 msgcode() const;
  inline void set_msgcode(::google::protobuf::uint32 value);
  
  // optional uint32 NpcEntityID = 3;
  inline bool has_npcentityid() const;
  inline void clear_npcentityid();
  static const int kNpcEntityIDFieldNumber = 3;
  inline ::google::protobuf::uint32 npcentityid() const;
  inline void set_npcentityid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 msgcode_;
  ::google::protobuf::uint32 npcentityid_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageDisbandFamilyRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageDisbandFamilyResponse : public ::google::protobuf::Message {
 public:
  CMessageDisbandFamilyResponse();
  virtual ~CMessageDisbandFamilyResponse();
  
  CMessageDisbandFamilyResponse(const CMessageDisbandFamilyResponse& from);
  
  inline CMessageDisbandFamilyResponse& operator=(const CMessageDisbandFamilyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageDisbandFamilyResponse& default_instance();
  void Swap(CMessageDisbandFamilyResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageDisbandFamilyResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageDisbandFamilyResponse& from);
  void MergeFrom(const CMessageDisbandFamilyResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 Errcode = 2;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 2;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 errcode_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageDisbandFamilyResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageDisbandFamilyNotify : public ::google::protobuf::Message {
 public:
  CMessageDisbandFamilyNotify();
  virtual ~CMessageDisbandFamilyNotify();
  
  CMessageDisbandFamilyNotify(const CMessageDisbandFamilyNotify& from);
  
  inline CMessageDisbandFamilyNotify& operator=(const CMessageDisbandFamilyNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageDisbandFamilyNotify& default_instance();
  void Swap(CMessageDisbandFamilyNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageDisbandFamilyNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageDisbandFamilyNotify& from);
  void MergeFrom(const CMessageDisbandFamilyNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 ManagerCharID = 2;
  inline bool has_managercharid() const;
  inline void clear_managercharid();
  static const int kManagerCharIDFieldNumber = 2;
  inline ::google::protobuf::uint32 managercharid() const;
  inline void set_managercharid(::google::protobuf::uint32 value);
  
  // optional uint32 FamilyID = 3;
  inline bool has_familyid() const;
  inline void clear_familyid();
  static const int kFamilyIDFieldNumber = 3;
  inline ::google::protobuf::uint32 familyid() const;
  inline void set_familyid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 managercharid_;
  ::google::protobuf::uint32 familyid_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageDisbandFamilyNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessageChangeFamilyNoticeRequest : public ::google::protobuf::Message {
 public:
  CMessageChangeFamilyNoticeRequest();
  virtual ~CMessageChangeFamilyNoticeRequest();
  
  CMessageChangeFamilyNoticeRequest(const CMessageChangeFamilyNoticeRequest& from);
  
  inline CMessageChangeFamilyNoticeRequest& operator=(const CMessageChangeFamilyNoticeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageChangeFamilyNoticeRequest& default_instance();
  void Swap(CMessageChangeFamilyNoticeRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageChangeFamilyNoticeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageChangeFamilyNoticeRequest& from);
  void MergeFrom(const CMessageChangeFamilyNoticeRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional string Notice = 2;
  inline bool has_notice() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 2;
  inline const ::std::string& notice() const;
  inline void set_notice(const ::std::string& value);
  inline void set_notice(const char* value);
  inline void set_notice(const char* value, size_t size);
  inline ::std::string* mutable_notice();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::std::string* notice_;
  static const ::std::string _default_notice_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageChangeFamilyNoticeRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageChangeFamilyNoticeResponse : public ::google::protobuf::Message {
 public:
  CMessageChangeFamilyNoticeResponse();
  virtual ~CMessageChangeFamilyNoticeResponse();
  
  CMessageChangeFamilyNoticeResponse(const CMessageChangeFamilyNoticeResponse& from);
  
  inline CMessageChangeFamilyNoticeResponse& operator=(const CMessageChangeFamilyNoticeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageChangeFamilyNoticeResponse& default_instance();
  void Swap(CMessageChangeFamilyNoticeResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageChangeFamilyNoticeResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageChangeFamilyNoticeResponse& from);
  void MergeFrom(const CMessageChangeFamilyNoticeResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 Errcode = 2;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 2;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);
  
  // optional string Notice = 3;
  inline bool has_notice() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 3;
  inline const ::std::string& notice() const;
  inline void set_notice(const ::std::string& value);
  inline void set_notice(const char* value);
  inline void set_notice(const char* value, size_t size);
  inline ::std::string* mutable_notice();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 errcode_;
  ::std::string* notice_;
  static const ::std::string _default_notice_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageChangeFamilyNoticeResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageAppointHeaderRequest : public ::google::protobuf::Message {
 public:
  CMessageAppointHeaderRequest();
  virtual ~CMessageAppointHeaderRequest();
  
  CMessageAppointHeaderRequest(const CMessageAppointHeaderRequest& from);
  
  inline CMessageAppointHeaderRequest& operator=(const CMessageAppointHeaderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageAppointHeaderRequest& default_instance();
  void Swap(CMessageAppointHeaderRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageAppointHeaderRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageAppointHeaderRequest& from);
  void MergeFrom(const CMessageAppointHeaderRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 PlayerCharID = 2;
  inline bool has_playercharid() const;
  inline void clear_playercharid();
  static const int kPlayerCharIDFieldNumber = 2;
  inline ::google::protobuf::uint32 playercharid() const;
  inline void set_playercharid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 playercharid_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageAppointHeaderRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageAppointHeaderResponse : public ::google::protobuf::Message {
 public:
  CMessageAppointHeaderResponse();
  virtual ~CMessageAppointHeaderResponse();
  
  CMessageAppointHeaderResponse(const CMessageAppointHeaderResponse& from);
  
  inline CMessageAppointHeaderResponse& operator=(const CMessageAppointHeaderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageAppointHeaderResponse& default_instance();
  void Swap(CMessageAppointHeaderResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageAppointHeaderResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageAppointHeaderResponse& from);
  void MergeFrom(const CMessageAppointHeaderResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 Errcode = 2;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 2;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);
  
  // optional uint32 PlayerCharID = 3;
  inline bool has_playercharid() const;
  inline void clear_playercharid();
  static const int kPlayerCharIDFieldNumber = 3;
  inline ::google::protobuf::uint32 playercharid() const;
  inline void set_playercharid(::google::protobuf::uint32 value);
  
  // optional string PlayerName = 4;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayerNameFieldNumber = 4;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 errcode_;
  ::google::protobuf::uint32 playercharid_;
  ::std::string* playername_;
  static const ::std::string _default_playername_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageAppointHeaderResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageChangeHeaderNotify : public ::google::protobuf::Message {
 public:
  CMessageChangeHeaderNotify();
  virtual ~CMessageChangeHeaderNotify();
  
  CMessageChangeHeaderNotify(const CMessageChangeHeaderNotify& from);
  
  inline CMessageChangeHeaderNotify& operator=(const CMessageChangeHeaderNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageChangeHeaderNotify& default_instance();
  void Swap(CMessageChangeHeaderNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageChangeHeaderNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageChangeHeaderNotify& from);
  void MergeFrom(const CMessageChangeHeaderNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 PlayerCharID = 2;
  inline bool has_playercharid() const;
  inline void clear_playercharid();
  static const int kPlayerCharIDFieldNumber = 2;
  inline ::google::protobuf::uint32 playercharid() const;
  inline void set_playercharid(::google::protobuf::uint32 value);
  
  // optional string PlayerName = 3;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayerNameFieldNumber = 3;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  
  // optional uint32 ManagerID = 4;
  inline bool has_managerid() const;
  inline void clear_managerid();
  static const int kManagerIDFieldNumber = 4;
  inline ::google::protobuf::uint32 managerid() const;
  inline void set_managerid(::google::protobuf::uint32 value);
  
  // optional string ManagerName = 5;
  inline bool has_managername() const;
  inline void clear_managername();
  static const int kManagerNameFieldNumber = 5;
  inline const ::std::string& managername() const;
  inline void set_managername(const ::std::string& value);
  inline void set_managername(const char* value);
  inline void set_managername(const char* value, size_t size);
  inline ::std::string* mutable_managername();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 playercharid_;
  ::std::string* playername_;
  static const ::std::string _default_playername_;
  ::google::protobuf::uint32 managerid_;
  ::std::string* managername_;
  static const ::std::string _default_managername_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageChangeHeaderNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessageFamilyPropertyNotify : public ::google::protobuf::Message {
 public:
  CMessageFamilyPropertyNotify();
  virtual ~CMessageFamilyPropertyNotify();
  
  CMessageFamilyPropertyNotify(const CMessageFamilyPropertyNotify& from);
  
  inline CMessageFamilyPropertyNotify& operator=(const CMessageFamilyPropertyNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageFamilyPropertyNotify& default_instance();
  void Swap(CMessageFamilyPropertyNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageFamilyPropertyNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageFamilyPropertyNotify& from);
  void MergeFrom(const CMessageFamilyPropertyNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional .PBFamilyPropery Property = 2;
  inline bool has_property() const;
  inline void clear_property();
  static const int kPropertyFieldNumber = 2;
  inline const ::PBFamilyPropery& property() const;
  inline ::PBFamilyPropery* mutable_property();
  
  // optional uint32 FamilyLevel = 3;
  inline bool has_familylevel() const;
  inline void clear_familylevel();
  static const int kFamilyLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 familylevel() const;
  inline void set_familylevel(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::PBFamilyPropery* property_;
  ::google::protobuf::uint32 familylevel_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageFamilyPropertyNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessageInviteFamilyResultNotify : public ::google::protobuf::Message {
 public:
  CMessageInviteFamilyResultNotify();
  virtual ~CMessageInviteFamilyResultNotify();
  
  CMessageInviteFamilyResultNotify(const CMessageInviteFamilyResultNotify& from);
  
  inline CMessageInviteFamilyResultNotify& operator=(const CMessageInviteFamilyResultNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageInviteFamilyResultNotify& default_instance();
  void Swap(CMessageInviteFamilyResultNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageInviteFamilyResultNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageInviteFamilyResultNotify& from);
  void MergeFrom(const CMessageInviteFamilyResultNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 Result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);
  
  // optional string RoleName = 3;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 3;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 result_;
  ::std::string* rolename_;
  static const ::std::string _default_rolename_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageInviteFamilyResultNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessageClearFamilyApplyRequest : public ::google::protobuf::Message {
 public:
  CMessageClearFamilyApplyRequest();
  virtual ~CMessageClearFamilyApplyRequest();
  
  CMessageClearFamilyApplyRequest(const CMessageClearFamilyApplyRequest& from);
  
  inline CMessageClearFamilyApplyRequest& operator=(const CMessageClearFamilyApplyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageClearFamilyApplyRequest& default_instance();
  void Swap(CMessageClearFamilyApplyRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageClearFamilyApplyRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageClearFamilyApplyRequest& from);
  void MergeFrom(const CMessageClearFamilyApplyRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 MsgCode = 2;
  inline bool has_msgcode() const;
  inline void clear_msgcode();
  static const int kMsgCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 msgcode() const;
  inline void set_msgcode(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 msgcode_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageClearFamilyApplyRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageClearFamilyApplyResponse : public ::google::protobuf::Message {
 public:
  CMessageClearFamilyApplyResponse();
  virtual ~CMessageClearFamilyApplyResponse();
  
  CMessageClearFamilyApplyResponse(const CMessageClearFamilyApplyResponse& from);
  
  inline CMessageClearFamilyApplyResponse& operator=(const CMessageClearFamilyApplyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageClearFamilyApplyResponse& default_instance();
  void Swap(CMessageClearFamilyApplyResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageClearFamilyApplyResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageClearFamilyApplyResponse& from);
  void MergeFrom(const CMessageClearFamilyApplyResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 Errcode = 2;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 2;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 errcode_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageClearFamilyApplyResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageJoinCorpsNotify : public ::google::protobuf::Message {
 public:
  CMessageJoinCorpsNotify();
  virtual ~CMessageJoinCorpsNotify();
  
  CMessageJoinCorpsNotify(const CMessageJoinCorpsNotify& from);
  
  inline CMessageJoinCorpsNotify& operator=(const CMessageJoinCorpsNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageJoinCorpsNotify& default_instance();
  void Swap(CMessageJoinCorpsNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageJoinCorpsNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageJoinCorpsNotify& from);
  void MergeFrom(const CMessageJoinCorpsNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 CorpsID = 2;
  inline bool has_corpsid() const;
  inline void clear_corpsid();
  static const int kCorpsIDFieldNumber = 2;
  inline ::google::protobuf::uint32 corpsid() const;
  inline void set_corpsid(::google::protobuf::uint32 value);
  
  // optional string CorpsName = 3;
  inline bool has_corpsname() const;
  inline void clear_corpsname();
  static const int kCorpsNameFieldNumber = 3;
  inline const ::std::string& corpsname() const;
  inline void set_corpsname(const ::std::string& value);
  inline void set_corpsname(const char* value);
  inline void set_corpsname(const char* value, size_t size);
  inline ::std::string* mutable_corpsname();
  
  // optional uint32 JoinMethod = 4;
  inline bool has_joinmethod() const;
  inline void clear_joinmethod();
  static const int kJoinMethodFieldNumber = 4;
  inline ::google::protobuf::uint32 joinmethod() const;
  inline void set_joinmethod(::google::protobuf::uint32 value);
  
  // optional uint32 UnionID = 5;
  inline bool has_unionid() const;
  inline void clear_unionid();
  static const int kUnionIDFieldNumber = 5;
  inline ::google::protobuf::uint32 unionid() const;
  inline void set_unionid(::google::protobuf::uint32 value);
  
  // optional string UnionName = 6;
  inline bool has_unionname() const;
  inline void clear_unionname();
  static const int kUnionNameFieldNumber = 6;
  inline const ::std::string& unionname() const;
  inline void set_unionname(const ::std::string& value);
  inline void set_unionname(const char* value);
  inline void set_unionname(const char* value, size_t size);
  inline ::std::string* mutable_unionname();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 corpsid_;
  ::std::string* corpsname_;
  static const ::std::string _default_corpsname_;
  ::google::protobuf::uint32 joinmethod_;
  ::google::protobuf::uint32 unionid_;
  ::std::string* unionname_;
  static const ::std::string _default_unionname_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageJoinCorpsNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessageCancelFamilyDisbandRequest : public ::google::protobuf::Message {
 public:
  CMessageCancelFamilyDisbandRequest();
  virtual ~CMessageCancelFamilyDisbandRequest();
  
  CMessageCancelFamilyDisbandRequest(const CMessageCancelFamilyDisbandRequest& from);
  
  inline CMessageCancelFamilyDisbandRequest& operator=(const CMessageCancelFamilyDisbandRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageCancelFamilyDisbandRequest& default_instance();
  void Swap(CMessageCancelFamilyDisbandRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageCancelFamilyDisbandRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageCancelFamilyDisbandRequest& from);
  void MergeFrom(const CMessageCancelFamilyDisbandRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 NpcEntityID = 2;
  inline bool has_npcentityid() const;
  inline void clear_npcentityid();
  static const int kNpcEntityIDFieldNumber = 2;
  inline ::google::protobuf::uint32 npcentityid() const;
  inline void set_npcentityid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 npcentityid_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageCancelFamilyDisbandRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageCancelFamilyDisbandResponse : public ::google::protobuf::Message {
 public:
  CMessageCancelFamilyDisbandResponse();
  virtual ~CMessageCancelFamilyDisbandResponse();
  
  CMessageCancelFamilyDisbandResponse(const CMessageCancelFamilyDisbandResponse& from);
  
  inline CMessageCancelFamilyDisbandResponse& operator=(const CMessageCancelFamilyDisbandResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageCancelFamilyDisbandResponse& default_instance();
  void Swap(CMessageCancelFamilyDisbandResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageCancelFamilyDisbandResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageCancelFamilyDisbandResponse& from);
  void MergeFrom(const CMessageCancelFamilyDisbandResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 Errcode = 2;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 2;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 errcode_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageCancelFamilyDisbandResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageChangeFamilyNoticeNotify : public ::google::protobuf::Message {
 public:
  CMessageChangeFamilyNoticeNotify();
  virtual ~CMessageChangeFamilyNoticeNotify();
  
  CMessageChangeFamilyNoticeNotify(const CMessageChangeFamilyNoticeNotify& from);
  
  inline CMessageChangeFamilyNoticeNotify& operator=(const CMessageChangeFamilyNoticeNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageChangeFamilyNoticeNotify& default_instance();
  void Swap(CMessageChangeFamilyNoticeNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageChangeFamilyNoticeNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageChangeFamilyNoticeNotify& from);
  void MergeFrom(const CMessageChangeFamilyNoticeNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional string Notice = 2;
  inline bool has_notice() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 2;
  inline const ::std::string& notice() const;
  inline void set_notice(const ::std::string& value);
  inline void set_notice(const char* value);
  inline void set_notice(const char* value, size_t size);
  inline ::std::string* mutable_notice();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::std::string* notice_;
  static const ::std::string _default_notice_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageChangeFamilyNoticeNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessageRefreshFamilyInfoRequest : public ::google::protobuf::Message {
 public:
  CMessageRefreshFamilyInfoRequest();
  virtual ~CMessageRefreshFamilyInfoRequest();
  
  CMessageRefreshFamilyInfoRequest(const CMessageRefreshFamilyInfoRequest& from);
  
  inline CMessageRefreshFamilyInfoRequest& operator=(const CMessageRefreshFamilyInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageRefreshFamilyInfoRequest& default_instance();
  void Swap(CMessageRefreshFamilyInfoRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageRefreshFamilyInfoRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageRefreshFamilyInfoRequest& from);
  void MergeFrom(const CMessageRefreshFamilyInfoRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 MsgCode = 2;
  inline bool has_msgcode() const;
  inline void clear_msgcode();
  static const int kMsgCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 msgcode() const;
  inline void set_msgcode(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 msgcode_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageRefreshFamilyInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageRefreshFamilyInfoResponse : public ::google::protobuf::Message {
 public:
  CMessageRefreshFamilyInfoResponse();
  virtual ~CMessageRefreshFamilyInfoResponse();
  
  CMessageRefreshFamilyInfoResponse(const CMessageRefreshFamilyInfoResponse& from);
  
  inline CMessageRefreshFamilyInfoResponse& operator=(const CMessageRefreshFamilyInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageRefreshFamilyInfoResponse& default_instance();
  void Swap(CMessageRefreshFamilyInfoResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageRefreshFamilyInfoResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageRefreshFamilyInfoResponse& from);
  void MergeFrom(const CMessageRefreshFamilyInfoResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional .PBFamilyMemberList MemberList = 2;
  inline bool has_memberlist() const;
  inline void clear_memberlist();
  static const int kMemberListFieldNumber = 2;
  inline const ::PBFamilyMemberList& memberlist() const;
  inline ::PBFamilyMemberList* mutable_memberlist();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::PBFamilyMemberList* memberlist_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageRefreshFamilyInfoResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageSetFamilyPostRequest : public ::google::protobuf::Message {
 public:
  CMessageSetFamilyPostRequest();
  virtual ~CMessageSetFamilyPostRequest();
  
  CMessageSetFamilyPostRequest(const CMessageSetFamilyPostRequest& from);
  
  inline CMessageSetFamilyPostRequest& operator=(const CMessageSetFamilyPostRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageSetFamilyPostRequest& default_instance();
  void Swap(CMessageSetFamilyPostRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageSetFamilyPostRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageSetFamilyPostRequest& from);
  void MergeFrom(const CMessageSetFamilyPostRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 MemberID = 2;
  inline bool has_memberid() const;
  inline void clear_memberid();
  static const int kMemberIDFieldNumber = 2;
  inline ::google::protobuf::uint32 memberid() const;
  inline void set_memberid(::google::protobuf::uint32 value);
  
  // optional uint32 Post = 3;
  inline bool has_post() const;
  inline void clear_post();
  static const int kPostFieldNumber = 3;
  inline ::google::protobuf::uint32 post() const;
  inline void set_post(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 memberid_;
  ::google::protobuf::uint32 post_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageSetFamilyPostRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageSetFamilyPostResponse : public ::google::protobuf::Message {
 public:
  CMessageSetFamilyPostResponse();
  virtual ~CMessageSetFamilyPostResponse();
  
  CMessageSetFamilyPostResponse(const CMessageSetFamilyPostResponse& from);
  
  inline CMessageSetFamilyPostResponse& operator=(const CMessageSetFamilyPostResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageSetFamilyPostResponse& default_instance();
  void Swap(CMessageSetFamilyPostResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageSetFamilyPostResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageSetFamilyPostResponse& from);
  void MergeFrom(const CMessageSetFamilyPostResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 Errcode = 2;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 2;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);
  
  // optional uint32 MemberID = 3;
  inline bool has_memberid() const;
  inline void clear_memberid();
  static const int kMemberIDFieldNumber = 3;
  inline ::google::protobuf::uint32 memberid() const;
  inline void set_memberid(::google::protobuf::uint32 value);
  
  // optional uint32 Post = 4;
  inline bool has_post() const;
  inline void clear_post();
  static const int kPostFieldNumber = 4;
  inline ::google::protobuf::uint32 post() const;
  inline void set_post(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 errcode_;
  ::google::protobuf::uint32 memberid_;
  ::google::protobuf::uint32 post_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageSetFamilyPostResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageLevelUPFamilyRequest : public ::google::protobuf::Message {
 public:
  CMessageLevelUPFamilyRequest();
  virtual ~CMessageLevelUPFamilyRequest();
  
  CMessageLevelUPFamilyRequest(const CMessageLevelUPFamilyRequest& from);
  
  inline CMessageLevelUPFamilyRequest& operator=(const CMessageLevelUPFamilyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageLevelUPFamilyRequest& default_instance();
  void Swap(CMessageLevelUPFamilyRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageLevelUPFamilyRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageLevelUPFamilyRequest& from);
  void MergeFrom(const CMessageLevelUPFamilyRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 MsgCode = 2;
  inline bool has_msgcode() const;
  inline void clear_msgcode();
  static const int kMsgCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 msgcode() const;
  inline void set_msgcode(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 msgcode_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageLevelUPFamilyRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageLevelUPFamilyResponse : public ::google::protobuf::Message {
 public:
  CMessageLevelUPFamilyResponse();
  virtual ~CMessageLevelUPFamilyResponse();
  
  CMessageLevelUPFamilyResponse(const CMessageLevelUPFamilyResponse& from);
  
  inline CMessageLevelUPFamilyResponse& operator=(const CMessageLevelUPFamilyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageLevelUPFamilyResponse& default_instance();
  void Swap(CMessageLevelUPFamilyResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageLevelUPFamilyResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageLevelUPFamilyResponse& from);
  void MergeFrom(const CMessageLevelUPFamilyResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 Errcode = 2;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 2;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);
  
  // optional uint32 Level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 errcode_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageLevelUPFamilyResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageContributeFamilyMoneyRequest : public ::google::protobuf::Message {
 public:
  CMessageContributeFamilyMoneyRequest();
  virtual ~CMessageContributeFamilyMoneyRequest();
  
  CMessageContributeFamilyMoneyRequest(const CMessageContributeFamilyMoneyRequest& from);
  
  inline CMessageContributeFamilyMoneyRequest& operator=(const CMessageContributeFamilyMoneyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageContributeFamilyMoneyRequest& default_instance();
  void Swap(CMessageContributeFamilyMoneyRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageContributeFamilyMoneyRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageContributeFamilyMoneyRequest& from);
  void MergeFrom(const CMessageContributeFamilyMoneyRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 Money = 2;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 2;
  inline ::google::protobuf::uint32 money() const;
  inline void set_money(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 money_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageContributeFamilyMoneyRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageContributeFamilyMoneyResponse : public ::google::protobuf::Message {
 public:
  CMessageContributeFamilyMoneyResponse();
  virtual ~CMessageContributeFamilyMoneyResponse();
  
  CMessageContributeFamilyMoneyResponse(const CMessageContributeFamilyMoneyResponse& from);
  
  inline CMessageContributeFamilyMoneyResponse& operator=(const CMessageContributeFamilyMoneyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageContributeFamilyMoneyResponse& default_instance();
  void Swap(CMessageContributeFamilyMoneyResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageContributeFamilyMoneyResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageContributeFamilyMoneyResponse& from);
  void MergeFrom(const CMessageContributeFamilyMoneyResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 Errcode = 2;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 2;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);
  
  // optional uint32 Money = 3;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 3;
  inline ::google::protobuf::uint32 money() const;
  inline void set_money(::google::protobuf::uint32 value);
  
  // optional uint32 Contribute = 4;
  inline bool has_contribute() const;
  inline void clear_contribute();
  static const int kContributeFieldNumber = 4;
  inline ::google::protobuf::uint32 contribute() const;
  inline void set_contribute(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 errcode_;
  ::google::protobuf::uint32 money_;
  ::google::protobuf::uint32 contribute_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageContributeFamilyMoneyResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageObtainFamilyMoneyRequest : public ::google::protobuf::Message {
 public:
  CMessageObtainFamilyMoneyRequest();
  virtual ~CMessageObtainFamilyMoneyRequest();
  
  CMessageObtainFamilyMoneyRequest(const CMessageObtainFamilyMoneyRequest& from);
  
  inline CMessageObtainFamilyMoneyRequest& operator=(const CMessageObtainFamilyMoneyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageObtainFamilyMoneyRequest& default_instance();
  void Swap(CMessageObtainFamilyMoneyRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageObtainFamilyMoneyRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageObtainFamilyMoneyRequest& from);
  void MergeFrom(const CMessageObtainFamilyMoneyRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 NpcID = 2;
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcIDFieldNumber = 2;
  inline ::google::protobuf::uint32 npcid() const;
  inline void set_npcid(::google::protobuf::uint32 value);
  
  // optional uint32 NpcTmpID = 3;
  inline bool has_npctmpid() const;
  inline void clear_npctmpid();
  static const int kNpcTmpIDFieldNumber = 3;
  inline ::google::protobuf::uint32 npctmpid() const;
  inline void set_npctmpid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 npcid_;
  ::google::protobuf::uint32 npctmpid_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageObtainFamilyMoneyRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageObtainFamilyMoneyResponse : public ::google::protobuf::Message {
 public:
  CMessageObtainFamilyMoneyResponse();
  virtual ~CMessageObtainFamilyMoneyResponse();
  
  CMessageObtainFamilyMoneyResponse(const CMessageObtainFamilyMoneyResponse& from);
  
  inline CMessageObtainFamilyMoneyResponse& operator=(const CMessageObtainFamilyMoneyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageObtainFamilyMoneyResponse& default_instance();
  void Swap(CMessageObtainFamilyMoneyResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageObtainFamilyMoneyResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageObtainFamilyMoneyResponse& from);
  void MergeFrom(const CMessageObtainFamilyMoneyResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 Errcode = 2;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 2;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);
  
  // optional uint32 Money = 3;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 3;
  inline ::google::protobuf::uint32 money() const;
  inline void set_money(::google::protobuf::uint32 value);
  
  // optional uint32 Glory = 4;
  inline bool has_glory() const;
  inline void clear_glory();
  static const int kGloryFieldNumber = 4;
  inline ::google::protobuf::uint32 glory() const;
  inline void set_glory(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 errcode_;
  ::google::protobuf::uint32 money_;
  ::google::protobuf::uint32 glory_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageObtainFamilyMoneyResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageSetFamilyPostNotify : public ::google::protobuf::Message {
 public:
  CMessageSetFamilyPostNotify();
  virtual ~CMessageSetFamilyPostNotify();
  
  CMessageSetFamilyPostNotify(const CMessageSetFamilyPostNotify& from);
  
  inline CMessageSetFamilyPostNotify& operator=(const CMessageSetFamilyPostNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageSetFamilyPostNotify& default_instance();
  void Swap(CMessageSetFamilyPostNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageSetFamilyPostNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageSetFamilyPostNotify& from);
  void MergeFrom(const CMessageSetFamilyPostNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 ManagerID = 2;
  inline bool has_managerid() const;
  inline void clear_managerid();
  static const int kManagerIDFieldNumber = 2;
  inline ::google::protobuf::uint32 managerid() const;
  inline void set_managerid(::google::protobuf::uint32 value);
  
  // optional string ManagerName = 3;
  inline bool has_managername() const;
  inline void clear_managername();
  static const int kManagerNameFieldNumber = 3;
  inline const ::std::string& managername() const;
  inline void set_managername(const ::std::string& value);
  inline void set_managername(const char* value);
  inline void set_managername(const char* value, size_t size);
  inline ::std::string* mutable_managername();
  
  // optional uint32 MemberID = 4;
  inline bool has_memberid() const;
  inline void clear_memberid();
  static const int kMemberIDFieldNumber = 4;
  inline ::google::protobuf::uint32 memberid() const;
  inline void set_memberid(::google::protobuf::uint32 value);
  
  // optional string MemberName = 5;
  inline bool has_membername() const;
  inline void clear_membername();
  static const int kMemberNameFieldNumber = 5;
  inline const ::std::string& membername() const;
  inline void set_membername(const ::std::string& value);
  inline void set_membername(const char* value);
  inline void set_membername(const char* value, size_t size);
  inline ::std::string* mutable_membername();
  
  // optional uint32 OriginalPost = 6;
  inline bool has_originalpost() const;
  inline void clear_originalpost();
  static const int kOriginalPostFieldNumber = 6;
  inline ::google::protobuf::uint32 originalpost() const;
  inline void set_originalpost(::google::protobuf::uint32 value);
  
  // optional uint32 NewPost = 7;
  inline bool has_newpost() const;
  inline void clear_newpost();
  static const int kNewPostFieldNumber = 7;
  inline ::google::protobuf::uint32 newpost() const;
  inline void set_newpost(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 managerid_;
  ::std::string* managername_;
  static const ::std::string _default_managername_;
  ::google::protobuf::uint32 memberid_;
  ::std::string* membername_;
  static const ::std::string _default_membername_;
  ::google::protobuf::uint32 originalpost_;
  ::google::protobuf::uint32 newpost_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageSetFamilyPostNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessageLevelUPFamilyNotify : public ::google::protobuf::Message {
 public:
  CMessageLevelUPFamilyNotify();
  virtual ~CMessageLevelUPFamilyNotify();
  
  CMessageLevelUPFamilyNotify(const CMessageLevelUPFamilyNotify& from);
  
  inline CMessageLevelUPFamilyNotify& operator=(const CMessageLevelUPFamilyNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageLevelUPFamilyNotify& default_instance();
  void Swap(CMessageLevelUPFamilyNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageLevelUPFamilyNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageLevelUPFamilyNotify& from);
  void MergeFrom(const CMessageLevelUPFamilyNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 Level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);
  
  // optional uint32 Money = 3;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 3;
  inline ::google::protobuf::uint32 money() const;
  inline void set_money(::google::protobuf::uint32 value);
  
  // optional uint32 Glory = 4;
  inline bool has_glory() const;
  inline void clear_glory();
  static const int kGloryFieldNumber = 4;
  inline ::google::protobuf::uint32 glory() const;
  inline void set_glory(::google::protobuf::uint32 value);
  
  // optional uint32 MaxFamilyMember = 5;
  inline bool has_maxfamilymember() const;
  inline void clear_maxfamilymember();
  static const int kMaxFamilyMemberFieldNumber = 5;
  inline ::google::protobuf::uint32 maxfamilymember() const;
  inline void set_maxfamilymember(::google::protobuf::uint32 value);
  
  // optional uint32 MaxPresterNum = 6;
  inline bool has_maxpresternum() const;
  inline void clear_maxpresternum();
  static const int kMaxPresterNumFieldNumber = 6;
  inline ::google::protobuf::uint32 maxpresternum() const;
  inline void set_maxpresternum(::google::protobuf::uint32 value);
  
  // optional uint32 LevelMoney = 7;
  inline bool has_levelmoney() const;
  inline void clear_levelmoney();
  static const int kLevelMoneyFieldNumber = 7;
  inline ::google::protobuf::uint32 levelmoney() const;
  inline void set_levelmoney(::google::protobuf::uint32 value);
  
  // optional uint32 LevelGlory = 8;
  inline bool has_levelglory() const;
  inline void clear_levelglory();
  static const int kLevelGloryFieldNumber = 8;
  inline ::google::protobuf::uint32 levelglory() const;
  inline void set_levelglory(::google::protobuf::uint32 value);
  
  // optional uint32 Stability = 9;
  inline bool has_stability() const;
  inline void clear_stability();
  static const int kStabilityFieldNumber = 9;
  inline ::google::protobuf::uint32 stability() const;
  inline void set_stability(::google::protobuf::uint32 value);
  
  // optional uint32 ReduceStability = 10;
  inline bool has_reducestability() const;
  inline void clear_reducestability();
  static const int kReduceStabilityFieldNumber = 10;
  inline ::google::protobuf::uint32 reducestability() const;
  inline void set_reducestability(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 money_;
  ::google::protobuf::uint32 glory_;
  ::google::protobuf::uint32 maxfamilymember_;
  ::google::protobuf::uint32 maxpresternum_;
  ::google::protobuf::uint32 levelmoney_;
  ::google::protobuf::uint32 levelglory_;
  ::google::protobuf::uint32 stability_;
  ::google::protobuf::uint32 reducestability_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageLevelUPFamilyNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessageFamilyBidNpcRequest : public ::google::protobuf::Message {
 public:
  CMessageFamilyBidNpcRequest();
  virtual ~CMessageFamilyBidNpcRequest();
  
  CMessageFamilyBidNpcRequest(const CMessageFamilyBidNpcRequest& from);
  
  inline CMessageFamilyBidNpcRequest& operator=(const CMessageFamilyBidNpcRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageFamilyBidNpcRequest& default_instance();
  void Swap(CMessageFamilyBidNpcRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageFamilyBidNpcRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageFamilyBidNpcRequest& from);
  void MergeFrom(const CMessageFamilyBidNpcRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 NpcID = 2;
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcIDFieldNumber = 2;
  inline ::google::protobuf::uint32 npcid() const;
  inline void set_npcid(::google::protobuf::uint32 value);
  
  // optional uint32 Money = 3;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 3;
  inline ::google::protobuf::uint32 money() const;
  inline void set_money(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 npcid_;
  ::google::protobuf::uint32 money_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageFamilyBidNpcRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageFamilyBidNpcResponse : public ::google::protobuf::Message {
 public:
  CMessageFamilyBidNpcResponse();
  virtual ~CMessageFamilyBidNpcResponse();
  
  CMessageFamilyBidNpcResponse(const CMessageFamilyBidNpcResponse& from);
  
  inline CMessageFamilyBidNpcResponse& operator=(const CMessageFamilyBidNpcResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageFamilyBidNpcResponse& default_instance();
  void Swap(CMessageFamilyBidNpcResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageFamilyBidNpcResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageFamilyBidNpcResponse& from);
  void MergeFrom(const CMessageFamilyBidNpcResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 Result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);
  
  // optional uint32 NpcID = 3;
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcIDFieldNumber = 3;
  inline ::google::protobuf::uint32 npcid() const;
  inline void set_npcid(::google::protobuf::uint32 value);
  
  // optional uint32 Money = 4;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 4;
  inline ::google::protobuf::uint32 money() const;
  inline void set_money(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 result_;
  ::google::protobuf::uint32 npcid_;
  ::google::protobuf::uint32 money_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageFamilyBidNpcResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageMemberSubmitNotify : public ::google::protobuf::Message {
 public:
  CMessageMemberSubmitNotify();
  virtual ~CMessageMemberSubmitNotify();
  
  CMessageMemberSubmitNotify(const CMessageMemberSubmitNotify& from);
  
  inline CMessageMemberSubmitNotify& operator=(const CMessageMemberSubmitNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageMemberSubmitNotify& default_instance();
  void Swap(CMessageMemberSubmitNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageMemberSubmitNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageMemberSubmitNotify& from);
  void MergeFrom(const CMessageMemberSubmitNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 NpcID = 2;
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcIDFieldNumber = 2;
  inline ::google::protobuf::uint32 npcid() const;
  inline void set_npcid(::google::protobuf::uint32 value);
  
  // optional string FamilyName = 3;
  inline bool has_familyname() const;
  inline void clear_familyname();
  static const int kFamilyNameFieldNumber = 3;
  inline const ::std::string& familyname() const;
  inline void set_familyname(const ::std::string& value);
  inline void set_familyname(const char* value);
  inline void set_familyname(const char* value, size_t size);
  inline ::std::string* mutable_familyname();
  
  // optional uint32 First = 4;
  inline bool has_first() const;
  inline void clear_first();
  static const int kFirstFieldNumber = 4;
  inline ::google::protobuf::uint32 first() const;
  inline void set_first(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 npcid_;
  ::std::string* familyname_;
  static const ::std::string _default_familyname_;
  ::google::protobuf::uint32 first_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageMemberSubmitNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessageMemberSubmitRequest : public ::google::protobuf::Message {
 public:
  CMessageMemberSubmitRequest();
  virtual ~CMessageMemberSubmitRequest();
  
  CMessageMemberSubmitRequest(const CMessageMemberSubmitRequest& from);
  
  inline CMessageMemberSubmitRequest& operator=(const CMessageMemberSubmitRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageMemberSubmitRequest& default_instance();
  void Swap(CMessageMemberSubmitRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageMemberSubmitRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageMemberSubmitRequest& from);
  void MergeFrom(const CMessageMemberSubmitRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 NpcID = 2;
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcIDFieldNumber = 2;
  inline ::google::protobuf::uint32 npcid() const;
  inline void set_npcid(::google::protobuf::uint32 value);
  
  // repeated uint32 MemberID = 3;
  inline int memberid_size() const;
  inline void clear_memberid();
  static const int kMemberIDFieldNumber = 3;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >& memberid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >* mutable_memberid();
  inline ::google::protobuf::uint32 memberid(int index) const;
  inline void set_memberid(int index, ::google::protobuf::uint32 value);
  inline void add_memberid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 npcid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > memberid_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageMemberSubmitRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageMemberSubmitResponse : public ::google::protobuf::Message {
 public:
  CMessageMemberSubmitResponse();
  virtual ~CMessageMemberSubmitResponse();
  
  CMessageMemberSubmitResponse(const CMessageMemberSubmitResponse& from);
  
  inline CMessageMemberSubmitResponse& operator=(const CMessageMemberSubmitResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageMemberSubmitResponse& default_instance();
  void Swap(CMessageMemberSubmitResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageMemberSubmitResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageMemberSubmitResponse& from);
  void MergeFrom(const CMessageMemberSubmitResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 Result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);
  
  // optional uint32 NpcID = 3;
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcIDFieldNumber = 3;
  inline ::google::protobuf::uint32 npcid() const;
  inline void set_npcid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 result_;
  ::google::protobuf::uint32 npcid_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageMemberSubmitResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageAbortNpcRequest : public ::google::protobuf::Message {
 public:
  CMessageAbortNpcRequest();
  virtual ~CMessageAbortNpcRequest();
  
  CMessageAbortNpcRequest(const CMessageAbortNpcRequest& from);
  
  inline CMessageAbortNpcRequest& operator=(const CMessageAbortNpcRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageAbortNpcRequest& default_instance();
  void Swap(CMessageAbortNpcRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageAbortNpcRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageAbortNpcRequest& from);
  void MergeFrom(const CMessageAbortNpcRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 FamilyID = 2;
  inline bool has_familyid() const;
  inline void clear_familyid();
  static const int kFamilyIDFieldNumber = 2;
  inline ::google::protobuf::uint32 familyid() const;
  inline void set_familyid(::google::protobuf::uint32 value);
  
  // optional uint32 NpcID = 3;
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcIDFieldNumber = 3;
  inline ::google::protobuf::uint32 npcid() const;
  inline void set_npcid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 familyid_;
  ::google::protobuf::uint32 npcid_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageAbortNpcRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageAbortNpcResponse : public ::google::protobuf::Message {
 public:
  CMessageAbortNpcResponse();
  virtual ~CMessageAbortNpcResponse();
  
  CMessageAbortNpcResponse(const CMessageAbortNpcResponse& from);
  
  inline CMessageAbortNpcResponse& operator=(const CMessageAbortNpcResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageAbortNpcResponse& default_instance();
  void Swap(CMessageAbortNpcResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageAbortNpcResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageAbortNpcResponse& from);
  void MergeFrom(const CMessageAbortNpcResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 Result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);
  
  // optional uint32 FamilyID = 3;
  inline bool has_familyid() const;
  inline void clear_familyid();
  static const int kFamilyIDFieldNumber = 3;
  inline ::google::protobuf::uint32 familyid() const;
  inline void set_familyid(::google::protobuf::uint32 value);
  
  // optional uint32 NpcID = 4;
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcIDFieldNumber = 4;
  inline ::google::protobuf::uint32 npcid() const;
  inline void set_npcid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 result_;
  ::google::protobuf::uint32 familyid_;
  ::google::protobuf::uint32 npcid_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageAbortNpcResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageBidInfoRequest : public ::google::protobuf::Message {
 public:
  CMessageBidInfoRequest();
  virtual ~CMessageBidInfoRequest();
  
  CMessageBidInfoRequest(const CMessageBidInfoRequest& from);
  
  inline CMessageBidInfoRequest& operator=(const CMessageBidInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageBidInfoRequest& default_instance();
  void Swap(CMessageBidInfoRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageBidInfoRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageBidInfoRequest& from);
  void MergeFrom(const CMessageBidInfoRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 NpcID = 2;
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcIDFieldNumber = 2;
  inline ::google::protobuf::uint32 npcid() const;
  inline void set_npcid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 npcid_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageBidInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class BidResult : public ::google::protobuf::Message {
 public:
  BidResult();
  virtual ~BidResult();
  
  BidResult(const BidResult& from);
  
  inline BidResult& operator=(const BidResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BidResult& default_instance();
  void Swap(BidResult* other);
  
  // implements Message ----------------------------------------------
  
  BidResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidResult& from);
  void MergeFrom(const BidResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 FamilyID = 1;
  inline bool has_familyid() const;
  inline void clear_familyid();
  static const int kFamilyIDFieldNumber = 1;
  inline ::google::protobuf::uint32 familyid() const;
  inline void set_familyid(::google::protobuf::uint32 value);
  
  // optional string FamilyName = 2;
  inline bool has_familyname() const;
  inline void clear_familyname();
  static const int kFamilyNameFieldNumber = 2;
  inline const ::std::string& familyname() const;
  inline void set_familyname(const ::std::string& value);
  inline void set_familyname(const char* value);
  inline void set_familyname(const char* value, size_t size);
  inline ::std::string* mutable_familyname();
  
  // optional uint32 Money = 3;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 3;
  inline ::google::protobuf::uint32 money() const;
  inline void set_money(::google::protobuf::uint32 value);
  
  // optional uint32 Win = 4;
  inline bool has_win() const;
  inline void clear_win();
  static const int kWinFieldNumber = 4;
  inline ::google::protobuf::uint32 win() const;
  inline void set_win(::google::protobuf::uint32 value);
  
  // optional uint32 Lost = 5;
  inline bool has_lost() const;
  inline void clear_lost();
  static const int kLostFieldNumber = 5;
  inline ::google::protobuf::uint32 lost() const;
  inline void set_lost(::google::protobuf::uint32 value);
  
  // optional uint32 Country = 6;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 6;
  inline ::google::protobuf::uint32 country() const;
  inline void set_country(::google::protobuf::uint32 value);
  
  // optional uint32 Level = 7;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 7;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 familyid_;
  ::std::string* familyname_;
  static const ::std::string _default_familyname_;
  ::google::protobuf::uint32 money_;
  ::google::protobuf::uint32 win_;
  ::google::protobuf::uint32 lost_;
  ::google::protobuf::uint32 country_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static BidResult* default_instance_;
};
// -------------------------------------------------------------------

class CMessageBidInfoResponse : public ::google::protobuf::Message {
 public:
  CMessageBidInfoResponse();
  virtual ~CMessageBidInfoResponse();
  
  CMessageBidInfoResponse(const CMessageBidInfoResponse& from);
  
  inline CMessageBidInfoResponse& operator=(const CMessageBidInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageBidInfoResponse& default_instance();
  void Swap(CMessageBidInfoResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageBidInfoResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageBidInfoResponse& from);
  void MergeFrom(const CMessageBidInfoResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 Result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);
  
  // optional uint32 NpcID = 3;
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcIDFieldNumber = 3;
  inline ::google::protobuf::uint32 npcid() const;
  inline void set_npcid(::google::protobuf::uint32 value);
  
  // optional string FamilyName = 4;
  inline bool has_familyname() const;
  inline void clear_familyname();
  static const int kFamilyNameFieldNumber = 4;
  inline const ::std::string& familyname() const;
  inline void set_familyname(const ::std::string& value);
  inline void set_familyname(const char* value);
  inline void set_familyname(const char* value, size_t size);
  inline ::std::string* mutable_familyname();
  
  // repeated .BidResult BidData = 5;
  inline int biddata_size() const;
  inline void clear_biddata();
  static const int kBidDataFieldNumber = 5;
  inline const ::google::protobuf::RepeatedPtrField< ::BidResult >& biddata() const;
  inline ::google::protobuf::RepeatedPtrField< ::BidResult >* mutable_biddata();
  inline const ::BidResult& biddata(int index) const;
  inline ::BidResult* mutable_biddata(int index);
  inline ::BidResult* add_biddata();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 result_;
  ::google::protobuf::uint32 npcid_;
  ::std::string* familyname_;
  static const ::std::string _default_familyname_;
  ::google::protobuf::RepeatedPtrField< ::BidResult > biddata_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageBidInfoResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageFamilySubmitNotify : public ::google::protobuf::Message {
 public:
  CMessageFamilySubmitNotify();
  virtual ~CMessageFamilySubmitNotify();
  
  CMessageFamilySubmitNotify(const CMessageFamilySubmitNotify& from);
  
  inline CMessageFamilySubmitNotify& operator=(const CMessageFamilySubmitNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageFamilySubmitNotify& default_instance();
  void Swap(CMessageFamilySubmitNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageFamilySubmitNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageFamilySubmitNotify& from);
  void MergeFrom(const CMessageFamilySubmitNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 NpcID = 2;
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcIDFieldNumber = 2;
  inline ::google::protobuf::uint32 npcid() const;
  inline void set_npcid(::google::protobuf::uint32 value);
  
  // optional string FamilyName = 3;
  inline bool has_familyname() const;
  inline void clear_familyname();
  static const int kFamilyNameFieldNumber = 3;
  inline const ::std::string& familyname() const;
  inline void set_familyname(const ::std::string& value);
  inline void set_familyname(const char* value);
  inline void set_familyname(const char* value, size_t size);
  inline ::std::string* mutable_familyname();
  
  // repeated uint32 MemberID = 4;
  inline int memberid_size() const;
  inline void clear_memberid();
  static const int kMemberIDFieldNumber = 4;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >& memberid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >* mutable_memberid();
  inline ::google::protobuf::uint32 memberid(int index) const;
  inline void set_memberid(int index, ::google::protobuf::uint32 value);
  inline void add_memberid(::google::protobuf::uint32 value);
  
  // optional uint32 ManagerID = 5;
  inline bool has_managerid() const;
  inline void clear_managerid();
  static const int kManagerIDFieldNumber = 5;
  inline ::google::protobuf::uint32 managerid() const;
  inline void set_managerid(::google::protobuf::uint32 value);
  
  // optional string ManagerName = 6;
  inline bool has_managername() const;
  inline void clear_managername();
  static const int kManagerNameFieldNumber = 6;
  inline const ::std::string& managername() const;
  inline void set_managername(const ::std::string& value);
  inline void set_managername(const char* value);
  inline void set_managername(const char* value, size_t size);
  inline ::std::string* mutable_managername();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 npcid_;
  ::std::string* familyname_;
  static const ::std::string _default_familyname_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > memberid_;
  ::google::protobuf::uint32 managerid_;
  ::std::string* managername_;
  static const ::std::string _default_managername_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageFamilySubmitNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessageBattleResultNotify : public ::google::protobuf::Message {
 public:
  CMessageBattleResultNotify();
  virtual ~CMessageBattleResultNotify();
  
  CMessageBattleResultNotify(const CMessageBattleResultNotify& from);
  
  inline CMessageBattleResultNotify& operator=(const CMessageBattleResultNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageBattleResultNotify& default_instance();
  void Swap(CMessageBattleResultNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageBattleResultNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageBattleResultNotify& from);
  void MergeFrom(const CMessageBattleResultNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 NpcID = 2;
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcIDFieldNumber = 2;
  inline ::google::protobuf::uint32 npcid() const;
  inline void set_npcid(::google::protobuf::uint32 value);
  
  // optional string AttFamilyName = 3;
  inline bool has_attfamilyname() const;
  inline void clear_attfamilyname();
  static const int kAttFamilyNameFieldNumber = 3;
  inline const ::std::string& attfamilyname() const;
  inline void set_attfamilyname(const ::std::string& value);
  inline void set_attfamilyname(const char* value);
  inline void set_attfamilyname(const char* value, size_t size);
  inline ::std::string* mutable_attfamilyname();
  
  // optional string DefFamilyName = 4;
  inline bool has_deffamilyname() const;
  inline void clear_deffamilyname();
  static const int kDefFamilyNameFieldNumber = 4;
  inline const ::std::string& deffamilyname() const;
  inline void set_deffamilyname(const ::std::string& value);
  inline void set_deffamilyname(const char* value);
  inline void set_deffamilyname(const char* value, size_t size);
  inline ::std::string* mutable_deffamilyname();
  
  // optional uint32 WinSide = 5;
  inline bool has_winside() const;
  inline void clear_winside();
  static const int kWinSideFieldNumber = 5;
  inline ::google::protobuf::uint32 winside() const;
  inline void set_winside(::google::protobuf::uint32 value);
  
  // optional uint32 AttFamilyID = 6;
  inline bool has_attfamilyid() const;
  inline void clear_attfamilyid();
  static const int kAttFamilyIDFieldNumber = 6;
  inline ::google::protobuf::uint32 attfamilyid() const;
  inline void set_attfamilyid(::google::protobuf::uint32 value);
  
  // optional uint32 DefFamilyID = 7;
  inline bool has_deffamilyid() const;
  inline void clear_deffamilyid();
  static const int kDefFamilyIDFieldNumber = 7;
  inline ::google::protobuf::uint32 deffamilyid() const;
  inline void set_deffamilyid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 npcid_;
  ::std::string* attfamilyname_;
  static const ::std::string _default_attfamilyname_;
  ::std::string* deffamilyname_;
  static const ::std::string _default_deffamilyname_;
  ::google::protobuf::uint32 winside_;
  ::google::protobuf::uint32 attfamilyid_;
  ::google::protobuf::uint32 deffamilyid_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageBattleResultNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessageFamilyPVPStarLevelUPNotify : public ::google::protobuf::Message {
 public:
  CMessageFamilyPVPStarLevelUPNotify();
  virtual ~CMessageFamilyPVPStarLevelUPNotify();
  
  CMessageFamilyPVPStarLevelUPNotify(const CMessageFamilyPVPStarLevelUPNotify& from);
  
  inline CMessageFamilyPVPStarLevelUPNotify& operator=(const CMessageFamilyPVPStarLevelUPNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageFamilyPVPStarLevelUPNotify& default_instance();
  void Swap(CMessageFamilyPVPStarLevelUPNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageFamilyPVPStarLevelUPNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageFamilyPVPStarLevelUPNotify& from);
  void MergeFrom(const CMessageFamilyPVPStarLevelUPNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 PVPStarLevel = 2;
  inline bool has_pvpstarlevel() const;
  inline void clear_pvpstarlevel();
  static const int kPVPStarLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 pvpstarlevel() const;
  inline void set_pvpstarlevel(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 pvpstarlevel_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageFamilyPVPStarLevelUPNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessageMakeRoomRequest : public ::google::protobuf::Message {
 public:
  CMessageMakeRoomRequest();
  virtual ~CMessageMakeRoomRequest();
  
  CMessageMakeRoomRequest(const CMessageMakeRoomRequest& from);
  
  inline CMessageMakeRoomRequest& operator=(const CMessageMakeRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageMakeRoomRequest& default_instance();
  void Swap(CMessageMakeRoomRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageMakeRoomRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageMakeRoomRequest& from);
  void MergeFrom(const CMessageMakeRoomRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 Money = 2;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 2;
  inline ::google::protobuf::uint32 money() const;
  inline void set_money(::google::protobuf::uint32 value);
  
  // optional string Name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 money_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageMakeRoomRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageMakeRoomResponse : public ::google::protobuf::Message {
 public:
  CMessageMakeRoomResponse();
  virtual ~CMessageMakeRoomResponse();
  
  CMessageMakeRoomResponse(const CMessageMakeRoomResponse& from);
  
  inline CMessageMakeRoomResponse& operator=(const CMessageMakeRoomResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageMakeRoomResponse& default_instance();
  void Swap(CMessageMakeRoomResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageMakeRoomResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageMakeRoomResponse& from);
  void MergeFrom(const CMessageMakeRoomResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 Result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);
  
  // optional string Name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional uint32 Money = 4;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 4;
  inline ::google::protobuf::uint32 money() const;
  inline void set_money(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 result_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::google::protobuf::uint32 money_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageMakeRoomResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageChaRoomRequest : public ::google::protobuf::Message {
 public:
  CMessageChaRoomRequest();
  virtual ~CMessageChaRoomRequest();
  
  CMessageChaRoomRequest(const CMessageChaRoomRequest& from);
  
  inline CMessageChaRoomRequest& operator=(const CMessageChaRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageChaRoomRequest& default_instance();
  void Swap(CMessageChaRoomRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageChaRoomRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageChaRoomRequest& from);
  void MergeFrom(const CMessageChaRoomRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 FamilyID = 2;
  inline bool has_familyid() const;
  inline void clear_familyid();
  static const int kFamilyIDFieldNumber = 2;
  inline ::google::protobuf::uint32 familyid() const;
  inline void set_familyid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 familyid_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageChaRoomRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageChaRoomResponse : public ::google::protobuf::Message {
 public:
  CMessageChaRoomResponse();
  virtual ~CMessageChaRoomResponse();
  
  CMessageChaRoomResponse(const CMessageChaRoomResponse& from);
  
  inline CMessageChaRoomResponse& operator=(const CMessageChaRoomResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageChaRoomResponse& default_instance();
  void Swap(CMessageChaRoomResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageChaRoomResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageChaRoomResponse& from);
  void MergeFrom(const CMessageChaRoomResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 Result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);
  
  // optional uint32 FamilyID = 3;
  inline bool has_familyid() const;
  inline void clear_familyid();
  static const int kFamilyIDFieldNumber = 3;
  inline ::google::protobuf::uint32 familyid() const;
  inline void set_familyid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 result_;
  ::google::protobuf::uint32 familyid_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageChaRoomResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageAgreeBattleRequest : public ::google::protobuf::Message {
 public:
  CMessageAgreeBattleRequest();
  virtual ~CMessageAgreeBattleRequest();
  
  CMessageAgreeBattleRequest(const CMessageAgreeBattleRequest& from);
  
  inline CMessageAgreeBattleRequest& operator=(const CMessageAgreeBattleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageAgreeBattleRequest& default_instance();
  void Swap(CMessageAgreeBattleRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageAgreeBattleRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageAgreeBattleRequest& from);
  void MergeFrom(const CMessageAgreeBattleRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 FamilyID = 2;
  inline bool has_familyid() const;
  inline void clear_familyid();
  static const int kFamilyIDFieldNumber = 2;
  inline ::google::protobuf::uint32 familyid() const;
  inline void set_familyid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 familyid_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageAgreeBattleRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageAgreeBattleResponse : public ::google::protobuf::Message {
 public:
  CMessageAgreeBattleResponse();
  virtual ~CMessageAgreeBattleResponse();
  
  CMessageAgreeBattleResponse(const CMessageAgreeBattleResponse& from);
  
  inline CMessageAgreeBattleResponse& operator=(const CMessageAgreeBattleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageAgreeBattleResponse& default_instance();
  void Swap(CMessageAgreeBattleResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageAgreeBattleResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageAgreeBattleResponse& from);
  void MergeFrom(const CMessageAgreeBattleResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 Result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);
  
  // optional uint32 FamilyID = 3;
  inline bool has_familyid() const;
  inline void clear_familyid();
  static const int kFamilyIDFieldNumber = 3;
  inline ::google::protobuf::uint32 familyid() const;
  inline void set_familyid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 result_;
  ::google::protobuf::uint32 familyid_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageAgreeBattleResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageQueryAllRoomRequest : public ::google::protobuf::Message {
 public:
  CMessageQueryAllRoomRequest();
  virtual ~CMessageQueryAllRoomRequest();
  
  CMessageQueryAllRoomRequest(const CMessageQueryAllRoomRequest& from);
  
  inline CMessageQueryAllRoomRequest& operator=(const CMessageQueryAllRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageQueryAllRoomRequest& default_instance();
  void Swap(CMessageQueryAllRoomRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageQueryAllRoomRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageQueryAllRoomRequest& from);
  void MergeFrom(const CMessageQueryAllRoomRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageQueryAllRoomRequest* default_instance_;
};
// -------------------------------------------------------------------

class AllRoomInfo : public ::google::protobuf::Message {
 public:
  AllRoomInfo();
  virtual ~AllRoomInfo();
  
  AllRoomInfo(const AllRoomInfo& from);
  
  inline AllRoomInfo& operator=(const AllRoomInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllRoomInfo& default_instance();
  void Swap(AllRoomInfo* other);
  
  // implements Message ----------------------------------------------
  
  AllRoomInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllRoomInfo& from);
  void MergeFrom(const AllRoomInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 FamilyID = 1;
  inline bool has_familyid() const;
  inline void clear_familyid();
  static const int kFamilyIDFieldNumber = 1;
  inline ::google::protobuf::uint32 familyid() const;
  inline void set_familyid(::google::protobuf::uint32 value);
  
  // optional string FamilyName = 2;
  inline bool has_familyname() const;
  inline void clear_familyname();
  static const int kFamilyNameFieldNumber = 2;
  inline const ::std::string& familyname() const;
  inline void set_familyname(const ::std::string& value);
  inline void set_familyname(const char* value);
  inline void set_familyname(const char* value, size_t size);
  inline ::std::string* mutable_familyname();
  
  // optional uint32 Money = 3;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 3;
  inline ::google::protobuf::uint32 money() const;
  inline void set_money(::google::protobuf::uint32 value);
  
  // optional string RoomName = 4;
  inline bool has_roomname() const;
  inline void clear_roomname();
  static const int kRoomNameFieldNumber = 4;
  inline const ::std::string& roomname() const;
  inline void set_roomname(const ::std::string& value);
  inline void set_roomname(const char* value);
  inline void set_roomname(const char* value, size_t size);
  inline ::std::string* mutable_roomname();
  
  // optional uint32 Win = 5;
  inline bool has_win() const;
  inline void clear_win();
  static const int kWinFieldNumber = 5;
  inline ::google::protobuf::uint32 win() const;
  inline void set_win(::google::protobuf::uint32 value);
  
  // optional uint32 Lost = 6;
  inline bool has_lost() const;
  inline void clear_lost();
  static const int kLostFieldNumber = 6;
  inline ::google::protobuf::uint32 lost() const;
  inline void set_lost(::google::protobuf::uint32 value);
  
  // optional string AttName = 7;
  inline bool has_attname() const;
  inline void clear_attname();
  static const int kAttNameFieldNumber = 7;
  inline const ::std::string& attname() const;
  inline void set_attname(const ::std::string& value);
  inline void set_attname(const char* value);
  inline void set_attname(const char* value, size_t size);
  inline ::std::string* mutable_attname();
  
  // optional uint32 State = 8;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 8;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 familyid_;
  ::std::string* familyname_;
  static const ::std::string _default_familyname_;
  ::google::protobuf::uint32 money_;
  ::std::string* roomname_;
  static const ::std::string _default_roomname_;
  ::google::protobuf::uint32 win_;
  ::google::protobuf::uint32 lost_;
  ::std::string* attname_;
  static const ::std::string _default_attname_;
  ::google::protobuf::uint32 state_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static AllRoomInfo* default_instance_;
};
// -------------------------------------------------------------------

class CMessageQueryAllRoomResponse : public ::google::protobuf::Message {
 public:
  CMessageQueryAllRoomResponse();
  virtual ~CMessageQueryAllRoomResponse();
  
  CMessageQueryAllRoomResponse(const CMessageQueryAllRoomResponse& from);
  
  inline CMessageQueryAllRoomResponse& operator=(const CMessageQueryAllRoomResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageQueryAllRoomResponse& default_instance();
  void Swap(CMessageQueryAllRoomResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageQueryAllRoomResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageQueryAllRoomResponse& from);
  void MergeFrom(const CMessageQueryAllRoomResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 Result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);
  
  // repeated .AllRoomInfo RoomData = 3;
  inline int roomdata_size() const;
  inline void clear_roomdata();
  static const int kRoomDataFieldNumber = 3;
  inline const ::google::protobuf::RepeatedPtrField< ::AllRoomInfo >& roomdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::AllRoomInfo >* mutable_roomdata();
  inline const ::AllRoomInfo& roomdata(int index) const;
  inline ::AllRoomInfo* mutable_roomdata(int index);
  inline ::AllRoomInfo* add_roomdata();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 result_;
  ::google::protobuf::RepeatedPtrField< ::AllRoomInfo > roomdata_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageQueryAllRoomResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageQueryMyRoomRequest : public ::google::protobuf::Message {
 public:
  CMessageQueryMyRoomRequest();
  virtual ~CMessageQueryMyRoomRequest();
  
  CMessageQueryMyRoomRequest(const CMessageQueryMyRoomRequest& from);
  
  inline CMessageQueryMyRoomRequest& operator=(const CMessageQueryMyRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageQueryMyRoomRequest& default_instance();
  void Swap(CMessageQueryMyRoomRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageQueryMyRoomRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageQueryMyRoomRequest& from);
  void MergeFrom(const CMessageQueryMyRoomRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageQueryMyRoomRequest* default_instance_;
};
// -------------------------------------------------------------------

class MyRoomInfo : public ::google::protobuf::Message {
 public:
  MyRoomInfo();
  virtual ~MyRoomInfo();
  
  MyRoomInfo(const MyRoomInfo& from);
  
  inline MyRoomInfo& operator=(const MyRoomInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MyRoomInfo& default_instance();
  void Swap(MyRoomInfo* other);
  
  // implements Message ----------------------------------------------
  
  MyRoomInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MyRoomInfo& from);
  void MergeFrom(const MyRoomInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 FamilyID = 1;
  inline bool has_familyid() const;
  inline void clear_familyid();
  static const int kFamilyIDFieldNumber = 1;
  inline ::google::protobuf::uint32 familyid() const;
  inline void set_familyid(::google::protobuf::uint32 value);
  
  // optional string FamilyName = 2;
  inline bool has_familyname() const;
  inline void clear_familyname();
  static const int kFamilyNameFieldNumber = 2;
  inline const ::std::string& familyname() const;
  inline void set_familyname(const ::std::string& value);
  inline void set_familyname(const char* value);
  inline void set_familyname(const char* value, size_t size);
  inline ::std::string* mutable_familyname();
  
  // optional uint32 Win = 3;
  inline bool has_win() const;
  inline void clear_win();
  static const int kWinFieldNumber = 3;
  inline ::google::protobuf::uint32 win() const;
  inline void set_win(::google::protobuf::uint32 value);
  
  // optional uint32 Lost = 4;
  inline bool has_lost() const;
  inline void clear_lost();
  static const int kLostFieldNumber = 4;
  inline ::google::protobuf::uint32 lost() const;
  inline void set_lost(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 familyid_;
  ::std::string* familyname_;
  static const ::std::string _default_familyname_;
  ::google::protobuf::uint32 win_;
  ::google::protobuf::uint32 lost_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MyRoomInfo* default_instance_;
};
// -------------------------------------------------------------------

class CMessageQueryMyRoomResponse : public ::google::protobuf::Message {
 public:
  CMessageQueryMyRoomResponse();
  virtual ~CMessageQueryMyRoomResponse();
  
  CMessageQueryMyRoomResponse(const CMessageQueryMyRoomResponse& from);
  
  inline CMessageQueryMyRoomResponse& operator=(const CMessageQueryMyRoomResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageQueryMyRoomResponse& default_instance();
  void Swap(CMessageQueryMyRoomResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageQueryMyRoomResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageQueryMyRoomResponse& from);
  void MergeFrom(const CMessageQueryMyRoomResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 Result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);
  
  // optional uint32 Money = 3;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 3;
  inline ::google::protobuf::uint32 money() const;
  inline void set_money(::google::protobuf::uint32 value);
  
  // repeated .MyRoomInfo RoomData = 4;
  inline int roomdata_size() const;
  inline void clear_roomdata();
  static const int kRoomDataFieldNumber = 4;
  inline const ::google::protobuf::RepeatedPtrField< ::MyRoomInfo >& roomdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::MyRoomInfo >* mutable_roomdata();
  inline const ::MyRoomInfo& roomdata(int index) const;
  inline ::MyRoomInfo* mutable_roomdata(int index);
  inline ::MyRoomInfo* add_roomdata();
  
  // optional string Name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 result_;
  ::google::protobuf::uint32 money_;
  ::google::protobuf::RepeatedPtrField< ::MyRoomInfo > roomdata_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageQueryMyRoomResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageQueryMyChaRequest : public ::google::protobuf::Message {
 public:
  CMessageQueryMyChaRequest();
  virtual ~CMessageQueryMyChaRequest();
  
  CMessageQueryMyChaRequest(const CMessageQueryMyChaRequest& from);
  
  inline CMessageQueryMyChaRequest& operator=(const CMessageQueryMyChaRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageQueryMyChaRequest& default_instance();
  void Swap(CMessageQueryMyChaRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageQueryMyChaRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageQueryMyChaRequest& from);
  void MergeFrom(const CMessageQueryMyChaRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageQueryMyChaRequest* default_instance_;
};
// -------------------------------------------------------------------

class MyChaInfo : public ::google::protobuf::Message {
 public:
  MyChaInfo();
  virtual ~MyChaInfo();
  
  MyChaInfo(const MyChaInfo& from);
  
  inline MyChaInfo& operator=(const MyChaInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MyChaInfo& default_instance();
  void Swap(MyChaInfo* other);
  
  // implements Message ----------------------------------------------
  
  MyChaInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MyChaInfo& from);
  void MergeFrom(const MyChaInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 FamilyID = 1;
  inline bool has_familyid() const;
  inline void clear_familyid();
  static const int kFamilyIDFieldNumber = 1;
  inline ::google::protobuf::uint32 familyid() const;
  inline void set_familyid(::google::protobuf::uint32 value);
  
  // optional string FamilyName = 2;
  inline bool has_familyname() const;
  inline void clear_familyname();
  static const int kFamilyNameFieldNumber = 2;
  inline const ::std::string& familyname() const;
  inline void set_familyname(const ::std::string& value);
  inline void set_familyname(const char* value);
  inline void set_familyname(const char* value, size_t size);
  inline ::std::string* mutable_familyname();
  
  // optional uint32 Money = 3;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 3;
  inline ::google::protobuf::uint32 money() const;
  inline void set_money(::google::protobuf::uint32 value);
  
  // optional string RoomName = 4;
  inline bool has_roomname() const;
  inline void clear_roomname();
  static const int kRoomNameFieldNumber = 4;
  inline const ::std::string& roomname() const;
  inline void set_roomname(const ::std::string& value);
  inline void set_roomname(const char* value);
  inline void set_roomname(const char* value, size_t size);
  inline ::std::string* mutable_roomname();
  
  // optional uint32 Win = 5;
  inline bool has_win() const;
  inline void clear_win();
  static const int kWinFieldNumber = 5;
  inline ::google::protobuf::uint32 win() const;
  inline void set_win(::google::protobuf::uint32 value);
  
  // optional uint32 Lost = 6;
  inline bool has_lost() const;
  inline void clear_lost();
  static const int kLostFieldNumber = 6;
  inline ::google::protobuf::uint32 lost() const;
  inline void set_lost(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 familyid_;
  ::std::string* familyname_;
  static const ::std::string _default_familyname_;
  ::google::protobuf::uint32 money_;
  ::std::string* roomname_;
  static const ::std::string _default_roomname_;
  ::google::protobuf::uint32 win_;
  ::google::protobuf::uint32 lost_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MyChaInfo* default_instance_;
};
// -------------------------------------------------------------------

class CMessageQueryMyChaResponse : public ::google::protobuf::Message {
 public:
  CMessageQueryMyChaResponse();
  virtual ~CMessageQueryMyChaResponse();
  
  CMessageQueryMyChaResponse(const CMessageQueryMyChaResponse& from);
  
  inline CMessageQueryMyChaResponse& operator=(const CMessageQueryMyChaResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageQueryMyChaResponse& default_instance();
  void Swap(CMessageQueryMyChaResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageQueryMyChaResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageQueryMyChaResponse& from);
  void MergeFrom(const CMessageQueryMyChaResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 Result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);
  
  // repeated .MyChaInfo RoomData = 3;
  inline int roomdata_size() const;
  inline void clear_roomdata();
  static const int kRoomDataFieldNumber = 3;
  inline const ::google::protobuf::RepeatedPtrField< ::MyChaInfo >& roomdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::MyChaInfo >* mutable_roomdata();
  inline const ::MyChaInfo& roomdata(int index) const;
  inline ::MyChaInfo* mutable_roomdata(int index);
  inline ::MyChaInfo* add_roomdata();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 result_;
  ::google::protobuf::RepeatedPtrField< ::MyChaInfo > roomdata_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageQueryMyChaResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageAbortRoomRequest : public ::google::protobuf::Message {
 public:
  CMessageAbortRoomRequest();
  virtual ~CMessageAbortRoomRequest();
  
  CMessageAbortRoomRequest(const CMessageAbortRoomRequest& from);
  
  inline CMessageAbortRoomRequest& operator=(const CMessageAbortRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageAbortRoomRequest& default_instance();
  void Swap(CMessageAbortRoomRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageAbortRoomRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageAbortRoomRequest& from);
  void MergeFrom(const CMessageAbortRoomRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageAbortRoomRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageAbortRoomResponse : public ::google::protobuf::Message {
 public:
  CMessageAbortRoomResponse();
  virtual ~CMessageAbortRoomResponse();
  
  CMessageAbortRoomResponse(const CMessageAbortRoomResponse& from);
  
  inline CMessageAbortRoomResponse& operator=(const CMessageAbortRoomResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageAbortRoomResponse& default_instance();
  void Swap(CMessageAbortRoomResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageAbortRoomResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageAbortRoomResponse& from);
  void MergeFrom(const CMessageAbortRoomResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 Result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 result_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageAbortRoomResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageAbortChaRequest : public ::google::protobuf::Message {
 public:
  CMessageAbortChaRequest();
  virtual ~CMessageAbortChaRequest();
  
  CMessageAbortChaRequest(const CMessageAbortChaRequest& from);
  
  inline CMessageAbortChaRequest& operator=(const CMessageAbortChaRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageAbortChaRequest& default_instance();
  void Swap(CMessageAbortChaRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageAbortChaRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageAbortChaRequest& from);
  void MergeFrom(const CMessageAbortChaRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 FamilyID = 2;
  inline bool has_familyid() const;
  inline void clear_familyid();
  static const int kFamilyIDFieldNumber = 2;
  inline ::google::protobuf::uint32 familyid() const;
  inline void set_familyid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 familyid_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageAbortChaRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageAbortChaResponse : public ::google::protobuf::Message {
 public:
  CMessageAbortChaResponse();
  virtual ~CMessageAbortChaResponse();
  
  CMessageAbortChaResponse(const CMessageAbortChaResponse& from);
  
  inline CMessageAbortChaResponse& operator=(const CMessageAbortChaResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageAbortChaResponse& default_instance();
  void Swap(CMessageAbortChaResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageAbortChaResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageAbortChaResponse& from);
  void MergeFrom(const CMessageAbortChaResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 Result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);
  
  // optional uint32 FamilyID = 3;
  inline bool has_familyid() const;
  inline void clear_familyid();
  static const int kFamilyIDFieldNumber = 3;
  inline ::google::protobuf::uint32 familyid() const;
  inline void set_familyid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 result_;
  ::google::protobuf::uint32 familyid_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageAbortChaResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageContributeFamilyMoneyNotify : public ::google::protobuf::Message {
 public:
  CMessageContributeFamilyMoneyNotify();
  virtual ~CMessageContributeFamilyMoneyNotify();
  
  CMessageContributeFamilyMoneyNotify(const CMessageContributeFamilyMoneyNotify& from);
  
  inline CMessageContributeFamilyMoneyNotify& operator=(const CMessageContributeFamilyMoneyNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageContributeFamilyMoneyNotify& default_instance();
  void Swap(CMessageContributeFamilyMoneyNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageContributeFamilyMoneyNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageContributeFamilyMoneyNotify& from);
  void MergeFrom(const CMessageContributeFamilyMoneyNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 FamilyMoney = 2;
  inline bool has_familymoney() const;
  inline void clear_familymoney();
  static const int kFamilyMoneyFieldNumber = 2;
  inline ::google::protobuf::uint32 familymoney() const;
  inline void set_familymoney(::google::protobuf::uint32 value);
  
  // optional string MemberName = 3;
  inline bool has_membername() const;
  inline void clear_membername();
  static const int kMemberNameFieldNumber = 3;
  inline const ::std::string& membername() const;
  inline void set_membername(const ::std::string& value);
  inline void set_membername(const char* value);
  inline void set_membername(const char* value, size_t size);
  inline ::std::string* mutable_membername();
  
  // optional uint32 MemberID = 4;
  inline bool has_memberid() const;
  inline void clear_memberid();
  static const int kMemberIDFieldNumber = 4;
  inline ::google::protobuf::uint32 memberid() const;
  inline void set_memberid(::google::protobuf::uint32 value);
  
  // optional uint32 Value = 5;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 5;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 familymoney_;
  ::std::string* membername_;
  static const ::std::string _default_membername_;
  ::google::protobuf::uint32 memberid_;
  ::google::protobuf::uint32 value_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageContributeFamilyMoneyNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessageFamilyMoneyChangedNotify : public ::google::protobuf::Message {
 public:
  CMessageFamilyMoneyChangedNotify();
  virtual ~CMessageFamilyMoneyChangedNotify();
  
  CMessageFamilyMoneyChangedNotify(const CMessageFamilyMoneyChangedNotify& from);
  
  inline CMessageFamilyMoneyChangedNotify& operator=(const CMessageFamilyMoneyChangedNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageFamilyMoneyChangedNotify& default_instance();
  void Swap(CMessageFamilyMoneyChangedNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageFamilyMoneyChangedNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageFamilyMoneyChangedNotify& from);
  void MergeFrom(const CMessageFamilyMoneyChangedNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 Money = 1;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 1;
  inline ::google::protobuf::uint32 money() const;
  inline void set_money(::google::protobuf::uint32 value);
  
  // optional uint32 RoleID = 2;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIDFieldNumber = 2;
  inline ::google::protobuf::uint32 roleid() const;
  inline void set_roleid(::google::protobuf::uint32 value);
  
  // optional uint32 Reason = 3;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 3;
  inline ::google::protobuf::uint32 reason() const;
  inline void set_reason(::google::protobuf::uint32 value);
  
  // optional string RoleName = 4;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 4;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  
  // optional int32 Value = 5;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 5;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 money_;
  ::google::protobuf::uint32 roleid_;
  ::google::protobuf::uint32 reason_;
  ::std::string* rolename_;
  static const ::std::string _default_rolename_;
  ::google::protobuf::int32 value_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageFamilyMoneyChangedNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessageUseFamilyExpCardNotify : public ::google::protobuf::Message {
 public:
  CMessageUseFamilyExpCardNotify();
  virtual ~CMessageUseFamilyExpCardNotify();
  
  CMessageUseFamilyExpCardNotify(const CMessageUseFamilyExpCardNotify& from);
  
  inline CMessageUseFamilyExpCardNotify& operator=(const CMessageUseFamilyExpCardNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageUseFamilyExpCardNotify& default_instance();
  void Swap(CMessageUseFamilyExpCardNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageUseFamilyExpCardNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageUseFamilyExpCardNotify& from);
  void MergeFrom(const CMessageUseFamilyExpCardNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string ManagerName = 1;
  inline bool has_managername() const;
  inline void clear_managername();
  static const int kManagerNameFieldNumber = 1;
  inline const ::std::string& managername() const;
  inline void set_managername(const ::std::string& value);
  inline void set_managername(const char* value);
  inline void set_managername(const char* value, size_t size);
  inline ::std::string* mutable_managername();
  
  // optional uint32 ManagerID = 2;
  inline bool has_managerid() const;
  inline void clear_managerid();
  static const int kManagerIDFieldNumber = 2;
  inline ::google::protobuf::uint32 managerid() const;
  inline void set_managerid(::google::protobuf::uint32 value);
  
  // optional uint32 LineID = 3;
  inline bool has_lineid() const;
  inline void clear_lineid();
  static const int kLineIDFieldNumber = 3;
  inline ::google::protobuf::uint32 lineid() const;
  inline void set_lineid(::google::protobuf::uint32 value);
  
  // optional uint32 MapID = 4;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIDFieldNumber = 4;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);
  
  // optional uint32 PosX = 5;
  inline bool has_posx() const;
  inline void clear_posx();
  static const int kPosXFieldNumber = 5;
  inline ::google::protobuf::uint32 posx() const;
  inline void set_posx(::google::protobuf::uint32 value);
  
  // optional uint32 PosY = 6;
  inline bool has_posy() const;
  inline void clear_posy();
  static const int kPosYFieldNumber = 6;
  inline ::google::protobuf::uint32 posy() const;
  inline void set_posy(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* managername_;
  static const ::std::string _default_managername_;
  ::google::protobuf::uint32 managerid_;
  ::google::protobuf::uint32 lineid_;
  ::google::protobuf::uint32 mapid_;
  ::google::protobuf::uint32 posx_;
  ::google::protobuf::uint32 posy_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageUseFamilyExpCardNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessageStartFamilyBossRequest : public ::google::protobuf::Message {
 public:
  CMessageStartFamilyBossRequest();
  virtual ~CMessageStartFamilyBossRequest();
  
  CMessageStartFamilyBossRequest(const CMessageStartFamilyBossRequest& from);
  
  inline CMessageStartFamilyBossRequest& operator=(const CMessageStartFamilyBossRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageStartFamilyBossRequest& default_instance();
  void Swap(CMessageStartFamilyBossRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageStartFamilyBossRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageStartFamilyBossRequest& from);
  void MergeFrom(const CMessageStartFamilyBossRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 EnityID = 2;
  inline bool has_enityid() const;
  inline void clear_enityid();
  static const int kEnityIDFieldNumber = 2;
  inline ::google::protobuf::uint32 enityid() const;
  inline void set_enityid(::google::protobuf::uint32 value);
  
  // optional uint32 RepetionLevel = 3;
  inline bool has_repetionlevel() const;
  inline void clear_repetionlevel();
  static const int kRepetionLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 repetionlevel() const;
  inline void set_repetionlevel(::google::protobuf::uint32 value);
  
  // optional uint32 Date = 4;
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 4;
  inline ::google::protobuf::uint32 date() const;
  inline void set_date(::google::protobuf::uint32 value);
  
  // optional uint32 MaxTimes = 5;
  inline bool has_maxtimes() const;
  inline void clear_maxtimes();
  static const int kMaxTimesFieldNumber = 5;
  inline ::google::protobuf::uint32 maxtimes() const;
  inline void set_maxtimes(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 enityid_;
  ::google::protobuf::uint32 repetionlevel_;
  ::google::protobuf::uint32 date_;
  ::google::protobuf::uint32 maxtimes_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageStartFamilyBossRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageMakeRoomNotify : public ::google::protobuf::Message {
 public:
  CMessageMakeRoomNotify();
  virtual ~CMessageMakeRoomNotify();
  
  CMessageMakeRoomNotify(const CMessageMakeRoomNotify& from);
  
  inline CMessageMakeRoomNotify& operator=(const CMessageMakeRoomNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageMakeRoomNotify& default_instance();
  void Swap(CMessageMakeRoomNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageMakeRoomNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageMakeRoomNotify& from);
  void MergeFrom(const CMessageMakeRoomNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 HeaderID = 2;
  inline bool has_headerid() const;
  inline void clear_headerid();
  static const int kHeaderIDFieldNumber = 2;
  inline ::google::protobuf::uint32 headerid() const;
  inline void set_headerid(::google::protobuf::uint32 value);
  
  // optional string HeaderName = 3;
  inline bool has_headername() const;
  inline void clear_headername();
  static const int kHeaderNameFieldNumber = 3;
  inline const ::std::string& headername() const;
  inline void set_headername(const ::std::string& value);
  inline void set_headername(const char* value);
  inline void set_headername(const char* value, size_t size);
  inline ::std::string* mutable_headername();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 headerid_;
  ::std::string* headername_;
  static const ::std::string _default_headername_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageMakeRoomNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessageStartFamilyBossResponse : public ::google::protobuf::Message {
 public:
  CMessageStartFamilyBossResponse();
  virtual ~CMessageStartFamilyBossResponse();
  
  CMessageStartFamilyBossResponse(const CMessageStartFamilyBossResponse& from);
  
  inline CMessageStartFamilyBossResponse& operator=(const CMessageStartFamilyBossResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageStartFamilyBossResponse& default_instance();
  void Swap(CMessageStartFamilyBossResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageStartFamilyBossResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageStartFamilyBossResponse& from);
  void MergeFrom(const CMessageStartFamilyBossResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 Errcode = 2;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 2;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 errcode_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageStartFamilyBossResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageEnterBossReptionRequest : public ::google::protobuf::Message {
 public:
  CMessageEnterBossReptionRequest();
  virtual ~CMessageEnterBossReptionRequest();
  
  CMessageEnterBossReptionRequest(const CMessageEnterBossReptionRequest& from);
  
  inline CMessageEnterBossReptionRequest& operator=(const CMessageEnterBossReptionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageEnterBossReptionRequest& default_instance();
  void Swap(CMessageEnterBossReptionRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageEnterBossReptionRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageEnterBossReptionRequest& from);
  void MergeFrom(const CMessageEnterBossReptionRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 NpcID = 2;
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcIDFieldNumber = 2;
  inline ::google::protobuf::uint32 npcid() const;
  inline void set_npcid(::google::protobuf::uint32 value);
  
  // optional uint32 FamilyID = 3;
  inline bool has_familyid() const;
  inline void clear_familyid();
  static const int kFamilyIDFieldNumber = 3;
  inline ::google::protobuf::uint32 familyid() const;
  inline void set_familyid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 npcid_;
  ::google::protobuf::uint32 familyid_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageEnterBossReptionRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageEnterBossReptionResponse : public ::google::protobuf::Message {
 public:
  CMessageEnterBossReptionResponse();
  virtual ~CMessageEnterBossReptionResponse();
  
  CMessageEnterBossReptionResponse(const CMessageEnterBossReptionResponse& from);
  
  inline CMessageEnterBossReptionResponse& operator=(const CMessageEnterBossReptionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageEnterBossReptionResponse& default_instance();
  void Swap(CMessageEnterBossReptionResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageEnterBossReptionResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageEnterBossReptionResponse& from);
  void MergeFrom(const CMessageEnterBossReptionResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 Errcode = 2;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 2;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 errcode_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageEnterBossReptionResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageAbortRoomNotify : public ::google::protobuf::Message {
 public:
  CMessageAbortRoomNotify();
  virtual ~CMessageAbortRoomNotify();
  
  CMessageAbortRoomNotify(const CMessageAbortRoomNotify& from);
  
  inline CMessageAbortRoomNotify& operator=(const CMessageAbortRoomNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageAbortRoomNotify& default_instance();
  void Swap(CMessageAbortRoomNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageAbortRoomNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageAbortRoomNotify& from);
  void MergeFrom(const CMessageAbortRoomNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 HeaderID = 2;
  inline bool has_headerid() const;
  inline void clear_headerid();
  static const int kHeaderIDFieldNumber = 2;
  inline ::google::protobuf::uint32 headerid() const;
  inline void set_headerid(::google::protobuf::uint32 value);
  
  // optional string HeaderName = 3;
  inline bool has_headername() const;
  inline void clear_headername();
  static const int kHeaderNameFieldNumber = 3;
  inline const ::std::string& headername() const;
  inline void set_headername(const ::std::string& value);
  inline void set_headername(const char* value);
  inline void set_headername(const char* value, size_t size);
  inline ::std::string* mutable_headername();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 headerid_;
  ::std::string* headername_;
  static const ::std::string _default_headername_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageAbortRoomNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessageChaRoomNotify : public ::google::protobuf::Message {
 public:
  CMessageChaRoomNotify();
  virtual ~CMessageChaRoomNotify();
  
  CMessageChaRoomNotify(const CMessageChaRoomNotify& from);
  
  inline CMessageChaRoomNotify& operator=(const CMessageChaRoomNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageChaRoomNotify& default_instance();
  void Swap(CMessageChaRoomNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageChaRoomNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageChaRoomNotify& from);
  void MergeFrom(const CMessageChaRoomNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 SrcFamilyID = 2;
  inline bool has_srcfamilyid() const;
  inline void clear_srcfamilyid();
  static const int kSrcFamilyIDFieldNumber = 2;
  inline ::google::protobuf::uint32 srcfamilyid() const;
  inline void set_srcfamilyid(::google::protobuf::uint32 value);
  
  // optional string SrcFamilyName = 3;
  inline bool has_srcfamilyname() const;
  inline void clear_srcfamilyname();
  static const int kSrcFamilyNameFieldNumber = 3;
  inline const ::std::string& srcfamilyname() const;
  inline void set_srcfamilyname(const ::std::string& value);
  inline void set_srcfamilyname(const char* value);
  inline void set_srcfamilyname(const char* value, size_t size);
  inline ::std::string* mutable_srcfamilyname();
  
  // optional uint32 SrcHeaderID = 4;
  inline bool has_srcheaderid() const;
  inline void clear_srcheaderid();
  static const int kSrcHeaderIDFieldNumber = 4;
  inline ::google::protobuf::uint32 srcheaderid() const;
  inline void set_srcheaderid(::google::protobuf::uint32 value);
  
  // optional string SrcHeaderName = 5;
  inline bool has_srcheadername() const;
  inline void clear_srcheadername();
  static const int kSrcHeaderNameFieldNumber = 5;
  inline const ::std::string& srcheadername() const;
  inline void set_srcheadername(const ::std::string& value);
  inline void set_srcheadername(const char* value);
  inline void set_srcheadername(const char* value, size_t size);
  inline ::std::string* mutable_srcheadername();
  
  // optional uint32 DesFamilyID = 6;
  inline bool has_desfamilyid() const;
  inline void clear_desfamilyid();
  static const int kDesFamilyIDFieldNumber = 6;
  inline ::google::protobuf::uint32 desfamilyid() const;
  inline void set_desfamilyid(::google::protobuf::uint32 value);
  
  // optional string DesFamilyName = 7;
  inline bool has_desfamilyname() const;
  inline void clear_desfamilyname();
  static const int kDesFamilyNameFieldNumber = 7;
  inline const ::std::string& desfamilyname() const;
  inline void set_desfamilyname(const ::std::string& value);
  inline void set_desfamilyname(const char* value);
  inline void set_desfamilyname(const char* value, size_t size);
  inline ::std::string* mutable_desfamilyname();
  
  // optional uint32 DesHeaderID = 8;
  inline bool has_desheaderid() const;
  inline void clear_desheaderid();
  static const int kDesHeaderIDFieldNumber = 8;
  inline ::google::protobuf::uint32 desheaderid() const;
  inline void set_desheaderid(::google::protobuf::uint32 value);
  
  // optional string DesHeaderName = 9;
  inline bool has_desheadername() const;
  inline void clear_desheadername();
  static const int kDesHeaderNameFieldNumber = 9;
  inline const ::std::string& desheadername() const;
  inline void set_desheadername(const ::std::string& value);
  inline void set_desheadername(const char* value);
  inline void set_desheadername(const char* value, size_t size);
  inline ::std::string* mutable_desheadername();
  
  // optional uint32 SrcWin = 10;
  inline bool has_srcwin() const;
  inline void clear_srcwin();
  static const int kSrcWinFieldNumber = 10;
  inline ::google::protobuf::uint32 srcwin() const;
  inline void set_srcwin(::google::protobuf::uint32 value);
  
  // optional uint32 SrcLost = 11;
  inline bool has_srclost() const;
  inline void clear_srclost();
  static const int kSrcLostFieldNumber = 11;
  inline ::google::protobuf::uint32 srclost() const;
  inline void set_srclost(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 srcfamilyid_;
  ::std::string* srcfamilyname_;
  static const ::std::string _default_srcfamilyname_;
  ::google::protobuf::uint32 srcheaderid_;
  ::std::string* srcheadername_;
  static const ::std::string _default_srcheadername_;
  ::google::protobuf::uint32 desfamilyid_;
  ::std::string* desfamilyname_;
  static const ::std::string _default_desfamilyname_;
  ::google::protobuf::uint32 desheaderid_;
  ::std::string* desheadername_;
  static const ::std::string _default_desheadername_;
  ::google::protobuf::uint32 srcwin_;
  ::google::protobuf::uint32 srclost_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageChaRoomNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessageAbortChaNotify : public ::google::protobuf::Message {
 public:
  CMessageAbortChaNotify();
  virtual ~CMessageAbortChaNotify();
  
  CMessageAbortChaNotify(const CMessageAbortChaNotify& from);
  
  inline CMessageAbortChaNotify& operator=(const CMessageAbortChaNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageAbortChaNotify& default_instance();
  void Swap(CMessageAbortChaNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageAbortChaNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageAbortChaNotify& from);
  void MergeFrom(const CMessageAbortChaNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 SrcFamilyID = 2;
  inline bool has_srcfamilyid() const;
  inline void clear_srcfamilyid();
  static const int kSrcFamilyIDFieldNumber = 2;
  inline ::google::protobuf::uint32 srcfamilyid() const;
  inline void set_srcfamilyid(::google::protobuf::uint32 value);
  
  // optional string SrcFamilyName = 3;
  inline bool has_srcfamilyname() const;
  inline void clear_srcfamilyname();
  static const int kSrcFamilyNameFieldNumber = 3;
  inline const ::std::string& srcfamilyname() const;
  inline void set_srcfamilyname(const ::std::string& value);
  inline void set_srcfamilyname(const char* value);
  inline void set_srcfamilyname(const char* value, size_t size);
  inline ::std::string* mutable_srcfamilyname();
  
  // optional uint32 DesFamilyID = 4;
  inline bool has_desfamilyid() const;
  inline void clear_desfamilyid();
  static const int kDesFamilyIDFieldNumber = 4;
  inline ::google::protobuf::uint32 desfamilyid() const;
  inline void set_desfamilyid(::google::protobuf::uint32 value);
  
  // optional string DesFamilyName = 5;
  inline bool has_desfamilyname() const;
  inline void clear_desfamilyname();
  static const int kDesFamilyNameFieldNumber = 5;
  inline const ::std::string& desfamilyname() const;
  inline void set_desfamilyname(const ::std::string& value);
  inline void set_desfamilyname(const char* value);
  inline void set_desfamilyname(const char* value, size_t size);
  inline ::std::string* mutable_desfamilyname();
  
  // optional string HeaderName = 6;
  inline bool has_headername() const;
  inline void clear_headername();
  static const int kHeaderNameFieldNumber = 6;
  inline const ::std::string& headername() const;
  inline void set_headername(const ::std::string& value);
  inline void set_headername(const char* value);
  inline void set_headername(const char* value, size_t size);
  inline ::std::string* mutable_headername();
  
  // optional uint32 ManagerID = 7;
  inline bool has_managerid() const;
  inline void clear_managerid();
  static const int kManagerIDFieldNumber = 7;
  inline ::google::protobuf::uint32 managerid() const;
  inline void set_managerid(::google::protobuf::uint32 value);
  
  // optional string ManagerName = 8;
  inline bool has_managername() const;
  inline void clear_managername();
  static const int kManagerNameFieldNumber = 8;
  inline const ::std::string& managername() const;
  inline void set_managername(const ::std::string& value);
  inline void set_managername(const char* value);
  inline void set_managername(const char* value, size_t size);
  inline ::std::string* mutable_managername();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 srcfamilyid_;
  ::std::string* srcfamilyname_;
  static const ::std::string _default_srcfamilyname_;
  ::google::protobuf::uint32 desfamilyid_;
  ::std::string* desfamilyname_;
  static const ::std::string _default_desfamilyname_;
  ::std::string* headername_;
  static const ::std::string _default_headername_;
  ::google::protobuf::uint32 managerid_;
  ::std::string* managername_;
  static const ::std::string _default_managername_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageAbortChaNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessageFamilyGloryChangedNotify : public ::google::protobuf::Message {
 public:
  CMessageFamilyGloryChangedNotify();
  virtual ~CMessageFamilyGloryChangedNotify();
  
  CMessageFamilyGloryChangedNotify(const CMessageFamilyGloryChangedNotify& from);
  
  inline CMessageFamilyGloryChangedNotify& operator=(const CMessageFamilyGloryChangedNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageFamilyGloryChangedNotify& default_instance();
  void Swap(CMessageFamilyGloryChangedNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageFamilyGloryChangedNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageFamilyGloryChangedNotify& from);
  void MergeFrom(const CMessageFamilyGloryChangedNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 Glory = 2;
  inline bool has_glory() const;
  inline void clear_glory();
  static const int kGloryFieldNumber = 2;
  inline ::google::protobuf::uint32 glory() const;
  inline void set_glory(::google::protobuf::uint32 value);
  
  // optional uint32 RoleID = 3;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIDFieldNumber = 3;
  inline ::google::protobuf::uint32 roleid() const;
  inline void set_roleid(::google::protobuf::uint32 value);
  
  // optional uint32 Reason = 4;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 4;
  inline ::google::protobuf::uint32 reason() const;
  inline void set_reason(::google::protobuf::uint32 value);
  
  // optional string RoleName = 5;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 5;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  
  // optional int32 Value = 6;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 6;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 glory_;
  ::google::protobuf::uint32 roleid_;
  ::google::protobuf::uint32 reason_;
  ::std::string* rolename_;
  static const ::std::string _default_rolename_;
  ::google::protobuf::int32 value_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageFamilyGloryChangedNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessageMemberContributeChangedNotify : public ::google::protobuf::Message {
 public:
  CMessageMemberContributeChangedNotify();
  virtual ~CMessageMemberContributeChangedNotify();
  
  CMessageMemberContributeChangedNotify(const CMessageMemberContributeChangedNotify& from);
  
  inline CMessageMemberContributeChangedNotify& operator=(const CMessageMemberContributeChangedNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageMemberContributeChangedNotify& default_instance();
  void Swap(CMessageMemberContributeChangedNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageMemberContributeChangedNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageMemberContributeChangedNotify& from);
  void MergeFrom(const CMessageMemberContributeChangedNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 Contribute = 2;
  inline bool has_contribute() const;
  inline void clear_contribute();
  static const int kContributeFieldNumber = 2;
  inline ::google::protobuf::uint32 contribute() const;
  inline void set_contribute(::google::protobuf::uint32 value);
  
  // optional uint32 RoleID = 3;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIDFieldNumber = 3;
  inline ::google::protobuf::uint32 roleid() const;
  inline void set_roleid(::google::protobuf::uint32 value);
  
  // optional int32 Value = 4;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 4;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 contribute_;
  ::google::protobuf::uint32 roleid_;
  ::google::protobuf::int32 value_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageMemberContributeChangedNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessageQueryNpcWelfareRequest : public ::google::protobuf::Message {
 public:
  CMessageQueryNpcWelfareRequest();
  virtual ~CMessageQueryNpcWelfareRequest();
  
  CMessageQueryNpcWelfareRequest(const CMessageQueryNpcWelfareRequest& from);
  
  inline CMessageQueryNpcWelfareRequest& operator=(const CMessageQueryNpcWelfareRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageQueryNpcWelfareRequest& default_instance();
  void Swap(CMessageQueryNpcWelfareRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageQueryNpcWelfareRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageQueryNpcWelfareRequest& from);
  void MergeFrom(const CMessageQueryNpcWelfareRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 EntityID = 2;
  inline bool has_entityid() const;
  inline void clear_entityid();
  static const int kEntityIDFieldNumber = 2;
  inline ::google::protobuf::uint32 entityid() const;
  inline void set_entityid(::google::protobuf::uint32 value);
  
  // optional uint32 NpcTmpID = 3;
  inline bool has_npctmpid() const;
  inline void clear_npctmpid();
  static const int kNpcTmpIDFieldNumber = 3;
  inline ::google::protobuf::uint32 npctmpid() const;
  inline void set_npctmpid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 entityid_;
  ::google::protobuf::uint32 npctmpid_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageQueryNpcWelfareRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageQueryNpcWelfareResponse : public ::google::protobuf::Message {
 public:
  CMessageQueryNpcWelfareResponse();
  virtual ~CMessageQueryNpcWelfareResponse();
  
  CMessageQueryNpcWelfareResponse(const CMessageQueryNpcWelfareResponse& from);
  
  inline CMessageQueryNpcWelfareResponse& operator=(const CMessageQueryNpcWelfareResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageQueryNpcWelfareResponse& default_instance();
  void Swap(CMessageQueryNpcWelfareResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageQueryNpcWelfareResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageQueryNpcWelfareResponse& from);
  void MergeFrom(const CMessageQueryNpcWelfareResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 Money = 2;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 2;
  inline ::google::protobuf::uint32 money() const;
  inline void set_money(::google::protobuf::uint32 value);
  
  // optional uint32 Glory = 3;
  inline bool has_glory() const;
  inline void clear_glory();
  static const int kGloryFieldNumber = 3;
  inline ::google::protobuf::uint32 glory() const;
  inline void set_glory(::google::protobuf::uint32 value);
  
  // optional uint32 Errcode = 4;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 4;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 money_;
  ::google::protobuf::uint32 glory_;
  ::google::protobuf::uint32 errcode_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageQueryNpcWelfareResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageGetFamilyMoneyRequest : public ::google::protobuf::Message {
 public:
  CMessageGetFamilyMoneyRequest();
  virtual ~CMessageGetFamilyMoneyRequest();
  
  CMessageGetFamilyMoneyRequest(const CMessageGetFamilyMoneyRequest& from);
  
  inline CMessageGetFamilyMoneyRequest& operator=(const CMessageGetFamilyMoneyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageGetFamilyMoneyRequest& default_instance();
  void Swap(CMessageGetFamilyMoneyRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageGetFamilyMoneyRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageGetFamilyMoneyRequest& from);
  void MergeFrom(const CMessageGetFamilyMoneyRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 FamilyMoney = 2;
  inline bool has_familymoney() const;
  inline void clear_familymoney();
  static const int kFamilyMoneyFieldNumber = 2;
  inline ::google::protobuf::uint32 familymoney() const;
  inline void set_familymoney(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 familymoney_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageGetFamilyMoneyRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageGetFamilyMoneyResponse : public ::google::protobuf::Message {
 public:
  CMessageGetFamilyMoneyResponse();
  virtual ~CMessageGetFamilyMoneyResponse();
  
  CMessageGetFamilyMoneyResponse(const CMessageGetFamilyMoneyResponse& from);
  
  inline CMessageGetFamilyMoneyResponse& operator=(const CMessageGetFamilyMoneyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageGetFamilyMoneyResponse& default_instance();
  void Swap(CMessageGetFamilyMoneyResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageGetFamilyMoneyResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageGetFamilyMoneyResponse& from);
  void MergeFrom(const CMessageGetFamilyMoneyResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 Errcode = 2;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 2;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);
  
  // optional uint32 FamilyMoney = 3;
  inline bool has_familymoney() const;
  inline void clear_familymoney();
  static const int kFamilyMoneyFieldNumber = 3;
  inline ::google::protobuf::uint32 familymoney() const;
  inline void set_familymoney(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 errcode_;
  ::google::protobuf::uint32 familymoney_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageGetFamilyMoneyResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageAbortNpcNotify : public ::google::protobuf::Message {
 public:
  CMessageAbortNpcNotify();
  virtual ~CMessageAbortNpcNotify();
  
  CMessageAbortNpcNotify(const CMessageAbortNpcNotify& from);
  
  inline CMessageAbortNpcNotify& operator=(const CMessageAbortNpcNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageAbortNpcNotify& default_instance();
  void Swap(CMessageAbortNpcNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageAbortNpcNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageAbortNpcNotify& from);
  void MergeFrom(const CMessageAbortNpcNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 NpcID = 2;
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcIDFieldNumber = 2;
  inline ::google::protobuf::uint32 npcid() const;
  inline void set_npcid(::google::protobuf::uint32 value);
  
  // optional string HeaderName = 3;
  inline bool has_headername() const;
  inline void clear_headername();
  static const int kHeaderNameFieldNumber = 3;
  inline const ::std::string& headername() const;
  inline void set_headername(const ::std::string& value);
  inline void set_headername(const char* value);
  inline void set_headername(const char* value, size_t size);
  inline ::std::string* mutable_headername();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 npcid_;
  ::std::string* headername_;
  static const ::std::string _default_headername_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageAbortNpcNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessagePreBattleNotify : public ::google::protobuf::Message {
 public:
  CMessagePreBattleNotify();
  virtual ~CMessagePreBattleNotify();
  
  CMessagePreBattleNotify(const CMessagePreBattleNotify& from);
  
  inline CMessagePreBattleNotify& operator=(const CMessagePreBattleNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessagePreBattleNotify& default_instance();
  void Swap(CMessagePreBattleNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessagePreBattleNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessagePreBattleNotify& from);
  void MergeFrom(const CMessagePreBattleNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 NpcID = 2;
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcIDFieldNumber = 2;
  inline ::google::protobuf::uint32 npcid() const;
  inline void set_npcid(::google::protobuf::uint32 value);
  
  // optional string AttFamilyName = 3;
  inline bool has_attfamilyname() const;
  inline void clear_attfamilyname();
  static const int kAttFamilyNameFieldNumber = 3;
  inline const ::std::string& attfamilyname() const;
  inline void set_attfamilyname(const ::std::string& value);
  inline void set_attfamilyname(const char* value);
  inline void set_attfamilyname(const char* value, size_t size);
  inline ::std::string* mutable_attfamilyname();
  
  // optional string DefFamilyName = 4;
  inline bool has_deffamilyname() const;
  inline void clear_deffamilyname();
  static const int kDefFamilyNameFieldNumber = 4;
  inline const ::std::string& deffamilyname() const;
  inline void set_deffamilyname(const ::std::string& value);
  inline void set_deffamilyname(const char* value);
  inline void set_deffamilyname(const char* value, size_t size);
  inline ::std::string* mutable_deffamilyname();
  
  // optional uint32 Money = 5;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 5;
  inline ::google::protobuf::uint32 money() const;
  inline void set_money(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 npcid_;
  ::std::string* attfamilyname_;
  static const ::std::string _default_attfamilyname_;
  ::std::string* deffamilyname_;
  static const ::std::string _default_deffamilyname_;
  ::google::protobuf::uint32 money_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessagePreBattleNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessageGetExpCardRequest : public ::google::protobuf::Message {
 public:
  CMessageGetExpCardRequest();
  virtual ~CMessageGetExpCardRequest();
  
  CMessageGetExpCardRequest(const CMessageGetExpCardRequest& from);
  
  inline CMessageGetExpCardRequest& operator=(const CMessageGetExpCardRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageGetExpCardRequest& default_instance();
  void Swap(CMessageGetExpCardRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageGetExpCardRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageGetExpCardRequest& from);
  void MergeFrom(const CMessageGetExpCardRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 Msgcode = 2;
  inline bool has_msgcode() const;
  inline void clear_msgcode();
  static const int kMsgcodeFieldNumber = 2;
  inline ::google::protobuf::uint32 msgcode() const;
  inline void set_msgcode(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 msgcode_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageGetExpCardRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageGetExpCardResponse : public ::google::protobuf::Message {
 public:
  CMessageGetExpCardResponse();
  virtual ~CMessageGetExpCardResponse();
  
  CMessageGetExpCardResponse(const CMessageGetExpCardResponse& from);
  
  inline CMessageGetExpCardResponse& operator=(const CMessageGetExpCardResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageGetExpCardResponse& default_instance();
  void Swap(CMessageGetExpCardResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageGetExpCardResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageGetExpCardResponse& from);
  void MergeFrom(const CMessageGetExpCardResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 Errcode = 2;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 2;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);
  
  // optional uint32 RedStoneID = 3;
  inline bool has_redstoneid() const;
  inline void clear_redstoneid();
  static const int kRedStoneIDFieldNumber = 3;
  inline ::google::protobuf::uint32 redstoneid() const;
  inline void set_redstoneid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 errcode_;
  ::google::protobuf::uint32 redstoneid_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageGetExpCardResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageFamilyCanLevelUPNotify : public ::google::protobuf::Message {
 public:
  CMessageFamilyCanLevelUPNotify();
  virtual ~CMessageFamilyCanLevelUPNotify();
  
  CMessageFamilyCanLevelUPNotify(const CMessageFamilyCanLevelUPNotify& from);
  
  inline CMessageFamilyCanLevelUPNotify& operator=(const CMessageFamilyCanLevelUPNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageFamilyCanLevelUPNotify& default_instance();
  void Swap(CMessageFamilyCanLevelUPNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageFamilyCanLevelUPNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageFamilyCanLevelUPNotify& from);
  void MergeFrom(const CMessageFamilyCanLevelUPNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageFamilyCanLevelUPNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessageFamilyRepetionScoreNotify : public ::google::protobuf::Message {
 public:
  CMessageFamilyRepetionScoreNotify();
  virtual ~CMessageFamilyRepetionScoreNotify();
  
  CMessageFamilyRepetionScoreNotify(const CMessageFamilyRepetionScoreNotify& from);
  
  inline CMessageFamilyRepetionScoreNotify& operator=(const CMessageFamilyRepetionScoreNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageFamilyRepetionScoreNotify& default_instance();
  void Swap(CMessageFamilyRepetionScoreNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageFamilyRepetionScoreNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageFamilyRepetionScoreNotify& from);
  void MergeFrom(const CMessageFamilyRepetionScoreNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 RepetionLevel = 1;
  inline bool has_repetionlevel() const;
  inline void clear_repetionlevel();
  static const int kRepetionLevelFieldNumber = 1;
  inline ::google::protobuf::uint32 repetionlevel() const;
  inline void set_repetionlevel(::google::protobuf::uint32 value);
  
  // optional uint32 OgreNum = 2;
  inline bool has_ogrenum() const;
  inline void clear_ogrenum();
  static const int kOgreNumFieldNumber = 2;
  inline ::google::protobuf::uint32 ogrenum() const;
  inline void set_ogrenum(::google::protobuf::uint32 value);
  
  // optional uint32 TimeLength = 3;
  inline bool has_timelength() const;
  inline void clear_timelength();
  static const int kTimeLengthFieldNumber = 3;
  inline ::google::protobuf::uint32 timelength() const;
  inline void set_timelength(::google::protobuf::uint32 value);
  
  // optional uint32 WaveNum = 4;
  inline bool has_wavenum() const;
  inline void clear_wavenum();
  static const int kWaveNumFieldNumber = 4;
  inline ::google::protobuf::uint32 wavenum() const;
  inline void set_wavenum(::google::protobuf::uint32 value);
  
  // optional uint32 MaxHitNum = 5;
  inline bool has_maxhitnum() const;
  inline void clear_maxhitnum();
  static const int kMaxHitNumFieldNumber = 5;
  inline ::google::protobuf::uint32 maxhitnum() const;
  inline void set_maxhitnum(::google::protobuf::uint32 value);
  
  // optional uint32 Score = 6;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 6;
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 repetionlevel_;
  ::google::protobuf::uint32 ogrenum_;
  ::google::protobuf::uint32 timelength_;
  ::google::protobuf::uint32 wavenum_;
  ::google::protobuf::uint32 maxhitnum_;
  ::google::protobuf::uint32 score_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageFamilyRepetionScoreNotify* default_instance_;
};
// -------------------------------------------------------------------

class GoodItem : public ::google::protobuf::Message {
 public:
  GoodItem();
  virtual ~GoodItem();
  
  GoodItem(const GoodItem& from);
  
  inline GoodItem& operator=(const GoodItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GoodItem& default_instance();
  void Swap(GoodItem* other);
  
  // implements Message ----------------------------------------------
  
  GoodItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GoodItem& from);
  void MergeFrom(const GoodItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 ItemID = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);
  
  // optional uint32 ItemNum = 2;
  inline bool has_itemnum() const;
  inline void clear_itemnum();
  static const int kItemNumFieldNumber = 2;
  inline ::google::protobuf::uint32 itemnum() const;
  inline void set_itemnum(::google::protobuf::uint32 value);
  
  // optional uint32 ComposeID = 3;
  inline bool has_composeid() const;
  inline void clear_composeid();
  static const int kComposeIDFieldNumber = 3;
  inline ::google::protobuf::uint32 composeid() const;
  inline void set_composeid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 itemnum_;
  ::google::protobuf::uint32 composeid_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GoodItem* default_instance_;
};
// -------------------------------------------------------------------

class CMessageGetFamilyGoodsListRequest : public ::google::protobuf::Message {
 public:
  CMessageGetFamilyGoodsListRequest();
  virtual ~CMessageGetFamilyGoodsListRequest();
  
  CMessageGetFamilyGoodsListRequest(const CMessageGetFamilyGoodsListRequest& from);
  
  inline CMessageGetFamilyGoodsListRequest& operator=(const CMessageGetFamilyGoodsListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageGetFamilyGoodsListRequest& default_instance();
  void Swap(CMessageGetFamilyGoodsListRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageGetFamilyGoodsListRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageGetFamilyGoodsListRequest& from);
  void MergeFrom(const CMessageGetFamilyGoodsListRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 FamilyID = 2;
  inline bool has_familyid() const;
  inline void clear_familyid();
  static const int kFamilyIDFieldNumber = 2;
  inline ::google::protobuf::uint32 familyid() const;
  inline void set_familyid(::google::protobuf::uint32 value);
  
  // optional uint32 EntityID = 3;
  inline bool has_entityid() const;
  inline void clear_entityid();
  static const int kEntityIDFieldNumber = 3;
  inline ::google::protobuf::uint32 entityid() const;
  inline void set_entityid(::google::protobuf::uint32 value);
  
  // optional uint32 NpcTmpID = 4;
  inline bool has_npctmpid() const;
  inline void clear_npctmpid();
  static const int kNpcTmpIDFieldNumber = 4;
  inline ::google::protobuf::uint32 npctmpid() const;
  inline void set_npctmpid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 familyid_;
  ::google::protobuf::uint32 entityid_;
  ::google::protobuf::uint32 npctmpid_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageGetFamilyGoodsListRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageGetFamilyGoodsListResponse : public ::google::protobuf::Message {
 public:
  CMessageGetFamilyGoodsListResponse();
  virtual ~CMessageGetFamilyGoodsListResponse();
  
  CMessageGetFamilyGoodsListResponse(const CMessageGetFamilyGoodsListResponse& from);
  
  inline CMessageGetFamilyGoodsListResponse& operator=(const CMessageGetFamilyGoodsListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageGetFamilyGoodsListResponse& default_instance();
  void Swap(CMessageGetFamilyGoodsListResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageGetFamilyGoodsListResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageGetFamilyGoodsListResponse& from);
  void MergeFrom(const CMessageGetFamilyGoodsListResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 Errcode = 2;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 2;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);
  
  // repeated .GoodItem GoodsList = 3;
  inline int goodslist_size() const;
  inline void clear_goodslist();
  static const int kGoodsListFieldNumber = 3;
  inline const ::google::protobuf::RepeatedPtrField< ::GoodItem >& goodslist() const;
  inline ::google::protobuf::RepeatedPtrField< ::GoodItem >* mutable_goodslist();
  inline const ::GoodItem& goodslist(int index) const;
  inline ::GoodItem* mutable_goodslist(int index);
  inline ::GoodItem* add_goodslist();
  
  // optional uint32 NpcTmpID = 4;
  inline bool has_npctmpid() const;
  inline void clear_npctmpid();
  static const int kNpcTmpIDFieldNumber = 4;
  inline ::google::protobuf::uint32 npctmpid() const;
  inline void set_npctmpid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 errcode_;
  ::google::protobuf::RepeatedPtrField< ::GoodItem > goodslist_;
  ::google::protobuf::uint32 npctmpid_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageGetFamilyGoodsListResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageGetFamilyExchangeGoodsListRequest : public ::google::protobuf::Message {
 public:
  CMessageGetFamilyExchangeGoodsListRequest();
  virtual ~CMessageGetFamilyExchangeGoodsListRequest();
  
  CMessageGetFamilyExchangeGoodsListRequest(const CMessageGetFamilyExchangeGoodsListRequest& from);
  
  inline CMessageGetFamilyExchangeGoodsListRequest& operator=(const CMessageGetFamilyExchangeGoodsListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageGetFamilyExchangeGoodsListRequest& default_instance();
  void Swap(CMessageGetFamilyExchangeGoodsListRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageGetFamilyExchangeGoodsListRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageGetFamilyExchangeGoodsListRequest& from);
  void MergeFrom(const CMessageGetFamilyExchangeGoodsListRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 FamilyID = 2;
  inline bool has_familyid() const;
  inline void clear_familyid();
  static const int kFamilyIDFieldNumber = 2;
  inline ::google::protobuf::uint32 familyid() const;
  inline void set_familyid(::google::protobuf::uint32 value);
  
  // optional uint32 EntityID = 3;
  inline bool has_entityid() const;
  inline void clear_entityid();
  static const int kEntityIDFieldNumber = 3;
  inline ::google::protobuf::uint32 entityid() const;
  inline void set_entityid(::google::protobuf::uint32 value);
  
  // optional uint32 NpcTmpID = 4;
  inline bool has_npctmpid() const;
  inline void clear_npctmpid();
  static const int kNpcTmpIDFieldNumber = 4;
  inline ::google::protobuf::uint32 npctmpid() const;
  inline void set_npctmpid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 familyid_;
  ::google::protobuf::uint32 entityid_;
  ::google::protobuf::uint32 npctmpid_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageGetFamilyExchangeGoodsListRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageGetFamilyExchangeGoodsListResponse : public ::google::protobuf::Message {
 public:
  CMessageGetFamilyExchangeGoodsListResponse();
  virtual ~CMessageGetFamilyExchangeGoodsListResponse();
  
  CMessageGetFamilyExchangeGoodsListResponse(const CMessageGetFamilyExchangeGoodsListResponse& from);
  
  inline CMessageGetFamilyExchangeGoodsListResponse& operator=(const CMessageGetFamilyExchangeGoodsListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageGetFamilyExchangeGoodsListResponse& default_instance();
  void Swap(CMessageGetFamilyExchangeGoodsListResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageGetFamilyExchangeGoodsListResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageGetFamilyExchangeGoodsListResponse& from);
  void MergeFrom(const CMessageGetFamilyExchangeGoodsListResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .FamilyHead HeadMsg = 1;
  inline bool has_headmsg() const;
  inline void clear_headmsg();
  static const int kHeadMsgFieldNumber = 1;
  inline const ::FamilyHead& headmsg() const;
  inline ::FamilyHead* mutable_headmsg();
  
  // optional uint32 Errcode = 2;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 2;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);
  
  // repeated .GoodItem GoodsList = 3;
  inline int goodslist_size() const;
  inline void clear_goodslist();
  static const int kGoodsListFieldNumber = 3;
  inline const ::google::protobuf::RepeatedPtrField< ::GoodItem >& goodslist() const;
  inline ::google::protobuf::RepeatedPtrField< ::GoodItem >* mutable_goodslist();
  inline const ::GoodItem& goodslist(int index) const;
  inline ::GoodItem* mutable_goodslist(int index);
  inline ::GoodItem* add_goodslist();
  
  // optional uint32 NpcTmpID = 4;
  inline bool has_npctmpid() const;
  inline void clear_npctmpid();
  static const int kNpcTmpIDFieldNumber = 4;
  inline ::google::protobuf::uint32 npctmpid() const;
  inline void set_npctmpid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::FamilyHead* headmsg_;
  ::google::protobuf::uint32 errcode_;
  ::google::protobuf::RepeatedPtrField< ::GoodItem > goodslist_;
  ::google::protobuf::uint32 npctmpid_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageGetFamilyExchangeGoodsListResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageChangeFamilyGoodsListNotify : public ::google::protobuf::Message {
 public:
  CMessageChangeFamilyGoodsListNotify();
  virtual ~CMessageChangeFamilyGoodsListNotify();
  
  CMessageChangeFamilyGoodsListNotify(const CMessageChangeFamilyGoodsListNotify& from);
  
  inline CMessageChangeFamilyGoodsListNotify& operator=(const CMessageChangeFamilyGoodsListNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageChangeFamilyGoodsListNotify& default_instance();
  void Swap(CMessageChangeFamilyGoodsListNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageChangeFamilyGoodsListNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageChangeFamilyGoodsListNotify& from);
  void MergeFrom(const CMessageChangeFamilyGoodsListNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .GoodItem GoodList = 1;
  inline int goodlist_size() const;
  inline void clear_goodlist();
  static const int kGoodListFieldNumber = 1;
  inline const ::google::protobuf::RepeatedPtrField< ::GoodItem >& goodlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::GoodItem >* mutable_goodlist();
  inline const ::GoodItem& goodlist(int index) const;
  inline ::GoodItem* mutable_goodlist(int index);
  inline ::GoodItem* add_goodlist();
  
  // optional uint32 NpcTmpID = 2;
  inline bool has_npctmpid() const;
  inline void clear_npctmpid();
  static const int kNpcTmpIDFieldNumber = 2;
  inline ::google::protobuf::uint32 npctmpid() const;
  inline void set_npctmpid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::GoodItem > goodlist_;
  ::google::protobuf::uint32 npctmpid_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageChangeFamilyGoodsListNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessageChangeFamilyExchangeGoodsListNotify : public ::google::protobuf::Message {
 public:
  CMessageChangeFamilyExchangeGoodsListNotify();
  virtual ~CMessageChangeFamilyExchangeGoodsListNotify();
  
  CMessageChangeFamilyExchangeGoodsListNotify(const CMessageChangeFamilyExchangeGoodsListNotify& from);
  
  inline CMessageChangeFamilyExchangeGoodsListNotify& operator=(const CMessageChangeFamilyExchangeGoodsListNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageChangeFamilyExchangeGoodsListNotify& default_instance();
  void Swap(CMessageChangeFamilyExchangeGoodsListNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageChangeFamilyExchangeGoodsListNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageChangeFamilyExchangeGoodsListNotify& from);
  void MergeFrom(const CMessageChangeFamilyExchangeGoodsListNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .GoodItem GoodList = 1;
  inline int goodlist_size() const;
  inline void clear_goodlist();
  static const int kGoodListFieldNumber = 1;
  inline const ::google::protobuf::RepeatedPtrField< ::GoodItem >& goodlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::GoodItem >* mutable_goodlist();
  inline const ::GoodItem& goodlist(int index) const;
  inline ::GoodItem* mutable_goodlist(int index);
  inline ::GoodItem* add_goodlist();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::GoodItem > goodlist_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageChangeFamilyExchangeGoodsListNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessageUseFamilyLeagueItemNotify : public ::google::protobuf::Message {
 public:
  CMessageUseFamilyLeagueItemNotify();
  virtual ~CMessageUseFamilyLeagueItemNotify();
  
  CMessageUseFamilyLeagueItemNotify(const CMessageUseFamilyLeagueItemNotify& from);
  
  inline CMessageUseFamilyLeagueItemNotify& operator=(const CMessageUseFamilyLeagueItemNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageUseFamilyLeagueItemNotify& default_instance();
  void Swap(CMessageUseFamilyLeagueItemNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageUseFamilyLeagueItemNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageUseFamilyLeagueItemNotify& from);
  void MergeFrom(const CMessageUseFamilyLeagueItemNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .GoodItem GoodList = 1;
  inline int goodlist_size() const;
  inline void clear_goodlist();
  static const int kGoodListFieldNumber = 1;
  inline const ::google::protobuf::RepeatedPtrField< ::GoodItem >& goodlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::GoodItem >* mutable_goodlist();
  inline const ::GoodItem& goodlist(int index) const;
  inline ::GoodItem* mutable_goodlist(int index);
  inline ::GoodItem* add_goodlist();
  
  // optional uint32 ManagerID = 2;
  inline bool has_managerid() const;
  inline void clear_managerid();
  static const int kManagerIDFieldNumber = 2;
  inline ::google::protobuf::uint32 managerid() const;
  inline void set_managerid(::google::protobuf::uint32 value);
  
  // optional string ManagerName = 3;
  inline bool has_managername() const;
  inline void clear_managername();
  static const int kManagerNameFieldNumber = 3;
  inline const ::std::string& managername() const;
  inline void set_managername(const ::std::string& value);
  inline void set_managername(const char* value);
  inline void set_managername(const char* value, size_t size);
  inline ::std::string* mutable_managername();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::GoodItem > goodlist_;
  ::google::protobuf::uint32 managerid_;
  ::std::string* managername_;
  static const ::std::string _default_managername_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageUseFamilyLeagueItemNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessageGetHomeInfoRequest : public ::google::protobuf::Message {
 public:
  CMessageGetHomeInfoRequest();
  virtual ~CMessageGetHomeInfoRequest();
  
  CMessageGetHomeInfoRequest(const CMessageGetHomeInfoRequest& from);
  
  inline CMessageGetHomeInfoRequest& operator=(const CMessageGetHomeInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageGetHomeInfoRequest& default_instance();
  void Swap(CMessageGetHomeInfoRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageGetHomeInfoRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageGetHomeInfoRequest& from);
  void MergeFrom(const CMessageGetHomeInfoRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 CharID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);
  
  // optional uint32 FamilyID = 2;
  inline bool has_familyid() const;
  inline void clear_familyid();
  static const int kFamilyIDFieldNumber = 2;
  inline ::google::protobuf::uint32 familyid() const;
  inline void set_familyid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 familyid_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageGetHomeInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageGetHomeInfoResponse : public ::google::protobuf::Message {
 public:
  CMessageGetHomeInfoResponse();
  virtual ~CMessageGetHomeInfoResponse();
  
  CMessageGetHomeInfoResponse(const CMessageGetHomeInfoResponse& from);
  
  inline CMessageGetHomeInfoResponse& operator=(const CMessageGetHomeInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageGetHomeInfoResponse& default_instance();
  void Swap(CMessageGetHomeInfoResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageGetHomeInfoResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageGetHomeInfoResponse& from);
  void MergeFrom(const CMessageGetHomeInfoResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 CharID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);
  
  // optional uint32 FamilyID = 2;
  inline bool has_familyid() const;
  inline void clear_familyid();
  static const int kFamilyIDFieldNumber = 2;
  inline ::google::protobuf::uint32 familyid() const;
  inline void set_familyid(::google::protobuf::uint32 value);
  
  // optional uint32 Result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);
  
  // repeated uint32 Wizard = 4;
  inline int wizard_size() const;
  inline void clear_wizard();
  static const int kWizardFieldNumber = 4;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >& wizard() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >* mutable_wizard();
  inline ::google::protobuf::uint32 wizard(int index) const;
  inline void set_wizard(int index, ::google::protobuf::uint32 value);
  inline void add_wizard(::google::protobuf::uint32 value);
  
  // repeated uint32 Construct = 5;
  inline int construct_size() const;
  inline void clear_construct();
  static const int kConstructFieldNumber = 5;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >& construct() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >* mutable_construct();
  inline ::google::protobuf::uint32 construct(int index) const;
  inline void set_construct(int index, ::google::protobuf::uint32 value);
  inline void add_construct(::google::protobuf::uint32 value);
  
  // repeated uint32 Level = 6;
  inline int level_size() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >& level() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >* mutable_level();
  inline ::google::protobuf::uint32 level(int index) const;
  inline void set_level(int index, ::google::protobuf::uint32 value);
  inline void add_level(::google::protobuf::uint32 value);
  
  // repeated uint32 UpData = 7;
  inline int updata_size() const;
  inline void clear_updata();
  static const int kUpDataFieldNumber = 7;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >& updata() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >* mutable_updata();
  inline ::google::protobuf::uint32 updata(int index) const;
  inline void set_updata(int index, ::google::protobuf::uint32 value);
  inline void add_updata(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 familyid_;
  ::google::protobuf::uint32 result_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > wizard_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > construct_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > level_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > updata_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageGetHomeInfoResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageUpgradeHomeRequest : public ::google::protobuf::Message {
 public:
  CMessageUpgradeHomeRequest();
  virtual ~CMessageUpgradeHomeRequest();
  
  CMessageUpgradeHomeRequest(const CMessageUpgradeHomeRequest& from);
  
  inline CMessageUpgradeHomeRequest& operator=(const CMessageUpgradeHomeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageUpgradeHomeRequest& default_instance();
  void Swap(CMessageUpgradeHomeRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageUpgradeHomeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageUpgradeHomeRequest& from);
  void MergeFrom(const CMessageUpgradeHomeRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 CharID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);
  
  // optional uint32 Type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 type_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageUpgradeHomeRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageUpgradeHomeResponse : public ::google::protobuf::Message {
 public:
  CMessageUpgradeHomeResponse();
  virtual ~CMessageUpgradeHomeResponse();
  
  CMessageUpgradeHomeResponse(const CMessageUpgradeHomeResponse& from);
  
  inline CMessageUpgradeHomeResponse& operator=(const CMessageUpgradeHomeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageUpgradeHomeResponse& default_instance();
  void Swap(CMessageUpgradeHomeResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageUpgradeHomeResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageUpgradeHomeResponse& from);
  void MergeFrom(const CMessageUpgradeHomeResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 CharID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);
  
  // optional uint32 Type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // optional uint32 UpData = 3;
  inline bool has_updata() const;
  inline void clear_updata();
  static const int kUpDataFieldNumber = 3;
  inline ::google::protobuf::uint32 updata() const;
  inline void set_updata(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 updata_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageUpgradeHomeResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageFamilyStabilityChangedNotify : public ::google::protobuf::Message {
 public:
  CMessageFamilyStabilityChangedNotify();
  virtual ~CMessageFamilyStabilityChangedNotify();
  
  CMessageFamilyStabilityChangedNotify(const CMessageFamilyStabilityChangedNotify& from);
  
  inline CMessageFamilyStabilityChangedNotify& operator=(const CMessageFamilyStabilityChangedNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageFamilyStabilityChangedNotify& default_instance();
  void Swap(CMessageFamilyStabilityChangedNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageFamilyStabilityChangedNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageFamilyStabilityChangedNotify& from);
  void MergeFrom(const CMessageFamilyStabilityChangedNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 Reason = 1;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 1;
  inline ::google::protobuf::uint32 reason() const;
  inline void set_reason(::google::protobuf::uint32 value);
  
  // optional uint32 Stability = 2;
  inline bool has_stability() const;
  inline void clear_stability();
  static const int kStabilityFieldNumber = 2;
  inline ::google::protobuf::uint32 stability() const;
  inline void set_stability(::google::protobuf::uint32 value);
  
  // optional uint32 Value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);
  
  // optional uint32 RoleID = 4;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIDFieldNumber = 4;
  inline ::google::protobuf::uint32 roleid() const;
  inline void set_roleid(::google::protobuf::uint32 value);
  
  // optional string RoleName = 5;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 5;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  
  // optional uint32 OnLineTime = 6;
  inline bool has_onlinetime() const;
  inline void clear_onlinetime();
  static const int kOnLineTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 onlinetime() const;
  inline void set_onlinetime(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 reason_;
  ::google::protobuf::uint32 stability_;
  ::google::protobuf::uint32 value_;
  ::google::protobuf::uint32 roleid_;
  ::std::string* rolename_;
  static const ::std::string _default_rolename_;
  ::google::protobuf::uint32 onlinetime_;
  friend void  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageFamilyStabilityChangedNotify* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// FamilyHead

// optional uint32 RoleID = 1;
inline bool FamilyHead::has_roleid() const {
  return _has_bit(0);
}
inline void FamilyHead::clear_roleid() {
  roleid_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 FamilyHead::roleid() const {
  return roleid_;
}
inline void FamilyHead::set_roleid(::google::protobuf::uint32 value) {
  _set_bit(0);
  roleid_ = value;
}

// optional uint32 MsgID = 2;
inline bool FamilyHead::has_msgid() const {
  return _has_bit(1);
}
inline void FamilyHead::clear_msgid() {
  msgid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 FamilyHead::msgid() const {
  return msgid_;
}
inline void FamilyHead::set_msgid(::google::protobuf::uint32 value) {
  _set_bit(1);
  msgid_ = value;
}

// optional uint32 EntityID = 3;
inline bool FamilyHead::has_entityid() const {
  return _has_bit(2);
}
inline void FamilyHead::clear_entityid() {
  entityid_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 FamilyHead::entityid() const {
  return entityid_;
}
inline void FamilyHead::set_entityid(::google::protobuf::uint32 value) {
  _set_bit(2);
  entityid_ = value;
}

// -------------------------------------------------------------------

// CMessageCreatFamilyRequest

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageCreatFamilyRequest::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageCreatFamilyRequest::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageCreatFamilyRequest::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageCreatFamilyRequest::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional string FamilyName = 2;
inline bool CMessageCreatFamilyRequest::has_familyname() const {
  return _has_bit(1);
}
inline void CMessageCreatFamilyRequest::clear_familyname() {
  if (familyname_ != &_default_familyname_) {
    familyname_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CMessageCreatFamilyRequest::familyname() const {
  return *familyname_;
}
inline void CMessageCreatFamilyRequest::set_familyname(const ::std::string& value) {
  _set_bit(1);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  familyname_->assign(value);
}
inline void CMessageCreatFamilyRequest::set_familyname(const char* value) {
  _set_bit(1);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  familyname_->assign(value);
}
inline void CMessageCreatFamilyRequest::set_familyname(const char* value, size_t size) {
  _set_bit(1);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  familyname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageCreatFamilyRequest::mutable_familyname() {
  _set_bit(1);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  return familyname_;
}

// optional uint32 NpcEntityID = 3;
inline bool CMessageCreatFamilyRequest::has_npcentityid() const {
  return _has_bit(2);
}
inline void CMessageCreatFamilyRequest::clear_npcentityid() {
  npcentityid_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageCreatFamilyRequest::npcentityid() const {
  return npcentityid_;
}
inline void CMessageCreatFamilyRequest::set_npcentityid(::google::protobuf::uint32 value) {
  _set_bit(2);
  npcentityid_ = value;
}

// -------------------------------------------------------------------

// CMessageCreatFamilyResponse

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageCreatFamilyResponse::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageCreatFamilyResponse::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageCreatFamilyResponse::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageCreatFamilyResponse::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 ErrCode = 2;
inline bool CMessageCreatFamilyResponse::has_errcode() const {
  return _has_bit(1);
}
inline void CMessageCreatFamilyResponse::clear_errcode() {
  errcode_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageCreatFamilyResponse::errcode() const {
  return errcode_;
}
inline void CMessageCreatFamilyResponse::set_errcode(::google::protobuf::uint32 value) {
  _set_bit(1);
  errcode_ = value;
}

// optional uint32 FamilyID = 3;
inline bool CMessageCreatFamilyResponse::has_familyid() const {
  return _has_bit(2);
}
inline void CMessageCreatFamilyResponse::clear_familyid() {
  familyid_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageCreatFamilyResponse::familyid() const {
  return familyid_;
}
inline void CMessageCreatFamilyResponse::set_familyid(::google::protobuf::uint32 value) {
  _set_bit(2);
  familyid_ = value;
}

// optional string FamilyName = 4;
inline bool CMessageCreatFamilyResponse::has_familyname() const {
  return _has_bit(3);
}
inline void CMessageCreatFamilyResponse::clear_familyname() {
  if (familyname_ != &_default_familyname_) {
    familyname_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& CMessageCreatFamilyResponse::familyname() const {
  return *familyname_;
}
inline void CMessageCreatFamilyResponse::set_familyname(const ::std::string& value) {
  _set_bit(3);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  familyname_->assign(value);
}
inline void CMessageCreatFamilyResponse::set_familyname(const char* value) {
  _set_bit(3);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  familyname_->assign(value);
}
inline void CMessageCreatFamilyResponse::set_familyname(const char* value, size_t size) {
  _set_bit(3);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  familyname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageCreatFamilyResponse::mutable_familyname() {
  _set_bit(3);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  return familyname_;
}

// -------------------------------------------------------------------

// CMessageInviteMemberRequest

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageInviteMemberRequest::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageInviteMemberRequest::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageInviteMemberRequest::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageInviteMemberRequest::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 RoleID = 2;
inline bool CMessageInviteMemberRequest::has_roleid() const {
  return _has_bit(1);
}
inline void CMessageInviteMemberRequest::clear_roleid() {
  roleid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageInviteMemberRequest::roleid() const {
  return roleid_;
}
inline void CMessageInviteMemberRequest::set_roleid(::google::protobuf::uint32 value) {
  _set_bit(1);
  roleid_ = value;
}

// optional string RoleName = 3;
inline bool CMessageInviteMemberRequest::has_rolename() const {
  return _has_bit(2);
}
inline void CMessageInviteMemberRequest::clear_rolename() {
  if (rolename_ != &_default_rolename_) {
    rolename_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& CMessageInviteMemberRequest::rolename() const {
  return *rolename_;
}
inline void CMessageInviteMemberRequest::set_rolename(const ::std::string& value) {
  _set_bit(2);
  if (rolename_ == &_default_rolename_) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void CMessageInviteMemberRequest::set_rolename(const char* value) {
  _set_bit(2);
  if (rolename_ == &_default_rolename_) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void CMessageInviteMemberRequest::set_rolename(const char* value, size_t size) {
  _set_bit(2);
  if (rolename_ == &_default_rolename_) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageInviteMemberRequest::mutable_rolename() {
  _set_bit(2);
  if (rolename_ == &_default_rolename_) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}

// -------------------------------------------------------------------

// CMessageInviteMemberResponse

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageInviteMemberResponse::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageInviteMemberResponse::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageInviteMemberResponse::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageInviteMemberResponse::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 Errcode = 2;
inline bool CMessageInviteMemberResponse::has_errcode() const {
  return _has_bit(1);
}
inline void CMessageInviteMemberResponse::clear_errcode() {
  errcode_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageInviteMemberResponse::errcode() const {
  return errcode_;
}
inline void CMessageInviteMemberResponse::set_errcode(::google::protobuf::uint32 value) {
  _set_bit(1);
  errcode_ = value;
}

// optional string RoleName = 3;
inline bool CMessageInviteMemberResponse::has_rolename() const {
  return _has_bit(2);
}
inline void CMessageInviteMemberResponse::clear_rolename() {
  if (rolename_ != &_default_rolename_) {
    rolename_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& CMessageInviteMemberResponse::rolename() const {
  return *rolename_;
}
inline void CMessageInviteMemberResponse::set_rolename(const ::std::string& value) {
  _set_bit(2);
  if (rolename_ == &_default_rolename_) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void CMessageInviteMemberResponse::set_rolename(const char* value) {
  _set_bit(2);
  if (rolename_ == &_default_rolename_) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void CMessageInviteMemberResponse::set_rolename(const char* value, size_t size) {
  _set_bit(2);
  if (rolename_ == &_default_rolename_) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageInviteMemberResponse::mutable_rolename() {
  _set_bit(2);
  if (rolename_ == &_default_rolename_) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}

// -------------------------------------------------------------------

// CMessageFamilyInvitedNotify

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageFamilyInvitedNotify::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageFamilyInvitedNotify::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageFamilyInvitedNotify::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageFamilyInvitedNotify::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional string PlayerName = 2;
inline bool CMessageFamilyInvitedNotify::has_playername() const {
  return _has_bit(1);
}
inline void CMessageFamilyInvitedNotify::clear_playername() {
  if (playername_ != &_default_playername_) {
    playername_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CMessageFamilyInvitedNotify::playername() const {
  return *playername_;
}
inline void CMessageFamilyInvitedNotify::set_playername(const ::std::string& value) {
  _set_bit(1);
  if (playername_ == &_default_playername_) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void CMessageFamilyInvitedNotify::set_playername(const char* value) {
  _set_bit(1);
  if (playername_ == &_default_playername_) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void CMessageFamilyInvitedNotify::set_playername(const char* value, size_t size) {
  _set_bit(1);
  if (playername_ == &_default_playername_) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageFamilyInvitedNotify::mutable_playername() {
  _set_bit(1);
  if (playername_ == &_default_playername_) {
    playername_ = new ::std::string;
  }
  return playername_;
}

// optional string FamiltyName = 3;
inline bool CMessageFamilyInvitedNotify::has_familtyname() const {
  return _has_bit(2);
}
inline void CMessageFamilyInvitedNotify::clear_familtyname() {
  if (familtyname_ != &_default_familtyname_) {
    familtyname_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& CMessageFamilyInvitedNotify::familtyname() const {
  return *familtyname_;
}
inline void CMessageFamilyInvitedNotify::set_familtyname(const ::std::string& value) {
  _set_bit(2);
  if (familtyname_ == &_default_familtyname_) {
    familtyname_ = new ::std::string;
  }
  familtyname_->assign(value);
}
inline void CMessageFamilyInvitedNotify::set_familtyname(const char* value) {
  _set_bit(2);
  if (familtyname_ == &_default_familtyname_) {
    familtyname_ = new ::std::string;
  }
  familtyname_->assign(value);
}
inline void CMessageFamilyInvitedNotify::set_familtyname(const char* value, size_t size) {
  _set_bit(2);
  if (familtyname_ == &_default_familtyname_) {
    familtyname_ = new ::std::string;
  }
  familtyname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageFamilyInvitedNotify::mutable_familtyname() {
  _set_bit(2);
  if (familtyname_ == &_default_familtyname_) {
    familtyname_ = new ::std::string;
  }
  return familtyname_;
}

// optional uint32 RoleID = 4;
inline bool CMessageFamilyInvitedNotify::has_roleid() const {
  return _has_bit(3);
}
inline void CMessageFamilyInvitedNotify::clear_roleid() {
  roleid_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessageFamilyInvitedNotify::roleid() const {
  return roleid_;
}
inline void CMessageFamilyInvitedNotify::set_roleid(::google::protobuf::uint32 value) {
  _set_bit(3);
  roleid_ = value;
}

// optional uint32 FamilyID = 5;
inline bool CMessageFamilyInvitedNotify::has_familyid() const {
  return _has_bit(4);
}
inline void CMessageFamilyInvitedNotify::clear_familyid() {
  familyid_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 CMessageFamilyInvitedNotify::familyid() const {
  return familyid_;
}
inline void CMessageFamilyInvitedNotify::set_familyid(::google::protobuf::uint32 value) {
  _set_bit(4);
  familyid_ = value;
}

// optional uint32 FamilyLevel = 6;
inline bool CMessageFamilyInvitedNotify::has_familylevel() const {
  return _has_bit(5);
}
inline void CMessageFamilyInvitedNotify::clear_familylevel() {
  familylevel_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 CMessageFamilyInvitedNotify::familylevel() const {
  return familylevel_;
}
inline void CMessageFamilyInvitedNotify::set_familylevel(::google::protobuf::uint32 value) {
  _set_bit(5);
  familylevel_ = value;
}

// optional uint32 MemberNum = 7;
inline bool CMessageFamilyInvitedNotify::has_membernum() const {
  return _has_bit(6);
}
inline void CMessageFamilyInvitedNotify::clear_membernum() {
  membernum_ = 0u;
  _clear_bit(6);
}
inline ::google::protobuf::uint32 CMessageFamilyInvitedNotify::membernum() const {
  return membernum_;
}
inline void CMessageFamilyInvitedNotify::set_membernum(::google::protobuf::uint32 value) {
  _set_bit(6);
  membernum_ = value;
}

// optional string CorpsName = 8;
inline bool CMessageFamilyInvitedNotify::has_corpsname() const {
  return _has_bit(7);
}
inline void CMessageFamilyInvitedNotify::clear_corpsname() {
  if (corpsname_ != &_default_corpsname_) {
    corpsname_->clear();
  }
  _clear_bit(7);
}
inline const ::std::string& CMessageFamilyInvitedNotify::corpsname() const {
  return *corpsname_;
}
inline void CMessageFamilyInvitedNotify::set_corpsname(const ::std::string& value) {
  _set_bit(7);
  if (corpsname_ == &_default_corpsname_) {
    corpsname_ = new ::std::string;
  }
  corpsname_->assign(value);
}
inline void CMessageFamilyInvitedNotify::set_corpsname(const char* value) {
  _set_bit(7);
  if (corpsname_ == &_default_corpsname_) {
    corpsname_ = new ::std::string;
  }
  corpsname_->assign(value);
}
inline void CMessageFamilyInvitedNotify::set_corpsname(const char* value, size_t size) {
  _set_bit(7);
  if (corpsname_ == &_default_corpsname_) {
    corpsname_ = new ::std::string;
  }
  corpsname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageFamilyInvitedNotify::mutable_corpsname() {
  _set_bit(7);
  if (corpsname_ == &_default_corpsname_) {
    corpsname_ = new ::std::string;
  }
  return corpsname_;
}

// optional uint32 Glory = 9;
inline bool CMessageFamilyInvitedNotify::has_glory() const {
  return _has_bit(8);
}
inline void CMessageFamilyInvitedNotify::clear_glory() {
  glory_ = 0u;
  _clear_bit(8);
}
inline ::google::protobuf::uint32 CMessageFamilyInvitedNotify::glory() const {
  return glory_;
}
inline void CMessageFamilyInvitedNotify::set_glory(::google::protobuf::uint32 value) {
  _set_bit(8);
  glory_ = value;
}

// optional uint32 StarLevel = 10;
inline bool CMessageFamilyInvitedNotify::has_starlevel() const {
  return _has_bit(9);
}
inline void CMessageFamilyInvitedNotify::clear_starlevel() {
  starlevel_ = 0u;
  _clear_bit(9);
}
inline ::google::protobuf::uint32 CMessageFamilyInvitedNotify::starlevel() const {
  return starlevel_;
}
inline void CMessageFamilyInvitedNotify::set_starlevel(::google::protobuf::uint32 value) {
  _set_bit(9);
  starlevel_ = value;
}

// optional uint32 NpcID = 11;
inline bool CMessageFamilyInvitedNotify::has_npcid() const {
  return _has_bit(10);
}
inline void CMessageFamilyInvitedNotify::clear_npcid() {
  npcid_ = 0u;
  _clear_bit(10);
}
inline ::google::protobuf::uint32 CMessageFamilyInvitedNotify::npcid() const {
  return npcid_;
}
inline void CMessageFamilyInvitedNotify::set_npcid(::google::protobuf::uint32 value) {
  _set_bit(10);
  npcid_ = value;
}

// optional string FamilyHeaderName = 12;
inline bool CMessageFamilyInvitedNotify::has_familyheadername() const {
  return _has_bit(11);
}
inline void CMessageFamilyInvitedNotify::clear_familyheadername() {
  if (familyheadername_ != &_default_familyheadername_) {
    familyheadername_->clear();
  }
  _clear_bit(11);
}
inline const ::std::string& CMessageFamilyInvitedNotify::familyheadername() const {
  return *familyheadername_;
}
inline void CMessageFamilyInvitedNotify::set_familyheadername(const ::std::string& value) {
  _set_bit(11);
  if (familyheadername_ == &_default_familyheadername_) {
    familyheadername_ = new ::std::string;
  }
  familyheadername_->assign(value);
}
inline void CMessageFamilyInvitedNotify::set_familyheadername(const char* value) {
  _set_bit(11);
  if (familyheadername_ == &_default_familyheadername_) {
    familyheadername_ = new ::std::string;
  }
  familyheadername_->assign(value);
}
inline void CMessageFamilyInvitedNotify::set_familyheadername(const char* value, size_t size) {
  _set_bit(11);
  if (familyheadername_ == &_default_familyheadername_) {
    familyheadername_ = new ::std::string;
  }
  familyheadername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageFamilyInvitedNotify::mutable_familyheadername() {
  _set_bit(11);
  if (familyheadername_ == &_default_familyheadername_) {
    familyheadername_ = new ::std::string;
  }
  return familyheadername_;
}

// optional uint32 UnionID = 13;
inline bool CMessageFamilyInvitedNotify::has_unionid() const {
  return _has_bit(12);
}
inline void CMessageFamilyInvitedNotify::clear_unionid() {
  unionid_ = 0u;
  _clear_bit(12);
}
inline ::google::protobuf::uint32 CMessageFamilyInvitedNotify::unionid() const {
  return unionid_;
}
inline void CMessageFamilyInvitedNotify::set_unionid(::google::protobuf::uint32 value) {
  _set_bit(12);
  unionid_ = value;
}

// optional string UnionName = 14;
inline bool CMessageFamilyInvitedNotify::has_unionname() const {
  return _has_bit(13);
}
inline void CMessageFamilyInvitedNotify::clear_unionname() {
  if (unionname_ != &_default_unionname_) {
    unionname_->clear();
  }
  _clear_bit(13);
}
inline const ::std::string& CMessageFamilyInvitedNotify::unionname() const {
  return *unionname_;
}
inline void CMessageFamilyInvitedNotify::set_unionname(const ::std::string& value) {
  _set_bit(13);
  if (unionname_ == &_default_unionname_) {
    unionname_ = new ::std::string;
  }
  unionname_->assign(value);
}
inline void CMessageFamilyInvitedNotify::set_unionname(const char* value) {
  _set_bit(13);
  if (unionname_ == &_default_unionname_) {
    unionname_ = new ::std::string;
  }
  unionname_->assign(value);
}
inline void CMessageFamilyInvitedNotify::set_unionname(const char* value, size_t size) {
  _set_bit(13);
  if (unionname_ == &_default_unionname_) {
    unionname_ = new ::std::string;
  }
  unionname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageFamilyInvitedNotify::mutable_unionname() {
  _set_bit(13);
  if (unionname_ == &_default_unionname_) {
    unionname_ = new ::std::string;
  }
  return unionname_;
}

// -------------------------------------------------------------------

// CMessageReplyFamilyInviteRequest

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageReplyFamilyInviteRequest::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageReplyFamilyInviteRequest::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageReplyFamilyInviteRequest::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageReplyFamilyInviteRequest::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 Result = 2;
inline bool CMessageReplyFamilyInviteRequest::has_result() const {
  return _has_bit(1);
}
inline void CMessageReplyFamilyInviteRequest::clear_result() {
  result_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageReplyFamilyInviteRequest::result() const {
  return result_;
}
inline void CMessageReplyFamilyInviteRequest::set_result(::google::protobuf::uint32 value) {
  _set_bit(1);
  result_ = value;
}

// optional uint32 FamilyID = 3;
inline bool CMessageReplyFamilyInviteRequest::has_familyid() const {
  return _has_bit(2);
}
inline void CMessageReplyFamilyInviteRequest::clear_familyid() {
  familyid_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageReplyFamilyInviteRequest::familyid() const {
  return familyid_;
}
inline void CMessageReplyFamilyInviteRequest::set_familyid(::google::protobuf::uint32 value) {
  _set_bit(2);
  familyid_ = value;
}

// optional uint32 InvitingRoleID = 4;
inline bool CMessageReplyFamilyInviteRequest::has_invitingroleid() const {
  return _has_bit(3);
}
inline void CMessageReplyFamilyInviteRequest::clear_invitingroleid() {
  invitingroleid_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessageReplyFamilyInviteRequest::invitingroleid() const {
  return invitingroleid_;
}
inline void CMessageReplyFamilyInviteRequest::set_invitingroleid(::google::protobuf::uint32 value) {
  _set_bit(3);
  invitingroleid_ = value;
}

// -------------------------------------------------------------------

// CMessageReplyFamilyInviteResponse

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageReplyFamilyInviteResponse::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageReplyFamilyInviteResponse::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageReplyFamilyInviteResponse::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageReplyFamilyInviteResponse::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 Errcode = 2;
inline bool CMessageReplyFamilyInviteResponse::has_errcode() const {
  return _has_bit(1);
}
inline void CMessageReplyFamilyInviteResponse::clear_errcode() {
  errcode_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageReplyFamilyInviteResponse::errcode() const {
  return errcode_;
}
inline void CMessageReplyFamilyInviteResponse::set_errcode(::google::protobuf::uint32 value) {
  _set_bit(1);
  errcode_ = value;
}

// optional uint32 FamilyID = 3;
inline bool CMessageReplyFamilyInviteResponse::has_familyid() const {
  return _has_bit(2);
}
inline void CMessageReplyFamilyInviteResponse::clear_familyid() {
  familyid_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageReplyFamilyInviteResponse::familyid() const {
  return familyid_;
}
inline void CMessageReplyFamilyInviteResponse::set_familyid(::google::protobuf::uint32 value) {
  _set_bit(2);
  familyid_ = value;
}

// optional string FamilyName = 4;
inline bool CMessageReplyFamilyInviteResponse::has_familyname() const {
  return _has_bit(3);
}
inline void CMessageReplyFamilyInviteResponse::clear_familyname() {
  if (familyname_ != &_default_familyname_) {
    familyname_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& CMessageReplyFamilyInviteResponse::familyname() const {
  return *familyname_;
}
inline void CMessageReplyFamilyInviteResponse::set_familyname(const ::std::string& value) {
  _set_bit(3);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  familyname_->assign(value);
}
inline void CMessageReplyFamilyInviteResponse::set_familyname(const char* value) {
  _set_bit(3);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  familyname_->assign(value);
}
inline void CMessageReplyFamilyInviteResponse::set_familyname(const char* value, size_t size) {
  _set_bit(3);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  familyname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageReplyFamilyInviteResponse::mutable_familyname() {
  _set_bit(3);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  return familyname_;
}

// optional uint32 Result = 5;
inline bool CMessageReplyFamilyInviteResponse::has_result() const {
  return _has_bit(4);
}
inline void CMessageReplyFamilyInviteResponse::clear_result() {
  result_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 CMessageReplyFamilyInviteResponse::result() const {
  return result_;
}
inline void CMessageReplyFamilyInviteResponse::set_result(::google::protobuf::uint32 value) {
  _set_bit(4);
  result_ = value;
}

// optional uint32 CorpsID = 6;
inline bool CMessageReplyFamilyInviteResponse::has_corpsid() const {
  return _has_bit(5);
}
inline void CMessageReplyFamilyInviteResponse::clear_corpsid() {
  corpsid_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 CMessageReplyFamilyInviteResponse::corpsid() const {
  return corpsid_;
}
inline void CMessageReplyFamilyInviteResponse::set_corpsid(::google::protobuf::uint32 value) {
  _set_bit(5);
  corpsid_ = value;
}

// optional string CorpsName = 7;
inline bool CMessageReplyFamilyInviteResponse::has_corpsname() const {
  return _has_bit(6);
}
inline void CMessageReplyFamilyInviteResponse::clear_corpsname() {
  if (corpsname_ != &_default_corpsname_) {
    corpsname_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& CMessageReplyFamilyInviteResponse::corpsname() const {
  return *corpsname_;
}
inline void CMessageReplyFamilyInviteResponse::set_corpsname(const ::std::string& value) {
  _set_bit(6);
  if (corpsname_ == &_default_corpsname_) {
    corpsname_ = new ::std::string;
  }
  corpsname_->assign(value);
}
inline void CMessageReplyFamilyInviteResponse::set_corpsname(const char* value) {
  _set_bit(6);
  if (corpsname_ == &_default_corpsname_) {
    corpsname_ = new ::std::string;
  }
  corpsname_->assign(value);
}
inline void CMessageReplyFamilyInviteResponse::set_corpsname(const char* value, size_t size) {
  _set_bit(6);
  if (corpsname_ == &_default_corpsname_) {
    corpsname_ = new ::std::string;
  }
  corpsname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageReplyFamilyInviteResponse::mutable_corpsname() {
  _set_bit(6);
  if (corpsname_ == &_default_corpsname_) {
    corpsname_ = new ::std::string;
  }
  return corpsname_;
}

// optional uint32 FamilyHeaderID = 8;
inline bool CMessageReplyFamilyInviteResponse::has_familyheaderid() const {
  return _has_bit(7);
}
inline void CMessageReplyFamilyInviteResponse::clear_familyheaderid() {
  familyheaderid_ = 0u;
  _clear_bit(7);
}
inline ::google::protobuf::uint32 CMessageReplyFamilyInviteResponse::familyheaderid() const {
  return familyheaderid_;
}
inline void CMessageReplyFamilyInviteResponse::set_familyheaderid(::google::protobuf::uint32 value) {
  _set_bit(7);
  familyheaderid_ = value;
}

// optional uint32 CorpsHeaderID = 9;
inline bool CMessageReplyFamilyInviteResponse::has_corpsheaderid() const {
  return _has_bit(8);
}
inline void CMessageReplyFamilyInviteResponse::clear_corpsheaderid() {
  corpsheaderid_ = 0u;
  _clear_bit(8);
}
inline ::google::protobuf::uint32 CMessageReplyFamilyInviteResponse::corpsheaderid() const {
  return corpsheaderid_;
}
inline void CMessageReplyFamilyInviteResponse::set_corpsheaderid(::google::protobuf::uint32 value) {
  _set_bit(8);
  corpsheaderid_ = value;
}

// optional uint32 UnionID = 10;
inline bool CMessageReplyFamilyInviteResponse::has_unionid() const {
  return _has_bit(9);
}
inline void CMessageReplyFamilyInviteResponse::clear_unionid() {
  unionid_ = 0u;
  _clear_bit(9);
}
inline ::google::protobuf::uint32 CMessageReplyFamilyInviteResponse::unionid() const {
  return unionid_;
}
inline void CMessageReplyFamilyInviteResponse::set_unionid(::google::protobuf::uint32 value) {
  _set_bit(9);
  unionid_ = value;
}

// optional string UnionName = 11;
inline bool CMessageReplyFamilyInviteResponse::has_unionname() const {
  return _has_bit(10);
}
inline void CMessageReplyFamilyInviteResponse::clear_unionname() {
  if (unionname_ != &_default_unionname_) {
    unionname_->clear();
  }
  _clear_bit(10);
}
inline const ::std::string& CMessageReplyFamilyInviteResponse::unionname() const {
  return *unionname_;
}
inline void CMessageReplyFamilyInviteResponse::set_unionname(const ::std::string& value) {
  _set_bit(10);
  if (unionname_ == &_default_unionname_) {
    unionname_ = new ::std::string;
  }
  unionname_->assign(value);
}
inline void CMessageReplyFamilyInviteResponse::set_unionname(const char* value) {
  _set_bit(10);
  if (unionname_ == &_default_unionname_) {
    unionname_ = new ::std::string;
  }
  unionname_->assign(value);
}
inline void CMessageReplyFamilyInviteResponse::set_unionname(const char* value, size_t size) {
  _set_bit(10);
  if (unionname_ == &_default_unionname_) {
    unionname_ = new ::std::string;
  }
  unionname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageReplyFamilyInviteResponse::mutable_unionname() {
  _set_bit(10);
  if (unionname_ == &_default_unionname_) {
    unionname_ = new ::std::string;
  }
  return unionname_;
}

// -------------------------------------------------------------------

// CMessageApplyFamilyRequest

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageApplyFamilyRequest::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageApplyFamilyRequest::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageApplyFamilyRequest::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageApplyFamilyRequest::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 CharID = 2;
inline bool CMessageApplyFamilyRequest::has_charid() const {
  return _has_bit(1);
}
inline void CMessageApplyFamilyRequest::clear_charid() {
  charid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageApplyFamilyRequest::charid() const {
  return charid_;
}
inline void CMessageApplyFamilyRequest::set_charid(::google::protobuf::uint32 value) {
  _set_bit(1);
  charid_ = value;
}

// optional uint32 FamilyID = 3;
inline bool CMessageApplyFamilyRequest::has_familyid() const {
  return _has_bit(2);
}
inline void CMessageApplyFamilyRequest::clear_familyid() {
  familyid_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageApplyFamilyRequest::familyid() const {
  return familyid_;
}
inline void CMessageApplyFamilyRequest::set_familyid(::google::protobuf::uint32 value) {
  _set_bit(2);
  familyid_ = value;
}

// optional string FamilyName = 4;
inline bool CMessageApplyFamilyRequest::has_familyname() const {
  return _has_bit(3);
}
inline void CMessageApplyFamilyRequest::clear_familyname() {
  if (familyname_ != &_default_familyname_) {
    familyname_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& CMessageApplyFamilyRequest::familyname() const {
  return *familyname_;
}
inline void CMessageApplyFamilyRequest::set_familyname(const ::std::string& value) {
  _set_bit(3);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  familyname_->assign(value);
}
inline void CMessageApplyFamilyRequest::set_familyname(const char* value) {
  _set_bit(3);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  familyname_->assign(value);
}
inline void CMessageApplyFamilyRequest::set_familyname(const char* value, size_t size) {
  _set_bit(3);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  familyname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageApplyFamilyRequest::mutable_familyname() {
  _set_bit(3);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  return familyname_;
}

// -------------------------------------------------------------------

// CMessageApplyFamilyResponse

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageApplyFamilyResponse::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageApplyFamilyResponse::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageApplyFamilyResponse::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageApplyFamilyResponse::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 Errcode = 2;
inline bool CMessageApplyFamilyResponse::has_errcode() const {
  return _has_bit(1);
}
inline void CMessageApplyFamilyResponse::clear_errcode() {
  errcode_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageApplyFamilyResponse::errcode() const {
  return errcode_;
}
inline void CMessageApplyFamilyResponse::set_errcode(::google::protobuf::uint32 value) {
  _set_bit(1);
  errcode_ = value;
}

// optional string FamilyName = 3;
inline bool CMessageApplyFamilyResponse::has_familyname() const {
  return _has_bit(2);
}
inline void CMessageApplyFamilyResponse::clear_familyname() {
  if (familyname_ != &_default_familyname_) {
    familyname_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& CMessageApplyFamilyResponse::familyname() const {
  return *familyname_;
}
inline void CMessageApplyFamilyResponse::set_familyname(const ::std::string& value) {
  _set_bit(2);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  familyname_->assign(value);
}
inline void CMessageApplyFamilyResponse::set_familyname(const char* value) {
  _set_bit(2);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  familyname_->assign(value);
}
inline void CMessageApplyFamilyResponse::set_familyname(const char* value, size_t size) {
  _set_bit(2);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  familyname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageApplyFamilyResponse::mutable_familyname() {
  _set_bit(2);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  return familyname_;
}

// optional uint32 FamilyID = 4;
inline bool CMessageApplyFamilyResponse::has_familyid() const {
  return _has_bit(3);
}
inline void CMessageApplyFamilyResponse::clear_familyid() {
  familyid_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessageApplyFamilyResponse::familyid() const {
  return familyid_;
}
inline void CMessageApplyFamilyResponse::set_familyid(::google::protobuf::uint32 value) {
  _set_bit(3);
  familyid_ = value;
}

// -------------------------------------------------------------------

// CMessageMemberApplyNotify

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageMemberApplyNotify::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageMemberApplyNotify::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageMemberApplyNotify::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageMemberApplyNotify::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional string PlayerName = 2;
inline bool CMessageMemberApplyNotify::has_playername() const {
  return _has_bit(1);
}
inline void CMessageMemberApplyNotify::clear_playername() {
  if (playername_ != &_default_playername_) {
    playername_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CMessageMemberApplyNotify::playername() const {
  return *playername_;
}
inline void CMessageMemberApplyNotify::set_playername(const ::std::string& value) {
  _set_bit(1);
  if (playername_ == &_default_playername_) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void CMessageMemberApplyNotify::set_playername(const char* value) {
  _set_bit(1);
  if (playername_ == &_default_playername_) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void CMessageMemberApplyNotify::set_playername(const char* value, size_t size) {
  _set_bit(1);
  if (playername_ == &_default_playername_) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageMemberApplyNotify::mutable_playername() {
  _set_bit(1);
  if (playername_ == &_default_playername_) {
    playername_ = new ::std::string;
  }
  return playername_;
}

// optional uint32 RoleID = 3;
inline bool CMessageMemberApplyNotify::has_roleid() const {
  return _has_bit(2);
}
inline void CMessageMemberApplyNotify::clear_roleid() {
  roleid_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageMemberApplyNotify::roleid() const {
  return roleid_;
}
inline void CMessageMemberApplyNotify::set_roleid(::google::protobuf::uint32 value) {
  _set_bit(2);
  roleid_ = value;
}

// optional uint32 RoleLevel = 4;
inline bool CMessageMemberApplyNotify::has_rolelevel() const {
  return _has_bit(3);
}
inline void CMessageMemberApplyNotify::clear_rolelevel() {
  rolelevel_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessageMemberApplyNotify::rolelevel() const {
  return rolelevel_;
}
inline void CMessageMemberApplyNotify::set_rolelevel(::google::protobuf::uint32 value) {
  _set_bit(3);
  rolelevel_ = value;
}

// optional uint32 RoleMetier = 5;
inline bool CMessageMemberApplyNotify::has_rolemetier() const {
  return _has_bit(4);
}
inline void CMessageMemberApplyNotify::clear_rolemetier() {
  rolemetier_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 CMessageMemberApplyNotify::rolemetier() const {
  return rolemetier_;
}
inline void CMessageMemberApplyNotify::set_rolemetier(::google::protobuf::uint32 value) {
  _set_bit(4);
  rolemetier_ = value;
}

// optional uint32 FaceType = 6;
inline bool CMessageMemberApplyNotify::has_facetype() const {
  return _has_bit(5);
}
inline void CMessageMemberApplyNotify::clear_facetype() {
  facetype_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 CMessageMemberApplyNotify::facetype() const {
  return facetype_;
}
inline void CMessageMemberApplyNotify::set_facetype(::google::protobuf::uint32 value) {
  _set_bit(5);
  facetype_ = value;
}

// optional uint32 RoleSex = 7;
inline bool CMessageMemberApplyNotify::has_rolesex() const {
  return _has_bit(6);
}
inline void CMessageMemberApplyNotify::clear_rolesex() {
  rolesex_ = 0u;
  _clear_bit(6);
}
inline ::google::protobuf::uint32 CMessageMemberApplyNotify::rolesex() const {
  return rolesex_;
}
inline void CMessageMemberApplyNotify::set_rolesex(::google::protobuf::uint32 value) {
  _set_bit(6);
  rolesex_ = value;
}

// optional uint32 LineID = 8;
inline bool CMessageMemberApplyNotify::has_lineid() const {
  return _has_bit(7);
}
inline void CMessageMemberApplyNotify::clear_lineid() {
  lineid_ = 0u;
  _clear_bit(7);
}
inline ::google::protobuf::uint32 CMessageMemberApplyNotify::lineid() const {
  return lineid_;
}
inline void CMessageMemberApplyNotify::set_lineid(::google::protobuf::uint32 value) {
  _set_bit(7);
  lineid_ = value;
}

// optional uint32 MapID = 9;
inline bool CMessageMemberApplyNotify::has_mapid() const {
  return _has_bit(8);
}
inline void CMessageMemberApplyNotify::clear_mapid() {
  mapid_ = 0u;
  _clear_bit(8);
}
inline ::google::protobuf::uint32 CMessageMemberApplyNotify::mapid() const {
  return mapid_;
}
inline void CMessageMemberApplyNotify::set_mapid(::google::protobuf::uint32 value) {
  _set_bit(8);
  mapid_ = value;
}

// -------------------------------------------------------------------

// CMessageReplyMemberApplyRequest

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageReplyMemberApplyRequest::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageReplyMemberApplyRequest::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageReplyMemberApplyRequest::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageReplyMemberApplyRequest::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 Result = 2;
inline bool CMessageReplyMemberApplyRequest::has_result() const {
  return _has_bit(1);
}
inline void CMessageReplyMemberApplyRequest::clear_result() {
  result_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageReplyMemberApplyRequest::result() const {
  return result_;
}
inline void CMessageReplyMemberApplyRequest::set_result(::google::protobuf::uint32 value) {
  _set_bit(1);
  result_ = value;
}

// optional uint32 RoleID = 3;
inline bool CMessageReplyMemberApplyRequest::has_roleid() const {
  return _has_bit(2);
}
inline void CMessageReplyMemberApplyRequest::clear_roleid() {
  roleid_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageReplyMemberApplyRequest::roleid() const {
  return roleid_;
}
inline void CMessageReplyMemberApplyRequest::set_roleid(::google::protobuf::uint32 value) {
  _set_bit(2);
  roleid_ = value;
}

// -------------------------------------------------------------------

// CMessageReplyMemberApplyResponse

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageReplyMemberApplyResponse::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageReplyMemberApplyResponse::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageReplyMemberApplyResponse::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageReplyMemberApplyResponse::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 Errcode = 2;
inline bool CMessageReplyMemberApplyResponse::has_errcode() const {
  return _has_bit(1);
}
inline void CMessageReplyMemberApplyResponse::clear_errcode() {
  errcode_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageReplyMemberApplyResponse::errcode() const {
  return errcode_;
}
inline void CMessageReplyMemberApplyResponse::set_errcode(::google::protobuf::uint32 value) {
  _set_bit(1);
  errcode_ = value;
}

// optional string PlayerName = 3;
inline bool CMessageReplyMemberApplyResponse::has_playername() const {
  return _has_bit(2);
}
inline void CMessageReplyMemberApplyResponse::clear_playername() {
  if (playername_ != &_default_playername_) {
    playername_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& CMessageReplyMemberApplyResponse::playername() const {
  return *playername_;
}
inline void CMessageReplyMemberApplyResponse::set_playername(const ::std::string& value) {
  _set_bit(2);
  if (playername_ == &_default_playername_) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void CMessageReplyMemberApplyResponse::set_playername(const char* value) {
  _set_bit(2);
  if (playername_ == &_default_playername_) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void CMessageReplyMemberApplyResponse::set_playername(const char* value, size_t size) {
  _set_bit(2);
  if (playername_ == &_default_playername_) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageReplyMemberApplyResponse::mutable_playername() {
  _set_bit(2);
  if (playername_ == &_default_playername_) {
    playername_ = new ::std::string;
  }
  return playername_;
}

// optional uint32 CharID = 4;
inline bool CMessageReplyMemberApplyResponse::has_charid() const {
  return _has_bit(3);
}
inline void CMessageReplyMemberApplyResponse::clear_charid() {
  charid_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessageReplyMemberApplyResponse::charid() const {
  return charid_;
}
inline void CMessageReplyMemberApplyResponse::set_charid(::google::protobuf::uint32 value) {
  _set_bit(3);
  charid_ = value;
}

// optional uint32 Result = 5;
inline bool CMessageReplyMemberApplyResponse::has_result() const {
  return _has_bit(4);
}
inline void CMessageReplyMemberApplyResponse::clear_result() {
  result_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 CMessageReplyMemberApplyResponse::result() const {
  return result_;
}
inline void CMessageReplyMemberApplyResponse::set_result(::google::protobuf::uint32 value) {
  _set_bit(4);
  result_ = value;
}

// -------------------------------------------------------------------

// CMessageApplyFamilySuccessNotify

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageApplyFamilySuccessNotify::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageApplyFamilySuccessNotify::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageApplyFamilySuccessNotify::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageApplyFamilySuccessNotify::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 Result = 2;
inline bool CMessageApplyFamilySuccessNotify::has_result() const {
  return _has_bit(1);
}
inline void CMessageApplyFamilySuccessNotify::clear_result() {
  result_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageApplyFamilySuccessNotify::result() const {
  return result_;
}
inline void CMessageApplyFamilySuccessNotify::set_result(::google::protobuf::uint32 value) {
  _set_bit(1);
  result_ = value;
}

// optional uint32 FamilyID = 3;
inline bool CMessageApplyFamilySuccessNotify::has_familyid() const {
  return _has_bit(2);
}
inline void CMessageApplyFamilySuccessNotify::clear_familyid() {
  familyid_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageApplyFamilySuccessNotify::familyid() const {
  return familyid_;
}
inline void CMessageApplyFamilySuccessNotify::set_familyid(::google::protobuf::uint32 value) {
  _set_bit(2);
  familyid_ = value;
}

// optional string FamilyName = 4;
inline bool CMessageApplyFamilySuccessNotify::has_familyname() const {
  return _has_bit(3);
}
inline void CMessageApplyFamilySuccessNotify::clear_familyname() {
  if (familyname_ != &_default_familyname_) {
    familyname_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& CMessageApplyFamilySuccessNotify::familyname() const {
  return *familyname_;
}
inline void CMessageApplyFamilySuccessNotify::set_familyname(const ::std::string& value) {
  _set_bit(3);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  familyname_->assign(value);
}
inline void CMessageApplyFamilySuccessNotify::set_familyname(const char* value) {
  _set_bit(3);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  familyname_->assign(value);
}
inline void CMessageApplyFamilySuccessNotify::set_familyname(const char* value, size_t size) {
  _set_bit(3);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  familyname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageApplyFamilySuccessNotify::mutable_familyname() {
  _set_bit(3);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  return familyname_;
}

// optional uint32 CorpsID = 5;
inline bool CMessageApplyFamilySuccessNotify::has_corpsid() const {
  return _has_bit(4);
}
inline void CMessageApplyFamilySuccessNotify::clear_corpsid() {
  corpsid_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 CMessageApplyFamilySuccessNotify::corpsid() const {
  return corpsid_;
}
inline void CMessageApplyFamilySuccessNotify::set_corpsid(::google::protobuf::uint32 value) {
  _set_bit(4);
  corpsid_ = value;
}

// optional string CorpsName = 6;
inline bool CMessageApplyFamilySuccessNotify::has_corpsname() const {
  return _has_bit(5);
}
inline void CMessageApplyFamilySuccessNotify::clear_corpsname() {
  if (corpsname_ != &_default_corpsname_) {
    corpsname_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& CMessageApplyFamilySuccessNotify::corpsname() const {
  return *corpsname_;
}
inline void CMessageApplyFamilySuccessNotify::set_corpsname(const ::std::string& value) {
  _set_bit(5);
  if (corpsname_ == &_default_corpsname_) {
    corpsname_ = new ::std::string;
  }
  corpsname_->assign(value);
}
inline void CMessageApplyFamilySuccessNotify::set_corpsname(const char* value) {
  _set_bit(5);
  if (corpsname_ == &_default_corpsname_) {
    corpsname_ = new ::std::string;
  }
  corpsname_->assign(value);
}
inline void CMessageApplyFamilySuccessNotify::set_corpsname(const char* value, size_t size) {
  _set_bit(5);
  if (corpsname_ == &_default_corpsname_) {
    corpsname_ = new ::std::string;
  }
  corpsname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageApplyFamilySuccessNotify::mutable_corpsname() {
  _set_bit(5);
  if (corpsname_ == &_default_corpsname_) {
    corpsname_ = new ::std::string;
  }
  return corpsname_;
}

// optional uint32 FamilyHeader = 7;
inline bool CMessageApplyFamilySuccessNotify::has_familyheader() const {
  return _has_bit(6);
}
inline void CMessageApplyFamilySuccessNotify::clear_familyheader() {
  familyheader_ = 0u;
  _clear_bit(6);
}
inline ::google::protobuf::uint32 CMessageApplyFamilySuccessNotify::familyheader() const {
  return familyheader_;
}
inline void CMessageApplyFamilySuccessNotify::set_familyheader(::google::protobuf::uint32 value) {
  _set_bit(6);
  familyheader_ = value;
}

// optional uint32 CorpsHeader = 8;
inline bool CMessageApplyFamilySuccessNotify::has_corpsheader() const {
  return _has_bit(7);
}
inline void CMessageApplyFamilySuccessNotify::clear_corpsheader() {
  corpsheader_ = 0u;
  _clear_bit(7);
}
inline ::google::protobuf::uint32 CMessageApplyFamilySuccessNotify::corpsheader() const {
  return corpsheader_;
}
inline void CMessageApplyFamilySuccessNotify::set_corpsheader(::google::protobuf::uint32 value) {
  _set_bit(7);
  corpsheader_ = value;
}

// optional uint32 UnionID = 9;
inline bool CMessageApplyFamilySuccessNotify::has_unionid() const {
  return _has_bit(8);
}
inline void CMessageApplyFamilySuccessNotify::clear_unionid() {
  unionid_ = 0u;
  _clear_bit(8);
}
inline ::google::protobuf::uint32 CMessageApplyFamilySuccessNotify::unionid() const {
  return unionid_;
}
inline void CMessageApplyFamilySuccessNotify::set_unionid(::google::protobuf::uint32 value) {
  _set_bit(8);
  unionid_ = value;
}

// optional string UnionName = 10;
inline bool CMessageApplyFamilySuccessNotify::has_unionname() const {
  return _has_bit(9);
}
inline void CMessageApplyFamilySuccessNotify::clear_unionname() {
  if (unionname_ != &_default_unionname_) {
    unionname_->clear();
  }
  _clear_bit(9);
}
inline const ::std::string& CMessageApplyFamilySuccessNotify::unionname() const {
  return *unionname_;
}
inline void CMessageApplyFamilySuccessNotify::set_unionname(const ::std::string& value) {
  _set_bit(9);
  if (unionname_ == &_default_unionname_) {
    unionname_ = new ::std::string;
  }
  unionname_->assign(value);
}
inline void CMessageApplyFamilySuccessNotify::set_unionname(const char* value) {
  _set_bit(9);
  if (unionname_ == &_default_unionname_) {
    unionname_ = new ::std::string;
  }
  unionname_->assign(value);
}
inline void CMessageApplyFamilySuccessNotify::set_unionname(const char* value, size_t size) {
  _set_bit(9);
  if (unionname_ == &_default_unionname_) {
    unionname_ = new ::std::string;
  }
  unionname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageApplyFamilySuccessNotify::mutable_unionname() {
  _set_bit(9);
  if (unionname_ == &_default_unionname_) {
    unionname_ = new ::std::string;
  }
  return unionname_;
}

// -------------------------------------------------------------------

// CMessageFamilyMemberAddedNotify

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageFamilyMemberAddedNotify::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageFamilyMemberAddedNotify::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageFamilyMemberAddedNotify::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageFamilyMemberAddedNotify::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional string ManagerName = 2;
inline bool CMessageFamilyMemberAddedNotify::has_managername() const {
  return _has_bit(1);
}
inline void CMessageFamilyMemberAddedNotify::clear_managername() {
  if (managername_ != &_default_managername_) {
    managername_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CMessageFamilyMemberAddedNotify::managername() const {
  return *managername_;
}
inline void CMessageFamilyMemberAddedNotify::set_managername(const ::std::string& value) {
  _set_bit(1);
  if (managername_ == &_default_managername_) {
    managername_ = new ::std::string;
  }
  managername_->assign(value);
}
inline void CMessageFamilyMemberAddedNotify::set_managername(const char* value) {
  _set_bit(1);
  if (managername_ == &_default_managername_) {
    managername_ = new ::std::string;
  }
  managername_->assign(value);
}
inline void CMessageFamilyMemberAddedNotify::set_managername(const char* value, size_t size) {
  _set_bit(1);
  if (managername_ == &_default_managername_) {
    managername_ = new ::std::string;
  }
  managername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageFamilyMemberAddedNotify::mutable_managername() {
  _set_bit(1);
  if (managername_ == &_default_managername_) {
    managername_ = new ::std::string;
  }
  return managername_;
}

// optional .FamilyMemberInfo RoleInfo = 3;
inline bool CMessageFamilyMemberAddedNotify::has_roleinfo() const {
  return _has_bit(2);
}
inline void CMessageFamilyMemberAddedNotify::clear_roleinfo() {
  if (roleinfo_ != NULL) roleinfo_->::FamilyMemberInfo::Clear();
  _clear_bit(2);
}
inline const ::FamilyMemberInfo& CMessageFamilyMemberAddedNotify::roleinfo() const {
  return roleinfo_ != NULL ? *roleinfo_ : *default_instance_->roleinfo_;
}
inline ::FamilyMemberInfo* CMessageFamilyMemberAddedNotify::mutable_roleinfo() {
  _set_bit(2);
  if (roleinfo_ == NULL) roleinfo_ = new ::FamilyMemberInfo;
  return roleinfo_;
}

// -------------------------------------------------------------------

// CMessagePostAppointRequest

// optional .FamilyHead HeadMsg = 1;
inline bool CMessagePostAppointRequest::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessagePostAppointRequest::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessagePostAppointRequest::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessagePostAppointRequest::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 PlayerCharID = 2;
inline bool CMessagePostAppointRequest::has_playercharid() const {
  return _has_bit(1);
}
inline void CMessagePostAppointRequest::clear_playercharid() {
  playercharid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessagePostAppointRequest::playercharid() const {
  return playercharid_;
}
inline void CMessagePostAppointRequest::set_playercharid(::google::protobuf::uint32 value) {
  _set_bit(1);
  playercharid_ = value;
}

// optional uint32 ActionKind = 3;
inline bool CMessagePostAppointRequest::has_actionkind() const {
  return _has_bit(2);
}
inline void CMessagePostAppointRequest::clear_actionkind() {
  actionkind_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessagePostAppointRequest::actionkind() const {
  return actionkind_;
}
inline void CMessagePostAppointRequest::set_actionkind(::google::protobuf::uint32 value) {
  _set_bit(2);
  actionkind_ = value;
}

// -------------------------------------------------------------------

// CMessagePostAppointResponse

// optional .FamilyHead HeadMsg = 1;
inline bool CMessagePostAppointResponse::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessagePostAppointResponse::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessagePostAppointResponse::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessagePostAppointResponse::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 Errcode = 2;
inline bool CMessagePostAppointResponse::has_errcode() const {
  return _has_bit(1);
}
inline void CMessagePostAppointResponse::clear_errcode() {
  errcode_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessagePostAppointResponse::errcode() const {
  return errcode_;
}
inline void CMessagePostAppointResponse::set_errcode(::google::protobuf::uint32 value) {
  _set_bit(1);
  errcode_ = value;
}

// optional uint32 PlayerCharID = 3;
inline bool CMessagePostAppointResponse::has_playercharid() const {
  return _has_bit(2);
}
inline void CMessagePostAppointResponse::clear_playercharid() {
  playercharid_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessagePostAppointResponse::playercharid() const {
  return playercharid_;
}
inline void CMessagePostAppointResponse::set_playercharid(::google::protobuf::uint32 value) {
  _set_bit(2);
  playercharid_ = value;
}

// optional uint32 ActionKind = 4;
inline bool CMessagePostAppointResponse::has_actionkind() const {
  return _has_bit(3);
}
inline void CMessagePostAppointResponse::clear_actionkind() {
  actionkind_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessagePostAppointResponse::actionkind() const {
  return actionkind_;
}
inline void CMessagePostAppointResponse::set_actionkind(::google::protobuf::uint32 value) {
  _set_bit(3);
  actionkind_ = value;
}

// -------------------------------------------------------------------

// CMessagePostAppointNoify

// optional .FamilyHead HeadMsg = 1;
inline bool CMessagePostAppointNoify::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessagePostAppointNoify::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessagePostAppointNoify::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessagePostAppointNoify::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 PlayerCharID = 2;
inline bool CMessagePostAppointNoify::has_playercharid() const {
  return _has_bit(1);
}
inline void CMessagePostAppointNoify::clear_playercharid() {
  playercharid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessagePostAppointNoify::playercharid() const {
  return playercharid_;
}
inline void CMessagePostAppointNoify::set_playercharid(::google::protobuf::uint32 value) {
  _set_bit(1);
  playercharid_ = value;
}

// optional uint32 ActionKind = 3;
inline bool CMessagePostAppointNoify::has_actionkind() const {
  return _has_bit(2);
}
inline void CMessagePostAppointNoify::clear_actionkind() {
  actionkind_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessagePostAppointNoify::actionkind() const {
  return actionkind_;
}
inline void CMessagePostAppointNoify::set_actionkind(::google::protobuf::uint32 value) {
  _set_bit(2);
  actionkind_ = value;
}

// optional string ManagerName = 4;
inline bool CMessagePostAppointNoify::has_managername() const {
  return _has_bit(3);
}
inline void CMessagePostAppointNoify::clear_managername() {
  if (managername_ != &_default_managername_) {
    managername_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& CMessagePostAppointNoify::managername() const {
  return *managername_;
}
inline void CMessagePostAppointNoify::set_managername(const ::std::string& value) {
  _set_bit(3);
  if (managername_ == &_default_managername_) {
    managername_ = new ::std::string;
  }
  managername_->assign(value);
}
inline void CMessagePostAppointNoify::set_managername(const char* value) {
  _set_bit(3);
  if (managername_ == &_default_managername_) {
    managername_ = new ::std::string;
  }
  managername_->assign(value);
}
inline void CMessagePostAppointNoify::set_managername(const char* value, size_t size) {
  _set_bit(3);
  if (managername_ == &_default_managername_) {
    managername_ = new ::std::string;
  }
  managername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessagePostAppointNoify::mutable_managername() {
  _set_bit(3);
  if (managername_ == &_default_managername_) {
    managername_ = new ::std::string;
  }
  return managername_;
}

// optional string PlayerName = 5;
inline bool CMessagePostAppointNoify::has_playername() const {
  return _has_bit(4);
}
inline void CMessagePostAppointNoify::clear_playername() {
  if (playername_ != &_default_playername_) {
    playername_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& CMessagePostAppointNoify::playername() const {
  return *playername_;
}
inline void CMessagePostAppointNoify::set_playername(const ::std::string& value) {
  _set_bit(4);
  if (playername_ == &_default_playername_) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void CMessagePostAppointNoify::set_playername(const char* value) {
  _set_bit(4);
  if (playername_ == &_default_playername_) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void CMessagePostAppointNoify::set_playername(const char* value, size_t size) {
  _set_bit(4);
  if (playername_ == &_default_playername_) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessagePostAppointNoify::mutable_playername() {
  _set_bit(4);
  if (playername_ == &_default_playername_) {
    playername_ = new ::std::string;
  }
  return playername_;
}

// -------------------------------------------------------------------

// CMessageLeaveFamilyRequest

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageLeaveFamilyRequest::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageLeaveFamilyRequest::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageLeaveFamilyRequest::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageLeaveFamilyRequest::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 MsgCode = 2;
inline bool CMessageLeaveFamilyRequest::has_msgcode() const {
  return _has_bit(1);
}
inline void CMessageLeaveFamilyRequest::clear_msgcode() {
  msgcode_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageLeaveFamilyRequest::msgcode() const {
  return msgcode_;
}
inline void CMessageLeaveFamilyRequest::set_msgcode(::google::protobuf::uint32 value) {
  _set_bit(1);
  msgcode_ = value;
}

// -------------------------------------------------------------------

// CMessageLeaveFamilyResponse

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageLeaveFamilyResponse::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageLeaveFamilyResponse::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageLeaveFamilyResponse::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageLeaveFamilyResponse::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 Errcode = 2;
inline bool CMessageLeaveFamilyResponse::has_errcode() const {
  return _has_bit(1);
}
inline void CMessageLeaveFamilyResponse::clear_errcode() {
  errcode_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageLeaveFamilyResponse::errcode() const {
  return errcode_;
}
inline void CMessageLeaveFamilyResponse::set_errcode(::google::protobuf::uint32 value) {
  _set_bit(1);
  errcode_ = value;
}

// -------------------------------------------------------------------

// CMessageMemberLeaveFamilyNotify

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageMemberLeaveFamilyNotify::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageMemberLeaveFamilyNotify::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageMemberLeaveFamilyNotify::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageMemberLeaveFamilyNotify::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 RoleID = 2;
inline bool CMessageMemberLeaveFamilyNotify::has_roleid() const {
  return _has_bit(1);
}
inline void CMessageMemberLeaveFamilyNotify::clear_roleid() {
  roleid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageMemberLeaveFamilyNotify::roleid() const {
  return roleid_;
}
inline void CMessageMemberLeaveFamilyNotify::set_roleid(::google::protobuf::uint32 value) {
  _set_bit(1);
  roleid_ = value;
}

// optional string RoleName = 3;
inline bool CMessageMemberLeaveFamilyNotify::has_rolename() const {
  return _has_bit(2);
}
inline void CMessageMemberLeaveFamilyNotify::clear_rolename() {
  if (rolename_ != &_default_rolename_) {
    rolename_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& CMessageMemberLeaveFamilyNotify::rolename() const {
  return *rolename_;
}
inline void CMessageMemberLeaveFamilyNotify::set_rolename(const ::std::string& value) {
  _set_bit(2);
  if (rolename_ == &_default_rolename_) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void CMessageMemberLeaveFamilyNotify::set_rolename(const char* value) {
  _set_bit(2);
  if (rolename_ == &_default_rolename_) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void CMessageMemberLeaveFamilyNotify::set_rolename(const char* value, size_t size) {
  _set_bit(2);
  if (rolename_ == &_default_rolename_) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageMemberLeaveFamilyNotify::mutable_rolename() {
  _set_bit(2);
  if (rolename_ == &_default_rolename_) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}

// optional uint32 PlayerLevel = 4;
inline bool CMessageMemberLeaveFamilyNotify::has_playerlevel() const {
  return _has_bit(3);
}
inline void CMessageMemberLeaveFamilyNotify::clear_playerlevel() {
  playerlevel_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessageMemberLeaveFamilyNotify::playerlevel() const {
  return playerlevel_;
}
inline void CMessageMemberLeaveFamilyNotify::set_playerlevel(::google::protobuf::uint32 value) {
  _set_bit(3);
  playerlevel_ = value;
}

// optional uint32 PlayerPost = 5;
inline bool CMessageMemberLeaveFamilyNotify::has_playerpost() const {
  return _has_bit(4);
}
inline void CMessageMemberLeaveFamilyNotify::clear_playerpost() {
  playerpost_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 CMessageMemberLeaveFamilyNotify::playerpost() const {
  return playerpost_;
}
inline void CMessageMemberLeaveFamilyNotify::set_playerpost(::google::protobuf::uint32 value) {
  _set_bit(4);
  playerpost_ = value;
}

// -------------------------------------------------------------------

// CMessageGetFamilyMemberInfoRequest

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageGetFamilyMemberInfoRequest::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageGetFamilyMemberInfoRequest::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageGetFamilyMemberInfoRequest::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageGetFamilyMemberInfoRequest::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// -------------------------------------------------------------------

// CMessageGetFamilyMemberInfoResponse

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageGetFamilyMemberInfoResponse::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageGetFamilyMemberInfoResponse::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageGetFamilyMemberInfoResponse::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageGetFamilyMemberInfoResponse::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional .PBFamilyMemberList MemberInfo = 2;
inline bool CMessageGetFamilyMemberInfoResponse::has_memberinfo() const {
  return _has_bit(1);
}
inline void CMessageGetFamilyMemberInfoResponse::clear_memberinfo() {
  if (memberinfo_ != NULL) memberinfo_->::PBFamilyMemberList::Clear();
  _clear_bit(1);
}
inline const ::PBFamilyMemberList& CMessageGetFamilyMemberInfoResponse::memberinfo() const {
  return memberinfo_ != NULL ? *memberinfo_ : *default_instance_->memberinfo_;
}
inline ::PBFamilyMemberList* CMessageGetFamilyMemberInfoResponse::mutable_memberinfo() {
  _set_bit(1);
  if (memberinfo_ == NULL) memberinfo_ = new ::PBFamilyMemberList;
  return memberinfo_;
}

// -------------------------------------------------------------------

// CMessageGetFamilyPropertyRequest

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageGetFamilyPropertyRequest::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageGetFamilyPropertyRequest::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageGetFamilyPropertyRequest::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageGetFamilyPropertyRequest::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// -------------------------------------------------------------------

// CMessageGetFamilyPropertyResponse

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageGetFamilyPropertyResponse::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageGetFamilyPropertyResponse::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageGetFamilyPropertyResponse::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageGetFamilyPropertyResponse::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional string FamilyNotice = 2;
inline bool CMessageGetFamilyPropertyResponse::has_familynotice() const {
  return _has_bit(1);
}
inline void CMessageGetFamilyPropertyResponse::clear_familynotice() {
  if (familynotice_ != &_default_familynotice_) {
    familynotice_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CMessageGetFamilyPropertyResponse::familynotice() const {
  return *familynotice_;
}
inline void CMessageGetFamilyPropertyResponse::set_familynotice(const ::std::string& value) {
  _set_bit(1);
  if (familynotice_ == &_default_familynotice_) {
    familynotice_ = new ::std::string;
  }
  familynotice_->assign(value);
}
inline void CMessageGetFamilyPropertyResponse::set_familynotice(const char* value) {
  _set_bit(1);
  if (familynotice_ == &_default_familynotice_) {
    familynotice_ = new ::std::string;
  }
  familynotice_->assign(value);
}
inline void CMessageGetFamilyPropertyResponse::set_familynotice(const char* value, size_t size) {
  _set_bit(1);
  if (familynotice_ == &_default_familynotice_) {
    familynotice_ = new ::std::string;
  }
  familynotice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageGetFamilyPropertyResponse::mutable_familynotice() {
  _set_bit(1);
  if (familynotice_ == &_default_familynotice_) {
    familynotice_ = new ::std::string;
  }
  return familynotice_;
}

// optional uint32 FamilyNum = 3;
inline bool CMessageGetFamilyPropertyResponse::has_familynum() const {
  return _has_bit(2);
}
inline void CMessageGetFamilyPropertyResponse::clear_familynum() {
  familynum_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageGetFamilyPropertyResponse::familynum() const {
  return familynum_;
}
inline void CMessageGetFamilyPropertyResponse::set_familynum(::google::protobuf::uint32 value) {
  _set_bit(2);
  familynum_ = value;
}

// optional uint32 FamilyLevel = 4;
inline bool CMessageGetFamilyPropertyResponse::has_familylevel() const {
  return _has_bit(3);
}
inline void CMessageGetFamilyPropertyResponse::clear_familylevel() {
  familylevel_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessageGetFamilyPropertyResponse::familylevel() const {
  return familylevel_;
}
inline void CMessageGetFamilyPropertyResponse::set_familylevel(::google::protobuf::uint32 value) {
  _set_bit(3);
  familylevel_ = value;
}

// optional uint32 FamilyMoney = 5;
inline bool CMessageGetFamilyPropertyResponse::has_familymoney() const {
  return _has_bit(4);
}
inline void CMessageGetFamilyPropertyResponse::clear_familymoney() {
  familymoney_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 CMessageGetFamilyPropertyResponse::familymoney() const {
  return familymoney_;
}
inline void CMessageGetFamilyPropertyResponse::set_familymoney(::google::protobuf::uint32 value) {
  _set_bit(4);
  familymoney_ = value;
}

// optional uint32 FamilyHeaderID = 6;
inline bool CMessageGetFamilyPropertyResponse::has_familyheaderid() const {
  return _has_bit(5);
}
inline void CMessageGetFamilyPropertyResponse::clear_familyheaderid() {
  familyheaderid_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 CMessageGetFamilyPropertyResponse::familyheaderid() const {
  return familyheaderid_;
}
inline void CMessageGetFamilyPropertyResponse::set_familyheaderid(::google::protobuf::uint32 value) {
  _set_bit(5);
  familyheaderid_ = value;
}

// optional string FamilyHeaderName = 7;
inline bool CMessageGetFamilyPropertyResponse::has_familyheadername() const {
  return _has_bit(6);
}
inline void CMessageGetFamilyPropertyResponse::clear_familyheadername() {
  if (familyheadername_ != &_default_familyheadername_) {
    familyheadername_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& CMessageGetFamilyPropertyResponse::familyheadername() const {
  return *familyheadername_;
}
inline void CMessageGetFamilyPropertyResponse::set_familyheadername(const ::std::string& value) {
  _set_bit(6);
  if (familyheadername_ == &_default_familyheadername_) {
    familyheadername_ = new ::std::string;
  }
  familyheadername_->assign(value);
}
inline void CMessageGetFamilyPropertyResponse::set_familyheadername(const char* value) {
  _set_bit(6);
  if (familyheadername_ == &_default_familyheadername_) {
    familyheadername_ = new ::std::string;
  }
  familyheadername_->assign(value);
}
inline void CMessageGetFamilyPropertyResponse::set_familyheadername(const char* value, size_t size) {
  _set_bit(6);
  if (familyheadername_ == &_default_familyheadername_) {
    familyheadername_ = new ::std::string;
  }
  familyheadername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageGetFamilyPropertyResponse::mutable_familyheadername() {
  _set_bit(6);
  if (familyheadername_ == &_default_familyheadername_) {
    familyheadername_ = new ::std::string;
  }
  return familyheadername_;
}

// optional uint32 FamilyGlory = 8;
inline bool CMessageGetFamilyPropertyResponse::has_familyglory() const {
  return _has_bit(7);
}
inline void CMessageGetFamilyPropertyResponse::clear_familyglory() {
  familyglory_ = 0u;
  _clear_bit(7);
}
inline ::google::protobuf::uint32 CMessageGetFamilyPropertyResponse::familyglory() const {
  return familyglory_;
}
inline void CMessageGetFamilyPropertyResponse::set_familyglory(::google::protobuf::uint32 value) {
  _set_bit(7);
  familyglory_ = value;
}

// optional uint32 NpcID = 9;
inline bool CMessageGetFamilyPropertyResponse::has_npcid() const {
  return _has_bit(8);
}
inline void CMessageGetFamilyPropertyResponse::clear_npcid() {
  npcid_ = 0u;
  _clear_bit(8);
}
inline ::google::protobuf::uint32 CMessageGetFamilyPropertyResponse::npcid() const {
  return npcid_;
}
inline void CMessageGetFamilyPropertyResponse::set_npcid(::google::protobuf::uint32 value) {
  _set_bit(8);
  npcid_ = value;
}

// optional uint32 BidMoney = 10;
inline bool CMessageGetFamilyPropertyResponse::has_bidmoney() const {
  return _has_bit(9);
}
inline void CMessageGetFamilyPropertyResponse::clear_bidmoney() {
  bidmoney_ = 0u;
  _clear_bit(9);
}
inline ::google::protobuf::uint32 CMessageGetFamilyPropertyResponse::bidmoney() const {
  return bidmoney_;
}
inline void CMessageGetFamilyPropertyResponse::set_bidmoney(::google::protobuf::uint32 value) {
  _set_bit(9);
  bidmoney_ = value;
}

// optional uint32 BidTime = 11;
inline bool CMessageGetFamilyPropertyResponse::has_bidtime() const {
  return _has_bit(10);
}
inline void CMessageGetFamilyPropertyResponse::clear_bidtime() {
  bidtime_ = 0u;
  _clear_bit(10);
}
inline ::google::protobuf::uint32 CMessageGetFamilyPropertyResponse::bidtime() const {
  return bidtime_;
}
inline void CMessageGetFamilyPropertyResponse::set_bidtime(::google::protobuf::uint32 value) {
  _set_bit(10);
  bidtime_ = value;
}

// optional uint32 WarNpcStatus = 12;
inline bool CMessageGetFamilyPropertyResponse::has_warnpcstatus() const {
  return _has_bit(11);
}
inline void CMessageGetFamilyPropertyResponse::clear_warnpcstatus() {
  warnpcstatus_ = 0u;
  _clear_bit(11);
}
inline ::google::protobuf::uint32 CMessageGetFamilyPropertyResponse::warnpcstatus() const {
  return warnpcstatus_;
}
inline void CMessageGetFamilyPropertyResponse::set_warnpcstatus(::google::protobuf::uint32 value) {
  _set_bit(11);
  warnpcstatus_ = value;
}

// optional uint32 WarRank = 13;
inline bool CMessageGetFamilyPropertyResponse::has_warrank() const {
  return _has_bit(12);
}
inline void CMessageGetFamilyPropertyResponse::clear_warrank() {
  warrank_ = 0u;
  _clear_bit(12);
}
inline ::google::protobuf::uint32 CMessageGetFamilyPropertyResponse::warrank() const {
  return warrank_;
}
inline void CMessageGetFamilyPropertyResponse::set_warrank(::google::protobuf::uint32 value) {
  _set_bit(12);
  warrank_ = value;
}

// optional uint32 WarWinNum = 14;
inline bool CMessageGetFamilyPropertyResponse::has_warwinnum() const {
  return _has_bit(13);
}
inline void CMessageGetFamilyPropertyResponse::clear_warwinnum() {
  warwinnum_ = 0u;
  _clear_bit(13);
}
inline ::google::protobuf::uint32 CMessageGetFamilyPropertyResponse::warwinnum() const {
  return warwinnum_;
}
inline void CMessageGetFamilyPropertyResponse::set_warwinnum(::google::protobuf::uint32 value) {
  _set_bit(13);
  warwinnum_ = value;
}

// optional uint32 WarLostNum = 15;
inline bool CMessageGetFamilyPropertyResponse::has_warlostnum() const {
  return _has_bit(14);
}
inline void CMessageGetFamilyPropertyResponse::clear_warlostnum() {
  warlostnum_ = 0u;
  _clear_bit(14);
}
inline ::google::protobuf::uint32 CMessageGetFamilyPropertyResponse::warlostnum() const {
  return warlostnum_;
}
inline void CMessageGetFamilyPropertyResponse::set_warlostnum(::google::protobuf::uint32 value) {
  _set_bit(14);
  warlostnum_ = value;
}

// optional uint32 FamilyStarLevel = 16;
inline bool CMessageGetFamilyPropertyResponse::has_familystarlevel() const {
  return _has_bit(15);
}
inline void CMessageGetFamilyPropertyResponse::clear_familystarlevel() {
  familystarlevel_ = 0u;
  _clear_bit(15);
}
inline ::google::protobuf::uint32 CMessageGetFamilyPropertyResponse::familystarlevel() const {
  return familystarlevel_;
}
inline void CMessageGetFamilyPropertyResponse::set_familystarlevel(::google::protobuf::uint32 value) {
  _set_bit(15);
  familystarlevel_ = value;
}

// optional uint32 WarExp = 17;
inline bool CMessageGetFamilyPropertyResponse::has_warexp() const {
  return _has_bit(16);
}
inline void CMessageGetFamilyPropertyResponse::clear_warexp() {
  warexp_ = 0u;
  _clear_bit(16);
}
inline ::google::protobuf::uint32 CMessageGetFamilyPropertyResponse::warexp() const {
  return warexp_;
}
inline void CMessageGetFamilyPropertyResponse::set_warexp(::google::protobuf::uint32 value) {
  _set_bit(16);
  warexp_ = value;
}

// optional uint32 WarMaxExp = 18;
inline bool CMessageGetFamilyPropertyResponse::has_warmaxexp() const {
  return _has_bit(17);
}
inline void CMessageGetFamilyPropertyResponse::clear_warmaxexp() {
  warmaxexp_ = 0u;
  _clear_bit(17);
}
inline ::google::protobuf::uint32 CMessageGetFamilyPropertyResponse::warmaxexp() const {
  return warmaxexp_;
}
inline void CMessageGetFamilyPropertyResponse::set_warmaxexp(::google::protobuf::uint32 value) {
  _set_bit(17);
  warmaxexp_ = value;
}

// optional string EnemyFamilyName = 19;
inline bool CMessageGetFamilyPropertyResponse::has_enemyfamilyname() const {
  return _has_bit(18);
}
inline void CMessageGetFamilyPropertyResponse::clear_enemyfamilyname() {
  if (enemyfamilyname_ != &_default_enemyfamilyname_) {
    enemyfamilyname_->clear();
  }
  _clear_bit(18);
}
inline const ::std::string& CMessageGetFamilyPropertyResponse::enemyfamilyname() const {
  return *enemyfamilyname_;
}
inline void CMessageGetFamilyPropertyResponse::set_enemyfamilyname(const ::std::string& value) {
  _set_bit(18);
  if (enemyfamilyname_ == &_default_enemyfamilyname_) {
    enemyfamilyname_ = new ::std::string;
  }
  enemyfamilyname_->assign(value);
}
inline void CMessageGetFamilyPropertyResponse::set_enemyfamilyname(const char* value) {
  _set_bit(18);
  if (enemyfamilyname_ == &_default_enemyfamilyname_) {
    enemyfamilyname_ = new ::std::string;
  }
  enemyfamilyname_->assign(value);
}
inline void CMessageGetFamilyPropertyResponse::set_enemyfamilyname(const char* value, size_t size) {
  _set_bit(18);
  if (enemyfamilyname_ == &_default_enemyfamilyname_) {
    enemyfamilyname_ = new ::std::string;
  }
  enemyfamilyname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageGetFamilyPropertyResponse::mutable_enemyfamilyname() {
  _set_bit(18);
  if (enemyfamilyname_ == &_default_enemyfamilyname_) {
    enemyfamilyname_ = new ::std::string;
  }
  return enemyfamilyname_;
}

// optional uint32 WarStatus = 20;
inline bool CMessageGetFamilyPropertyResponse::has_warstatus() const {
  return _has_bit(19);
}
inline void CMessageGetFamilyPropertyResponse::clear_warstatus() {
  warstatus_ = 0u;
  _clear_bit(19);
}
inline ::google::protobuf::uint32 CMessageGetFamilyPropertyResponse::warstatus() const {
  return warstatus_;
}
inline void CMessageGetFamilyPropertyResponse::set_warstatus(::google::protobuf::uint32 value) {
  _set_bit(19);
  warstatus_ = value;
}

// optional uint32 ChallengeStatus = 21;
inline bool CMessageGetFamilyPropertyResponse::has_challengestatus() const {
  return _has_bit(20);
}
inline void CMessageGetFamilyPropertyResponse::clear_challengestatus() {
  challengestatus_ = 0u;
  _clear_bit(20);
}
inline ::google::protobuf::uint32 CMessageGetFamilyPropertyResponse::challengestatus() const {
  return challengestatus_;
}
inline void CMessageGetFamilyPropertyResponse::set_challengestatus(::google::protobuf::uint32 value) {
  _set_bit(20);
  challengestatus_ = value;
}

// optional uint32 ChallengeMoney = 22;
inline bool CMessageGetFamilyPropertyResponse::has_challengemoney() const {
  return _has_bit(21);
}
inline void CMessageGetFamilyPropertyResponse::clear_challengemoney() {
  challengemoney_ = 0u;
  _clear_bit(21);
}
inline ::google::protobuf::uint32 CMessageGetFamilyPropertyResponse::challengemoney() const {
  return challengemoney_;
}
inline void CMessageGetFamilyPropertyResponse::set_challengemoney(::google::protobuf::uint32 value) {
  _set_bit(21);
  challengemoney_ = value;
}

// optional string ChallengeStarted = 23;
inline bool CMessageGetFamilyPropertyResponse::has_challengestarted() const {
  return _has_bit(22);
}
inline void CMessageGetFamilyPropertyResponse::clear_challengestarted() {
  if (challengestarted_ != &_default_challengestarted_) {
    challengestarted_->clear();
  }
  _clear_bit(22);
}
inline const ::std::string& CMessageGetFamilyPropertyResponse::challengestarted() const {
  return *challengestarted_;
}
inline void CMessageGetFamilyPropertyResponse::set_challengestarted(const ::std::string& value) {
  _set_bit(22);
  if (challengestarted_ == &_default_challengestarted_) {
    challengestarted_ = new ::std::string;
  }
  challengestarted_->assign(value);
}
inline void CMessageGetFamilyPropertyResponse::set_challengestarted(const char* value) {
  _set_bit(22);
  if (challengestarted_ == &_default_challengestarted_) {
    challengestarted_ = new ::std::string;
  }
  challengestarted_->assign(value);
}
inline void CMessageGetFamilyPropertyResponse::set_challengestarted(const char* value, size_t size) {
  _set_bit(22);
  if (challengestarted_ == &_default_challengestarted_) {
    challengestarted_ = new ::std::string;
  }
  challengestarted_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageGetFamilyPropertyResponse::mutable_challengestarted() {
  _set_bit(22);
  if (challengestarted_ == &_default_challengestarted_) {
    challengestarted_ = new ::std::string;
  }
  return challengestarted_;
}

// optional string ChallengeReceived = 24;
inline bool CMessageGetFamilyPropertyResponse::has_challengereceived() const {
  return _has_bit(23);
}
inline void CMessageGetFamilyPropertyResponse::clear_challengereceived() {
  if (challengereceived_ != &_default_challengereceived_) {
    challengereceived_->clear();
  }
  _clear_bit(23);
}
inline const ::std::string& CMessageGetFamilyPropertyResponse::challengereceived() const {
  return *challengereceived_;
}
inline void CMessageGetFamilyPropertyResponse::set_challengereceived(const ::std::string& value) {
  _set_bit(23);
  if (challengereceived_ == &_default_challengereceived_) {
    challengereceived_ = new ::std::string;
  }
  challengereceived_->assign(value);
}
inline void CMessageGetFamilyPropertyResponse::set_challengereceived(const char* value) {
  _set_bit(23);
  if (challengereceived_ == &_default_challengereceived_) {
    challengereceived_ = new ::std::string;
  }
  challengereceived_->assign(value);
}
inline void CMessageGetFamilyPropertyResponse::set_challengereceived(const char* value, size_t size) {
  _set_bit(23);
  if (challengereceived_ == &_default_challengereceived_) {
    challengereceived_ = new ::std::string;
  }
  challengereceived_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageGetFamilyPropertyResponse::mutable_challengereceived() {
  _set_bit(23);
  if (challengereceived_ == &_default_challengereceived_) {
    challengereceived_ = new ::std::string;
  }
  return challengereceived_;
}

// optional uint32 MaxFamilyMemberNum = 25;
inline bool CMessageGetFamilyPropertyResponse::has_maxfamilymembernum() const {
  return _has_bit(24);
}
inline void CMessageGetFamilyPropertyResponse::clear_maxfamilymembernum() {
  maxfamilymembernum_ = 0u;
  _clear_bit(24);
}
inline ::google::protobuf::uint32 CMessageGetFamilyPropertyResponse::maxfamilymembernum() const {
  return maxfamilymembernum_;
}
inline void CMessageGetFamilyPropertyResponse::set_maxfamilymembernum(::google::protobuf::uint32 value) {
  _set_bit(24);
  maxfamilymembernum_ = value;
}

// optional uint32 CanLevelUP = 26;
inline bool CMessageGetFamilyPropertyResponse::has_canlevelup() const {
  return _has_bit(25);
}
inline void CMessageGetFamilyPropertyResponse::clear_canlevelup() {
  canlevelup_ = 0u;
  _clear_bit(25);
}
inline ::google::protobuf::uint32 CMessageGetFamilyPropertyResponse::canlevelup() const {
  return canlevelup_;
}
inline void CMessageGetFamilyPropertyResponse::set_canlevelup(::google::protobuf::uint32 value) {
  _set_bit(25);
  canlevelup_ = value;
}

// optional uint32 MaxPresterNum = 27;
inline bool CMessageGetFamilyPropertyResponse::has_maxpresternum() const {
  return _has_bit(26);
}
inline void CMessageGetFamilyPropertyResponse::clear_maxpresternum() {
  maxpresternum_ = 0u;
  _clear_bit(26);
}
inline ::google::protobuf::uint32 CMessageGetFamilyPropertyResponse::maxpresternum() const {
  return maxpresternum_;
}
inline void CMessageGetFamilyPropertyResponse::set_maxpresternum(::google::protobuf::uint32 value) {
  _set_bit(26);
  maxpresternum_ = value;
}

// optional uint32 GloryLimit = 28;
inline bool CMessageGetFamilyPropertyResponse::has_glorylimit() const {
  return _has_bit(27);
}
inline void CMessageGetFamilyPropertyResponse::clear_glorylimit() {
  glorylimit_ = 0u;
  _clear_bit(27);
}
inline ::google::protobuf::uint32 CMessageGetFamilyPropertyResponse::glorylimit() const {
  return glorylimit_;
}
inline void CMessageGetFamilyPropertyResponse::set_glorylimit(::google::protobuf::uint32 value) {
  _set_bit(27);
  glorylimit_ = value;
}

// optional uint32 LevelMoney = 29;
inline bool CMessageGetFamilyPropertyResponse::has_levelmoney() const {
  return _has_bit(28);
}
inline void CMessageGetFamilyPropertyResponse::clear_levelmoney() {
  levelmoney_ = 0u;
  _clear_bit(28);
}
inline ::google::protobuf::uint32 CMessageGetFamilyPropertyResponse::levelmoney() const {
  return levelmoney_;
}
inline void CMessageGetFamilyPropertyResponse::set_levelmoney(::google::protobuf::uint32 value) {
  _set_bit(28);
  levelmoney_ = value;
}

// optional uint32 Stability = 30;
inline bool CMessageGetFamilyPropertyResponse::has_stability() const {
  return _has_bit(29);
}
inline void CMessageGetFamilyPropertyResponse::clear_stability() {
  stability_ = 0u;
  _clear_bit(29);
}
inline ::google::protobuf::uint32 CMessageGetFamilyPropertyResponse::stability() const {
  return stability_;
}
inline void CMessageGetFamilyPropertyResponse::set_stability(::google::protobuf::uint32 value) {
  _set_bit(29);
  stability_ = value;
}

// optional uint32 ReduceStability = 31;
inline bool CMessageGetFamilyPropertyResponse::has_reducestability() const {
  return _has_bit(30);
}
inline void CMessageGetFamilyPropertyResponse::clear_reducestability() {
  reducestability_ = 0u;
  _clear_bit(30);
}
inline ::google::protobuf::uint32 CMessageGetFamilyPropertyResponse::reducestability() const {
  return reducestability_;
}
inline void CMessageGetFamilyPropertyResponse::set_reducestability(::google::protobuf::uint32 value) {
  _set_bit(30);
  reducestability_ = value;
}

// optional uint32 ExtraRedstonExp = 32;
inline bool CMessageGetFamilyPropertyResponse::has_extraredstonexp() const {
  return _has_bit(31);
}
inline void CMessageGetFamilyPropertyResponse::clear_extraredstonexp() {
  extraredstonexp_ = 0u;
  _clear_bit(31);
}
inline ::google::protobuf::uint32 CMessageGetFamilyPropertyResponse::extraredstonexp() const {
  return extraredstonexp_;
}
inline void CMessageGetFamilyPropertyResponse::set_extraredstonexp(::google::protobuf::uint32 value) {
  _set_bit(31);
  extraredstonexp_ = value;
}

// -------------------------------------------------------------------

// CMessageGetAllFanmilyInfoRequest

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageGetAllFanmilyInfoRequest::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageGetAllFanmilyInfoRequest::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageGetAllFanmilyInfoRequest::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageGetAllFanmilyInfoRequest::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 CurPage = 2;
inline bool CMessageGetAllFanmilyInfoRequest::has_curpage() const {
  return _has_bit(1);
}
inline void CMessageGetAllFanmilyInfoRequest::clear_curpage() {
  curpage_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageGetAllFanmilyInfoRequest::curpage() const {
  return curpage_;
}
inline void CMessageGetAllFanmilyInfoRequest::set_curpage(::google::protobuf::uint32 value) {
  _set_bit(1);
  curpage_ = value;
}

// -------------------------------------------------------------------

// CMessageGetAllFamilyInfoResponse

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageGetAllFamilyInfoResponse::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageGetAllFamilyInfoResponse::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageGetAllFamilyInfoResponse::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageGetAllFamilyInfoResponse::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional .PBFamilyList FamilyInfo = 2;
inline bool CMessageGetAllFamilyInfoResponse::has_familyinfo() const {
  return _has_bit(1);
}
inline void CMessageGetAllFamilyInfoResponse::clear_familyinfo() {
  if (familyinfo_ != NULL) familyinfo_->::PBFamilyList::Clear();
  _clear_bit(1);
}
inline const ::PBFamilyList& CMessageGetAllFamilyInfoResponse::familyinfo() const {
  return familyinfo_ != NULL ? *familyinfo_ : *default_instance_->familyinfo_;
}
inline ::PBFamilyList* CMessageGetAllFamilyInfoResponse::mutable_familyinfo() {
  _set_bit(1);
  if (familyinfo_ == NULL) familyinfo_ = new ::PBFamilyList;
  return familyinfo_;
}

// optional uint32 CurPage = 3;
inline bool CMessageGetAllFamilyInfoResponse::has_curpage() const {
  return _has_bit(2);
}
inline void CMessageGetAllFamilyInfoResponse::clear_curpage() {
  curpage_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageGetAllFamilyInfoResponse::curpage() const {
  return curpage_;
}
inline void CMessageGetAllFamilyInfoResponse::set_curpage(::google::protobuf::uint32 value) {
  _set_bit(2);
  curpage_ = value;
}

// optional uint32 TotalPage = 4;
inline bool CMessageGetAllFamilyInfoResponse::has_totalpage() const {
  return _has_bit(3);
}
inline void CMessageGetAllFamilyInfoResponse::clear_totalpage() {
  totalpage_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessageGetAllFamilyInfoResponse::totalpage() const {
  return totalpage_;
}
inline void CMessageGetAllFamilyInfoResponse::set_totalpage(::google::protobuf::uint32 value) {
  _set_bit(3);
  totalpage_ = value;
}

// -------------------------------------------------------------------

// CMessageGetApplyListRequest

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageGetApplyListRequest::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageGetApplyListRequest::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageGetApplyListRequest::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageGetApplyListRequest::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 FamilyID = 2;
inline bool CMessageGetApplyListRequest::has_familyid() const {
  return _has_bit(1);
}
inline void CMessageGetApplyListRequest::clear_familyid() {
  familyid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageGetApplyListRequest::familyid() const {
  return familyid_;
}
inline void CMessageGetApplyListRequest::set_familyid(::google::protobuf::uint32 value) {
  _set_bit(1);
  familyid_ = value;
}

// -------------------------------------------------------------------

// CMessageGetApplyListResponse

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageGetApplyListResponse::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageGetApplyListResponse::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageGetApplyListResponse::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageGetApplyListResponse::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional .PBApplyList ApplyList = 2;
inline bool CMessageGetApplyListResponse::has_applylist() const {
  return _has_bit(1);
}
inline void CMessageGetApplyListResponse::clear_applylist() {
  if (applylist_ != NULL) applylist_->::PBApplyList::Clear();
  _clear_bit(1);
}
inline const ::PBApplyList& CMessageGetApplyListResponse::applylist() const {
  return applylist_ != NULL ? *applylist_ : *default_instance_->applylist_;
}
inline ::PBApplyList* CMessageGetApplyListResponse::mutable_applylist() {
  _set_bit(1);
  if (applylist_ == NULL) applylist_ = new ::PBApplyList;
  return applylist_;
}

// -------------------------------------------------------------------

// CMessageKickPlayerRequest

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageKickPlayerRequest::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageKickPlayerRequest::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageKickPlayerRequest::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageKickPlayerRequest::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 PlayerCharID = 2;
inline bool CMessageKickPlayerRequest::has_playercharid() const {
  return _has_bit(1);
}
inline void CMessageKickPlayerRequest::clear_playercharid() {
  playercharid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageKickPlayerRequest::playercharid() const {
  return playercharid_;
}
inline void CMessageKickPlayerRequest::set_playercharid(::google::protobuf::uint32 value) {
  _set_bit(1);
  playercharid_ = value;
}

// -------------------------------------------------------------------

// CMessageKickPlayerResponse

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageKickPlayerResponse::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageKickPlayerResponse::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageKickPlayerResponse::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageKickPlayerResponse::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 Errcode = 2;
inline bool CMessageKickPlayerResponse::has_errcode() const {
  return _has_bit(1);
}
inline void CMessageKickPlayerResponse::clear_errcode() {
  errcode_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageKickPlayerResponse::errcode() const {
  return errcode_;
}
inline void CMessageKickPlayerResponse::set_errcode(::google::protobuf::uint32 value) {
  _set_bit(1);
  errcode_ = value;
}

// optional string PlayerName = 3;
inline bool CMessageKickPlayerResponse::has_playername() const {
  return _has_bit(2);
}
inline void CMessageKickPlayerResponse::clear_playername() {
  if (playername_ != &_default_playername_) {
    playername_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& CMessageKickPlayerResponse::playername() const {
  return *playername_;
}
inline void CMessageKickPlayerResponse::set_playername(const ::std::string& value) {
  _set_bit(2);
  if (playername_ == &_default_playername_) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void CMessageKickPlayerResponse::set_playername(const char* value) {
  _set_bit(2);
  if (playername_ == &_default_playername_) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void CMessageKickPlayerResponse::set_playername(const char* value, size_t size) {
  _set_bit(2);
  if (playername_ == &_default_playername_) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageKickPlayerResponse::mutable_playername() {
  _set_bit(2);
  if (playername_ == &_default_playername_) {
    playername_ = new ::std::string;
  }
  return playername_;
}

// optional uint32 PlayerCharID = 4;
inline bool CMessageKickPlayerResponse::has_playercharid() const {
  return _has_bit(3);
}
inline void CMessageKickPlayerResponse::clear_playercharid() {
  playercharid_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessageKickPlayerResponse::playercharid() const {
  return playercharid_;
}
inline void CMessageKickPlayerResponse::set_playercharid(::google::protobuf::uint32 value) {
  _set_bit(3);
  playercharid_ = value;
}

// -------------------------------------------------------------------

// CMessageKickPlayerNotify

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageKickPlayerNotify::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageKickPlayerNotify::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageKickPlayerNotify::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageKickPlayerNotify::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional string PlayerName = 2;
inline bool CMessageKickPlayerNotify::has_playername() const {
  return _has_bit(1);
}
inline void CMessageKickPlayerNotify::clear_playername() {
  if (playername_ != &_default_playername_) {
    playername_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CMessageKickPlayerNotify::playername() const {
  return *playername_;
}
inline void CMessageKickPlayerNotify::set_playername(const ::std::string& value) {
  _set_bit(1);
  if (playername_ == &_default_playername_) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void CMessageKickPlayerNotify::set_playername(const char* value) {
  _set_bit(1);
  if (playername_ == &_default_playername_) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void CMessageKickPlayerNotify::set_playername(const char* value, size_t size) {
  _set_bit(1);
  if (playername_ == &_default_playername_) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageKickPlayerNotify::mutable_playername() {
  _set_bit(1);
  if (playername_ == &_default_playername_) {
    playername_ = new ::std::string;
  }
  return playername_;
}

// optional uint32 PlayerCharID = 3;
inline bool CMessageKickPlayerNotify::has_playercharid() const {
  return _has_bit(2);
}
inline void CMessageKickPlayerNotify::clear_playercharid() {
  playercharid_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageKickPlayerNotify::playercharid() const {
  return playercharid_;
}
inline void CMessageKickPlayerNotify::set_playercharid(::google::protobuf::uint32 value) {
  _set_bit(2);
  playercharid_ = value;
}

// optional string ManagerName = 4;
inline bool CMessageKickPlayerNotify::has_managername() const {
  return _has_bit(3);
}
inline void CMessageKickPlayerNotify::clear_managername() {
  if (managername_ != &_default_managername_) {
    managername_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& CMessageKickPlayerNotify::managername() const {
  return *managername_;
}
inline void CMessageKickPlayerNotify::set_managername(const ::std::string& value) {
  _set_bit(3);
  if (managername_ == &_default_managername_) {
    managername_ = new ::std::string;
  }
  managername_->assign(value);
}
inline void CMessageKickPlayerNotify::set_managername(const char* value) {
  _set_bit(3);
  if (managername_ == &_default_managername_) {
    managername_ = new ::std::string;
  }
  managername_->assign(value);
}
inline void CMessageKickPlayerNotify::set_managername(const char* value, size_t size) {
  _set_bit(3);
  if (managername_ == &_default_managername_) {
    managername_ = new ::std::string;
  }
  managername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageKickPlayerNotify::mutable_managername() {
  _set_bit(3);
  if (managername_ == &_default_managername_) {
    managername_ = new ::std::string;
  }
  return managername_;
}

// optional uint32 ManagerCharID = 5;
inline bool CMessageKickPlayerNotify::has_managercharid() const {
  return _has_bit(4);
}
inline void CMessageKickPlayerNotify::clear_managercharid() {
  managercharid_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 CMessageKickPlayerNotify::managercharid() const {
  return managercharid_;
}
inline void CMessageKickPlayerNotify::set_managercharid(::google::protobuf::uint32 value) {
  _set_bit(4);
  managercharid_ = value;
}

// -------------------------------------------------------------------

// CMessageDisbandFamilyRequest

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageDisbandFamilyRequest::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageDisbandFamilyRequest::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageDisbandFamilyRequest::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageDisbandFamilyRequest::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 MsgCode = 2;
inline bool CMessageDisbandFamilyRequest::has_msgcode() const {
  return _has_bit(1);
}
inline void CMessageDisbandFamilyRequest::clear_msgcode() {
  msgcode_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageDisbandFamilyRequest::msgcode() const {
  return msgcode_;
}
inline void CMessageDisbandFamilyRequest::set_msgcode(::google::protobuf::uint32 value) {
  _set_bit(1);
  msgcode_ = value;
}

// optional uint32 NpcEntityID = 3;
inline bool CMessageDisbandFamilyRequest::has_npcentityid() const {
  return _has_bit(2);
}
inline void CMessageDisbandFamilyRequest::clear_npcentityid() {
  npcentityid_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageDisbandFamilyRequest::npcentityid() const {
  return npcentityid_;
}
inline void CMessageDisbandFamilyRequest::set_npcentityid(::google::protobuf::uint32 value) {
  _set_bit(2);
  npcentityid_ = value;
}

// -------------------------------------------------------------------

// CMessageDisbandFamilyResponse

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageDisbandFamilyResponse::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageDisbandFamilyResponse::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageDisbandFamilyResponse::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageDisbandFamilyResponse::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 Errcode = 2;
inline bool CMessageDisbandFamilyResponse::has_errcode() const {
  return _has_bit(1);
}
inline void CMessageDisbandFamilyResponse::clear_errcode() {
  errcode_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageDisbandFamilyResponse::errcode() const {
  return errcode_;
}
inline void CMessageDisbandFamilyResponse::set_errcode(::google::protobuf::uint32 value) {
  _set_bit(1);
  errcode_ = value;
}

// -------------------------------------------------------------------

// CMessageDisbandFamilyNotify

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageDisbandFamilyNotify::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageDisbandFamilyNotify::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageDisbandFamilyNotify::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageDisbandFamilyNotify::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 ManagerCharID = 2;
inline bool CMessageDisbandFamilyNotify::has_managercharid() const {
  return _has_bit(1);
}
inline void CMessageDisbandFamilyNotify::clear_managercharid() {
  managercharid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageDisbandFamilyNotify::managercharid() const {
  return managercharid_;
}
inline void CMessageDisbandFamilyNotify::set_managercharid(::google::protobuf::uint32 value) {
  _set_bit(1);
  managercharid_ = value;
}

// optional uint32 FamilyID = 3;
inline bool CMessageDisbandFamilyNotify::has_familyid() const {
  return _has_bit(2);
}
inline void CMessageDisbandFamilyNotify::clear_familyid() {
  familyid_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageDisbandFamilyNotify::familyid() const {
  return familyid_;
}
inline void CMessageDisbandFamilyNotify::set_familyid(::google::protobuf::uint32 value) {
  _set_bit(2);
  familyid_ = value;
}

// -------------------------------------------------------------------

// CMessageChangeFamilyNoticeRequest

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageChangeFamilyNoticeRequest::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageChangeFamilyNoticeRequest::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageChangeFamilyNoticeRequest::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageChangeFamilyNoticeRequest::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional string Notice = 2;
inline bool CMessageChangeFamilyNoticeRequest::has_notice() const {
  return _has_bit(1);
}
inline void CMessageChangeFamilyNoticeRequest::clear_notice() {
  if (notice_ != &_default_notice_) {
    notice_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CMessageChangeFamilyNoticeRequest::notice() const {
  return *notice_;
}
inline void CMessageChangeFamilyNoticeRequest::set_notice(const ::std::string& value) {
  _set_bit(1);
  if (notice_ == &_default_notice_) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void CMessageChangeFamilyNoticeRequest::set_notice(const char* value) {
  _set_bit(1);
  if (notice_ == &_default_notice_) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void CMessageChangeFamilyNoticeRequest::set_notice(const char* value, size_t size) {
  _set_bit(1);
  if (notice_ == &_default_notice_) {
    notice_ = new ::std::string;
  }
  notice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageChangeFamilyNoticeRequest::mutable_notice() {
  _set_bit(1);
  if (notice_ == &_default_notice_) {
    notice_ = new ::std::string;
  }
  return notice_;
}

// -------------------------------------------------------------------

// CMessageChangeFamilyNoticeResponse

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageChangeFamilyNoticeResponse::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageChangeFamilyNoticeResponse::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageChangeFamilyNoticeResponse::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageChangeFamilyNoticeResponse::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 Errcode = 2;
inline bool CMessageChangeFamilyNoticeResponse::has_errcode() const {
  return _has_bit(1);
}
inline void CMessageChangeFamilyNoticeResponse::clear_errcode() {
  errcode_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageChangeFamilyNoticeResponse::errcode() const {
  return errcode_;
}
inline void CMessageChangeFamilyNoticeResponse::set_errcode(::google::protobuf::uint32 value) {
  _set_bit(1);
  errcode_ = value;
}

// optional string Notice = 3;
inline bool CMessageChangeFamilyNoticeResponse::has_notice() const {
  return _has_bit(2);
}
inline void CMessageChangeFamilyNoticeResponse::clear_notice() {
  if (notice_ != &_default_notice_) {
    notice_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& CMessageChangeFamilyNoticeResponse::notice() const {
  return *notice_;
}
inline void CMessageChangeFamilyNoticeResponse::set_notice(const ::std::string& value) {
  _set_bit(2);
  if (notice_ == &_default_notice_) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void CMessageChangeFamilyNoticeResponse::set_notice(const char* value) {
  _set_bit(2);
  if (notice_ == &_default_notice_) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void CMessageChangeFamilyNoticeResponse::set_notice(const char* value, size_t size) {
  _set_bit(2);
  if (notice_ == &_default_notice_) {
    notice_ = new ::std::string;
  }
  notice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageChangeFamilyNoticeResponse::mutable_notice() {
  _set_bit(2);
  if (notice_ == &_default_notice_) {
    notice_ = new ::std::string;
  }
  return notice_;
}

// -------------------------------------------------------------------

// CMessageAppointHeaderRequest

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageAppointHeaderRequest::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageAppointHeaderRequest::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageAppointHeaderRequest::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageAppointHeaderRequest::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 PlayerCharID = 2;
inline bool CMessageAppointHeaderRequest::has_playercharid() const {
  return _has_bit(1);
}
inline void CMessageAppointHeaderRequest::clear_playercharid() {
  playercharid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageAppointHeaderRequest::playercharid() const {
  return playercharid_;
}
inline void CMessageAppointHeaderRequest::set_playercharid(::google::protobuf::uint32 value) {
  _set_bit(1);
  playercharid_ = value;
}

// -------------------------------------------------------------------

// CMessageAppointHeaderResponse

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageAppointHeaderResponse::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageAppointHeaderResponse::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageAppointHeaderResponse::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageAppointHeaderResponse::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 Errcode = 2;
inline bool CMessageAppointHeaderResponse::has_errcode() const {
  return _has_bit(1);
}
inline void CMessageAppointHeaderResponse::clear_errcode() {
  errcode_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageAppointHeaderResponse::errcode() const {
  return errcode_;
}
inline void CMessageAppointHeaderResponse::set_errcode(::google::protobuf::uint32 value) {
  _set_bit(1);
  errcode_ = value;
}

// optional uint32 PlayerCharID = 3;
inline bool CMessageAppointHeaderResponse::has_playercharid() const {
  return _has_bit(2);
}
inline void CMessageAppointHeaderResponse::clear_playercharid() {
  playercharid_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageAppointHeaderResponse::playercharid() const {
  return playercharid_;
}
inline void CMessageAppointHeaderResponse::set_playercharid(::google::protobuf::uint32 value) {
  _set_bit(2);
  playercharid_ = value;
}

// optional string PlayerName = 4;
inline bool CMessageAppointHeaderResponse::has_playername() const {
  return _has_bit(3);
}
inline void CMessageAppointHeaderResponse::clear_playername() {
  if (playername_ != &_default_playername_) {
    playername_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& CMessageAppointHeaderResponse::playername() const {
  return *playername_;
}
inline void CMessageAppointHeaderResponse::set_playername(const ::std::string& value) {
  _set_bit(3);
  if (playername_ == &_default_playername_) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void CMessageAppointHeaderResponse::set_playername(const char* value) {
  _set_bit(3);
  if (playername_ == &_default_playername_) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void CMessageAppointHeaderResponse::set_playername(const char* value, size_t size) {
  _set_bit(3);
  if (playername_ == &_default_playername_) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageAppointHeaderResponse::mutable_playername() {
  _set_bit(3);
  if (playername_ == &_default_playername_) {
    playername_ = new ::std::string;
  }
  return playername_;
}

// -------------------------------------------------------------------

// CMessageChangeHeaderNotify

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageChangeHeaderNotify::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageChangeHeaderNotify::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageChangeHeaderNotify::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageChangeHeaderNotify::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 PlayerCharID = 2;
inline bool CMessageChangeHeaderNotify::has_playercharid() const {
  return _has_bit(1);
}
inline void CMessageChangeHeaderNotify::clear_playercharid() {
  playercharid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageChangeHeaderNotify::playercharid() const {
  return playercharid_;
}
inline void CMessageChangeHeaderNotify::set_playercharid(::google::protobuf::uint32 value) {
  _set_bit(1);
  playercharid_ = value;
}

// optional string PlayerName = 3;
inline bool CMessageChangeHeaderNotify::has_playername() const {
  return _has_bit(2);
}
inline void CMessageChangeHeaderNotify::clear_playername() {
  if (playername_ != &_default_playername_) {
    playername_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& CMessageChangeHeaderNotify::playername() const {
  return *playername_;
}
inline void CMessageChangeHeaderNotify::set_playername(const ::std::string& value) {
  _set_bit(2);
  if (playername_ == &_default_playername_) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void CMessageChangeHeaderNotify::set_playername(const char* value) {
  _set_bit(2);
  if (playername_ == &_default_playername_) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void CMessageChangeHeaderNotify::set_playername(const char* value, size_t size) {
  _set_bit(2);
  if (playername_ == &_default_playername_) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageChangeHeaderNotify::mutable_playername() {
  _set_bit(2);
  if (playername_ == &_default_playername_) {
    playername_ = new ::std::string;
  }
  return playername_;
}

// optional uint32 ManagerID = 4;
inline bool CMessageChangeHeaderNotify::has_managerid() const {
  return _has_bit(3);
}
inline void CMessageChangeHeaderNotify::clear_managerid() {
  managerid_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessageChangeHeaderNotify::managerid() const {
  return managerid_;
}
inline void CMessageChangeHeaderNotify::set_managerid(::google::protobuf::uint32 value) {
  _set_bit(3);
  managerid_ = value;
}

// optional string ManagerName = 5;
inline bool CMessageChangeHeaderNotify::has_managername() const {
  return _has_bit(4);
}
inline void CMessageChangeHeaderNotify::clear_managername() {
  if (managername_ != &_default_managername_) {
    managername_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& CMessageChangeHeaderNotify::managername() const {
  return *managername_;
}
inline void CMessageChangeHeaderNotify::set_managername(const ::std::string& value) {
  _set_bit(4);
  if (managername_ == &_default_managername_) {
    managername_ = new ::std::string;
  }
  managername_->assign(value);
}
inline void CMessageChangeHeaderNotify::set_managername(const char* value) {
  _set_bit(4);
  if (managername_ == &_default_managername_) {
    managername_ = new ::std::string;
  }
  managername_->assign(value);
}
inline void CMessageChangeHeaderNotify::set_managername(const char* value, size_t size) {
  _set_bit(4);
  if (managername_ == &_default_managername_) {
    managername_ = new ::std::string;
  }
  managername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageChangeHeaderNotify::mutable_managername() {
  _set_bit(4);
  if (managername_ == &_default_managername_) {
    managername_ = new ::std::string;
  }
  return managername_;
}

// -------------------------------------------------------------------

// CMessageFamilyPropertyNotify

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageFamilyPropertyNotify::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageFamilyPropertyNotify::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageFamilyPropertyNotify::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageFamilyPropertyNotify::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional .PBFamilyPropery Property = 2;
inline bool CMessageFamilyPropertyNotify::has_property() const {
  return _has_bit(1);
}
inline void CMessageFamilyPropertyNotify::clear_property() {
  if (property_ != NULL) property_->::PBFamilyPropery::Clear();
  _clear_bit(1);
}
inline const ::PBFamilyPropery& CMessageFamilyPropertyNotify::property() const {
  return property_ != NULL ? *property_ : *default_instance_->property_;
}
inline ::PBFamilyPropery* CMessageFamilyPropertyNotify::mutable_property() {
  _set_bit(1);
  if (property_ == NULL) property_ = new ::PBFamilyPropery;
  return property_;
}

// optional uint32 FamilyLevel = 3;
inline bool CMessageFamilyPropertyNotify::has_familylevel() const {
  return _has_bit(2);
}
inline void CMessageFamilyPropertyNotify::clear_familylevel() {
  familylevel_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageFamilyPropertyNotify::familylevel() const {
  return familylevel_;
}
inline void CMessageFamilyPropertyNotify::set_familylevel(::google::protobuf::uint32 value) {
  _set_bit(2);
  familylevel_ = value;
}

// -------------------------------------------------------------------

// CMessageInviteFamilyResultNotify

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageInviteFamilyResultNotify::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageInviteFamilyResultNotify::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageInviteFamilyResultNotify::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageInviteFamilyResultNotify::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 Result = 2;
inline bool CMessageInviteFamilyResultNotify::has_result() const {
  return _has_bit(1);
}
inline void CMessageInviteFamilyResultNotify::clear_result() {
  result_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageInviteFamilyResultNotify::result() const {
  return result_;
}
inline void CMessageInviteFamilyResultNotify::set_result(::google::protobuf::uint32 value) {
  _set_bit(1);
  result_ = value;
}

// optional string RoleName = 3;
inline bool CMessageInviteFamilyResultNotify::has_rolename() const {
  return _has_bit(2);
}
inline void CMessageInviteFamilyResultNotify::clear_rolename() {
  if (rolename_ != &_default_rolename_) {
    rolename_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& CMessageInviteFamilyResultNotify::rolename() const {
  return *rolename_;
}
inline void CMessageInviteFamilyResultNotify::set_rolename(const ::std::string& value) {
  _set_bit(2);
  if (rolename_ == &_default_rolename_) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void CMessageInviteFamilyResultNotify::set_rolename(const char* value) {
  _set_bit(2);
  if (rolename_ == &_default_rolename_) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void CMessageInviteFamilyResultNotify::set_rolename(const char* value, size_t size) {
  _set_bit(2);
  if (rolename_ == &_default_rolename_) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageInviteFamilyResultNotify::mutable_rolename() {
  _set_bit(2);
  if (rolename_ == &_default_rolename_) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}

// -------------------------------------------------------------------

// CMessageClearFamilyApplyRequest

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageClearFamilyApplyRequest::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageClearFamilyApplyRequest::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageClearFamilyApplyRequest::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageClearFamilyApplyRequest::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 MsgCode = 2;
inline bool CMessageClearFamilyApplyRequest::has_msgcode() const {
  return _has_bit(1);
}
inline void CMessageClearFamilyApplyRequest::clear_msgcode() {
  msgcode_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageClearFamilyApplyRequest::msgcode() const {
  return msgcode_;
}
inline void CMessageClearFamilyApplyRequest::set_msgcode(::google::protobuf::uint32 value) {
  _set_bit(1);
  msgcode_ = value;
}

// -------------------------------------------------------------------

// CMessageClearFamilyApplyResponse

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageClearFamilyApplyResponse::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageClearFamilyApplyResponse::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageClearFamilyApplyResponse::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageClearFamilyApplyResponse::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 Errcode = 2;
inline bool CMessageClearFamilyApplyResponse::has_errcode() const {
  return _has_bit(1);
}
inline void CMessageClearFamilyApplyResponse::clear_errcode() {
  errcode_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageClearFamilyApplyResponse::errcode() const {
  return errcode_;
}
inline void CMessageClearFamilyApplyResponse::set_errcode(::google::protobuf::uint32 value) {
  _set_bit(1);
  errcode_ = value;
}

// -------------------------------------------------------------------

// CMessageJoinCorpsNotify

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageJoinCorpsNotify::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageJoinCorpsNotify::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageJoinCorpsNotify::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageJoinCorpsNotify::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 CorpsID = 2;
inline bool CMessageJoinCorpsNotify::has_corpsid() const {
  return _has_bit(1);
}
inline void CMessageJoinCorpsNotify::clear_corpsid() {
  corpsid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageJoinCorpsNotify::corpsid() const {
  return corpsid_;
}
inline void CMessageJoinCorpsNotify::set_corpsid(::google::protobuf::uint32 value) {
  _set_bit(1);
  corpsid_ = value;
}

// optional string CorpsName = 3;
inline bool CMessageJoinCorpsNotify::has_corpsname() const {
  return _has_bit(2);
}
inline void CMessageJoinCorpsNotify::clear_corpsname() {
  if (corpsname_ != &_default_corpsname_) {
    corpsname_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& CMessageJoinCorpsNotify::corpsname() const {
  return *corpsname_;
}
inline void CMessageJoinCorpsNotify::set_corpsname(const ::std::string& value) {
  _set_bit(2);
  if (corpsname_ == &_default_corpsname_) {
    corpsname_ = new ::std::string;
  }
  corpsname_->assign(value);
}
inline void CMessageJoinCorpsNotify::set_corpsname(const char* value) {
  _set_bit(2);
  if (corpsname_ == &_default_corpsname_) {
    corpsname_ = new ::std::string;
  }
  corpsname_->assign(value);
}
inline void CMessageJoinCorpsNotify::set_corpsname(const char* value, size_t size) {
  _set_bit(2);
  if (corpsname_ == &_default_corpsname_) {
    corpsname_ = new ::std::string;
  }
  corpsname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageJoinCorpsNotify::mutable_corpsname() {
  _set_bit(2);
  if (corpsname_ == &_default_corpsname_) {
    corpsname_ = new ::std::string;
  }
  return corpsname_;
}

// optional uint32 JoinMethod = 4;
inline bool CMessageJoinCorpsNotify::has_joinmethod() const {
  return _has_bit(3);
}
inline void CMessageJoinCorpsNotify::clear_joinmethod() {
  joinmethod_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessageJoinCorpsNotify::joinmethod() const {
  return joinmethod_;
}
inline void CMessageJoinCorpsNotify::set_joinmethod(::google::protobuf::uint32 value) {
  _set_bit(3);
  joinmethod_ = value;
}

// optional uint32 UnionID = 5;
inline bool CMessageJoinCorpsNotify::has_unionid() const {
  return _has_bit(4);
}
inline void CMessageJoinCorpsNotify::clear_unionid() {
  unionid_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 CMessageJoinCorpsNotify::unionid() const {
  return unionid_;
}
inline void CMessageJoinCorpsNotify::set_unionid(::google::protobuf::uint32 value) {
  _set_bit(4);
  unionid_ = value;
}

// optional string UnionName = 6;
inline bool CMessageJoinCorpsNotify::has_unionname() const {
  return _has_bit(5);
}
inline void CMessageJoinCorpsNotify::clear_unionname() {
  if (unionname_ != &_default_unionname_) {
    unionname_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& CMessageJoinCorpsNotify::unionname() const {
  return *unionname_;
}
inline void CMessageJoinCorpsNotify::set_unionname(const ::std::string& value) {
  _set_bit(5);
  if (unionname_ == &_default_unionname_) {
    unionname_ = new ::std::string;
  }
  unionname_->assign(value);
}
inline void CMessageJoinCorpsNotify::set_unionname(const char* value) {
  _set_bit(5);
  if (unionname_ == &_default_unionname_) {
    unionname_ = new ::std::string;
  }
  unionname_->assign(value);
}
inline void CMessageJoinCorpsNotify::set_unionname(const char* value, size_t size) {
  _set_bit(5);
  if (unionname_ == &_default_unionname_) {
    unionname_ = new ::std::string;
  }
  unionname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageJoinCorpsNotify::mutable_unionname() {
  _set_bit(5);
  if (unionname_ == &_default_unionname_) {
    unionname_ = new ::std::string;
  }
  return unionname_;
}

// -------------------------------------------------------------------

// CMessageCancelFamilyDisbandRequest

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageCancelFamilyDisbandRequest::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageCancelFamilyDisbandRequest::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageCancelFamilyDisbandRequest::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageCancelFamilyDisbandRequest::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 NpcEntityID = 2;
inline bool CMessageCancelFamilyDisbandRequest::has_npcentityid() const {
  return _has_bit(1);
}
inline void CMessageCancelFamilyDisbandRequest::clear_npcentityid() {
  npcentityid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageCancelFamilyDisbandRequest::npcentityid() const {
  return npcentityid_;
}
inline void CMessageCancelFamilyDisbandRequest::set_npcentityid(::google::protobuf::uint32 value) {
  _set_bit(1);
  npcentityid_ = value;
}

// -------------------------------------------------------------------

// CMessageCancelFamilyDisbandResponse

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageCancelFamilyDisbandResponse::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageCancelFamilyDisbandResponse::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageCancelFamilyDisbandResponse::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageCancelFamilyDisbandResponse::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 Errcode = 2;
inline bool CMessageCancelFamilyDisbandResponse::has_errcode() const {
  return _has_bit(1);
}
inline void CMessageCancelFamilyDisbandResponse::clear_errcode() {
  errcode_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageCancelFamilyDisbandResponse::errcode() const {
  return errcode_;
}
inline void CMessageCancelFamilyDisbandResponse::set_errcode(::google::protobuf::uint32 value) {
  _set_bit(1);
  errcode_ = value;
}

// -------------------------------------------------------------------

// CMessageChangeFamilyNoticeNotify

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageChangeFamilyNoticeNotify::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageChangeFamilyNoticeNotify::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageChangeFamilyNoticeNotify::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageChangeFamilyNoticeNotify::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional string Notice = 2;
inline bool CMessageChangeFamilyNoticeNotify::has_notice() const {
  return _has_bit(1);
}
inline void CMessageChangeFamilyNoticeNotify::clear_notice() {
  if (notice_ != &_default_notice_) {
    notice_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CMessageChangeFamilyNoticeNotify::notice() const {
  return *notice_;
}
inline void CMessageChangeFamilyNoticeNotify::set_notice(const ::std::string& value) {
  _set_bit(1);
  if (notice_ == &_default_notice_) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void CMessageChangeFamilyNoticeNotify::set_notice(const char* value) {
  _set_bit(1);
  if (notice_ == &_default_notice_) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void CMessageChangeFamilyNoticeNotify::set_notice(const char* value, size_t size) {
  _set_bit(1);
  if (notice_ == &_default_notice_) {
    notice_ = new ::std::string;
  }
  notice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageChangeFamilyNoticeNotify::mutable_notice() {
  _set_bit(1);
  if (notice_ == &_default_notice_) {
    notice_ = new ::std::string;
  }
  return notice_;
}

// -------------------------------------------------------------------

// CMessageRefreshFamilyInfoRequest

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageRefreshFamilyInfoRequest::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageRefreshFamilyInfoRequest::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageRefreshFamilyInfoRequest::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageRefreshFamilyInfoRequest::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 MsgCode = 2;
inline bool CMessageRefreshFamilyInfoRequest::has_msgcode() const {
  return _has_bit(1);
}
inline void CMessageRefreshFamilyInfoRequest::clear_msgcode() {
  msgcode_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageRefreshFamilyInfoRequest::msgcode() const {
  return msgcode_;
}
inline void CMessageRefreshFamilyInfoRequest::set_msgcode(::google::protobuf::uint32 value) {
  _set_bit(1);
  msgcode_ = value;
}

// -------------------------------------------------------------------

// CMessageRefreshFamilyInfoResponse

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageRefreshFamilyInfoResponse::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageRefreshFamilyInfoResponse::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageRefreshFamilyInfoResponse::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageRefreshFamilyInfoResponse::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional .PBFamilyMemberList MemberList = 2;
inline bool CMessageRefreshFamilyInfoResponse::has_memberlist() const {
  return _has_bit(1);
}
inline void CMessageRefreshFamilyInfoResponse::clear_memberlist() {
  if (memberlist_ != NULL) memberlist_->::PBFamilyMemberList::Clear();
  _clear_bit(1);
}
inline const ::PBFamilyMemberList& CMessageRefreshFamilyInfoResponse::memberlist() const {
  return memberlist_ != NULL ? *memberlist_ : *default_instance_->memberlist_;
}
inline ::PBFamilyMemberList* CMessageRefreshFamilyInfoResponse::mutable_memberlist() {
  _set_bit(1);
  if (memberlist_ == NULL) memberlist_ = new ::PBFamilyMemberList;
  return memberlist_;
}

// -------------------------------------------------------------------

// CMessageSetFamilyPostRequest

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageSetFamilyPostRequest::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageSetFamilyPostRequest::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageSetFamilyPostRequest::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageSetFamilyPostRequest::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 MemberID = 2;
inline bool CMessageSetFamilyPostRequest::has_memberid() const {
  return _has_bit(1);
}
inline void CMessageSetFamilyPostRequest::clear_memberid() {
  memberid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageSetFamilyPostRequest::memberid() const {
  return memberid_;
}
inline void CMessageSetFamilyPostRequest::set_memberid(::google::protobuf::uint32 value) {
  _set_bit(1);
  memberid_ = value;
}

// optional uint32 Post = 3;
inline bool CMessageSetFamilyPostRequest::has_post() const {
  return _has_bit(2);
}
inline void CMessageSetFamilyPostRequest::clear_post() {
  post_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageSetFamilyPostRequest::post() const {
  return post_;
}
inline void CMessageSetFamilyPostRequest::set_post(::google::protobuf::uint32 value) {
  _set_bit(2);
  post_ = value;
}

// -------------------------------------------------------------------

// CMessageSetFamilyPostResponse

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageSetFamilyPostResponse::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageSetFamilyPostResponse::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageSetFamilyPostResponse::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageSetFamilyPostResponse::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 Errcode = 2;
inline bool CMessageSetFamilyPostResponse::has_errcode() const {
  return _has_bit(1);
}
inline void CMessageSetFamilyPostResponse::clear_errcode() {
  errcode_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageSetFamilyPostResponse::errcode() const {
  return errcode_;
}
inline void CMessageSetFamilyPostResponse::set_errcode(::google::protobuf::uint32 value) {
  _set_bit(1);
  errcode_ = value;
}

// optional uint32 MemberID = 3;
inline bool CMessageSetFamilyPostResponse::has_memberid() const {
  return _has_bit(2);
}
inline void CMessageSetFamilyPostResponse::clear_memberid() {
  memberid_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageSetFamilyPostResponse::memberid() const {
  return memberid_;
}
inline void CMessageSetFamilyPostResponse::set_memberid(::google::protobuf::uint32 value) {
  _set_bit(2);
  memberid_ = value;
}

// optional uint32 Post = 4;
inline bool CMessageSetFamilyPostResponse::has_post() const {
  return _has_bit(3);
}
inline void CMessageSetFamilyPostResponse::clear_post() {
  post_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessageSetFamilyPostResponse::post() const {
  return post_;
}
inline void CMessageSetFamilyPostResponse::set_post(::google::protobuf::uint32 value) {
  _set_bit(3);
  post_ = value;
}

// -------------------------------------------------------------------

// CMessageLevelUPFamilyRequest

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageLevelUPFamilyRequest::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageLevelUPFamilyRequest::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageLevelUPFamilyRequest::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageLevelUPFamilyRequest::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 MsgCode = 2;
inline bool CMessageLevelUPFamilyRequest::has_msgcode() const {
  return _has_bit(1);
}
inline void CMessageLevelUPFamilyRequest::clear_msgcode() {
  msgcode_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageLevelUPFamilyRequest::msgcode() const {
  return msgcode_;
}
inline void CMessageLevelUPFamilyRequest::set_msgcode(::google::protobuf::uint32 value) {
  _set_bit(1);
  msgcode_ = value;
}

// -------------------------------------------------------------------

// CMessageLevelUPFamilyResponse

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageLevelUPFamilyResponse::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageLevelUPFamilyResponse::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageLevelUPFamilyResponse::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageLevelUPFamilyResponse::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 Errcode = 2;
inline bool CMessageLevelUPFamilyResponse::has_errcode() const {
  return _has_bit(1);
}
inline void CMessageLevelUPFamilyResponse::clear_errcode() {
  errcode_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageLevelUPFamilyResponse::errcode() const {
  return errcode_;
}
inline void CMessageLevelUPFamilyResponse::set_errcode(::google::protobuf::uint32 value) {
  _set_bit(1);
  errcode_ = value;
}

// optional uint32 Level = 3;
inline bool CMessageLevelUPFamilyResponse::has_level() const {
  return _has_bit(2);
}
inline void CMessageLevelUPFamilyResponse::clear_level() {
  level_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageLevelUPFamilyResponse::level() const {
  return level_;
}
inline void CMessageLevelUPFamilyResponse::set_level(::google::protobuf::uint32 value) {
  _set_bit(2);
  level_ = value;
}

// -------------------------------------------------------------------

// CMessageContributeFamilyMoneyRequest

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageContributeFamilyMoneyRequest::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageContributeFamilyMoneyRequest::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageContributeFamilyMoneyRequest::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageContributeFamilyMoneyRequest::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 Money = 2;
inline bool CMessageContributeFamilyMoneyRequest::has_money() const {
  return _has_bit(1);
}
inline void CMessageContributeFamilyMoneyRequest::clear_money() {
  money_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageContributeFamilyMoneyRequest::money() const {
  return money_;
}
inline void CMessageContributeFamilyMoneyRequest::set_money(::google::protobuf::uint32 value) {
  _set_bit(1);
  money_ = value;
}

// -------------------------------------------------------------------

// CMessageContributeFamilyMoneyResponse

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageContributeFamilyMoneyResponse::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageContributeFamilyMoneyResponse::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageContributeFamilyMoneyResponse::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageContributeFamilyMoneyResponse::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 Errcode = 2;
inline bool CMessageContributeFamilyMoneyResponse::has_errcode() const {
  return _has_bit(1);
}
inline void CMessageContributeFamilyMoneyResponse::clear_errcode() {
  errcode_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageContributeFamilyMoneyResponse::errcode() const {
  return errcode_;
}
inline void CMessageContributeFamilyMoneyResponse::set_errcode(::google::protobuf::uint32 value) {
  _set_bit(1);
  errcode_ = value;
}

// optional uint32 Money = 3;
inline bool CMessageContributeFamilyMoneyResponse::has_money() const {
  return _has_bit(2);
}
inline void CMessageContributeFamilyMoneyResponse::clear_money() {
  money_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageContributeFamilyMoneyResponse::money() const {
  return money_;
}
inline void CMessageContributeFamilyMoneyResponse::set_money(::google::protobuf::uint32 value) {
  _set_bit(2);
  money_ = value;
}

// optional uint32 Contribute = 4;
inline bool CMessageContributeFamilyMoneyResponse::has_contribute() const {
  return _has_bit(3);
}
inline void CMessageContributeFamilyMoneyResponse::clear_contribute() {
  contribute_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessageContributeFamilyMoneyResponse::contribute() const {
  return contribute_;
}
inline void CMessageContributeFamilyMoneyResponse::set_contribute(::google::protobuf::uint32 value) {
  _set_bit(3);
  contribute_ = value;
}

// -------------------------------------------------------------------

// CMessageObtainFamilyMoneyRequest

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageObtainFamilyMoneyRequest::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageObtainFamilyMoneyRequest::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageObtainFamilyMoneyRequest::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageObtainFamilyMoneyRequest::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 NpcID = 2;
inline bool CMessageObtainFamilyMoneyRequest::has_npcid() const {
  return _has_bit(1);
}
inline void CMessageObtainFamilyMoneyRequest::clear_npcid() {
  npcid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageObtainFamilyMoneyRequest::npcid() const {
  return npcid_;
}
inline void CMessageObtainFamilyMoneyRequest::set_npcid(::google::protobuf::uint32 value) {
  _set_bit(1);
  npcid_ = value;
}

// optional uint32 NpcTmpID = 3;
inline bool CMessageObtainFamilyMoneyRequest::has_npctmpid() const {
  return _has_bit(2);
}
inline void CMessageObtainFamilyMoneyRequest::clear_npctmpid() {
  npctmpid_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageObtainFamilyMoneyRequest::npctmpid() const {
  return npctmpid_;
}
inline void CMessageObtainFamilyMoneyRequest::set_npctmpid(::google::protobuf::uint32 value) {
  _set_bit(2);
  npctmpid_ = value;
}

// -------------------------------------------------------------------

// CMessageObtainFamilyMoneyResponse

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageObtainFamilyMoneyResponse::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageObtainFamilyMoneyResponse::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageObtainFamilyMoneyResponse::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageObtainFamilyMoneyResponse::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 Errcode = 2;
inline bool CMessageObtainFamilyMoneyResponse::has_errcode() const {
  return _has_bit(1);
}
inline void CMessageObtainFamilyMoneyResponse::clear_errcode() {
  errcode_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageObtainFamilyMoneyResponse::errcode() const {
  return errcode_;
}
inline void CMessageObtainFamilyMoneyResponse::set_errcode(::google::protobuf::uint32 value) {
  _set_bit(1);
  errcode_ = value;
}

// optional uint32 Money = 3;
inline bool CMessageObtainFamilyMoneyResponse::has_money() const {
  return _has_bit(2);
}
inline void CMessageObtainFamilyMoneyResponse::clear_money() {
  money_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageObtainFamilyMoneyResponse::money() const {
  return money_;
}
inline void CMessageObtainFamilyMoneyResponse::set_money(::google::protobuf::uint32 value) {
  _set_bit(2);
  money_ = value;
}

// optional uint32 Glory = 4;
inline bool CMessageObtainFamilyMoneyResponse::has_glory() const {
  return _has_bit(3);
}
inline void CMessageObtainFamilyMoneyResponse::clear_glory() {
  glory_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessageObtainFamilyMoneyResponse::glory() const {
  return glory_;
}
inline void CMessageObtainFamilyMoneyResponse::set_glory(::google::protobuf::uint32 value) {
  _set_bit(3);
  glory_ = value;
}

// -------------------------------------------------------------------

// CMessageSetFamilyPostNotify

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageSetFamilyPostNotify::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageSetFamilyPostNotify::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageSetFamilyPostNotify::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageSetFamilyPostNotify::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 ManagerID = 2;
inline bool CMessageSetFamilyPostNotify::has_managerid() const {
  return _has_bit(1);
}
inline void CMessageSetFamilyPostNotify::clear_managerid() {
  managerid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageSetFamilyPostNotify::managerid() const {
  return managerid_;
}
inline void CMessageSetFamilyPostNotify::set_managerid(::google::protobuf::uint32 value) {
  _set_bit(1);
  managerid_ = value;
}

// optional string ManagerName = 3;
inline bool CMessageSetFamilyPostNotify::has_managername() const {
  return _has_bit(2);
}
inline void CMessageSetFamilyPostNotify::clear_managername() {
  if (managername_ != &_default_managername_) {
    managername_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& CMessageSetFamilyPostNotify::managername() const {
  return *managername_;
}
inline void CMessageSetFamilyPostNotify::set_managername(const ::std::string& value) {
  _set_bit(2);
  if (managername_ == &_default_managername_) {
    managername_ = new ::std::string;
  }
  managername_->assign(value);
}
inline void CMessageSetFamilyPostNotify::set_managername(const char* value) {
  _set_bit(2);
  if (managername_ == &_default_managername_) {
    managername_ = new ::std::string;
  }
  managername_->assign(value);
}
inline void CMessageSetFamilyPostNotify::set_managername(const char* value, size_t size) {
  _set_bit(2);
  if (managername_ == &_default_managername_) {
    managername_ = new ::std::string;
  }
  managername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageSetFamilyPostNotify::mutable_managername() {
  _set_bit(2);
  if (managername_ == &_default_managername_) {
    managername_ = new ::std::string;
  }
  return managername_;
}

// optional uint32 MemberID = 4;
inline bool CMessageSetFamilyPostNotify::has_memberid() const {
  return _has_bit(3);
}
inline void CMessageSetFamilyPostNotify::clear_memberid() {
  memberid_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessageSetFamilyPostNotify::memberid() const {
  return memberid_;
}
inline void CMessageSetFamilyPostNotify::set_memberid(::google::protobuf::uint32 value) {
  _set_bit(3);
  memberid_ = value;
}

// optional string MemberName = 5;
inline bool CMessageSetFamilyPostNotify::has_membername() const {
  return _has_bit(4);
}
inline void CMessageSetFamilyPostNotify::clear_membername() {
  if (membername_ != &_default_membername_) {
    membername_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& CMessageSetFamilyPostNotify::membername() const {
  return *membername_;
}
inline void CMessageSetFamilyPostNotify::set_membername(const ::std::string& value) {
  _set_bit(4);
  if (membername_ == &_default_membername_) {
    membername_ = new ::std::string;
  }
  membername_->assign(value);
}
inline void CMessageSetFamilyPostNotify::set_membername(const char* value) {
  _set_bit(4);
  if (membername_ == &_default_membername_) {
    membername_ = new ::std::string;
  }
  membername_->assign(value);
}
inline void CMessageSetFamilyPostNotify::set_membername(const char* value, size_t size) {
  _set_bit(4);
  if (membername_ == &_default_membername_) {
    membername_ = new ::std::string;
  }
  membername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageSetFamilyPostNotify::mutable_membername() {
  _set_bit(4);
  if (membername_ == &_default_membername_) {
    membername_ = new ::std::string;
  }
  return membername_;
}

// optional uint32 OriginalPost = 6;
inline bool CMessageSetFamilyPostNotify::has_originalpost() const {
  return _has_bit(5);
}
inline void CMessageSetFamilyPostNotify::clear_originalpost() {
  originalpost_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 CMessageSetFamilyPostNotify::originalpost() const {
  return originalpost_;
}
inline void CMessageSetFamilyPostNotify::set_originalpost(::google::protobuf::uint32 value) {
  _set_bit(5);
  originalpost_ = value;
}

// optional uint32 NewPost = 7;
inline bool CMessageSetFamilyPostNotify::has_newpost() const {
  return _has_bit(6);
}
inline void CMessageSetFamilyPostNotify::clear_newpost() {
  newpost_ = 0u;
  _clear_bit(6);
}
inline ::google::protobuf::uint32 CMessageSetFamilyPostNotify::newpost() const {
  return newpost_;
}
inline void CMessageSetFamilyPostNotify::set_newpost(::google::protobuf::uint32 value) {
  _set_bit(6);
  newpost_ = value;
}

// -------------------------------------------------------------------

// CMessageLevelUPFamilyNotify

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageLevelUPFamilyNotify::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageLevelUPFamilyNotify::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageLevelUPFamilyNotify::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageLevelUPFamilyNotify::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 Level = 2;
inline bool CMessageLevelUPFamilyNotify::has_level() const {
  return _has_bit(1);
}
inline void CMessageLevelUPFamilyNotify::clear_level() {
  level_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageLevelUPFamilyNotify::level() const {
  return level_;
}
inline void CMessageLevelUPFamilyNotify::set_level(::google::protobuf::uint32 value) {
  _set_bit(1);
  level_ = value;
}

// optional uint32 Money = 3;
inline bool CMessageLevelUPFamilyNotify::has_money() const {
  return _has_bit(2);
}
inline void CMessageLevelUPFamilyNotify::clear_money() {
  money_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageLevelUPFamilyNotify::money() const {
  return money_;
}
inline void CMessageLevelUPFamilyNotify::set_money(::google::protobuf::uint32 value) {
  _set_bit(2);
  money_ = value;
}

// optional uint32 Glory = 4;
inline bool CMessageLevelUPFamilyNotify::has_glory() const {
  return _has_bit(3);
}
inline void CMessageLevelUPFamilyNotify::clear_glory() {
  glory_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessageLevelUPFamilyNotify::glory() const {
  return glory_;
}
inline void CMessageLevelUPFamilyNotify::set_glory(::google::protobuf::uint32 value) {
  _set_bit(3);
  glory_ = value;
}

// optional uint32 MaxFamilyMember = 5;
inline bool CMessageLevelUPFamilyNotify::has_maxfamilymember() const {
  return _has_bit(4);
}
inline void CMessageLevelUPFamilyNotify::clear_maxfamilymember() {
  maxfamilymember_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 CMessageLevelUPFamilyNotify::maxfamilymember() const {
  return maxfamilymember_;
}
inline void CMessageLevelUPFamilyNotify::set_maxfamilymember(::google::protobuf::uint32 value) {
  _set_bit(4);
  maxfamilymember_ = value;
}

// optional uint32 MaxPresterNum = 6;
inline bool CMessageLevelUPFamilyNotify::has_maxpresternum() const {
  return _has_bit(5);
}
inline void CMessageLevelUPFamilyNotify::clear_maxpresternum() {
  maxpresternum_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 CMessageLevelUPFamilyNotify::maxpresternum() const {
  return maxpresternum_;
}
inline void CMessageLevelUPFamilyNotify::set_maxpresternum(::google::protobuf::uint32 value) {
  _set_bit(5);
  maxpresternum_ = value;
}

// optional uint32 LevelMoney = 7;
inline bool CMessageLevelUPFamilyNotify::has_levelmoney() const {
  return _has_bit(6);
}
inline void CMessageLevelUPFamilyNotify::clear_levelmoney() {
  levelmoney_ = 0u;
  _clear_bit(6);
}
inline ::google::protobuf::uint32 CMessageLevelUPFamilyNotify::levelmoney() const {
  return levelmoney_;
}
inline void CMessageLevelUPFamilyNotify::set_levelmoney(::google::protobuf::uint32 value) {
  _set_bit(6);
  levelmoney_ = value;
}

// optional uint32 LevelGlory = 8;
inline bool CMessageLevelUPFamilyNotify::has_levelglory() const {
  return _has_bit(7);
}
inline void CMessageLevelUPFamilyNotify::clear_levelglory() {
  levelglory_ = 0u;
  _clear_bit(7);
}
inline ::google::protobuf::uint32 CMessageLevelUPFamilyNotify::levelglory() const {
  return levelglory_;
}
inline void CMessageLevelUPFamilyNotify::set_levelglory(::google::protobuf::uint32 value) {
  _set_bit(7);
  levelglory_ = value;
}

// optional uint32 Stability = 9;
inline bool CMessageLevelUPFamilyNotify::has_stability() const {
  return _has_bit(8);
}
inline void CMessageLevelUPFamilyNotify::clear_stability() {
  stability_ = 0u;
  _clear_bit(8);
}
inline ::google::protobuf::uint32 CMessageLevelUPFamilyNotify::stability() const {
  return stability_;
}
inline void CMessageLevelUPFamilyNotify::set_stability(::google::protobuf::uint32 value) {
  _set_bit(8);
  stability_ = value;
}

// optional uint32 ReduceStability = 10;
inline bool CMessageLevelUPFamilyNotify::has_reducestability() const {
  return _has_bit(9);
}
inline void CMessageLevelUPFamilyNotify::clear_reducestability() {
  reducestability_ = 0u;
  _clear_bit(9);
}
inline ::google::protobuf::uint32 CMessageLevelUPFamilyNotify::reducestability() const {
  return reducestability_;
}
inline void CMessageLevelUPFamilyNotify::set_reducestability(::google::protobuf::uint32 value) {
  _set_bit(9);
  reducestability_ = value;
}

// -------------------------------------------------------------------

// CMessageFamilyBidNpcRequest

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageFamilyBidNpcRequest::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageFamilyBidNpcRequest::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageFamilyBidNpcRequest::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageFamilyBidNpcRequest::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 NpcID = 2;
inline bool CMessageFamilyBidNpcRequest::has_npcid() const {
  return _has_bit(1);
}
inline void CMessageFamilyBidNpcRequest::clear_npcid() {
  npcid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageFamilyBidNpcRequest::npcid() const {
  return npcid_;
}
inline void CMessageFamilyBidNpcRequest::set_npcid(::google::protobuf::uint32 value) {
  _set_bit(1);
  npcid_ = value;
}

// optional uint32 Money = 3;
inline bool CMessageFamilyBidNpcRequest::has_money() const {
  return _has_bit(2);
}
inline void CMessageFamilyBidNpcRequest::clear_money() {
  money_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageFamilyBidNpcRequest::money() const {
  return money_;
}
inline void CMessageFamilyBidNpcRequest::set_money(::google::protobuf::uint32 value) {
  _set_bit(2);
  money_ = value;
}

// -------------------------------------------------------------------

// CMessageFamilyBidNpcResponse

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageFamilyBidNpcResponse::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageFamilyBidNpcResponse::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageFamilyBidNpcResponse::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageFamilyBidNpcResponse::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 Result = 2;
inline bool CMessageFamilyBidNpcResponse::has_result() const {
  return _has_bit(1);
}
inline void CMessageFamilyBidNpcResponse::clear_result() {
  result_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageFamilyBidNpcResponse::result() const {
  return result_;
}
inline void CMessageFamilyBidNpcResponse::set_result(::google::protobuf::uint32 value) {
  _set_bit(1);
  result_ = value;
}

// optional uint32 NpcID = 3;
inline bool CMessageFamilyBidNpcResponse::has_npcid() const {
  return _has_bit(2);
}
inline void CMessageFamilyBidNpcResponse::clear_npcid() {
  npcid_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageFamilyBidNpcResponse::npcid() const {
  return npcid_;
}
inline void CMessageFamilyBidNpcResponse::set_npcid(::google::protobuf::uint32 value) {
  _set_bit(2);
  npcid_ = value;
}

// optional uint32 Money = 4;
inline bool CMessageFamilyBidNpcResponse::has_money() const {
  return _has_bit(3);
}
inline void CMessageFamilyBidNpcResponse::clear_money() {
  money_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessageFamilyBidNpcResponse::money() const {
  return money_;
}
inline void CMessageFamilyBidNpcResponse::set_money(::google::protobuf::uint32 value) {
  _set_bit(3);
  money_ = value;
}

// -------------------------------------------------------------------

// CMessageMemberSubmitNotify

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageMemberSubmitNotify::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageMemberSubmitNotify::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageMemberSubmitNotify::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageMemberSubmitNotify::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 NpcID = 2;
inline bool CMessageMemberSubmitNotify::has_npcid() const {
  return _has_bit(1);
}
inline void CMessageMemberSubmitNotify::clear_npcid() {
  npcid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageMemberSubmitNotify::npcid() const {
  return npcid_;
}
inline void CMessageMemberSubmitNotify::set_npcid(::google::protobuf::uint32 value) {
  _set_bit(1);
  npcid_ = value;
}

// optional string FamilyName = 3;
inline bool CMessageMemberSubmitNotify::has_familyname() const {
  return _has_bit(2);
}
inline void CMessageMemberSubmitNotify::clear_familyname() {
  if (familyname_ != &_default_familyname_) {
    familyname_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& CMessageMemberSubmitNotify::familyname() const {
  return *familyname_;
}
inline void CMessageMemberSubmitNotify::set_familyname(const ::std::string& value) {
  _set_bit(2);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  familyname_->assign(value);
}
inline void CMessageMemberSubmitNotify::set_familyname(const char* value) {
  _set_bit(2);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  familyname_->assign(value);
}
inline void CMessageMemberSubmitNotify::set_familyname(const char* value, size_t size) {
  _set_bit(2);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  familyname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageMemberSubmitNotify::mutable_familyname() {
  _set_bit(2);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  return familyname_;
}

// optional uint32 First = 4;
inline bool CMessageMemberSubmitNotify::has_first() const {
  return _has_bit(3);
}
inline void CMessageMemberSubmitNotify::clear_first() {
  first_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessageMemberSubmitNotify::first() const {
  return first_;
}
inline void CMessageMemberSubmitNotify::set_first(::google::protobuf::uint32 value) {
  _set_bit(3);
  first_ = value;
}

// -------------------------------------------------------------------

// CMessageMemberSubmitRequest

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageMemberSubmitRequest::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageMemberSubmitRequest::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageMemberSubmitRequest::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageMemberSubmitRequest::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 NpcID = 2;
inline bool CMessageMemberSubmitRequest::has_npcid() const {
  return _has_bit(1);
}
inline void CMessageMemberSubmitRequest::clear_npcid() {
  npcid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageMemberSubmitRequest::npcid() const {
  return npcid_;
}
inline void CMessageMemberSubmitRequest::set_npcid(::google::protobuf::uint32 value) {
  _set_bit(1);
  npcid_ = value;
}

// repeated uint32 MemberID = 3;
inline int CMessageMemberSubmitRequest::memberid_size() const {
  return memberid_.size();
}
inline void CMessageMemberSubmitRequest::clear_memberid() {
  memberid_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMessageMemberSubmitRequest::memberid() const {
  return memberid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMessageMemberSubmitRequest::mutable_memberid() {
  return &memberid_;
}
inline ::google::protobuf::uint32 CMessageMemberSubmitRequest::memberid(int index) const {
  return memberid_.Get(index);
}
inline void CMessageMemberSubmitRequest::set_memberid(int index, ::google::protobuf::uint32 value) {
  memberid_.Set(index, value);
}
inline void CMessageMemberSubmitRequest::add_memberid(::google::protobuf::uint32 value) {
  memberid_.Add(value);
}

// -------------------------------------------------------------------

// CMessageMemberSubmitResponse

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageMemberSubmitResponse::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageMemberSubmitResponse::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageMemberSubmitResponse::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageMemberSubmitResponse::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 Result = 2;
inline bool CMessageMemberSubmitResponse::has_result() const {
  return _has_bit(1);
}
inline void CMessageMemberSubmitResponse::clear_result() {
  result_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageMemberSubmitResponse::result() const {
  return result_;
}
inline void CMessageMemberSubmitResponse::set_result(::google::protobuf::uint32 value) {
  _set_bit(1);
  result_ = value;
}

// optional uint32 NpcID = 3;
inline bool CMessageMemberSubmitResponse::has_npcid() const {
  return _has_bit(2);
}
inline void CMessageMemberSubmitResponse::clear_npcid() {
  npcid_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageMemberSubmitResponse::npcid() const {
  return npcid_;
}
inline void CMessageMemberSubmitResponse::set_npcid(::google::protobuf::uint32 value) {
  _set_bit(2);
  npcid_ = value;
}

// -------------------------------------------------------------------

// CMessageAbortNpcRequest

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageAbortNpcRequest::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageAbortNpcRequest::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageAbortNpcRequest::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageAbortNpcRequest::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 FamilyID = 2;
inline bool CMessageAbortNpcRequest::has_familyid() const {
  return _has_bit(1);
}
inline void CMessageAbortNpcRequest::clear_familyid() {
  familyid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageAbortNpcRequest::familyid() const {
  return familyid_;
}
inline void CMessageAbortNpcRequest::set_familyid(::google::protobuf::uint32 value) {
  _set_bit(1);
  familyid_ = value;
}

// optional uint32 NpcID = 3;
inline bool CMessageAbortNpcRequest::has_npcid() const {
  return _has_bit(2);
}
inline void CMessageAbortNpcRequest::clear_npcid() {
  npcid_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageAbortNpcRequest::npcid() const {
  return npcid_;
}
inline void CMessageAbortNpcRequest::set_npcid(::google::protobuf::uint32 value) {
  _set_bit(2);
  npcid_ = value;
}

// -------------------------------------------------------------------

// CMessageAbortNpcResponse

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageAbortNpcResponse::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageAbortNpcResponse::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageAbortNpcResponse::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageAbortNpcResponse::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 Result = 2;
inline bool CMessageAbortNpcResponse::has_result() const {
  return _has_bit(1);
}
inline void CMessageAbortNpcResponse::clear_result() {
  result_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageAbortNpcResponse::result() const {
  return result_;
}
inline void CMessageAbortNpcResponse::set_result(::google::protobuf::uint32 value) {
  _set_bit(1);
  result_ = value;
}

// optional uint32 FamilyID = 3;
inline bool CMessageAbortNpcResponse::has_familyid() const {
  return _has_bit(2);
}
inline void CMessageAbortNpcResponse::clear_familyid() {
  familyid_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageAbortNpcResponse::familyid() const {
  return familyid_;
}
inline void CMessageAbortNpcResponse::set_familyid(::google::protobuf::uint32 value) {
  _set_bit(2);
  familyid_ = value;
}

// optional uint32 NpcID = 4;
inline bool CMessageAbortNpcResponse::has_npcid() const {
  return _has_bit(3);
}
inline void CMessageAbortNpcResponse::clear_npcid() {
  npcid_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessageAbortNpcResponse::npcid() const {
  return npcid_;
}
inline void CMessageAbortNpcResponse::set_npcid(::google::protobuf::uint32 value) {
  _set_bit(3);
  npcid_ = value;
}

// -------------------------------------------------------------------

// CMessageBidInfoRequest

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageBidInfoRequest::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageBidInfoRequest::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageBidInfoRequest::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageBidInfoRequest::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 NpcID = 2;
inline bool CMessageBidInfoRequest::has_npcid() const {
  return _has_bit(1);
}
inline void CMessageBidInfoRequest::clear_npcid() {
  npcid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageBidInfoRequest::npcid() const {
  return npcid_;
}
inline void CMessageBidInfoRequest::set_npcid(::google::protobuf::uint32 value) {
  _set_bit(1);
  npcid_ = value;
}

// -------------------------------------------------------------------

// BidResult

// optional uint32 FamilyID = 1;
inline bool BidResult::has_familyid() const {
  return _has_bit(0);
}
inline void BidResult::clear_familyid() {
  familyid_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 BidResult::familyid() const {
  return familyid_;
}
inline void BidResult::set_familyid(::google::protobuf::uint32 value) {
  _set_bit(0);
  familyid_ = value;
}

// optional string FamilyName = 2;
inline bool BidResult::has_familyname() const {
  return _has_bit(1);
}
inline void BidResult::clear_familyname() {
  if (familyname_ != &_default_familyname_) {
    familyname_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& BidResult::familyname() const {
  return *familyname_;
}
inline void BidResult::set_familyname(const ::std::string& value) {
  _set_bit(1);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  familyname_->assign(value);
}
inline void BidResult::set_familyname(const char* value) {
  _set_bit(1);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  familyname_->assign(value);
}
inline void BidResult::set_familyname(const char* value, size_t size) {
  _set_bit(1);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  familyname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidResult::mutable_familyname() {
  _set_bit(1);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  return familyname_;
}

// optional uint32 Money = 3;
inline bool BidResult::has_money() const {
  return _has_bit(2);
}
inline void BidResult::clear_money() {
  money_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 BidResult::money() const {
  return money_;
}
inline void BidResult::set_money(::google::protobuf::uint32 value) {
  _set_bit(2);
  money_ = value;
}

// optional uint32 Win = 4;
inline bool BidResult::has_win() const {
  return _has_bit(3);
}
inline void BidResult::clear_win() {
  win_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 BidResult::win() const {
  return win_;
}
inline void BidResult::set_win(::google::protobuf::uint32 value) {
  _set_bit(3);
  win_ = value;
}

// optional uint32 Lost = 5;
inline bool BidResult::has_lost() const {
  return _has_bit(4);
}
inline void BidResult::clear_lost() {
  lost_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 BidResult::lost() const {
  return lost_;
}
inline void BidResult::set_lost(::google::protobuf::uint32 value) {
  _set_bit(4);
  lost_ = value;
}

// optional uint32 Country = 6;
inline bool BidResult::has_country() const {
  return _has_bit(5);
}
inline void BidResult::clear_country() {
  country_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 BidResult::country() const {
  return country_;
}
inline void BidResult::set_country(::google::protobuf::uint32 value) {
  _set_bit(5);
  country_ = value;
}

// optional uint32 Level = 7;
inline bool BidResult::has_level() const {
  return _has_bit(6);
}
inline void BidResult::clear_level() {
  level_ = 0u;
  _clear_bit(6);
}
inline ::google::protobuf::uint32 BidResult::level() const {
  return level_;
}
inline void BidResult::set_level(::google::protobuf::uint32 value) {
  _set_bit(6);
  level_ = value;
}

// -------------------------------------------------------------------

// CMessageBidInfoResponse

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageBidInfoResponse::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageBidInfoResponse::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageBidInfoResponse::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageBidInfoResponse::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 Result = 2;
inline bool CMessageBidInfoResponse::has_result() const {
  return _has_bit(1);
}
inline void CMessageBidInfoResponse::clear_result() {
  result_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageBidInfoResponse::result() const {
  return result_;
}
inline void CMessageBidInfoResponse::set_result(::google::protobuf::uint32 value) {
  _set_bit(1);
  result_ = value;
}

// optional uint32 NpcID = 3;
inline bool CMessageBidInfoResponse::has_npcid() const {
  return _has_bit(2);
}
inline void CMessageBidInfoResponse::clear_npcid() {
  npcid_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageBidInfoResponse::npcid() const {
  return npcid_;
}
inline void CMessageBidInfoResponse::set_npcid(::google::protobuf::uint32 value) {
  _set_bit(2);
  npcid_ = value;
}

// optional string FamilyName = 4;
inline bool CMessageBidInfoResponse::has_familyname() const {
  return _has_bit(3);
}
inline void CMessageBidInfoResponse::clear_familyname() {
  if (familyname_ != &_default_familyname_) {
    familyname_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& CMessageBidInfoResponse::familyname() const {
  return *familyname_;
}
inline void CMessageBidInfoResponse::set_familyname(const ::std::string& value) {
  _set_bit(3);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  familyname_->assign(value);
}
inline void CMessageBidInfoResponse::set_familyname(const char* value) {
  _set_bit(3);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  familyname_->assign(value);
}
inline void CMessageBidInfoResponse::set_familyname(const char* value, size_t size) {
  _set_bit(3);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  familyname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageBidInfoResponse::mutable_familyname() {
  _set_bit(3);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  return familyname_;
}

// repeated .BidResult BidData = 5;
inline int CMessageBidInfoResponse::biddata_size() const {
  return biddata_.size();
}
inline void CMessageBidInfoResponse::clear_biddata() {
  biddata_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::BidResult >&
CMessageBidInfoResponse::biddata() const {
  return biddata_;
}
inline ::google::protobuf::RepeatedPtrField< ::BidResult >*
CMessageBidInfoResponse::mutable_biddata() {
  return &biddata_;
}
inline const ::BidResult& CMessageBidInfoResponse::biddata(int index) const {
  return biddata_.Get(index);
}
inline ::BidResult* CMessageBidInfoResponse::mutable_biddata(int index) {
  return biddata_.Mutable(index);
}
inline ::BidResult* CMessageBidInfoResponse::add_biddata() {
  return biddata_.Add();
}

// -------------------------------------------------------------------

// CMessageFamilySubmitNotify

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageFamilySubmitNotify::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageFamilySubmitNotify::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageFamilySubmitNotify::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageFamilySubmitNotify::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 NpcID = 2;
inline bool CMessageFamilySubmitNotify::has_npcid() const {
  return _has_bit(1);
}
inline void CMessageFamilySubmitNotify::clear_npcid() {
  npcid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageFamilySubmitNotify::npcid() const {
  return npcid_;
}
inline void CMessageFamilySubmitNotify::set_npcid(::google::protobuf::uint32 value) {
  _set_bit(1);
  npcid_ = value;
}

// optional string FamilyName = 3;
inline bool CMessageFamilySubmitNotify::has_familyname() const {
  return _has_bit(2);
}
inline void CMessageFamilySubmitNotify::clear_familyname() {
  if (familyname_ != &_default_familyname_) {
    familyname_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& CMessageFamilySubmitNotify::familyname() const {
  return *familyname_;
}
inline void CMessageFamilySubmitNotify::set_familyname(const ::std::string& value) {
  _set_bit(2);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  familyname_->assign(value);
}
inline void CMessageFamilySubmitNotify::set_familyname(const char* value) {
  _set_bit(2);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  familyname_->assign(value);
}
inline void CMessageFamilySubmitNotify::set_familyname(const char* value, size_t size) {
  _set_bit(2);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  familyname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageFamilySubmitNotify::mutable_familyname() {
  _set_bit(2);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  return familyname_;
}

// repeated uint32 MemberID = 4;
inline int CMessageFamilySubmitNotify::memberid_size() const {
  return memberid_.size();
}
inline void CMessageFamilySubmitNotify::clear_memberid() {
  memberid_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMessageFamilySubmitNotify::memberid() const {
  return memberid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMessageFamilySubmitNotify::mutable_memberid() {
  return &memberid_;
}
inline ::google::protobuf::uint32 CMessageFamilySubmitNotify::memberid(int index) const {
  return memberid_.Get(index);
}
inline void CMessageFamilySubmitNotify::set_memberid(int index, ::google::protobuf::uint32 value) {
  memberid_.Set(index, value);
}
inline void CMessageFamilySubmitNotify::add_memberid(::google::protobuf::uint32 value) {
  memberid_.Add(value);
}

// optional uint32 ManagerID = 5;
inline bool CMessageFamilySubmitNotify::has_managerid() const {
  return _has_bit(4);
}
inline void CMessageFamilySubmitNotify::clear_managerid() {
  managerid_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 CMessageFamilySubmitNotify::managerid() const {
  return managerid_;
}
inline void CMessageFamilySubmitNotify::set_managerid(::google::protobuf::uint32 value) {
  _set_bit(4);
  managerid_ = value;
}

// optional string ManagerName = 6;
inline bool CMessageFamilySubmitNotify::has_managername() const {
  return _has_bit(5);
}
inline void CMessageFamilySubmitNotify::clear_managername() {
  if (managername_ != &_default_managername_) {
    managername_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& CMessageFamilySubmitNotify::managername() const {
  return *managername_;
}
inline void CMessageFamilySubmitNotify::set_managername(const ::std::string& value) {
  _set_bit(5);
  if (managername_ == &_default_managername_) {
    managername_ = new ::std::string;
  }
  managername_->assign(value);
}
inline void CMessageFamilySubmitNotify::set_managername(const char* value) {
  _set_bit(5);
  if (managername_ == &_default_managername_) {
    managername_ = new ::std::string;
  }
  managername_->assign(value);
}
inline void CMessageFamilySubmitNotify::set_managername(const char* value, size_t size) {
  _set_bit(5);
  if (managername_ == &_default_managername_) {
    managername_ = new ::std::string;
  }
  managername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageFamilySubmitNotify::mutable_managername() {
  _set_bit(5);
  if (managername_ == &_default_managername_) {
    managername_ = new ::std::string;
  }
  return managername_;
}

// -------------------------------------------------------------------

// CMessageBattleResultNotify

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageBattleResultNotify::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageBattleResultNotify::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageBattleResultNotify::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageBattleResultNotify::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 NpcID = 2;
inline bool CMessageBattleResultNotify::has_npcid() const {
  return _has_bit(1);
}
inline void CMessageBattleResultNotify::clear_npcid() {
  npcid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageBattleResultNotify::npcid() const {
  return npcid_;
}
inline void CMessageBattleResultNotify::set_npcid(::google::protobuf::uint32 value) {
  _set_bit(1);
  npcid_ = value;
}

// optional string AttFamilyName = 3;
inline bool CMessageBattleResultNotify::has_attfamilyname() const {
  return _has_bit(2);
}
inline void CMessageBattleResultNotify::clear_attfamilyname() {
  if (attfamilyname_ != &_default_attfamilyname_) {
    attfamilyname_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& CMessageBattleResultNotify::attfamilyname() const {
  return *attfamilyname_;
}
inline void CMessageBattleResultNotify::set_attfamilyname(const ::std::string& value) {
  _set_bit(2);
  if (attfamilyname_ == &_default_attfamilyname_) {
    attfamilyname_ = new ::std::string;
  }
  attfamilyname_->assign(value);
}
inline void CMessageBattleResultNotify::set_attfamilyname(const char* value) {
  _set_bit(2);
  if (attfamilyname_ == &_default_attfamilyname_) {
    attfamilyname_ = new ::std::string;
  }
  attfamilyname_->assign(value);
}
inline void CMessageBattleResultNotify::set_attfamilyname(const char* value, size_t size) {
  _set_bit(2);
  if (attfamilyname_ == &_default_attfamilyname_) {
    attfamilyname_ = new ::std::string;
  }
  attfamilyname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageBattleResultNotify::mutable_attfamilyname() {
  _set_bit(2);
  if (attfamilyname_ == &_default_attfamilyname_) {
    attfamilyname_ = new ::std::string;
  }
  return attfamilyname_;
}

// optional string DefFamilyName = 4;
inline bool CMessageBattleResultNotify::has_deffamilyname() const {
  return _has_bit(3);
}
inline void CMessageBattleResultNotify::clear_deffamilyname() {
  if (deffamilyname_ != &_default_deffamilyname_) {
    deffamilyname_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& CMessageBattleResultNotify::deffamilyname() const {
  return *deffamilyname_;
}
inline void CMessageBattleResultNotify::set_deffamilyname(const ::std::string& value) {
  _set_bit(3);
  if (deffamilyname_ == &_default_deffamilyname_) {
    deffamilyname_ = new ::std::string;
  }
  deffamilyname_->assign(value);
}
inline void CMessageBattleResultNotify::set_deffamilyname(const char* value) {
  _set_bit(3);
  if (deffamilyname_ == &_default_deffamilyname_) {
    deffamilyname_ = new ::std::string;
  }
  deffamilyname_->assign(value);
}
inline void CMessageBattleResultNotify::set_deffamilyname(const char* value, size_t size) {
  _set_bit(3);
  if (deffamilyname_ == &_default_deffamilyname_) {
    deffamilyname_ = new ::std::string;
  }
  deffamilyname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageBattleResultNotify::mutable_deffamilyname() {
  _set_bit(3);
  if (deffamilyname_ == &_default_deffamilyname_) {
    deffamilyname_ = new ::std::string;
  }
  return deffamilyname_;
}

// optional uint32 WinSide = 5;
inline bool CMessageBattleResultNotify::has_winside() const {
  return _has_bit(4);
}
inline void CMessageBattleResultNotify::clear_winside() {
  winside_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 CMessageBattleResultNotify::winside() const {
  return winside_;
}
inline void CMessageBattleResultNotify::set_winside(::google::protobuf::uint32 value) {
  _set_bit(4);
  winside_ = value;
}

// optional uint32 AttFamilyID = 6;
inline bool CMessageBattleResultNotify::has_attfamilyid() const {
  return _has_bit(5);
}
inline void CMessageBattleResultNotify::clear_attfamilyid() {
  attfamilyid_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 CMessageBattleResultNotify::attfamilyid() const {
  return attfamilyid_;
}
inline void CMessageBattleResultNotify::set_attfamilyid(::google::protobuf::uint32 value) {
  _set_bit(5);
  attfamilyid_ = value;
}

// optional uint32 DefFamilyID = 7;
inline bool CMessageBattleResultNotify::has_deffamilyid() const {
  return _has_bit(6);
}
inline void CMessageBattleResultNotify::clear_deffamilyid() {
  deffamilyid_ = 0u;
  _clear_bit(6);
}
inline ::google::protobuf::uint32 CMessageBattleResultNotify::deffamilyid() const {
  return deffamilyid_;
}
inline void CMessageBattleResultNotify::set_deffamilyid(::google::protobuf::uint32 value) {
  _set_bit(6);
  deffamilyid_ = value;
}

// -------------------------------------------------------------------

// CMessageFamilyPVPStarLevelUPNotify

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageFamilyPVPStarLevelUPNotify::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageFamilyPVPStarLevelUPNotify::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageFamilyPVPStarLevelUPNotify::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageFamilyPVPStarLevelUPNotify::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 PVPStarLevel = 2;
inline bool CMessageFamilyPVPStarLevelUPNotify::has_pvpstarlevel() const {
  return _has_bit(1);
}
inline void CMessageFamilyPVPStarLevelUPNotify::clear_pvpstarlevel() {
  pvpstarlevel_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageFamilyPVPStarLevelUPNotify::pvpstarlevel() const {
  return pvpstarlevel_;
}
inline void CMessageFamilyPVPStarLevelUPNotify::set_pvpstarlevel(::google::protobuf::uint32 value) {
  _set_bit(1);
  pvpstarlevel_ = value;
}

// -------------------------------------------------------------------

// CMessageMakeRoomRequest

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageMakeRoomRequest::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageMakeRoomRequest::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageMakeRoomRequest::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageMakeRoomRequest::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 Money = 2;
inline bool CMessageMakeRoomRequest::has_money() const {
  return _has_bit(1);
}
inline void CMessageMakeRoomRequest::clear_money() {
  money_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageMakeRoomRequest::money() const {
  return money_;
}
inline void CMessageMakeRoomRequest::set_money(::google::protobuf::uint32 value) {
  _set_bit(1);
  money_ = value;
}

// optional string Name = 3;
inline bool CMessageMakeRoomRequest::has_name() const {
  return _has_bit(2);
}
inline void CMessageMakeRoomRequest::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& CMessageMakeRoomRequest::name() const {
  return *name_;
}
inline void CMessageMakeRoomRequest::set_name(const ::std::string& value) {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CMessageMakeRoomRequest::set_name(const char* value) {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CMessageMakeRoomRequest::set_name(const char* value, size_t size) {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageMakeRoomRequest::mutable_name() {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// -------------------------------------------------------------------

// CMessageMakeRoomResponse

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageMakeRoomResponse::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageMakeRoomResponse::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageMakeRoomResponse::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageMakeRoomResponse::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 Result = 2;
inline bool CMessageMakeRoomResponse::has_result() const {
  return _has_bit(1);
}
inline void CMessageMakeRoomResponse::clear_result() {
  result_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageMakeRoomResponse::result() const {
  return result_;
}
inline void CMessageMakeRoomResponse::set_result(::google::protobuf::uint32 value) {
  _set_bit(1);
  result_ = value;
}

// optional string Name = 3;
inline bool CMessageMakeRoomResponse::has_name() const {
  return _has_bit(2);
}
inline void CMessageMakeRoomResponse::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& CMessageMakeRoomResponse::name() const {
  return *name_;
}
inline void CMessageMakeRoomResponse::set_name(const ::std::string& value) {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CMessageMakeRoomResponse::set_name(const char* value) {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CMessageMakeRoomResponse::set_name(const char* value, size_t size) {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageMakeRoomResponse::mutable_name() {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional uint32 Money = 4;
inline bool CMessageMakeRoomResponse::has_money() const {
  return _has_bit(3);
}
inline void CMessageMakeRoomResponse::clear_money() {
  money_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessageMakeRoomResponse::money() const {
  return money_;
}
inline void CMessageMakeRoomResponse::set_money(::google::protobuf::uint32 value) {
  _set_bit(3);
  money_ = value;
}

// -------------------------------------------------------------------

// CMessageChaRoomRequest

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageChaRoomRequest::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageChaRoomRequest::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageChaRoomRequest::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageChaRoomRequest::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 FamilyID = 2;
inline bool CMessageChaRoomRequest::has_familyid() const {
  return _has_bit(1);
}
inline void CMessageChaRoomRequest::clear_familyid() {
  familyid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageChaRoomRequest::familyid() const {
  return familyid_;
}
inline void CMessageChaRoomRequest::set_familyid(::google::protobuf::uint32 value) {
  _set_bit(1);
  familyid_ = value;
}

// -------------------------------------------------------------------

// CMessageChaRoomResponse

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageChaRoomResponse::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageChaRoomResponse::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageChaRoomResponse::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageChaRoomResponse::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 Result = 2;
inline bool CMessageChaRoomResponse::has_result() const {
  return _has_bit(1);
}
inline void CMessageChaRoomResponse::clear_result() {
  result_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageChaRoomResponse::result() const {
  return result_;
}
inline void CMessageChaRoomResponse::set_result(::google::protobuf::uint32 value) {
  _set_bit(1);
  result_ = value;
}

// optional uint32 FamilyID = 3;
inline bool CMessageChaRoomResponse::has_familyid() const {
  return _has_bit(2);
}
inline void CMessageChaRoomResponse::clear_familyid() {
  familyid_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageChaRoomResponse::familyid() const {
  return familyid_;
}
inline void CMessageChaRoomResponse::set_familyid(::google::protobuf::uint32 value) {
  _set_bit(2);
  familyid_ = value;
}

// -------------------------------------------------------------------

// CMessageAgreeBattleRequest

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageAgreeBattleRequest::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageAgreeBattleRequest::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageAgreeBattleRequest::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageAgreeBattleRequest::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 FamilyID = 2;
inline bool CMessageAgreeBattleRequest::has_familyid() const {
  return _has_bit(1);
}
inline void CMessageAgreeBattleRequest::clear_familyid() {
  familyid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageAgreeBattleRequest::familyid() const {
  return familyid_;
}
inline void CMessageAgreeBattleRequest::set_familyid(::google::protobuf::uint32 value) {
  _set_bit(1);
  familyid_ = value;
}

// -------------------------------------------------------------------

// CMessageAgreeBattleResponse

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageAgreeBattleResponse::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageAgreeBattleResponse::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageAgreeBattleResponse::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageAgreeBattleResponse::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 Result = 2;
inline bool CMessageAgreeBattleResponse::has_result() const {
  return _has_bit(1);
}
inline void CMessageAgreeBattleResponse::clear_result() {
  result_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageAgreeBattleResponse::result() const {
  return result_;
}
inline void CMessageAgreeBattleResponse::set_result(::google::protobuf::uint32 value) {
  _set_bit(1);
  result_ = value;
}

// optional uint32 FamilyID = 3;
inline bool CMessageAgreeBattleResponse::has_familyid() const {
  return _has_bit(2);
}
inline void CMessageAgreeBattleResponse::clear_familyid() {
  familyid_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageAgreeBattleResponse::familyid() const {
  return familyid_;
}
inline void CMessageAgreeBattleResponse::set_familyid(::google::protobuf::uint32 value) {
  _set_bit(2);
  familyid_ = value;
}

// -------------------------------------------------------------------

// CMessageQueryAllRoomRequest

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageQueryAllRoomRequest::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageQueryAllRoomRequest::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageQueryAllRoomRequest::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageQueryAllRoomRequest::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// -------------------------------------------------------------------

// AllRoomInfo

// optional uint32 FamilyID = 1;
inline bool AllRoomInfo::has_familyid() const {
  return _has_bit(0);
}
inline void AllRoomInfo::clear_familyid() {
  familyid_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 AllRoomInfo::familyid() const {
  return familyid_;
}
inline void AllRoomInfo::set_familyid(::google::protobuf::uint32 value) {
  _set_bit(0);
  familyid_ = value;
}

// optional string FamilyName = 2;
inline bool AllRoomInfo::has_familyname() const {
  return _has_bit(1);
}
inline void AllRoomInfo::clear_familyname() {
  if (familyname_ != &_default_familyname_) {
    familyname_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& AllRoomInfo::familyname() const {
  return *familyname_;
}
inline void AllRoomInfo::set_familyname(const ::std::string& value) {
  _set_bit(1);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  familyname_->assign(value);
}
inline void AllRoomInfo::set_familyname(const char* value) {
  _set_bit(1);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  familyname_->assign(value);
}
inline void AllRoomInfo::set_familyname(const char* value, size_t size) {
  _set_bit(1);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  familyname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AllRoomInfo::mutable_familyname() {
  _set_bit(1);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  return familyname_;
}

// optional uint32 Money = 3;
inline bool AllRoomInfo::has_money() const {
  return _has_bit(2);
}
inline void AllRoomInfo::clear_money() {
  money_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 AllRoomInfo::money() const {
  return money_;
}
inline void AllRoomInfo::set_money(::google::protobuf::uint32 value) {
  _set_bit(2);
  money_ = value;
}

// optional string RoomName = 4;
inline bool AllRoomInfo::has_roomname() const {
  return _has_bit(3);
}
inline void AllRoomInfo::clear_roomname() {
  if (roomname_ != &_default_roomname_) {
    roomname_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& AllRoomInfo::roomname() const {
  return *roomname_;
}
inline void AllRoomInfo::set_roomname(const ::std::string& value) {
  _set_bit(3);
  if (roomname_ == &_default_roomname_) {
    roomname_ = new ::std::string;
  }
  roomname_->assign(value);
}
inline void AllRoomInfo::set_roomname(const char* value) {
  _set_bit(3);
  if (roomname_ == &_default_roomname_) {
    roomname_ = new ::std::string;
  }
  roomname_->assign(value);
}
inline void AllRoomInfo::set_roomname(const char* value, size_t size) {
  _set_bit(3);
  if (roomname_ == &_default_roomname_) {
    roomname_ = new ::std::string;
  }
  roomname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AllRoomInfo::mutable_roomname() {
  _set_bit(3);
  if (roomname_ == &_default_roomname_) {
    roomname_ = new ::std::string;
  }
  return roomname_;
}

// optional uint32 Win = 5;
inline bool AllRoomInfo::has_win() const {
  return _has_bit(4);
}
inline void AllRoomInfo::clear_win() {
  win_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 AllRoomInfo::win() const {
  return win_;
}
inline void AllRoomInfo::set_win(::google::protobuf::uint32 value) {
  _set_bit(4);
  win_ = value;
}

// optional uint32 Lost = 6;
inline bool AllRoomInfo::has_lost() const {
  return _has_bit(5);
}
inline void AllRoomInfo::clear_lost() {
  lost_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 AllRoomInfo::lost() const {
  return lost_;
}
inline void AllRoomInfo::set_lost(::google::protobuf::uint32 value) {
  _set_bit(5);
  lost_ = value;
}

// optional string AttName = 7;
inline bool AllRoomInfo::has_attname() const {
  return _has_bit(6);
}
inline void AllRoomInfo::clear_attname() {
  if (attname_ != &_default_attname_) {
    attname_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& AllRoomInfo::attname() const {
  return *attname_;
}
inline void AllRoomInfo::set_attname(const ::std::string& value) {
  _set_bit(6);
  if (attname_ == &_default_attname_) {
    attname_ = new ::std::string;
  }
  attname_->assign(value);
}
inline void AllRoomInfo::set_attname(const char* value) {
  _set_bit(6);
  if (attname_ == &_default_attname_) {
    attname_ = new ::std::string;
  }
  attname_->assign(value);
}
inline void AllRoomInfo::set_attname(const char* value, size_t size) {
  _set_bit(6);
  if (attname_ == &_default_attname_) {
    attname_ = new ::std::string;
  }
  attname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AllRoomInfo::mutable_attname() {
  _set_bit(6);
  if (attname_ == &_default_attname_) {
    attname_ = new ::std::string;
  }
  return attname_;
}

// optional uint32 State = 8;
inline bool AllRoomInfo::has_state() const {
  return _has_bit(7);
}
inline void AllRoomInfo::clear_state() {
  state_ = 0u;
  _clear_bit(7);
}
inline ::google::protobuf::uint32 AllRoomInfo::state() const {
  return state_;
}
inline void AllRoomInfo::set_state(::google::protobuf::uint32 value) {
  _set_bit(7);
  state_ = value;
}

// -------------------------------------------------------------------

// CMessageQueryAllRoomResponse

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageQueryAllRoomResponse::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageQueryAllRoomResponse::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageQueryAllRoomResponse::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageQueryAllRoomResponse::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 Result = 2;
inline bool CMessageQueryAllRoomResponse::has_result() const {
  return _has_bit(1);
}
inline void CMessageQueryAllRoomResponse::clear_result() {
  result_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageQueryAllRoomResponse::result() const {
  return result_;
}
inline void CMessageQueryAllRoomResponse::set_result(::google::protobuf::uint32 value) {
  _set_bit(1);
  result_ = value;
}

// repeated .AllRoomInfo RoomData = 3;
inline int CMessageQueryAllRoomResponse::roomdata_size() const {
  return roomdata_.size();
}
inline void CMessageQueryAllRoomResponse::clear_roomdata() {
  roomdata_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::AllRoomInfo >&
CMessageQueryAllRoomResponse::roomdata() const {
  return roomdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::AllRoomInfo >*
CMessageQueryAllRoomResponse::mutable_roomdata() {
  return &roomdata_;
}
inline const ::AllRoomInfo& CMessageQueryAllRoomResponse::roomdata(int index) const {
  return roomdata_.Get(index);
}
inline ::AllRoomInfo* CMessageQueryAllRoomResponse::mutable_roomdata(int index) {
  return roomdata_.Mutable(index);
}
inline ::AllRoomInfo* CMessageQueryAllRoomResponse::add_roomdata() {
  return roomdata_.Add();
}

// -------------------------------------------------------------------

// CMessageQueryMyRoomRequest

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageQueryMyRoomRequest::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageQueryMyRoomRequest::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageQueryMyRoomRequest::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageQueryMyRoomRequest::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// -------------------------------------------------------------------

// MyRoomInfo

// optional uint32 FamilyID = 1;
inline bool MyRoomInfo::has_familyid() const {
  return _has_bit(0);
}
inline void MyRoomInfo::clear_familyid() {
  familyid_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 MyRoomInfo::familyid() const {
  return familyid_;
}
inline void MyRoomInfo::set_familyid(::google::protobuf::uint32 value) {
  _set_bit(0);
  familyid_ = value;
}

// optional string FamilyName = 2;
inline bool MyRoomInfo::has_familyname() const {
  return _has_bit(1);
}
inline void MyRoomInfo::clear_familyname() {
  if (familyname_ != &_default_familyname_) {
    familyname_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& MyRoomInfo::familyname() const {
  return *familyname_;
}
inline void MyRoomInfo::set_familyname(const ::std::string& value) {
  _set_bit(1);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  familyname_->assign(value);
}
inline void MyRoomInfo::set_familyname(const char* value) {
  _set_bit(1);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  familyname_->assign(value);
}
inline void MyRoomInfo::set_familyname(const char* value, size_t size) {
  _set_bit(1);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  familyname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MyRoomInfo::mutable_familyname() {
  _set_bit(1);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  return familyname_;
}

// optional uint32 Win = 3;
inline bool MyRoomInfo::has_win() const {
  return _has_bit(2);
}
inline void MyRoomInfo::clear_win() {
  win_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 MyRoomInfo::win() const {
  return win_;
}
inline void MyRoomInfo::set_win(::google::protobuf::uint32 value) {
  _set_bit(2);
  win_ = value;
}

// optional uint32 Lost = 4;
inline bool MyRoomInfo::has_lost() const {
  return _has_bit(3);
}
inline void MyRoomInfo::clear_lost() {
  lost_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 MyRoomInfo::lost() const {
  return lost_;
}
inline void MyRoomInfo::set_lost(::google::protobuf::uint32 value) {
  _set_bit(3);
  lost_ = value;
}

// -------------------------------------------------------------------

// CMessageQueryMyRoomResponse

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageQueryMyRoomResponse::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageQueryMyRoomResponse::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageQueryMyRoomResponse::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageQueryMyRoomResponse::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 Result = 2;
inline bool CMessageQueryMyRoomResponse::has_result() const {
  return _has_bit(1);
}
inline void CMessageQueryMyRoomResponse::clear_result() {
  result_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageQueryMyRoomResponse::result() const {
  return result_;
}
inline void CMessageQueryMyRoomResponse::set_result(::google::protobuf::uint32 value) {
  _set_bit(1);
  result_ = value;
}

// optional uint32 Money = 3;
inline bool CMessageQueryMyRoomResponse::has_money() const {
  return _has_bit(2);
}
inline void CMessageQueryMyRoomResponse::clear_money() {
  money_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageQueryMyRoomResponse::money() const {
  return money_;
}
inline void CMessageQueryMyRoomResponse::set_money(::google::protobuf::uint32 value) {
  _set_bit(2);
  money_ = value;
}

// repeated .MyRoomInfo RoomData = 4;
inline int CMessageQueryMyRoomResponse::roomdata_size() const {
  return roomdata_.size();
}
inline void CMessageQueryMyRoomResponse::clear_roomdata() {
  roomdata_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::MyRoomInfo >&
CMessageQueryMyRoomResponse::roomdata() const {
  return roomdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::MyRoomInfo >*
CMessageQueryMyRoomResponse::mutable_roomdata() {
  return &roomdata_;
}
inline const ::MyRoomInfo& CMessageQueryMyRoomResponse::roomdata(int index) const {
  return roomdata_.Get(index);
}
inline ::MyRoomInfo* CMessageQueryMyRoomResponse::mutable_roomdata(int index) {
  return roomdata_.Mutable(index);
}
inline ::MyRoomInfo* CMessageQueryMyRoomResponse::add_roomdata() {
  return roomdata_.Add();
}

// optional string Name = 5;
inline bool CMessageQueryMyRoomResponse::has_name() const {
  return _has_bit(4);
}
inline void CMessageQueryMyRoomResponse::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& CMessageQueryMyRoomResponse::name() const {
  return *name_;
}
inline void CMessageQueryMyRoomResponse::set_name(const ::std::string& value) {
  _set_bit(4);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CMessageQueryMyRoomResponse::set_name(const char* value) {
  _set_bit(4);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CMessageQueryMyRoomResponse::set_name(const char* value, size_t size) {
  _set_bit(4);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageQueryMyRoomResponse::mutable_name() {
  _set_bit(4);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// -------------------------------------------------------------------

// CMessageQueryMyChaRequest

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageQueryMyChaRequest::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageQueryMyChaRequest::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageQueryMyChaRequest::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageQueryMyChaRequest::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// -------------------------------------------------------------------

// MyChaInfo

// optional uint32 FamilyID = 1;
inline bool MyChaInfo::has_familyid() const {
  return _has_bit(0);
}
inline void MyChaInfo::clear_familyid() {
  familyid_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 MyChaInfo::familyid() const {
  return familyid_;
}
inline void MyChaInfo::set_familyid(::google::protobuf::uint32 value) {
  _set_bit(0);
  familyid_ = value;
}

// optional string FamilyName = 2;
inline bool MyChaInfo::has_familyname() const {
  return _has_bit(1);
}
inline void MyChaInfo::clear_familyname() {
  if (familyname_ != &_default_familyname_) {
    familyname_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& MyChaInfo::familyname() const {
  return *familyname_;
}
inline void MyChaInfo::set_familyname(const ::std::string& value) {
  _set_bit(1);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  familyname_->assign(value);
}
inline void MyChaInfo::set_familyname(const char* value) {
  _set_bit(1);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  familyname_->assign(value);
}
inline void MyChaInfo::set_familyname(const char* value, size_t size) {
  _set_bit(1);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  familyname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MyChaInfo::mutable_familyname() {
  _set_bit(1);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  return familyname_;
}

// optional uint32 Money = 3;
inline bool MyChaInfo::has_money() const {
  return _has_bit(2);
}
inline void MyChaInfo::clear_money() {
  money_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 MyChaInfo::money() const {
  return money_;
}
inline void MyChaInfo::set_money(::google::protobuf::uint32 value) {
  _set_bit(2);
  money_ = value;
}

// optional string RoomName = 4;
inline bool MyChaInfo::has_roomname() const {
  return _has_bit(3);
}
inline void MyChaInfo::clear_roomname() {
  if (roomname_ != &_default_roomname_) {
    roomname_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& MyChaInfo::roomname() const {
  return *roomname_;
}
inline void MyChaInfo::set_roomname(const ::std::string& value) {
  _set_bit(3);
  if (roomname_ == &_default_roomname_) {
    roomname_ = new ::std::string;
  }
  roomname_->assign(value);
}
inline void MyChaInfo::set_roomname(const char* value) {
  _set_bit(3);
  if (roomname_ == &_default_roomname_) {
    roomname_ = new ::std::string;
  }
  roomname_->assign(value);
}
inline void MyChaInfo::set_roomname(const char* value, size_t size) {
  _set_bit(3);
  if (roomname_ == &_default_roomname_) {
    roomname_ = new ::std::string;
  }
  roomname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MyChaInfo::mutable_roomname() {
  _set_bit(3);
  if (roomname_ == &_default_roomname_) {
    roomname_ = new ::std::string;
  }
  return roomname_;
}

// optional uint32 Win = 5;
inline bool MyChaInfo::has_win() const {
  return _has_bit(4);
}
inline void MyChaInfo::clear_win() {
  win_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 MyChaInfo::win() const {
  return win_;
}
inline void MyChaInfo::set_win(::google::protobuf::uint32 value) {
  _set_bit(4);
  win_ = value;
}

// optional uint32 Lost = 6;
inline bool MyChaInfo::has_lost() const {
  return _has_bit(5);
}
inline void MyChaInfo::clear_lost() {
  lost_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 MyChaInfo::lost() const {
  return lost_;
}
inline void MyChaInfo::set_lost(::google::protobuf::uint32 value) {
  _set_bit(5);
  lost_ = value;
}

// -------------------------------------------------------------------

// CMessageQueryMyChaResponse

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageQueryMyChaResponse::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageQueryMyChaResponse::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageQueryMyChaResponse::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageQueryMyChaResponse::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 Result = 2;
inline bool CMessageQueryMyChaResponse::has_result() const {
  return _has_bit(1);
}
inline void CMessageQueryMyChaResponse::clear_result() {
  result_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageQueryMyChaResponse::result() const {
  return result_;
}
inline void CMessageQueryMyChaResponse::set_result(::google::protobuf::uint32 value) {
  _set_bit(1);
  result_ = value;
}

// repeated .MyChaInfo RoomData = 3;
inline int CMessageQueryMyChaResponse::roomdata_size() const {
  return roomdata_.size();
}
inline void CMessageQueryMyChaResponse::clear_roomdata() {
  roomdata_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::MyChaInfo >&
CMessageQueryMyChaResponse::roomdata() const {
  return roomdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::MyChaInfo >*
CMessageQueryMyChaResponse::mutable_roomdata() {
  return &roomdata_;
}
inline const ::MyChaInfo& CMessageQueryMyChaResponse::roomdata(int index) const {
  return roomdata_.Get(index);
}
inline ::MyChaInfo* CMessageQueryMyChaResponse::mutable_roomdata(int index) {
  return roomdata_.Mutable(index);
}
inline ::MyChaInfo* CMessageQueryMyChaResponse::add_roomdata() {
  return roomdata_.Add();
}

// -------------------------------------------------------------------

// CMessageAbortRoomRequest

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageAbortRoomRequest::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageAbortRoomRequest::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageAbortRoomRequest::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageAbortRoomRequest::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// -------------------------------------------------------------------

// CMessageAbortRoomResponse

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageAbortRoomResponse::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageAbortRoomResponse::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageAbortRoomResponse::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageAbortRoomResponse::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 Result = 2;
inline bool CMessageAbortRoomResponse::has_result() const {
  return _has_bit(1);
}
inline void CMessageAbortRoomResponse::clear_result() {
  result_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageAbortRoomResponse::result() const {
  return result_;
}
inline void CMessageAbortRoomResponse::set_result(::google::protobuf::uint32 value) {
  _set_bit(1);
  result_ = value;
}

// -------------------------------------------------------------------

// CMessageAbortChaRequest

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageAbortChaRequest::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageAbortChaRequest::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageAbortChaRequest::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageAbortChaRequest::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 FamilyID = 2;
inline bool CMessageAbortChaRequest::has_familyid() const {
  return _has_bit(1);
}
inline void CMessageAbortChaRequest::clear_familyid() {
  familyid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageAbortChaRequest::familyid() const {
  return familyid_;
}
inline void CMessageAbortChaRequest::set_familyid(::google::protobuf::uint32 value) {
  _set_bit(1);
  familyid_ = value;
}

// -------------------------------------------------------------------

// CMessageAbortChaResponse

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageAbortChaResponse::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageAbortChaResponse::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageAbortChaResponse::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageAbortChaResponse::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 Result = 2;
inline bool CMessageAbortChaResponse::has_result() const {
  return _has_bit(1);
}
inline void CMessageAbortChaResponse::clear_result() {
  result_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageAbortChaResponse::result() const {
  return result_;
}
inline void CMessageAbortChaResponse::set_result(::google::protobuf::uint32 value) {
  _set_bit(1);
  result_ = value;
}

// optional uint32 FamilyID = 3;
inline bool CMessageAbortChaResponse::has_familyid() const {
  return _has_bit(2);
}
inline void CMessageAbortChaResponse::clear_familyid() {
  familyid_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageAbortChaResponse::familyid() const {
  return familyid_;
}
inline void CMessageAbortChaResponse::set_familyid(::google::protobuf::uint32 value) {
  _set_bit(2);
  familyid_ = value;
}

// -------------------------------------------------------------------

// CMessageContributeFamilyMoneyNotify

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageContributeFamilyMoneyNotify::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageContributeFamilyMoneyNotify::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageContributeFamilyMoneyNotify::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageContributeFamilyMoneyNotify::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 FamilyMoney = 2;
inline bool CMessageContributeFamilyMoneyNotify::has_familymoney() const {
  return _has_bit(1);
}
inline void CMessageContributeFamilyMoneyNotify::clear_familymoney() {
  familymoney_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageContributeFamilyMoneyNotify::familymoney() const {
  return familymoney_;
}
inline void CMessageContributeFamilyMoneyNotify::set_familymoney(::google::protobuf::uint32 value) {
  _set_bit(1);
  familymoney_ = value;
}

// optional string MemberName = 3;
inline bool CMessageContributeFamilyMoneyNotify::has_membername() const {
  return _has_bit(2);
}
inline void CMessageContributeFamilyMoneyNotify::clear_membername() {
  if (membername_ != &_default_membername_) {
    membername_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& CMessageContributeFamilyMoneyNotify::membername() const {
  return *membername_;
}
inline void CMessageContributeFamilyMoneyNotify::set_membername(const ::std::string& value) {
  _set_bit(2);
  if (membername_ == &_default_membername_) {
    membername_ = new ::std::string;
  }
  membername_->assign(value);
}
inline void CMessageContributeFamilyMoneyNotify::set_membername(const char* value) {
  _set_bit(2);
  if (membername_ == &_default_membername_) {
    membername_ = new ::std::string;
  }
  membername_->assign(value);
}
inline void CMessageContributeFamilyMoneyNotify::set_membername(const char* value, size_t size) {
  _set_bit(2);
  if (membername_ == &_default_membername_) {
    membername_ = new ::std::string;
  }
  membername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageContributeFamilyMoneyNotify::mutable_membername() {
  _set_bit(2);
  if (membername_ == &_default_membername_) {
    membername_ = new ::std::string;
  }
  return membername_;
}

// optional uint32 MemberID = 4;
inline bool CMessageContributeFamilyMoneyNotify::has_memberid() const {
  return _has_bit(3);
}
inline void CMessageContributeFamilyMoneyNotify::clear_memberid() {
  memberid_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessageContributeFamilyMoneyNotify::memberid() const {
  return memberid_;
}
inline void CMessageContributeFamilyMoneyNotify::set_memberid(::google::protobuf::uint32 value) {
  _set_bit(3);
  memberid_ = value;
}

// optional uint32 Value = 5;
inline bool CMessageContributeFamilyMoneyNotify::has_value() const {
  return _has_bit(4);
}
inline void CMessageContributeFamilyMoneyNotify::clear_value() {
  value_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 CMessageContributeFamilyMoneyNotify::value() const {
  return value_;
}
inline void CMessageContributeFamilyMoneyNotify::set_value(::google::protobuf::uint32 value) {
  _set_bit(4);
  value_ = value;
}

// -------------------------------------------------------------------

// CMessageFamilyMoneyChangedNotify

// optional uint32 Money = 1;
inline bool CMessageFamilyMoneyChangedNotify::has_money() const {
  return _has_bit(0);
}
inline void CMessageFamilyMoneyChangedNotify::clear_money() {
  money_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageFamilyMoneyChangedNotify::money() const {
  return money_;
}
inline void CMessageFamilyMoneyChangedNotify::set_money(::google::protobuf::uint32 value) {
  _set_bit(0);
  money_ = value;
}

// optional uint32 RoleID = 2;
inline bool CMessageFamilyMoneyChangedNotify::has_roleid() const {
  return _has_bit(1);
}
inline void CMessageFamilyMoneyChangedNotify::clear_roleid() {
  roleid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageFamilyMoneyChangedNotify::roleid() const {
  return roleid_;
}
inline void CMessageFamilyMoneyChangedNotify::set_roleid(::google::protobuf::uint32 value) {
  _set_bit(1);
  roleid_ = value;
}

// optional uint32 Reason = 3;
inline bool CMessageFamilyMoneyChangedNotify::has_reason() const {
  return _has_bit(2);
}
inline void CMessageFamilyMoneyChangedNotify::clear_reason() {
  reason_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageFamilyMoneyChangedNotify::reason() const {
  return reason_;
}
inline void CMessageFamilyMoneyChangedNotify::set_reason(::google::protobuf::uint32 value) {
  _set_bit(2);
  reason_ = value;
}

// optional string RoleName = 4;
inline bool CMessageFamilyMoneyChangedNotify::has_rolename() const {
  return _has_bit(3);
}
inline void CMessageFamilyMoneyChangedNotify::clear_rolename() {
  if (rolename_ != &_default_rolename_) {
    rolename_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& CMessageFamilyMoneyChangedNotify::rolename() const {
  return *rolename_;
}
inline void CMessageFamilyMoneyChangedNotify::set_rolename(const ::std::string& value) {
  _set_bit(3);
  if (rolename_ == &_default_rolename_) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void CMessageFamilyMoneyChangedNotify::set_rolename(const char* value) {
  _set_bit(3);
  if (rolename_ == &_default_rolename_) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void CMessageFamilyMoneyChangedNotify::set_rolename(const char* value, size_t size) {
  _set_bit(3);
  if (rolename_ == &_default_rolename_) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageFamilyMoneyChangedNotify::mutable_rolename() {
  _set_bit(3);
  if (rolename_ == &_default_rolename_) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}

// optional int32 Value = 5;
inline bool CMessageFamilyMoneyChangedNotify::has_value() const {
  return _has_bit(4);
}
inline void CMessageFamilyMoneyChangedNotify::clear_value() {
  value_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 CMessageFamilyMoneyChangedNotify::value() const {
  return value_;
}
inline void CMessageFamilyMoneyChangedNotify::set_value(::google::protobuf::int32 value) {
  _set_bit(4);
  value_ = value;
}

// -------------------------------------------------------------------

// CMessageUseFamilyExpCardNotify

// optional string ManagerName = 1;
inline bool CMessageUseFamilyExpCardNotify::has_managername() const {
  return _has_bit(0);
}
inline void CMessageUseFamilyExpCardNotify::clear_managername() {
  if (managername_ != &_default_managername_) {
    managername_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& CMessageUseFamilyExpCardNotify::managername() const {
  return *managername_;
}
inline void CMessageUseFamilyExpCardNotify::set_managername(const ::std::string& value) {
  _set_bit(0);
  if (managername_ == &_default_managername_) {
    managername_ = new ::std::string;
  }
  managername_->assign(value);
}
inline void CMessageUseFamilyExpCardNotify::set_managername(const char* value) {
  _set_bit(0);
  if (managername_ == &_default_managername_) {
    managername_ = new ::std::string;
  }
  managername_->assign(value);
}
inline void CMessageUseFamilyExpCardNotify::set_managername(const char* value, size_t size) {
  _set_bit(0);
  if (managername_ == &_default_managername_) {
    managername_ = new ::std::string;
  }
  managername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageUseFamilyExpCardNotify::mutable_managername() {
  _set_bit(0);
  if (managername_ == &_default_managername_) {
    managername_ = new ::std::string;
  }
  return managername_;
}

// optional uint32 ManagerID = 2;
inline bool CMessageUseFamilyExpCardNotify::has_managerid() const {
  return _has_bit(1);
}
inline void CMessageUseFamilyExpCardNotify::clear_managerid() {
  managerid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageUseFamilyExpCardNotify::managerid() const {
  return managerid_;
}
inline void CMessageUseFamilyExpCardNotify::set_managerid(::google::protobuf::uint32 value) {
  _set_bit(1);
  managerid_ = value;
}

// optional uint32 LineID = 3;
inline bool CMessageUseFamilyExpCardNotify::has_lineid() const {
  return _has_bit(2);
}
inline void CMessageUseFamilyExpCardNotify::clear_lineid() {
  lineid_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageUseFamilyExpCardNotify::lineid() const {
  return lineid_;
}
inline void CMessageUseFamilyExpCardNotify::set_lineid(::google::protobuf::uint32 value) {
  _set_bit(2);
  lineid_ = value;
}

// optional uint32 MapID = 4;
inline bool CMessageUseFamilyExpCardNotify::has_mapid() const {
  return _has_bit(3);
}
inline void CMessageUseFamilyExpCardNotify::clear_mapid() {
  mapid_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessageUseFamilyExpCardNotify::mapid() const {
  return mapid_;
}
inline void CMessageUseFamilyExpCardNotify::set_mapid(::google::protobuf::uint32 value) {
  _set_bit(3);
  mapid_ = value;
}

// optional uint32 PosX = 5;
inline bool CMessageUseFamilyExpCardNotify::has_posx() const {
  return _has_bit(4);
}
inline void CMessageUseFamilyExpCardNotify::clear_posx() {
  posx_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 CMessageUseFamilyExpCardNotify::posx() const {
  return posx_;
}
inline void CMessageUseFamilyExpCardNotify::set_posx(::google::protobuf::uint32 value) {
  _set_bit(4);
  posx_ = value;
}

// optional uint32 PosY = 6;
inline bool CMessageUseFamilyExpCardNotify::has_posy() const {
  return _has_bit(5);
}
inline void CMessageUseFamilyExpCardNotify::clear_posy() {
  posy_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 CMessageUseFamilyExpCardNotify::posy() const {
  return posy_;
}
inline void CMessageUseFamilyExpCardNotify::set_posy(::google::protobuf::uint32 value) {
  _set_bit(5);
  posy_ = value;
}

// -------------------------------------------------------------------

// CMessageStartFamilyBossRequest

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageStartFamilyBossRequest::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageStartFamilyBossRequest::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageStartFamilyBossRequest::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageStartFamilyBossRequest::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 EnityID = 2;
inline bool CMessageStartFamilyBossRequest::has_enityid() const {
  return _has_bit(1);
}
inline void CMessageStartFamilyBossRequest::clear_enityid() {
  enityid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageStartFamilyBossRequest::enityid() const {
  return enityid_;
}
inline void CMessageStartFamilyBossRequest::set_enityid(::google::protobuf::uint32 value) {
  _set_bit(1);
  enityid_ = value;
}

// optional uint32 RepetionLevel = 3;
inline bool CMessageStartFamilyBossRequest::has_repetionlevel() const {
  return _has_bit(2);
}
inline void CMessageStartFamilyBossRequest::clear_repetionlevel() {
  repetionlevel_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageStartFamilyBossRequest::repetionlevel() const {
  return repetionlevel_;
}
inline void CMessageStartFamilyBossRequest::set_repetionlevel(::google::protobuf::uint32 value) {
  _set_bit(2);
  repetionlevel_ = value;
}

// optional uint32 Date = 4;
inline bool CMessageStartFamilyBossRequest::has_date() const {
  return _has_bit(3);
}
inline void CMessageStartFamilyBossRequest::clear_date() {
  date_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessageStartFamilyBossRequest::date() const {
  return date_;
}
inline void CMessageStartFamilyBossRequest::set_date(::google::protobuf::uint32 value) {
  _set_bit(3);
  date_ = value;
}

// optional uint32 MaxTimes = 5;
inline bool CMessageStartFamilyBossRequest::has_maxtimes() const {
  return _has_bit(4);
}
inline void CMessageStartFamilyBossRequest::clear_maxtimes() {
  maxtimes_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 CMessageStartFamilyBossRequest::maxtimes() const {
  return maxtimes_;
}
inline void CMessageStartFamilyBossRequest::set_maxtimes(::google::protobuf::uint32 value) {
  _set_bit(4);
  maxtimes_ = value;
}

// -------------------------------------------------------------------

// CMessageMakeRoomNotify

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageMakeRoomNotify::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageMakeRoomNotify::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageMakeRoomNotify::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageMakeRoomNotify::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 HeaderID = 2;
inline bool CMessageMakeRoomNotify::has_headerid() const {
  return _has_bit(1);
}
inline void CMessageMakeRoomNotify::clear_headerid() {
  headerid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageMakeRoomNotify::headerid() const {
  return headerid_;
}
inline void CMessageMakeRoomNotify::set_headerid(::google::protobuf::uint32 value) {
  _set_bit(1);
  headerid_ = value;
}

// optional string HeaderName = 3;
inline bool CMessageMakeRoomNotify::has_headername() const {
  return _has_bit(2);
}
inline void CMessageMakeRoomNotify::clear_headername() {
  if (headername_ != &_default_headername_) {
    headername_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& CMessageMakeRoomNotify::headername() const {
  return *headername_;
}
inline void CMessageMakeRoomNotify::set_headername(const ::std::string& value) {
  _set_bit(2);
  if (headername_ == &_default_headername_) {
    headername_ = new ::std::string;
  }
  headername_->assign(value);
}
inline void CMessageMakeRoomNotify::set_headername(const char* value) {
  _set_bit(2);
  if (headername_ == &_default_headername_) {
    headername_ = new ::std::string;
  }
  headername_->assign(value);
}
inline void CMessageMakeRoomNotify::set_headername(const char* value, size_t size) {
  _set_bit(2);
  if (headername_ == &_default_headername_) {
    headername_ = new ::std::string;
  }
  headername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageMakeRoomNotify::mutable_headername() {
  _set_bit(2);
  if (headername_ == &_default_headername_) {
    headername_ = new ::std::string;
  }
  return headername_;
}

// -------------------------------------------------------------------

// CMessageStartFamilyBossResponse

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageStartFamilyBossResponse::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageStartFamilyBossResponse::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageStartFamilyBossResponse::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageStartFamilyBossResponse::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 Errcode = 2;
inline bool CMessageStartFamilyBossResponse::has_errcode() const {
  return _has_bit(1);
}
inline void CMessageStartFamilyBossResponse::clear_errcode() {
  errcode_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageStartFamilyBossResponse::errcode() const {
  return errcode_;
}
inline void CMessageStartFamilyBossResponse::set_errcode(::google::protobuf::uint32 value) {
  _set_bit(1);
  errcode_ = value;
}

// -------------------------------------------------------------------

// CMessageEnterBossReptionRequest

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageEnterBossReptionRequest::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageEnterBossReptionRequest::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageEnterBossReptionRequest::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageEnterBossReptionRequest::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 NpcID = 2;
inline bool CMessageEnterBossReptionRequest::has_npcid() const {
  return _has_bit(1);
}
inline void CMessageEnterBossReptionRequest::clear_npcid() {
  npcid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageEnterBossReptionRequest::npcid() const {
  return npcid_;
}
inline void CMessageEnterBossReptionRequest::set_npcid(::google::protobuf::uint32 value) {
  _set_bit(1);
  npcid_ = value;
}

// optional uint32 FamilyID = 3;
inline bool CMessageEnterBossReptionRequest::has_familyid() const {
  return _has_bit(2);
}
inline void CMessageEnterBossReptionRequest::clear_familyid() {
  familyid_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageEnterBossReptionRequest::familyid() const {
  return familyid_;
}
inline void CMessageEnterBossReptionRequest::set_familyid(::google::protobuf::uint32 value) {
  _set_bit(2);
  familyid_ = value;
}

// -------------------------------------------------------------------

// CMessageEnterBossReptionResponse

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageEnterBossReptionResponse::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageEnterBossReptionResponse::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageEnterBossReptionResponse::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageEnterBossReptionResponse::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 Errcode = 2;
inline bool CMessageEnterBossReptionResponse::has_errcode() const {
  return _has_bit(1);
}
inline void CMessageEnterBossReptionResponse::clear_errcode() {
  errcode_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageEnterBossReptionResponse::errcode() const {
  return errcode_;
}
inline void CMessageEnterBossReptionResponse::set_errcode(::google::protobuf::uint32 value) {
  _set_bit(1);
  errcode_ = value;
}

// -------------------------------------------------------------------

// CMessageAbortRoomNotify

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageAbortRoomNotify::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageAbortRoomNotify::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageAbortRoomNotify::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageAbortRoomNotify::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 HeaderID = 2;
inline bool CMessageAbortRoomNotify::has_headerid() const {
  return _has_bit(1);
}
inline void CMessageAbortRoomNotify::clear_headerid() {
  headerid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageAbortRoomNotify::headerid() const {
  return headerid_;
}
inline void CMessageAbortRoomNotify::set_headerid(::google::protobuf::uint32 value) {
  _set_bit(1);
  headerid_ = value;
}

// optional string HeaderName = 3;
inline bool CMessageAbortRoomNotify::has_headername() const {
  return _has_bit(2);
}
inline void CMessageAbortRoomNotify::clear_headername() {
  if (headername_ != &_default_headername_) {
    headername_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& CMessageAbortRoomNotify::headername() const {
  return *headername_;
}
inline void CMessageAbortRoomNotify::set_headername(const ::std::string& value) {
  _set_bit(2);
  if (headername_ == &_default_headername_) {
    headername_ = new ::std::string;
  }
  headername_->assign(value);
}
inline void CMessageAbortRoomNotify::set_headername(const char* value) {
  _set_bit(2);
  if (headername_ == &_default_headername_) {
    headername_ = new ::std::string;
  }
  headername_->assign(value);
}
inline void CMessageAbortRoomNotify::set_headername(const char* value, size_t size) {
  _set_bit(2);
  if (headername_ == &_default_headername_) {
    headername_ = new ::std::string;
  }
  headername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageAbortRoomNotify::mutable_headername() {
  _set_bit(2);
  if (headername_ == &_default_headername_) {
    headername_ = new ::std::string;
  }
  return headername_;
}

// -------------------------------------------------------------------

// CMessageChaRoomNotify

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageChaRoomNotify::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageChaRoomNotify::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageChaRoomNotify::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageChaRoomNotify::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 SrcFamilyID = 2;
inline bool CMessageChaRoomNotify::has_srcfamilyid() const {
  return _has_bit(1);
}
inline void CMessageChaRoomNotify::clear_srcfamilyid() {
  srcfamilyid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageChaRoomNotify::srcfamilyid() const {
  return srcfamilyid_;
}
inline void CMessageChaRoomNotify::set_srcfamilyid(::google::protobuf::uint32 value) {
  _set_bit(1);
  srcfamilyid_ = value;
}

// optional string SrcFamilyName = 3;
inline bool CMessageChaRoomNotify::has_srcfamilyname() const {
  return _has_bit(2);
}
inline void CMessageChaRoomNotify::clear_srcfamilyname() {
  if (srcfamilyname_ != &_default_srcfamilyname_) {
    srcfamilyname_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& CMessageChaRoomNotify::srcfamilyname() const {
  return *srcfamilyname_;
}
inline void CMessageChaRoomNotify::set_srcfamilyname(const ::std::string& value) {
  _set_bit(2);
  if (srcfamilyname_ == &_default_srcfamilyname_) {
    srcfamilyname_ = new ::std::string;
  }
  srcfamilyname_->assign(value);
}
inline void CMessageChaRoomNotify::set_srcfamilyname(const char* value) {
  _set_bit(2);
  if (srcfamilyname_ == &_default_srcfamilyname_) {
    srcfamilyname_ = new ::std::string;
  }
  srcfamilyname_->assign(value);
}
inline void CMessageChaRoomNotify::set_srcfamilyname(const char* value, size_t size) {
  _set_bit(2);
  if (srcfamilyname_ == &_default_srcfamilyname_) {
    srcfamilyname_ = new ::std::string;
  }
  srcfamilyname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageChaRoomNotify::mutable_srcfamilyname() {
  _set_bit(2);
  if (srcfamilyname_ == &_default_srcfamilyname_) {
    srcfamilyname_ = new ::std::string;
  }
  return srcfamilyname_;
}

// optional uint32 SrcHeaderID = 4;
inline bool CMessageChaRoomNotify::has_srcheaderid() const {
  return _has_bit(3);
}
inline void CMessageChaRoomNotify::clear_srcheaderid() {
  srcheaderid_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessageChaRoomNotify::srcheaderid() const {
  return srcheaderid_;
}
inline void CMessageChaRoomNotify::set_srcheaderid(::google::protobuf::uint32 value) {
  _set_bit(3);
  srcheaderid_ = value;
}

// optional string SrcHeaderName = 5;
inline bool CMessageChaRoomNotify::has_srcheadername() const {
  return _has_bit(4);
}
inline void CMessageChaRoomNotify::clear_srcheadername() {
  if (srcheadername_ != &_default_srcheadername_) {
    srcheadername_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& CMessageChaRoomNotify::srcheadername() const {
  return *srcheadername_;
}
inline void CMessageChaRoomNotify::set_srcheadername(const ::std::string& value) {
  _set_bit(4);
  if (srcheadername_ == &_default_srcheadername_) {
    srcheadername_ = new ::std::string;
  }
  srcheadername_->assign(value);
}
inline void CMessageChaRoomNotify::set_srcheadername(const char* value) {
  _set_bit(4);
  if (srcheadername_ == &_default_srcheadername_) {
    srcheadername_ = new ::std::string;
  }
  srcheadername_->assign(value);
}
inline void CMessageChaRoomNotify::set_srcheadername(const char* value, size_t size) {
  _set_bit(4);
  if (srcheadername_ == &_default_srcheadername_) {
    srcheadername_ = new ::std::string;
  }
  srcheadername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageChaRoomNotify::mutable_srcheadername() {
  _set_bit(4);
  if (srcheadername_ == &_default_srcheadername_) {
    srcheadername_ = new ::std::string;
  }
  return srcheadername_;
}

// optional uint32 DesFamilyID = 6;
inline bool CMessageChaRoomNotify::has_desfamilyid() const {
  return _has_bit(5);
}
inline void CMessageChaRoomNotify::clear_desfamilyid() {
  desfamilyid_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 CMessageChaRoomNotify::desfamilyid() const {
  return desfamilyid_;
}
inline void CMessageChaRoomNotify::set_desfamilyid(::google::protobuf::uint32 value) {
  _set_bit(5);
  desfamilyid_ = value;
}

// optional string DesFamilyName = 7;
inline bool CMessageChaRoomNotify::has_desfamilyname() const {
  return _has_bit(6);
}
inline void CMessageChaRoomNotify::clear_desfamilyname() {
  if (desfamilyname_ != &_default_desfamilyname_) {
    desfamilyname_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& CMessageChaRoomNotify::desfamilyname() const {
  return *desfamilyname_;
}
inline void CMessageChaRoomNotify::set_desfamilyname(const ::std::string& value) {
  _set_bit(6);
  if (desfamilyname_ == &_default_desfamilyname_) {
    desfamilyname_ = new ::std::string;
  }
  desfamilyname_->assign(value);
}
inline void CMessageChaRoomNotify::set_desfamilyname(const char* value) {
  _set_bit(6);
  if (desfamilyname_ == &_default_desfamilyname_) {
    desfamilyname_ = new ::std::string;
  }
  desfamilyname_->assign(value);
}
inline void CMessageChaRoomNotify::set_desfamilyname(const char* value, size_t size) {
  _set_bit(6);
  if (desfamilyname_ == &_default_desfamilyname_) {
    desfamilyname_ = new ::std::string;
  }
  desfamilyname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageChaRoomNotify::mutable_desfamilyname() {
  _set_bit(6);
  if (desfamilyname_ == &_default_desfamilyname_) {
    desfamilyname_ = new ::std::string;
  }
  return desfamilyname_;
}

// optional uint32 DesHeaderID = 8;
inline bool CMessageChaRoomNotify::has_desheaderid() const {
  return _has_bit(7);
}
inline void CMessageChaRoomNotify::clear_desheaderid() {
  desheaderid_ = 0u;
  _clear_bit(7);
}
inline ::google::protobuf::uint32 CMessageChaRoomNotify::desheaderid() const {
  return desheaderid_;
}
inline void CMessageChaRoomNotify::set_desheaderid(::google::protobuf::uint32 value) {
  _set_bit(7);
  desheaderid_ = value;
}

// optional string DesHeaderName = 9;
inline bool CMessageChaRoomNotify::has_desheadername() const {
  return _has_bit(8);
}
inline void CMessageChaRoomNotify::clear_desheadername() {
  if (desheadername_ != &_default_desheadername_) {
    desheadername_->clear();
  }
  _clear_bit(8);
}
inline const ::std::string& CMessageChaRoomNotify::desheadername() const {
  return *desheadername_;
}
inline void CMessageChaRoomNotify::set_desheadername(const ::std::string& value) {
  _set_bit(8);
  if (desheadername_ == &_default_desheadername_) {
    desheadername_ = new ::std::string;
  }
  desheadername_->assign(value);
}
inline void CMessageChaRoomNotify::set_desheadername(const char* value) {
  _set_bit(8);
  if (desheadername_ == &_default_desheadername_) {
    desheadername_ = new ::std::string;
  }
  desheadername_->assign(value);
}
inline void CMessageChaRoomNotify::set_desheadername(const char* value, size_t size) {
  _set_bit(8);
  if (desheadername_ == &_default_desheadername_) {
    desheadername_ = new ::std::string;
  }
  desheadername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageChaRoomNotify::mutable_desheadername() {
  _set_bit(8);
  if (desheadername_ == &_default_desheadername_) {
    desheadername_ = new ::std::string;
  }
  return desheadername_;
}

// optional uint32 SrcWin = 10;
inline bool CMessageChaRoomNotify::has_srcwin() const {
  return _has_bit(9);
}
inline void CMessageChaRoomNotify::clear_srcwin() {
  srcwin_ = 0u;
  _clear_bit(9);
}
inline ::google::protobuf::uint32 CMessageChaRoomNotify::srcwin() const {
  return srcwin_;
}
inline void CMessageChaRoomNotify::set_srcwin(::google::protobuf::uint32 value) {
  _set_bit(9);
  srcwin_ = value;
}

// optional uint32 SrcLost = 11;
inline bool CMessageChaRoomNotify::has_srclost() const {
  return _has_bit(10);
}
inline void CMessageChaRoomNotify::clear_srclost() {
  srclost_ = 0u;
  _clear_bit(10);
}
inline ::google::protobuf::uint32 CMessageChaRoomNotify::srclost() const {
  return srclost_;
}
inline void CMessageChaRoomNotify::set_srclost(::google::protobuf::uint32 value) {
  _set_bit(10);
  srclost_ = value;
}

// -------------------------------------------------------------------

// CMessageAbortChaNotify

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageAbortChaNotify::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageAbortChaNotify::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageAbortChaNotify::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageAbortChaNotify::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 SrcFamilyID = 2;
inline bool CMessageAbortChaNotify::has_srcfamilyid() const {
  return _has_bit(1);
}
inline void CMessageAbortChaNotify::clear_srcfamilyid() {
  srcfamilyid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageAbortChaNotify::srcfamilyid() const {
  return srcfamilyid_;
}
inline void CMessageAbortChaNotify::set_srcfamilyid(::google::protobuf::uint32 value) {
  _set_bit(1);
  srcfamilyid_ = value;
}

// optional string SrcFamilyName = 3;
inline bool CMessageAbortChaNotify::has_srcfamilyname() const {
  return _has_bit(2);
}
inline void CMessageAbortChaNotify::clear_srcfamilyname() {
  if (srcfamilyname_ != &_default_srcfamilyname_) {
    srcfamilyname_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& CMessageAbortChaNotify::srcfamilyname() const {
  return *srcfamilyname_;
}
inline void CMessageAbortChaNotify::set_srcfamilyname(const ::std::string& value) {
  _set_bit(2);
  if (srcfamilyname_ == &_default_srcfamilyname_) {
    srcfamilyname_ = new ::std::string;
  }
  srcfamilyname_->assign(value);
}
inline void CMessageAbortChaNotify::set_srcfamilyname(const char* value) {
  _set_bit(2);
  if (srcfamilyname_ == &_default_srcfamilyname_) {
    srcfamilyname_ = new ::std::string;
  }
  srcfamilyname_->assign(value);
}
inline void CMessageAbortChaNotify::set_srcfamilyname(const char* value, size_t size) {
  _set_bit(2);
  if (srcfamilyname_ == &_default_srcfamilyname_) {
    srcfamilyname_ = new ::std::string;
  }
  srcfamilyname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageAbortChaNotify::mutable_srcfamilyname() {
  _set_bit(2);
  if (srcfamilyname_ == &_default_srcfamilyname_) {
    srcfamilyname_ = new ::std::string;
  }
  return srcfamilyname_;
}

// optional uint32 DesFamilyID = 4;
inline bool CMessageAbortChaNotify::has_desfamilyid() const {
  return _has_bit(3);
}
inline void CMessageAbortChaNotify::clear_desfamilyid() {
  desfamilyid_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessageAbortChaNotify::desfamilyid() const {
  return desfamilyid_;
}
inline void CMessageAbortChaNotify::set_desfamilyid(::google::protobuf::uint32 value) {
  _set_bit(3);
  desfamilyid_ = value;
}

// optional string DesFamilyName = 5;
inline bool CMessageAbortChaNotify::has_desfamilyname() const {
  return _has_bit(4);
}
inline void CMessageAbortChaNotify::clear_desfamilyname() {
  if (desfamilyname_ != &_default_desfamilyname_) {
    desfamilyname_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& CMessageAbortChaNotify::desfamilyname() const {
  return *desfamilyname_;
}
inline void CMessageAbortChaNotify::set_desfamilyname(const ::std::string& value) {
  _set_bit(4);
  if (desfamilyname_ == &_default_desfamilyname_) {
    desfamilyname_ = new ::std::string;
  }
  desfamilyname_->assign(value);
}
inline void CMessageAbortChaNotify::set_desfamilyname(const char* value) {
  _set_bit(4);
  if (desfamilyname_ == &_default_desfamilyname_) {
    desfamilyname_ = new ::std::string;
  }
  desfamilyname_->assign(value);
}
inline void CMessageAbortChaNotify::set_desfamilyname(const char* value, size_t size) {
  _set_bit(4);
  if (desfamilyname_ == &_default_desfamilyname_) {
    desfamilyname_ = new ::std::string;
  }
  desfamilyname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageAbortChaNotify::mutable_desfamilyname() {
  _set_bit(4);
  if (desfamilyname_ == &_default_desfamilyname_) {
    desfamilyname_ = new ::std::string;
  }
  return desfamilyname_;
}

// optional string HeaderName = 6;
inline bool CMessageAbortChaNotify::has_headername() const {
  return _has_bit(5);
}
inline void CMessageAbortChaNotify::clear_headername() {
  if (headername_ != &_default_headername_) {
    headername_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& CMessageAbortChaNotify::headername() const {
  return *headername_;
}
inline void CMessageAbortChaNotify::set_headername(const ::std::string& value) {
  _set_bit(5);
  if (headername_ == &_default_headername_) {
    headername_ = new ::std::string;
  }
  headername_->assign(value);
}
inline void CMessageAbortChaNotify::set_headername(const char* value) {
  _set_bit(5);
  if (headername_ == &_default_headername_) {
    headername_ = new ::std::string;
  }
  headername_->assign(value);
}
inline void CMessageAbortChaNotify::set_headername(const char* value, size_t size) {
  _set_bit(5);
  if (headername_ == &_default_headername_) {
    headername_ = new ::std::string;
  }
  headername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageAbortChaNotify::mutable_headername() {
  _set_bit(5);
  if (headername_ == &_default_headername_) {
    headername_ = new ::std::string;
  }
  return headername_;
}

// optional uint32 ManagerID = 7;
inline bool CMessageAbortChaNotify::has_managerid() const {
  return _has_bit(6);
}
inline void CMessageAbortChaNotify::clear_managerid() {
  managerid_ = 0u;
  _clear_bit(6);
}
inline ::google::protobuf::uint32 CMessageAbortChaNotify::managerid() const {
  return managerid_;
}
inline void CMessageAbortChaNotify::set_managerid(::google::protobuf::uint32 value) {
  _set_bit(6);
  managerid_ = value;
}

// optional string ManagerName = 8;
inline bool CMessageAbortChaNotify::has_managername() const {
  return _has_bit(7);
}
inline void CMessageAbortChaNotify::clear_managername() {
  if (managername_ != &_default_managername_) {
    managername_->clear();
  }
  _clear_bit(7);
}
inline const ::std::string& CMessageAbortChaNotify::managername() const {
  return *managername_;
}
inline void CMessageAbortChaNotify::set_managername(const ::std::string& value) {
  _set_bit(7);
  if (managername_ == &_default_managername_) {
    managername_ = new ::std::string;
  }
  managername_->assign(value);
}
inline void CMessageAbortChaNotify::set_managername(const char* value) {
  _set_bit(7);
  if (managername_ == &_default_managername_) {
    managername_ = new ::std::string;
  }
  managername_->assign(value);
}
inline void CMessageAbortChaNotify::set_managername(const char* value, size_t size) {
  _set_bit(7);
  if (managername_ == &_default_managername_) {
    managername_ = new ::std::string;
  }
  managername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageAbortChaNotify::mutable_managername() {
  _set_bit(7);
  if (managername_ == &_default_managername_) {
    managername_ = new ::std::string;
  }
  return managername_;
}

// -------------------------------------------------------------------

// CMessageFamilyGloryChangedNotify

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageFamilyGloryChangedNotify::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageFamilyGloryChangedNotify::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageFamilyGloryChangedNotify::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageFamilyGloryChangedNotify::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 Glory = 2;
inline bool CMessageFamilyGloryChangedNotify::has_glory() const {
  return _has_bit(1);
}
inline void CMessageFamilyGloryChangedNotify::clear_glory() {
  glory_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageFamilyGloryChangedNotify::glory() const {
  return glory_;
}
inline void CMessageFamilyGloryChangedNotify::set_glory(::google::protobuf::uint32 value) {
  _set_bit(1);
  glory_ = value;
}

// optional uint32 RoleID = 3;
inline bool CMessageFamilyGloryChangedNotify::has_roleid() const {
  return _has_bit(2);
}
inline void CMessageFamilyGloryChangedNotify::clear_roleid() {
  roleid_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageFamilyGloryChangedNotify::roleid() const {
  return roleid_;
}
inline void CMessageFamilyGloryChangedNotify::set_roleid(::google::protobuf::uint32 value) {
  _set_bit(2);
  roleid_ = value;
}

// optional uint32 Reason = 4;
inline bool CMessageFamilyGloryChangedNotify::has_reason() const {
  return _has_bit(3);
}
inline void CMessageFamilyGloryChangedNotify::clear_reason() {
  reason_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessageFamilyGloryChangedNotify::reason() const {
  return reason_;
}
inline void CMessageFamilyGloryChangedNotify::set_reason(::google::protobuf::uint32 value) {
  _set_bit(3);
  reason_ = value;
}

// optional string RoleName = 5;
inline bool CMessageFamilyGloryChangedNotify::has_rolename() const {
  return _has_bit(4);
}
inline void CMessageFamilyGloryChangedNotify::clear_rolename() {
  if (rolename_ != &_default_rolename_) {
    rolename_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& CMessageFamilyGloryChangedNotify::rolename() const {
  return *rolename_;
}
inline void CMessageFamilyGloryChangedNotify::set_rolename(const ::std::string& value) {
  _set_bit(4);
  if (rolename_ == &_default_rolename_) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void CMessageFamilyGloryChangedNotify::set_rolename(const char* value) {
  _set_bit(4);
  if (rolename_ == &_default_rolename_) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void CMessageFamilyGloryChangedNotify::set_rolename(const char* value, size_t size) {
  _set_bit(4);
  if (rolename_ == &_default_rolename_) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageFamilyGloryChangedNotify::mutable_rolename() {
  _set_bit(4);
  if (rolename_ == &_default_rolename_) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}

// optional int32 Value = 6;
inline bool CMessageFamilyGloryChangedNotify::has_value() const {
  return _has_bit(5);
}
inline void CMessageFamilyGloryChangedNotify::clear_value() {
  value_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 CMessageFamilyGloryChangedNotify::value() const {
  return value_;
}
inline void CMessageFamilyGloryChangedNotify::set_value(::google::protobuf::int32 value) {
  _set_bit(5);
  value_ = value;
}

// -------------------------------------------------------------------

// CMessageMemberContributeChangedNotify

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageMemberContributeChangedNotify::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageMemberContributeChangedNotify::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageMemberContributeChangedNotify::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageMemberContributeChangedNotify::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 Contribute = 2;
inline bool CMessageMemberContributeChangedNotify::has_contribute() const {
  return _has_bit(1);
}
inline void CMessageMemberContributeChangedNotify::clear_contribute() {
  contribute_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageMemberContributeChangedNotify::contribute() const {
  return contribute_;
}
inline void CMessageMemberContributeChangedNotify::set_contribute(::google::protobuf::uint32 value) {
  _set_bit(1);
  contribute_ = value;
}

// optional uint32 RoleID = 3;
inline bool CMessageMemberContributeChangedNotify::has_roleid() const {
  return _has_bit(2);
}
inline void CMessageMemberContributeChangedNotify::clear_roleid() {
  roleid_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageMemberContributeChangedNotify::roleid() const {
  return roleid_;
}
inline void CMessageMemberContributeChangedNotify::set_roleid(::google::protobuf::uint32 value) {
  _set_bit(2);
  roleid_ = value;
}

// optional int32 Value = 4;
inline bool CMessageMemberContributeChangedNotify::has_value() const {
  return _has_bit(3);
}
inline void CMessageMemberContributeChangedNotify::clear_value() {
  value_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 CMessageMemberContributeChangedNotify::value() const {
  return value_;
}
inline void CMessageMemberContributeChangedNotify::set_value(::google::protobuf::int32 value) {
  _set_bit(3);
  value_ = value;
}

// -------------------------------------------------------------------

// CMessageQueryNpcWelfareRequest

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageQueryNpcWelfareRequest::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageQueryNpcWelfareRequest::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageQueryNpcWelfareRequest::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageQueryNpcWelfareRequest::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 EntityID = 2;
inline bool CMessageQueryNpcWelfareRequest::has_entityid() const {
  return _has_bit(1);
}
inline void CMessageQueryNpcWelfareRequest::clear_entityid() {
  entityid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageQueryNpcWelfareRequest::entityid() const {
  return entityid_;
}
inline void CMessageQueryNpcWelfareRequest::set_entityid(::google::protobuf::uint32 value) {
  _set_bit(1);
  entityid_ = value;
}

// optional uint32 NpcTmpID = 3;
inline bool CMessageQueryNpcWelfareRequest::has_npctmpid() const {
  return _has_bit(2);
}
inline void CMessageQueryNpcWelfareRequest::clear_npctmpid() {
  npctmpid_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageQueryNpcWelfareRequest::npctmpid() const {
  return npctmpid_;
}
inline void CMessageQueryNpcWelfareRequest::set_npctmpid(::google::protobuf::uint32 value) {
  _set_bit(2);
  npctmpid_ = value;
}

// -------------------------------------------------------------------

// CMessageQueryNpcWelfareResponse

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageQueryNpcWelfareResponse::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageQueryNpcWelfareResponse::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageQueryNpcWelfareResponse::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageQueryNpcWelfareResponse::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 Money = 2;
inline bool CMessageQueryNpcWelfareResponse::has_money() const {
  return _has_bit(1);
}
inline void CMessageQueryNpcWelfareResponse::clear_money() {
  money_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageQueryNpcWelfareResponse::money() const {
  return money_;
}
inline void CMessageQueryNpcWelfareResponse::set_money(::google::protobuf::uint32 value) {
  _set_bit(1);
  money_ = value;
}

// optional uint32 Glory = 3;
inline bool CMessageQueryNpcWelfareResponse::has_glory() const {
  return _has_bit(2);
}
inline void CMessageQueryNpcWelfareResponse::clear_glory() {
  glory_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageQueryNpcWelfareResponse::glory() const {
  return glory_;
}
inline void CMessageQueryNpcWelfareResponse::set_glory(::google::protobuf::uint32 value) {
  _set_bit(2);
  glory_ = value;
}

// optional uint32 Errcode = 4;
inline bool CMessageQueryNpcWelfareResponse::has_errcode() const {
  return _has_bit(3);
}
inline void CMessageQueryNpcWelfareResponse::clear_errcode() {
  errcode_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessageQueryNpcWelfareResponse::errcode() const {
  return errcode_;
}
inline void CMessageQueryNpcWelfareResponse::set_errcode(::google::protobuf::uint32 value) {
  _set_bit(3);
  errcode_ = value;
}

// -------------------------------------------------------------------

// CMessageGetFamilyMoneyRequest

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageGetFamilyMoneyRequest::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageGetFamilyMoneyRequest::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageGetFamilyMoneyRequest::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageGetFamilyMoneyRequest::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 FamilyMoney = 2;
inline bool CMessageGetFamilyMoneyRequest::has_familymoney() const {
  return _has_bit(1);
}
inline void CMessageGetFamilyMoneyRequest::clear_familymoney() {
  familymoney_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageGetFamilyMoneyRequest::familymoney() const {
  return familymoney_;
}
inline void CMessageGetFamilyMoneyRequest::set_familymoney(::google::protobuf::uint32 value) {
  _set_bit(1);
  familymoney_ = value;
}

// -------------------------------------------------------------------

// CMessageGetFamilyMoneyResponse

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageGetFamilyMoneyResponse::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageGetFamilyMoneyResponse::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageGetFamilyMoneyResponse::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageGetFamilyMoneyResponse::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 Errcode = 2;
inline bool CMessageGetFamilyMoneyResponse::has_errcode() const {
  return _has_bit(1);
}
inline void CMessageGetFamilyMoneyResponse::clear_errcode() {
  errcode_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageGetFamilyMoneyResponse::errcode() const {
  return errcode_;
}
inline void CMessageGetFamilyMoneyResponse::set_errcode(::google::protobuf::uint32 value) {
  _set_bit(1);
  errcode_ = value;
}

// optional uint32 FamilyMoney = 3;
inline bool CMessageGetFamilyMoneyResponse::has_familymoney() const {
  return _has_bit(2);
}
inline void CMessageGetFamilyMoneyResponse::clear_familymoney() {
  familymoney_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageGetFamilyMoneyResponse::familymoney() const {
  return familymoney_;
}
inline void CMessageGetFamilyMoneyResponse::set_familymoney(::google::protobuf::uint32 value) {
  _set_bit(2);
  familymoney_ = value;
}

// -------------------------------------------------------------------

// CMessageAbortNpcNotify

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageAbortNpcNotify::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageAbortNpcNotify::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageAbortNpcNotify::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageAbortNpcNotify::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 NpcID = 2;
inline bool CMessageAbortNpcNotify::has_npcid() const {
  return _has_bit(1);
}
inline void CMessageAbortNpcNotify::clear_npcid() {
  npcid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageAbortNpcNotify::npcid() const {
  return npcid_;
}
inline void CMessageAbortNpcNotify::set_npcid(::google::protobuf::uint32 value) {
  _set_bit(1);
  npcid_ = value;
}

// optional string HeaderName = 3;
inline bool CMessageAbortNpcNotify::has_headername() const {
  return _has_bit(2);
}
inline void CMessageAbortNpcNotify::clear_headername() {
  if (headername_ != &_default_headername_) {
    headername_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& CMessageAbortNpcNotify::headername() const {
  return *headername_;
}
inline void CMessageAbortNpcNotify::set_headername(const ::std::string& value) {
  _set_bit(2);
  if (headername_ == &_default_headername_) {
    headername_ = new ::std::string;
  }
  headername_->assign(value);
}
inline void CMessageAbortNpcNotify::set_headername(const char* value) {
  _set_bit(2);
  if (headername_ == &_default_headername_) {
    headername_ = new ::std::string;
  }
  headername_->assign(value);
}
inline void CMessageAbortNpcNotify::set_headername(const char* value, size_t size) {
  _set_bit(2);
  if (headername_ == &_default_headername_) {
    headername_ = new ::std::string;
  }
  headername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageAbortNpcNotify::mutable_headername() {
  _set_bit(2);
  if (headername_ == &_default_headername_) {
    headername_ = new ::std::string;
  }
  return headername_;
}

// -------------------------------------------------------------------

// CMessagePreBattleNotify

// optional .FamilyHead HeadMsg = 1;
inline bool CMessagePreBattleNotify::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessagePreBattleNotify::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessagePreBattleNotify::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessagePreBattleNotify::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 NpcID = 2;
inline bool CMessagePreBattleNotify::has_npcid() const {
  return _has_bit(1);
}
inline void CMessagePreBattleNotify::clear_npcid() {
  npcid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessagePreBattleNotify::npcid() const {
  return npcid_;
}
inline void CMessagePreBattleNotify::set_npcid(::google::protobuf::uint32 value) {
  _set_bit(1);
  npcid_ = value;
}

// optional string AttFamilyName = 3;
inline bool CMessagePreBattleNotify::has_attfamilyname() const {
  return _has_bit(2);
}
inline void CMessagePreBattleNotify::clear_attfamilyname() {
  if (attfamilyname_ != &_default_attfamilyname_) {
    attfamilyname_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& CMessagePreBattleNotify::attfamilyname() const {
  return *attfamilyname_;
}
inline void CMessagePreBattleNotify::set_attfamilyname(const ::std::string& value) {
  _set_bit(2);
  if (attfamilyname_ == &_default_attfamilyname_) {
    attfamilyname_ = new ::std::string;
  }
  attfamilyname_->assign(value);
}
inline void CMessagePreBattleNotify::set_attfamilyname(const char* value) {
  _set_bit(2);
  if (attfamilyname_ == &_default_attfamilyname_) {
    attfamilyname_ = new ::std::string;
  }
  attfamilyname_->assign(value);
}
inline void CMessagePreBattleNotify::set_attfamilyname(const char* value, size_t size) {
  _set_bit(2);
  if (attfamilyname_ == &_default_attfamilyname_) {
    attfamilyname_ = new ::std::string;
  }
  attfamilyname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessagePreBattleNotify::mutable_attfamilyname() {
  _set_bit(2);
  if (attfamilyname_ == &_default_attfamilyname_) {
    attfamilyname_ = new ::std::string;
  }
  return attfamilyname_;
}

// optional string DefFamilyName = 4;
inline bool CMessagePreBattleNotify::has_deffamilyname() const {
  return _has_bit(3);
}
inline void CMessagePreBattleNotify::clear_deffamilyname() {
  if (deffamilyname_ != &_default_deffamilyname_) {
    deffamilyname_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& CMessagePreBattleNotify::deffamilyname() const {
  return *deffamilyname_;
}
inline void CMessagePreBattleNotify::set_deffamilyname(const ::std::string& value) {
  _set_bit(3);
  if (deffamilyname_ == &_default_deffamilyname_) {
    deffamilyname_ = new ::std::string;
  }
  deffamilyname_->assign(value);
}
inline void CMessagePreBattleNotify::set_deffamilyname(const char* value) {
  _set_bit(3);
  if (deffamilyname_ == &_default_deffamilyname_) {
    deffamilyname_ = new ::std::string;
  }
  deffamilyname_->assign(value);
}
inline void CMessagePreBattleNotify::set_deffamilyname(const char* value, size_t size) {
  _set_bit(3);
  if (deffamilyname_ == &_default_deffamilyname_) {
    deffamilyname_ = new ::std::string;
  }
  deffamilyname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessagePreBattleNotify::mutable_deffamilyname() {
  _set_bit(3);
  if (deffamilyname_ == &_default_deffamilyname_) {
    deffamilyname_ = new ::std::string;
  }
  return deffamilyname_;
}

// optional uint32 Money = 5;
inline bool CMessagePreBattleNotify::has_money() const {
  return _has_bit(4);
}
inline void CMessagePreBattleNotify::clear_money() {
  money_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 CMessagePreBattleNotify::money() const {
  return money_;
}
inline void CMessagePreBattleNotify::set_money(::google::protobuf::uint32 value) {
  _set_bit(4);
  money_ = value;
}

// -------------------------------------------------------------------

// CMessageGetExpCardRequest

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageGetExpCardRequest::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageGetExpCardRequest::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageGetExpCardRequest::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageGetExpCardRequest::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 Msgcode = 2;
inline bool CMessageGetExpCardRequest::has_msgcode() const {
  return _has_bit(1);
}
inline void CMessageGetExpCardRequest::clear_msgcode() {
  msgcode_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageGetExpCardRequest::msgcode() const {
  return msgcode_;
}
inline void CMessageGetExpCardRequest::set_msgcode(::google::protobuf::uint32 value) {
  _set_bit(1);
  msgcode_ = value;
}

// -------------------------------------------------------------------

// CMessageGetExpCardResponse

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageGetExpCardResponse::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageGetExpCardResponse::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageGetExpCardResponse::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageGetExpCardResponse::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 Errcode = 2;
inline bool CMessageGetExpCardResponse::has_errcode() const {
  return _has_bit(1);
}
inline void CMessageGetExpCardResponse::clear_errcode() {
  errcode_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageGetExpCardResponse::errcode() const {
  return errcode_;
}
inline void CMessageGetExpCardResponse::set_errcode(::google::protobuf::uint32 value) {
  _set_bit(1);
  errcode_ = value;
}

// optional uint32 RedStoneID = 3;
inline bool CMessageGetExpCardResponse::has_redstoneid() const {
  return _has_bit(2);
}
inline void CMessageGetExpCardResponse::clear_redstoneid() {
  redstoneid_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageGetExpCardResponse::redstoneid() const {
  return redstoneid_;
}
inline void CMessageGetExpCardResponse::set_redstoneid(::google::protobuf::uint32 value) {
  _set_bit(2);
  redstoneid_ = value;
}

// -------------------------------------------------------------------

// CMessageFamilyCanLevelUPNotify

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageFamilyCanLevelUPNotify::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageFamilyCanLevelUPNotify::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageFamilyCanLevelUPNotify::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageFamilyCanLevelUPNotify::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// -------------------------------------------------------------------

// CMessageFamilyRepetionScoreNotify

// optional uint32 RepetionLevel = 1;
inline bool CMessageFamilyRepetionScoreNotify::has_repetionlevel() const {
  return _has_bit(0);
}
inline void CMessageFamilyRepetionScoreNotify::clear_repetionlevel() {
  repetionlevel_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageFamilyRepetionScoreNotify::repetionlevel() const {
  return repetionlevel_;
}
inline void CMessageFamilyRepetionScoreNotify::set_repetionlevel(::google::protobuf::uint32 value) {
  _set_bit(0);
  repetionlevel_ = value;
}

// optional uint32 OgreNum = 2;
inline bool CMessageFamilyRepetionScoreNotify::has_ogrenum() const {
  return _has_bit(1);
}
inline void CMessageFamilyRepetionScoreNotify::clear_ogrenum() {
  ogrenum_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageFamilyRepetionScoreNotify::ogrenum() const {
  return ogrenum_;
}
inline void CMessageFamilyRepetionScoreNotify::set_ogrenum(::google::protobuf::uint32 value) {
  _set_bit(1);
  ogrenum_ = value;
}

// optional uint32 TimeLength = 3;
inline bool CMessageFamilyRepetionScoreNotify::has_timelength() const {
  return _has_bit(2);
}
inline void CMessageFamilyRepetionScoreNotify::clear_timelength() {
  timelength_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageFamilyRepetionScoreNotify::timelength() const {
  return timelength_;
}
inline void CMessageFamilyRepetionScoreNotify::set_timelength(::google::protobuf::uint32 value) {
  _set_bit(2);
  timelength_ = value;
}

// optional uint32 WaveNum = 4;
inline bool CMessageFamilyRepetionScoreNotify::has_wavenum() const {
  return _has_bit(3);
}
inline void CMessageFamilyRepetionScoreNotify::clear_wavenum() {
  wavenum_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessageFamilyRepetionScoreNotify::wavenum() const {
  return wavenum_;
}
inline void CMessageFamilyRepetionScoreNotify::set_wavenum(::google::protobuf::uint32 value) {
  _set_bit(3);
  wavenum_ = value;
}

// optional uint32 MaxHitNum = 5;
inline bool CMessageFamilyRepetionScoreNotify::has_maxhitnum() const {
  return _has_bit(4);
}
inline void CMessageFamilyRepetionScoreNotify::clear_maxhitnum() {
  maxhitnum_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 CMessageFamilyRepetionScoreNotify::maxhitnum() const {
  return maxhitnum_;
}
inline void CMessageFamilyRepetionScoreNotify::set_maxhitnum(::google::protobuf::uint32 value) {
  _set_bit(4);
  maxhitnum_ = value;
}

// optional uint32 Score = 6;
inline bool CMessageFamilyRepetionScoreNotify::has_score() const {
  return _has_bit(5);
}
inline void CMessageFamilyRepetionScoreNotify::clear_score() {
  score_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 CMessageFamilyRepetionScoreNotify::score() const {
  return score_;
}
inline void CMessageFamilyRepetionScoreNotify::set_score(::google::protobuf::uint32 value) {
  _set_bit(5);
  score_ = value;
}

// -------------------------------------------------------------------

// GoodItem

// optional uint32 ItemID = 1;
inline bool GoodItem::has_itemid() const {
  return _has_bit(0);
}
inline void GoodItem::clear_itemid() {
  itemid_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 GoodItem::itemid() const {
  return itemid_;
}
inline void GoodItem::set_itemid(::google::protobuf::uint32 value) {
  _set_bit(0);
  itemid_ = value;
}

// optional uint32 ItemNum = 2;
inline bool GoodItem::has_itemnum() const {
  return _has_bit(1);
}
inline void GoodItem::clear_itemnum() {
  itemnum_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 GoodItem::itemnum() const {
  return itemnum_;
}
inline void GoodItem::set_itemnum(::google::protobuf::uint32 value) {
  _set_bit(1);
  itemnum_ = value;
}

// optional uint32 ComposeID = 3;
inline bool GoodItem::has_composeid() const {
  return _has_bit(2);
}
inline void GoodItem::clear_composeid() {
  composeid_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 GoodItem::composeid() const {
  return composeid_;
}
inline void GoodItem::set_composeid(::google::protobuf::uint32 value) {
  _set_bit(2);
  composeid_ = value;
}

// -------------------------------------------------------------------

// CMessageGetFamilyGoodsListRequest

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageGetFamilyGoodsListRequest::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageGetFamilyGoodsListRequest::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageGetFamilyGoodsListRequest::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageGetFamilyGoodsListRequest::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 FamilyID = 2;
inline bool CMessageGetFamilyGoodsListRequest::has_familyid() const {
  return _has_bit(1);
}
inline void CMessageGetFamilyGoodsListRequest::clear_familyid() {
  familyid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageGetFamilyGoodsListRequest::familyid() const {
  return familyid_;
}
inline void CMessageGetFamilyGoodsListRequest::set_familyid(::google::protobuf::uint32 value) {
  _set_bit(1);
  familyid_ = value;
}

// optional uint32 EntityID = 3;
inline bool CMessageGetFamilyGoodsListRequest::has_entityid() const {
  return _has_bit(2);
}
inline void CMessageGetFamilyGoodsListRequest::clear_entityid() {
  entityid_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageGetFamilyGoodsListRequest::entityid() const {
  return entityid_;
}
inline void CMessageGetFamilyGoodsListRequest::set_entityid(::google::protobuf::uint32 value) {
  _set_bit(2);
  entityid_ = value;
}

// optional uint32 NpcTmpID = 4;
inline bool CMessageGetFamilyGoodsListRequest::has_npctmpid() const {
  return _has_bit(3);
}
inline void CMessageGetFamilyGoodsListRequest::clear_npctmpid() {
  npctmpid_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessageGetFamilyGoodsListRequest::npctmpid() const {
  return npctmpid_;
}
inline void CMessageGetFamilyGoodsListRequest::set_npctmpid(::google::protobuf::uint32 value) {
  _set_bit(3);
  npctmpid_ = value;
}

// -------------------------------------------------------------------

// CMessageGetFamilyGoodsListResponse

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageGetFamilyGoodsListResponse::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageGetFamilyGoodsListResponse::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageGetFamilyGoodsListResponse::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageGetFamilyGoodsListResponse::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 Errcode = 2;
inline bool CMessageGetFamilyGoodsListResponse::has_errcode() const {
  return _has_bit(1);
}
inline void CMessageGetFamilyGoodsListResponse::clear_errcode() {
  errcode_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageGetFamilyGoodsListResponse::errcode() const {
  return errcode_;
}
inline void CMessageGetFamilyGoodsListResponse::set_errcode(::google::protobuf::uint32 value) {
  _set_bit(1);
  errcode_ = value;
}

// repeated .GoodItem GoodsList = 3;
inline int CMessageGetFamilyGoodsListResponse::goodslist_size() const {
  return goodslist_.size();
}
inline void CMessageGetFamilyGoodsListResponse::clear_goodslist() {
  goodslist_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::GoodItem >&
CMessageGetFamilyGoodsListResponse::goodslist() const {
  return goodslist_;
}
inline ::google::protobuf::RepeatedPtrField< ::GoodItem >*
CMessageGetFamilyGoodsListResponse::mutable_goodslist() {
  return &goodslist_;
}
inline const ::GoodItem& CMessageGetFamilyGoodsListResponse::goodslist(int index) const {
  return goodslist_.Get(index);
}
inline ::GoodItem* CMessageGetFamilyGoodsListResponse::mutable_goodslist(int index) {
  return goodslist_.Mutable(index);
}
inline ::GoodItem* CMessageGetFamilyGoodsListResponse::add_goodslist() {
  return goodslist_.Add();
}

// optional uint32 NpcTmpID = 4;
inline bool CMessageGetFamilyGoodsListResponse::has_npctmpid() const {
  return _has_bit(3);
}
inline void CMessageGetFamilyGoodsListResponse::clear_npctmpid() {
  npctmpid_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessageGetFamilyGoodsListResponse::npctmpid() const {
  return npctmpid_;
}
inline void CMessageGetFamilyGoodsListResponse::set_npctmpid(::google::protobuf::uint32 value) {
  _set_bit(3);
  npctmpid_ = value;
}

// -------------------------------------------------------------------

// CMessageGetFamilyExchangeGoodsListRequest

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageGetFamilyExchangeGoodsListRequest::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageGetFamilyExchangeGoodsListRequest::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageGetFamilyExchangeGoodsListRequest::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageGetFamilyExchangeGoodsListRequest::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 FamilyID = 2;
inline bool CMessageGetFamilyExchangeGoodsListRequest::has_familyid() const {
  return _has_bit(1);
}
inline void CMessageGetFamilyExchangeGoodsListRequest::clear_familyid() {
  familyid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageGetFamilyExchangeGoodsListRequest::familyid() const {
  return familyid_;
}
inline void CMessageGetFamilyExchangeGoodsListRequest::set_familyid(::google::protobuf::uint32 value) {
  _set_bit(1);
  familyid_ = value;
}

// optional uint32 EntityID = 3;
inline bool CMessageGetFamilyExchangeGoodsListRequest::has_entityid() const {
  return _has_bit(2);
}
inline void CMessageGetFamilyExchangeGoodsListRequest::clear_entityid() {
  entityid_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageGetFamilyExchangeGoodsListRequest::entityid() const {
  return entityid_;
}
inline void CMessageGetFamilyExchangeGoodsListRequest::set_entityid(::google::protobuf::uint32 value) {
  _set_bit(2);
  entityid_ = value;
}

// optional uint32 NpcTmpID = 4;
inline bool CMessageGetFamilyExchangeGoodsListRequest::has_npctmpid() const {
  return _has_bit(3);
}
inline void CMessageGetFamilyExchangeGoodsListRequest::clear_npctmpid() {
  npctmpid_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessageGetFamilyExchangeGoodsListRequest::npctmpid() const {
  return npctmpid_;
}
inline void CMessageGetFamilyExchangeGoodsListRequest::set_npctmpid(::google::protobuf::uint32 value) {
  _set_bit(3);
  npctmpid_ = value;
}

// -------------------------------------------------------------------

// CMessageGetFamilyExchangeGoodsListResponse

// optional .FamilyHead HeadMsg = 1;
inline bool CMessageGetFamilyExchangeGoodsListResponse::has_headmsg() const {
  return _has_bit(0);
}
inline void CMessageGetFamilyExchangeGoodsListResponse::clear_headmsg() {
  if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
  _clear_bit(0);
}
inline const ::FamilyHead& CMessageGetFamilyExchangeGoodsListResponse::headmsg() const {
  return headmsg_ != NULL ? *headmsg_ : *default_instance_->headmsg_;
}
inline ::FamilyHead* CMessageGetFamilyExchangeGoodsListResponse::mutable_headmsg() {
  _set_bit(0);
  if (headmsg_ == NULL) headmsg_ = new ::FamilyHead;
  return headmsg_;
}

// optional uint32 Errcode = 2;
inline bool CMessageGetFamilyExchangeGoodsListResponse::has_errcode() const {
  return _has_bit(1);
}
inline void CMessageGetFamilyExchangeGoodsListResponse::clear_errcode() {
  errcode_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageGetFamilyExchangeGoodsListResponse::errcode() const {
  return errcode_;
}
inline void CMessageGetFamilyExchangeGoodsListResponse::set_errcode(::google::protobuf::uint32 value) {
  _set_bit(1);
  errcode_ = value;
}

// repeated .GoodItem GoodsList = 3;
inline int CMessageGetFamilyExchangeGoodsListResponse::goodslist_size() const {
  return goodslist_.size();
}
inline void CMessageGetFamilyExchangeGoodsListResponse::clear_goodslist() {
  goodslist_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::GoodItem >&
CMessageGetFamilyExchangeGoodsListResponse::goodslist() const {
  return goodslist_;
}
inline ::google::protobuf::RepeatedPtrField< ::GoodItem >*
CMessageGetFamilyExchangeGoodsListResponse::mutable_goodslist() {
  return &goodslist_;
}
inline const ::GoodItem& CMessageGetFamilyExchangeGoodsListResponse::goodslist(int index) const {
  return goodslist_.Get(index);
}
inline ::GoodItem* CMessageGetFamilyExchangeGoodsListResponse::mutable_goodslist(int index) {
  return goodslist_.Mutable(index);
}
inline ::GoodItem* CMessageGetFamilyExchangeGoodsListResponse::add_goodslist() {
  return goodslist_.Add();
}

// optional uint32 NpcTmpID = 4;
inline bool CMessageGetFamilyExchangeGoodsListResponse::has_npctmpid() const {
  return _has_bit(3);
}
inline void CMessageGetFamilyExchangeGoodsListResponse::clear_npctmpid() {
  npctmpid_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessageGetFamilyExchangeGoodsListResponse::npctmpid() const {
  return npctmpid_;
}
inline void CMessageGetFamilyExchangeGoodsListResponse::set_npctmpid(::google::protobuf::uint32 value) {
  _set_bit(3);
  npctmpid_ = value;
}

// -------------------------------------------------------------------

// CMessageChangeFamilyGoodsListNotify

// repeated .GoodItem GoodList = 1;
inline int CMessageChangeFamilyGoodsListNotify::goodlist_size() const {
  return goodlist_.size();
}
inline void CMessageChangeFamilyGoodsListNotify::clear_goodlist() {
  goodlist_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::GoodItem >&
CMessageChangeFamilyGoodsListNotify::goodlist() const {
  return goodlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::GoodItem >*
CMessageChangeFamilyGoodsListNotify::mutable_goodlist() {
  return &goodlist_;
}
inline const ::GoodItem& CMessageChangeFamilyGoodsListNotify::goodlist(int index) const {
  return goodlist_.Get(index);
}
inline ::GoodItem* CMessageChangeFamilyGoodsListNotify::mutable_goodlist(int index) {
  return goodlist_.Mutable(index);
}
inline ::GoodItem* CMessageChangeFamilyGoodsListNotify::add_goodlist() {
  return goodlist_.Add();
}

// optional uint32 NpcTmpID = 2;
inline bool CMessageChangeFamilyGoodsListNotify::has_npctmpid() const {
  return _has_bit(1);
}
inline void CMessageChangeFamilyGoodsListNotify::clear_npctmpid() {
  npctmpid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageChangeFamilyGoodsListNotify::npctmpid() const {
  return npctmpid_;
}
inline void CMessageChangeFamilyGoodsListNotify::set_npctmpid(::google::protobuf::uint32 value) {
  _set_bit(1);
  npctmpid_ = value;
}

// -------------------------------------------------------------------

// CMessageChangeFamilyExchangeGoodsListNotify

// repeated .GoodItem GoodList = 1;
inline int CMessageChangeFamilyExchangeGoodsListNotify::goodlist_size() const {
  return goodlist_.size();
}
inline void CMessageChangeFamilyExchangeGoodsListNotify::clear_goodlist() {
  goodlist_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::GoodItem >&
CMessageChangeFamilyExchangeGoodsListNotify::goodlist() const {
  return goodlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::GoodItem >*
CMessageChangeFamilyExchangeGoodsListNotify::mutable_goodlist() {
  return &goodlist_;
}
inline const ::GoodItem& CMessageChangeFamilyExchangeGoodsListNotify::goodlist(int index) const {
  return goodlist_.Get(index);
}
inline ::GoodItem* CMessageChangeFamilyExchangeGoodsListNotify::mutable_goodlist(int index) {
  return goodlist_.Mutable(index);
}
inline ::GoodItem* CMessageChangeFamilyExchangeGoodsListNotify::add_goodlist() {
  return goodlist_.Add();
}

// -------------------------------------------------------------------

// CMessageUseFamilyLeagueItemNotify

// repeated .GoodItem GoodList = 1;
inline int CMessageUseFamilyLeagueItemNotify::goodlist_size() const {
  return goodlist_.size();
}
inline void CMessageUseFamilyLeagueItemNotify::clear_goodlist() {
  goodlist_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::GoodItem >&
CMessageUseFamilyLeagueItemNotify::goodlist() const {
  return goodlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::GoodItem >*
CMessageUseFamilyLeagueItemNotify::mutable_goodlist() {
  return &goodlist_;
}
inline const ::GoodItem& CMessageUseFamilyLeagueItemNotify::goodlist(int index) const {
  return goodlist_.Get(index);
}
inline ::GoodItem* CMessageUseFamilyLeagueItemNotify::mutable_goodlist(int index) {
  return goodlist_.Mutable(index);
}
inline ::GoodItem* CMessageUseFamilyLeagueItemNotify::add_goodlist() {
  return goodlist_.Add();
}

// optional uint32 ManagerID = 2;
inline bool CMessageUseFamilyLeagueItemNotify::has_managerid() const {
  return _has_bit(1);
}
inline void CMessageUseFamilyLeagueItemNotify::clear_managerid() {
  managerid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageUseFamilyLeagueItemNotify::managerid() const {
  return managerid_;
}
inline void CMessageUseFamilyLeagueItemNotify::set_managerid(::google::protobuf::uint32 value) {
  _set_bit(1);
  managerid_ = value;
}

// optional string ManagerName = 3;
inline bool CMessageUseFamilyLeagueItemNotify::has_managername() const {
  return _has_bit(2);
}
inline void CMessageUseFamilyLeagueItemNotify::clear_managername() {
  if (managername_ != &_default_managername_) {
    managername_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& CMessageUseFamilyLeagueItemNotify::managername() const {
  return *managername_;
}
inline void CMessageUseFamilyLeagueItemNotify::set_managername(const ::std::string& value) {
  _set_bit(2);
  if (managername_ == &_default_managername_) {
    managername_ = new ::std::string;
  }
  managername_->assign(value);
}
inline void CMessageUseFamilyLeagueItemNotify::set_managername(const char* value) {
  _set_bit(2);
  if (managername_ == &_default_managername_) {
    managername_ = new ::std::string;
  }
  managername_->assign(value);
}
inline void CMessageUseFamilyLeagueItemNotify::set_managername(const char* value, size_t size) {
  _set_bit(2);
  if (managername_ == &_default_managername_) {
    managername_ = new ::std::string;
  }
  managername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageUseFamilyLeagueItemNotify::mutable_managername() {
  _set_bit(2);
  if (managername_ == &_default_managername_) {
    managername_ = new ::std::string;
  }
  return managername_;
}

// -------------------------------------------------------------------

// CMessageGetHomeInfoRequest

// optional uint32 CharID = 1;
inline bool CMessageGetHomeInfoRequest::has_charid() const {
  return _has_bit(0);
}
inline void CMessageGetHomeInfoRequest::clear_charid() {
  charid_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageGetHomeInfoRequest::charid() const {
  return charid_;
}
inline void CMessageGetHomeInfoRequest::set_charid(::google::protobuf::uint32 value) {
  _set_bit(0);
  charid_ = value;
}

// optional uint32 FamilyID = 2;
inline bool CMessageGetHomeInfoRequest::has_familyid() const {
  return _has_bit(1);
}
inline void CMessageGetHomeInfoRequest::clear_familyid() {
  familyid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageGetHomeInfoRequest::familyid() const {
  return familyid_;
}
inline void CMessageGetHomeInfoRequest::set_familyid(::google::protobuf::uint32 value) {
  _set_bit(1);
  familyid_ = value;
}

// -------------------------------------------------------------------

// CMessageGetHomeInfoResponse

// optional uint32 CharID = 1;
inline bool CMessageGetHomeInfoResponse::has_charid() const {
  return _has_bit(0);
}
inline void CMessageGetHomeInfoResponse::clear_charid() {
  charid_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageGetHomeInfoResponse::charid() const {
  return charid_;
}
inline void CMessageGetHomeInfoResponse::set_charid(::google::protobuf::uint32 value) {
  _set_bit(0);
  charid_ = value;
}

// optional uint32 FamilyID = 2;
inline bool CMessageGetHomeInfoResponse::has_familyid() const {
  return _has_bit(1);
}
inline void CMessageGetHomeInfoResponse::clear_familyid() {
  familyid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageGetHomeInfoResponse::familyid() const {
  return familyid_;
}
inline void CMessageGetHomeInfoResponse::set_familyid(::google::protobuf::uint32 value) {
  _set_bit(1);
  familyid_ = value;
}

// optional uint32 Result = 3;
inline bool CMessageGetHomeInfoResponse::has_result() const {
  return _has_bit(2);
}
inline void CMessageGetHomeInfoResponse::clear_result() {
  result_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageGetHomeInfoResponse::result() const {
  return result_;
}
inline void CMessageGetHomeInfoResponse::set_result(::google::protobuf::uint32 value) {
  _set_bit(2);
  result_ = value;
}

// repeated uint32 Wizard = 4;
inline int CMessageGetHomeInfoResponse::wizard_size() const {
  return wizard_.size();
}
inline void CMessageGetHomeInfoResponse::clear_wizard() {
  wizard_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMessageGetHomeInfoResponse::wizard() const {
  return wizard_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMessageGetHomeInfoResponse::mutable_wizard() {
  return &wizard_;
}
inline ::google::protobuf::uint32 CMessageGetHomeInfoResponse::wizard(int index) const {
  return wizard_.Get(index);
}
inline void CMessageGetHomeInfoResponse::set_wizard(int index, ::google::protobuf::uint32 value) {
  wizard_.Set(index, value);
}
inline void CMessageGetHomeInfoResponse::add_wizard(::google::protobuf::uint32 value) {
  wizard_.Add(value);
}

// repeated uint32 Construct = 5;
inline int CMessageGetHomeInfoResponse::construct_size() const {
  return construct_.size();
}
inline void CMessageGetHomeInfoResponse::clear_construct() {
  construct_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMessageGetHomeInfoResponse::construct() const {
  return construct_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMessageGetHomeInfoResponse::mutable_construct() {
  return &construct_;
}
inline ::google::protobuf::uint32 CMessageGetHomeInfoResponse::construct(int index) const {
  return construct_.Get(index);
}
inline void CMessageGetHomeInfoResponse::set_construct(int index, ::google::protobuf::uint32 value) {
  construct_.Set(index, value);
}
inline void CMessageGetHomeInfoResponse::add_construct(::google::protobuf::uint32 value) {
  construct_.Add(value);
}

// repeated uint32 Level = 6;
inline int CMessageGetHomeInfoResponse::level_size() const {
  return level_.size();
}
inline void CMessageGetHomeInfoResponse::clear_level() {
  level_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMessageGetHomeInfoResponse::level() const {
  return level_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMessageGetHomeInfoResponse::mutable_level() {
  return &level_;
}
inline ::google::protobuf::uint32 CMessageGetHomeInfoResponse::level(int index) const {
  return level_.Get(index);
}
inline void CMessageGetHomeInfoResponse::set_level(int index, ::google::protobuf::uint32 value) {
  level_.Set(index, value);
}
inline void CMessageGetHomeInfoResponse::add_level(::google::protobuf::uint32 value) {
  level_.Add(value);
}

// repeated uint32 UpData = 7;
inline int CMessageGetHomeInfoResponse::updata_size() const {
  return updata_.size();
}
inline void CMessageGetHomeInfoResponse::clear_updata() {
  updata_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMessageGetHomeInfoResponse::updata() const {
  return updata_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMessageGetHomeInfoResponse::mutable_updata() {
  return &updata_;
}
inline ::google::protobuf::uint32 CMessageGetHomeInfoResponse::updata(int index) const {
  return updata_.Get(index);
}
inline void CMessageGetHomeInfoResponse::set_updata(int index, ::google::protobuf::uint32 value) {
  updata_.Set(index, value);
}
inline void CMessageGetHomeInfoResponse::add_updata(::google::protobuf::uint32 value) {
  updata_.Add(value);
}

// -------------------------------------------------------------------

// CMessageUpgradeHomeRequest

// optional uint32 CharID = 1;
inline bool CMessageUpgradeHomeRequest::has_charid() const {
  return _has_bit(0);
}
inline void CMessageUpgradeHomeRequest::clear_charid() {
  charid_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageUpgradeHomeRequest::charid() const {
  return charid_;
}
inline void CMessageUpgradeHomeRequest::set_charid(::google::protobuf::uint32 value) {
  _set_bit(0);
  charid_ = value;
}

// optional uint32 Type = 2;
inline bool CMessageUpgradeHomeRequest::has_type() const {
  return _has_bit(1);
}
inline void CMessageUpgradeHomeRequest::clear_type() {
  type_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageUpgradeHomeRequest::type() const {
  return type_;
}
inline void CMessageUpgradeHomeRequest::set_type(::google::protobuf::uint32 value) {
  _set_bit(1);
  type_ = value;
}

// -------------------------------------------------------------------

// CMessageUpgradeHomeResponse

// optional uint32 CharID = 1;
inline bool CMessageUpgradeHomeResponse::has_charid() const {
  return _has_bit(0);
}
inline void CMessageUpgradeHomeResponse::clear_charid() {
  charid_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageUpgradeHomeResponse::charid() const {
  return charid_;
}
inline void CMessageUpgradeHomeResponse::set_charid(::google::protobuf::uint32 value) {
  _set_bit(0);
  charid_ = value;
}

// optional uint32 Type = 2;
inline bool CMessageUpgradeHomeResponse::has_type() const {
  return _has_bit(1);
}
inline void CMessageUpgradeHomeResponse::clear_type() {
  type_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageUpgradeHomeResponse::type() const {
  return type_;
}
inline void CMessageUpgradeHomeResponse::set_type(::google::protobuf::uint32 value) {
  _set_bit(1);
  type_ = value;
}

// optional uint32 UpData = 3;
inline bool CMessageUpgradeHomeResponse::has_updata() const {
  return _has_bit(2);
}
inline void CMessageUpgradeHomeResponse::clear_updata() {
  updata_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageUpgradeHomeResponse::updata() const {
  return updata_;
}
inline void CMessageUpgradeHomeResponse::set_updata(::google::protobuf::uint32 value) {
  _set_bit(2);
  updata_ = value;
}

// -------------------------------------------------------------------

// CMessageFamilyStabilityChangedNotify

// optional uint32 Reason = 1;
inline bool CMessageFamilyStabilityChangedNotify::has_reason() const {
  return _has_bit(0);
}
inline void CMessageFamilyStabilityChangedNotify::clear_reason() {
  reason_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageFamilyStabilityChangedNotify::reason() const {
  return reason_;
}
inline void CMessageFamilyStabilityChangedNotify::set_reason(::google::protobuf::uint32 value) {
  _set_bit(0);
  reason_ = value;
}

// optional uint32 Stability = 2;
inline bool CMessageFamilyStabilityChangedNotify::has_stability() const {
  return _has_bit(1);
}
inline void CMessageFamilyStabilityChangedNotify::clear_stability() {
  stability_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageFamilyStabilityChangedNotify::stability() const {
  return stability_;
}
inline void CMessageFamilyStabilityChangedNotify::set_stability(::google::protobuf::uint32 value) {
  _set_bit(1);
  stability_ = value;
}

// optional uint32 Value = 3;
inline bool CMessageFamilyStabilityChangedNotify::has_value() const {
  return _has_bit(2);
}
inline void CMessageFamilyStabilityChangedNotify::clear_value() {
  value_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageFamilyStabilityChangedNotify::value() const {
  return value_;
}
inline void CMessageFamilyStabilityChangedNotify::set_value(::google::protobuf::uint32 value) {
  _set_bit(2);
  value_ = value;
}

// optional uint32 RoleID = 4;
inline bool CMessageFamilyStabilityChangedNotify::has_roleid() const {
  return _has_bit(3);
}
inline void CMessageFamilyStabilityChangedNotify::clear_roleid() {
  roleid_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessageFamilyStabilityChangedNotify::roleid() const {
  return roleid_;
}
inline void CMessageFamilyStabilityChangedNotify::set_roleid(::google::protobuf::uint32 value) {
  _set_bit(3);
  roleid_ = value;
}

// optional string RoleName = 5;
inline bool CMessageFamilyStabilityChangedNotify::has_rolename() const {
  return _has_bit(4);
}
inline void CMessageFamilyStabilityChangedNotify::clear_rolename() {
  if (rolename_ != &_default_rolename_) {
    rolename_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& CMessageFamilyStabilityChangedNotify::rolename() const {
  return *rolename_;
}
inline void CMessageFamilyStabilityChangedNotify::set_rolename(const ::std::string& value) {
  _set_bit(4);
  if (rolename_ == &_default_rolename_) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void CMessageFamilyStabilityChangedNotify::set_rolename(const char* value) {
  _set_bit(4);
  if (rolename_ == &_default_rolename_) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void CMessageFamilyStabilityChangedNotify::set_rolename(const char* value, size_t size) {
  _set_bit(4);
  if (rolename_ == &_default_rolename_) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageFamilyStabilityChangedNotify::mutable_rolename() {
  _set_bit(4);
  if (rolename_ == &_default_rolename_) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}

// optional uint32 OnLineTime = 6;
inline bool CMessageFamilyStabilityChangedNotify::has_onlinetime() const {
  return _has_bit(5);
}
inline void CMessageFamilyStabilityChangedNotify::clear_onlinetime() {
  onlinetime_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 CMessageFamilyStabilityChangedNotify::onlinetime() const {
  return onlinetime_;
}
inline void CMessageFamilyStabilityChangedNotify::set_onlinetime(::google::protobuf::uint32 value) {
  _set_bit(5);
  onlinetime_ = value;
}

#endif  // PROTOBUF_familymessage_5fpb_2ehxx__INCLUDED
