// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_corpsinfo_5fpb_2ehxx__INCLUDED
#define PROTOBUF_corpsinfo_5fpb_2ehxx__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "familydbinfo_pb.hxx.pb.h"

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_corpsinfo_5fpb_2ehxx();
void protobuf_AssignDesc_corpsinfo_5fpb_2ehxx();
void protobuf_ShutdownFile_corpsinfo_5fpb_2ehxx();

class CorpsProperty;
class PBCorpsBattle;
class PBCorpsBoss;
class PBCorpsBattleList;
class PBCorpsMember;
class PBCorpsMemberList;
class PBCorpsApplyList;
class PBCorpsBasicInfo;
class CorpsInfoList;
class PBCorpsFamilyInfo;
class PBCorpsFamilyInfoList;
class PBUnionBasicInfo;
class PBTaskListInfo;
class PBCorpsPublishInfo;

// ===================================================================

class CorpsProperty : public ::google::protobuf::Message {
 public:
  CorpsProperty();
  virtual ~CorpsProperty();
  
  CorpsProperty(const CorpsProperty& from);
  
  inline CorpsProperty& operator=(const CorpsProperty& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CorpsProperty& default_instance();
  void Swap(CorpsProperty* other);
  
  // implements Message ----------------------------------------------
  
  CorpsProperty* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CorpsProperty& from);
  void MergeFrom(const CorpsProperty& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 CorpsMoney = 1;
  inline bool has_corpsmoney() const;
  inline void clear_corpsmoney();
  static const int kCorpsMoneyFieldNumber = 1;
  inline ::google::protobuf::uint32 corpsmoney() const;
  inline void set_corpsmoney(::google::protobuf::uint32 value);
  
  // optional string CorpsRooterName = 2;
  inline bool has_corpsrootername() const;
  inline void clear_corpsrootername();
  static const int kCorpsRooterNameFieldNumber = 2;
  inline const ::std::string& corpsrootername() const;
  inline void set_corpsrootername(const ::std::string& value);
  inline void set_corpsrootername(const char* value);
  inline void set_corpsrootername(const char* value, size_t size);
  inline ::std::string* mutable_corpsrootername();
  
  // optional uint32 CorpsFamilyNum = 3;
  inline bool has_corpsfamilynum() const;
  inline void clear_corpsfamilynum();
  static const int kCorpsFamilyNumFieldNumber = 3;
  inline ::google::protobuf::uint32 corpsfamilynum() const;
  inline void set_corpsfamilynum(::google::protobuf::uint32 value);
  
  // optional uint32 CorpsLevel = 4;
  inline bool has_corpslevel() const;
  inline void clear_corpslevel();
  static const int kCorpsLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 corpslevel() const;
  inline void set_corpslevel(::google::protobuf::uint32 value);
  
  // optional string CorpsButtullin = 5;
  inline bool has_corpsbuttullin() const;
  inline void clear_corpsbuttullin();
  static const int kCorpsButtullinFieldNumber = 5;
  inline const ::std::string& corpsbuttullin() const;
  inline void set_corpsbuttullin(const ::std::string& value);
  inline void set_corpsbuttullin(const char* value);
  inline void set_corpsbuttullin(const char* value, size_t size);
  inline ::std::string* mutable_corpsbuttullin();
  
  // optional uint32 CorpsMemberNum = 6;
  inline bool has_corpsmembernum() const;
  inline void clear_corpsmembernum();
  static const int kCorpsMemberNumFieldNumber = 6;
  inline ::google::protobuf::uint32 corpsmembernum() const;
  inline void set_corpsmembernum(::google::protobuf::uint32 value);
  
  // optional uint32 CorpsRooterID = 7;
  inline bool has_corpsrooterid() const;
  inline void clear_corpsrooterid();
  static const int kCorpsRooterIDFieldNumber = 7;
  inline ::google::protobuf::uint32 corpsrooterid() const;
  inline void set_corpsrooterid(::google::protobuf::uint32 value);
  
  // optional uint32 CorpsID = 8;
  inline bool has_corpsid() const;
  inline void clear_corpsid();
  static const int kCorpsIDFieldNumber = 8;
  inline ::google::protobuf::uint32 corpsid() const;
  inline void set_corpsid(::google::protobuf::uint32 value);
  
  // optional string CorpsName = 9;
  inline bool has_corpsname() const;
  inline void clear_corpsname();
  static const int kCorpsNameFieldNumber = 9;
  inline const ::std::string& corpsname() const;
  inline void set_corpsname(const ::std::string& value);
  inline void set_corpsname(const char* value);
  inline void set_corpsname(const char* value, size_t size);
  inline ::std::string* mutable_corpsname();
  
  // optional uint32 CorpsGlory = 10;
  inline bool has_corpsglory() const;
  inline void clear_corpsglory();
  static const int kCorpsGloryFieldNumber = 10;
  inline ::google::protobuf::uint32 corpsglory() const;
  inline void set_corpsglory(::google::protobuf::uint32 value);
  
  // optional uint32 CorpsDevelop = 11;
  inline bool has_corpsdevelop() const;
  inline void clear_corpsdevelop();
  static const int kCorpsDevelopFieldNumber = 11;
  inline ::google::protobuf::uint32 corpsdevelop() const;
  inline void set_corpsdevelop(::google::protobuf::uint32 value);
  
  // optional uint32 WarRank = 12;
  inline bool has_warrank() const;
  inline void clear_warrank();
  static const int kWarRankFieldNumber = 12;
  inline ::google::protobuf::uint32 warrank() const;
  inline void set_warrank(::google::protobuf::uint32 value);
  
  // optional uint32 WarWinNum = 13;
  inline bool has_warwinnum() const;
  inline void clear_warwinnum();
  static const int kWarWinNumFieldNumber = 13;
  inline ::google::protobuf::uint32 warwinnum() const;
  inline void set_warwinnum(::google::protobuf::uint32 value);
  
  // optional uint32 WarLostNum = 14;
  inline bool has_warlostnum() const;
  inline void clear_warlostnum();
  static const int kWarLostNumFieldNumber = 14;
  inline ::google::protobuf::uint32 warlostnum() const;
  inline void set_warlostnum(::google::protobuf::uint32 value);
  
  // optional uint32 FamilyStarLevel = 15;
  inline bool has_familystarlevel() const;
  inline void clear_familystarlevel();
  static const int kFamilyStarLevelFieldNumber = 15;
  inline ::google::protobuf::uint32 familystarlevel() const;
  inline void set_familystarlevel(::google::protobuf::uint32 value);
  
  // optional uint32 WarExp = 16;
  inline bool has_warexp() const;
  inline void clear_warexp();
  static const int kWarExpFieldNumber = 16;
  inline ::google::protobuf::uint32 warexp() const;
  inline void set_warexp(::google::protobuf::uint32 value);
  
  // optional uint32 WarMaxExp = 17;
  inline bool has_warmaxexp() const;
  inline void clear_warmaxexp();
  static const int kWarMaxExpFieldNumber = 17;
  inline ::google::protobuf::uint32 warmaxexp() const;
  inline void set_warmaxexp(::google::protobuf::uint32 value);
  
  // optional uint32 MaxFamilyNum = 18;
  inline bool has_maxfamilynum() const;
  inline void clear_maxfamilynum();
  static const int kMaxFamilyNumFieldNumber = 18;
  inline ::google::protobuf::uint32 maxfamilynum() const;
  inline void set_maxfamilynum(::google::protobuf::uint32 value);
  
  // optional uint32 CanLevelUp = 19;
  inline bool has_canlevelup() const;
  inline void clear_canlevelup();
  static const int kCanLevelUpFieldNumber = 19;
  inline ::google::protobuf::uint32 canlevelup() const;
  inline void set_canlevelup(::google::protobuf::uint32 value);
  
  // optional uint32 ChallengeStatus = 20;
  inline bool has_challengestatus() const;
  inline void clear_challengestatus();
  static const int kChallengeStatusFieldNumber = 20;
  inline ::google::protobuf::uint32 challengestatus() const;
  inline void set_challengestatus(::google::protobuf::uint32 value);
  
  // optional uint32 ChallengeMoney = 21;
  inline bool has_challengemoney() const;
  inline void clear_challengemoney();
  static const int kChallengeMoneyFieldNumber = 21;
  inline ::google::protobuf::uint32 challengemoney() const;
  inline void set_challengemoney(::google::protobuf::uint32 value);
  
  // optional uint32 MaxGeneralNum = 22;
  inline bool has_maxgeneralnum() const;
  inline void clear_maxgeneralnum();
  static const int kMaxGeneralNumFieldNumber = 22;
  inline ::google::protobuf::uint32 maxgeneralnum() const;
  inline void set_maxgeneralnum(::google::protobuf::uint32 value);
  
  // optional uint32 MaxCounsellorNum = 23;
  inline bool has_maxcounsellornum() const;
  inline void clear_maxcounsellornum();
  static const int kMaxCounsellorNumFieldNumber = 23;
  inline ::google::protobuf::uint32 maxcounsellornum() const;
  inline void set_maxcounsellornum(::google::protobuf::uint32 value);
  
  // repeated .PBCorpsBattle BattleInfo = 24;
  inline int battleinfo_size() const;
  inline void clear_battleinfo();
  static const int kBattleInfoFieldNumber = 24;
  inline const ::google::protobuf::RepeatedPtrField< ::PBCorpsBattle >& battleinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBCorpsBattle >* mutable_battleinfo();
  inline const ::PBCorpsBattle& battleinfo(int index) const;
  inline ::PBCorpsBattle* mutable_battleinfo(int index);
  inline ::PBCorpsBattle* add_battleinfo();
  
  // optional uint32 CountryID = 25;
  inline bool has_countryid() const;
  inline void clear_countryid();
  static const int kCountryIDFieldNumber = 25;
  inline ::google::protobuf::uint32 countryid() const;
  inline void set_countryid(::google::protobuf::uint32 value);
  
  // optional uint32 Color = 26;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 26;
  inline ::google::protobuf::uint32 color() const;
  inline void set_color(::google::protobuf::uint32 value);
  
  // optional uint32 MainCityMap = 27;
  inline bool has_maincitymap() const;
  inline void clear_maincitymap();
  static const int kMainCityMapFieldNumber = 27;
  inline ::google::protobuf::uint32 maincitymap() const;
  inline void set_maincitymap(::google::protobuf::uint32 value);
  
  // optional uint32 LevelGlory = 29;
  inline bool has_levelglory() const;
  inline void clear_levelglory();
  static const int kLevelGloryFieldNumber = 29;
  inline ::google::protobuf::uint32 levelglory() const;
  inline void set_levelglory(::google::protobuf::uint32 value);
  
  // optional uint32 LevleMoney = 30;
  inline bool has_levlemoney() const;
  inline void clear_levlemoney();
  static const int kLevleMoneyFieldNumber = 30;
  inline ::google::protobuf::uint32 levlemoney() const;
  inline void set_levlemoney(::google::protobuf::uint32 value);
  
  // optional uint32 BOSSRefineValue = 31;
  inline bool has_bossrefinevalue() const;
  inline void clear_bossrefinevalue();
  static const int kBOSSRefineValueFieldNumber = 31;
  inline ::google::protobuf::uint32 bossrefinevalue() const;
  inline void set_bossrefinevalue(::google::protobuf::uint32 value);
  
  // optional uint32 RefineValue = 32;
  inline bool has_refinevalue() const;
  inline void clear_refinevalue();
  static const int kRefineValueFieldNumber = 32;
  inline ::google::protobuf::uint32 refinevalue() const;
  inline void set_refinevalue(::google::protobuf::uint32 value);
  
  // repeated .PBCorpsBoss BossList = 33;
  inline int bosslist_size() const;
  inline void clear_bosslist();
  static const int kBossListFieldNumber = 33;
  inline const ::google::protobuf::RepeatedPtrField< ::PBCorpsBoss >& bosslist() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBCorpsBoss >* mutable_bosslist();
  inline const ::PBCorpsBoss& bosslist(int index) const;
  inline ::PBCorpsBoss* mutable_bosslist(int index);
  inline ::PBCorpsBoss* add_bosslist();
  
  // optional uint32 BossCDLimit = 34;
  inline bool has_bosscdlimit() const;
  inline void clear_bosscdlimit();
  static const int kBossCDLimitFieldNumber = 34;
  inline ::google::protobuf::uint32 bosscdlimit() const;
  inline void set_bosscdlimit(::google::protobuf::uint32 value);
  
  // optional uint32 BossCDCool = 35;
  inline bool has_bosscdcool() const;
  inline void clear_bosscdcool();
  static const int kBossCDCoolFieldNumber = 35;
  inline ::google::protobuf::uint32 bosscdcool() const;
  inline void set_bosscdcool(::google::protobuf::uint32 value);
  
  // optional uint32 BossRepetionOpen = 36;
  inline bool has_bossrepetionopen() const;
  inline void clear_bossrepetionopen();
  static const int kBossRepetionOpenFieldNumber = 36;
  inline ::google::protobuf::uint32 bossrepetionopen() const;
  inline void set_bossrepetionopen(::google::protobuf::uint32 value);
  
  // optional uint32 CorpsCurBossID = 37;
  inline bool has_corpscurbossid() const;
  inline void clear_corpscurbossid();
  static const int kCorpsCurBossIDFieldNumber = 37;
  inline ::google::protobuf::uint32 corpscurbossid() const;
  inline void set_corpscurbossid(::google::protobuf::uint32 value);
  
  // optional uint32 CorpsBossScore = 38;
  inline bool has_corpsbossscore() const;
  inline void clear_corpsbossscore();
  static const int kCorpsBossScoreFieldNumber = 38;
  inline ::google::protobuf::uint32 corpsbossscore() const;
  inline void set_corpsbossscore(::google::protobuf::uint32 value);
  
  // optional uint32 CorpsCollectActive = 39;
  inline bool has_corpscollectactive() const;
  inline void clear_corpscollectactive();
  static const int kCorpsCollectActiveFieldNumber = 39;
  inline ::google::protobuf::uint32 corpscollectactive() const;
  inline void set_corpscollectactive(::google::protobuf::uint32 value);
  
  // optional uint32 CorpsReptionOpenTime = 40;
  inline bool has_corpsreptionopentime() const;
  inline void clear_corpsreptionopentime();
  static const int kCorpsReptionOpenTimeFieldNumber = 40;
  inline ::google::protobuf::uint32 corpsreptionopentime() const;
  inline void set_corpsreptionopentime(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 corpsmoney_;
  ::std::string* corpsrootername_;
  static const ::std::string _default_corpsrootername_;
  ::google::protobuf::uint32 corpsfamilynum_;
  ::google::protobuf::uint32 corpslevel_;
  ::std::string* corpsbuttullin_;
  static const ::std::string _default_corpsbuttullin_;
  ::google::protobuf::uint32 corpsmembernum_;
  ::google::protobuf::uint32 corpsrooterid_;
  ::google::protobuf::uint32 corpsid_;
  ::std::string* corpsname_;
  static const ::std::string _default_corpsname_;
  ::google::protobuf::uint32 corpsglory_;
  ::google::protobuf::uint32 corpsdevelop_;
  ::google::protobuf::uint32 warrank_;
  ::google::protobuf::uint32 warwinnum_;
  ::google::protobuf::uint32 warlostnum_;
  ::google::protobuf::uint32 familystarlevel_;
  ::google::protobuf::uint32 warexp_;
  ::google::protobuf::uint32 warmaxexp_;
  ::google::protobuf::uint32 maxfamilynum_;
  ::google::protobuf::uint32 canlevelup_;
  ::google::protobuf::uint32 challengestatus_;
  ::google::protobuf::uint32 challengemoney_;
  ::google::protobuf::uint32 maxgeneralnum_;
  ::google::protobuf::uint32 maxcounsellornum_;
  ::google::protobuf::RepeatedPtrField< ::PBCorpsBattle > battleinfo_;
  ::google::protobuf::uint32 countryid_;
  ::google::protobuf::uint32 color_;
  ::google::protobuf::uint32 maincitymap_;
  ::google::protobuf::uint32 levelglory_;
  ::google::protobuf::uint32 levlemoney_;
  ::google::protobuf::uint32 bossrefinevalue_;
  ::google::protobuf::uint32 refinevalue_;
  ::google::protobuf::RepeatedPtrField< ::PBCorpsBoss > bosslist_;
  ::google::protobuf::uint32 bosscdlimit_;
  ::google::protobuf::uint32 bosscdcool_;
  ::google::protobuf::uint32 bossrepetionopen_;
  ::google::protobuf::uint32 corpscurbossid_;
  ::google::protobuf::uint32 corpsbossscore_;
  ::google::protobuf::uint32 corpscollectactive_;
  ::google::protobuf::uint32 corpsreptionopentime_;
  friend void  protobuf_AddDesc_corpsinfo_5fpb_2ehxx();
  friend void protobuf_AssignDesc_corpsinfo_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_corpsinfo_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(39 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CorpsProperty* default_instance_;
};
// -------------------------------------------------------------------

class PBCorpsBattle : public ::google::protobuf::Message {
 public:
  PBCorpsBattle();
  virtual ~PBCorpsBattle();
  
  PBCorpsBattle(const PBCorpsBattle& from);
  
  inline PBCorpsBattle& operator=(const PBCorpsBattle& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBCorpsBattle& default_instance();
  void Swap(PBCorpsBattle* other);
  
  // implements Message ----------------------------------------------
  
  PBCorpsBattle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBCorpsBattle& from);
  void MergeFrom(const PBCorpsBattle& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 NpcID = 1;
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcIDFieldNumber = 1;
  inline ::google::protobuf::uint32 npcid() const;
  inline void set_npcid(::google::protobuf::uint32 value);
  
  // optional uint32 NpcStatus = 2;
  inline bool has_npcstatus() const;
  inline void clear_npcstatus();
  static const int kNpcStatusFieldNumber = 2;
  inline ::google::protobuf::uint32 npcstatus() const;
  inline void set_npcstatus(::google::protobuf::uint32 value);
  
  // optional uint32 WarStatus = 3;
  inline bool has_warstatus() const;
  inline void clear_warstatus();
  static const int kWarStatusFieldNumber = 3;
  inline ::google::protobuf::uint32 warstatus() const;
  inline void set_warstatus(::google::protobuf::uint32 value);
  
  // optional string DesCorpsName = 4;
  inline bool has_descorpsname() const;
  inline void clear_descorpsname();
  static const int kDesCorpsNameFieldNumber = 4;
  inline const ::std::string& descorpsname() const;
  inline void set_descorpsname(const ::std::string& value);
  inline void set_descorpsname(const char* value);
  inline void set_descorpsname(const char* value, size_t size);
  inline ::std::string* mutable_descorpsname();
  
  // optional uint32 Type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // optional uint32 BidMoney = 6;
  inline bool has_bidmoney() const;
  inline void clear_bidmoney();
  static const int kBidMoneyFieldNumber = 6;
  inline ::google::protobuf::uint32 bidmoney() const;
  inline void set_bidmoney(::google::protobuf::uint32 value);
  
  // optional uint32 DesCorpsID = 7;
  inline bool has_descorpsid() const;
  inline void clear_descorpsid();
  static const int kDesCorpsIDFieldNumber = 7;
  inline ::google::protobuf::uint32 descorpsid() const;
  inline void set_descorpsid(::google::protobuf::uint32 value);
  
  // optional uint32 MapID = 8;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIDFieldNumber = 8;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);
  
  // optional uint32 Time = 9;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 9;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);
  
  // optional uint32 CorpsID = 10;
  inline bool has_corpsid() const;
  inline void clear_corpsid();
  static const int kCorpsIDFieldNumber = 10;
  inline ::google::protobuf::uint32 corpsid() const;
  inline void set_corpsid(::google::protobuf::uint32 value);
  
  // optional string CorpsName = 11;
  inline bool has_corpsname() const;
  inline void clear_corpsname();
  static const int kCorpsNameFieldNumber = 11;
  inline const ::std::string& corpsname() const;
  inline void set_corpsname(const ::std::string& value);
  inline void set_corpsname(const char* value);
  inline void set_corpsname(const char* value, size_t size);
  inline ::std::string* mutable_corpsname();
  
  // optional string RooterName = 12;
  inline bool has_rootername() const;
  inline void clear_rootername();
  static const int kRooterNameFieldNumber = 12;
  inline const ::std::string& rootername() const;
  inline void set_rootername(const ::std::string& value);
  inline void set_rootername(const char* value);
  inline void set_rootername(const char* value, size_t size);
  inline ::std::string* mutable_rootername();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 npcid_;
  ::google::protobuf::uint32 npcstatus_;
  ::google::protobuf::uint32 warstatus_;
  ::std::string* descorpsname_;
  static const ::std::string _default_descorpsname_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 bidmoney_;
  ::google::protobuf::uint32 descorpsid_;
  ::google::protobuf::uint32 mapid_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 corpsid_;
  ::std::string* corpsname_;
  static const ::std::string _default_corpsname_;
  ::std::string* rootername_;
  static const ::std::string _default_rootername_;
  friend void  protobuf_AddDesc_corpsinfo_5fpb_2ehxx();
  friend void protobuf_AssignDesc_corpsinfo_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_corpsinfo_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PBCorpsBattle* default_instance_;
};
// -------------------------------------------------------------------

class PBCorpsBoss : public ::google::protobuf::Message {
 public:
  PBCorpsBoss();
  virtual ~PBCorpsBoss();
  
  PBCorpsBoss(const PBCorpsBoss& from);
  
  inline PBCorpsBoss& operator=(const PBCorpsBoss& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBCorpsBoss& default_instance();
  void Swap(PBCorpsBoss* other);
  
  // implements Message ----------------------------------------------
  
  PBCorpsBoss* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBCorpsBoss& from);
  void MergeFrom(const PBCorpsBoss& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 BossId = 1;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIdFieldNumber = 1;
  inline ::google::protobuf::uint32 bossid() const;
  inline void set_bossid(::google::protobuf::uint32 value);
  
  // optional uint32 CanIntoTimes = 2;
  inline bool has_canintotimes() const;
  inline void clear_canintotimes();
  static const int kCanIntoTimesFieldNumber = 2;
  inline ::google::protobuf::uint32 canintotimes() const;
  inline void set_canintotimes(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 bossid_;
  ::google::protobuf::uint32 canintotimes_;
  friend void  protobuf_AddDesc_corpsinfo_5fpb_2ehxx();
  friend void protobuf_AssignDesc_corpsinfo_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_corpsinfo_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PBCorpsBoss* default_instance_;
};
// -------------------------------------------------------------------

class PBCorpsBattleList : public ::google::protobuf::Message {
 public:
  PBCorpsBattleList();
  virtual ~PBCorpsBattleList();
  
  PBCorpsBattleList(const PBCorpsBattleList& from);
  
  inline PBCorpsBattleList& operator=(const PBCorpsBattleList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBCorpsBattleList& default_instance();
  void Swap(PBCorpsBattleList* other);
  
  // implements Message ----------------------------------------------
  
  PBCorpsBattleList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBCorpsBattleList& from);
  void MergeFrom(const PBCorpsBattleList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .PBCorpsBattle BattleList = 1;
  inline int battlelist_size() const;
  inline void clear_battlelist();
  static const int kBattleListFieldNumber = 1;
  inline const ::google::protobuf::RepeatedPtrField< ::PBCorpsBattle >& battlelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBCorpsBattle >* mutable_battlelist();
  inline const ::PBCorpsBattle& battlelist(int index) const;
  inline ::PBCorpsBattle* mutable_battlelist(int index);
  inline ::PBCorpsBattle* add_battlelist();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::PBCorpsBattle > battlelist_;
  friend void  protobuf_AddDesc_corpsinfo_5fpb_2ehxx();
  friend void protobuf_AssignDesc_corpsinfo_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_corpsinfo_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PBCorpsBattleList* default_instance_;
};
// -------------------------------------------------------------------

class PBCorpsMember : public ::google::protobuf::Message {
 public:
  PBCorpsMember();
  virtual ~PBCorpsMember();
  
  PBCorpsMember(const PBCorpsMember& from);
  
  inline PBCorpsMember& operator=(const PBCorpsMember& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBCorpsMember& default_instance();
  void Swap(PBCorpsMember* other);
  
  // implements Message ----------------------------------------------
  
  PBCorpsMember* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBCorpsMember& from);
  void MergeFrom(const PBCorpsMember& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .PBFamilyMemberList FamilyMemberList = 1;
  inline bool has_familymemberlist() const;
  inline void clear_familymemberlist();
  static const int kFamilyMemberListFieldNumber = 1;
  inline const ::PBFamilyMemberList& familymemberlist() const;
  inline ::PBFamilyMemberList* mutable_familymemberlist();
  
  // optional .FamilyData FamilyProperty = 2;
  inline bool has_familyproperty() const;
  inline void clear_familyproperty();
  static const int kFamilyPropertyFieldNumber = 2;
  inline const ::FamilyData& familyproperty() const;
  inline ::FamilyData* mutable_familyproperty();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::PBFamilyMemberList* familymemberlist_;
  ::FamilyData* familyproperty_;
  friend void  protobuf_AddDesc_corpsinfo_5fpb_2ehxx();
  friend void protobuf_AssignDesc_corpsinfo_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_corpsinfo_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PBCorpsMember* default_instance_;
};
// -------------------------------------------------------------------

class PBCorpsMemberList : public ::google::protobuf::Message {
 public:
  PBCorpsMemberList();
  virtual ~PBCorpsMemberList();
  
  PBCorpsMemberList(const PBCorpsMemberList& from);
  
  inline PBCorpsMemberList& operator=(const PBCorpsMemberList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBCorpsMemberList& default_instance();
  void Swap(PBCorpsMemberList* other);
  
  // implements Message ----------------------------------------------
  
  PBCorpsMemberList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBCorpsMemberList& from);
  void MergeFrom(const PBCorpsMemberList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .PBCorpsMember CorpsMemberList = 1;
  inline int corpsmemberlist_size() const;
  inline void clear_corpsmemberlist();
  static const int kCorpsMemberListFieldNumber = 1;
  inline const ::google::protobuf::RepeatedPtrField< ::PBCorpsMember >& corpsmemberlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBCorpsMember >* mutable_corpsmemberlist();
  inline const ::PBCorpsMember& corpsmemberlist(int index) const;
  inline ::PBCorpsMember* mutable_corpsmemberlist(int index);
  inline ::PBCorpsMember* add_corpsmemberlist();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::PBCorpsMember > corpsmemberlist_;
  friend void  protobuf_AddDesc_corpsinfo_5fpb_2ehxx();
  friend void protobuf_AssignDesc_corpsinfo_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_corpsinfo_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PBCorpsMemberList* default_instance_;
};
// -------------------------------------------------------------------

class PBCorpsApplyList : public ::google::protobuf::Message {
 public:
  PBCorpsApplyList();
  virtual ~PBCorpsApplyList();
  
  PBCorpsApplyList(const PBCorpsApplyList& from);
  
  inline PBCorpsApplyList& operator=(const PBCorpsApplyList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBCorpsApplyList& default_instance();
  void Swap(PBCorpsApplyList* other);
  
  // implements Message ----------------------------------------------
  
  PBCorpsApplyList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBCorpsApplyList& from);
  void MergeFrom(const PBCorpsApplyList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .FamilyData ApplyList = 1;
  inline int applylist_size() const;
  inline void clear_applylist();
  static const int kApplyListFieldNumber = 1;
  inline const ::google::protobuf::RepeatedPtrField< ::FamilyData >& applylist() const;
  inline ::google::protobuf::RepeatedPtrField< ::FamilyData >* mutable_applylist();
  inline const ::FamilyData& applylist(int index) const;
  inline ::FamilyData* mutable_applylist(int index);
  inline ::FamilyData* add_applylist();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::FamilyData > applylist_;
  friend void  protobuf_AddDesc_corpsinfo_5fpb_2ehxx();
  friend void protobuf_AssignDesc_corpsinfo_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_corpsinfo_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PBCorpsApplyList* default_instance_;
};
// -------------------------------------------------------------------

class PBCorpsBasicInfo : public ::google::protobuf::Message {
 public:
  PBCorpsBasicInfo();
  virtual ~PBCorpsBasicInfo();
  
  PBCorpsBasicInfo(const PBCorpsBasicInfo& from);
  
  inline PBCorpsBasicInfo& operator=(const PBCorpsBasicInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBCorpsBasicInfo& default_instance();
  void Swap(PBCorpsBasicInfo* other);
  
  // implements Message ----------------------------------------------
  
  PBCorpsBasicInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBCorpsBasicInfo& from);
  void MergeFrom(const PBCorpsBasicInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 CorpsMemberNum = 1;
  inline bool has_corpsmembernum() const;
  inline void clear_corpsmembernum();
  static const int kCorpsMemberNumFieldNumber = 1;
  inline ::google::protobuf::uint32 corpsmembernum() const;
  inline void set_corpsmembernum(::google::protobuf::uint32 value);
  
  // optional uint32 CorpsFamilyNum = 2;
  inline bool has_corpsfamilynum() const;
  inline void clear_corpsfamilynum();
  static const int kCorpsFamilyNumFieldNumber = 2;
  inline ::google::protobuf::uint32 corpsfamilynum() const;
  inline void set_corpsfamilynum(::google::protobuf::uint32 value);
  
  // optional uint32 CorpsID = 3;
  inline bool has_corpsid() const;
  inline void clear_corpsid();
  static const int kCorpsIDFieldNumber = 3;
  inline ::google::protobuf::uint32 corpsid() const;
  inline void set_corpsid(::google::protobuf::uint32 value);
  
  // optional uint32 CorpsMoney = 4;
  inline bool has_corpsmoney() const;
  inline void clear_corpsmoney();
  static const int kCorpsMoneyFieldNumber = 4;
  inline ::google::protobuf::uint32 corpsmoney() const;
  inline void set_corpsmoney(::google::protobuf::uint32 value);
  
  // optional string CorpsRooterName = 5;
  inline bool has_corpsrootername() const;
  inline void clear_corpsrootername();
  static const int kCorpsRooterNameFieldNumber = 5;
  inline const ::std::string& corpsrootername() const;
  inline void set_corpsrootername(const ::std::string& value);
  inline void set_corpsrootername(const char* value);
  inline void set_corpsrootername(const char* value, size_t size);
  inline ::std::string* mutable_corpsrootername();
  
  // optional uint32 CorpsRooterID = 6;
  inline bool has_corpsrooterid() const;
  inline void clear_corpsrooterid();
  static const int kCorpsRooterIDFieldNumber = 6;
  inline ::google::protobuf::uint32 corpsrooterid() const;
  inline void set_corpsrooterid(::google::protobuf::uint32 value);
  
  // optional uint32 CorpsLevel = 7;
  inline bool has_corpslevel() const;
  inline void clear_corpslevel();
  static const int kCorpsLevelFieldNumber = 7;
  inline ::google::protobuf::uint32 corpslevel() const;
  inline void set_corpslevel(::google::protobuf::uint32 value);
  
  // optional string CorpsName = 8;
  inline bool has_corpsname() const;
  inline void clear_corpsname();
  static const int kCorpsNameFieldNumber = 8;
  inline const ::std::string& corpsname() const;
  inline void set_corpsname(const ::std::string& value);
  inline void set_corpsname(const char* value);
  inline void set_corpsname(const char* value, size_t size);
  inline ::std::string* mutable_corpsname();
  
  // optional uint32 CorpsGlory = 9;
  inline bool has_corpsglory() const;
  inline void clear_corpsglory();
  static const int kCorpsGloryFieldNumber = 9;
  inline ::google::protobuf::uint32 corpsglory() const;
  inline void set_corpsglory(::google::protobuf::uint32 value);
  
  // optional uint32 CorpsDevelop = 10;
  inline bool has_corpsdevelop() const;
  inline void clear_corpsdevelop();
  static const int kCorpsDevelopFieldNumber = 10;
  inline ::google::protobuf::uint32 corpsdevelop() const;
  inline void set_corpsdevelop(::google::protobuf::uint32 value);
  
  // optional uint32 MaxFamilyNum = 11;
  inline bool has_maxfamilynum() const;
  inline void clear_maxfamilynum();
  static const int kMaxFamilyNumFieldNumber = 11;
  inline ::google::protobuf::uint32 maxfamilynum() const;
  inline void set_maxfamilynum(::google::protobuf::uint32 value);
  
  // optional uint32 CorpsStarLevel = 12;
  inline bool has_corpsstarlevel() const;
  inline void clear_corpsstarlevel();
  static const int kCorpsStarLevelFieldNumber = 12;
  inline ::google::protobuf::uint32 corpsstarlevel() const;
  inline void set_corpsstarlevel(::google::protobuf::uint32 value);
  
  // optional uint32 MainCityMap = 13;
  inline bool has_maincitymap() const;
  inline void clear_maincitymap();
  static const int kMainCityMapFieldNumber = 13;
  inline ::google::protobuf::uint32 maincitymap() const;
  inline void set_maincitymap(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 corpsmembernum_;
  ::google::protobuf::uint32 corpsfamilynum_;
  ::google::protobuf::uint32 corpsid_;
  ::google::protobuf::uint32 corpsmoney_;
  ::std::string* corpsrootername_;
  static const ::std::string _default_corpsrootername_;
  ::google::protobuf::uint32 corpsrooterid_;
  ::google::protobuf::uint32 corpslevel_;
  ::std::string* corpsname_;
  static const ::std::string _default_corpsname_;
  ::google::protobuf::uint32 corpsglory_;
  ::google::protobuf::uint32 corpsdevelop_;
  ::google::protobuf::uint32 maxfamilynum_;
  ::google::protobuf::uint32 corpsstarlevel_;
  ::google::protobuf::uint32 maincitymap_;
  friend void  protobuf_AddDesc_corpsinfo_5fpb_2ehxx();
  friend void protobuf_AssignDesc_corpsinfo_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_corpsinfo_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PBCorpsBasicInfo* default_instance_;
};
// -------------------------------------------------------------------

class CorpsInfoList : public ::google::protobuf::Message {
 public:
  CorpsInfoList();
  virtual ~CorpsInfoList();
  
  CorpsInfoList(const CorpsInfoList& from);
  
  inline CorpsInfoList& operator=(const CorpsInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CorpsInfoList& default_instance();
  void Swap(CorpsInfoList* other);
  
  // implements Message ----------------------------------------------
  
  CorpsInfoList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CorpsInfoList& from);
  void MergeFrom(const CorpsInfoList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .PBCorpsBasicInfo CorpsList = 1;
  inline int corpslist_size() const;
  inline void clear_corpslist();
  static const int kCorpsListFieldNumber = 1;
  inline const ::google::protobuf::RepeatedPtrField< ::PBCorpsBasicInfo >& corpslist() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBCorpsBasicInfo >* mutable_corpslist();
  inline const ::PBCorpsBasicInfo& corpslist(int index) const;
  inline ::PBCorpsBasicInfo* mutable_corpslist(int index);
  inline ::PBCorpsBasicInfo* add_corpslist();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::PBCorpsBasicInfo > corpslist_;
  friend void  protobuf_AddDesc_corpsinfo_5fpb_2ehxx();
  friend void protobuf_AssignDesc_corpsinfo_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_corpsinfo_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CorpsInfoList* default_instance_;
};
// -------------------------------------------------------------------

class PBCorpsFamilyInfo : public ::google::protobuf::Message {
 public:
  PBCorpsFamilyInfo();
  virtual ~PBCorpsFamilyInfo();
  
  PBCorpsFamilyInfo(const PBCorpsFamilyInfo& from);
  
  inline PBCorpsFamilyInfo& operator=(const PBCorpsFamilyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBCorpsFamilyInfo& default_instance();
  void Swap(PBCorpsFamilyInfo* other);
  
  // implements Message ----------------------------------------------
  
  PBCorpsFamilyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBCorpsFamilyInfo& from);
  void MergeFrom(const PBCorpsFamilyInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 Contribute = 1;
  inline bool has_contribute() const;
  inline void clear_contribute();
  static const int kContributeFieldNumber = 1;
  inline ::google::protobuf::uint32 contribute() const;
  inline void set_contribute(::google::protobuf::uint32 value);
  
  // optional uint32 FamilyID = 2;
  inline bool has_familyid() const;
  inline void clear_familyid();
  static const int kFamilyIDFieldNumber = 2;
  inline ::google::protobuf::uint32 familyid() const;
  inline void set_familyid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 contribute_;
  ::google::protobuf::uint32 familyid_;
  friend void  protobuf_AddDesc_corpsinfo_5fpb_2ehxx();
  friend void protobuf_AssignDesc_corpsinfo_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_corpsinfo_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PBCorpsFamilyInfo* default_instance_;
};
// -------------------------------------------------------------------

class PBCorpsFamilyInfoList : public ::google::protobuf::Message {
 public:
  PBCorpsFamilyInfoList();
  virtual ~PBCorpsFamilyInfoList();
  
  PBCorpsFamilyInfoList(const PBCorpsFamilyInfoList& from);
  
  inline PBCorpsFamilyInfoList& operator=(const PBCorpsFamilyInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBCorpsFamilyInfoList& default_instance();
  void Swap(PBCorpsFamilyInfoList* other);
  
  // implements Message ----------------------------------------------
  
  PBCorpsFamilyInfoList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBCorpsFamilyInfoList& from);
  void MergeFrom(const PBCorpsFamilyInfoList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .PBCorpsFamilyInfo FamilyInfo = 1;
  inline int familyinfo_size() const;
  inline void clear_familyinfo();
  static const int kFamilyInfoFieldNumber = 1;
  inline const ::google::protobuf::RepeatedPtrField< ::PBCorpsFamilyInfo >& familyinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBCorpsFamilyInfo >* mutable_familyinfo();
  inline const ::PBCorpsFamilyInfo& familyinfo(int index) const;
  inline ::PBCorpsFamilyInfo* mutable_familyinfo(int index);
  inline ::PBCorpsFamilyInfo* add_familyinfo();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::PBCorpsFamilyInfo > familyinfo_;
  friend void  protobuf_AddDesc_corpsinfo_5fpb_2ehxx();
  friend void protobuf_AssignDesc_corpsinfo_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_corpsinfo_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PBCorpsFamilyInfoList* default_instance_;
};
// -------------------------------------------------------------------

class PBUnionBasicInfo : public ::google::protobuf::Message {
 public:
  PBUnionBasicInfo();
  virtual ~PBUnionBasicInfo();
  
  PBUnionBasicInfo(const PBUnionBasicInfo& from);
  
  inline PBUnionBasicInfo& operator=(const PBUnionBasicInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBUnionBasicInfo& default_instance();
  void Swap(PBUnionBasicInfo* other);
  
  // implements Message ----------------------------------------------
  
  PBUnionBasicInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBUnionBasicInfo& from);
  void MergeFrom(const PBUnionBasicInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 UnionID = 1;
  inline bool has_unionid() const;
  inline void clear_unionid();
  static const int kUnionIDFieldNumber = 1;
  inline ::google::protobuf::uint32 unionid() const;
  inline void set_unionid(::google::protobuf::uint32 value);
  
  // optional string UnionName = 2;
  inline bool has_unionname() const;
  inline void clear_unionname();
  static const int kUnionNameFieldNumber = 2;
  inline const ::std::string& unionname() const;
  inline void set_unionname(const ::std::string& value);
  inline void set_unionname(const char* value);
  inline void set_unionname(const char* value, size_t size);
  inline ::std::string* mutable_unionname();
  
  // optional uint32 CoreID = 3;
  inline bool has_coreid() const;
  inline void clear_coreid();
  static const int kCoreIDFieldNumber = 3;
  inline ::google::protobuf::uint32 coreid() const;
  inline void set_coreid(::google::protobuf::uint32 value);
  
  // optional string CoreName = 4;
  inline bool has_corename() const;
  inline void clear_corename();
  static const int kCoreNameFieldNumber = 4;
  inline const ::std::string& corename() const;
  inline void set_corename(const ::std::string& value);
  inline void set_corename(const char* value);
  inline void set_corename(const char* value, size_t size);
  inline ::std::string* mutable_corename();
  
  // optional string RooterName = 5;
  inline bool has_rootername() const;
  inline void clear_rootername();
  static const int kRooterNameFieldNumber = 5;
  inline const ::std::string& rootername() const;
  inline void set_rootername(const ::std::string& value);
  inline void set_rootername(const char* value);
  inline void set_rootername(const char* value, size_t size);
  inline ::std::string* mutable_rootername();
  
  // optional uint32 RooterID = 6;
  inline bool has_rooterid() const;
  inline void clear_rooterid();
  static const int kRooterIDFieldNumber = 6;
  inline ::google::protobuf::uint32 rooterid() const;
  inline void set_rooterid(::google::protobuf::uint32 value);
  
  // optional uint32 CityID = 7;
  inline bool has_cityid() const;
  inline void clear_cityid();
  static const int kCityIDFieldNumber = 7;
  inline ::google::protobuf::uint32 cityid() const;
  inline void set_cityid(::google::protobuf::uint32 value);
  
  // optional uint32 CorpsNum = 8;
  inline bool has_corpsnum() const;
  inline void clear_corpsnum();
  static const int kCorpsNumFieldNumber = 8;
  inline ::google::protobuf::uint32 corpsnum() const;
  inline void set_corpsnum(::google::protobuf::uint32 value);
  
  // optional uint32 MemberNum = 9;
  inline bool has_membernum() const;
  inline void clear_membernum();
  static const int kMemberNumFieldNumber = 9;
  inline ::google::protobuf::uint32 membernum() const;
  inline void set_membernum(::google::protobuf::uint32 value);
  
  // repeated uint32 MapID = 10;
  inline int mapid_size() const;
  inline void clear_mapid();
  static const int kMapIDFieldNumber = 10;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >& mapid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >* mutable_mapid();
  inline ::google::protobuf::uint32 mapid(int index) const;
  inline void set_mapid(int index, ::google::protobuf::uint32 value);
  inline void add_mapid(::google::protobuf::uint32 value);
  
  // optional uint32 Money = 11;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 11;
  inline ::google::protobuf::uint32 money() const;
  inline void set_money(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 unionid_;
  ::std::string* unionname_;
  static const ::std::string _default_unionname_;
  ::google::protobuf::uint32 coreid_;
  ::std::string* corename_;
  static const ::std::string _default_corename_;
  ::std::string* rootername_;
  static const ::std::string _default_rootername_;
  ::google::protobuf::uint32 rooterid_;
  ::google::protobuf::uint32 cityid_;
  ::google::protobuf::uint32 corpsnum_;
  ::google::protobuf::uint32 membernum_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > mapid_;
  ::google::protobuf::uint32 money_;
  friend void  protobuf_AddDesc_corpsinfo_5fpb_2ehxx();
  friend void protobuf_AssignDesc_corpsinfo_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_corpsinfo_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PBUnionBasicInfo* default_instance_;
};
// -------------------------------------------------------------------

class PBTaskListInfo : public ::google::protobuf::Message {
 public:
  PBTaskListInfo();
  virtual ~PBTaskListInfo();
  
  PBTaskListInfo(const PBTaskListInfo& from);
  
  inline PBTaskListInfo& operator=(const PBTaskListInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBTaskListInfo& default_instance();
  void Swap(PBTaskListInfo* other);
  
  // implements Message ----------------------------------------------
  
  PBTaskListInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBTaskListInfo& from);
  void MergeFrom(const PBTaskListInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 TaskID = 1;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskIDFieldNumber = 1;
  inline ::google::protobuf::uint32 taskid() const;
  inline void set_taskid(::google::protobuf::uint32 value);
  
  // optional uint32 TaskState = 2;
  inline bool has_taskstate() const;
  inline void clear_taskstate();
  static const int kTaskStateFieldNumber = 2;
  inline ::google::protobuf::uint32 taskstate() const;
  inline void set_taskstate(::google::protobuf::uint32 value);
  
  // optional uint32 EntityID = 3;
  inline bool has_entityid() const;
  inline void clear_entityid();
  static const int kEntityIDFieldNumber = 3;
  inline ::google::protobuf::uint32 entityid() const;
  inline void set_entityid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 taskid_;
  ::google::protobuf::uint32 taskstate_;
  ::google::protobuf::uint32 entityid_;
  friend void  protobuf_AddDesc_corpsinfo_5fpb_2ehxx();
  friend void protobuf_AssignDesc_corpsinfo_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_corpsinfo_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PBTaskListInfo* default_instance_;
};
// -------------------------------------------------------------------

class PBCorpsPublishInfo : public ::google::protobuf::Message {
 public:
  PBCorpsPublishInfo();
  virtual ~PBCorpsPublishInfo();
  
  PBCorpsPublishInfo(const PBCorpsPublishInfo& from);
  
  inline PBCorpsPublishInfo& operator=(const PBCorpsPublishInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBCorpsPublishInfo& default_instance();
  void Swap(PBCorpsPublishInfo* other);
  
  // implements Message ----------------------------------------------
  
  PBCorpsPublishInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBCorpsPublishInfo& from);
  void MergeFrom(const PBCorpsPublishInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 TodayTimes = 1;
  inline bool has_todaytimes() const;
  inline void clear_todaytimes();
  static const int kTodayTimesFieldNumber = 1;
  inline ::google::protobuf::uint32 todaytimes() const;
  inline void set_todaytimes(::google::protobuf::uint32 value);
  
  // optional uint32 WeekTimes = 2;
  inline bool has_weektimes() const;
  inline void clear_weektimes();
  static const int kWeekTimesFieldNumber = 2;
  inline ::google::protobuf::uint32 weektimes() const;
  inline void set_weektimes(::google::protobuf::uint32 value);
  
  // repeated .PBTaskListInfo TaskList = 3;
  inline int tasklist_size() const;
  inline void clear_tasklist();
  static const int kTaskListFieldNumber = 3;
  inline const ::google::protobuf::RepeatedPtrField< ::PBTaskListInfo >& tasklist() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBTaskListInfo >* mutable_tasklist();
  inline const ::PBTaskListInfo& tasklist(int index) const;
  inline ::PBTaskListInfo* mutable_tasklist(int index);
  inline ::PBTaskListInfo* add_tasklist();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 todaytimes_;
  ::google::protobuf::uint32 weektimes_;
  ::google::protobuf::RepeatedPtrField< ::PBTaskListInfo > tasklist_;
  friend void  protobuf_AddDesc_corpsinfo_5fpb_2ehxx();
  friend void protobuf_AssignDesc_corpsinfo_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_corpsinfo_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PBCorpsPublishInfo* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// CorpsProperty

// optional uint32 CorpsMoney = 1;
inline bool CorpsProperty::has_corpsmoney() const {
  return _has_bit(0);
}
inline void CorpsProperty::clear_corpsmoney() {
  corpsmoney_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CorpsProperty::corpsmoney() const {
  return corpsmoney_;
}
inline void CorpsProperty::set_corpsmoney(::google::protobuf::uint32 value) {
  _set_bit(0);
  corpsmoney_ = value;
}

// optional string CorpsRooterName = 2;
inline bool CorpsProperty::has_corpsrootername() const {
  return _has_bit(1);
}
inline void CorpsProperty::clear_corpsrootername() {
  if (corpsrootername_ != &_default_corpsrootername_) {
    corpsrootername_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CorpsProperty::corpsrootername() const {
  return *corpsrootername_;
}
inline void CorpsProperty::set_corpsrootername(const ::std::string& value) {
  _set_bit(1);
  if (corpsrootername_ == &_default_corpsrootername_) {
    corpsrootername_ = new ::std::string;
  }
  corpsrootername_->assign(value);
}
inline void CorpsProperty::set_corpsrootername(const char* value) {
  _set_bit(1);
  if (corpsrootername_ == &_default_corpsrootername_) {
    corpsrootername_ = new ::std::string;
  }
  corpsrootername_->assign(value);
}
inline void CorpsProperty::set_corpsrootername(const char* value, size_t size) {
  _set_bit(1);
  if (corpsrootername_ == &_default_corpsrootername_) {
    corpsrootername_ = new ::std::string;
  }
  corpsrootername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CorpsProperty::mutable_corpsrootername() {
  _set_bit(1);
  if (corpsrootername_ == &_default_corpsrootername_) {
    corpsrootername_ = new ::std::string;
  }
  return corpsrootername_;
}

// optional uint32 CorpsFamilyNum = 3;
inline bool CorpsProperty::has_corpsfamilynum() const {
  return _has_bit(2);
}
inline void CorpsProperty::clear_corpsfamilynum() {
  corpsfamilynum_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CorpsProperty::corpsfamilynum() const {
  return corpsfamilynum_;
}
inline void CorpsProperty::set_corpsfamilynum(::google::protobuf::uint32 value) {
  _set_bit(2);
  corpsfamilynum_ = value;
}

// optional uint32 CorpsLevel = 4;
inline bool CorpsProperty::has_corpslevel() const {
  return _has_bit(3);
}
inline void CorpsProperty::clear_corpslevel() {
  corpslevel_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CorpsProperty::corpslevel() const {
  return corpslevel_;
}
inline void CorpsProperty::set_corpslevel(::google::protobuf::uint32 value) {
  _set_bit(3);
  corpslevel_ = value;
}

// optional string CorpsButtullin = 5;
inline bool CorpsProperty::has_corpsbuttullin() const {
  return _has_bit(4);
}
inline void CorpsProperty::clear_corpsbuttullin() {
  if (corpsbuttullin_ != &_default_corpsbuttullin_) {
    corpsbuttullin_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& CorpsProperty::corpsbuttullin() const {
  return *corpsbuttullin_;
}
inline void CorpsProperty::set_corpsbuttullin(const ::std::string& value) {
  _set_bit(4);
  if (corpsbuttullin_ == &_default_corpsbuttullin_) {
    corpsbuttullin_ = new ::std::string;
  }
  corpsbuttullin_->assign(value);
}
inline void CorpsProperty::set_corpsbuttullin(const char* value) {
  _set_bit(4);
  if (corpsbuttullin_ == &_default_corpsbuttullin_) {
    corpsbuttullin_ = new ::std::string;
  }
  corpsbuttullin_->assign(value);
}
inline void CorpsProperty::set_corpsbuttullin(const char* value, size_t size) {
  _set_bit(4);
  if (corpsbuttullin_ == &_default_corpsbuttullin_) {
    corpsbuttullin_ = new ::std::string;
  }
  corpsbuttullin_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CorpsProperty::mutable_corpsbuttullin() {
  _set_bit(4);
  if (corpsbuttullin_ == &_default_corpsbuttullin_) {
    corpsbuttullin_ = new ::std::string;
  }
  return corpsbuttullin_;
}

// optional uint32 CorpsMemberNum = 6;
inline bool CorpsProperty::has_corpsmembernum() const {
  return _has_bit(5);
}
inline void CorpsProperty::clear_corpsmembernum() {
  corpsmembernum_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 CorpsProperty::corpsmembernum() const {
  return corpsmembernum_;
}
inline void CorpsProperty::set_corpsmembernum(::google::protobuf::uint32 value) {
  _set_bit(5);
  corpsmembernum_ = value;
}

// optional uint32 CorpsRooterID = 7;
inline bool CorpsProperty::has_corpsrooterid() const {
  return _has_bit(6);
}
inline void CorpsProperty::clear_corpsrooterid() {
  corpsrooterid_ = 0u;
  _clear_bit(6);
}
inline ::google::protobuf::uint32 CorpsProperty::corpsrooterid() const {
  return corpsrooterid_;
}
inline void CorpsProperty::set_corpsrooterid(::google::protobuf::uint32 value) {
  _set_bit(6);
  corpsrooterid_ = value;
}

// optional uint32 CorpsID = 8;
inline bool CorpsProperty::has_corpsid() const {
  return _has_bit(7);
}
inline void CorpsProperty::clear_corpsid() {
  corpsid_ = 0u;
  _clear_bit(7);
}
inline ::google::protobuf::uint32 CorpsProperty::corpsid() const {
  return corpsid_;
}
inline void CorpsProperty::set_corpsid(::google::protobuf::uint32 value) {
  _set_bit(7);
  corpsid_ = value;
}

// optional string CorpsName = 9;
inline bool CorpsProperty::has_corpsname() const {
  return _has_bit(8);
}
inline void CorpsProperty::clear_corpsname() {
  if (corpsname_ != &_default_corpsname_) {
    corpsname_->clear();
  }
  _clear_bit(8);
}
inline const ::std::string& CorpsProperty::corpsname() const {
  return *corpsname_;
}
inline void CorpsProperty::set_corpsname(const ::std::string& value) {
  _set_bit(8);
  if (corpsname_ == &_default_corpsname_) {
    corpsname_ = new ::std::string;
  }
  corpsname_->assign(value);
}
inline void CorpsProperty::set_corpsname(const char* value) {
  _set_bit(8);
  if (corpsname_ == &_default_corpsname_) {
    corpsname_ = new ::std::string;
  }
  corpsname_->assign(value);
}
inline void CorpsProperty::set_corpsname(const char* value, size_t size) {
  _set_bit(8);
  if (corpsname_ == &_default_corpsname_) {
    corpsname_ = new ::std::string;
  }
  corpsname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CorpsProperty::mutable_corpsname() {
  _set_bit(8);
  if (corpsname_ == &_default_corpsname_) {
    corpsname_ = new ::std::string;
  }
  return corpsname_;
}

// optional uint32 CorpsGlory = 10;
inline bool CorpsProperty::has_corpsglory() const {
  return _has_bit(9);
}
inline void CorpsProperty::clear_corpsglory() {
  corpsglory_ = 0u;
  _clear_bit(9);
}
inline ::google::protobuf::uint32 CorpsProperty::corpsglory() const {
  return corpsglory_;
}
inline void CorpsProperty::set_corpsglory(::google::protobuf::uint32 value) {
  _set_bit(9);
  corpsglory_ = value;
}

// optional uint32 CorpsDevelop = 11;
inline bool CorpsProperty::has_corpsdevelop() const {
  return _has_bit(10);
}
inline void CorpsProperty::clear_corpsdevelop() {
  corpsdevelop_ = 0u;
  _clear_bit(10);
}
inline ::google::protobuf::uint32 CorpsProperty::corpsdevelop() const {
  return corpsdevelop_;
}
inline void CorpsProperty::set_corpsdevelop(::google::protobuf::uint32 value) {
  _set_bit(10);
  corpsdevelop_ = value;
}

// optional uint32 WarRank = 12;
inline bool CorpsProperty::has_warrank() const {
  return _has_bit(11);
}
inline void CorpsProperty::clear_warrank() {
  warrank_ = 0u;
  _clear_bit(11);
}
inline ::google::protobuf::uint32 CorpsProperty::warrank() const {
  return warrank_;
}
inline void CorpsProperty::set_warrank(::google::protobuf::uint32 value) {
  _set_bit(11);
  warrank_ = value;
}

// optional uint32 WarWinNum = 13;
inline bool CorpsProperty::has_warwinnum() const {
  return _has_bit(12);
}
inline void CorpsProperty::clear_warwinnum() {
  warwinnum_ = 0u;
  _clear_bit(12);
}
inline ::google::protobuf::uint32 CorpsProperty::warwinnum() const {
  return warwinnum_;
}
inline void CorpsProperty::set_warwinnum(::google::protobuf::uint32 value) {
  _set_bit(12);
  warwinnum_ = value;
}

// optional uint32 WarLostNum = 14;
inline bool CorpsProperty::has_warlostnum() const {
  return _has_bit(13);
}
inline void CorpsProperty::clear_warlostnum() {
  warlostnum_ = 0u;
  _clear_bit(13);
}
inline ::google::protobuf::uint32 CorpsProperty::warlostnum() const {
  return warlostnum_;
}
inline void CorpsProperty::set_warlostnum(::google::protobuf::uint32 value) {
  _set_bit(13);
  warlostnum_ = value;
}

// optional uint32 FamilyStarLevel = 15;
inline bool CorpsProperty::has_familystarlevel() const {
  return _has_bit(14);
}
inline void CorpsProperty::clear_familystarlevel() {
  familystarlevel_ = 0u;
  _clear_bit(14);
}
inline ::google::protobuf::uint32 CorpsProperty::familystarlevel() const {
  return familystarlevel_;
}
inline void CorpsProperty::set_familystarlevel(::google::protobuf::uint32 value) {
  _set_bit(14);
  familystarlevel_ = value;
}

// optional uint32 WarExp = 16;
inline bool CorpsProperty::has_warexp() const {
  return _has_bit(15);
}
inline void CorpsProperty::clear_warexp() {
  warexp_ = 0u;
  _clear_bit(15);
}
inline ::google::protobuf::uint32 CorpsProperty::warexp() const {
  return warexp_;
}
inline void CorpsProperty::set_warexp(::google::protobuf::uint32 value) {
  _set_bit(15);
  warexp_ = value;
}

// optional uint32 WarMaxExp = 17;
inline bool CorpsProperty::has_warmaxexp() const {
  return _has_bit(16);
}
inline void CorpsProperty::clear_warmaxexp() {
  warmaxexp_ = 0u;
  _clear_bit(16);
}
inline ::google::protobuf::uint32 CorpsProperty::warmaxexp() const {
  return warmaxexp_;
}
inline void CorpsProperty::set_warmaxexp(::google::protobuf::uint32 value) {
  _set_bit(16);
  warmaxexp_ = value;
}

// optional uint32 MaxFamilyNum = 18;
inline bool CorpsProperty::has_maxfamilynum() const {
  return _has_bit(17);
}
inline void CorpsProperty::clear_maxfamilynum() {
  maxfamilynum_ = 0u;
  _clear_bit(17);
}
inline ::google::protobuf::uint32 CorpsProperty::maxfamilynum() const {
  return maxfamilynum_;
}
inline void CorpsProperty::set_maxfamilynum(::google::protobuf::uint32 value) {
  _set_bit(17);
  maxfamilynum_ = value;
}

// optional uint32 CanLevelUp = 19;
inline bool CorpsProperty::has_canlevelup() const {
  return _has_bit(18);
}
inline void CorpsProperty::clear_canlevelup() {
  canlevelup_ = 0u;
  _clear_bit(18);
}
inline ::google::protobuf::uint32 CorpsProperty::canlevelup() const {
  return canlevelup_;
}
inline void CorpsProperty::set_canlevelup(::google::protobuf::uint32 value) {
  _set_bit(18);
  canlevelup_ = value;
}

// optional uint32 ChallengeStatus = 20;
inline bool CorpsProperty::has_challengestatus() const {
  return _has_bit(19);
}
inline void CorpsProperty::clear_challengestatus() {
  challengestatus_ = 0u;
  _clear_bit(19);
}
inline ::google::protobuf::uint32 CorpsProperty::challengestatus() const {
  return challengestatus_;
}
inline void CorpsProperty::set_challengestatus(::google::protobuf::uint32 value) {
  _set_bit(19);
  challengestatus_ = value;
}

// optional uint32 ChallengeMoney = 21;
inline bool CorpsProperty::has_challengemoney() const {
  return _has_bit(20);
}
inline void CorpsProperty::clear_challengemoney() {
  challengemoney_ = 0u;
  _clear_bit(20);
}
inline ::google::protobuf::uint32 CorpsProperty::challengemoney() const {
  return challengemoney_;
}
inline void CorpsProperty::set_challengemoney(::google::protobuf::uint32 value) {
  _set_bit(20);
  challengemoney_ = value;
}

// optional uint32 MaxGeneralNum = 22;
inline bool CorpsProperty::has_maxgeneralnum() const {
  return _has_bit(21);
}
inline void CorpsProperty::clear_maxgeneralnum() {
  maxgeneralnum_ = 0u;
  _clear_bit(21);
}
inline ::google::protobuf::uint32 CorpsProperty::maxgeneralnum() const {
  return maxgeneralnum_;
}
inline void CorpsProperty::set_maxgeneralnum(::google::protobuf::uint32 value) {
  _set_bit(21);
  maxgeneralnum_ = value;
}

// optional uint32 MaxCounsellorNum = 23;
inline bool CorpsProperty::has_maxcounsellornum() const {
  return _has_bit(22);
}
inline void CorpsProperty::clear_maxcounsellornum() {
  maxcounsellornum_ = 0u;
  _clear_bit(22);
}
inline ::google::protobuf::uint32 CorpsProperty::maxcounsellornum() const {
  return maxcounsellornum_;
}
inline void CorpsProperty::set_maxcounsellornum(::google::protobuf::uint32 value) {
  _set_bit(22);
  maxcounsellornum_ = value;
}

// repeated .PBCorpsBattle BattleInfo = 24;
inline int CorpsProperty::battleinfo_size() const {
  return battleinfo_.size();
}
inline void CorpsProperty::clear_battleinfo() {
  battleinfo_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBCorpsBattle >&
CorpsProperty::battleinfo() const {
  return battleinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBCorpsBattle >*
CorpsProperty::mutable_battleinfo() {
  return &battleinfo_;
}
inline const ::PBCorpsBattle& CorpsProperty::battleinfo(int index) const {
  return battleinfo_.Get(index);
}
inline ::PBCorpsBattle* CorpsProperty::mutable_battleinfo(int index) {
  return battleinfo_.Mutable(index);
}
inline ::PBCorpsBattle* CorpsProperty::add_battleinfo() {
  return battleinfo_.Add();
}

// optional uint32 CountryID = 25;
inline bool CorpsProperty::has_countryid() const {
  return _has_bit(24);
}
inline void CorpsProperty::clear_countryid() {
  countryid_ = 0u;
  _clear_bit(24);
}
inline ::google::protobuf::uint32 CorpsProperty::countryid() const {
  return countryid_;
}
inline void CorpsProperty::set_countryid(::google::protobuf::uint32 value) {
  _set_bit(24);
  countryid_ = value;
}

// optional uint32 Color = 26;
inline bool CorpsProperty::has_color() const {
  return _has_bit(25);
}
inline void CorpsProperty::clear_color() {
  color_ = 0u;
  _clear_bit(25);
}
inline ::google::protobuf::uint32 CorpsProperty::color() const {
  return color_;
}
inline void CorpsProperty::set_color(::google::protobuf::uint32 value) {
  _set_bit(25);
  color_ = value;
}

// optional uint32 MainCityMap = 27;
inline bool CorpsProperty::has_maincitymap() const {
  return _has_bit(26);
}
inline void CorpsProperty::clear_maincitymap() {
  maincitymap_ = 0u;
  _clear_bit(26);
}
inline ::google::protobuf::uint32 CorpsProperty::maincitymap() const {
  return maincitymap_;
}
inline void CorpsProperty::set_maincitymap(::google::protobuf::uint32 value) {
  _set_bit(26);
  maincitymap_ = value;
}

// optional uint32 LevelGlory = 29;
inline bool CorpsProperty::has_levelglory() const {
  return _has_bit(27);
}
inline void CorpsProperty::clear_levelglory() {
  levelglory_ = 0u;
  _clear_bit(27);
}
inline ::google::protobuf::uint32 CorpsProperty::levelglory() const {
  return levelglory_;
}
inline void CorpsProperty::set_levelglory(::google::protobuf::uint32 value) {
  _set_bit(27);
  levelglory_ = value;
}

// optional uint32 LevleMoney = 30;
inline bool CorpsProperty::has_levlemoney() const {
  return _has_bit(28);
}
inline void CorpsProperty::clear_levlemoney() {
  levlemoney_ = 0u;
  _clear_bit(28);
}
inline ::google::protobuf::uint32 CorpsProperty::levlemoney() const {
  return levlemoney_;
}
inline void CorpsProperty::set_levlemoney(::google::protobuf::uint32 value) {
  _set_bit(28);
  levlemoney_ = value;
}

// optional uint32 BOSSRefineValue = 31;
inline bool CorpsProperty::has_bossrefinevalue() const {
  return _has_bit(29);
}
inline void CorpsProperty::clear_bossrefinevalue() {
  bossrefinevalue_ = 0u;
  _clear_bit(29);
}
inline ::google::protobuf::uint32 CorpsProperty::bossrefinevalue() const {
  return bossrefinevalue_;
}
inline void CorpsProperty::set_bossrefinevalue(::google::protobuf::uint32 value) {
  _set_bit(29);
  bossrefinevalue_ = value;
}

// optional uint32 RefineValue = 32;
inline bool CorpsProperty::has_refinevalue() const {
  return _has_bit(30);
}
inline void CorpsProperty::clear_refinevalue() {
  refinevalue_ = 0u;
  _clear_bit(30);
}
inline ::google::protobuf::uint32 CorpsProperty::refinevalue() const {
  return refinevalue_;
}
inline void CorpsProperty::set_refinevalue(::google::protobuf::uint32 value) {
  _set_bit(30);
  refinevalue_ = value;
}

// repeated .PBCorpsBoss BossList = 33;
inline int CorpsProperty::bosslist_size() const {
  return bosslist_.size();
}
inline void CorpsProperty::clear_bosslist() {
  bosslist_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBCorpsBoss >&
CorpsProperty::bosslist() const {
  return bosslist_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBCorpsBoss >*
CorpsProperty::mutable_bosslist() {
  return &bosslist_;
}
inline const ::PBCorpsBoss& CorpsProperty::bosslist(int index) const {
  return bosslist_.Get(index);
}
inline ::PBCorpsBoss* CorpsProperty::mutable_bosslist(int index) {
  return bosslist_.Mutable(index);
}
inline ::PBCorpsBoss* CorpsProperty::add_bosslist() {
  return bosslist_.Add();
}

// optional uint32 BossCDLimit = 34;
inline bool CorpsProperty::has_bosscdlimit() const {
  return _has_bit(32);
}
inline void CorpsProperty::clear_bosscdlimit() {
  bosscdlimit_ = 0u;
  _clear_bit(32);
}
inline ::google::protobuf::uint32 CorpsProperty::bosscdlimit() const {
  return bosscdlimit_;
}
inline void CorpsProperty::set_bosscdlimit(::google::protobuf::uint32 value) {
  _set_bit(32);
  bosscdlimit_ = value;
}

// optional uint32 BossCDCool = 35;
inline bool CorpsProperty::has_bosscdcool() const {
  return _has_bit(33);
}
inline void CorpsProperty::clear_bosscdcool() {
  bosscdcool_ = 0u;
  _clear_bit(33);
}
inline ::google::protobuf::uint32 CorpsProperty::bosscdcool() const {
  return bosscdcool_;
}
inline void CorpsProperty::set_bosscdcool(::google::protobuf::uint32 value) {
  _set_bit(33);
  bosscdcool_ = value;
}

// optional uint32 BossRepetionOpen = 36;
inline bool CorpsProperty::has_bossrepetionopen() const {
  return _has_bit(34);
}
inline void CorpsProperty::clear_bossrepetionopen() {
  bossrepetionopen_ = 0u;
  _clear_bit(34);
}
inline ::google::protobuf::uint32 CorpsProperty::bossrepetionopen() const {
  return bossrepetionopen_;
}
inline void CorpsProperty::set_bossrepetionopen(::google::protobuf::uint32 value) {
  _set_bit(34);
  bossrepetionopen_ = value;
}

// optional uint32 CorpsCurBossID = 37;
inline bool CorpsProperty::has_corpscurbossid() const {
  return _has_bit(35);
}
inline void CorpsProperty::clear_corpscurbossid() {
  corpscurbossid_ = 0u;
  _clear_bit(35);
}
inline ::google::protobuf::uint32 CorpsProperty::corpscurbossid() const {
  return corpscurbossid_;
}
inline void CorpsProperty::set_corpscurbossid(::google::protobuf::uint32 value) {
  _set_bit(35);
  corpscurbossid_ = value;
}

// optional uint32 CorpsBossScore = 38;
inline bool CorpsProperty::has_corpsbossscore() const {
  return _has_bit(36);
}
inline void CorpsProperty::clear_corpsbossscore() {
  corpsbossscore_ = 0u;
  _clear_bit(36);
}
inline ::google::protobuf::uint32 CorpsProperty::corpsbossscore() const {
  return corpsbossscore_;
}
inline void CorpsProperty::set_corpsbossscore(::google::protobuf::uint32 value) {
  _set_bit(36);
  corpsbossscore_ = value;
}

// optional uint32 CorpsCollectActive = 39;
inline bool CorpsProperty::has_corpscollectactive() const {
  return _has_bit(37);
}
inline void CorpsProperty::clear_corpscollectactive() {
  corpscollectactive_ = 0u;
  _clear_bit(37);
}
inline ::google::protobuf::uint32 CorpsProperty::corpscollectactive() const {
  return corpscollectactive_;
}
inline void CorpsProperty::set_corpscollectactive(::google::protobuf::uint32 value) {
  _set_bit(37);
  corpscollectactive_ = value;
}

// optional uint32 CorpsReptionOpenTime = 40;
inline bool CorpsProperty::has_corpsreptionopentime() const {
  return _has_bit(38);
}
inline void CorpsProperty::clear_corpsreptionopentime() {
  corpsreptionopentime_ = 0u;
  _clear_bit(38);
}
inline ::google::protobuf::uint32 CorpsProperty::corpsreptionopentime() const {
  return corpsreptionopentime_;
}
inline void CorpsProperty::set_corpsreptionopentime(::google::protobuf::uint32 value) {
  _set_bit(38);
  corpsreptionopentime_ = value;
}

// -------------------------------------------------------------------

// PBCorpsBattle

// optional uint32 NpcID = 1;
inline bool PBCorpsBattle::has_npcid() const {
  return _has_bit(0);
}
inline void PBCorpsBattle::clear_npcid() {
  npcid_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 PBCorpsBattle::npcid() const {
  return npcid_;
}
inline void PBCorpsBattle::set_npcid(::google::protobuf::uint32 value) {
  _set_bit(0);
  npcid_ = value;
}

// optional uint32 NpcStatus = 2;
inline bool PBCorpsBattle::has_npcstatus() const {
  return _has_bit(1);
}
inline void PBCorpsBattle::clear_npcstatus() {
  npcstatus_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 PBCorpsBattle::npcstatus() const {
  return npcstatus_;
}
inline void PBCorpsBattle::set_npcstatus(::google::protobuf::uint32 value) {
  _set_bit(1);
  npcstatus_ = value;
}

// optional uint32 WarStatus = 3;
inline bool PBCorpsBattle::has_warstatus() const {
  return _has_bit(2);
}
inline void PBCorpsBattle::clear_warstatus() {
  warstatus_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 PBCorpsBattle::warstatus() const {
  return warstatus_;
}
inline void PBCorpsBattle::set_warstatus(::google::protobuf::uint32 value) {
  _set_bit(2);
  warstatus_ = value;
}

// optional string DesCorpsName = 4;
inline bool PBCorpsBattle::has_descorpsname() const {
  return _has_bit(3);
}
inline void PBCorpsBattle::clear_descorpsname() {
  if (descorpsname_ != &_default_descorpsname_) {
    descorpsname_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& PBCorpsBattle::descorpsname() const {
  return *descorpsname_;
}
inline void PBCorpsBattle::set_descorpsname(const ::std::string& value) {
  _set_bit(3);
  if (descorpsname_ == &_default_descorpsname_) {
    descorpsname_ = new ::std::string;
  }
  descorpsname_->assign(value);
}
inline void PBCorpsBattle::set_descorpsname(const char* value) {
  _set_bit(3);
  if (descorpsname_ == &_default_descorpsname_) {
    descorpsname_ = new ::std::string;
  }
  descorpsname_->assign(value);
}
inline void PBCorpsBattle::set_descorpsname(const char* value, size_t size) {
  _set_bit(3);
  if (descorpsname_ == &_default_descorpsname_) {
    descorpsname_ = new ::std::string;
  }
  descorpsname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBCorpsBattle::mutable_descorpsname() {
  _set_bit(3);
  if (descorpsname_ == &_default_descorpsname_) {
    descorpsname_ = new ::std::string;
  }
  return descorpsname_;
}

// optional uint32 Type = 5;
inline bool PBCorpsBattle::has_type() const {
  return _has_bit(4);
}
inline void PBCorpsBattle::clear_type() {
  type_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 PBCorpsBattle::type() const {
  return type_;
}
inline void PBCorpsBattle::set_type(::google::protobuf::uint32 value) {
  _set_bit(4);
  type_ = value;
}

// optional uint32 BidMoney = 6;
inline bool PBCorpsBattle::has_bidmoney() const {
  return _has_bit(5);
}
inline void PBCorpsBattle::clear_bidmoney() {
  bidmoney_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 PBCorpsBattle::bidmoney() const {
  return bidmoney_;
}
inline void PBCorpsBattle::set_bidmoney(::google::protobuf::uint32 value) {
  _set_bit(5);
  bidmoney_ = value;
}

// optional uint32 DesCorpsID = 7;
inline bool PBCorpsBattle::has_descorpsid() const {
  return _has_bit(6);
}
inline void PBCorpsBattle::clear_descorpsid() {
  descorpsid_ = 0u;
  _clear_bit(6);
}
inline ::google::protobuf::uint32 PBCorpsBattle::descorpsid() const {
  return descorpsid_;
}
inline void PBCorpsBattle::set_descorpsid(::google::protobuf::uint32 value) {
  _set_bit(6);
  descorpsid_ = value;
}

// optional uint32 MapID = 8;
inline bool PBCorpsBattle::has_mapid() const {
  return _has_bit(7);
}
inline void PBCorpsBattle::clear_mapid() {
  mapid_ = 0u;
  _clear_bit(7);
}
inline ::google::protobuf::uint32 PBCorpsBattle::mapid() const {
  return mapid_;
}
inline void PBCorpsBattle::set_mapid(::google::protobuf::uint32 value) {
  _set_bit(7);
  mapid_ = value;
}

// optional uint32 Time = 9;
inline bool PBCorpsBattle::has_time() const {
  return _has_bit(8);
}
inline void PBCorpsBattle::clear_time() {
  time_ = 0u;
  _clear_bit(8);
}
inline ::google::protobuf::uint32 PBCorpsBattle::time() const {
  return time_;
}
inline void PBCorpsBattle::set_time(::google::protobuf::uint32 value) {
  _set_bit(8);
  time_ = value;
}

// optional uint32 CorpsID = 10;
inline bool PBCorpsBattle::has_corpsid() const {
  return _has_bit(9);
}
inline void PBCorpsBattle::clear_corpsid() {
  corpsid_ = 0u;
  _clear_bit(9);
}
inline ::google::protobuf::uint32 PBCorpsBattle::corpsid() const {
  return corpsid_;
}
inline void PBCorpsBattle::set_corpsid(::google::protobuf::uint32 value) {
  _set_bit(9);
  corpsid_ = value;
}

// optional string CorpsName = 11;
inline bool PBCorpsBattle::has_corpsname() const {
  return _has_bit(10);
}
inline void PBCorpsBattle::clear_corpsname() {
  if (corpsname_ != &_default_corpsname_) {
    corpsname_->clear();
  }
  _clear_bit(10);
}
inline const ::std::string& PBCorpsBattle::corpsname() const {
  return *corpsname_;
}
inline void PBCorpsBattle::set_corpsname(const ::std::string& value) {
  _set_bit(10);
  if (corpsname_ == &_default_corpsname_) {
    corpsname_ = new ::std::string;
  }
  corpsname_->assign(value);
}
inline void PBCorpsBattle::set_corpsname(const char* value) {
  _set_bit(10);
  if (corpsname_ == &_default_corpsname_) {
    corpsname_ = new ::std::string;
  }
  corpsname_->assign(value);
}
inline void PBCorpsBattle::set_corpsname(const char* value, size_t size) {
  _set_bit(10);
  if (corpsname_ == &_default_corpsname_) {
    corpsname_ = new ::std::string;
  }
  corpsname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBCorpsBattle::mutable_corpsname() {
  _set_bit(10);
  if (corpsname_ == &_default_corpsname_) {
    corpsname_ = new ::std::string;
  }
  return corpsname_;
}

// optional string RooterName = 12;
inline bool PBCorpsBattle::has_rootername() const {
  return _has_bit(11);
}
inline void PBCorpsBattle::clear_rootername() {
  if (rootername_ != &_default_rootername_) {
    rootername_->clear();
  }
  _clear_bit(11);
}
inline const ::std::string& PBCorpsBattle::rootername() const {
  return *rootername_;
}
inline void PBCorpsBattle::set_rootername(const ::std::string& value) {
  _set_bit(11);
  if (rootername_ == &_default_rootername_) {
    rootername_ = new ::std::string;
  }
  rootername_->assign(value);
}
inline void PBCorpsBattle::set_rootername(const char* value) {
  _set_bit(11);
  if (rootername_ == &_default_rootername_) {
    rootername_ = new ::std::string;
  }
  rootername_->assign(value);
}
inline void PBCorpsBattle::set_rootername(const char* value, size_t size) {
  _set_bit(11);
  if (rootername_ == &_default_rootername_) {
    rootername_ = new ::std::string;
  }
  rootername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBCorpsBattle::mutable_rootername() {
  _set_bit(11);
  if (rootername_ == &_default_rootername_) {
    rootername_ = new ::std::string;
  }
  return rootername_;
}

// -------------------------------------------------------------------

// PBCorpsBoss

// optional uint32 BossId = 1;
inline bool PBCorpsBoss::has_bossid() const {
  return _has_bit(0);
}
inline void PBCorpsBoss::clear_bossid() {
  bossid_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 PBCorpsBoss::bossid() const {
  return bossid_;
}
inline void PBCorpsBoss::set_bossid(::google::protobuf::uint32 value) {
  _set_bit(0);
  bossid_ = value;
}

// optional uint32 CanIntoTimes = 2;
inline bool PBCorpsBoss::has_canintotimes() const {
  return _has_bit(1);
}
inline void PBCorpsBoss::clear_canintotimes() {
  canintotimes_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 PBCorpsBoss::canintotimes() const {
  return canintotimes_;
}
inline void PBCorpsBoss::set_canintotimes(::google::protobuf::uint32 value) {
  _set_bit(1);
  canintotimes_ = value;
}

// -------------------------------------------------------------------

// PBCorpsBattleList

// repeated .PBCorpsBattle BattleList = 1;
inline int PBCorpsBattleList::battlelist_size() const {
  return battlelist_.size();
}
inline void PBCorpsBattleList::clear_battlelist() {
  battlelist_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBCorpsBattle >&
PBCorpsBattleList::battlelist() const {
  return battlelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBCorpsBattle >*
PBCorpsBattleList::mutable_battlelist() {
  return &battlelist_;
}
inline const ::PBCorpsBattle& PBCorpsBattleList::battlelist(int index) const {
  return battlelist_.Get(index);
}
inline ::PBCorpsBattle* PBCorpsBattleList::mutable_battlelist(int index) {
  return battlelist_.Mutable(index);
}
inline ::PBCorpsBattle* PBCorpsBattleList::add_battlelist() {
  return battlelist_.Add();
}

// -------------------------------------------------------------------

// PBCorpsMember

// optional .PBFamilyMemberList FamilyMemberList = 1;
inline bool PBCorpsMember::has_familymemberlist() const {
  return _has_bit(0);
}
inline void PBCorpsMember::clear_familymemberlist() {
  if (familymemberlist_ != NULL) familymemberlist_->::PBFamilyMemberList::Clear();
  _clear_bit(0);
}
inline const ::PBFamilyMemberList& PBCorpsMember::familymemberlist() const {
  return familymemberlist_ != NULL ? *familymemberlist_ : *default_instance_->familymemberlist_;
}
inline ::PBFamilyMemberList* PBCorpsMember::mutable_familymemberlist() {
  _set_bit(0);
  if (familymemberlist_ == NULL) familymemberlist_ = new ::PBFamilyMemberList;
  return familymemberlist_;
}

// optional .FamilyData FamilyProperty = 2;
inline bool PBCorpsMember::has_familyproperty() const {
  return _has_bit(1);
}
inline void PBCorpsMember::clear_familyproperty() {
  if (familyproperty_ != NULL) familyproperty_->::FamilyData::Clear();
  _clear_bit(1);
}
inline const ::FamilyData& PBCorpsMember::familyproperty() const {
  return familyproperty_ != NULL ? *familyproperty_ : *default_instance_->familyproperty_;
}
inline ::FamilyData* PBCorpsMember::mutable_familyproperty() {
  _set_bit(1);
  if (familyproperty_ == NULL) familyproperty_ = new ::FamilyData;
  return familyproperty_;
}

// -------------------------------------------------------------------

// PBCorpsMemberList

// repeated .PBCorpsMember CorpsMemberList = 1;
inline int PBCorpsMemberList::corpsmemberlist_size() const {
  return corpsmemberlist_.size();
}
inline void PBCorpsMemberList::clear_corpsmemberlist() {
  corpsmemberlist_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBCorpsMember >&
PBCorpsMemberList::corpsmemberlist() const {
  return corpsmemberlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBCorpsMember >*
PBCorpsMemberList::mutable_corpsmemberlist() {
  return &corpsmemberlist_;
}
inline const ::PBCorpsMember& PBCorpsMemberList::corpsmemberlist(int index) const {
  return corpsmemberlist_.Get(index);
}
inline ::PBCorpsMember* PBCorpsMemberList::mutable_corpsmemberlist(int index) {
  return corpsmemberlist_.Mutable(index);
}
inline ::PBCorpsMember* PBCorpsMemberList::add_corpsmemberlist() {
  return corpsmemberlist_.Add();
}

// -------------------------------------------------------------------

// PBCorpsApplyList

// repeated .FamilyData ApplyList = 1;
inline int PBCorpsApplyList::applylist_size() const {
  return applylist_.size();
}
inline void PBCorpsApplyList::clear_applylist() {
  applylist_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::FamilyData >&
PBCorpsApplyList::applylist() const {
  return applylist_;
}
inline ::google::protobuf::RepeatedPtrField< ::FamilyData >*
PBCorpsApplyList::mutable_applylist() {
  return &applylist_;
}
inline const ::FamilyData& PBCorpsApplyList::applylist(int index) const {
  return applylist_.Get(index);
}
inline ::FamilyData* PBCorpsApplyList::mutable_applylist(int index) {
  return applylist_.Mutable(index);
}
inline ::FamilyData* PBCorpsApplyList::add_applylist() {
  return applylist_.Add();
}

// -------------------------------------------------------------------

// PBCorpsBasicInfo

// optional uint32 CorpsMemberNum = 1;
inline bool PBCorpsBasicInfo::has_corpsmembernum() const {
  return _has_bit(0);
}
inline void PBCorpsBasicInfo::clear_corpsmembernum() {
  corpsmembernum_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 PBCorpsBasicInfo::corpsmembernum() const {
  return corpsmembernum_;
}
inline void PBCorpsBasicInfo::set_corpsmembernum(::google::protobuf::uint32 value) {
  _set_bit(0);
  corpsmembernum_ = value;
}

// optional uint32 CorpsFamilyNum = 2;
inline bool PBCorpsBasicInfo::has_corpsfamilynum() const {
  return _has_bit(1);
}
inline void PBCorpsBasicInfo::clear_corpsfamilynum() {
  corpsfamilynum_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 PBCorpsBasicInfo::corpsfamilynum() const {
  return corpsfamilynum_;
}
inline void PBCorpsBasicInfo::set_corpsfamilynum(::google::protobuf::uint32 value) {
  _set_bit(1);
  corpsfamilynum_ = value;
}

// optional uint32 CorpsID = 3;
inline bool PBCorpsBasicInfo::has_corpsid() const {
  return _has_bit(2);
}
inline void PBCorpsBasicInfo::clear_corpsid() {
  corpsid_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 PBCorpsBasicInfo::corpsid() const {
  return corpsid_;
}
inline void PBCorpsBasicInfo::set_corpsid(::google::protobuf::uint32 value) {
  _set_bit(2);
  corpsid_ = value;
}

// optional uint32 CorpsMoney = 4;
inline bool PBCorpsBasicInfo::has_corpsmoney() const {
  return _has_bit(3);
}
inline void PBCorpsBasicInfo::clear_corpsmoney() {
  corpsmoney_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 PBCorpsBasicInfo::corpsmoney() const {
  return corpsmoney_;
}
inline void PBCorpsBasicInfo::set_corpsmoney(::google::protobuf::uint32 value) {
  _set_bit(3);
  corpsmoney_ = value;
}

// optional string CorpsRooterName = 5;
inline bool PBCorpsBasicInfo::has_corpsrootername() const {
  return _has_bit(4);
}
inline void PBCorpsBasicInfo::clear_corpsrootername() {
  if (corpsrootername_ != &_default_corpsrootername_) {
    corpsrootername_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& PBCorpsBasicInfo::corpsrootername() const {
  return *corpsrootername_;
}
inline void PBCorpsBasicInfo::set_corpsrootername(const ::std::string& value) {
  _set_bit(4);
  if (corpsrootername_ == &_default_corpsrootername_) {
    corpsrootername_ = new ::std::string;
  }
  corpsrootername_->assign(value);
}
inline void PBCorpsBasicInfo::set_corpsrootername(const char* value) {
  _set_bit(4);
  if (corpsrootername_ == &_default_corpsrootername_) {
    corpsrootername_ = new ::std::string;
  }
  corpsrootername_->assign(value);
}
inline void PBCorpsBasicInfo::set_corpsrootername(const char* value, size_t size) {
  _set_bit(4);
  if (corpsrootername_ == &_default_corpsrootername_) {
    corpsrootername_ = new ::std::string;
  }
  corpsrootername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBCorpsBasicInfo::mutable_corpsrootername() {
  _set_bit(4);
  if (corpsrootername_ == &_default_corpsrootername_) {
    corpsrootername_ = new ::std::string;
  }
  return corpsrootername_;
}

// optional uint32 CorpsRooterID = 6;
inline bool PBCorpsBasicInfo::has_corpsrooterid() const {
  return _has_bit(5);
}
inline void PBCorpsBasicInfo::clear_corpsrooterid() {
  corpsrooterid_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 PBCorpsBasicInfo::corpsrooterid() const {
  return corpsrooterid_;
}
inline void PBCorpsBasicInfo::set_corpsrooterid(::google::protobuf::uint32 value) {
  _set_bit(5);
  corpsrooterid_ = value;
}

// optional uint32 CorpsLevel = 7;
inline bool PBCorpsBasicInfo::has_corpslevel() const {
  return _has_bit(6);
}
inline void PBCorpsBasicInfo::clear_corpslevel() {
  corpslevel_ = 0u;
  _clear_bit(6);
}
inline ::google::protobuf::uint32 PBCorpsBasicInfo::corpslevel() const {
  return corpslevel_;
}
inline void PBCorpsBasicInfo::set_corpslevel(::google::protobuf::uint32 value) {
  _set_bit(6);
  corpslevel_ = value;
}

// optional string CorpsName = 8;
inline bool PBCorpsBasicInfo::has_corpsname() const {
  return _has_bit(7);
}
inline void PBCorpsBasicInfo::clear_corpsname() {
  if (corpsname_ != &_default_corpsname_) {
    corpsname_->clear();
  }
  _clear_bit(7);
}
inline const ::std::string& PBCorpsBasicInfo::corpsname() const {
  return *corpsname_;
}
inline void PBCorpsBasicInfo::set_corpsname(const ::std::string& value) {
  _set_bit(7);
  if (corpsname_ == &_default_corpsname_) {
    corpsname_ = new ::std::string;
  }
  corpsname_->assign(value);
}
inline void PBCorpsBasicInfo::set_corpsname(const char* value) {
  _set_bit(7);
  if (corpsname_ == &_default_corpsname_) {
    corpsname_ = new ::std::string;
  }
  corpsname_->assign(value);
}
inline void PBCorpsBasicInfo::set_corpsname(const char* value, size_t size) {
  _set_bit(7);
  if (corpsname_ == &_default_corpsname_) {
    corpsname_ = new ::std::string;
  }
  corpsname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBCorpsBasicInfo::mutable_corpsname() {
  _set_bit(7);
  if (corpsname_ == &_default_corpsname_) {
    corpsname_ = new ::std::string;
  }
  return corpsname_;
}

// optional uint32 CorpsGlory = 9;
inline bool PBCorpsBasicInfo::has_corpsglory() const {
  return _has_bit(8);
}
inline void PBCorpsBasicInfo::clear_corpsglory() {
  corpsglory_ = 0u;
  _clear_bit(8);
}
inline ::google::protobuf::uint32 PBCorpsBasicInfo::corpsglory() const {
  return corpsglory_;
}
inline void PBCorpsBasicInfo::set_corpsglory(::google::protobuf::uint32 value) {
  _set_bit(8);
  corpsglory_ = value;
}

// optional uint32 CorpsDevelop = 10;
inline bool PBCorpsBasicInfo::has_corpsdevelop() const {
  return _has_bit(9);
}
inline void PBCorpsBasicInfo::clear_corpsdevelop() {
  corpsdevelop_ = 0u;
  _clear_bit(9);
}
inline ::google::protobuf::uint32 PBCorpsBasicInfo::corpsdevelop() const {
  return corpsdevelop_;
}
inline void PBCorpsBasicInfo::set_corpsdevelop(::google::protobuf::uint32 value) {
  _set_bit(9);
  corpsdevelop_ = value;
}

// optional uint32 MaxFamilyNum = 11;
inline bool PBCorpsBasicInfo::has_maxfamilynum() const {
  return _has_bit(10);
}
inline void PBCorpsBasicInfo::clear_maxfamilynum() {
  maxfamilynum_ = 0u;
  _clear_bit(10);
}
inline ::google::protobuf::uint32 PBCorpsBasicInfo::maxfamilynum() const {
  return maxfamilynum_;
}
inline void PBCorpsBasicInfo::set_maxfamilynum(::google::protobuf::uint32 value) {
  _set_bit(10);
  maxfamilynum_ = value;
}

// optional uint32 CorpsStarLevel = 12;
inline bool PBCorpsBasicInfo::has_corpsstarlevel() const {
  return _has_bit(11);
}
inline void PBCorpsBasicInfo::clear_corpsstarlevel() {
  corpsstarlevel_ = 0u;
  _clear_bit(11);
}
inline ::google::protobuf::uint32 PBCorpsBasicInfo::corpsstarlevel() const {
  return corpsstarlevel_;
}
inline void PBCorpsBasicInfo::set_corpsstarlevel(::google::protobuf::uint32 value) {
  _set_bit(11);
  corpsstarlevel_ = value;
}

// optional uint32 MainCityMap = 13;
inline bool PBCorpsBasicInfo::has_maincitymap() const {
  return _has_bit(12);
}
inline void PBCorpsBasicInfo::clear_maincitymap() {
  maincitymap_ = 0u;
  _clear_bit(12);
}
inline ::google::protobuf::uint32 PBCorpsBasicInfo::maincitymap() const {
  return maincitymap_;
}
inline void PBCorpsBasicInfo::set_maincitymap(::google::protobuf::uint32 value) {
  _set_bit(12);
  maincitymap_ = value;
}

// -------------------------------------------------------------------

// CorpsInfoList

// repeated .PBCorpsBasicInfo CorpsList = 1;
inline int CorpsInfoList::corpslist_size() const {
  return corpslist_.size();
}
inline void CorpsInfoList::clear_corpslist() {
  corpslist_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBCorpsBasicInfo >&
CorpsInfoList::corpslist() const {
  return corpslist_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBCorpsBasicInfo >*
CorpsInfoList::mutable_corpslist() {
  return &corpslist_;
}
inline const ::PBCorpsBasicInfo& CorpsInfoList::corpslist(int index) const {
  return corpslist_.Get(index);
}
inline ::PBCorpsBasicInfo* CorpsInfoList::mutable_corpslist(int index) {
  return corpslist_.Mutable(index);
}
inline ::PBCorpsBasicInfo* CorpsInfoList::add_corpslist() {
  return corpslist_.Add();
}

// -------------------------------------------------------------------

// PBCorpsFamilyInfo

// optional uint32 Contribute = 1;
inline bool PBCorpsFamilyInfo::has_contribute() const {
  return _has_bit(0);
}
inline void PBCorpsFamilyInfo::clear_contribute() {
  contribute_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 PBCorpsFamilyInfo::contribute() const {
  return contribute_;
}
inline void PBCorpsFamilyInfo::set_contribute(::google::protobuf::uint32 value) {
  _set_bit(0);
  contribute_ = value;
}

// optional uint32 FamilyID = 2;
inline bool PBCorpsFamilyInfo::has_familyid() const {
  return _has_bit(1);
}
inline void PBCorpsFamilyInfo::clear_familyid() {
  familyid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 PBCorpsFamilyInfo::familyid() const {
  return familyid_;
}
inline void PBCorpsFamilyInfo::set_familyid(::google::protobuf::uint32 value) {
  _set_bit(1);
  familyid_ = value;
}

// -------------------------------------------------------------------

// PBCorpsFamilyInfoList

// repeated .PBCorpsFamilyInfo FamilyInfo = 1;
inline int PBCorpsFamilyInfoList::familyinfo_size() const {
  return familyinfo_.size();
}
inline void PBCorpsFamilyInfoList::clear_familyinfo() {
  familyinfo_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBCorpsFamilyInfo >&
PBCorpsFamilyInfoList::familyinfo() const {
  return familyinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBCorpsFamilyInfo >*
PBCorpsFamilyInfoList::mutable_familyinfo() {
  return &familyinfo_;
}
inline const ::PBCorpsFamilyInfo& PBCorpsFamilyInfoList::familyinfo(int index) const {
  return familyinfo_.Get(index);
}
inline ::PBCorpsFamilyInfo* PBCorpsFamilyInfoList::mutable_familyinfo(int index) {
  return familyinfo_.Mutable(index);
}
inline ::PBCorpsFamilyInfo* PBCorpsFamilyInfoList::add_familyinfo() {
  return familyinfo_.Add();
}

// -------------------------------------------------------------------

// PBUnionBasicInfo

// optional uint32 UnionID = 1;
inline bool PBUnionBasicInfo::has_unionid() const {
  return _has_bit(0);
}
inline void PBUnionBasicInfo::clear_unionid() {
  unionid_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 PBUnionBasicInfo::unionid() const {
  return unionid_;
}
inline void PBUnionBasicInfo::set_unionid(::google::protobuf::uint32 value) {
  _set_bit(0);
  unionid_ = value;
}

// optional string UnionName = 2;
inline bool PBUnionBasicInfo::has_unionname() const {
  return _has_bit(1);
}
inline void PBUnionBasicInfo::clear_unionname() {
  if (unionname_ != &_default_unionname_) {
    unionname_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& PBUnionBasicInfo::unionname() const {
  return *unionname_;
}
inline void PBUnionBasicInfo::set_unionname(const ::std::string& value) {
  _set_bit(1);
  if (unionname_ == &_default_unionname_) {
    unionname_ = new ::std::string;
  }
  unionname_->assign(value);
}
inline void PBUnionBasicInfo::set_unionname(const char* value) {
  _set_bit(1);
  if (unionname_ == &_default_unionname_) {
    unionname_ = new ::std::string;
  }
  unionname_->assign(value);
}
inline void PBUnionBasicInfo::set_unionname(const char* value, size_t size) {
  _set_bit(1);
  if (unionname_ == &_default_unionname_) {
    unionname_ = new ::std::string;
  }
  unionname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBUnionBasicInfo::mutable_unionname() {
  _set_bit(1);
  if (unionname_ == &_default_unionname_) {
    unionname_ = new ::std::string;
  }
  return unionname_;
}

// optional uint32 CoreID = 3;
inline bool PBUnionBasicInfo::has_coreid() const {
  return _has_bit(2);
}
inline void PBUnionBasicInfo::clear_coreid() {
  coreid_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 PBUnionBasicInfo::coreid() const {
  return coreid_;
}
inline void PBUnionBasicInfo::set_coreid(::google::protobuf::uint32 value) {
  _set_bit(2);
  coreid_ = value;
}

// optional string CoreName = 4;
inline bool PBUnionBasicInfo::has_corename() const {
  return _has_bit(3);
}
inline void PBUnionBasicInfo::clear_corename() {
  if (corename_ != &_default_corename_) {
    corename_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& PBUnionBasicInfo::corename() const {
  return *corename_;
}
inline void PBUnionBasicInfo::set_corename(const ::std::string& value) {
  _set_bit(3);
  if (corename_ == &_default_corename_) {
    corename_ = new ::std::string;
  }
  corename_->assign(value);
}
inline void PBUnionBasicInfo::set_corename(const char* value) {
  _set_bit(3);
  if (corename_ == &_default_corename_) {
    corename_ = new ::std::string;
  }
  corename_->assign(value);
}
inline void PBUnionBasicInfo::set_corename(const char* value, size_t size) {
  _set_bit(3);
  if (corename_ == &_default_corename_) {
    corename_ = new ::std::string;
  }
  corename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBUnionBasicInfo::mutable_corename() {
  _set_bit(3);
  if (corename_ == &_default_corename_) {
    corename_ = new ::std::string;
  }
  return corename_;
}

// optional string RooterName = 5;
inline bool PBUnionBasicInfo::has_rootername() const {
  return _has_bit(4);
}
inline void PBUnionBasicInfo::clear_rootername() {
  if (rootername_ != &_default_rootername_) {
    rootername_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& PBUnionBasicInfo::rootername() const {
  return *rootername_;
}
inline void PBUnionBasicInfo::set_rootername(const ::std::string& value) {
  _set_bit(4);
  if (rootername_ == &_default_rootername_) {
    rootername_ = new ::std::string;
  }
  rootername_->assign(value);
}
inline void PBUnionBasicInfo::set_rootername(const char* value) {
  _set_bit(4);
  if (rootername_ == &_default_rootername_) {
    rootername_ = new ::std::string;
  }
  rootername_->assign(value);
}
inline void PBUnionBasicInfo::set_rootername(const char* value, size_t size) {
  _set_bit(4);
  if (rootername_ == &_default_rootername_) {
    rootername_ = new ::std::string;
  }
  rootername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBUnionBasicInfo::mutable_rootername() {
  _set_bit(4);
  if (rootername_ == &_default_rootername_) {
    rootername_ = new ::std::string;
  }
  return rootername_;
}

// optional uint32 RooterID = 6;
inline bool PBUnionBasicInfo::has_rooterid() const {
  return _has_bit(5);
}
inline void PBUnionBasicInfo::clear_rooterid() {
  rooterid_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 PBUnionBasicInfo::rooterid() const {
  return rooterid_;
}
inline void PBUnionBasicInfo::set_rooterid(::google::protobuf::uint32 value) {
  _set_bit(5);
  rooterid_ = value;
}

// optional uint32 CityID = 7;
inline bool PBUnionBasicInfo::has_cityid() const {
  return _has_bit(6);
}
inline void PBUnionBasicInfo::clear_cityid() {
  cityid_ = 0u;
  _clear_bit(6);
}
inline ::google::protobuf::uint32 PBUnionBasicInfo::cityid() const {
  return cityid_;
}
inline void PBUnionBasicInfo::set_cityid(::google::protobuf::uint32 value) {
  _set_bit(6);
  cityid_ = value;
}

// optional uint32 CorpsNum = 8;
inline bool PBUnionBasicInfo::has_corpsnum() const {
  return _has_bit(7);
}
inline void PBUnionBasicInfo::clear_corpsnum() {
  corpsnum_ = 0u;
  _clear_bit(7);
}
inline ::google::protobuf::uint32 PBUnionBasicInfo::corpsnum() const {
  return corpsnum_;
}
inline void PBUnionBasicInfo::set_corpsnum(::google::protobuf::uint32 value) {
  _set_bit(7);
  corpsnum_ = value;
}

// optional uint32 MemberNum = 9;
inline bool PBUnionBasicInfo::has_membernum() const {
  return _has_bit(8);
}
inline void PBUnionBasicInfo::clear_membernum() {
  membernum_ = 0u;
  _clear_bit(8);
}
inline ::google::protobuf::uint32 PBUnionBasicInfo::membernum() const {
  return membernum_;
}
inline void PBUnionBasicInfo::set_membernum(::google::protobuf::uint32 value) {
  _set_bit(8);
  membernum_ = value;
}

// repeated uint32 MapID = 10;
inline int PBUnionBasicInfo::mapid_size() const {
  return mapid_.size();
}
inline void PBUnionBasicInfo::clear_mapid() {
  mapid_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PBUnionBasicInfo::mapid() const {
  return mapid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PBUnionBasicInfo::mutable_mapid() {
  return &mapid_;
}
inline ::google::protobuf::uint32 PBUnionBasicInfo::mapid(int index) const {
  return mapid_.Get(index);
}
inline void PBUnionBasicInfo::set_mapid(int index, ::google::protobuf::uint32 value) {
  mapid_.Set(index, value);
}
inline void PBUnionBasicInfo::add_mapid(::google::protobuf::uint32 value) {
  mapid_.Add(value);
}

// optional uint32 Money = 11;
inline bool PBUnionBasicInfo::has_money() const {
  return _has_bit(10);
}
inline void PBUnionBasicInfo::clear_money() {
  money_ = 0u;
  _clear_bit(10);
}
inline ::google::protobuf::uint32 PBUnionBasicInfo::money() const {
  return money_;
}
inline void PBUnionBasicInfo::set_money(::google::protobuf::uint32 value) {
  _set_bit(10);
  money_ = value;
}

// -------------------------------------------------------------------

// PBTaskListInfo

// optional uint32 TaskID = 1;
inline bool PBTaskListInfo::has_taskid() const {
  return _has_bit(0);
}
inline void PBTaskListInfo::clear_taskid() {
  taskid_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 PBTaskListInfo::taskid() const {
  return taskid_;
}
inline void PBTaskListInfo::set_taskid(::google::protobuf::uint32 value) {
  _set_bit(0);
  taskid_ = value;
}

// optional uint32 TaskState = 2;
inline bool PBTaskListInfo::has_taskstate() const {
  return _has_bit(1);
}
inline void PBTaskListInfo::clear_taskstate() {
  taskstate_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 PBTaskListInfo::taskstate() const {
  return taskstate_;
}
inline void PBTaskListInfo::set_taskstate(::google::protobuf::uint32 value) {
  _set_bit(1);
  taskstate_ = value;
}

// optional uint32 EntityID = 3;
inline bool PBTaskListInfo::has_entityid() const {
  return _has_bit(2);
}
inline void PBTaskListInfo::clear_entityid() {
  entityid_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 PBTaskListInfo::entityid() const {
  return entityid_;
}
inline void PBTaskListInfo::set_entityid(::google::protobuf::uint32 value) {
  _set_bit(2);
  entityid_ = value;
}

// -------------------------------------------------------------------

// PBCorpsPublishInfo

// optional uint32 TodayTimes = 1;
inline bool PBCorpsPublishInfo::has_todaytimes() const {
  return _has_bit(0);
}
inline void PBCorpsPublishInfo::clear_todaytimes() {
  todaytimes_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 PBCorpsPublishInfo::todaytimes() const {
  return todaytimes_;
}
inline void PBCorpsPublishInfo::set_todaytimes(::google::protobuf::uint32 value) {
  _set_bit(0);
  todaytimes_ = value;
}

// optional uint32 WeekTimes = 2;
inline bool PBCorpsPublishInfo::has_weektimes() const {
  return _has_bit(1);
}
inline void PBCorpsPublishInfo::clear_weektimes() {
  weektimes_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 PBCorpsPublishInfo::weektimes() const {
  return weektimes_;
}
inline void PBCorpsPublishInfo::set_weektimes(::google::protobuf::uint32 value) {
  _set_bit(1);
  weektimes_ = value;
}

// repeated .PBTaskListInfo TaskList = 3;
inline int PBCorpsPublishInfo::tasklist_size() const {
  return tasklist_.size();
}
inline void PBCorpsPublishInfo::clear_tasklist() {
  tasklist_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBTaskListInfo >&
PBCorpsPublishInfo::tasklist() const {
  return tasklist_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBTaskListInfo >*
PBCorpsPublishInfo::mutable_tasklist() {
  return &tasklist_;
}
inline const ::PBTaskListInfo& PBCorpsPublishInfo::tasklist(int index) const {
  return tasklist_.Get(index);
}
inline ::PBTaskListInfo* PBCorpsPublishInfo::mutable_tasklist(int index) {
  return tasklist_.Mutable(index);
}
inline ::PBTaskListInfo* PBCorpsPublishInfo::add_tasklist() {
  return tasklist_.Add();
}

#endif  // PROTOBUF_corpsinfo_5fpb_2ehxx__INCLUDED
