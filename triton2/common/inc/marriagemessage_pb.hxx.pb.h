// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_marriagemessage_5fpb_2ehxx__INCLUDED
#define PROTOBUF_marriagemessage_5fpb_2ehxx__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "property_pb.hxx.pb.h"
#include "coremessage_pb.hxx.pb.h"

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();

class CMessageApplyMarryRequest;
class CMessageApplyMarryResponse;
class CMessageMarryRequestNotify;
class CMessageReplyMarryRequest;
class CMessageReplyMarryResponse;
class CMessageMarriageTipsNotify;
class CMessageBeginWeddingRequest;
class CMessageBeginWeddingResponse;
class CMessageBeginWeddingNotify;
class CMessageReplyBeginWeddingRequest;
class CMessageReplyBeginWeddingResponse;
class CMessageWeddingStartNotify;
class CMessageEnterMarriageHallNotify;
class CMessageReplyEnterMarriageHallRequest;
class CMessageReplyEnterMarriageHallResponse;
class CMessageNewlyEnterHallRequest;
class CMessageNewlyEnterHallResponse;
class CMessageGuestEnterHallRequest;
class CMessageGuestEnterHallResponse;
class CMessageBaitangRequest;
class CMessageBaitangResponse;
class CMessageBaitangNotify;
class CMessagePutKeepSakeRequest;
class CMessagePutKeepSakeResponse;
class CMessageExchangeKeepsakeRequest;
class CMessageExchangeKeepsakeResponse;
class CMessageExchangeKeepsakeNotify;
class CMessageDivorceRequest;
class CMessageDivorceResponse;
class CMessageDivorceNotify;
class CMessageMarryResultNotify;
class CMessageBeginWeddingResultNofiy;
class CMessageGetCampMarriageInfoRequest;
class PBMarriageInfo;
class PBMarriageList;
class CMessageGetCampMarriageInfoResponse;
class CMessagePersonMarriedNotify;
class CMessagePersonMarriageInfoNotify;
class CMessageSpouseDivorceNotify;
class CMessageUseSysInvitationRequest;
class CMessageUseSysInvitationResponse;
class CMessageTimeToPutKeepsakeNotify;
class CMessageCancelWeddingRequest;
class CMessageCancelWeddingResponse;
class CMessageNewlyMarriedNotify;
class CMessageWeddingEndNotify;
class CMessageStartKeepsakeExchangeRequest;
class CMessageStartKeepsakeExchangeResponse;
class CMessageStopKeepsakeExchangeRequest;
class CMessageStopKeepsakeExchangeResponse;
class CMessageStopKeepsakeExchangeNotify;
class CMessageInvitationExchangeRequest;
class CMessageInvitationExchangeResponse;
class CMessageExchangeResultNotify;
class CMessageTeleToWeddingNpcRequest;
class CMessageTeleToWeddingNpcResponse;
class CMessageReviewWeddingRequest;
class CMessageReviewWeddingResponse;
class CMessageReviewWeddingNotify;

enum MarriageMessageID {
  MARRIAGE_MESSAGE = 23552,
  ID_C2S_REQUEST_APPLYMARRY = 23553,
  ID_S2C_RESPONSE_APPLYMARRY = 23554,
  ID_S2C_NOTIFY_MARRYREQUEST = 23555,
  ID_C2S_REQUEST_REPLYMARRY = 23556,
  ID_S2C_RESPONSE_REPLYMARRY = 23557,
  ID_S2C_NOTIFY_MARRIAGETIPS = 23558,
  ID_C2S_REQUEST_BEGINWEDDING = 23559,
  ID_S2C_RESPONSE_BEGINWEDDING = 23560,
  ID_S2C_NOTIFY_BEGINWEDDING = 23561,
  ID_C2S_REQUEST_REPLYBEGINWEDDING = 23562,
  ID_S2C_RESPONSE_REPLYBEGINWEDDING = 23563,
  ID_S2C_NOTIFY_WEDDINGSTART = 23564,
  ID_S2C_NOTIFY_ENTERMARRIAGEHALL = 23565,
  ID_C2S_REQUEST_REPLYENTERMARRIAGEHALL = 23566,
  ID_S2C_RESPONSE_REPLYENTERMARRIAGEHALL = 23567,
  ID_C2S_REQUEST_NEWLYWEDENTERHALL = 23568,
  ID_S2C_RESPONSE_NEWLYWEDENTERHALL = 23569,
  ID_C2S_REQUEST_GUESTENTERHALL = 23570,
  ID_S2C_RESPONSE_GUESTENTERHALL = 23571,
  ID_C2S_REQUEST_BAITANG = 23572,
  ID_S2C_RESPONSE_BAITANG = 23573,
  ID_S2C_NOTIFY_BAITANG = 23574,
  ID_C2S_REQUEST_PUTKEEPSAKE = 23575,
  ID_S2C_RESPONSE_PUTKEEPSAKE = 23576,
  ID_C2S_REQUEST_EXCHANGKEEPSAKE = 23577,
  ID_S2C_RESPONSE_EXCHANGKEEPSAKE = 23578,
  ID_S2C_NOTIFY_EXCHANGEKEEPSAKE = 23579,
  ID_C2S_REQUEST_DIVORCE = 23580,
  ID_S2C_RESPONSE_DIVORCE = 23581,
  ID_S2C_NOTIFY_DIVORCE = 23582,
  ID_S2C_NOTIFY_MARRYRESULT = 23583,
  ID_S2C_NOTIFY_BEGINWEDINGRESULT = 23584,
  ID_C2S_REQUEST_GETCAMPMARRAIGEINFO = 23585,
  ID_S2C_RESPONSE_GETCAMPMARRIAGEINFO = 23586,
  ID_S2C_NOTIFY_PERSONMARRIED = 23587,
  ID_S2C_NOTIFY_PERSONMARRIAGEINFO = 23588,
  ID_S2C_NOTIFY_SPOUSEDIVORCE = 24101,
  ID_C2S_REQUEST_USESYSINVITATION = 23590,
  ID_S2C_RESPONSE_USESYSINVITATION = 23591,
  ID_S2C_NOTIFY_TIMETOPUTKEEPSAKE = 23592,
  ID_C2S_REQUEST_CANCELWEDDING = 23593,
  ID_S2C_RESPONSE_CANCELWEDDING = 23600,
  ID_S2C_NOTIFY_NEWLYMARRIED = 23601,
  ID_S2C_NOTIFY_WEDDINGEND = 23602,
  ID_C2S_REQUEST_STARTKEEPSAKEEXCHANGE = 23603,
  ID_S2C_RESPONSE_STARTKEEPSAKEEXCHANGE = 23604,
  ID_C2S_REQUEST_STOPKEEPSAKEEXCHANGE = 23605,
  ID_S2C_RESPONSE_STOPKEEPSAKEEXCHANGE = 23606,
  ID_S2C_NOTIFY_STOPKEEPSAKEEXCHANGE = 23607,
  ID_C2S_REQUEST_INVITATIONEXCHANGE = 23608,
  ID_S2C_RESPONSE_INVITATIONEXCHANGE = 23609,
  ID_S2C_NOTIFY_EXCHANGERESULT = 23610,
  ID_C2S_REQUEST_TELETOWEDDINGNPC = 23611,
  ID_S2C_RESPONSE_TELETOWEDDINGNPC = 23612,
  ID_C2S_REQUEST_REVIEWWEDDING = 23613,
  ID_S2C_RESPONSE_REVIEWWEDDING = 23614,
  ID_S2C_NOTIFY_REVIEWWEDDING = 23615
};
const ::google::protobuf::EnumDescriptor* MarriageMessageID_descriptor();
bool MarriageMessageID_IsValid(int value);
const MarriageMessageID MarriageMessageID_MIN = MARRIAGE_MESSAGE;
const MarriageMessageID MarriageMessageID_MAX = ID_S2C_NOTIFY_SPOUSEDIVORCE;

inline const ::std::string& MarriageMessageID_Name(MarriageMessageID value) {
  return ::google::protobuf::internal::NameOfEnum(
    MarriageMessageID_descriptor(), value);
}
inline bool MarriageMessageID_Parse(
    const ::std::string& name, MarriageMessageID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MarriageMessageID>(
    MarriageMessageID_descriptor(), name, value);
}
// ===================================================================

class CMessageApplyMarryRequest : public ::google::protobuf::Message {
 public:
  CMessageApplyMarryRequest();
  virtual ~CMessageApplyMarryRequest();
  
  CMessageApplyMarryRequest(const CMessageApplyMarryRequest& from);
  
  inline CMessageApplyMarryRequest& operator=(const CMessageApplyMarryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageApplyMarryRequest& default_instance();
  void Swap(CMessageApplyMarryRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageApplyMarryRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageApplyMarryRequest& from);
  void MergeFrom(const CMessageApplyMarryRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 TimeID = 1;
  inline bool has_timeid() const;
  inline void clear_timeid();
  static const int kTimeIDFieldNumber = 1;
  inline ::google::protobuf::uint32 timeid() const;
  inline void set_timeid(::google::protobuf::uint32 value);
  
  // optional uint32 WeddingModule = 2;
  inline bool has_weddingmodule() const;
  inline void clear_weddingmodule();
  static const int kWeddingModuleFieldNumber = 2;
  inline ::google::protobuf::uint32 weddingmodule() const;
  inline void set_weddingmodule(::google::protobuf::uint32 value);
  
  // optional uint32 DayID = 3;
  inline bool has_dayid() const;
  inline void clear_dayid();
  static const int kDayIDFieldNumber = 3;
  inline ::google::protobuf::uint32 dayid() const;
  inline void set_dayid(::google::protobuf::uint32 value);
  
  // optional uint32 HoldWedding = 4;
  inline bool has_holdwedding() const;
  inline void clear_holdwedding();
  static const int kHoldWeddingFieldNumber = 4;
  inline ::google::protobuf::uint32 holdwedding() const;
  inline void set_holdwedding(::google::protobuf::uint32 value);
  
  // optional uint32 EntityID = 5;
  inline bool has_entityid() const;
  inline void clear_entityid();
  static const int kEntityIDFieldNumber = 5;
  inline ::google::protobuf::uint32 entityid() const;
  inline void set_entityid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 timeid_;
  ::google::protobuf::uint32 weddingmodule_;
  ::google::protobuf::uint32 dayid_;
  ::google::protobuf::uint32 holdwedding_;
  ::google::protobuf::uint32 entityid_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageApplyMarryRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageApplyMarryResponse : public ::google::protobuf::Message {
 public:
  CMessageApplyMarryResponse();
  virtual ~CMessageApplyMarryResponse();
  
  CMessageApplyMarryResponse(const CMessageApplyMarryResponse& from);
  
  inline CMessageApplyMarryResponse& operator=(const CMessageApplyMarryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageApplyMarryResponse& default_instance();
  void Swap(CMessageApplyMarryResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageApplyMarryResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageApplyMarryResponse& from);
  void MergeFrom(const CMessageApplyMarryResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 Errcode = 1;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 1;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 errcode_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageApplyMarryResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageMarryRequestNotify : public ::google::protobuf::Message {
 public:
  CMessageMarryRequestNotify();
  virtual ~CMessageMarryRequestNotify();
  
  CMessageMarryRequestNotify(const CMessageMarryRequestNotify& from);
  
  inline CMessageMarryRequestNotify& operator=(const CMessageMarryRequestNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageMarryRequestNotify& default_instance();
  void Swap(CMessageMarryRequestNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageMarryRequestNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageMarryRequestNotify& from);
  void MergeFrom(const CMessageMarryRequestNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 RoleID = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIDFieldNumber = 1;
  inline ::google::protobuf::uint32 roleid() const;
  inline void set_roleid(::google::protobuf::uint32 value);
  
  // optional string RoleName = 2;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  
  // optional uint32 Year = 3;
  inline bool has_year() const;
  inline void clear_year();
  static const int kYearFieldNumber = 3;
  inline ::google::protobuf::uint32 year() const;
  inline void set_year(::google::protobuf::uint32 value);
  
  // optional uint32 Month = 4;
  inline bool has_month() const;
  inline void clear_month();
  static const int kMonthFieldNumber = 4;
  inline ::google::protobuf::uint32 month() const;
  inline void set_month(::google::protobuf::uint32 value);
  
  // optional uint32 Day = 5;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 5;
  inline ::google::protobuf::uint32 day() const;
  inline void set_day(::google::protobuf::uint32 value);
  
  // optional uint32 BeginTime = 6;
  inline bool has_begintime() const;
  inline void clear_begintime();
  static const int kBeginTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 begintime() const;
  inline void set_begintime(::google::protobuf::uint32 value);
  
  // optional uint32 WeddingModule = 7;
  inline bool has_weddingmodule() const;
  inline void clear_weddingmodule();
  static const int kWeddingModuleFieldNumber = 7;
  inline ::google::protobuf::uint32 weddingmodule() const;
  inline void set_weddingmodule(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 roleid_;
  ::std::string* rolename_;
  static const ::std::string _default_rolename_;
  ::google::protobuf::uint32 year_;
  ::google::protobuf::uint32 month_;
  ::google::protobuf::uint32 day_;
  ::google::protobuf::uint32 begintime_;
  ::google::protobuf::uint32 weddingmodule_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageMarryRequestNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessageReplyMarryRequest : public ::google::protobuf::Message {
 public:
  CMessageReplyMarryRequest();
  virtual ~CMessageReplyMarryRequest();
  
  CMessageReplyMarryRequest(const CMessageReplyMarryRequest& from);
  
  inline CMessageReplyMarryRequest& operator=(const CMessageReplyMarryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageReplyMarryRequest& default_instance();
  void Swap(CMessageReplyMarryRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageReplyMarryRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageReplyMarryRequest& from);
  void MergeFrom(const CMessageReplyMarryRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 Result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);
  
  // optional uint32 EntityID = 2;
  inline bool has_entityid() const;
  inline void clear_entityid();
  static const int kEntityIDFieldNumber = 2;
  inline ::google::protobuf::uint32 entityid() const;
  inline void set_entityid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 result_;
  ::google::protobuf::uint32 entityid_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageReplyMarryRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageReplyMarryResponse : public ::google::protobuf::Message {
 public:
  CMessageReplyMarryResponse();
  virtual ~CMessageReplyMarryResponse();
  
  CMessageReplyMarryResponse(const CMessageReplyMarryResponse& from);
  
  inline CMessageReplyMarryResponse& operator=(const CMessageReplyMarryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageReplyMarryResponse& default_instance();
  void Swap(CMessageReplyMarryResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageReplyMarryResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageReplyMarryResponse& from);
  void MergeFrom(const CMessageReplyMarryResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 Errcode = 1;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 1;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);
  
  // optional uint32 Result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);
  
  // optional string SpouseName = 3;
  inline bool has_spousename() const;
  inline void clear_spousename();
  static const int kSpouseNameFieldNumber = 3;
  inline const ::std::string& spousename() const;
  inline void set_spousename(const ::std::string& value);
  inline void set_spousename(const char* value);
  inline void set_spousename(const char* value, size_t size);
  inline ::std::string* mutable_spousename();
  
  // optional uint32 MarriageStatus = 4;
  inline bool has_marriagestatus() const;
  inline void clear_marriagestatus();
  static const int kMarriageStatusFieldNumber = 4;
  inline ::google::protobuf::uint32 marriagestatus() const;
  inline void set_marriagestatus(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 errcode_;
  ::google::protobuf::uint32 result_;
  ::std::string* spousename_;
  static const ::std::string _default_spousename_;
  ::google::protobuf::uint32 marriagestatus_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageReplyMarryResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageMarriageTipsNotify : public ::google::protobuf::Message {
 public:
  CMessageMarriageTipsNotify();
  virtual ~CMessageMarriageTipsNotify();
  
  CMessageMarriageTipsNotify(const CMessageMarriageTipsNotify& from);
  
  inline CMessageMarriageTipsNotify& operator=(const CMessageMarriageTipsNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageMarriageTipsNotify& default_instance();
  void Swap(CMessageMarriageTipsNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageMarriageTipsNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageMarriageTipsNotify& from);
  void MergeFrom(const CMessageMarriageTipsNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 WeddingTime = 1;
  inline bool has_weddingtime() const;
  inline void clear_weddingtime();
  static const int kWeddingTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 weddingtime() const;
  inline void set_weddingtime(::google::protobuf::uint32 value);
  
  // optional uint32 WeddingStatus = 2;
  inline bool has_weddingstatus() const;
  inline void clear_weddingstatus();
  static const int kWeddingStatusFieldNumber = 2;
  inline ::google::protobuf::uint32 weddingstatus() const;
  inline void set_weddingstatus(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 weddingtime_;
  ::google::protobuf::uint32 weddingstatus_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageMarriageTipsNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessageBeginWeddingRequest : public ::google::protobuf::Message {
 public:
  CMessageBeginWeddingRequest();
  virtual ~CMessageBeginWeddingRequest();
  
  CMessageBeginWeddingRequest(const CMessageBeginWeddingRequest& from);
  
  inline CMessageBeginWeddingRequest& operator=(const CMessageBeginWeddingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageBeginWeddingRequest& default_instance();
  void Swap(CMessageBeginWeddingRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageBeginWeddingRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageBeginWeddingRequest& from);
  void MergeFrom(const CMessageBeginWeddingRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 EntityID = 1;
  inline bool has_entityid() const;
  inline void clear_entityid();
  static const int kEntityIDFieldNumber = 1;
  inline ::google::protobuf::uint32 entityid() const;
  inline void set_entityid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 entityid_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageBeginWeddingRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageBeginWeddingResponse : public ::google::protobuf::Message {
 public:
  CMessageBeginWeddingResponse();
  virtual ~CMessageBeginWeddingResponse();
  
  CMessageBeginWeddingResponse(const CMessageBeginWeddingResponse& from);
  
  inline CMessageBeginWeddingResponse& operator=(const CMessageBeginWeddingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageBeginWeddingResponse& default_instance();
  void Swap(CMessageBeginWeddingResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageBeginWeddingResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageBeginWeddingResponse& from);
  void MergeFrom(const CMessageBeginWeddingResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 Errcode = 1;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 1;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 errcode_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageBeginWeddingResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageBeginWeddingNotify : public ::google::protobuf::Message {
 public:
  CMessageBeginWeddingNotify();
  virtual ~CMessageBeginWeddingNotify();
  
  CMessageBeginWeddingNotify(const CMessageBeginWeddingNotify& from);
  
  inline CMessageBeginWeddingNotify& operator=(const CMessageBeginWeddingNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageBeginWeddingNotify& default_instance();
  void Swap(CMessageBeginWeddingNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageBeginWeddingNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageBeginWeddingNotify& from);
  void MergeFrom(const CMessageBeginWeddingNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[1];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageBeginWeddingNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessageReplyBeginWeddingRequest : public ::google::protobuf::Message {
 public:
  CMessageReplyBeginWeddingRequest();
  virtual ~CMessageReplyBeginWeddingRequest();
  
  CMessageReplyBeginWeddingRequest(const CMessageReplyBeginWeddingRequest& from);
  
  inline CMessageReplyBeginWeddingRequest& operator=(const CMessageReplyBeginWeddingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageReplyBeginWeddingRequest& default_instance();
  void Swap(CMessageReplyBeginWeddingRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageReplyBeginWeddingRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageReplyBeginWeddingRequest& from);
  void MergeFrom(const CMessageReplyBeginWeddingRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 Result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);
  
  // optional uint32 EntityID = 2;
  inline bool has_entityid() const;
  inline void clear_entityid();
  static const int kEntityIDFieldNumber = 2;
  inline ::google::protobuf::uint32 entityid() const;
  inline void set_entityid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 result_;
  ::google::protobuf::uint32 entityid_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageReplyBeginWeddingRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageReplyBeginWeddingResponse : public ::google::protobuf::Message {
 public:
  CMessageReplyBeginWeddingResponse();
  virtual ~CMessageReplyBeginWeddingResponse();
  
  CMessageReplyBeginWeddingResponse(const CMessageReplyBeginWeddingResponse& from);
  
  inline CMessageReplyBeginWeddingResponse& operator=(const CMessageReplyBeginWeddingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageReplyBeginWeddingResponse& default_instance();
  void Swap(CMessageReplyBeginWeddingResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageReplyBeginWeddingResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageReplyBeginWeddingResponse& from);
  void MergeFrom(const CMessageReplyBeginWeddingResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 Errcode = 1;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 1;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 errcode_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageReplyBeginWeddingResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageWeddingStartNotify : public ::google::protobuf::Message {
 public:
  CMessageWeddingStartNotify();
  virtual ~CMessageWeddingStartNotify();
  
  CMessageWeddingStartNotify(const CMessageWeddingStartNotify& from);
  
  inline CMessageWeddingStartNotify& operator=(const CMessageWeddingStartNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageWeddingStartNotify& default_instance();
  void Swap(CMessageWeddingStartNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageWeddingStartNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageWeddingStartNotify& from);
  void MergeFrom(const CMessageWeddingStartNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string GroomName = 1;
  inline bool has_groomname() const;
  inline void clear_groomname();
  static const int kGroomNameFieldNumber = 1;
  inline const ::std::string& groomname() const;
  inline void set_groomname(const ::std::string& value);
  inline void set_groomname(const char* value);
  inline void set_groomname(const char* value, size_t size);
  inline ::std::string* mutable_groomname();
  
  // optional string BrideName = 2;
  inline bool has_bridename() const;
  inline void clear_bridename();
  static const int kBrideNameFieldNumber = 2;
  inline const ::std::string& bridename() const;
  inline void set_bridename(const ::std::string& value);
  inline void set_bridename(const char* value);
  inline void set_bridename(const char* value, size_t size);
  inline ::std::string* mutable_bridename();
  
  // optional uint32 WeddingTimeLength = 3;
  inline bool has_weddingtimelength() const;
  inline void clear_weddingtimelength();
  static const int kWeddingTimeLengthFieldNumber = 3;
  inline ::google::protobuf::uint32 weddingtimelength() const;
  inline void set_weddingtimelength(::google::protobuf::uint32 value);
  
  // optional uint32 WeddingModule = 4;
  inline bool has_weddingmodule() const;
  inline void clear_weddingmodule();
  static const int kWeddingModuleFieldNumber = 4;
  inline ::google::protobuf::uint32 weddingmodule() const;
  inline void set_weddingmodule(::google::protobuf::uint32 value);
  
  // optional uint32 GroomID = 5;
  inline bool has_groomid() const;
  inline void clear_groomid();
  static const int kGroomIDFieldNumber = 5;
  inline ::google::protobuf::uint32 groomid() const;
  inline void set_groomid(::google::protobuf::uint32 value);
  
  // optional uint32 BrideID = 6;
  inline bool has_brideid() const;
  inline void clear_brideid();
  static const int kBrideIDFieldNumber = 6;
  inline ::google::protobuf::uint32 brideid() const;
  inline void set_brideid(::google::protobuf::uint32 value);
  
  // optional uint32 CampID = 7;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampIDFieldNumber = 7;
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* groomname_;
  static const ::std::string _default_groomname_;
  ::std::string* bridename_;
  static const ::std::string _default_bridename_;
  ::google::protobuf::uint32 weddingtimelength_;
  ::google::protobuf::uint32 weddingmodule_;
  ::google::protobuf::uint32 groomid_;
  ::google::protobuf::uint32 brideid_;
  ::google::protobuf::uint32 campid_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageWeddingStartNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessageEnterMarriageHallNotify : public ::google::protobuf::Message {
 public:
  CMessageEnterMarriageHallNotify();
  virtual ~CMessageEnterMarriageHallNotify();
  
  CMessageEnterMarriageHallNotify(const CMessageEnterMarriageHallNotify& from);
  
  inline CMessageEnterMarriageHallNotify& operator=(const CMessageEnterMarriageHallNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageEnterMarriageHallNotify& default_instance();
  void Swap(CMessageEnterMarriageHallNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageEnterMarriageHallNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageEnterMarriageHallNotify& from);
  void MergeFrom(const CMessageEnterMarriageHallNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[1];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageEnterMarriageHallNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessageReplyEnterMarriageHallRequest : public ::google::protobuf::Message {
 public:
  CMessageReplyEnterMarriageHallRequest();
  virtual ~CMessageReplyEnterMarriageHallRequest();
  
  CMessageReplyEnterMarriageHallRequest(const CMessageReplyEnterMarriageHallRequest& from);
  
  inline CMessageReplyEnterMarriageHallRequest& operator=(const CMessageReplyEnterMarriageHallRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageReplyEnterMarriageHallRequest& default_instance();
  void Swap(CMessageReplyEnterMarriageHallRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageReplyEnterMarriageHallRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageReplyEnterMarriageHallRequest& from);
  void MergeFrom(const CMessageReplyEnterMarriageHallRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 Result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 result_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageReplyEnterMarriageHallRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageReplyEnterMarriageHallResponse : public ::google::protobuf::Message {
 public:
  CMessageReplyEnterMarriageHallResponse();
  virtual ~CMessageReplyEnterMarriageHallResponse();
  
  CMessageReplyEnterMarriageHallResponse(const CMessageReplyEnterMarriageHallResponse& from);
  
  inline CMessageReplyEnterMarriageHallResponse& operator=(const CMessageReplyEnterMarriageHallResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageReplyEnterMarriageHallResponse& default_instance();
  void Swap(CMessageReplyEnterMarriageHallResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageReplyEnterMarriageHallResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageReplyEnterMarriageHallResponse& from);
  void MergeFrom(const CMessageReplyEnterMarriageHallResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 Errcode = 1;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 1;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 errcode_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageReplyEnterMarriageHallResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageNewlyEnterHallRequest : public ::google::protobuf::Message {
 public:
  CMessageNewlyEnterHallRequest();
  virtual ~CMessageNewlyEnterHallRequest();
  
  CMessageNewlyEnterHallRequest(const CMessageNewlyEnterHallRequest& from);
  
  inline CMessageNewlyEnterHallRequest& operator=(const CMessageNewlyEnterHallRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageNewlyEnterHallRequest& default_instance();
  void Swap(CMessageNewlyEnterHallRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageNewlyEnterHallRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageNewlyEnterHallRequest& from);
  void MergeFrom(const CMessageNewlyEnterHallRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 EntityID = 1;
  inline bool has_entityid() const;
  inline void clear_entityid();
  static const int kEntityIDFieldNumber = 1;
  inline ::google::protobuf::uint32 entityid() const;
  inline void set_entityid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 entityid_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageNewlyEnterHallRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageNewlyEnterHallResponse : public ::google::protobuf::Message {
 public:
  CMessageNewlyEnterHallResponse();
  virtual ~CMessageNewlyEnterHallResponse();
  
  CMessageNewlyEnterHallResponse(const CMessageNewlyEnterHallResponse& from);
  
  inline CMessageNewlyEnterHallResponse& operator=(const CMessageNewlyEnterHallResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageNewlyEnterHallResponse& default_instance();
  void Swap(CMessageNewlyEnterHallResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageNewlyEnterHallResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageNewlyEnterHallResponse& from);
  void MergeFrom(const CMessageNewlyEnterHallResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 Errcode = 1;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 1;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);
  
  // optional uint32 WeddingModule = 2;
  inline bool has_weddingmodule() const;
  inline void clear_weddingmodule();
  static const int kWeddingModuleFieldNumber = 2;
  inline ::google::protobuf::uint32 weddingmodule() const;
  inline void set_weddingmodule(::google::protobuf::uint32 value);
  
  // optional uint32 BaitangEnd = 3;
  inline bool has_baitangend() const;
  inline void clear_baitangend();
  static const int kBaitangEndFieldNumber = 3;
  inline ::google::protobuf::uint32 baitangend() const;
  inline void set_baitangend(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 errcode_;
  ::google::protobuf::uint32 weddingmodule_;
  ::google::protobuf::uint32 baitangend_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageNewlyEnterHallResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageGuestEnterHallRequest : public ::google::protobuf::Message {
 public:
  CMessageGuestEnterHallRequest();
  virtual ~CMessageGuestEnterHallRequest();
  
  CMessageGuestEnterHallRequest(const CMessageGuestEnterHallRequest& from);
  
  inline CMessageGuestEnterHallRequest& operator=(const CMessageGuestEnterHallRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageGuestEnterHallRequest& default_instance();
  void Swap(CMessageGuestEnterHallRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageGuestEnterHallRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageGuestEnterHallRequest& from);
  void MergeFrom(const CMessageGuestEnterHallRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 EntityID = 1;
  inline bool has_entityid() const;
  inline void clear_entityid();
  static const int kEntityIDFieldNumber = 1;
  inline ::google::protobuf::uint32 entityid() const;
  inline void set_entityid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 entityid_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageGuestEnterHallRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageGuestEnterHallResponse : public ::google::protobuf::Message {
 public:
  CMessageGuestEnterHallResponse();
  virtual ~CMessageGuestEnterHallResponse();
  
  CMessageGuestEnterHallResponse(const CMessageGuestEnterHallResponse& from);
  
  inline CMessageGuestEnterHallResponse& operator=(const CMessageGuestEnterHallResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageGuestEnterHallResponse& default_instance();
  void Swap(CMessageGuestEnterHallResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageGuestEnterHallResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageGuestEnterHallResponse& from);
  void MergeFrom(const CMessageGuestEnterHallResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 Errcode = 1;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 1;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 errcode_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageGuestEnterHallResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageBaitangRequest : public ::google::protobuf::Message {
 public:
  CMessageBaitangRequest();
  virtual ~CMessageBaitangRequest();
  
  CMessageBaitangRequest(const CMessageBaitangRequest& from);
  
  inline CMessageBaitangRequest& operator=(const CMessageBaitangRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageBaitangRequest& default_instance();
  void Swap(CMessageBaitangRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageBaitangRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageBaitangRequest& from);
  void MergeFrom(const CMessageBaitangRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 EntityID = 1;
  inline bool has_entityid() const;
  inline void clear_entityid();
  static const int kEntityIDFieldNumber = 1;
  inline ::google::protobuf::uint32 entityid() const;
  inline void set_entityid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 entityid_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageBaitangRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageBaitangResponse : public ::google::protobuf::Message {
 public:
  CMessageBaitangResponse();
  virtual ~CMessageBaitangResponse();
  
  CMessageBaitangResponse(const CMessageBaitangResponse& from);
  
  inline CMessageBaitangResponse& operator=(const CMessageBaitangResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageBaitangResponse& default_instance();
  void Swap(CMessageBaitangResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageBaitangResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageBaitangResponse& from);
  void MergeFrom(const CMessageBaitangResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 Errcode = 1;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 1;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 errcode_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageBaitangResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageBaitangNotify : public ::google::protobuf::Message {
 public:
  CMessageBaitangNotify();
  virtual ~CMessageBaitangNotify();
  
  CMessageBaitangNotify(const CMessageBaitangNotify& from);
  
  inline CMessageBaitangNotify& operator=(const CMessageBaitangNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageBaitangNotify& default_instance();
  void Swap(CMessageBaitangNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageBaitangNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageBaitangNotify& from);
  void MergeFrom(const CMessageBaitangNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string GroomName = 1;
  inline bool has_groomname() const;
  inline void clear_groomname();
  static const int kGroomNameFieldNumber = 1;
  inline const ::std::string& groomname() const;
  inline void set_groomname(const ::std::string& value);
  inline void set_groomname(const char* value);
  inline void set_groomname(const char* value, size_t size);
  inline ::std::string* mutable_groomname();
  
  // optional string BrideName = 2;
  inline bool has_bridename() const;
  inline void clear_bridename();
  static const int kBrideNameFieldNumber = 2;
  inline const ::std::string& bridename() const;
  inline void set_bridename(const ::std::string& value);
  inline void set_bridename(const char* value);
  inline void set_bridename(const char* value, size_t size);
  inline ::std::string* mutable_bridename();
  
  // optional uint32 GroomEntityID = 3;
  inline bool has_groomentityid() const;
  inline void clear_groomentityid();
  static const int kGroomEntityIDFieldNumber = 3;
  inline ::google::protobuf::uint32 groomentityid() const;
  inline void set_groomentityid(::google::protobuf::uint32 value);
  
  // optional uint32 BrideEntityID = 4;
  inline bool has_brideentityid() const;
  inline void clear_brideentityid();
  static const int kBrideEntityIDFieldNumber = 4;
  inline ::google::protobuf::uint32 brideentityid() const;
  inline void set_brideentityid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* groomname_;
  static const ::std::string _default_groomname_;
  ::std::string* bridename_;
  static const ::std::string _default_bridename_;
  ::google::protobuf::uint32 groomentityid_;
  ::google::protobuf::uint32 brideentityid_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageBaitangNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessagePutKeepSakeRequest : public ::google::protobuf::Message {
 public:
  CMessagePutKeepSakeRequest();
  virtual ~CMessagePutKeepSakeRequest();
  
  CMessagePutKeepSakeRequest(const CMessagePutKeepSakeRequest& from);
  
  inline CMessagePutKeepSakeRequest& operator=(const CMessagePutKeepSakeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessagePutKeepSakeRequest& default_instance();
  void Swap(CMessagePutKeepSakeRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessagePutKeepSakeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessagePutKeepSakeRequest& from);
  void MergeFrom(const CMessagePutKeepSakeRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 KeepsakeIndex = 1;
  inline bool has_keepsakeindex() const;
  inline void clear_keepsakeindex();
  static const int kKeepsakeIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 keepsakeindex() const;
  inline void set_keepsakeindex(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 keepsakeindex_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessagePutKeepSakeRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessagePutKeepSakeResponse : public ::google::protobuf::Message {
 public:
  CMessagePutKeepSakeResponse();
  virtual ~CMessagePutKeepSakeResponse();
  
  CMessagePutKeepSakeResponse(const CMessagePutKeepSakeResponse& from);
  
  inline CMessagePutKeepSakeResponse& operator=(const CMessagePutKeepSakeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessagePutKeepSakeResponse& default_instance();
  void Swap(CMessagePutKeepSakeResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessagePutKeepSakeResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessagePutKeepSakeResponse& from);
  void MergeFrom(const CMessagePutKeepSakeResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 Errcode = 1;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 1;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);
  
  // optional uint32 Index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 errcode_;
  ::google::protobuf::uint32 index_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessagePutKeepSakeResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageExchangeKeepsakeRequest : public ::google::protobuf::Message {
 public:
  CMessageExchangeKeepsakeRequest();
  virtual ~CMessageExchangeKeepsakeRequest();
  
  CMessageExchangeKeepsakeRequest(const CMessageExchangeKeepsakeRequest& from);
  
  inline CMessageExchangeKeepsakeRequest& operator=(const CMessageExchangeKeepsakeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageExchangeKeepsakeRequest& default_instance();
  void Swap(CMessageExchangeKeepsakeRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageExchangeKeepsakeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageExchangeKeepsakeRequest& from);
  void MergeFrom(const CMessageExchangeKeepsakeRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[1];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageExchangeKeepsakeRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageExchangeKeepsakeResponse : public ::google::protobuf::Message {
 public:
  CMessageExchangeKeepsakeResponse();
  virtual ~CMessageExchangeKeepsakeResponse();
  
  CMessageExchangeKeepsakeResponse(const CMessageExchangeKeepsakeResponse& from);
  
  inline CMessageExchangeKeepsakeResponse& operator=(const CMessageExchangeKeepsakeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageExchangeKeepsakeResponse& default_instance();
  void Swap(CMessageExchangeKeepsakeResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageExchangeKeepsakeResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageExchangeKeepsakeResponse& from);
  void MergeFrom(const CMessageExchangeKeepsakeResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 Errcode = 1;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 1;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 errcode_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageExchangeKeepsakeResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageExchangeKeepsakeNotify : public ::google::protobuf::Message {
 public:
  CMessageExchangeKeepsakeNotify();
  virtual ~CMessageExchangeKeepsakeNotify();
  
  CMessageExchangeKeepsakeNotify(const CMessageExchangeKeepsakeNotify& from);
  
  inline CMessageExchangeKeepsakeNotify& operator=(const CMessageExchangeKeepsakeNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageExchangeKeepsakeNotify& default_instance();
  void Swap(CMessageExchangeKeepsakeNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageExchangeKeepsakeNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageExchangeKeepsakeNotify& from);
  void MergeFrom(const CMessageExchangeKeepsakeNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string GroomName = 1;
  inline bool has_groomname() const;
  inline void clear_groomname();
  static const int kGroomNameFieldNumber = 1;
  inline const ::std::string& groomname() const;
  inline void set_groomname(const ::std::string& value);
  inline void set_groomname(const char* value);
  inline void set_groomname(const char* value, size_t size);
  inline ::std::string* mutable_groomname();
  
  // optional .PBItemObject BrideKeepsake = 2;
  inline bool has_bridekeepsake() const;
  inline void clear_bridekeepsake();
  static const int kBrideKeepsakeFieldNumber = 2;
  inline const ::PBItemObject& bridekeepsake() const;
  inline ::PBItemObject* mutable_bridekeepsake();
  
  // optional string BrideName = 3;
  inline bool has_bridename() const;
  inline void clear_bridename();
  static const int kBrideNameFieldNumber = 3;
  inline const ::std::string& bridename() const;
  inline void set_bridename(const ::std::string& value);
  inline void set_bridename(const char* value);
  inline void set_bridename(const char* value, size_t size);
  inline ::std::string* mutable_bridename();
  
  // optional .PBItemObject GroomKeepsake = 4;
  inline bool has_groomkeepsake() const;
  inline void clear_groomkeepsake();
  static const int kGroomKeepsakeFieldNumber = 4;
  inline const ::PBItemObject& groomkeepsake() const;
  inline ::PBItemObject* mutable_groomkeepsake();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* groomname_;
  static const ::std::string _default_groomname_;
  ::PBItemObject* bridekeepsake_;
  ::std::string* bridename_;
  static const ::std::string _default_bridename_;
  ::PBItemObject* groomkeepsake_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageExchangeKeepsakeNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessageDivorceRequest : public ::google::protobuf::Message {
 public:
  CMessageDivorceRequest();
  virtual ~CMessageDivorceRequest();
  
  CMessageDivorceRequest(const CMessageDivorceRequest& from);
  
  inline CMessageDivorceRequest& operator=(const CMessageDivorceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageDivorceRequest& default_instance();
  void Swap(CMessageDivorceRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageDivorceRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageDivorceRequest& from);
  void MergeFrom(const CMessageDivorceRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 EntityID = 1;
  inline bool has_entityid() const;
  inline void clear_entityid();
  static const int kEntityIDFieldNumber = 1;
  inline ::google::protobuf::uint32 entityid() const;
  inline void set_entityid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 entityid_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageDivorceRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageDivorceResponse : public ::google::protobuf::Message {
 public:
  CMessageDivorceResponse();
  virtual ~CMessageDivorceResponse();
  
  CMessageDivorceResponse(const CMessageDivorceResponse& from);
  
  inline CMessageDivorceResponse& operator=(const CMessageDivorceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageDivorceResponse& default_instance();
  void Swap(CMessageDivorceResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageDivorceResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageDivorceResponse& from);
  void MergeFrom(const CMessageDivorceResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 Errcode = 1;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 1;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 errcode_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageDivorceResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageDivorceNotify : public ::google::protobuf::Message {
 public:
  CMessageDivorceNotify();
  virtual ~CMessageDivorceNotify();
  
  CMessageDivorceNotify(const CMessageDivorceNotify& from);
  
  inline CMessageDivorceNotify& operator=(const CMessageDivorceNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageDivorceNotify& default_instance();
  void Swap(CMessageDivorceNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageDivorceNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageDivorceNotify& from);
  void MergeFrom(const CMessageDivorceNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string GroomName = 1;
  inline bool has_groomname() const;
  inline void clear_groomname();
  static const int kGroomNameFieldNumber = 1;
  inline const ::std::string& groomname() const;
  inline void set_groomname(const ::std::string& value);
  inline void set_groomname(const char* value);
  inline void set_groomname(const char* value, size_t size);
  inline ::std::string* mutable_groomname();
  
  // optional uint32 GroomCharID = 2;
  inline bool has_groomcharid() const;
  inline void clear_groomcharid();
  static const int kGroomCharIDFieldNumber = 2;
  inline ::google::protobuf::uint32 groomcharid() const;
  inline void set_groomcharid(::google::protobuf::uint32 value);
  
  // optional string BrideName = 3;
  inline bool has_bridename() const;
  inline void clear_bridename();
  static const int kBrideNameFieldNumber = 3;
  inline const ::std::string& bridename() const;
  inline void set_bridename(const ::std::string& value);
  inline void set_bridename(const char* value);
  inline void set_bridename(const char* value, size_t size);
  inline ::std::string* mutable_bridename();
  
  // optional uint32 BrideCharID = 4;
  inline bool has_bridecharid() const;
  inline void clear_bridecharid();
  static const int kBrideCharIDFieldNumber = 4;
  inline ::google::protobuf::uint32 bridecharid() const;
  inline void set_bridecharid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* groomname_;
  static const ::std::string _default_groomname_;
  ::google::protobuf::uint32 groomcharid_;
  ::std::string* bridename_;
  static const ::std::string _default_bridename_;
  ::google::protobuf::uint32 bridecharid_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageDivorceNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessageMarryResultNotify : public ::google::protobuf::Message {
 public:
  CMessageMarryResultNotify();
  virtual ~CMessageMarryResultNotify();
  
  CMessageMarryResultNotify(const CMessageMarryResultNotify& from);
  
  inline CMessageMarryResultNotify& operator=(const CMessageMarryResultNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageMarryResultNotify& default_instance();
  void Swap(CMessageMarryResultNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageMarryResultNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageMarryResultNotify& from);
  void MergeFrom(const CMessageMarryResultNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 Result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);
  
  // optional string SpouseName = 2;
  inline bool has_spousename() const;
  inline void clear_spousename();
  static const int kSpouseNameFieldNumber = 2;
  inline const ::std::string& spousename() const;
  inline void set_spousename(const ::std::string& value);
  inline void set_spousename(const char* value);
  inline void set_spousename(const char* value, size_t size);
  inline ::std::string* mutable_spousename();
  
  // optional uint32 MarriageStatus = 3;
  inline bool has_marriagestatus() const;
  inline void clear_marriagestatus();
  static const int kMarriageStatusFieldNumber = 3;
  inline ::google::protobuf::uint32 marriagestatus() const;
  inline void set_marriagestatus(::google::protobuf::uint32 value);
  
  // optional uint32 WeddingTime = 4;
  inline bool has_weddingtime() const;
  inline void clear_weddingtime();
  static const int kWeddingTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 weddingtime() const;
  inline void set_weddingtime(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 result_;
  ::std::string* spousename_;
  static const ::std::string _default_spousename_;
  ::google::protobuf::uint32 marriagestatus_;
  ::google::protobuf::uint32 weddingtime_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageMarryResultNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessageBeginWeddingResultNofiy : public ::google::protobuf::Message {
 public:
  CMessageBeginWeddingResultNofiy();
  virtual ~CMessageBeginWeddingResultNofiy();
  
  CMessageBeginWeddingResultNofiy(const CMessageBeginWeddingResultNofiy& from);
  
  inline CMessageBeginWeddingResultNofiy& operator=(const CMessageBeginWeddingResultNofiy& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageBeginWeddingResultNofiy& default_instance();
  void Swap(CMessageBeginWeddingResultNofiy* other);
  
  // implements Message ----------------------------------------------
  
  CMessageBeginWeddingResultNofiy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageBeginWeddingResultNofiy& from);
  void MergeFrom(const CMessageBeginWeddingResultNofiy& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 Result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);
  
  // optional string SpouseName = 2;
  inline bool has_spousename() const;
  inline void clear_spousename();
  static const int kSpouseNameFieldNumber = 2;
  inline const ::std::string& spousename() const;
  inline void set_spousename(const ::std::string& value);
  inline void set_spousename(const char* value);
  inline void set_spousename(const char* value, size_t size);
  inline ::std::string* mutable_spousename();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 result_;
  ::std::string* spousename_;
  static const ::std::string _default_spousename_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageBeginWeddingResultNofiy* default_instance_;
};
// -------------------------------------------------------------------

class CMessageGetCampMarriageInfoRequest : public ::google::protobuf::Message {
 public:
  CMessageGetCampMarriageInfoRequest();
  virtual ~CMessageGetCampMarriageInfoRequest();
  
  CMessageGetCampMarriageInfoRequest(const CMessageGetCampMarriageInfoRequest& from);
  
  inline CMessageGetCampMarriageInfoRequest& operator=(const CMessageGetCampMarriageInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageGetCampMarriageInfoRequest& default_instance();
  void Swap(CMessageGetCampMarriageInfoRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageGetCampMarriageInfoRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageGetCampMarriageInfoRequest& from);
  void MergeFrom(const CMessageGetCampMarriageInfoRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 EntityID = 1;
  inline bool has_entityid() const;
  inline void clear_entityid();
  static const int kEntityIDFieldNumber = 1;
  inline ::google::protobuf::uint32 entityid() const;
  inline void set_entityid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 entityid_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageGetCampMarriageInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class PBMarriageInfo : public ::google::protobuf::Message {
 public:
  PBMarriageInfo();
  virtual ~PBMarriageInfo();
  
  PBMarriageInfo(const PBMarriageInfo& from);
  
  inline PBMarriageInfo& operator=(const PBMarriageInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMarriageInfo& default_instance();
  void Swap(PBMarriageInfo* other);
  
  // implements Message ----------------------------------------------
  
  PBMarriageInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBMarriageInfo& from);
  void MergeFrom(const PBMarriageInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string GroomName = 1;
  inline bool has_groomname() const;
  inline void clear_groomname();
  static const int kGroomNameFieldNumber = 1;
  inline const ::std::string& groomname() const;
  inline void set_groomname(const ::std::string& value);
  inline void set_groomname(const char* value);
  inline void set_groomname(const char* value, size_t size);
  inline ::std::string* mutable_groomname();
  
  // optional string BrideName = 2;
  inline bool has_bridename() const;
  inline void clear_bridename();
  static const int kBrideNameFieldNumber = 2;
  inline const ::std::string& bridename() const;
  inline void set_bridename(const ::std::string& value);
  inline void set_bridename(const char* value);
  inline void set_bridename(const char* value, size_t size);
  inline ::std::string* mutable_bridename();
  
  // optional uint32 WeddingTime = 3;
  inline bool has_weddingtime() const;
  inline void clear_weddingtime();
  static const int kWeddingTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 weddingtime() const;
  inline void set_weddingtime(::google::protobuf::uint32 value);
  
  // optional uint32 WeddingEndTime = 4;
  inline bool has_weddingendtime() const;
  inline void clear_weddingendtime();
  static const int kWeddingEndTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 weddingendtime() const;
  inline void set_weddingendtime(::google::protobuf::uint32 value);
  
  // optional uint32 CommoAllowed = 5;
  inline bool has_commoallowed() const;
  inline void clear_commoallowed();
  static const int kCommoAllowedFieldNumber = 5;
  inline ::google::protobuf::uint32 commoallowed() const;
  inline void set_commoallowed(::google::protobuf::uint32 value);
  
  // optional uint32 TimeUsed = 6;
  inline bool has_timeused() const;
  inline void clear_timeused();
  static const int kTimeUsedFieldNumber = 6;
  inline ::google::protobuf::uint32 timeused() const;
  inline void set_timeused(::google::protobuf::uint32 value);
  
  // optional uint32 TimeID = 7;
  inline bool has_timeid() const;
  inline void clear_timeid();
  static const int kTimeIDFieldNumber = 7;
  inline ::google::protobuf::uint32 timeid() const;
  inline void set_timeid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* groomname_;
  static const ::std::string _default_groomname_;
  ::std::string* bridename_;
  static const ::std::string _default_bridename_;
  ::google::protobuf::uint32 weddingtime_;
  ::google::protobuf::uint32 weddingendtime_;
  ::google::protobuf::uint32 commoallowed_;
  ::google::protobuf::uint32 timeused_;
  ::google::protobuf::uint32 timeid_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PBMarriageInfo* default_instance_;
};
// -------------------------------------------------------------------

class PBMarriageList : public ::google::protobuf::Message {
 public:
  PBMarriageList();
  virtual ~PBMarriageList();
  
  PBMarriageList(const PBMarriageList& from);
  
  inline PBMarriageList& operator=(const PBMarriageList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMarriageList& default_instance();
  void Swap(PBMarriageList* other);
  
  // implements Message ----------------------------------------------
  
  PBMarriageList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBMarriageList& from);
  void MergeFrom(const PBMarriageList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .PBMarriageInfo MarriageInfo = 1;
  inline int marriageinfo_size() const;
  inline void clear_marriageinfo();
  static const int kMarriageInfoFieldNumber = 1;
  inline const ::google::protobuf::RepeatedPtrField< ::PBMarriageInfo >& marriageinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBMarriageInfo >* mutable_marriageinfo();
  inline const ::PBMarriageInfo& marriageinfo(int index) const;
  inline ::PBMarriageInfo* mutable_marriageinfo(int index);
  inline ::PBMarriageInfo* add_marriageinfo();
  
  // optional uint32 Year = 2;
  inline bool has_year() const;
  inline void clear_year();
  static const int kYearFieldNumber = 2;
  inline ::google::protobuf::uint32 year() const;
  inline void set_year(::google::protobuf::uint32 value);
  
  // optional uint32 Month = 3;
  inline bool has_month() const;
  inline void clear_month();
  static const int kMonthFieldNumber = 3;
  inline ::google::protobuf::uint32 month() const;
  inline void set_month(::google::protobuf::uint32 value);
  
  // optional uint32 Day = 4;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 4;
  inline ::google::protobuf::uint32 day() const;
  inline void set_day(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::PBMarriageInfo > marriageinfo_;
  ::google::protobuf::uint32 year_;
  ::google::protobuf::uint32 month_;
  ::google::protobuf::uint32 day_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PBMarriageList* default_instance_;
};
// -------------------------------------------------------------------

class CMessageGetCampMarriageInfoResponse : public ::google::protobuf::Message {
 public:
  CMessageGetCampMarriageInfoResponse();
  virtual ~CMessageGetCampMarriageInfoResponse();
  
  CMessageGetCampMarriageInfoResponse(const CMessageGetCampMarriageInfoResponse& from);
  
  inline CMessageGetCampMarriageInfoResponse& operator=(const CMessageGetCampMarriageInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageGetCampMarriageInfoResponse& default_instance();
  void Swap(CMessageGetCampMarriageInfoResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageGetCampMarriageInfoResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageGetCampMarriageInfoResponse& from);
  void MergeFrom(const CMessageGetCampMarriageInfoResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .PBMarriageList MarriageListA = 1;
  inline bool has_marriagelista() const;
  inline void clear_marriagelista();
  static const int kMarriageListAFieldNumber = 1;
  inline const ::PBMarriageList& marriagelista() const;
  inline ::PBMarriageList* mutable_marriagelista();
  
  // optional .PBMarriageList MarriageListB = 2;
  inline bool has_marriagelistb() const;
  inline void clear_marriagelistb();
  static const int kMarriageListBFieldNumber = 2;
  inline const ::PBMarriageList& marriagelistb() const;
  inline ::PBMarriageList* mutable_marriagelistb();
  
  // optional .PBMarriageList MarriageListC = 3;
  inline bool has_marriagelistc() const;
  inline void clear_marriagelistc();
  static const int kMarriageListCFieldNumber = 3;
  inline const ::PBMarriageList& marriagelistc() const;
  inline ::PBMarriageList* mutable_marriagelistc();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::PBMarriageList* marriagelista_;
  ::PBMarriageList* marriagelistb_;
  ::PBMarriageList* marriagelistc_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageGetCampMarriageInfoResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessagePersonMarriedNotify : public ::google::protobuf::Message {
 public:
  CMessagePersonMarriedNotify();
  virtual ~CMessagePersonMarriedNotify();
  
  CMessagePersonMarriedNotify(const CMessagePersonMarriedNotify& from);
  
  inline CMessagePersonMarriedNotify& operator=(const CMessagePersonMarriedNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessagePersonMarriedNotify& default_instance();
  void Swap(CMessagePersonMarriedNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessagePersonMarriedNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessagePersonMarriedNotify& from);
  void MergeFrom(const CMessagePersonMarriedNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string GroomName = 1;
  inline bool has_groomname() const;
  inline void clear_groomname();
  static const int kGroomNameFieldNumber = 1;
  inline const ::std::string& groomname() const;
  inline void set_groomname(const ::std::string& value);
  inline void set_groomname(const char* value);
  inline void set_groomname(const char* value, size_t size);
  inline ::std::string* mutable_groomname();
  
  // optional string BrideName = 2;
  inline bool has_bridename() const;
  inline void clear_bridename();
  static const int kBrideNameFieldNumber = 2;
  inline const ::std::string& bridename() const;
  inline void set_bridename(const ::std::string& value);
  inline void set_bridename(const char* value);
  inline void set_bridename(const char* value, size_t size);
  inline ::std::string* mutable_bridename();
  
  // optional uint32 ServerSequence = 3;
  inline bool has_serversequence() const;
  inline void clear_serversequence();
  static const int kServerSequenceFieldNumber = 3;
  inline ::google::protobuf::uint32 serversequence() const;
  inline void set_serversequence(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* groomname_;
  static const ::std::string _default_groomname_;
  ::std::string* bridename_;
  static const ::std::string _default_bridename_;
  ::google::protobuf::uint32 serversequence_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessagePersonMarriedNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessagePersonMarriageInfoNotify : public ::google::protobuf::Message {
 public:
  CMessagePersonMarriageInfoNotify();
  virtual ~CMessagePersonMarriageInfoNotify();
  
  CMessagePersonMarriageInfoNotify(const CMessagePersonMarriageInfoNotify& from);
  
  inline CMessagePersonMarriageInfoNotify& operator=(const CMessagePersonMarriageInfoNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessagePersonMarriageInfoNotify& default_instance();
  void Swap(CMessagePersonMarriageInfoNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessagePersonMarriageInfoNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessagePersonMarriageInfoNotify& from);
  void MergeFrom(const CMessagePersonMarriageInfoNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string SpouseName = 1;
  inline bool has_spousename() const;
  inline void clear_spousename();
  static const int kSpouseNameFieldNumber = 1;
  inline const ::std::string& spousename() const;
  inline void set_spousename(const ::std::string& value);
  inline void set_spousename(const char* value);
  inline void set_spousename(const char* value, size_t size);
  inline ::std::string* mutable_spousename();
  
  // optional uint32 MarriageStatus = 2;
  inline bool has_marriagestatus() const;
  inline void clear_marriagestatus();
  static const int kMarriageStatusFieldNumber = 2;
  inline ::google::protobuf::uint32 marriagestatus() const;
  inline void set_marriagestatus(::google::protobuf::uint32 value);
  
  // optional uint32 WeddingTime = 3;
  inline bool has_weddingtime() const;
  inline void clear_weddingtime();
  static const int kWeddingTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 weddingtime() const;
  inline void set_weddingtime(::google::protobuf::uint32 value);
  
  // optional uint32 RoleID = 4;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIDFieldNumber = 4;
  inline ::google::protobuf::uint32 roleid() const;
  inline void set_roleid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* spousename_;
  static const ::std::string _default_spousename_;
  ::google::protobuf::uint32 marriagestatus_;
  ::google::protobuf::uint32 weddingtime_;
  ::google::protobuf::uint32 roleid_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessagePersonMarriageInfoNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessageSpouseDivorceNotify : public ::google::protobuf::Message {
 public:
  CMessageSpouseDivorceNotify();
  virtual ~CMessageSpouseDivorceNotify();
  
  CMessageSpouseDivorceNotify(const CMessageSpouseDivorceNotify& from);
  
  inline CMessageSpouseDivorceNotify& operator=(const CMessageSpouseDivorceNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageSpouseDivorceNotify& default_instance();
  void Swap(CMessageSpouseDivorceNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageSpouseDivorceNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageSpouseDivorceNotify& from);
  void MergeFrom(const CMessageSpouseDivorceNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .CMessageRouter Router = 1;
  inline bool has_router() const;
  inline void clear_router();
  static const int kRouterFieldNumber = 1;
  inline const ::CMessageRouter& router() const;
  inline ::CMessageRouter* mutable_router();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::CMessageRouter* router_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageSpouseDivorceNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessageUseSysInvitationRequest : public ::google::protobuf::Message {
 public:
  CMessageUseSysInvitationRequest();
  virtual ~CMessageUseSysInvitationRequest();
  
  CMessageUseSysInvitationRequest(const CMessageUseSysInvitationRequest& from);
  
  inline CMessageUseSysInvitationRequest& operator=(const CMessageUseSysInvitationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageUseSysInvitationRequest& default_instance();
  void Swap(CMessageUseSysInvitationRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageUseSysInvitationRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageUseSysInvitationRequest& from);
  void MergeFrom(const CMessageUseSysInvitationRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 ItemIndex = 1;
  inline bool has_itemindex() const;
  inline void clear_itemindex();
  static const int kItemIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 itemindex() const;
  inline void set_itemindex(::google::protobuf::uint32 value);
  
  // optional string ReceivedName = 2;
  inline bool has_receivedname() const;
  inline void clear_receivedname();
  static const int kReceivedNameFieldNumber = 2;
  inline const ::std::string& receivedname() const;
  inline void set_receivedname(const ::std::string& value);
  inline void set_receivedname(const char* value);
  inline void set_receivedname(const char* value, size_t size);
  inline ::std::string* mutable_receivedname();
  
  // optional uint32 ReceivedID = 3;
  inline bool has_receivedid() const;
  inline void clear_receivedid();
  static const int kReceivedIDFieldNumber = 3;
  inline ::google::protobuf::uint32 receivedid() const;
  inline void set_receivedid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 itemindex_;
  ::std::string* receivedname_;
  static const ::std::string _default_receivedname_;
  ::google::protobuf::uint32 receivedid_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageUseSysInvitationRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageUseSysInvitationResponse : public ::google::protobuf::Message {
 public:
  CMessageUseSysInvitationResponse();
  virtual ~CMessageUseSysInvitationResponse();
  
  CMessageUseSysInvitationResponse(const CMessageUseSysInvitationResponse& from);
  
  inline CMessageUseSysInvitationResponse& operator=(const CMessageUseSysInvitationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageUseSysInvitationResponse& default_instance();
  void Swap(CMessageUseSysInvitationResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageUseSysInvitationResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageUseSysInvitationResponse& from);
  void MergeFrom(const CMessageUseSysInvitationResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 Errcode = 1;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 1;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 errcode_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageUseSysInvitationResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageTimeToPutKeepsakeNotify : public ::google::protobuf::Message {
 public:
  CMessageTimeToPutKeepsakeNotify();
  virtual ~CMessageTimeToPutKeepsakeNotify();
  
  CMessageTimeToPutKeepsakeNotify(const CMessageTimeToPutKeepsakeNotify& from);
  
  inline CMessageTimeToPutKeepsakeNotify& operator=(const CMessageTimeToPutKeepsakeNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageTimeToPutKeepsakeNotify& default_instance();
  void Swap(CMessageTimeToPutKeepsakeNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageTimeToPutKeepsakeNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageTimeToPutKeepsakeNotify& from);
  void MergeFrom(const CMessageTimeToPutKeepsakeNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 GroomRoleID = 1;
  inline bool has_groomroleid() const;
  inline void clear_groomroleid();
  static const int kGroomRoleIDFieldNumber = 1;
  inline ::google::protobuf::uint32 groomroleid() const;
  inline void set_groomroleid(::google::protobuf::uint32 value);
  
  // optional uint32 BrideRoleID = 2;
  inline bool has_brideroleid() const;
  inline void clear_brideroleid();
  static const int kBrideRoleIDFieldNumber = 2;
  inline ::google::protobuf::uint32 brideroleid() const;
  inline void set_brideroleid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 groomroleid_;
  ::google::protobuf::uint32 brideroleid_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageTimeToPutKeepsakeNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessageCancelWeddingRequest : public ::google::protobuf::Message {
 public:
  CMessageCancelWeddingRequest();
  virtual ~CMessageCancelWeddingRequest();
  
  CMessageCancelWeddingRequest(const CMessageCancelWeddingRequest& from);
  
  inline CMessageCancelWeddingRequest& operator=(const CMessageCancelWeddingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageCancelWeddingRequest& default_instance();
  void Swap(CMessageCancelWeddingRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageCancelWeddingRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageCancelWeddingRequest& from);
  void MergeFrom(const CMessageCancelWeddingRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 EntityID = 1;
  inline bool has_entityid() const;
  inline void clear_entityid();
  static const int kEntityIDFieldNumber = 1;
  inline ::google::protobuf::uint32 entityid() const;
  inline void set_entityid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 entityid_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageCancelWeddingRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageCancelWeddingResponse : public ::google::protobuf::Message {
 public:
  CMessageCancelWeddingResponse();
  virtual ~CMessageCancelWeddingResponse();
  
  CMessageCancelWeddingResponse(const CMessageCancelWeddingResponse& from);
  
  inline CMessageCancelWeddingResponse& operator=(const CMessageCancelWeddingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageCancelWeddingResponse& default_instance();
  void Swap(CMessageCancelWeddingResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageCancelWeddingResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageCancelWeddingResponse& from);
  void MergeFrom(const CMessageCancelWeddingResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 Errcode = 2;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 2;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 errcode_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageCancelWeddingResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageNewlyMarriedNotify : public ::google::protobuf::Message {
 public:
  CMessageNewlyMarriedNotify();
  virtual ~CMessageNewlyMarriedNotify();
  
  CMessageNewlyMarriedNotify(const CMessageNewlyMarriedNotify& from);
  
  inline CMessageNewlyMarriedNotify& operator=(const CMessageNewlyMarriedNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageNewlyMarriedNotify& default_instance();
  void Swap(CMessageNewlyMarriedNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageNewlyMarriedNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageNewlyMarriedNotify& from);
  void MergeFrom(const CMessageNewlyMarriedNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string BrideName = 1;
  inline bool has_bridename() const;
  inline void clear_bridename();
  static const int kBrideNameFieldNumber = 1;
  inline const ::std::string& bridename() const;
  inline void set_bridename(const ::std::string& value);
  inline void set_bridename(const char* value);
  inline void set_bridename(const char* value, size_t size);
  inline ::std::string* mutable_bridename();
  
  // optional string GroomName = 2;
  inline bool has_groomname() const;
  inline void clear_groomname();
  static const int kGroomNameFieldNumber = 2;
  inline const ::std::string& groomname() const;
  inline void set_groomname(const ::std::string& value);
  inline void set_groomname(const char* value);
  inline void set_groomname(const char* value, size_t size);
  inline ::std::string* mutable_groomname();
  
  // optional uint32 WeddingTime = 3;
  inline bool has_weddingtime() const;
  inline void clear_weddingtime();
  static const int kWeddingTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 weddingtime() const;
  inline void set_weddingtime(::google::protobuf::uint32 value);
  
  // optional uint32 WeddingTimeLength = 4;
  inline bool has_weddingtimelength() const;
  inline void clear_weddingtimelength();
  static const int kWeddingTimeLengthFieldNumber = 4;
  inline ::google::protobuf::uint32 weddingtimelength() const;
  inline void set_weddingtimelength(::google::protobuf::uint32 value);
  
  // optional uint32 WeddingModule = 5;
  inline bool has_weddingmodule() const;
  inline void clear_weddingmodule();
  static const int kWeddingModuleFieldNumber = 5;
  inline ::google::protobuf::uint32 weddingmodule() const;
  inline void set_weddingmodule(::google::protobuf::uint32 value);
  
  // optional uint32 CampID = 6;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampIDFieldNumber = 6;
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);
  
  // optional uint32 SeverSequence = 7;
  inline bool has_seversequence() const;
  inline void clear_seversequence();
  static const int kSeverSequenceFieldNumber = 7;
  inline ::google::protobuf::uint32 seversequence() const;
  inline void set_seversequence(::google::protobuf::uint32 value);
  
  // optional uint32 BrideID = 8;
  inline bool has_brideid() const;
  inline void clear_brideid();
  static const int kBrideIDFieldNumber = 8;
  inline ::google::protobuf::uint32 brideid() const;
  inline void set_brideid(::google::protobuf::uint32 value);
  
  // optional uint32 GroomID = 9;
  inline bool has_groomid() const;
  inline void clear_groomid();
  static const int kGroomIDFieldNumber = 9;
  inline ::google::protobuf::uint32 groomid() const;
  inline void set_groomid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* bridename_;
  static const ::std::string _default_bridename_;
  ::std::string* groomname_;
  static const ::std::string _default_groomname_;
  ::google::protobuf::uint32 weddingtime_;
  ::google::protobuf::uint32 weddingtimelength_;
  ::google::protobuf::uint32 weddingmodule_;
  ::google::protobuf::uint32 campid_;
  ::google::protobuf::uint32 seversequence_;
  ::google::protobuf::uint32 brideid_;
  ::google::protobuf::uint32 groomid_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageNewlyMarriedNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessageWeddingEndNotify : public ::google::protobuf::Message {
 public:
  CMessageWeddingEndNotify();
  virtual ~CMessageWeddingEndNotify();
  
  CMessageWeddingEndNotify(const CMessageWeddingEndNotify& from);
  
  inline CMessageWeddingEndNotify& operator=(const CMessageWeddingEndNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageWeddingEndNotify& default_instance();
  void Swap(CMessageWeddingEndNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageWeddingEndNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageWeddingEndNotify& from);
  void MergeFrom(const CMessageWeddingEndNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[1];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageWeddingEndNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessageStartKeepsakeExchangeRequest : public ::google::protobuf::Message {
 public:
  CMessageStartKeepsakeExchangeRequest();
  virtual ~CMessageStartKeepsakeExchangeRequest();
  
  CMessageStartKeepsakeExchangeRequest(const CMessageStartKeepsakeExchangeRequest& from);
  
  inline CMessageStartKeepsakeExchangeRequest& operator=(const CMessageStartKeepsakeExchangeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageStartKeepsakeExchangeRequest& default_instance();
  void Swap(CMessageStartKeepsakeExchangeRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageStartKeepsakeExchangeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageStartKeepsakeExchangeRequest& from);
  void MergeFrom(const CMessageStartKeepsakeExchangeRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 EntityID = 1;
  inline bool has_entityid() const;
  inline void clear_entityid();
  static const int kEntityIDFieldNumber = 1;
  inline ::google::protobuf::uint32 entityid() const;
  inline void set_entityid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 entityid_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageStartKeepsakeExchangeRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageStartKeepsakeExchangeResponse : public ::google::protobuf::Message {
 public:
  CMessageStartKeepsakeExchangeResponse();
  virtual ~CMessageStartKeepsakeExchangeResponse();
  
  CMessageStartKeepsakeExchangeResponse(const CMessageStartKeepsakeExchangeResponse& from);
  
  inline CMessageStartKeepsakeExchangeResponse& operator=(const CMessageStartKeepsakeExchangeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageStartKeepsakeExchangeResponse& default_instance();
  void Swap(CMessageStartKeepsakeExchangeResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageStartKeepsakeExchangeResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageStartKeepsakeExchangeResponse& from);
  void MergeFrom(const CMessageStartKeepsakeExchangeResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 Errcode = 1;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 1;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 errcode_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageStartKeepsakeExchangeResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageStopKeepsakeExchangeRequest : public ::google::protobuf::Message {
 public:
  CMessageStopKeepsakeExchangeRequest();
  virtual ~CMessageStopKeepsakeExchangeRequest();
  
  CMessageStopKeepsakeExchangeRequest(const CMessageStopKeepsakeExchangeRequest& from);
  
  inline CMessageStopKeepsakeExchangeRequest& operator=(const CMessageStopKeepsakeExchangeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageStopKeepsakeExchangeRequest& default_instance();
  void Swap(CMessageStopKeepsakeExchangeRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageStopKeepsakeExchangeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageStopKeepsakeExchangeRequest& from);
  void MergeFrom(const CMessageStopKeepsakeExchangeRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[1];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageStopKeepsakeExchangeRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageStopKeepsakeExchangeResponse : public ::google::protobuf::Message {
 public:
  CMessageStopKeepsakeExchangeResponse();
  virtual ~CMessageStopKeepsakeExchangeResponse();
  
  CMessageStopKeepsakeExchangeResponse(const CMessageStopKeepsakeExchangeResponse& from);
  
  inline CMessageStopKeepsakeExchangeResponse& operator=(const CMessageStopKeepsakeExchangeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageStopKeepsakeExchangeResponse& default_instance();
  void Swap(CMessageStopKeepsakeExchangeResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageStopKeepsakeExchangeResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageStopKeepsakeExchangeResponse& from);
  void MergeFrom(const CMessageStopKeepsakeExchangeResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 Errcode = 1;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 1;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 errcode_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageStopKeepsakeExchangeResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageStopKeepsakeExchangeNotify : public ::google::protobuf::Message {
 public:
  CMessageStopKeepsakeExchangeNotify();
  virtual ~CMessageStopKeepsakeExchangeNotify();
  
  CMessageStopKeepsakeExchangeNotify(const CMessageStopKeepsakeExchangeNotify& from);
  
  inline CMessageStopKeepsakeExchangeNotify& operator=(const CMessageStopKeepsakeExchangeNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageStopKeepsakeExchangeNotify& default_instance();
  void Swap(CMessageStopKeepsakeExchangeNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageStopKeepsakeExchangeNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageStopKeepsakeExchangeNotify& from);
  void MergeFrom(const CMessageStopKeepsakeExchangeNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[1];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageStopKeepsakeExchangeNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessageInvitationExchangeRequest : public ::google::protobuf::Message {
 public:
  CMessageInvitationExchangeRequest();
  virtual ~CMessageInvitationExchangeRequest();
  
  CMessageInvitationExchangeRequest(const CMessageInvitationExchangeRequest& from);
  
  inline CMessageInvitationExchangeRequest& operator=(const CMessageInvitationExchangeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageInvitationExchangeRequest& default_instance();
  void Swap(CMessageInvitationExchangeRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageInvitationExchangeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageInvitationExchangeRequest& from);
  void MergeFrom(const CMessageInvitationExchangeRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 ItemIndex = 1;
  inline bool has_itemindex() const;
  inline void clear_itemindex();
  static const int kItemIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 itemindex() const;
  inline void set_itemindex(::google::protobuf::uint32 value);
  
  // optional uint32 EntityID = 2;
  inline bool has_entityid() const;
  inline void clear_entityid();
  static const int kEntityIDFieldNumber = 2;
  inline ::google::protobuf::uint32 entityid() const;
  inline void set_entityid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 itemindex_;
  ::google::protobuf::uint32 entityid_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageInvitationExchangeRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageInvitationExchangeResponse : public ::google::protobuf::Message {
 public:
  CMessageInvitationExchangeResponse();
  virtual ~CMessageInvitationExchangeResponse();
  
  CMessageInvitationExchangeResponse(const CMessageInvitationExchangeResponse& from);
  
  inline CMessageInvitationExchangeResponse& operator=(const CMessageInvitationExchangeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageInvitationExchangeResponse& default_instance();
  void Swap(CMessageInvitationExchangeResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageInvitationExchangeResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageInvitationExchangeResponse& from);
  void MergeFrom(const CMessageInvitationExchangeResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 Errcode = 1;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 1;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 errcode_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageInvitationExchangeResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageExchangeResultNotify : public ::google::protobuf::Message {
 public:
  CMessageExchangeResultNotify();
  virtual ~CMessageExchangeResultNotify();
  
  CMessageExchangeResultNotify(const CMessageExchangeResultNotify& from);
  
  inline CMessageExchangeResultNotify& operator=(const CMessageExchangeResultNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageExchangeResultNotify& default_instance();
  void Swap(CMessageExchangeResultNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageExchangeResultNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageExchangeResultNotify& from);
  void MergeFrom(const CMessageExchangeResultNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 GroomRoleID = 1;
  inline bool has_groomroleid() const;
  inline void clear_groomroleid();
  static const int kGroomRoleIDFieldNumber = 1;
  inline ::google::protobuf::uint32 groomroleid() const;
  inline void set_groomroleid(::google::protobuf::uint32 value);
  
  // optional uint32 BrideRoleID = 2;
  inline bool has_brideroleid() const;
  inline void clear_brideroleid();
  static const int kBrideRoleIDFieldNumber = 2;
  inline ::google::protobuf::uint32 brideroleid() const;
  inline void set_brideroleid(::google::protobuf::uint32 value);
  
  // optional uint32 GroomItemID = 3;
  inline bool has_groomitemid() const;
  inline void clear_groomitemid();
  static const int kGroomItemIDFieldNumber = 3;
  inline ::google::protobuf::uint32 groomitemid() const;
  inline void set_groomitemid(::google::protobuf::uint32 value);
  
  // optional uint32 BrideItemID = 4;
  inline bool has_brideitemid() const;
  inline void clear_brideitemid();
  static const int kBrideItemIDFieldNumber = 4;
  inline ::google::protobuf::uint32 brideitemid() const;
  inline void set_brideitemid(::google::protobuf::uint32 value);
  
  // optional string BrideName = 5;
  inline bool has_bridename() const;
  inline void clear_bridename();
  static const int kBrideNameFieldNumber = 5;
  inline const ::std::string& bridename() const;
  inline void set_bridename(const ::std::string& value);
  inline void set_bridename(const char* value);
  inline void set_bridename(const char* value, size_t size);
  inline ::std::string* mutable_bridename();
  
  // optional string GroomName = 6;
  inline bool has_groomname() const;
  inline void clear_groomname();
  static const int kGroomNameFieldNumber = 6;
  inline const ::std::string& groomname() const;
  inline void set_groomname(const ::std::string& value);
  inline void set_groomname(const char* value);
  inline void set_groomname(const char* value, size_t size);
  inline ::std::string* mutable_groomname();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 groomroleid_;
  ::google::protobuf::uint32 brideroleid_;
  ::google::protobuf::uint32 groomitemid_;
  ::google::protobuf::uint32 brideitemid_;
  ::std::string* bridename_;
  static const ::std::string _default_bridename_;
  ::std::string* groomname_;
  static const ::std::string _default_groomname_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageExchangeResultNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessageTeleToWeddingNpcRequest : public ::google::protobuf::Message {
 public:
  CMessageTeleToWeddingNpcRequest();
  virtual ~CMessageTeleToWeddingNpcRequest();
  
  CMessageTeleToWeddingNpcRequest(const CMessageTeleToWeddingNpcRequest& from);
  
  inline CMessageTeleToWeddingNpcRequest& operator=(const CMessageTeleToWeddingNpcRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageTeleToWeddingNpcRequest& default_instance();
  void Swap(CMessageTeleToWeddingNpcRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageTeleToWeddingNpcRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageTeleToWeddingNpcRequest& from);
  void MergeFrom(const CMessageTeleToWeddingNpcRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[1];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageTeleToWeddingNpcRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageTeleToWeddingNpcResponse : public ::google::protobuf::Message {
 public:
  CMessageTeleToWeddingNpcResponse();
  virtual ~CMessageTeleToWeddingNpcResponse();
  
  CMessageTeleToWeddingNpcResponse(const CMessageTeleToWeddingNpcResponse& from);
  
  inline CMessageTeleToWeddingNpcResponse& operator=(const CMessageTeleToWeddingNpcResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageTeleToWeddingNpcResponse& default_instance();
  void Swap(CMessageTeleToWeddingNpcResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageTeleToWeddingNpcResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageTeleToWeddingNpcResponse& from);
  void MergeFrom(const CMessageTeleToWeddingNpcResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 Errcode = 1;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 1;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 errcode_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageTeleToWeddingNpcResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageReviewWeddingRequest : public ::google::protobuf::Message {
 public:
  CMessageReviewWeddingRequest();
  virtual ~CMessageReviewWeddingRequest();
  
  CMessageReviewWeddingRequest(const CMessageReviewWeddingRequest& from);
  
  inline CMessageReviewWeddingRequest& operator=(const CMessageReviewWeddingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageReviewWeddingRequest& default_instance();
  void Swap(CMessageReviewWeddingRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageReviewWeddingRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageReviewWeddingRequest& from);
  void MergeFrom(const CMessageReviewWeddingRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 TimeID = 1;
  inline bool has_timeid() const;
  inline void clear_timeid();
  static const int kTimeIDFieldNumber = 1;
  inline ::google::protobuf::uint32 timeid() const;
  inline void set_timeid(::google::protobuf::uint32 value);
  
  // optional uint32 WeddingModule = 2;
  inline bool has_weddingmodule() const;
  inline void clear_weddingmodule();
  static const int kWeddingModuleFieldNumber = 2;
  inline ::google::protobuf::uint32 weddingmodule() const;
  inline void set_weddingmodule(::google::protobuf::uint32 value);
  
  // optional uint32 DayID = 3;
  inline bool has_dayid() const;
  inline void clear_dayid();
  static const int kDayIDFieldNumber = 3;
  inline ::google::protobuf::uint32 dayid() const;
  inline void set_dayid(::google::protobuf::uint32 value);
  
  // optional uint32 EntityID = 4;
  inline bool has_entityid() const;
  inline void clear_entityid();
  static const int kEntityIDFieldNumber = 4;
  inline ::google::protobuf::uint32 entityid() const;
  inline void set_entityid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 timeid_;
  ::google::protobuf::uint32 weddingmodule_;
  ::google::protobuf::uint32 dayid_;
  ::google::protobuf::uint32 entityid_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageReviewWeddingRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageReviewWeddingResponse : public ::google::protobuf::Message {
 public:
  CMessageReviewWeddingResponse();
  virtual ~CMessageReviewWeddingResponse();
  
  CMessageReviewWeddingResponse(const CMessageReviewWeddingResponse& from);
  
  inline CMessageReviewWeddingResponse& operator=(const CMessageReviewWeddingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageReviewWeddingResponse& default_instance();
  void Swap(CMessageReviewWeddingResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageReviewWeddingResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageReviewWeddingResponse& from);
  void MergeFrom(const CMessageReviewWeddingResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 Errcode = 6;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 6;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 errcode_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageReviewWeddingResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageReviewWeddingNotify : public ::google::protobuf::Message {
 public:
  CMessageReviewWeddingNotify();
  virtual ~CMessageReviewWeddingNotify();
  
  CMessageReviewWeddingNotify(const CMessageReviewWeddingNotify& from);
  
  inline CMessageReviewWeddingNotify& operator=(const CMessageReviewWeddingNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageReviewWeddingNotify& default_instance();
  void Swap(CMessageReviewWeddingNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageReviewWeddingNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageReviewWeddingNotify& from);
  void MergeFrom(const CMessageReviewWeddingNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string BrideName = 1;
  inline bool has_bridename() const;
  inline void clear_bridename();
  static const int kBrideNameFieldNumber = 1;
  inline const ::std::string& bridename() const;
  inline void set_bridename(const ::std::string& value);
  inline void set_bridename(const char* value);
  inline void set_bridename(const char* value, size_t size);
  inline ::std::string* mutable_bridename();
  
  // optional string GroomName = 2;
  inline bool has_groomname() const;
  inline void clear_groomname();
  static const int kGroomNameFieldNumber = 2;
  inline const ::std::string& groomname() const;
  inline void set_groomname(const ::std::string& value);
  inline void set_groomname(const char* value);
  inline void set_groomname(const char* value, size_t size);
  inline ::std::string* mutable_groomname();
  
  // optional uint32 WeddingTime = 3;
  inline bool has_weddingtime() const;
  inline void clear_weddingtime();
  static const int kWeddingTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 weddingtime() const;
  inline void set_weddingtime(::google::protobuf::uint32 value);
  
  // optional uint32 WeddingTimeLength = 4;
  inline bool has_weddingtimelength() const;
  inline void clear_weddingtimelength();
  static const int kWeddingTimeLengthFieldNumber = 4;
  inline ::google::protobuf::uint32 weddingtimelength() const;
  inline void set_weddingtimelength(::google::protobuf::uint32 value);
  
  // optional uint32 WeddingModule = 5;
  inline bool has_weddingmodule() const;
  inline void clear_weddingmodule();
  static const int kWeddingModuleFieldNumber = 5;
  inline ::google::protobuf::uint32 weddingmodule() const;
  inline void set_weddingmodule(::google::protobuf::uint32 value);
  
  // optional uint32 CampID = 6;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampIDFieldNumber = 6;
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);
  
  // optional uint32 BrideID = 7;
  inline bool has_brideid() const;
  inline void clear_brideid();
  static const int kBrideIDFieldNumber = 7;
  inline ::google::protobuf::uint32 brideid() const;
  inline void set_brideid(::google::protobuf::uint32 value);
  
  // optional uint32 GroomID = 8;
  inline bool has_groomid() const;
  inline void clear_groomid();
  static const int kGroomIDFieldNumber = 8;
  inline ::google::protobuf::uint32 groomid() const;
  inline void set_groomid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* bridename_;
  static const ::std::string _default_bridename_;
  ::std::string* groomname_;
  static const ::std::string _default_groomname_;
  ::google::protobuf::uint32 weddingtime_;
  ::google::protobuf::uint32 weddingtimelength_;
  ::google::protobuf::uint32 weddingmodule_;
  ::google::protobuf::uint32 campid_;
  ::google::protobuf::uint32 brideid_;
  ::google::protobuf::uint32 groomid_;
  friend void  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageReviewWeddingNotify* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// CMessageApplyMarryRequest

// optional uint32 TimeID = 1;
inline bool CMessageApplyMarryRequest::has_timeid() const {
  return _has_bit(0);
}
inline void CMessageApplyMarryRequest::clear_timeid() {
  timeid_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageApplyMarryRequest::timeid() const {
  return timeid_;
}
inline void CMessageApplyMarryRequest::set_timeid(::google::protobuf::uint32 value) {
  _set_bit(0);
  timeid_ = value;
}

// optional uint32 WeddingModule = 2;
inline bool CMessageApplyMarryRequest::has_weddingmodule() const {
  return _has_bit(1);
}
inline void CMessageApplyMarryRequest::clear_weddingmodule() {
  weddingmodule_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageApplyMarryRequest::weddingmodule() const {
  return weddingmodule_;
}
inline void CMessageApplyMarryRequest::set_weddingmodule(::google::protobuf::uint32 value) {
  _set_bit(1);
  weddingmodule_ = value;
}

// optional uint32 DayID = 3;
inline bool CMessageApplyMarryRequest::has_dayid() const {
  return _has_bit(2);
}
inline void CMessageApplyMarryRequest::clear_dayid() {
  dayid_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageApplyMarryRequest::dayid() const {
  return dayid_;
}
inline void CMessageApplyMarryRequest::set_dayid(::google::protobuf::uint32 value) {
  _set_bit(2);
  dayid_ = value;
}

// optional uint32 HoldWedding = 4;
inline bool CMessageApplyMarryRequest::has_holdwedding() const {
  return _has_bit(3);
}
inline void CMessageApplyMarryRequest::clear_holdwedding() {
  holdwedding_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessageApplyMarryRequest::holdwedding() const {
  return holdwedding_;
}
inline void CMessageApplyMarryRequest::set_holdwedding(::google::protobuf::uint32 value) {
  _set_bit(3);
  holdwedding_ = value;
}

// optional uint32 EntityID = 5;
inline bool CMessageApplyMarryRequest::has_entityid() const {
  return _has_bit(4);
}
inline void CMessageApplyMarryRequest::clear_entityid() {
  entityid_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 CMessageApplyMarryRequest::entityid() const {
  return entityid_;
}
inline void CMessageApplyMarryRequest::set_entityid(::google::protobuf::uint32 value) {
  _set_bit(4);
  entityid_ = value;
}

// -------------------------------------------------------------------

// CMessageApplyMarryResponse

// optional uint32 Errcode = 1;
inline bool CMessageApplyMarryResponse::has_errcode() const {
  return _has_bit(0);
}
inline void CMessageApplyMarryResponse::clear_errcode() {
  errcode_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageApplyMarryResponse::errcode() const {
  return errcode_;
}
inline void CMessageApplyMarryResponse::set_errcode(::google::protobuf::uint32 value) {
  _set_bit(0);
  errcode_ = value;
}

// -------------------------------------------------------------------

// CMessageMarryRequestNotify

// optional uint32 RoleID = 1;
inline bool CMessageMarryRequestNotify::has_roleid() const {
  return _has_bit(0);
}
inline void CMessageMarryRequestNotify::clear_roleid() {
  roleid_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageMarryRequestNotify::roleid() const {
  return roleid_;
}
inline void CMessageMarryRequestNotify::set_roleid(::google::protobuf::uint32 value) {
  _set_bit(0);
  roleid_ = value;
}

// optional string RoleName = 2;
inline bool CMessageMarryRequestNotify::has_rolename() const {
  return _has_bit(1);
}
inline void CMessageMarryRequestNotify::clear_rolename() {
  if (rolename_ != &_default_rolename_) {
    rolename_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CMessageMarryRequestNotify::rolename() const {
  return *rolename_;
}
inline void CMessageMarryRequestNotify::set_rolename(const ::std::string& value) {
  _set_bit(1);
  if (rolename_ == &_default_rolename_) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void CMessageMarryRequestNotify::set_rolename(const char* value) {
  _set_bit(1);
  if (rolename_ == &_default_rolename_) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void CMessageMarryRequestNotify::set_rolename(const char* value, size_t size) {
  _set_bit(1);
  if (rolename_ == &_default_rolename_) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageMarryRequestNotify::mutable_rolename() {
  _set_bit(1);
  if (rolename_ == &_default_rolename_) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}

// optional uint32 Year = 3;
inline bool CMessageMarryRequestNotify::has_year() const {
  return _has_bit(2);
}
inline void CMessageMarryRequestNotify::clear_year() {
  year_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageMarryRequestNotify::year() const {
  return year_;
}
inline void CMessageMarryRequestNotify::set_year(::google::protobuf::uint32 value) {
  _set_bit(2);
  year_ = value;
}

// optional uint32 Month = 4;
inline bool CMessageMarryRequestNotify::has_month() const {
  return _has_bit(3);
}
inline void CMessageMarryRequestNotify::clear_month() {
  month_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessageMarryRequestNotify::month() const {
  return month_;
}
inline void CMessageMarryRequestNotify::set_month(::google::protobuf::uint32 value) {
  _set_bit(3);
  month_ = value;
}

// optional uint32 Day = 5;
inline bool CMessageMarryRequestNotify::has_day() const {
  return _has_bit(4);
}
inline void CMessageMarryRequestNotify::clear_day() {
  day_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 CMessageMarryRequestNotify::day() const {
  return day_;
}
inline void CMessageMarryRequestNotify::set_day(::google::protobuf::uint32 value) {
  _set_bit(4);
  day_ = value;
}

// optional uint32 BeginTime = 6;
inline bool CMessageMarryRequestNotify::has_begintime() const {
  return _has_bit(5);
}
inline void CMessageMarryRequestNotify::clear_begintime() {
  begintime_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 CMessageMarryRequestNotify::begintime() const {
  return begintime_;
}
inline void CMessageMarryRequestNotify::set_begintime(::google::protobuf::uint32 value) {
  _set_bit(5);
  begintime_ = value;
}

// optional uint32 WeddingModule = 7;
inline bool CMessageMarryRequestNotify::has_weddingmodule() const {
  return _has_bit(6);
}
inline void CMessageMarryRequestNotify::clear_weddingmodule() {
  weddingmodule_ = 0u;
  _clear_bit(6);
}
inline ::google::protobuf::uint32 CMessageMarryRequestNotify::weddingmodule() const {
  return weddingmodule_;
}
inline void CMessageMarryRequestNotify::set_weddingmodule(::google::protobuf::uint32 value) {
  _set_bit(6);
  weddingmodule_ = value;
}

// -------------------------------------------------------------------

// CMessageReplyMarryRequest

// optional uint32 Result = 1;
inline bool CMessageReplyMarryRequest::has_result() const {
  return _has_bit(0);
}
inline void CMessageReplyMarryRequest::clear_result() {
  result_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageReplyMarryRequest::result() const {
  return result_;
}
inline void CMessageReplyMarryRequest::set_result(::google::protobuf::uint32 value) {
  _set_bit(0);
  result_ = value;
}

// optional uint32 EntityID = 2;
inline bool CMessageReplyMarryRequest::has_entityid() const {
  return _has_bit(1);
}
inline void CMessageReplyMarryRequest::clear_entityid() {
  entityid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageReplyMarryRequest::entityid() const {
  return entityid_;
}
inline void CMessageReplyMarryRequest::set_entityid(::google::protobuf::uint32 value) {
  _set_bit(1);
  entityid_ = value;
}

// -------------------------------------------------------------------

// CMessageReplyMarryResponse

// optional uint32 Errcode = 1;
inline bool CMessageReplyMarryResponse::has_errcode() const {
  return _has_bit(0);
}
inline void CMessageReplyMarryResponse::clear_errcode() {
  errcode_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageReplyMarryResponse::errcode() const {
  return errcode_;
}
inline void CMessageReplyMarryResponse::set_errcode(::google::protobuf::uint32 value) {
  _set_bit(0);
  errcode_ = value;
}

// optional uint32 Result = 2;
inline bool CMessageReplyMarryResponse::has_result() const {
  return _has_bit(1);
}
inline void CMessageReplyMarryResponse::clear_result() {
  result_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageReplyMarryResponse::result() const {
  return result_;
}
inline void CMessageReplyMarryResponse::set_result(::google::protobuf::uint32 value) {
  _set_bit(1);
  result_ = value;
}

// optional string SpouseName = 3;
inline bool CMessageReplyMarryResponse::has_spousename() const {
  return _has_bit(2);
}
inline void CMessageReplyMarryResponse::clear_spousename() {
  if (spousename_ != &_default_spousename_) {
    spousename_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& CMessageReplyMarryResponse::spousename() const {
  return *spousename_;
}
inline void CMessageReplyMarryResponse::set_spousename(const ::std::string& value) {
  _set_bit(2);
  if (spousename_ == &_default_spousename_) {
    spousename_ = new ::std::string;
  }
  spousename_->assign(value);
}
inline void CMessageReplyMarryResponse::set_spousename(const char* value) {
  _set_bit(2);
  if (spousename_ == &_default_spousename_) {
    spousename_ = new ::std::string;
  }
  spousename_->assign(value);
}
inline void CMessageReplyMarryResponse::set_spousename(const char* value, size_t size) {
  _set_bit(2);
  if (spousename_ == &_default_spousename_) {
    spousename_ = new ::std::string;
  }
  spousename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageReplyMarryResponse::mutable_spousename() {
  _set_bit(2);
  if (spousename_ == &_default_spousename_) {
    spousename_ = new ::std::string;
  }
  return spousename_;
}

// optional uint32 MarriageStatus = 4;
inline bool CMessageReplyMarryResponse::has_marriagestatus() const {
  return _has_bit(3);
}
inline void CMessageReplyMarryResponse::clear_marriagestatus() {
  marriagestatus_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessageReplyMarryResponse::marriagestatus() const {
  return marriagestatus_;
}
inline void CMessageReplyMarryResponse::set_marriagestatus(::google::protobuf::uint32 value) {
  _set_bit(3);
  marriagestatus_ = value;
}

// -------------------------------------------------------------------

// CMessageMarriageTipsNotify

// optional uint32 WeddingTime = 1;
inline bool CMessageMarriageTipsNotify::has_weddingtime() const {
  return _has_bit(0);
}
inline void CMessageMarriageTipsNotify::clear_weddingtime() {
  weddingtime_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageMarriageTipsNotify::weddingtime() const {
  return weddingtime_;
}
inline void CMessageMarriageTipsNotify::set_weddingtime(::google::protobuf::uint32 value) {
  _set_bit(0);
  weddingtime_ = value;
}

// optional uint32 WeddingStatus = 2;
inline bool CMessageMarriageTipsNotify::has_weddingstatus() const {
  return _has_bit(1);
}
inline void CMessageMarriageTipsNotify::clear_weddingstatus() {
  weddingstatus_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageMarriageTipsNotify::weddingstatus() const {
  return weddingstatus_;
}
inline void CMessageMarriageTipsNotify::set_weddingstatus(::google::protobuf::uint32 value) {
  _set_bit(1);
  weddingstatus_ = value;
}

// -------------------------------------------------------------------

// CMessageBeginWeddingRequest

// optional uint32 EntityID = 1;
inline bool CMessageBeginWeddingRequest::has_entityid() const {
  return _has_bit(0);
}
inline void CMessageBeginWeddingRequest::clear_entityid() {
  entityid_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageBeginWeddingRequest::entityid() const {
  return entityid_;
}
inline void CMessageBeginWeddingRequest::set_entityid(::google::protobuf::uint32 value) {
  _set_bit(0);
  entityid_ = value;
}

// -------------------------------------------------------------------

// CMessageBeginWeddingResponse

// optional uint32 Errcode = 1;
inline bool CMessageBeginWeddingResponse::has_errcode() const {
  return _has_bit(0);
}
inline void CMessageBeginWeddingResponse::clear_errcode() {
  errcode_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageBeginWeddingResponse::errcode() const {
  return errcode_;
}
inline void CMessageBeginWeddingResponse::set_errcode(::google::protobuf::uint32 value) {
  _set_bit(0);
  errcode_ = value;
}

// -------------------------------------------------------------------

// CMessageBeginWeddingNotify

// -------------------------------------------------------------------

// CMessageReplyBeginWeddingRequest

// optional uint32 Result = 1;
inline bool CMessageReplyBeginWeddingRequest::has_result() const {
  return _has_bit(0);
}
inline void CMessageReplyBeginWeddingRequest::clear_result() {
  result_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageReplyBeginWeddingRequest::result() const {
  return result_;
}
inline void CMessageReplyBeginWeddingRequest::set_result(::google::protobuf::uint32 value) {
  _set_bit(0);
  result_ = value;
}

// optional uint32 EntityID = 2;
inline bool CMessageReplyBeginWeddingRequest::has_entityid() const {
  return _has_bit(1);
}
inline void CMessageReplyBeginWeddingRequest::clear_entityid() {
  entityid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageReplyBeginWeddingRequest::entityid() const {
  return entityid_;
}
inline void CMessageReplyBeginWeddingRequest::set_entityid(::google::protobuf::uint32 value) {
  _set_bit(1);
  entityid_ = value;
}

// -------------------------------------------------------------------

// CMessageReplyBeginWeddingResponse

// optional uint32 Errcode = 1;
inline bool CMessageReplyBeginWeddingResponse::has_errcode() const {
  return _has_bit(0);
}
inline void CMessageReplyBeginWeddingResponse::clear_errcode() {
  errcode_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageReplyBeginWeddingResponse::errcode() const {
  return errcode_;
}
inline void CMessageReplyBeginWeddingResponse::set_errcode(::google::protobuf::uint32 value) {
  _set_bit(0);
  errcode_ = value;
}

// -------------------------------------------------------------------

// CMessageWeddingStartNotify

// optional string GroomName = 1;
inline bool CMessageWeddingStartNotify::has_groomname() const {
  return _has_bit(0);
}
inline void CMessageWeddingStartNotify::clear_groomname() {
  if (groomname_ != &_default_groomname_) {
    groomname_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& CMessageWeddingStartNotify::groomname() const {
  return *groomname_;
}
inline void CMessageWeddingStartNotify::set_groomname(const ::std::string& value) {
  _set_bit(0);
  if (groomname_ == &_default_groomname_) {
    groomname_ = new ::std::string;
  }
  groomname_->assign(value);
}
inline void CMessageWeddingStartNotify::set_groomname(const char* value) {
  _set_bit(0);
  if (groomname_ == &_default_groomname_) {
    groomname_ = new ::std::string;
  }
  groomname_->assign(value);
}
inline void CMessageWeddingStartNotify::set_groomname(const char* value, size_t size) {
  _set_bit(0);
  if (groomname_ == &_default_groomname_) {
    groomname_ = new ::std::string;
  }
  groomname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageWeddingStartNotify::mutable_groomname() {
  _set_bit(0);
  if (groomname_ == &_default_groomname_) {
    groomname_ = new ::std::string;
  }
  return groomname_;
}

// optional string BrideName = 2;
inline bool CMessageWeddingStartNotify::has_bridename() const {
  return _has_bit(1);
}
inline void CMessageWeddingStartNotify::clear_bridename() {
  if (bridename_ != &_default_bridename_) {
    bridename_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CMessageWeddingStartNotify::bridename() const {
  return *bridename_;
}
inline void CMessageWeddingStartNotify::set_bridename(const ::std::string& value) {
  _set_bit(1);
  if (bridename_ == &_default_bridename_) {
    bridename_ = new ::std::string;
  }
  bridename_->assign(value);
}
inline void CMessageWeddingStartNotify::set_bridename(const char* value) {
  _set_bit(1);
  if (bridename_ == &_default_bridename_) {
    bridename_ = new ::std::string;
  }
  bridename_->assign(value);
}
inline void CMessageWeddingStartNotify::set_bridename(const char* value, size_t size) {
  _set_bit(1);
  if (bridename_ == &_default_bridename_) {
    bridename_ = new ::std::string;
  }
  bridename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageWeddingStartNotify::mutable_bridename() {
  _set_bit(1);
  if (bridename_ == &_default_bridename_) {
    bridename_ = new ::std::string;
  }
  return bridename_;
}

// optional uint32 WeddingTimeLength = 3;
inline bool CMessageWeddingStartNotify::has_weddingtimelength() const {
  return _has_bit(2);
}
inline void CMessageWeddingStartNotify::clear_weddingtimelength() {
  weddingtimelength_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageWeddingStartNotify::weddingtimelength() const {
  return weddingtimelength_;
}
inline void CMessageWeddingStartNotify::set_weddingtimelength(::google::protobuf::uint32 value) {
  _set_bit(2);
  weddingtimelength_ = value;
}

// optional uint32 WeddingModule = 4;
inline bool CMessageWeddingStartNotify::has_weddingmodule() const {
  return _has_bit(3);
}
inline void CMessageWeddingStartNotify::clear_weddingmodule() {
  weddingmodule_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessageWeddingStartNotify::weddingmodule() const {
  return weddingmodule_;
}
inline void CMessageWeddingStartNotify::set_weddingmodule(::google::protobuf::uint32 value) {
  _set_bit(3);
  weddingmodule_ = value;
}

// optional uint32 GroomID = 5;
inline bool CMessageWeddingStartNotify::has_groomid() const {
  return _has_bit(4);
}
inline void CMessageWeddingStartNotify::clear_groomid() {
  groomid_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 CMessageWeddingStartNotify::groomid() const {
  return groomid_;
}
inline void CMessageWeddingStartNotify::set_groomid(::google::protobuf::uint32 value) {
  _set_bit(4);
  groomid_ = value;
}

// optional uint32 BrideID = 6;
inline bool CMessageWeddingStartNotify::has_brideid() const {
  return _has_bit(5);
}
inline void CMessageWeddingStartNotify::clear_brideid() {
  brideid_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 CMessageWeddingStartNotify::brideid() const {
  return brideid_;
}
inline void CMessageWeddingStartNotify::set_brideid(::google::protobuf::uint32 value) {
  _set_bit(5);
  brideid_ = value;
}

// optional uint32 CampID = 7;
inline bool CMessageWeddingStartNotify::has_campid() const {
  return _has_bit(6);
}
inline void CMessageWeddingStartNotify::clear_campid() {
  campid_ = 0u;
  _clear_bit(6);
}
inline ::google::protobuf::uint32 CMessageWeddingStartNotify::campid() const {
  return campid_;
}
inline void CMessageWeddingStartNotify::set_campid(::google::protobuf::uint32 value) {
  _set_bit(6);
  campid_ = value;
}

// -------------------------------------------------------------------

// CMessageEnterMarriageHallNotify

// -------------------------------------------------------------------

// CMessageReplyEnterMarriageHallRequest

// optional uint32 Result = 1;
inline bool CMessageReplyEnterMarriageHallRequest::has_result() const {
  return _has_bit(0);
}
inline void CMessageReplyEnterMarriageHallRequest::clear_result() {
  result_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageReplyEnterMarriageHallRequest::result() const {
  return result_;
}
inline void CMessageReplyEnterMarriageHallRequest::set_result(::google::protobuf::uint32 value) {
  _set_bit(0);
  result_ = value;
}

// -------------------------------------------------------------------

// CMessageReplyEnterMarriageHallResponse

// optional uint32 Errcode = 1;
inline bool CMessageReplyEnterMarriageHallResponse::has_errcode() const {
  return _has_bit(0);
}
inline void CMessageReplyEnterMarriageHallResponse::clear_errcode() {
  errcode_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageReplyEnterMarriageHallResponse::errcode() const {
  return errcode_;
}
inline void CMessageReplyEnterMarriageHallResponse::set_errcode(::google::protobuf::uint32 value) {
  _set_bit(0);
  errcode_ = value;
}

// -------------------------------------------------------------------

// CMessageNewlyEnterHallRequest

// optional uint32 EntityID = 1;
inline bool CMessageNewlyEnterHallRequest::has_entityid() const {
  return _has_bit(0);
}
inline void CMessageNewlyEnterHallRequest::clear_entityid() {
  entityid_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageNewlyEnterHallRequest::entityid() const {
  return entityid_;
}
inline void CMessageNewlyEnterHallRequest::set_entityid(::google::protobuf::uint32 value) {
  _set_bit(0);
  entityid_ = value;
}

// -------------------------------------------------------------------

// CMessageNewlyEnterHallResponse

// optional uint32 Errcode = 1;
inline bool CMessageNewlyEnterHallResponse::has_errcode() const {
  return _has_bit(0);
}
inline void CMessageNewlyEnterHallResponse::clear_errcode() {
  errcode_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageNewlyEnterHallResponse::errcode() const {
  return errcode_;
}
inline void CMessageNewlyEnterHallResponse::set_errcode(::google::protobuf::uint32 value) {
  _set_bit(0);
  errcode_ = value;
}

// optional uint32 WeddingModule = 2;
inline bool CMessageNewlyEnterHallResponse::has_weddingmodule() const {
  return _has_bit(1);
}
inline void CMessageNewlyEnterHallResponse::clear_weddingmodule() {
  weddingmodule_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageNewlyEnterHallResponse::weddingmodule() const {
  return weddingmodule_;
}
inline void CMessageNewlyEnterHallResponse::set_weddingmodule(::google::protobuf::uint32 value) {
  _set_bit(1);
  weddingmodule_ = value;
}

// optional uint32 BaitangEnd = 3;
inline bool CMessageNewlyEnterHallResponse::has_baitangend() const {
  return _has_bit(2);
}
inline void CMessageNewlyEnterHallResponse::clear_baitangend() {
  baitangend_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageNewlyEnterHallResponse::baitangend() const {
  return baitangend_;
}
inline void CMessageNewlyEnterHallResponse::set_baitangend(::google::protobuf::uint32 value) {
  _set_bit(2);
  baitangend_ = value;
}

// -------------------------------------------------------------------

// CMessageGuestEnterHallRequest

// optional uint32 EntityID = 1;
inline bool CMessageGuestEnterHallRequest::has_entityid() const {
  return _has_bit(0);
}
inline void CMessageGuestEnterHallRequest::clear_entityid() {
  entityid_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageGuestEnterHallRequest::entityid() const {
  return entityid_;
}
inline void CMessageGuestEnterHallRequest::set_entityid(::google::protobuf::uint32 value) {
  _set_bit(0);
  entityid_ = value;
}

// -------------------------------------------------------------------

// CMessageGuestEnterHallResponse

// optional uint32 Errcode = 1;
inline bool CMessageGuestEnterHallResponse::has_errcode() const {
  return _has_bit(0);
}
inline void CMessageGuestEnterHallResponse::clear_errcode() {
  errcode_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageGuestEnterHallResponse::errcode() const {
  return errcode_;
}
inline void CMessageGuestEnterHallResponse::set_errcode(::google::protobuf::uint32 value) {
  _set_bit(0);
  errcode_ = value;
}

// -------------------------------------------------------------------

// CMessageBaitangRequest

// optional uint32 EntityID = 1;
inline bool CMessageBaitangRequest::has_entityid() const {
  return _has_bit(0);
}
inline void CMessageBaitangRequest::clear_entityid() {
  entityid_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageBaitangRequest::entityid() const {
  return entityid_;
}
inline void CMessageBaitangRequest::set_entityid(::google::protobuf::uint32 value) {
  _set_bit(0);
  entityid_ = value;
}

// -------------------------------------------------------------------

// CMessageBaitangResponse

// optional uint32 Errcode = 1;
inline bool CMessageBaitangResponse::has_errcode() const {
  return _has_bit(0);
}
inline void CMessageBaitangResponse::clear_errcode() {
  errcode_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageBaitangResponse::errcode() const {
  return errcode_;
}
inline void CMessageBaitangResponse::set_errcode(::google::protobuf::uint32 value) {
  _set_bit(0);
  errcode_ = value;
}

// -------------------------------------------------------------------

// CMessageBaitangNotify

// optional string GroomName = 1;
inline bool CMessageBaitangNotify::has_groomname() const {
  return _has_bit(0);
}
inline void CMessageBaitangNotify::clear_groomname() {
  if (groomname_ != &_default_groomname_) {
    groomname_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& CMessageBaitangNotify::groomname() const {
  return *groomname_;
}
inline void CMessageBaitangNotify::set_groomname(const ::std::string& value) {
  _set_bit(0);
  if (groomname_ == &_default_groomname_) {
    groomname_ = new ::std::string;
  }
  groomname_->assign(value);
}
inline void CMessageBaitangNotify::set_groomname(const char* value) {
  _set_bit(0);
  if (groomname_ == &_default_groomname_) {
    groomname_ = new ::std::string;
  }
  groomname_->assign(value);
}
inline void CMessageBaitangNotify::set_groomname(const char* value, size_t size) {
  _set_bit(0);
  if (groomname_ == &_default_groomname_) {
    groomname_ = new ::std::string;
  }
  groomname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageBaitangNotify::mutable_groomname() {
  _set_bit(0);
  if (groomname_ == &_default_groomname_) {
    groomname_ = new ::std::string;
  }
  return groomname_;
}

// optional string BrideName = 2;
inline bool CMessageBaitangNotify::has_bridename() const {
  return _has_bit(1);
}
inline void CMessageBaitangNotify::clear_bridename() {
  if (bridename_ != &_default_bridename_) {
    bridename_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CMessageBaitangNotify::bridename() const {
  return *bridename_;
}
inline void CMessageBaitangNotify::set_bridename(const ::std::string& value) {
  _set_bit(1);
  if (bridename_ == &_default_bridename_) {
    bridename_ = new ::std::string;
  }
  bridename_->assign(value);
}
inline void CMessageBaitangNotify::set_bridename(const char* value) {
  _set_bit(1);
  if (bridename_ == &_default_bridename_) {
    bridename_ = new ::std::string;
  }
  bridename_->assign(value);
}
inline void CMessageBaitangNotify::set_bridename(const char* value, size_t size) {
  _set_bit(1);
  if (bridename_ == &_default_bridename_) {
    bridename_ = new ::std::string;
  }
  bridename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageBaitangNotify::mutable_bridename() {
  _set_bit(1);
  if (bridename_ == &_default_bridename_) {
    bridename_ = new ::std::string;
  }
  return bridename_;
}

// optional uint32 GroomEntityID = 3;
inline bool CMessageBaitangNotify::has_groomentityid() const {
  return _has_bit(2);
}
inline void CMessageBaitangNotify::clear_groomentityid() {
  groomentityid_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageBaitangNotify::groomentityid() const {
  return groomentityid_;
}
inline void CMessageBaitangNotify::set_groomentityid(::google::protobuf::uint32 value) {
  _set_bit(2);
  groomentityid_ = value;
}

// optional uint32 BrideEntityID = 4;
inline bool CMessageBaitangNotify::has_brideentityid() const {
  return _has_bit(3);
}
inline void CMessageBaitangNotify::clear_brideentityid() {
  brideentityid_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessageBaitangNotify::brideentityid() const {
  return brideentityid_;
}
inline void CMessageBaitangNotify::set_brideentityid(::google::protobuf::uint32 value) {
  _set_bit(3);
  brideentityid_ = value;
}

// -------------------------------------------------------------------

// CMessagePutKeepSakeRequest

// optional uint32 KeepsakeIndex = 1;
inline bool CMessagePutKeepSakeRequest::has_keepsakeindex() const {
  return _has_bit(0);
}
inline void CMessagePutKeepSakeRequest::clear_keepsakeindex() {
  keepsakeindex_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessagePutKeepSakeRequest::keepsakeindex() const {
  return keepsakeindex_;
}
inline void CMessagePutKeepSakeRequest::set_keepsakeindex(::google::protobuf::uint32 value) {
  _set_bit(0);
  keepsakeindex_ = value;
}

// -------------------------------------------------------------------

// CMessagePutKeepSakeResponse

// optional uint32 Errcode = 1;
inline bool CMessagePutKeepSakeResponse::has_errcode() const {
  return _has_bit(0);
}
inline void CMessagePutKeepSakeResponse::clear_errcode() {
  errcode_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessagePutKeepSakeResponse::errcode() const {
  return errcode_;
}
inline void CMessagePutKeepSakeResponse::set_errcode(::google::protobuf::uint32 value) {
  _set_bit(0);
  errcode_ = value;
}

// optional uint32 Index = 2;
inline bool CMessagePutKeepSakeResponse::has_index() const {
  return _has_bit(1);
}
inline void CMessagePutKeepSakeResponse::clear_index() {
  index_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessagePutKeepSakeResponse::index() const {
  return index_;
}
inline void CMessagePutKeepSakeResponse::set_index(::google::protobuf::uint32 value) {
  _set_bit(1);
  index_ = value;
}

// -------------------------------------------------------------------

// CMessageExchangeKeepsakeRequest

// -------------------------------------------------------------------

// CMessageExchangeKeepsakeResponse

// optional uint32 Errcode = 1;
inline bool CMessageExchangeKeepsakeResponse::has_errcode() const {
  return _has_bit(0);
}
inline void CMessageExchangeKeepsakeResponse::clear_errcode() {
  errcode_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageExchangeKeepsakeResponse::errcode() const {
  return errcode_;
}
inline void CMessageExchangeKeepsakeResponse::set_errcode(::google::protobuf::uint32 value) {
  _set_bit(0);
  errcode_ = value;
}

// -------------------------------------------------------------------

// CMessageExchangeKeepsakeNotify

// optional string GroomName = 1;
inline bool CMessageExchangeKeepsakeNotify::has_groomname() const {
  return _has_bit(0);
}
inline void CMessageExchangeKeepsakeNotify::clear_groomname() {
  if (groomname_ != &_default_groomname_) {
    groomname_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& CMessageExchangeKeepsakeNotify::groomname() const {
  return *groomname_;
}
inline void CMessageExchangeKeepsakeNotify::set_groomname(const ::std::string& value) {
  _set_bit(0);
  if (groomname_ == &_default_groomname_) {
    groomname_ = new ::std::string;
  }
  groomname_->assign(value);
}
inline void CMessageExchangeKeepsakeNotify::set_groomname(const char* value) {
  _set_bit(0);
  if (groomname_ == &_default_groomname_) {
    groomname_ = new ::std::string;
  }
  groomname_->assign(value);
}
inline void CMessageExchangeKeepsakeNotify::set_groomname(const char* value, size_t size) {
  _set_bit(0);
  if (groomname_ == &_default_groomname_) {
    groomname_ = new ::std::string;
  }
  groomname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageExchangeKeepsakeNotify::mutable_groomname() {
  _set_bit(0);
  if (groomname_ == &_default_groomname_) {
    groomname_ = new ::std::string;
  }
  return groomname_;
}

// optional .PBItemObject BrideKeepsake = 2;
inline bool CMessageExchangeKeepsakeNotify::has_bridekeepsake() const {
  return _has_bit(1);
}
inline void CMessageExchangeKeepsakeNotify::clear_bridekeepsake() {
  if (bridekeepsake_ != NULL) bridekeepsake_->::PBItemObject::Clear();
  _clear_bit(1);
}
inline const ::PBItemObject& CMessageExchangeKeepsakeNotify::bridekeepsake() const {
  return bridekeepsake_ != NULL ? *bridekeepsake_ : *default_instance_->bridekeepsake_;
}
inline ::PBItemObject* CMessageExchangeKeepsakeNotify::mutable_bridekeepsake() {
  _set_bit(1);
  if (bridekeepsake_ == NULL) bridekeepsake_ = new ::PBItemObject;
  return bridekeepsake_;
}

// optional string BrideName = 3;
inline bool CMessageExchangeKeepsakeNotify::has_bridename() const {
  return _has_bit(2);
}
inline void CMessageExchangeKeepsakeNotify::clear_bridename() {
  if (bridename_ != &_default_bridename_) {
    bridename_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& CMessageExchangeKeepsakeNotify::bridename() const {
  return *bridename_;
}
inline void CMessageExchangeKeepsakeNotify::set_bridename(const ::std::string& value) {
  _set_bit(2);
  if (bridename_ == &_default_bridename_) {
    bridename_ = new ::std::string;
  }
  bridename_->assign(value);
}
inline void CMessageExchangeKeepsakeNotify::set_bridename(const char* value) {
  _set_bit(2);
  if (bridename_ == &_default_bridename_) {
    bridename_ = new ::std::string;
  }
  bridename_->assign(value);
}
inline void CMessageExchangeKeepsakeNotify::set_bridename(const char* value, size_t size) {
  _set_bit(2);
  if (bridename_ == &_default_bridename_) {
    bridename_ = new ::std::string;
  }
  bridename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageExchangeKeepsakeNotify::mutable_bridename() {
  _set_bit(2);
  if (bridename_ == &_default_bridename_) {
    bridename_ = new ::std::string;
  }
  return bridename_;
}

// optional .PBItemObject GroomKeepsake = 4;
inline bool CMessageExchangeKeepsakeNotify::has_groomkeepsake() const {
  return _has_bit(3);
}
inline void CMessageExchangeKeepsakeNotify::clear_groomkeepsake() {
  if (groomkeepsake_ != NULL) groomkeepsake_->::PBItemObject::Clear();
  _clear_bit(3);
}
inline const ::PBItemObject& CMessageExchangeKeepsakeNotify::groomkeepsake() const {
  return groomkeepsake_ != NULL ? *groomkeepsake_ : *default_instance_->groomkeepsake_;
}
inline ::PBItemObject* CMessageExchangeKeepsakeNotify::mutable_groomkeepsake() {
  _set_bit(3);
  if (groomkeepsake_ == NULL) groomkeepsake_ = new ::PBItemObject;
  return groomkeepsake_;
}

// -------------------------------------------------------------------

// CMessageDivorceRequest

// optional uint32 EntityID = 1;
inline bool CMessageDivorceRequest::has_entityid() const {
  return _has_bit(0);
}
inline void CMessageDivorceRequest::clear_entityid() {
  entityid_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageDivorceRequest::entityid() const {
  return entityid_;
}
inline void CMessageDivorceRequest::set_entityid(::google::protobuf::uint32 value) {
  _set_bit(0);
  entityid_ = value;
}

// -------------------------------------------------------------------

// CMessageDivorceResponse

// optional uint32 Errcode = 1;
inline bool CMessageDivorceResponse::has_errcode() const {
  return _has_bit(0);
}
inline void CMessageDivorceResponse::clear_errcode() {
  errcode_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageDivorceResponse::errcode() const {
  return errcode_;
}
inline void CMessageDivorceResponse::set_errcode(::google::protobuf::uint32 value) {
  _set_bit(0);
  errcode_ = value;
}

// -------------------------------------------------------------------

// CMessageDivorceNotify

// optional string GroomName = 1;
inline bool CMessageDivorceNotify::has_groomname() const {
  return _has_bit(0);
}
inline void CMessageDivorceNotify::clear_groomname() {
  if (groomname_ != &_default_groomname_) {
    groomname_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& CMessageDivorceNotify::groomname() const {
  return *groomname_;
}
inline void CMessageDivorceNotify::set_groomname(const ::std::string& value) {
  _set_bit(0);
  if (groomname_ == &_default_groomname_) {
    groomname_ = new ::std::string;
  }
  groomname_->assign(value);
}
inline void CMessageDivorceNotify::set_groomname(const char* value) {
  _set_bit(0);
  if (groomname_ == &_default_groomname_) {
    groomname_ = new ::std::string;
  }
  groomname_->assign(value);
}
inline void CMessageDivorceNotify::set_groomname(const char* value, size_t size) {
  _set_bit(0);
  if (groomname_ == &_default_groomname_) {
    groomname_ = new ::std::string;
  }
  groomname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageDivorceNotify::mutable_groomname() {
  _set_bit(0);
  if (groomname_ == &_default_groomname_) {
    groomname_ = new ::std::string;
  }
  return groomname_;
}

// optional uint32 GroomCharID = 2;
inline bool CMessageDivorceNotify::has_groomcharid() const {
  return _has_bit(1);
}
inline void CMessageDivorceNotify::clear_groomcharid() {
  groomcharid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageDivorceNotify::groomcharid() const {
  return groomcharid_;
}
inline void CMessageDivorceNotify::set_groomcharid(::google::protobuf::uint32 value) {
  _set_bit(1);
  groomcharid_ = value;
}

// optional string BrideName = 3;
inline bool CMessageDivorceNotify::has_bridename() const {
  return _has_bit(2);
}
inline void CMessageDivorceNotify::clear_bridename() {
  if (bridename_ != &_default_bridename_) {
    bridename_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& CMessageDivorceNotify::bridename() const {
  return *bridename_;
}
inline void CMessageDivorceNotify::set_bridename(const ::std::string& value) {
  _set_bit(2);
  if (bridename_ == &_default_bridename_) {
    bridename_ = new ::std::string;
  }
  bridename_->assign(value);
}
inline void CMessageDivorceNotify::set_bridename(const char* value) {
  _set_bit(2);
  if (bridename_ == &_default_bridename_) {
    bridename_ = new ::std::string;
  }
  bridename_->assign(value);
}
inline void CMessageDivorceNotify::set_bridename(const char* value, size_t size) {
  _set_bit(2);
  if (bridename_ == &_default_bridename_) {
    bridename_ = new ::std::string;
  }
  bridename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageDivorceNotify::mutable_bridename() {
  _set_bit(2);
  if (bridename_ == &_default_bridename_) {
    bridename_ = new ::std::string;
  }
  return bridename_;
}

// optional uint32 BrideCharID = 4;
inline bool CMessageDivorceNotify::has_bridecharid() const {
  return _has_bit(3);
}
inline void CMessageDivorceNotify::clear_bridecharid() {
  bridecharid_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessageDivorceNotify::bridecharid() const {
  return bridecharid_;
}
inline void CMessageDivorceNotify::set_bridecharid(::google::protobuf::uint32 value) {
  _set_bit(3);
  bridecharid_ = value;
}

// -------------------------------------------------------------------

// CMessageMarryResultNotify

// optional uint32 Result = 1;
inline bool CMessageMarryResultNotify::has_result() const {
  return _has_bit(0);
}
inline void CMessageMarryResultNotify::clear_result() {
  result_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageMarryResultNotify::result() const {
  return result_;
}
inline void CMessageMarryResultNotify::set_result(::google::protobuf::uint32 value) {
  _set_bit(0);
  result_ = value;
}

// optional string SpouseName = 2;
inline bool CMessageMarryResultNotify::has_spousename() const {
  return _has_bit(1);
}
inline void CMessageMarryResultNotify::clear_spousename() {
  if (spousename_ != &_default_spousename_) {
    spousename_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CMessageMarryResultNotify::spousename() const {
  return *spousename_;
}
inline void CMessageMarryResultNotify::set_spousename(const ::std::string& value) {
  _set_bit(1);
  if (spousename_ == &_default_spousename_) {
    spousename_ = new ::std::string;
  }
  spousename_->assign(value);
}
inline void CMessageMarryResultNotify::set_spousename(const char* value) {
  _set_bit(1);
  if (spousename_ == &_default_spousename_) {
    spousename_ = new ::std::string;
  }
  spousename_->assign(value);
}
inline void CMessageMarryResultNotify::set_spousename(const char* value, size_t size) {
  _set_bit(1);
  if (spousename_ == &_default_spousename_) {
    spousename_ = new ::std::string;
  }
  spousename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageMarryResultNotify::mutable_spousename() {
  _set_bit(1);
  if (spousename_ == &_default_spousename_) {
    spousename_ = new ::std::string;
  }
  return spousename_;
}

// optional uint32 MarriageStatus = 3;
inline bool CMessageMarryResultNotify::has_marriagestatus() const {
  return _has_bit(2);
}
inline void CMessageMarryResultNotify::clear_marriagestatus() {
  marriagestatus_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageMarryResultNotify::marriagestatus() const {
  return marriagestatus_;
}
inline void CMessageMarryResultNotify::set_marriagestatus(::google::protobuf::uint32 value) {
  _set_bit(2);
  marriagestatus_ = value;
}

// optional uint32 WeddingTime = 4;
inline bool CMessageMarryResultNotify::has_weddingtime() const {
  return _has_bit(3);
}
inline void CMessageMarryResultNotify::clear_weddingtime() {
  weddingtime_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessageMarryResultNotify::weddingtime() const {
  return weddingtime_;
}
inline void CMessageMarryResultNotify::set_weddingtime(::google::protobuf::uint32 value) {
  _set_bit(3);
  weddingtime_ = value;
}

// -------------------------------------------------------------------

// CMessageBeginWeddingResultNofiy

// optional uint32 Result = 1;
inline bool CMessageBeginWeddingResultNofiy::has_result() const {
  return _has_bit(0);
}
inline void CMessageBeginWeddingResultNofiy::clear_result() {
  result_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageBeginWeddingResultNofiy::result() const {
  return result_;
}
inline void CMessageBeginWeddingResultNofiy::set_result(::google::protobuf::uint32 value) {
  _set_bit(0);
  result_ = value;
}

// optional string SpouseName = 2;
inline bool CMessageBeginWeddingResultNofiy::has_spousename() const {
  return _has_bit(1);
}
inline void CMessageBeginWeddingResultNofiy::clear_spousename() {
  if (spousename_ != &_default_spousename_) {
    spousename_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CMessageBeginWeddingResultNofiy::spousename() const {
  return *spousename_;
}
inline void CMessageBeginWeddingResultNofiy::set_spousename(const ::std::string& value) {
  _set_bit(1);
  if (spousename_ == &_default_spousename_) {
    spousename_ = new ::std::string;
  }
  spousename_->assign(value);
}
inline void CMessageBeginWeddingResultNofiy::set_spousename(const char* value) {
  _set_bit(1);
  if (spousename_ == &_default_spousename_) {
    spousename_ = new ::std::string;
  }
  spousename_->assign(value);
}
inline void CMessageBeginWeddingResultNofiy::set_spousename(const char* value, size_t size) {
  _set_bit(1);
  if (spousename_ == &_default_spousename_) {
    spousename_ = new ::std::string;
  }
  spousename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageBeginWeddingResultNofiy::mutable_spousename() {
  _set_bit(1);
  if (spousename_ == &_default_spousename_) {
    spousename_ = new ::std::string;
  }
  return spousename_;
}

// -------------------------------------------------------------------

// CMessageGetCampMarriageInfoRequest

// optional uint32 EntityID = 1;
inline bool CMessageGetCampMarriageInfoRequest::has_entityid() const {
  return _has_bit(0);
}
inline void CMessageGetCampMarriageInfoRequest::clear_entityid() {
  entityid_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageGetCampMarriageInfoRequest::entityid() const {
  return entityid_;
}
inline void CMessageGetCampMarriageInfoRequest::set_entityid(::google::protobuf::uint32 value) {
  _set_bit(0);
  entityid_ = value;
}

// -------------------------------------------------------------------

// PBMarriageInfo

// optional string GroomName = 1;
inline bool PBMarriageInfo::has_groomname() const {
  return _has_bit(0);
}
inline void PBMarriageInfo::clear_groomname() {
  if (groomname_ != &_default_groomname_) {
    groomname_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& PBMarriageInfo::groomname() const {
  return *groomname_;
}
inline void PBMarriageInfo::set_groomname(const ::std::string& value) {
  _set_bit(0);
  if (groomname_ == &_default_groomname_) {
    groomname_ = new ::std::string;
  }
  groomname_->assign(value);
}
inline void PBMarriageInfo::set_groomname(const char* value) {
  _set_bit(0);
  if (groomname_ == &_default_groomname_) {
    groomname_ = new ::std::string;
  }
  groomname_->assign(value);
}
inline void PBMarriageInfo::set_groomname(const char* value, size_t size) {
  _set_bit(0);
  if (groomname_ == &_default_groomname_) {
    groomname_ = new ::std::string;
  }
  groomname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBMarriageInfo::mutable_groomname() {
  _set_bit(0);
  if (groomname_ == &_default_groomname_) {
    groomname_ = new ::std::string;
  }
  return groomname_;
}

// optional string BrideName = 2;
inline bool PBMarriageInfo::has_bridename() const {
  return _has_bit(1);
}
inline void PBMarriageInfo::clear_bridename() {
  if (bridename_ != &_default_bridename_) {
    bridename_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& PBMarriageInfo::bridename() const {
  return *bridename_;
}
inline void PBMarriageInfo::set_bridename(const ::std::string& value) {
  _set_bit(1);
  if (bridename_ == &_default_bridename_) {
    bridename_ = new ::std::string;
  }
  bridename_->assign(value);
}
inline void PBMarriageInfo::set_bridename(const char* value) {
  _set_bit(1);
  if (bridename_ == &_default_bridename_) {
    bridename_ = new ::std::string;
  }
  bridename_->assign(value);
}
inline void PBMarriageInfo::set_bridename(const char* value, size_t size) {
  _set_bit(1);
  if (bridename_ == &_default_bridename_) {
    bridename_ = new ::std::string;
  }
  bridename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBMarriageInfo::mutable_bridename() {
  _set_bit(1);
  if (bridename_ == &_default_bridename_) {
    bridename_ = new ::std::string;
  }
  return bridename_;
}

// optional uint32 WeddingTime = 3;
inline bool PBMarriageInfo::has_weddingtime() const {
  return _has_bit(2);
}
inline void PBMarriageInfo::clear_weddingtime() {
  weddingtime_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 PBMarriageInfo::weddingtime() const {
  return weddingtime_;
}
inline void PBMarriageInfo::set_weddingtime(::google::protobuf::uint32 value) {
  _set_bit(2);
  weddingtime_ = value;
}

// optional uint32 WeddingEndTime = 4;
inline bool PBMarriageInfo::has_weddingendtime() const {
  return _has_bit(3);
}
inline void PBMarriageInfo::clear_weddingendtime() {
  weddingendtime_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 PBMarriageInfo::weddingendtime() const {
  return weddingendtime_;
}
inline void PBMarriageInfo::set_weddingendtime(::google::protobuf::uint32 value) {
  _set_bit(3);
  weddingendtime_ = value;
}

// optional uint32 CommoAllowed = 5;
inline bool PBMarriageInfo::has_commoallowed() const {
  return _has_bit(4);
}
inline void PBMarriageInfo::clear_commoallowed() {
  commoallowed_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 PBMarriageInfo::commoallowed() const {
  return commoallowed_;
}
inline void PBMarriageInfo::set_commoallowed(::google::protobuf::uint32 value) {
  _set_bit(4);
  commoallowed_ = value;
}

// optional uint32 TimeUsed = 6;
inline bool PBMarriageInfo::has_timeused() const {
  return _has_bit(5);
}
inline void PBMarriageInfo::clear_timeused() {
  timeused_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 PBMarriageInfo::timeused() const {
  return timeused_;
}
inline void PBMarriageInfo::set_timeused(::google::protobuf::uint32 value) {
  _set_bit(5);
  timeused_ = value;
}

// optional uint32 TimeID = 7;
inline bool PBMarriageInfo::has_timeid() const {
  return _has_bit(6);
}
inline void PBMarriageInfo::clear_timeid() {
  timeid_ = 0u;
  _clear_bit(6);
}
inline ::google::protobuf::uint32 PBMarriageInfo::timeid() const {
  return timeid_;
}
inline void PBMarriageInfo::set_timeid(::google::protobuf::uint32 value) {
  _set_bit(6);
  timeid_ = value;
}

// -------------------------------------------------------------------

// PBMarriageList

// repeated .PBMarriageInfo MarriageInfo = 1;
inline int PBMarriageList::marriageinfo_size() const {
  return marriageinfo_.size();
}
inline void PBMarriageList::clear_marriageinfo() {
  marriageinfo_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBMarriageInfo >&
PBMarriageList::marriageinfo() const {
  return marriageinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBMarriageInfo >*
PBMarriageList::mutable_marriageinfo() {
  return &marriageinfo_;
}
inline const ::PBMarriageInfo& PBMarriageList::marriageinfo(int index) const {
  return marriageinfo_.Get(index);
}
inline ::PBMarriageInfo* PBMarriageList::mutable_marriageinfo(int index) {
  return marriageinfo_.Mutable(index);
}
inline ::PBMarriageInfo* PBMarriageList::add_marriageinfo() {
  return marriageinfo_.Add();
}

// optional uint32 Year = 2;
inline bool PBMarriageList::has_year() const {
  return _has_bit(1);
}
inline void PBMarriageList::clear_year() {
  year_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 PBMarriageList::year() const {
  return year_;
}
inline void PBMarriageList::set_year(::google::protobuf::uint32 value) {
  _set_bit(1);
  year_ = value;
}

// optional uint32 Month = 3;
inline bool PBMarriageList::has_month() const {
  return _has_bit(2);
}
inline void PBMarriageList::clear_month() {
  month_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 PBMarriageList::month() const {
  return month_;
}
inline void PBMarriageList::set_month(::google::protobuf::uint32 value) {
  _set_bit(2);
  month_ = value;
}

// optional uint32 Day = 4;
inline bool PBMarriageList::has_day() const {
  return _has_bit(3);
}
inline void PBMarriageList::clear_day() {
  day_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 PBMarriageList::day() const {
  return day_;
}
inline void PBMarriageList::set_day(::google::protobuf::uint32 value) {
  _set_bit(3);
  day_ = value;
}

// -------------------------------------------------------------------

// CMessageGetCampMarriageInfoResponse

// optional .PBMarriageList MarriageListA = 1;
inline bool CMessageGetCampMarriageInfoResponse::has_marriagelista() const {
  return _has_bit(0);
}
inline void CMessageGetCampMarriageInfoResponse::clear_marriagelista() {
  if (marriagelista_ != NULL) marriagelista_->::PBMarriageList::Clear();
  _clear_bit(0);
}
inline const ::PBMarriageList& CMessageGetCampMarriageInfoResponse::marriagelista() const {
  return marriagelista_ != NULL ? *marriagelista_ : *default_instance_->marriagelista_;
}
inline ::PBMarriageList* CMessageGetCampMarriageInfoResponse::mutable_marriagelista() {
  _set_bit(0);
  if (marriagelista_ == NULL) marriagelista_ = new ::PBMarriageList;
  return marriagelista_;
}

// optional .PBMarriageList MarriageListB = 2;
inline bool CMessageGetCampMarriageInfoResponse::has_marriagelistb() const {
  return _has_bit(1);
}
inline void CMessageGetCampMarriageInfoResponse::clear_marriagelistb() {
  if (marriagelistb_ != NULL) marriagelistb_->::PBMarriageList::Clear();
  _clear_bit(1);
}
inline const ::PBMarriageList& CMessageGetCampMarriageInfoResponse::marriagelistb() const {
  return marriagelistb_ != NULL ? *marriagelistb_ : *default_instance_->marriagelistb_;
}
inline ::PBMarriageList* CMessageGetCampMarriageInfoResponse::mutable_marriagelistb() {
  _set_bit(1);
  if (marriagelistb_ == NULL) marriagelistb_ = new ::PBMarriageList;
  return marriagelistb_;
}

// optional .PBMarriageList MarriageListC = 3;
inline bool CMessageGetCampMarriageInfoResponse::has_marriagelistc() const {
  return _has_bit(2);
}
inline void CMessageGetCampMarriageInfoResponse::clear_marriagelistc() {
  if (marriagelistc_ != NULL) marriagelistc_->::PBMarriageList::Clear();
  _clear_bit(2);
}
inline const ::PBMarriageList& CMessageGetCampMarriageInfoResponse::marriagelistc() const {
  return marriagelistc_ != NULL ? *marriagelistc_ : *default_instance_->marriagelistc_;
}
inline ::PBMarriageList* CMessageGetCampMarriageInfoResponse::mutable_marriagelistc() {
  _set_bit(2);
  if (marriagelistc_ == NULL) marriagelistc_ = new ::PBMarriageList;
  return marriagelistc_;
}

// -------------------------------------------------------------------

// CMessagePersonMarriedNotify

// optional string GroomName = 1;
inline bool CMessagePersonMarriedNotify::has_groomname() const {
  return _has_bit(0);
}
inline void CMessagePersonMarriedNotify::clear_groomname() {
  if (groomname_ != &_default_groomname_) {
    groomname_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& CMessagePersonMarriedNotify::groomname() const {
  return *groomname_;
}
inline void CMessagePersonMarriedNotify::set_groomname(const ::std::string& value) {
  _set_bit(0);
  if (groomname_ == &_default_groomname_) {
    groomname_ = new ::std::string;
  }
  groomname_->assign(value);
}
inline void CMessagePersonMarriedNotify::set_groomname(const char* value) {
  _set_bit(0);
  if (groomname_ == &_default_groomname_) {
    groomname_ = new ::std::string;
  }
  groomname_->assign(value);
}
inline void CMessagePersonMarriedNotify::set_groomname(const char* value, size_t size) {
  _set_bit(0);
  if (groomname_ == &_default_groomname_) {
    groomname_ = new ::std::string;
  }
  groomname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessagePersonMarriedNotify::mutable_groomname() {
  _set_bit(0);
  if (groomname_ == &_default_groomname_) {
    groomname_ = new ::std::string;
  }
  return groomname_;
}

// optional string BrideName = 2;
inline bool CMessagePersonMarriedNotify::has_bridename() const {
  return _has_bit(1);
}
inline void CMessagePersonMarriedNotify::clear_bridename() {
  if (bridename_ != &_default_bridename_) {
    bridename_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CMessagePersonMarriedNotify::bridename() const {
  return *bridename_;
}
inline void CMessagePersonMarriedNotify::set_bridename(const ::std::string& value) {
  _set_bit(1);
  if (bridename_ == &_default_bridename_) {
    bridename_ = new ::std::string;
  }
  bridename_->assign(value);
}
inline void CMessagePersonMarriedNotify::set_bridename(const char* value) {
  _set_bit(1);
  if (bridename_ == &_default_bridename_) {
    bridename_ = new ::std::string;
  }
  bridename_->assign(value);
}
inline void CMessagePersonMarriedNotify::set_bridename(const char* value, size_t size) {
  _set_bit(1);
  if (bridename_ == &_default_bridename_) {
    bridename_ = new ::std::string;
  }
  bridename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessagePersonMarriedNotify::mutable_bridename() {
  _set_bit(1);
  if (bridename_ == &_default_bridename_) {
    bridename_ = new ::std::string;
  }
  return bridename_;
}

// optional uint32 ServerSequence = 3;
inline bool CMessagePersonMarriedNotify::has_serversequence() const {
  return _has_bit(2);
}
inline void CMessagePersonMarriedNotify::clear_serversequence() {
  serversequence_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessagePersonMarriedNotify::serversequence() const {
  return serversequence_;
}
inline void CMessagePersonMarriedNotify::set_serversequence(::google::protobuf::uint32 value) {
  _set_bit(2);
  serversequence_ = value;
}

// -------------------------------------------------------------------

// CMessagePersonMarriageInfoNotify

// optional string SpouseName = 1;
inline bool CMessagePersonMarriageInfoNotify::has_spousename() const {
  return _has_bit(0);
}
inline void CMessagePersonMarriageInfoNotify::clear_spousename() {
  if (spousename_ != &_default_spousename_) {
    spousename_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& CMessagePersonMarriageInfoNotify::spousename() const {
  return *spousename_;
}
inline void CMessagePersonMarriageInfoNotify::set_spousename(const ::std::string& value) {
  _set_bit(0);
  if (spousename_ == &_default_spousename_) {
    spousename_ = new ::std::string;
  }
  spousename_->assign(value);
}
inline void CMessagePersonMarriageInfoNotify::set_spousename(const char* value) {
  _set_bit(0);
  if (spousename_ == &_default_spousename_) {
    spousename_ = new ::std::string;
  }
  spousename_->assign(value);
}
inline void CMessagePersonMarriageInfoNotify::set_spousename(const char* value, size_t size) {
  _set_bit(0);
  if (spousename_ == &_default_spousename_) {
    spousename_ = new ::std::string;
  }
  spousename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessagePersonMarriageInfoNotify::mutable_spousename() {
  _set_bit(0);
  if (spousename_ == &_default_spousename_) {
    spousename_ = new ::std::string;
  }
  return spousename_;
}

// optional uint32 MarriageStatus = 2;
inline bool CMessagePersonMarriageInfoNotify::has_marriagestatus() const {
  return _has_bit(1);
}
inline void CMessagePersonMarriageInfoNotify::clear_marriagestatus() {
  marriagestatus_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessagePersonMarriageInfoNotify::marriagestatus() const {
  return marriagestatus_;
}
inline void CMessagePersonMarriageInfoNotify::set_marriagestatus(::google::protobuf::uint32 value) {
  _set_bit(1);
  marriagestatus_ = value;
}

// optional uint32 WeddingTime = 3;
inline bool CMessagePersonMarriageInfoNotify::has_weddingtime() const {
  return _has_bit(2);
}
inline void CMessagePersonMarriageInfoNotify::clear_weddingtime() {
  weddingtime_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessagePersonMarriageInfoNotify::weddingtime() const {
  return weddingtime_;
}
inline void CMessagePersonMarriageInfoNotify::set_weddingtime(::google::protobuf::uint32 value) {
  _set_bit(2);
  weddingtime_ = value;
}

// optional uint32 RoleID = 4;
inline bool CMessagePersonMarriageInfoNotify::has_roleid() const {
  return _has_bit(3);
}
inline void CMessagePersonMarriageInfoNotify::clear_roleid() {
  roleid_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessagePersonMarriageInfoNotify::roleid() const {
  return roleid_;
}
inline void CMessagePersonMarriageInfoNotify::set_roleid(::google::protobuf::uint32 value) {
  _set_bit(3);
  roleid_ = value;
}

// -------------------------------------------------------------------

// CMessageSpouseDivorceNotify

// optional .CMessageRouter Router = 1;
inline bool CMessageSpouseDivorceNotify::has_router() const {
  return _has_bit(0);
}
inline void CMessageSpouseDivorceNotify::clear_router() {
  if (router_ != NULL) router_->::CMessageRouter::Clear();
  _clear_bit(0);
}
inline const ::CMessageRouter& CMessageSpouseDivorceNotify::router() const {
  return router_ != NULL ? *router_ : *default_instance_->router_;
}
inline ::CMessageRouter* CMessageSpouseDivorceNotify::mutable_router() {
  _set_bit(0);
  if (router_ == NULL) router_ = new ::CMessageRouter;
  return router_;
}

// -------------------------------------------------------------------

// CMessageUseSysInvitationRequest

// optional uint32 ItemIndex = 1;
inline bool CMessageUseSysInvitationRequest::has_itemindex() const {
  return _has_bit(0);
}
inline void CMessageUseSysInvitationRequest::clear_itemindex() {
  itemindex_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageUseSysInvitationRequest::itemindex() const {
  return itemindex_;
}
inline void CMessageUseSysInvitationRequest::set_itemindex(::google::protobuf::uint32 value) {
  _set_bit(0);
  itemindex_ = value;
}

// optional string ReceivedName = 2;
inline bool CMessageUseSysInvitationRequest::has_receivedname() const {
  return _has_bit(1);
}
inline void CMessageUseSysInvitationRequest::clear_receivedname() {
  if (receivedname_ != &_default_receivedname_) {
    receivedname_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CMessageUseSysInvitationRequest::receivedname() const {
  return *receivedname_;
}
inline void CMessageUseSysInvitationRequest::set_receivedname(const ::std::string& value) {
  _set_bit(1);
  if (receivedname_ == &_default_receivedname_) {
    receivedname_ = new ::std::string;
  }
  receivedname_->assign(value);
}
inline void CMessageUseSysInvitationRequest::set_receivedname(const char* value) {
  _set_bit(1);
  if (receivedname_ == &_default_receivedname_) {
    receivedname_ = new ::std::string;
  }
  receivedname_->assign(value);
}
inline void CMessageUseSysInvitationRequest::set_receivedname(const char* value, size_t size) {
  _set_bit(1);
  if (receivedname_ == &_default_receivedname_) {
    receivedname_ = new ::std::string;
  }
  receivedname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageUseSysInvitationRequest::mutable_receivedname() {
  _set_bit(1);
  if (receivedname_ == &_default_receivedname_) {
    receivedname_ = new ::std::string;
  }
  return receivedname_;
}

// optional uint32 ReceivedID = 3;
inline bool CMessageUseSysInvitationRequest::has_receivedid() const {
  return _has_bit(2);
}
inline void CMessageUseSysInvitationRequest::clear_receivedid() {
  receivedid_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageUseSysInvitationRequest::receivedid() const {
  return receivedid_;
}
inline void CMessageUseSysInvitationRequest::set_receivedid(::google::protobuf::uint32 value) {
  _set_bit(2);
  receivedid_ = value;
}

// -------------------------------------------------------------------

// CMessageUseSysInvitationResponse

// optional uint32 Errcode = 1;
inline bool CMessageUseSysInvitationResponse::has_errcode() const {
  return _has_bit(0);
}
inline void CMessageUseSysInvitationResponse::clear_errcode() {
  errcode_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageUseSysInvitationResponse::errcode() const {
  return errcode_;
}
inline void CMessageUseSysInvitationResponse::set_errcode(::google::protobuf::uint32 value) {
  _set_bit(0);
  errcode_ = value;
}

// -------------------------------------------------------------------

// CMessageTimeToPutKeepsakeNotify

// optional uint32 GroomRoleID = 1;
inline bool CMessageTimeToPutKeepsakeNotify::has_groomroleid() const {
  return _has_bit(0);
}
inline void CMessageTimeToPutKeepsakeNotify::clear_groomroleid() {
  groomroleid_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageTimeToPutKeepsakeNotify::groomroleid() const {
  return groomroleid_;
}
inline void CMessageTimeToPutKeepsakeNotify::set_groomroleid(::google::protobuf::uint32 value) {
  _set_bit(0);
  groomroleid_ = value;
}

// optional uint32 BrideRoleID = 2;
inline bool CMessageTimeToPutKeepsakeNotify::has_brideroleid() const {
  return _has_bit(1);
}
inline void CMessageTimeToPutKeepsakeNotify::clear_brideroleid() {
  brideroleid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageTimeToPutKeepsakeNotify::brideroleid() const {
  return brideroleid_;
}
inline void CMessageTimeToPutKeepsakeNotify::set_brideroleid(::google::protobuf::uint32 value) {
  _set_bit(1);
  brideroleid_ = value;
}

// -------------------------------------------------------------------

// CMessageCancelWeddingRequest

// optional uint32 EntityID = 1;
inline bool CMessageCancelWeddingRequest::has_entityid() const {
  return _has_bit(0);
}
inline void CMessageCancelWeddingRequest::clear_entityid() {
  entityid_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageCancelWeddingRequest::entityid() const {
  return entityid_;
}
inline void CMessageCancelWeddingRequest::set_entityid(::google::protobuf::uint32 value) {
  _set_bit(0);
  entityid_ = value;
}

// -------------------------------------------------------------------

// CMessageCancelWeddingResponse

// optional uint32 Errcode = 2;
inline bool CMessageCancelWeddingResponse::has_errcode() const {
  return _has_bit(0);
}
inline void CMessageCancelWeddingResponse::clear_errcode() {
  errcode_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageCancelWeddingResponse::errcode() const {
  return errcode_;
}
inline void CMessageCancelWeddingResponse::set_errcode(::google::protobuf::uint32 value) {
  _set_bit(0);
  errcode_ = value;
}

// -------------------------------------------------------------------

// CMessageNewlyMarriedNotify

// optional string BrideName = 1;
inline bool CMessageNewlyMarriedNotify::has_bridename() const {
  return _has_bit(0);
}
inline void CMessageNewlyMarriedNotify::clear_bridename() {
  if (bridename_ != &_default_bridename_) {
    bridename_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& CMessageNewlyMarriedNotify::bridename() const {
  return *bridename_;
}
inline void CMessageNewlyMarriedNotify::set_bridename(const ::std::string& value) {
  _set_bit(0);
  if (bridename_ == &_default_bridename_) {
    bridename_ = new ::std::string;
  }
  bridename_->assign(value);
}
inline void CMessageNewlyMarriedNotify::set_bridename(const char* value) {
  _set_bit(0);
  if (bridename_ == &_default_bridename_) {
    bridename_ = new ::std::string;
  }
  bridename_->assign(value);
}
inline void CMessageNewlyMarriedNotify::set_bridename(const char* value, size_t size) {
  _set_bit(0);
  if (bridename_ == &_default_bridename_) {
    bridename_ = new ::std::string;
  }
  bridename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageNewlyMarriedNotify::mutable_bridename() {
  _set_bit(0);
  if (bridename_ == &_default_bridename_) {
    bridename_ = new ::std::string;
  }
  return bridename_;
}

// optional string GroomName = 2;
inline bool CMessageNewlyMarriedNotify::has_groomname() const {
  return _has_bit(1);
}
inline void CMessageNewlyMarriedNotify::clear_groomname() {
  if (groomname_ != &_default_groomname_) {
    groomname_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CMessageNewlyMarriedNotify::groomname() const {
  return *groomname_;
}
inline void CMessageNewlyMarriedNotify::set_groomname(const ::std::string& value) {
  _set_bit(1);
  if (groomname_ == &_default_groomname_) {
    groomname_ = new ::std::string;
  }
  groomname_->assign(value);
}
inline void CMessageNewlyMarriedNotify::set_groomname(const char* value) {
  _set_bit(1);
  if (groomname_ == &_default_groomname_) {
    groomname_ = new ::std::string;
  }
  groomname_->assign(value);
}
inline void CMessageNewlyMarriedNotify::set_groomname(const char* value, size_t size) {
  _set_bit(1);
  if (groomname_ == &_default_groomname_) {
    groomname_ = new ::std::string;
  }
  groomname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageNewlyMarriedNotify::mutable_groomname() {
  _set_bit(1);
  if (groomname_ == &_default_groomname_) {
    groomname_ = new ::std::string;
  }
  return groomname_;
}

// optional uint32 WeddingTime = 3;
inline bool CMessageNewlyMarriedNotify::has_weddingtime() const {
  return _has_bit(2);
}
inline void CMessageNewlyMarriedNotify::clear_weddingtime() {
  weddingtime_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageNewlyMarriedNotify::weddingtime() const {
  return weddingtime_;
}
inline void CMessageNewlyMarriedNotify::set_weddingtime(::google::protobuf::uint32 value) {
  _set_bit(2);
  weddingtime_ = value;
}

// optional uint32 WeddingTimeLength = 4;
inline bool CMessageNewlyMarriedNotify::has_weddingtimelength() const {
  return _has_bit(3);
}
inline void CMessageNewlyMarriedNotify::clear_weddingtimelength() {
  weddingtimelength_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessageNewlyMarriedNotify::weddingtimelength() const {
  return weddingtimelength_;
}
inline void CMessageNewlyMarriedNotify::set_weddingtimelength(::google::protobuf::uint32 value) {
  _set_bit(3);
  weddingtimelength_ = value;
}

// optional uint32 WeddingModule = 5;
inline bool CMessageNewlyMarriedNotify::has_weddingmodule() const {
  return _has_bit(4);
}
inline void CMessageNewlyMarriedNotify::clear_weddingmodule() {
  weddingmodule_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 CMessageNewlyMarriedNotify::weddingmodule() const {
  return weddingmodule_;
}
inline void CMessageNewlyMarriedNotify::set_weddingmodule(::google::protobuf::uint32 value) {
  _set_bit(4);
  weddingmodule_ = value;
}

// optional uint32 CampID = 6;
inline bool CMessageNewlyMarriedNotify::has_campid() const {
  return _has_bit(5);
}
inline void CMessageNewlyMarriedNotify::clear_campid() {
  campid_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 CMessageNewlyMarriedNotify::campid() const {
  return campid_;
}
inline void CMessageNewlyMarriedNotify::set_campid(::google::protobuf::uint32 value) {
  _set_bit(5);
  campid_ = value;
}

// optional uint32 SeverSequence = 7;
inline bool CMessageNewlyMarriedNotify::has_seversequence() const {
  return _has_bit(6);
}
inline void CMessageNewlyMarriedNotify::clear_seversequence() {
  seversequence_ = 0u;
  _clear_bit(6);
}
inline ::google::protobuf::uint32 CMessageNewlyMarriedNotify::seversequence() const {
  return seversequence_;
}
inline void CMessageNewlyMarriedNotify::set_seversequence(::google::protobuf::uint32 value) {
  _set_bit(6);
  seversequence_ = value;
}

// optional uint32 BrideID = 8;
inline bool CMessageNewlyMarriedNotify::has_brideid() const {
  return _has_bit(7);
}
inline void CMessageNewlyMarriedNotify::clear_brideid() {
  brideid_ = 0u;
  _clear_bit(7);
}
inline ::google::protobuf::uint32 CMessageNewlyMarriedNotify::brideid() const {
  return brideid_;
}
inline void CMessageNewlyMarriedNotify::set_brideid(::google::protobuf::uint32 value) {
  _set_bit(7);
  brideid_ = value;
}

// optional uint32 GroomID = 9;
inline bool CMessageNewlyMarriedNotify::has_groomid() const {
  return _has_bit(8);
}
inline void CMessageNewlyMarriedNotify::clear_groomid() {
  groomid_ = 0u;
  _clear_bit(8);
}
inline ::google::protobuf::uint32 CMessageNewlyMarriedNotify::groomid() const {
  return groomid_;
}
inline void CMessageNewlyMarriedNotify::set_groomid(::google::protobuf::uint32 value) {
  _set_bit(8);
  groomid_ = value;
}

// -------------------------------------------------------------------

// CMessageWeddingEndNotify

// -------------------------------------------------------------------

// CMessageStartKeepsakeExchangeRequest

// optional uint32 EntityID = 1;
inline bool CMessageStartKeepsakeExchangeRequest::has_entityid() const {
  return _has_bit(0);
}
inline void CMessageStartKeepsakeExchangeRequest::clear_entityid() {
  entityid_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageStartKeepsakeExchangeRequest::entityid() const {
  return entityid_;
}
inline void CMessageStartKeepsakeExchangeRequest::set_entityid(::google::protobuf::uint32 value) {
  _set_bit(0);
  entityid_ = value;
}

// -------------------------------------------------------------------

// CMessageStartKeepsakeExchangeResponse

// optional uint32 Errcode = 1;
inline bool CMessageStartKeepsakeExchangeResponse::has_errcode() const {
  return _has_bit(0);
}
inline void CMessageStartKeepsakeExchangeResponse::clear_errcode() {
  errcode_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageStartKeepsakeExchangeResponse::errcode() const {
  return errcode_;
}
inline void CMessageStartKeepsakeExchangeResponse::set_errcode(::google::protobuf::uint32 value) {
  _set_bit(0);
  errcode_ = value;
}

// -------------------------------------------------------------------

// CMessageStopKeepsakeExchangeRequest

// -------------------------------------------------------------------

// CMessageStopKeepsakeExchangeResponse

// optional uint32 Errcode = 1;
inline bool CMessageStopKeepsakeExchangeResponse::has_errcode() const {
  return _has_bit(0);
}
inline void CMessageStopKeepsakeExchangeResponse::clear_errcode() {
  errcode_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageStopKeepsakeExchangeResponse::errcode() const {
  return errcode_;
}
inline void CMessageStopKeepsakeExchangeResponse::set_errcode(::google::protobuf::uint32 value) {
  _set_bit(0);
  errcode_ = value;
}

// -------------------------------------------------------------------

// CMessageStopKeepsakeExchangeNotify

// -------------------------------------------------------------------

// CMessageInvitationExchangeRequest

// optional uint32 ItemIndex = 1;
inline bool CMessageInvitationExchangeRequest::has_itemindex() const {
  return _has_bit(0);
}
inline void CMessageInvitationExchangeRequest::clear_itemindex() {
  itemindex_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageInvitationExchangeRequest::itemindex() const {
  return itemindex_;
}
inline void CMessageInvitationExchangeRequest::set_itemindex(::google::protobuf::uint32 value) {
  _set_bit(0);
  itemindex_ = value;
}

// optional uint32 EntityID = 2;
inline bool CMessageInvitationExchangeRequest::has_entityid() const {
  return _has_bit(1);
}
inline void CMessageInvitationExchangeRequest::clear_entityid() {
  entityid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageInvitationExchangeRequest::entityid() const {
  return entityid_;
}
inline void CMessageInvitationExchangeRequest::set_entityid(::google::protobuf::uint32 value) {
  _set_bit(1);
  entityid_ = value;
}

// -------------------------------------------------------------------

// CMessageInvitationExchangeResponse

// optional uint32 Errcode = 1;
inline bool CMessageInvitationExchangeResponse::has_errcode() const {
  return _has_bit(0);
}
inline void CMessageInvitationExchangeResponse::clear_errcode() {
  errcode_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageInvitationExchangeResponse::errcode() const {
  return errcode_;
}
inline void CMessageInvitationExchangeResponse::set_errcode(::google::protobuf::uint32 value) {
  _set_bit(0);
  errcode_ = value;
}

// -------------------------------------------------------------------

// CMessageExchangeResultNotify

// optional uint32 GroomRoleID = 1;
inline bool CMessageExchangeResultNotify::has_groomroleid() const {
  return _has_bit(0);
}
inline void CMessageExchangeResultNotify::clear_groomroleid() {
  groomroleid_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageExchangeResultNotify::groomroleid() const {
  return groomroleid_;
}
inline void CMessageExchangeResultNotify::set_groomroleid(::google::protobuf::uint32 value) {
  _set_bit(0);
  groomroleid_ = value;
}

// optional uint32 BrideRoleID = 2;
inline bool CMessageExchangeResultNotify::has_brideroleid() const {
  return _has_bit(1);
}
inline void CMessageExchangeResultNotify::clear_brideroleid() {
  brideroleid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageExchangeResultNotify::brideroleid() const {
  return brideroleid_;
}
inline void CMessageExchangeResultNotify::set_brideroleid(::google::protobuf::uint32 value) {
  _set_bit(1);
  brideroleid_ = value;
}

// optional uint32 GroomItemID = 3;
inline bool CMessageExchangeResultNotify::has_groomitemid() const {
  return _has_bit(2);
}
inline void CMessageExchangeResultNotify::clear_groomitemid() {
  groomitemid_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageExchangeResultNotify::groomitemid() const {
  return groomitemid_;
}
inline void CMessageExchangeResultNotify::set_groomitemid(::google::protobuf::uint32 value) {
  _set_bit(2);
  groomitemid_ = value;
}

// optional uint32 BrideItemID = 4;
inline bool CMessageExchangeResultNotify::has_brideitemid() const {
  return _has_bit(3);
}
inline void CMessageExchangeResultNotify::clear_brideitemid() {
  brideitemid_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessageExchangeResultNotify::brideitemid() const {
  return brideitemid_;
}
inline void CMessageExchangeResultNotify::set_brideitemid(::google::protobuf::uint32 value) {
  _set_bit(3);
  brideitemid_ = value;
}

// optional string BrideName = 5;
inline bool CMessageExchangeResultNotify::has_bridename() const {
  return _has_bit(4);
}
inline void CMessageExchangeResultNotify::clear_bridename() {
  if (bridename_ != &_default_bridename_) {
    bridename_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& CMessageExchangeResultNotify::bridename() const {
  return *bridename_;
}
inline void CMessageExchangeResultNotify::set_bridename(const ::std::string& value) {
  _set_bit(4);
  if (bridename_ == &_default_bridename_) {
    bridename_ = new ::std::string;
  }
  bridename_->assign(value);
}
inline void CMessageExchangeResultNotify::set_bridename(const char* value) {
  _set_bit(4);
  if (bridename_ == &_default_bridename_) {
    bridename_ = new ::std::string;
  }
  bridename_->assign(value);
}
inline void CMessageExchangeResultNotify::set_bridename(const char* value, size_t size) {
  _set_bit(4);
  if (bridename_ == &_default_bridename_) {
    bridename_ = new ::std::string;
  }
  bridename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageExchangeResultNotify::mutable_bridename() {
  _set_bit(4);
  if (bridename_ == &_default_bridename_) {
    bridename_ = new ::std::string;
  }
  return bridename_;
}

// optional string GroomName = 6;
inline bool CMessageExchangeResultNotify::has_groomname() const {
  return _has_bit(5);
}
inline void CMessageExchangeResultNotify::clear_groomname() {
  if (groomname_ != &_default_groomname_) {
    groomname_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& CMessageExchangeResultNotify::groomname() const {
  return *groomname_;
}
inline void CMessageExchangeResultNotify::set_groomname(const ::std::string& value) {
  _set_bit(5);
  if (groomname_ == &_default_groomname_) {
    groomname_ = new ::std::string;
  }
  groomname_->assign(value);
}
inline void CMessageExchangeResultNotify::set_groomname(const char* value) {
  _set_bit(5);
  if (groomname_ == &_default_groomname_) {
    groomname_ = new ::std::string;
  }
  groomname_->assign(value);
}
inline void CMessageExchangeResultNotify::set_groomname(const char* value, size_t size) {
  _set_bit(5);
  if (groomname_ == &_default_groomname_) {
    groomname_ = new ::std::string;
  }
  groomname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageExchangeResultNotify::mutable_groomname() {
  _set_bit(5);
  if (groomname_ == &_default_groomname_) {
    groomname_ = new ::std::string;
  }
  return groomname_;
}

// -------------------------------------------------------------------

// CMessageTeleToWeddingNpcRequest

// -------------------------------------------------------------------

// CMessageTeleToWeddingNpcResponse

// optional uint32 Errcode = 1;
inline bool CMessageTeleToWeddingNpcResponse::has_errcode() const {
  return _has_bit(0);
}
inline void CMessageTeleToWeddingNpcResponse::clear_errcode() {
  errcode_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageTeleToWeddingNpcResponse::errcode() const {
  return errcode_;
}
inline void CMessageTeleToWeddingNpcResponse::set_errcode(::google::protobuf::uint32 value) {
  _set_bit(0);
  errcode_ = value;
}

// -------------------------------------------------------------------

// CMessageReviewWeddingRequest

// optional uint32 TimeID = 1;
inline bool CMessageReviewWeddingRequest::has_timeid() const {
  return _has_bit(0);
}
inline void CMessageReviewWeddingRequest::clear_timeid() {
  timeid_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageReviewWeddingRequest::timeid() const {
  return timeid_;
}
inline void CMessageReviewWeddingRequest::set_timeid(::google::protobuf::uint32 value) {
  _set_bit(0);
  timeid_ = value;
}

// optional uint32 WeddingModule = 2;
inline bool CMessageReviewWeddingRequest::has_weddingmodule() const {
  return _has_bit(1);
}
inline void CMessageReviewWeddingRequest::clear_weddingmodule() {
  weddingmodule_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageReviewWeddingRequest::weddingmodule() const {
  return weddingmodule_;
}
inline void CMessageReviewWeddingRequest::set_weddingmodule(::google::protobuf::uint32 value) {
  _set_bit(1);
  weddingmodule_ = value;
}

// optional uint32 DayID = 3;
inline bool CMessageReviewWeddingRequest::has_dayid() const {
  return _has_bit(2);
}
inline void CMessageReviewWeddingRequest::clear_dayid() {
  dayid_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageReviewWeddingRequest::dayid() const {
  return dayid_;
}
inline void CMessageReviewWeddingRequest::set_dayid(::google::protobuf::uint32 value) {
  _set_bit(2);
  dayid_ = value;
}

// optional uint32 EntityID = 4;
inline bool CMessageReviewWeddingRequest::has_entityid() const {
  return _has_bit(3);
}
inline void CMessageReviewWeddingRequest::clear_entityid() {
  entityid_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessageReviewWeddingRequest::entityid() const {
  return entityid_;
}
inline void CMessageReviewWeddingRequest::set_entityid(::google::protobuf::uint32 value) {
  _set_bit(3);
  entityid_ = value;
}

// -------------------------------------------------------------------

// CMessageReviewWeddingResponse

// optional uint32 Errcode = 6;
inline bool CMessageReviewWeddingResponse::has_errcode() const {
  return _has_bit(0);
}
inline void CMessageReviewWeddingResponse::clear_errcode() {
  errcode_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageReviewWeddingResponse::errcode() const {
  return errcode_;
}
inline void CMessageReviewWeddingResponse::set_errcode(::google::protobuf::uint32 value) {
  _set_bit(0);
  errcode_ = value;
}

// -------------------------------------------------------------------

// CMessageReviewWeddingNotify

// optional string BrideName = 1;
inline bool CMessageReviewWeddingNotify::has_bridename() const {
  return _has_bit(0);
}
inline void CMessageReviewWeddingNotify::clear_bridename() {
  if (bridename_ != &_default_bridename_) {
    bridename_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& CMessageReviewWeddingNotify::bridename() const {
  return *bridename_;
}
inline void CMessageReviewWeddingNotify::set_bridename(const ::std::string& value) {
  _set_bit(0);
  if (bridename_ == &_default_bridename_) {
    bridename_ = new ::std::string;
  }
  bridename_->assign(value);
}
inline void CMessageReviewWeddingNotify::set_bridename(const char* value) {
  _set_bit(0);
  if (bridename_ == &_default_bridename_) {
    bridename_ = new ::std::string;
  }
  bridename_->assign(value);
}
inline void CMessageReviewWeddingNotify::set_bridename(const char* value, size_t size) {
  _set_bit(0);
  if (bridename_ == &_default_bridename_) {
    bridename_ = new ::std::string;
  }
  bridename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageReviewWeddingNotify::mutable_bridename() {
  _set_bit(0);
  if (bridename_ == &_default_bridename_) {
    bridename_ = new ::std::string;
  }
  return bridename_;
}

// optional string GroomName = 2;
inline bool CMessageReviewWeddingNotify::has_groomname() const {
  return _has_bit(1);
}
inline void CMessageReviewWeddingNotify::clear_groomname() {
  if (groomname_ != &_default_groomname_) {
    groomname_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CMessageReviewWeddingNotify::groomname() const {
  return *groomname_;
}
inline void CMessageReviewWeddingNotify::set_groomname(const ::std::string& value) {
  _set_bit(1);
  if (groomname_ == &_default_groomname_) {
    groomname_ = new ::std::string;
  }
  groomname_->assign(value);
}
inline void CMessageReviewWeddingNotify::set_groomname(const char* value) {
  _set_bit(1);
  if (groomname_ == &_default_groomname_) {
    groomname_ = new ::std::string;
  }
  groomname_->assign(value);
}
inline void CMessageReviewWeddingNotify::set_groomname(const char* value, size_t size) {
  _set_bit(1);
  if (groomname_ == &_default_groomname_) {
    groomname_ = new ::std::string;
  }
  groomname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageReviewWeddingNotify::mutable_groomname() {
  _set_bit(1);
  if (groomname_ == &_default_groomname_) {
    groomname_ = new ::std::string;
  }
  return groomname_;
}

// optional uint32 WeddingTime = 3;
inline bool CMessageReviewWeddingNotify::has_weddingtime() const {
  return _has_bit(2);
}
inline void CMessageReviewWeddingNotify::clear_weddingtime() {
  weddingtime_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageReviewWeddingNotify::weddingtime() const {
  return weddingtime_;
}
inline void CMessageReviewWeddingNotify::set_weddingtime(::google::protobuf::uint32 value) {
  _set_bit(2);
  weddingtime_ = value;
}

// optional uint32 WeddingTimeLength = 4;
inline bool CMessageReviewWeddingNotify::has_weddingtimelength() const {
  return _has_bit(3);
}
inline void CMessageReviewWeddingNotify::clear_weddingtimelength() {
  weddingtimelength_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessageReviewWeddingNotify::weddingtimelength() const {
  return weddingtimelength_;
}
inline void CMessageReviewWeddingNotify::set_weddingtimelength(::google::protobuf::uint32 value) {
  _set_bit(3);
  weddingtimelength_ = value;
}

// optional uint32 WeddingModule = 5;
inline bool CMessageReviewWeddingNotify::has_weddingmodule() const {
  return _has_bit(4);
}
inline void CMessageReviewWeddingNotify::clear_weddingmodule() {
  weddingmodule_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 CMessageReviewWeddingNotify::weddingmodule() const {
  return weddingmodule_;
}
inline void CMessageReviewWeddingNotify::set_weddingmodule(::google::protobuf::uint32 value) {
  _set_bit(4);
  weddingmodule_ = value;
}

// optional uint32 CampID = 6;
inline bool CMessageReviewWeddingNotify::has_campid() const {
  return _has_bit(5);
}
inline void CMessageReviewWeddingNotify::clear_campid() {
  campid_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 CMessageReviewWeddingNotify::campid() const {
  return campid_;
}
inline void CMessageReviewWeddingNotify::set_campid(::google::protobuf::uint32 value) {
  _set_bit(5);
  campid_ = value;
}

// optional uint32 BrideID = 7;
inline bool CMessageReviewWeddingNotify::has_brideid() const {
  return _has_bit(6);
}
inline void CMessageReviewWeddingNotify::clear_brideid() {
  brideid_ = 0u;
  _clear_bit(6);
}
inline ::google::protobuf::uint32 CMessageReviewWeddingNotify::brideid() const {
  return brideid_;
}
inline void CMessageReviewWeddingNotify::set_brideid(::google::protobuf::uint32 value) {
  _set_bit(6);
  brideid_ = value;
}

// optional uint32 GroomID = 8;
inline bool CMessageReviewWeddingNotify::has_groomid() const {
  return _has_bit(7);
}
inline void CMessageReviewWeddingNotify::clear_groomid() {
  groomid_ = 0u;
  _clear_bit(7);
}
inline ::google::protobuf::uint32 CMessageReviewWeddingNotify::groomid() const {
  return groomid_;
}
inline void CMessageReviewWeddingNotify::set_groomid(::google::protobuf::uint32 value) {
  _set_bit(7);
  groomid_ = value;
}

#endif  // PROTOBUF_marriagemessage_5fpb_2ehxx__INCLUDED
