// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "familymessage_pb.hxx.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>
#ifdef LEAK_CHK_DEBUG_NEW
#include "debug_new.h"
#endif

namespace {

const ::google::protobuf::Descriptor* FamilyHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FamilyHead_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCreatFamilyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCreatFamilyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCreatFamilyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCreatFamilyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageInviteMemberRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageInviteMemberRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageInviteMemberResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageInviteMemberResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFamilyInvitedNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFamilyInvitedNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageReplyFamilyInviteRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageReplyFamilyInviteRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageReplyFamilyInviteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageReplyFamilyInviteResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageApplyFamilyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageApplyFamilyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageApplyFamilyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageApplyFamilyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageMemberApplyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageMemberApplyNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageReplyMemberApplyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageReplyMemberApplyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageReplyMemberApplyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageReplyMemberApplyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageApplyFamilySuccessNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageApplyFamilySuccessNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFamilyMemberAddedNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFamilyMemberAddedNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePostAppointRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePostAppointRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePostAppointResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePostAppointResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePostAppointNoify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePostAppointNoify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLeaveFamilyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLeaveFamilyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLeaveFamilyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLeaveFamilyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageMemberLeaveFamilyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageMemberLeaveFamilyNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetFamilyMemberInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetFamilyMemberInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetFamilyMemberInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetFamilyMemberInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetFamilyPropertyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetFamilyPropertyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetFamilyPropertyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetFamilyPropertyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetAllFanmilyInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetAllFanmilyInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetAllFamilyInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetAllFamilyInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetApplyListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetApplyListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetApplyListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetApplyListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageKickPlayerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageKickPlayerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageKickPlayerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageKickPlayerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageKickPlayerNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageKickPlayerNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageDisbandFamilyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageDisbandFamilyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageDisbandFamilyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageDisbandFamilyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageDisbandFamilyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageDisbandFamilyNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeFamilyNoticeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeFamilyNoticeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeFamilyNoticeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeFamilyNoticeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageAppointHeaderRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageAppointHeaderRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageAppointHeaderResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageAppointHeaderResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeHeaderNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeHeaderNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFamilyPropertyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFamilyPropertyNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageInviteFamilyResultNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageInviteFamilyResultNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageClearFamilyApplyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageClearFamilyApplyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageClearFamilyApplyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageClearFamilyApplyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageJoinCorpsNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageJoinCorpsNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCancelFamilyDisbandRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCancelFamilyDisbandRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCancelFamilyDisbandResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCancelFamilyDisbandResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeFamilyNoticeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeFamilyNoticeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRefreshFamilyInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRefreshFamilyInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRefreshFamilyInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRefreshFamilyInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageSetFamilyPostRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageSetFamilyPostRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageSetFamilyPostResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageSetFamilyPostResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLevelUPFamilyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLevelUPFamilyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLevelUPFamilyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLevelUPFamilyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageContributeFamilyMoneyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageContributeFamilyMoneyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageContributeFamilyMoneyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageContributeFamilyMoneyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageObtainFamilyMoneyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageObtainFamilyMoneyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageObtainFamilyMoneyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageObtainFamilyMoneyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageSetFamilyPostNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageSetFamilyPostNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLevelUPFamilyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLevelUPFamilyNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFamilyBidNpcRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFamilyBidNpcRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFamilyBidNpcResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFamilyBidNpcResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageMemberSubmitNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageMemberSubmitNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageMemberSubmitRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageMemberSubmitRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageMemberSubmitResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageMemberSubmitResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageAbortNpcRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageAbortNpcRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageAbortNpcResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageAbortNpcResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBidInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBidInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBidInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBidInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFamilySubmitNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFamilySubmitNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBattleResultNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBattleResultNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFamilyPVPStarLevelUPNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFamilyPVPStarLevelUPNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageMakeRoomRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageMakeRoomRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageMakeRoomResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageMakeRoomResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChaRoomRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChaRoomRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChaRoomResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChaRoomResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageAgreeBattleRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageAgreeBattleRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageAgreeBattleResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageAgreeBattleResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageQueryAllRoomRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageQueryAllRoomRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllRoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllRoomInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageQueryAllRoomResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageQueryAllRoomResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageQueryMyRoomRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageQueryMyRoomRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MyRoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MyRoomInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageQueryMyRoomResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageQueryMyRoomResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageQueryMyChaRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageQueryMyChaRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MyChaInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MyChaInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageQueryMyChaResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageQueryMyChaResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageAbortRoomRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageAbortRoomRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageAbortRoomResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageAbortRoomResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageAbortChaRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageAbortChaRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageAbortChaResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageAbortChaResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageContributeFamilyMoneyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageContributeFamilyMoneyNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFamilyMoneyChangedNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFamilyMoneyChangedNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUseFamilyExpCardNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUseFamilyExpCardNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageStartFamilyBossRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageStartFamilyBossRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageMakeRoomNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageMakeRoomNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageStartFamilyBossResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageStartFamilyBossResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageEnterBossReptionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageEnterBossReptionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageEnterBossReptionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageEnterBossReptionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageAbortRoomNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageAbortRoomNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChaRoomNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChaRoomNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageAbortChaNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageAbortChaNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFamilyGloryChangedNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFamilyGloryChangedNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageMemberContributeChangedNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageMemberContributeChangedNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageQueryNpcWelfareRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageQueryNpcWelfareRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageQueryNpcWelfareResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageQueryNpcWelfareResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetFamilyMoneyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetFamilyMoneyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetFamilyMoneyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetFamilyMoneyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageAbortNpcNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageAbortNpcNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePreBattleNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePreBattleNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetExpCardRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetExpCardRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetExpCardResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetExpCardResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFamilyCanLevelUPNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFamilyCanLevelUPNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFamilyRepetionScoreNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFamilyRepetionScoreNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GoodItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GoodItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetFamilyGoodsListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetFamilyGoodsListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetFamilyGoodsListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetFamilyGoodsListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetFamilyExchangeGoodsListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetFamilyExchangeGoodsListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetFamilyExchangeGoodsListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetFamilyExchangeGoodsListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeFamilyGoodsListNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeFamilyGoodsListNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeFamilyExchangeGoodsListNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeFamilyExchangeGoodsListNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUseFamilyLeagueItemNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUseFamilyLeagueItemNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetHomeInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetHomeInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetHomeInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetHomeInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUpgradeHomeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUpgradeHomeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUpgradeHomeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUpgradeHomeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFamilyStabilityChangedNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFamilyStabilityChangedNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FamilyMessageID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_familymessage_5fpb_2ehxx() {
  protobuf_AddDesc_familymessage_5fpb_2ehxx();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "familymessage_pb.hxx");
  GOOGLE_CHECK(file != NULL);
  FamilyHead_descriptor_ = file->message_type(0);
  static const int FamilyHead_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyHead, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyHead, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyHead, entityid_),
  };
  FamilyHead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FamilyHead_descriptor_,
      FamilyHead::default_instance_,
      FamilyHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyHead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyHead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FamilyHead));
  CMessageCreatFamilyRequest_descriptor_ = file->message_type(1);
  static const int CMessageCreatFamilyRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreatFamilyRequest, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreatFamilyRequest, familyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreatFamilyRequest, npcentityid_),
  };
  CMessageCreatFamilyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCreatFamilyRequest_descriptor_,
      CMessageCreatFamilyRequest::default_instance_,
      CMessageCreatFamilyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreatFamilyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreatFamilyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCreatFamilyRequest));
  CMessageCreatFamilyResponse_descriptor_ = file->message_type(2);
  static const int CMessageCreatFamilyResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreatFamilyResponse, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreatFamilyResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreatFamilyResponse, familyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreatFamilyResponse, familyname_),
  };
  CMessageCreatFamilyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCreatFamilyResponse_descriptor_,
      CMessageCreatFamilyResponse::default_instance_,
      CMessageCreatFamilyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreatFamilyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreatFamilyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCreatFamilyResponse));
  CMessageInviteMemberRequest_descriptor_ = file->message_type(3);
  static const int CMessageInviteMemberRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteMemberRequest, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteMemberRequest, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteMemberRequest, rolename_),
  };
  CMessageInviteMemberRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageInviteMemberRequest_descriptor_,
      CMessageInviteMemberRequest::default_instance_,
      CMessageInviteMemberRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteMemberRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteMemberRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageInviteMemberRequest));
  CMessageInviteMemberResponse_descriptor_ = file->message_type(4);
  static const int CMessageInviteMemberResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteMemberResponse, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteMemberResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteMemberResponse, rolename_),
  };
  CMessageInviteMemberResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageInviteMemberResponse_descriptor_,
      CMessageInviteMemberResponse::default_instance_,
      CMessageInviteMemberResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteMemberResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteMemberResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageInviteMemberResponse));
  CMessageFamilyInvitedNotify_descriptor_ = file->message_type(5);
  static const int CMessageFamilyInvitedNotify_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyInvitedNotify, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyInvitedNotify, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyInvitedNotify, familtyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyInvitedNotify, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyInvitedNotify, familyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyInvitedNotify, familylevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyInvitedNotify, membernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyInvitedNotify, corpsname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyInvitedNotify, glory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyInvitedNotify, starlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyInvitedNotify, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyInvitedNotify, familyheadername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyInvitedNotify, unionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyInvitedNotify, unionname_),
  };
  CMessageFamilyInvitedNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFamilyInvitedNotify_descriptor_,
      CMessageFamilyInvitedNotify::default_instance_,
      CMessageFamilyInvitedNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyInvitedNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyInvitedNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFamilyInvitedNotify));
  CMessageReplyFamilyInviteRequest_descriptor_ = file->message_type(6);
  static const int CMessageReplyFamilyInviteRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyFamilyInviteRequest, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyFamilyInviteRequest, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyFamilyInviteRequest, familyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyFamilyInviteRequest, invitingroleid_),
  };
  CMessageReplyFamilyInviteRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageReplyFamilyInviteRequest_descriptor_,
      CMessageReplyFamilyInviteRequest::default_instance_,
      CMessageReplyFamilyInviteRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyFamilyInviteRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyFamilyInviteRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageReplyFamilyInviteRequest));
  CMessageReplyFamilyInviteResponse_descriptor_ = file->message_type(7);
  static const int CMessageReplyFamilyInviteResponse_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyFamilyInviteResponse, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyFamilyInviteResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyFamilyInviteResponse, familyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyFamilyInviteResponse, familyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyFamilyInviteResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyFamilyInviteResponse, corpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyFamilyInviteResponse, corpsname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyFamilyInviteResponse, familyheaderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyFamilyInviteResponse, corpsheaderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyFamilyInviteResponse, unionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyFamilyInviteResponse, unionname_),
  };
  CMessageReplyFamilyInviteResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageReplyFamilyInviteResponse_descriptor_,
      CMessageReplyFamilyInviteResponse::default_instance_,
      CMessageReplyFamilyInviteResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyFamilyInviteResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyFamilyInviteResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageReplyFamilyInviteResponse));
  CMessageApplyFamilyRequest_descriptor_ = file->message_type(8);
  static const int CMessageApplyFamilyRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyFamilyRequest, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyFamilyRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyFamilyRequest, familyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyFamilyRequest, familyname_),
  };
  CMessageApplyFamilyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageApplyFamilyRequest_descriptor_,
      CMessageApplyFamilyRequest::default_instance_,
      CMessageApplyFamilyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyFamilyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyFamilyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageApplyFamilyRequest));
  CMessageApplyFamilyResponse_descriptor_ = file->message_type(9);
  static const int CMessageApplyFamilyResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyFamilyResponse, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyFamilyResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyFamilyResponse, familyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyFamilyResponse, familyid_),
  };
  CMessageApplyFamilyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageApplyFamilyResponse_descriptor_,
      CMessageApplyFamilyResponse::default_instance_,
      CMessageApplyFamilyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyFamilyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyFamilyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageApplyFamilyResponse));
  CMessageMemberApplyNotify_descriptor_ = file->message_type(10);
  static const int CMessageMemberApplyNotify_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMemberApplyNotify, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMemberApplyNotify, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMemberApplyNotify, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMemberApplyNotify, rolelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMemberApplyNotify, rolemetier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMemberApplyNotify, facetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMemberApplyNotify, rolesex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMemberApplyNotify, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMemberApplyNotify, mapid_),
  };
  CMessageMemberApplyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageMemberApplyNotify_descriptor_,
      CMessageMemberApplyNotify::default_instance_,
      CMessageMemberApplyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMemberApplyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMemberApplyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageMemberApplyNotify));
  CMessageReplyMemberApplyRequest_descriptor_ = file->message_type(11);
  static const int CMessageReplyMemberApplyRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyMemberApplyRequest, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyMemberApplyRequest, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyMemberApplyRequest, roleid_),
  };
  CMessageReplyMemberApplyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageReplyMemberApplyRequest_descriptor_,
      CMessageReplyMemberApplyRequest::default_instance_,
      CMessageReplyMemberApplyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyMemberApplyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyMemberApplyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageReplyMemberApplyRequest));
  CMessageReplyMemberApplyResponse_descriptor_ = file->message_type(12);
  static const int CMessageReplyMemberApplyResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyMemberApplyResponse, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyMemberApplyResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyMemberApplyResponse, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyMemberApplyResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyMemberApplyResponse, result_),
  };
  CMessageReplyMemberApplyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageReplyMemberApplyResponse_descriptor_,
      CMessageReplyMemberApplyResponse::default_instance_,
      CMessageReplyMemberApplyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyMemberApplyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyMemberApplyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageReplyMemberApplyResponse));
  CMessageApplyFamilySuccessNotify_descriptor_ = file->message_type(13);
  static const int CMessageApplyFamilySuccessNotify_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyFamilySuccessNotify, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyFamilySuccessNotify, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyFamilySuccessNotify, familyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyFamilySuccessNotify, familyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyFamilySuccessNotify, corpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyFamilySuccessNotify, corpsname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyFamilySuccessNotify, familyheader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyFamilySuccessNotify, corpsheader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyFamilySuccessNotify, unionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyFamilySuccessNotify, unionname_),
  };
  CMessageApplyFamilySuccessNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageApplyFamilySuccessNotify_descriptor_,
      CMessageApplyFamilySuccessNotify::default_instance_,
      CMessageApplyFamilySuccessNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyFamilySuccessNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyFamilySuccessNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageApplyFamilySuccessNotify));
  CMessageFamilyMemberAddedNotify_descriptor_ = file->message_type(14);
  static const int CMessageFamilyMemberAddedNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyMemberAddedNotify, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyMemberAddedNotify, managername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyMemberAddedNotify, roleinfo_),
  };
  CMessageFamilyMemberAddedNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFamilyMemberAddedNotify_descriptor_,
      CMessageFamilyMemberAddedNotify::default_instance_,
      CMessageFamilyMemberAddedNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyMemberAddedNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyMemberAddedNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFamilyMemberAddedNotify));
  CMessagePostAppointRequest_descriptor_ = file->message_type(15);
  static const int CMessagePostAppointRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePostAppointRequest, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePostAppointRequest, playercharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePostAppointRequest, actionkind_),
  };
  CMessagePostAppointRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePostAppointRequest_descriptor_,
      CMessagePostAppointRequest::default_instance_,
      CMessagePostAppointRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePostAppointRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePostAppointRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePostAppointRequest));
  CMessagePostAppointResponse_descriptor_ = file->message_type(16);
  static const int CMessagePostAppointResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePostAppointResponse, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePostAppointResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePostAppointResponse, playercharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePostAppointResponse, actionkind_),
  };
  CMessagePostAppointResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePostAppointResponse_descriptor_,
      CMessagePostAppointResponse::default_instance_,
      CMessagePostAppointResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePostAppointResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePostAppointResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePostAppointResponse));
  CMessagePostAppointNoify_descriptor_ = file->message_type(17);
  static const int CMessagePostAppointNoify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePostAppointNoify, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePostAppointNoify, playercharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePostAppointNoify, actionkind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePostAppointNoify, managername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePostAppointNoify, playername_),
  };
  CMessagePostAppointNoify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePostAppointNoify_descriptor_,
      CMessagePostAppointNoify::default_instance_,
      CMessagePostAppointNoify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePostAppointNoify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePostAppointNoify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePostAppointNoify));
  CMessageLeaveFamilyRequest_descriptor_ = file->message_type(18);
  static const int CMessageLeaveFamilyRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLeaveFamilyRequest, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLeaveFamilyRequest, msgcode_),
  };
  CMessageLeaveFamilyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLeaveFamilyRequest_descriptor_,
      CMessageLeaveFamilyRequest::default_instance_,
      CMessageLeaveFamilyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLeaveFamilyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLeaveFamilyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLeaveFamilyRequest));
  CMessageLeaveFamilyResponse_descriptor_ = file->message_type(19);
  static const int CMessageLeaveFamilyResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLeaveFamilyResponse, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLeaveFamilyResponse, errcode_),
  };
  CMessageLeaveFamilyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLeaveFamilyResponse_descriptor_,
      CMessageLeaveFamilyResponse::default_instance_,
      CMessageLeaveFamilyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLeaveFamilyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLeaveFamilyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLeaveFamilyResponse));
  CMessageMemberLeaveFamilyNotify_descriptor_ = file->message_type(20);
  static const int CMessageMemberLeaveFamilyNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMemberLeaveFamilyNotify, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMemberLeaveFamilyNotify, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMemberLeaveFamilyNotify, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMemberLeaveFamilyNotify, playerlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMemberLeaveFamilyNotify, playerpost_),
  };
  CMessageMemberLeaveFamilyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageMemberLeaveFamilyNotify_descriptor_,
      CMessageMemberLeaveFamilyNotify::default_instance_,
      CMessageMemberLeaveFamilyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMemberLeaveFamilyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMemberLeaveFamilyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageMemberLeaveFamilyNotify));
  CMessageGetFamilyMemberInfoRequest_descriptor_ = file->message_type(21);
  static const int CMessageGetFamilyMemberInfoRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyMemberInfoRequest, headmsg_),
  };
  CMessageGetFamilyMemberInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetFamilyMemberInfoRequest_descriptor_,
      CMessageGetFamilyMemberInfoRequest::default_instance_,
      CMessageGetFamilyMemberInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyMemberInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyMemberInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetFamilyMemberInfoRequest));
  CMessageGetFamilyMemberInfoResponse_descriptor_ = file->message_type(22);
  static const int CMessageGetFamilyMemberInfoResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyMemberInfoResponse, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyMemberInfoResponse, memberinfo_),
  };
  CMessageGetFamilyMemberInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetFamilyMemberInfoResponse_descriptor_,
      CMessageGetFamilyMemberInfoResponse::default_instance_,
      CMessageGetFamilyMemberInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyMemberInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyMemberInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetFamilyMemberInfoResponse));
  CMessageGetFamilyPropertyRequest_descriptor_ = file->message_type(23);
  static const int CMessageGetFamilyPropertyRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyPropertyRequest, headmsg_),
  };
  CMessageGetFamilyPropertyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetFamilyPropertyRequest_descriptor_,
      CMessageGetFamilyPropertyRequest::default_instance_,
      CMessageGetFamilyPropertyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyPropertyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyPropertyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetFamilyPropertyRequest));
  CMessageGetFamilyPropertyResponse_descriptor_ = file->message_type(24);
  static const int CMessageGetFamilyPropertyResponse_offsets_[32] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyPropertyResponse, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyPropertyResponse, familynotice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyPropertyResponse, familynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyPropertyResponse, familylevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyPropertyResponse, familymoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyPropertyResponse, familyheaderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyPropertyResponse, familyheadername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyPropertyResponse, familyglory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyPropertyResponse, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyPropertyResponse, bidmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyPropertyResponse, bidtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyPropertyResponse, warnpcstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyPropertyResponse, warrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyPropertyResponse, warwinnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyPropertyResponse, warlostnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyPropertyResponse, familystarlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyPropertyResponse, warexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyPropertyResponse, warmaxexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyPropertyResponse, enemyfamilyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyPropertyResponse, warstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyPropertyResponse, challengestatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyPropertyResponse, challengemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyPropertyResponse, challengestarted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyPropertyResponse, challengereceived_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyPropertyResponse, maxfamilymembernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyPropertyResponse, canlevelup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyPropertyResponse, maxpresternum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyPropertyResponse, glorylimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyPropertyResponse, levelmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyPropertyResponse, stability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyPropertyResponse, reducestability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyPropertyResponse, extraredstonexp_),
  };
  CMessageGetFamilyPropertyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetFamilyPropertyResponse_descriptor_,
      CMessageGetFamilyPropertyResponse::default_instance_,
      CMessageGetFamilyPropertyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyPropertyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyPropertyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetFamilyPropertyResponse));
  CMessageGetAllFanmilyInfoRequest_descriptor_ = file->message_type(25);
  static const int CMessageGetAllFanmilyInfoRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetAllFanmilyInfoRequest, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetAllFanmilyInfoRequest, curpage_),
  };
  CMessageGetAllFanmilyInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetAllFanmilyInfoRequest_descriptor_,
      CMessageGetAllFanmilyInfoRequest::default_instance_,
      CMessageGetAllFanmilyInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetAllFanmilyInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetAllFanmilyInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetAllFanmilyInfoRequest));
  CMessageGetAllFamilyInfoResponse_descriptor_ = file->message_type(26);
  static const int CMessageGetAllFamilyInfoResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetAllFamilyInfoResponse, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetAllFamilyInfoResponse, familyinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetAllFamilyInfoResponse, curpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetAllFamilyInfoResponse, totalpage_),
  };
  CMessageGetAllFamilyInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetAllFamilyInfoResponse_descriptor_,
      CMessageGetAllFamilyInfoResponse::default_instance_,
      CMessageGetAllFamilyInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetAllFamilyInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetAllFamilyInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetAllFamilyInfoResponse));
  CMessageGetApplyListRequest_descriptor_ = file->message_type(27);
  static const int CMessageGetApplyListRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetApplyListRequest, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetApplyListRequest, familyid_),
  };
  CMessageGetApplyListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetApplyListRequest_descriptor_,
      CMessageGetApplyListRequest::default_instance_,
      CMessageGetApplyListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetApplyListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetApplyListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetApplyListRequest));
  CMessageGetApplyListResponse_descriptor_ = file->message_type(28);
  static const int CMessageGetApplyListResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetApplyListResponse, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetApplyListResponse, applylist_),
  };
  CMessageGetApplyListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetApplyListResponse_descriptor_,
      CMessageGetApplyListResponse::default_instance_,
      CMessageGetApplyListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetApplyListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetApplyListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetApplyListResponse));
  CMessageKickPlayerRequest_descriptor_ = file->message_type(29);
  static const int CMessageKickPlayerRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickPlayerRequest, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickPlayerRequest, playercharid_),
  };
  CMessageKickPlayerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageKickPlayerRequest_descriptor_,
      CMessageKickPlayerRequest::default_instance_,
      CMessageKickPlayerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickPlayerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickPlayerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageKickPlayerRequest));
  CMessageKickPlayerResponse_descriptor_ = file->message_type(30);
  static const int CMessageKickPlayerResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickPlayerResponse, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickPlayerResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickPlayerResponse, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickPlayerResponse, playercharid_),
  };
  CMessageKickPlayerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageKickPlayerResponse_descriptor_,
      CMessageKickPlayerResponse::default_instance_,
      CMessageKickPlayerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickPlayerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickPlayerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageKickPlayerResponse));
  CMessageKickPlayerNotify_descriptor_ = file->message_type(31);
  static const int CMessageKickPlayerNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickPlayerNotify, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickPlayerNotify, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickPlayerNotify, playercharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickPlayerNotify, managername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickPlayerNotify, managercharid_),
  };
  CMessageKickPlayerNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageKickPlayerNotify_descriptor_,
      CMessageKickPlayerNotify::default_instance_,
      CMessageKickPlayerNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickPlayerNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickPlayerNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageKickPlayerNotify));
  CMessageDisbandFamilyRequest_descriptor_ = file->message_type(32);
  static const int CMessageDisbandFamilyRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDisbandFamilyRequest, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDisbandFamilyRequest, msgcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDisbandFamilyRequest, npcentityid_),
  };
  CMessageDisbandFamilyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageDisbandFamilyRequest_descriptor_,
      CMessageDisbandFamilyRequest::default_instance_,
      CMessageDisbandFamilyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDisbandFamilyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDisbandFamilyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageDisbandFamilyRequest));
  CMessageDisbandFamilyResponse_descriptor_ = file->message_type(33);
  static const int CMessageDisbandFamilyResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDisbandFamilyResponse, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDisbandFamilyResponse, errcode_),
  };
  CMessageDisbandFamilyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageDisbandFamilyResponse_descriptor_,
      CMessageDisbandFamilyResponse::default_instance_,
      CMessageDisbandFamilyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDisbandFamilyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDisbandFamilyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageDisbandFamilyResponse));
  CMessageDisbandFamilyNotify_descriptor_ = file->message_type(34);
  static const int CMessageDisbandFamilyNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDisbandFamilyNotify, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDisbandFamilyNotify, managercharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDisbandFamilyNotify, familyid_),
  };
  CMessageDisbandFamilyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageDisbandFamilyNotify_descriptor_,
      CMessageDisbandFamilyNotify::default_instance_,
      CMessageDisbandFamilyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDisbandFamilyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDisbandFamilyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageDisbandFamilyNotify));
  CMessageChangeFamilyNoticeRequest_descriptor_ = file->message_type(35);
  static const int CMessageChangeFamilyNoticeRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyNoticeRequest, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyNoticeRequest, notice_),
  };
  CMessageChangeFamilyNoticeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeFamilyNoticeRequest_descriptor_,
      CMessageChangeFamilyNoticeRequest::default_instance_,
      CMessageChangeFamilyNoticeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyNoticeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyNoticeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeFamilyNoticeRequest));
  CMessageChangeFamilyNoticeResponse_descriptor_ = file->message_type(36);
  static const int CMessageChangeFamilyNoticeResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyNoticeResponse, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyNoticeResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyNoticeResponse, notice_),
  };
  CMessageChangeFamilyNoticeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeFamilyNoticeResponse_descriptor_,
      CMessageChangeFamilyNoticeResponse::default_instance_,
      CMessageChangeFamilyNoticeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyNoticeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyNoticeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeFamilyNoticeResponse));
  CMessageAppointHeaderRequest_descriptor_ = file->message_type(37);
  static const int CMessageAppointHeaderRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAppointHeaderRequest, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAppointHeaderRequest, playercharid_),
  };
  CMessageAppointHeaderRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageAppointHeaderRequest_descriptor_,
      CMessageAppointHeaderRequest::default_instance_,
      CMessageAppointHeaderRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAppointHeaderRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAppointHeaderRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageAppointHeaderRequest));
  CMessageAppointHeaderResponse_descriptor_ = file->message_type(38);
  static const int CMessageAppointHeaderResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAppointHeaderResponse, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAppointHeaderResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAppointHeaderResponse, playercharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAppointHeaderResponse, playername_),
  };
  CMessageAppointHeaderResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageAppointHeaderResponse_descriptor_,
      CMessageAppointHeaderResponse::default_instance_,
      CMessageAppointHeaderResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAppointHeaderResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAppointHeaderResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageAppointHeaderResponse));
  CMessageChangeHeaderNotify_descriptor_ = file->message_type(39);
  static const int CMessageChangeHeaderNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeHeaderNotify, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeHeaderNotify, playercharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeHeaderNotify, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeHeaderNotify, managerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeHeaderNotify, managername_),
  };
  CMessageChangeHeaderNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeHeaderNotify_descriptor_,
      CMessageChangeHeaderNotify::default_instance_,
      CMessageChangeHeaderNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeHeaderNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeHeaderNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeHeaderNotify));
  CMessageFamilyPropertyNotify_descriptor_ = file->message_type(40);
  static const int CMessageFamilyPropertyNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyPropertyNotify, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyPropertyNotify, property_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyPropertyNotify, familylevel_),
  };
  CMessageFamilyPropertyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFamilyPropertyNotify_descriptor_,
      CMessageFamilyPropertyNotify::default_instance_,
      CMessageFamilyPropertyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyPropertyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyPropertyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFamilyPropertyNotify));
  CMessageInviteFamilyResultNotify_descriptor_ = file->message_type(41);
  static const int CMessageInviteFamilyResultNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteFamilyResultNotify, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteFamilyResultNotify, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteFamilyResultNotify, rolename_),
  };
  CMessageInviteFamilyResultNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageInviteFamilyResultNotify_descriptor_,
      CMessageInviteFamilyResultNotify::default_instance_,
      CMessageInviteFamilyResultNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteFamilyResultNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteFamilyResultNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageInviteFamilyResultNotify));
  CMessageClearFamilyApplyRequest_descriptor_ = file->message_type(42);
  static const int CMessageClearFamilyApplyRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageClearFamilyApplyRequest, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageClearFamilyApplyRequest, msgcode_),
  };
  CMessageClearFamilyApplyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageClearFamilyApplyRequest_descriptor_,
      CMessageClearFamilyApplyRequest::default_instance_,
      CMessageClearFamilyApplyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageClearFamilyApplyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageClearFamilyApplyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageClearFamilyApplyRequest));
  CMessageClearFamilyApplyResponse_descriptor_ = file->message_type(43);
  static const int CMessageClearFamilyApplyResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageClearFamilyApplyResponse, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageClearFamilyApplyResponse, errcode_),
  };
  CMessageClearFamilyApplyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageClearFamilyApplyResponse_descriptor_,
      CMessageClearFamilyApplyResponse::default_instance_,
      CMessageClearFamilyApplyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageClearFamilyApplyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageClearFamilyApplyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageClearFamilyApplyResponse));
  CMessageJoinCorpsNotify_descriptor_ = file->message_type(44);
  static const int CMessageJoinCorpsNotify_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJoinCorpsNotify, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJoinCorpsNotify, corpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJoinCorpsNotify, corpsname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJoinCorpsNotify, joinmethod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJoinCorpsNotify, unionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJoinCorpsNotify, unionname_),
  };
  CMessageJoinCorpsNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageJoinCorpsNotify_descriptor_,
      CMessageJoinCorpsNotify::default_instance_,
      CMessageJoinCorpsNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJoinCorpsNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJoinCorpsNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageJoinCorpsNotify));
  CMessageCancelFamilyDisbandRequest_descriptor_ = file->message_type(45);
  static const int CMessageCancelFamilyDisbandRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCancelFamilyDisbandRequest, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCancelFamilyDisbandRequest, npcentityid_),
  };
  CMessageCancelFamilyDisbandRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCancelFamilyDisbandRequest_descriptor_,
      CMessageCancelFamilyDisbandRequest::default_instance_,
      CMessageCancelFamilyDisbandRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCancelFamilyDisbandRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCancelFamilyDisbandRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCancelFamilyDisbandRequest));
  CMessageCancelFamilyDisbandResponse_descriptor_ = file->message_type(46);
  static const int CMessageCancelFamilyDisbandResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCancelFamilyDisbandResponse, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCancelFamilyDisbandResponse, errcode_),
  };
  CMessageCancelFamilyDisbandResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCancelFamilyDisbandResponse_descriptor_,
      CMessageCancelFamilyDisbandResponse::default_instance_,
      CMessageCancelFamilyDisbandResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCancelFamilyDisbandResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCancelFamilyDisbandResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCancelFamilyDisbandResponse));
  CMessageChangeFamilyNoticeNotify_descriptor_ = file->message_type(47);
  static const int CMessageChangeFamilyNoticeNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyNoticeNotify, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyNoticeNotify, notice_),
  };
  CMessageChangeFamilyNoticeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeFamilyNoticeNotify_descriptor_,
      CMessageChangeFamilyNoticeNotify::default_instance_,
      CMessageChangeFamilyNoticeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyNoticeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyNoticeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeFamilyNoticeNotify));
  CMessageRefreshFamilyInfoRequest_descriptor_ = file->message_type(48);
  static const int CMessageRefreshFamilyInfoRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRefreshFamilyInfoRequest, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRefreshFamilyInfoRequest, msgcode_),
  };
  CMessageRefreshFamilyInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRefreshFamilyInfoRequest_descriptor_,
      CMessageRefreshFamilyInfoRequest::default_instance_,
      CMessageRefreshFamilyInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRefreshFamilyInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRefreshFamilyInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRefreshFamilyInfoRequest));
  CMessageRefreshFamilyInfoResponse_descriptor_ = file->message_type(49);
  static const int CMessageRefreshFamilyInfoResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRefreshFamilyInfoResponse, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRefreshFamilyInfoResponse, memberlist_),
  };
  CMessageRefreshFamilyInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRefreshFamilyInfoResponse_descriptor_,
      CMessageRefreshFamilyInfoResponse::default_instance_,
      CMessageRefreshFamilyInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRefreshFamilyInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRefreshFamilyInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRefreshFamilyInfoResponse));
  CMessageSetFamilyPostRequest_descriptor_ = file->message_type(50);
  static const int CMessageSetFamilyPostRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetFamilyPostRequest, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetFamilyPostRequest, memberid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetFamilyPostRequest, post_),
  };
  CMessageSetFamilyPostRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageSetFamilyPostRequest_descriptor_,
      CMessageSetFamilyPostRequest::default_instance_,
      CMessageSetFamilyPostRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetFamilyPostRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetFamilyPostRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageSetFamilyPostRequest));
  CMessageSetFamilyPostResponse_descriptor_ = file->message_type(51);
  static const int CMessageSetFamilyPostResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetFamilyPostResponse, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetFamilyPostResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetFamilyPostResponse, memberid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetFamilyPostResponse, post_),
  };
  CMessageSetFamilyPostResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageSetFamilyPostResponse_descriptor_,
      CMessageSetFamilyPostResponse::default_instance_,
      CMessageSetFamilyPostResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetFamilyPostResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetFamilyPostResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageSetFamilyPostResponse));
  CMessageLevelUPFamilyRequest_descriptor_ = file->message_type(52);
  static const int CMessageLevelUPFamilyRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLevelUPFamilyRequest, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLevelUPFamilyRequest, msgcode_),
  };
  CMessageLevelUPFamilyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLevelUPFamilyRequest_descriptor_,
      CMessageLevelUPFamilyRequest::default_instance_,
      CMessageLevelUPFamilyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLevelUPFamilyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLevelUPFamilyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLevelUPFamilyRequest));
  CMessageLevelUPFamilyResponse_descriptor_ = file->message_type(53);
  static const int CMessageLevelUPFamilyResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLevelUPFamilyResponse, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLevelUPFamilyResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLevelUPFamilyResponse, level_),
  };
  CMessageLevelUPFamilyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLevelUPFamilyResponse_descriptor_,
      CMessageLevelUPFamilyResponse::default_instance_,
      CMessageLevelUPFamilyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLevelUPFamilyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLevelUPFamilyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLevelUPFamilyResponse));
  CMessageContributeFamilyMoneyRequest_descriptor_ = file->message_type(54);
  static const int CMessageContributeFamilyMoneyRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageContributeFamilyMoneyRequest, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageContributeFamilyMoneyRequest, money_),
  };
  CMessageContributeFamilyMoneyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageContributeFamilyMoneyRequest_descriptor_,
      CMessageContributeFamilyMoneyRequest::default_instance_,
      CMessageContributeFamilyMoneyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageContributeFamilyMoneyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageContributeFamilyMoneyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageContributeFamilyMoneyRequest));
  CMessageContributeFamilyMoneyResponse_descriptor_ = file->message_type(55);
  static const int CMessageContributeFamilyMoneyResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageContributeFamilyMoneyResponse, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageContributeFamilyMoneyResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageContributeFamilyMoneyResponse, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageContributeFamilyMoneyResponse, contribute_),
  };
  CMessageContributeFamilyMoneyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageContributeFamilyMoneyResponse_descriptor_,
      CMessageContributeFamilyMoneyResponse::default_instance_,
      CMessageContributeFamilyMoneyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageContributeFamilyMoneyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageContributeFamilyMoneyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageContributeFamilyMoneyResponse));
  CMessageObtainFamilyMoneyRequest_descriptor_ = file->message_type(56);
  static const int CMessageObtainFamilyMoneyRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainFamilyMoneyRequest, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainFamilyMoneyRequest, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainFamilyMoneyRequest, npctmpid_),
  };
  CMessageObtainFamilyMoneyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageObtainFamilyMoneyRequest_descriptor_,
      CMessageObtainFamilyMoneyRequest::default_instance_,
      CMessageObtainFamilyMoneyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainFamilyMoneyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainFamilyMoneyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageObtainFamilyMoneyRequest));
  CMessageObtainFamilyMoneyResponse_descriptor_ = file->message_type(57);
  static const int CMessageObtainFamilyMoneyResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainFamilyMoneyResponse, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainFamilyMoneyResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainFamilyMoneyResponse, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainFamilyMoneyResponse, glory_),
  };
  CMessageObtainFamilyMoneyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageObtainFamilyMoneyResponse_descriptor_,
      CMessageObtainFamilyMoneyResponse::default_instance_,
      CMessageObtainFamilyMoneyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainFamilyMoneyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainFamilyMoneyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageObtainFamilyMoneyResponse));
  CMessageSetFamilyPostNotify_descriptor_ = file->message_type(58);
  static const int CMessageSetFamilyPostNotify_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetFamilyPostNotify, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetFamilyPostNotify, managerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetFamilyPostNotify, managername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetFamilyPostNotify, memberid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetFamilyPostNotify, membername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetFamilyPostNotify, originalpost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetFamilyPostNotify, newpost_),
  };
  CMessageSetFamilyPostNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageSetFamilyPostNotify_descriptor_,
      CMessageSetFamilyPostNotify::default_instance_,
      CMessageSetFamilyPostNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetFamilyPostNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetFamilyPostNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageSetFamilyPostNotify));
  CMessageLevelUPFamilyNotify_descriptor_ = file->message_type(59);
  static const int CMessageLevelUPFamilyNotify_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLevelUPFamilyNotify, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLevelUPFamilyNotify, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLevelUPFamilyNotify, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLevelUPFamilyNotify, glory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLevelUPFamilyNotify, maxfamilymember_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLevelUPFamilyNotify, maxpresternum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLevelUPFamilyNotify, levelmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLevelUPFamilyNotify, levelglory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLevelUPFamilyNotify, stability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLevelUPFamilyNotify, reducestability_),
  };
  CMessageLevelUPFamilyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLevelUPFamilyNotify_descriptor_,
      CMessageLevelUPFamilyNotify::default_instance_,
      CMessageLevelUPFamilyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLevelUPFamilyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLevelUPFamilyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLevelUPFamilyNotify));
  CMessageFamilyBidNpcRequest_descriptor_ = file->message_type(60);
  static const int CMessageFamilyBidNpcRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyBidNpcRequest, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyBidNpcRequest, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyBidNpcRequest, money_),
  };
  CMessageFamilyBidNpcRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFamilyBidNpcRequest_descriptor_,
      CMessageFamilyBidNpcRequest::default_instance_,
      CMessageFamilyBidNpcRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyBidNpcRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyBidNpcRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFamilyBidNpcRequest));
  CMessageFamilyBidNpcResponse_descriptor_ = file->message_type(61);
  static const int CMessageFamilyBidNpcResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyBidNpcResponse, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyBidNpcResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyBidNpcResponse, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyBidNpcResponse, money_),
  };
  CMessageFamilyBidNpcResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFamilyBidNpcResponse_descriptor_,
      CMessageFamilyBidNpcResponse::default_instance_,
      CMessageFamilyBidNpcResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyBidNpcResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyBidNpcResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFamilyBidNpcResponse));
  CMessageMemberSubmitNotify_descriptor_ = file->message_type(62);
  static const int CMessageMemberSubmitNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMemberSubmitNotify, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMemberSubmitNotify, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMemberSubmitNotify, familyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMemberSubmitNotify, first_),
  };
  CMessageMemberSubmitNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageMemberSubmitNotify_descriptor_,
      CMessageMemberSubmitNotify::default_instance_,
      CMessageMemberSubmitNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMemberSubmitNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMemberSubmitNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageMemberSubmitNotify));
  CMessageMemberSubmitRequest_descriptor_ = file->message_type(63);
  static const int CMessageMemberSubmitRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMemberSubmitRequest, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMemberSubmitRequest, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMemberSubmitRequest, memberid_),
  };
  CMessageMemberSubmitRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageMemberSubmitRequest_descriptor_,
      CMessageMemberSubmitRequest::default_instance_,
      CMessageMemberSubmitRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMemberSubmitRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMemberSubmitRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageMemberSubmitRequest));
  CMessageMemberSubmitResponse_descriptor_ = file->message_type(64);
  static const int CMessageMemberSubmitResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMemberSubmitResponse, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMemberSubmitResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMemberSubmitResponse, npcid_),
  };
  CMessageMemberSubmitResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageMemberSubmitResponse_descriptor_,
      CMessageMemberSubmitResponse::default_instance_,
      CMessageMemberSubmitResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMemberSubmitResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMemberSubmitResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageMemberSubmitResponse));
  CMessageAbortNpcRequest_descriptor_ = file->message_type(65);
  static const int CMessageAbortNpcRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortNpcRequest, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortNpcRequest, familyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortNpcRequest, npcid_),
  };
  CMessageAbortNpcRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageAbortNpcRequest_descriptor_,
      CMessageAbortNpcRequest::default_instance_,
      CMessageAbortNpcRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortNpcRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortNpcRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageAbortNpcRequest));
  CMessageAbortNpcResponse_descriptor_ = file->message_type(66);
  static const int CMessageAbortNpcResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortNpcResponse, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortNpcResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortNpcResponse, familyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortNpcResponse, npcid_),
  };
  CMessageAbortNpcResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageAbortNpcResponse_descriptor_,
      CMessageAbortNpcResponse::default_instance_,
      CMessageAbortNpcResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortNpcResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortNpcResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageAbortNpcResponse));
  CMessageBidInfoRequest_descriptor_ = file->message_type(67);
  static const int CMessageBidInfoRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBidInfoRequest, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBidInfoRequest, npcid_),
  };
  CMessageBidInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBidInfoRequest_descriptor_,
      CMessageBidInfoRequest::default_instance_,
      CMessageBidInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBidInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBidInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBidInfoRequest));
  BidResult_descriptor_ = file->message_type(68);
  static const int BidResult_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResult, familyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResult, familyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResult, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResult, win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResult, lost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResult, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResult, level_),
  };
  BidResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidResult_descriptor_,
      BidResult::default_instance_,
      BidResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidResult));
  CMessageBidInfoResponse_descriptor_ = file->message_type(69);
  static const int CMessageBidInfoResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBidInfoResponse, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBidInfoResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBidInfoResponse, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBidInfoResponse, familyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBidInfoResponse, biddata_),
  };
  CMessageBidInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBidInfoResponse_descriptor_,
      CMessageBidInfoResponse::default_instance_,
      CMessageBidInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBidInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBidInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBidInfoResponse));
  CMessageFamilySubmitNotify_descriptor_ = file->message_type(70);
  static const int CMessageFamilySubmitNotify_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilySubmitNotify, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilySubmitNotify, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilySubmitNotify, familyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilySubmitNotify, memberid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilySubmitNotify, managerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilySubmitNotify, managername_),
  };
  CMessageFamilySubmitNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFamilySubmitNotify_descriptor_,
      CMessageFamilySubmitNotify::default_instance_,
      CMessageFamilySubmitNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilySubmitNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilySubmitNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFamilySubmitNotify));
  CMessageBattleResultNotify_descriptor_ = file->message_type(71);
  static const int CMessageBattleResultNotify_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleResultNotify, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleResultNotify, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleResultNotify, attfamilyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleResultNotify, deffamilyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleResultNotify, winside_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleResultNotify, attfamilyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleResultNotify, deffamilyid_),
  };
  CMessageBattleResultNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBattleResultNotify_descriptor_,
      CMessageBattleResultNotify::default_instance_,
      CMessageBattleResultNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleResultNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleResultNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBattleResultNotify));
  CMessageFamilyPVPStarLevelUPNotify_descriptor_ = file->message_type(72);
  static const int CMessageFamilyPVPStarLevelUPNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyPVPStarLevelUPNotify, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyPVPStarLevelUPNotify, pvpstarlevel_),
  };
  CMessageFamilyPVPStarLevelUPNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFamilyPVPStarLevelUPNotify_descriptor_,
      CMessageFamilyPVPStarLevelUPNotify::default_instance_,
      CMessageFamilyPVPStarLevelUPNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyPVPStarLevelUPNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyPVPStarLevelUPNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFamilyPVPStarLevelUPNotify));
  CMessageMakeRoomRequest_descriptor_ = file->message_type(73);
  static const int CMessageMakeRoomRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeRoomRequest, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeRoomRequest, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeRoomRequest, name_),
  };
  CMessageMakeRoomRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageMakeRoomRequest_descriptor_,
      CMessageMakeRoomRequest::default_instance_,
      CMessageMakeRoomRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeRoomRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeRoomRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageMakeRoomRequest));
  CMessageMakeRoomResponse_descriptor_ = file->message_type(74);
  static const int CMessageMakeRoomResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeRoomResponse, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeRoomResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeRoomResponse, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeRoomResponse, money_),
  };
  CMessageMakeRoomResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageMakeRoomResponse_descriptor_,
      CMessageMakeRoomResponse::default_instance_,
      CMessageMakeRoomResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeRoomResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeRoomResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageMakeRoomResponse));
  CMessageChaRoomRequest_descriptor_ = file->message_type(75);
  static const int CMessageChaRoomRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChaRoomRequest, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChaRoomRequest, familyid_),
  };
  CMessageChaRoomRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChaRoomRequest_descriptor_,
      CMessageChaRoomRequest::default_instance_,
      CMessageChaRoomRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChaRoomRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChaRoomRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChaRoomRequest));
  CMessageChaRoomResponse_descriptor_ = file->message_type(76);
  static const int CMessageChaRoomResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChaRoomResponse, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChaRoomResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChaRoomResponse, familyid_),
  };
  CMessageChaRoomResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChaRoomResponse_descriptor_,
      CMessageChaRoomResponse::default_instance_,
      CMessageChaRoomResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChaRoomResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChaRoomResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChaRoomResponse));
  CMessageAgreeBattleRequest_descriptor_ = file->message_type(77);
  static const int CMessageAgreeBattleRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAgreeBattleRequest, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAgreeBattleRequest, familyid_),
  };
  CMessageAgreeBattleRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageAgreeBattleRequest_descriptor_,
      CMessageAgreeBattleRequest::default_instance_,
      CMessageAgreeBattleRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAgreeBattleRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAgreeBattleRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageAgreeBattleRequest));
  CMessageAgreeBattleResponse_descriptor_ = file->message_type(78);
  static const int CMessageAgreeBattleResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAgreeBattleResponse, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAgreeBattleResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAgreeBattleResponse, familyid_),
  };
  CMessageAgreeBattleResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageAgreeBattleResponse_descriptor_,
      CMessageAgreeBattleResponse::default_instance_,
      CMessageAgreeBattleResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAgreeBattleResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAgreeBattleResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageAgreeBattleResponse));
  CMessageQueryAllRoomRequest_descriptor_ = file->message_type(79);
  static const int CMessageQueryAllRoomRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryAllRoomRequest, headmsg_),
  };
  CMessageQueryAllRoomRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageQueryAllRoomRequest_descriptor_,
      CMessageQueryAllRoomRequest::default_instance_,
      CMessageQueryAllRoomRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryAllRoomRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryAllRoomRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageQueryAllRoomRequest));
  AllRoomInfo_descriptor_ = file->message_type(80);
  static const int AllRoomInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllRoomInfo, familyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllRoomInfo, familyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllRoomInfo, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllRoomInfo, roomname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllRoomInfo, win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllRoomInfo, lost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllRoomInfo, attname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllRoomInfo, state_),
  };
  AllRoomInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllRoomInfo_descriptor_,
      AllRoomInfo::default_instance_,
      AllRoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllRoomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllRoomInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllRoomInfo));
  CMessageQueryAllRoomResponse_descriptor_ = file->message_type(81);
  static const int CMessageQueryAllRoomResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryAllRoomResponse, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryAllRoomResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryAllRoomResponse, roomdata_),
  };
  CMessageQueryAllRoomResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageQueryAllRoomResponse_descriptor_,
      CMessageQueryAllRoomResponse::default_instance_,
      CMessageQueryAllRoomResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryAllRoomResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryAllRoomResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageQueryAllRoomResponse));
  CMessageQueryMyRoomRequest_descriptor_ = file->message_type(82);
  static const int CMessageQueryMyRoomRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryMyRoomRequest, headmsg_),
  };
  CMessageQueryMyRoomRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageQueryMyRoomRequest_descriptor_,
      CMessageQueryMyRoomRequest::default_instance_,
      CMessageQueryMyRoomRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryMyRoomRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryMyRoomRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageQueryMyRoomRequest));
  MyRoomInfo_descriptor_ = file->message_type(83);
  static const int MyRoomInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyRoomInfo, familyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyRoomInfo, familyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyRoomInfo, win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyRoomInfo, lost_),
  };
  MyRoomInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MyRoomInfo_descriptor_,
      MyRoomInfo::default_instance_,
      MyRoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyRoomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyRoomInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MyRoomInfo));
  CMessageQueryMyRoomResponse_descriptor_ = file->message_type(84);
  static const int CMessageQueryMyRoomResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryMyRoomResponse, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryMyRoomResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryMyRoomResponse, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryMyRoomResponse, roomdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryMyRoomResponse, name_),
  };
  CMessageQueryMyRoomResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageQueryMyRoomResponse_descriptor_,
      CMessageQueryMyRoomResponse::default_instance_,
      CMessageQueryMyRoomResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryMyRoomResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryMyRoomResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageQueryMyRoomResponse));
  CMessageQueryMyChaRequest_descriptor_ = file->message_type(85);
  static const int CMessageQueryMyChaRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryMyChaRequest, headmsg_),
  };
  CMessageQueryMyChaRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageQueryMyChaRequest_descriptor_,
      CMessageQueryMyChaRequest::default_instance_,
      CMessageQueryMyChaRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryMyChaRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryMyChaRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageQueryMyChaRequest));
  MyChaInfo_descriptor_ = file->message_type(86);
  static const int MyChaInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyChaInfo, familyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyChaInfo, familyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyChaInfo, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyChaInfo, roomname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyChaInfo, win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyChaInfo, lost_),
  };
  MyChaInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MyChaInfo_descriptor_,
      MyChaInfo::default_instance_,
      MyChaInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyChaInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyChaInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MyChaInfo));
  CMessageQueryMyChaResponse_descriptor_ = file->message_type(87);
  static const int CMessageQueryMyChaResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryMyChaResponse, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryMyChaResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryMyChaResponse, roomdata_),
  };
  CMessageQueryMyChaResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageQueryMyChaResponse_descriptor_,
      CMessageQueryMyChaResponse::default_instance_,
      CMessageQueryMyChaResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryMyChaResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryMyChaResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageQueryMyChaResponse));
  CMessageAbortRoomRequest_descriptor_ = file->message_type(88);
  static const int CMessageAbortRoomRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortRoomRequest, headmsg_),
  };
  CMessageAbortRoomRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageAbortRoomRequest_descriptor_,
      CMessageAbortRoomRequest::default_instance_,
      CMessageAbortRoomRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortRoomRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortRoomRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageAbortRoomRequest));
  CMessageAbortRoomResponse_descriptor_ = file->message_type(89);
  static const int CMessageAbortRoomResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortRoomResponse, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortRoomResponse, result_),
  };
  CMessageAbortRoomResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageAbortRoomResponse_descriptor_,
      CMessageAbortRoomResponse::default_instance_,
      CMessageAbortRoomResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortRoomResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortRoomResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageAbortRoomResponse));
  CMessageAbortChaRequest_descriptor_ = file->message_type(90);
  static const int CMessageAbortChaRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortChaRequest, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortChaRequest, familyid_),
  };
  CMessageAbortChaRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageAbortChaRequest_descriptor_,
      CMessageAbortChaRequest::default_instance_,
      CMessageAbortChaRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortChaRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortChaRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageAbortChaRequest));
  CMessageAbortChaResponse_descriptor_ = file->message_type(91);
  static const int CMessageAbortChaResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortChaResponse, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortChaResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortChaResponse, familyid_),
  };
  CMessageAbortChaResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageAbortChaResponse_descriptor_,
      CMessageAbortChaResponse::default_instance_,
      CMessageAbortChaResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortChaResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortChaResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageAbortChaResponse));
  CMessageContributeFamilyMoneyNotify_descriptor_ = file->message_type(92);
  static const int CMessageContributeFamilyMoneyNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageContributeFamilyMoneyNotify, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageContributeFamilyMoneyNotify, familymoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageContributeFamilyMoneyNotify, membername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageContributeFamilyMoneyNotify, memberid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageContributeFamilyMoneyNotify, value_),
  };
  CMessageContributeFamilyMoneyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageContributeFamilyMoneyNotify_descriptor_,
      CMessageContributeFamilyMoneyNotify::default_instance_,
      CMessageContributeFamilyMoneyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageContributeFamilyMoneyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageContributeFamilyMoneyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageContributeFamilyMoneyNotify));
  CMessageFamilyMoneyChangedNotify_descriptor_ = file->message_type(93);
  static const int CMessageFamilyMoneyChangedNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyMoneyChangedNotify, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyMoneyChangedNotify, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyMoneyChangedNotify, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyMoneyChangedNotify, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyMoneyChangedNotify, value_),
  };
  CMessageFamilyMoneyChangedNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFamilyMoneyChangedNotify_descriptor_,
      CMessageFamilyMoneyChangedNotify::default_instance_,
      CMessageFamilyMoneyChangedNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyMoneyChangedNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyMoneyChangedNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFamilyMoneyChangedNotify));
  CMessageUseFamilyExpCardNotify_descriptor_ = file->message_type(94);
  static const int CMessageUseFamilyExpCardNotify_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseFamilyExpCardNotify, managername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseFamilyExpCardNotify, managerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseFamilyExpCardNotify, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseFamilyExpCardNotify, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseFamilyExpCardNotify, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseFamilyExpCardNotify, posy_),
  };
  CMessageUseFamilyExpCardNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUseFamilyExpCardNotify_descriptor_,
      CMessageUseFamilyExpCardNotify::default_instance_,
      CMessageUseFamilyExpCardNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseFamilyExpCardNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseFamilyExpCardNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUseFamilyExpCardNotify));
  CMessageStartFamilyBossRequest_descriptor_ = file->message_type(95);
  static const int CMessageStartFamilyBossRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStartFamilyBossRequest, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStartFamilyBossRequest, enityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStartFamilyBossRequest, repetionlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStartFamilyBossRequest, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStartFamilyBossRequest, maxtimes_),
  };
  CMessageStartFamilyBossRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageStartFamilyBossRequest_descriptor_,
      CMessageStartFamilyBossRequest::default_instance_,
      CMessageStartFamilyBossRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStartFamilyBossRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStartFamilyBossRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageStartFamilyBossRequest));
  CMessageMakeRoomNotify_descriptor_ = file->message_type(96);
  static const int CMessageMakeRoomNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeRoomNotify, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeRoomNotify, headerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeRoomNotify, headername_),
  };
  CMessageMakeRoomNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageMakeRoomNotify_descriptor_,
      CMessageMakeRoomNotify::default_instance_,
      CMessageMakeRoomNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeRoomNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeRoomNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageMakeRoomNotify));
  CMessageStartFamilyBossResponse_descriptor_ = file->message_type(97);
  static const int CMessageStartFamilyBossResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStartFamilyBossResponse, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStartFamilyBossResponse, errcode_),
  };
  CMessageStartFamilyBossResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageStartFamilyBossResponse_descriptor_,
      CMessageStartFamilyBossResponse::default_instance_,
      CMessageStartFamilyBossResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStartFamilyBossResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStartFamilyBossResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageStartFamilyBossResponse));
  CMessageEnterBossReptionRequest_descriptor_ = file->message_type(98);
  static const int CMessageEnterBossReptionRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterBossReptionRequest, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterBossReptionRequest, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterBossReptionRequest, familyid_),
  };
  CMessageEnterBossReptionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageEnterBossReptionRequest_descriptor_,
      CMessageEnterBossReptionRequest::default_instance_,
      CMessageEnterBossReptionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterBossReptionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterBossReptionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageEnterBossReptionRequest));
  CMessageEnterBossReptionResponse_descriptor_ = file->message_type(99);
  static const int CMessageEnterBossReptionResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterBossReptionResponse, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterBossReptionResponse, errcode_),
  };
  CMessageEnterBossReptionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageEnterBossReptionResponse_descriptor_,
      CMessageEnterBossReptionResponse::default_instance_,
      CMessageEnterBossReptionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterBossReptionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterBossReptionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageEnterBossReptionResponse));
  CMessageAbortRoomNotify_descriptor_ = file->message_type(100);
  static const int CMessageAbortRoomNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortRoomNotify, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortRoomNotify, headerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortRoomNotify, headername_),
  };
  CMessageAbortRoomNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageAbortRoomNotify_descriptor_,
      CMessageAbortRoomNotify::default_instance_,
      CMessageAbortRoomNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortRoomNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortRoomNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageAbortRoomNotify));
  CMessageChaRoomNotify_descriptor_ = file->message_type(101);
  static const int CMessageChaRoomNotify_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChaRoomNotify, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChaRoomNotify, srcfamilyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChaRoomNotify, srcfamilyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChaRoomNotify, srcheaderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChaRoomNotify, srcheadername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChaRoomNotify, desfamilyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChaRoomNotify, desfamilyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChaRoomNotify, desheaderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChaRoomNotify, desheadername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChaRoomNotify, srcwin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChaRoomNotify, srclost_),
  };
  CMessageChaRoomNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChaRoomNotify_descriptor_,
      CMessageChaRoomNotify::default_instance_,
      CMessageChaRoomNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChaRoomNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChaRoomNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChaRoomNotify));
  CMessageAbortChaNotify_descriptor_ = file->message_type(102);
  static const int CMessageAbortChaNotify_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortChaNotify, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortChaNotify, srcfamilyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortChaNotify, srcfamilyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortChaNotify, desfamilyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortChaNotify, desfamilyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortChaNotify, headername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortChaNotify, managerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortChaNotify, managername_),
  };
  CMessageAbortChaNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageAbortChaNotify_descriptor_,
      CMessageAbortChaNotify::default_instance_,
      CMessageAbortChaNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortChaNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortChaNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageAbortChaNotify));
  CMessageFamilyGloryChangedNotify_descriptor_ = file->message_type(103);
  static const int CMessageFamilyGloryChangedNotify_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyGloryChangedNotify, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyGloryChangedNotify, glory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyGloryChangedNotify, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyGloryChangedNotify, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyGloryChangedNotify, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyGloryChangedNotify, value_),
  };
  CMessageFamilyGloryChangedNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFamilyGloryChangedNotify_descriptor_,
      CMessageFamilyGloryChangedNotify::default_instance_,
      CMessageFamilyGloryChangedNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyGloryChangedNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyGloryChangedNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFamilyGloryChangedNotify));
  CMessageMemberContributeChangedNotify_descriptor_ = file->message_type(104);
  static const int CMessageMemberContributeChangedNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMemberContributeChangedNotify, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMemberContributeChangedNotify, contribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMemberContributeChangedNotify, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMemberContributeChangedNotify, value_),
  };
  CMessageMemberContributeChangedNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageMemberContributeChangedNotify_descriptor_,
      CMessageMemberContributeChangedNotify::default_instance_,
      CMessageMemberContributeChangedNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMemberContributeChangedNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMemberContributeChangedNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageMemberContributeChangedNotify));
  CMessageQueryNpcWelfareRequest_descriptor_ = file->message_type(105);
  static const int CMessageQueryNpcWelfareRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryNpcWelfareRequest, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryNpcWelfareRequest, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryNpcWelfareRequest, npctmpid_),
  };
  CMessageQueryNpcWelfareRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageQueryNpcWelfareRequest_descriptor_,
      CMessageQueryNpcWelfareRequest::default_instance_,
      CMessageQueryNpcWelfareRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryNpcWelfareRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryNpcWelfareRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageQueryNpcWelfareRequest));
  CMessageQueryNpcWelfareResponse_descriptor_ = file->message_type(106);
  static const int CMessageQueryNpcWelfareResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryNpcWelfareResponse, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryNpcWelfareResponse, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryNpcWelfareResponse, glory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryNpcWelfareResponse, errcode_),
  };
  CMessageQueryNpcWelfareResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageQueryNpcWelfareResponse_descriptor_,
      CMessageQueryNpcWelfareResponse::default_instance_,
      CMessageQueryNpcWelfareResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryNpcWelfareResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryNpcWelfareResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageQueryNpcWelfareResponse));
  CMessageGetFamilyMoneyRequest_descriptor_ = file->message_type(107);
  static const int CMessageGetFamilyMoneyRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyMoneyRequest, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyMoneyRequest, familymoney_),
  };
  CMessageGetFamilyMoneyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetFamilyMoneyRequest_descriptor_,
      CMessageGetFamilyMoneyRequest::default_instance_,
      CMessageGetFamilyMoneyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyMoneyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyMoneyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetFamilyMoneyRequest));
  CMessageGetFamilyMoneyResponse_descriptor_ = file->message_type(108);
  static const int CMessageGetFamilyMoneyResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyMoneyResponse, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyMoneyResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyMoneyResponse, familymoney_),
  };
  CMessageGetFamilyMoneyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetFamilyMoneyResponse_descriptor_,
      CMessageGetFamilyMoneyResponse::default_instance_,
      CMessageGetFamilyMoneyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyMoneyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyMoneyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetFamilyMoneyResponse));
  CMessageAbortNpcNotify_descriptor_ = file->message_type(109);
  static const int CMessageAbortNpcNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortNpcNotify, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortNpcNotify, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortNpcNotify, headername_),
  };
  CMessageAbortNpcNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageAbortNpcNotify_descriptor_,
      CMessageAbortNpcNotify::default_instance_,
      CMessageAbortNpcNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortNpcNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortNpcNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageAbortNpcNotify));
  CMessagePreBattleNotify_descriptor_ = file->message_type(110);
  static const int CMessagePreBattleNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePreBattleNotify, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePreBattleNotify, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePreBattleNotify, attfamilyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePreBattleNotify, deffamilyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePreBattleNotify, money_),
  };
  CMessagePreBattleNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePreBattleNotify_descriptor_,
      CMessagePreBattleNotify::default_instance_,
      CMessagePreBattleNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePreBattleNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePreBattleNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePreBattleNotify));
  CMessageGetExpCardRequest_descriptor_ = file->message_type(111);
  static const int CMessageGetExpCardRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetExpCardRequest, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetExpCardRequest, msgcode_),
  };
  CMessageGetExpCardRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetExpCardRequest_descriptor_,
      CMessageGetExpCardRequest::default_instance_,
      CMessageGetExpCardRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetExpCardRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetExpCardRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetExpCardRequest));
  CMessageGetExpCardResponse_descriptor_ = file->message_type(112);
  static const int CMessageGetExpCardResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetExpCardResponse, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetExpCardResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetExpCardResponse, redstoneid_),
  };
  CMessageGetExpCardResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetExpCardResponse_descriptor_,
      CMessageGetExpCardResponse::default_instance_,
      CMessageGetExpCardResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetExpCardResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetExpCardResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetExpCardResponse));
  CMessageFamilyCanLevelUPNotify_descriptor_ = file->message_type(113);
  static const int CMessageFamilyCanLevelUPNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyCanLevelUPNotify, headmsg_),
  };
  CMessageFamilyCanLevelUPNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFamilyCanLevelUPNotify_descriptor_,
      CMessageFamilyCanLevelUPNotify::default_instance_,
      CMessageFamilyCanLevelUPNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyCanLevelUPNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyCanLevelUPNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFamilyCanLevelUPNotify));
  CMessageFamilyRepetionScoreNotify_descriptor_ = file->message_type(114);
  static const int CMessageFamilyRepetionScoreNotify_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyRepetionScoreNotify, repetionlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyRepetionScoreNotify, ogrenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyRepetionScoreNotify, timelength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyRepetionScoreNotify, wavenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyRepetionScoreNotify, maxhitnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyRepetionScoreNotify, score_),
  };
  CMessageFamilyRepetionScoreNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFamilyRepetionScoreNotify_descriptor_,
      CMessageFamilyRepetionScoreNotify::default_instance_,
      CMessageFamilyRepetionScoreNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyRepetionScoreNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyRepetionScoreNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFamilyRepetionScoreNotify));
  GoodItem_descriptor_ = file->message_type(115);
  static const int GoodItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodItem, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodItem, composeid_),
  };
  GoodItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GoodItem_descriptor_,
      GoodItem::default_instance_,
      GoodItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GoodItem));
  CMessageGetFamilyGoodsListRequest_descriptor_ = file->message_type(116);
  static const int CMessageGetFamilyGoodsListRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyGoodsListRequest, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyGoodsListRequest, familyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyGoodsListRequest, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyGoodsListRequest, npctmpid_),
  };
  CMessageGetFamilyGoodsListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetFamilyGoodsListRequest_descriptor_,
      CMessageGetFamilyGoodsListRequest::default_instance_,
      CMessageGetFamilyGoodsListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyGoodsListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyGoodsListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetFamilyGoodsListRequest));
  CMessageGetFamilyGoodsListResponse_descriptor_ = file->message_type(117);
  static const int CMessageGetFamilyGoodsListResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyGoodsListResponse, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyGoodsListResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyGoodsListResponse, goodslist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyGoodsListResponse, npctmpid_),
  };
  CMessageGetFamilyGoodsListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetFamilyGoodsListResponse_descriptor_,
      CMessageGetFamilyGoodsListResponse::default_instance_,
      CMessageGetFamilyGoodsListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyGoodsListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyGoodsListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetFamilyGoodsListResponse));
  CMessageGetFamilyExchangeGoodsListRequest_descriptor_ = file->message_type(118);
  static const int CMessageGetFamilyExchangeGoodsListRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyExchangeGoodsListRequest, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyExchangeGoodsListRequest, familyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyExchangeGoodsListRequest, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyExchangeGoodsListRequest, npctmpid_),
  };
  CMessageGetFamilyExchangeGoodsListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetFamilyExchangeGoodsListRequest_descriptor_,
      CMessageGetFamilyExchangeGoodsListRequest::default_instance_,
      CMessageGetFamilyExchangeGoodsListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyExchangeGoodsListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyExchangeGoodsListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetFamilyExchangeGoodsListRequest));
  CMessageGetFamilyExchangeGoodsListResponse_descriptor_ = file->message_type(119);
  static const int CMessageGetFamilyExchangeGoodsListResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyExchangeGoodsListResponse, headmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyExchangeGoodsListResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyExchangeGoodsListResponse, goodslist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyExchangeGoodsListResponse, npctmpid_),
  };
  CMessageGetFamilyExchangeGoodsListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetFamilyExchangeGoodsListResponse_descriptor_,
      CMessageGetFamilyExchangeGoodsListResponse::default_instance_,
      CMessageGetFamilyExchangeGoodsListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyExchangeGoodsListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyExchangeGoodsListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetFamilyExchangeGoodsListResponse));
  CMessageChangeFamilyGoodsListNotify_descriptor_ = file->message_type(120);
  static const int CMessageChangeFamilyGoodsListNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyGoodsListNotify, goodlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyGoodsListNotify, npctmpid_),
  };
  CMessageChangeFamilyGoodsListNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeFamilyGoodsListNotify_descriptor_,
      CMessageChangeFamilyGoodsListNotify::default_instance_,
      CMessageChangeFamilyGoodsListNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyGoodsListNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyGoodsListNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeFamilyGoodsListNotify));
  CMessageChangeFamilyExchangeGoodsListNotify_descriptor_ = file->message_type(121);
  static const int CMessageChangeFamilyExchangeGoodsListNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyExchangeGoodsListNotify, goodlist_),
  };
  CMessageChangeFamilyExchangeGoodsListNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeFamilyExchangeGoodsListNotify_descriptor_,
      CMessageChangeFamilyExchangeGoodsListNotify::default_instance_,
      CMessageChangeFamilyExchangeGoodsListNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyExchangeGoodsListNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyExchangeGoodsListNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeFamilyExchangeGoodsListNotify));
  CMessageUseFamilyLeagueItemNotify_descriptor_ = file->message_type(122);
  static const int CMessageUseFamilyLeagueItemNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseFamilyLeagueItemNotify, goodlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseFamilyLeagueItemNotify, managerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseFamilyLeagueItemNotify, managername_),
  };
  CMessageUseFamilyLeagueItemNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUseFamilyLeagueItemNotify_descriptor_,
      CMessageUseFamilyLeagueItemNotify::default_instance_,
      CMessageUseFamilyLeagueItemNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseFamilyLeagueItemNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseFamilyLeagueItemNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUseFamilyLeagueItemNotify));
  CMessageGetHomeInfoRequest_descriptor_ = file->message_type(123);
  static const int CMessageGetHomeInfoRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetHomeInfoRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetHomeInfoRequest, familyid_),
  };
  CMessageGetHomeInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetHomeInfoRequest_descriptor_,
      CMessageGetHomeInfoRequest::default_instance_,
      CMessageGetHomeInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetHomeInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetHomeInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetHomeInfoRequest));
  CMessageGetHomeInfoResponse_descriptor_ = file->message_type(124);
  static const int CMessageGetHomeInfoResponse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetHomeInfoResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetHomeInfoResponse, familyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetHomeInfoResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetHomeInfoResponse, wizard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetHomeInfoResponse, construct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetHomeInfoResponse, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetHomeInfoResponse, updata_),
  };
  CMessageGetHomeInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetHomeInfoResponse_descriptor_,
      CMessageGetHomeInfoResponse::default_instance_,
      CMessageGetHomeInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetHomeInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetHomeInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetHomeInfoResponse));
  CMessageUpgradeHomeRequest_descriptor_ = file->message_type(125);
  static const int CMessageUpgradeHomeRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpgradeHomeRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpgradeHomeRequest, type_),
  };
  CMessageUpgradeHomeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUpgradeHomeRequest_descriptor_,
      CMessageUpgradeHomeRequest::default_instance_,
      CMessageUpgradeHomeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpgradeHomeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpgradeHomeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUpgradeHomeRequest));
  CMessageUpgradeHomeResponse_descriptor_ = file->message_type(126);
  static const int CMessageUpgradeHomeResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpgradeHomeResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpgradeHomeResponse, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpgradeHomeResponse, updata_),
  };
  CMessageUpgradeHomeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUpgradeHomeResponse_descriptor_,
      CMessageUpgradeHomeResponse::default_instance_,
      CMessageUpgradeHomeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpgradeHomeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpgradeHomeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUpgradeHomeResponse));
  CMessageFamilyStabilityChangedNotify_descriptor_ = file->message_type(127);
  static const int CMessageFamilyStabilityChangedNotify_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyStabilityChangedNotify, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyStabilityChangedNotify, stability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyStabilityChangedNotify, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyStabilityChangedNotify, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyStabilityChangedNotify, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyStabilityChangedNotify, onlinetime_),
  };
  CMessageFamilyStabilityChangedNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFamilyStabilityChangedNotify_descriptor_,
      CMessageFamilyStabilityChangedNotify::default_instance_,
      CMessageFamilyStabilityChangedNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyStabilityChangedNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyStabilityChangedNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFamilyStabilityChangedNotify));
  FamilyMessageID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_familymessage_5fpb_2ehxx);
}

void protobuf_RegisterTypes() {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FamilyHead_descriptor_, &FamilyHead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCreatFamilyRequest_descriptor_, &CMessageCreatFamilyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCreatFamilyResponse_descriptor_, &CMessageCreatFamilyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageInviteMemberRequest_descriptor_, &CMessageInviteMemberRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageInviteMemberResponse_descriptor_, &CMessageInviteMemberResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFamilyInvitedNotify_descriptor_, &CMessageFamilyInvitedNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageReplyFamilyInviteRequest_descriptor_, &CMessageReplyFamilyInviteRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageReplyFamilyInviteResponse_descriptor_, &CMessageReplyFamilyInviteResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageApplyFamilyRequest_descriptor_, &CMessageApplyFamilyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageApplyFamilyResponse_descriptor_, &CMessageApplyFamilyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageMemberApplyNotify_descriptor_, &CMessageMemberApplyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageReplyMemberApplyRequest_descriptor_, &CMessageReplyMemberApplyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageReplyMemberApplyResponse_descriptor_, &CMessageReplyMemberApplyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageApplyFamilySuccessNotify_descriptor_, &CMessageApplyFamilySuccessNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFamilyMemberAddedNotify_descriptor_, &CMessageFamilyMemberAddedNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePostAppointRequest_descriptor_, &CMessagePostAppointRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePostAppointResponse_descriptor_, &CMessagePostAppointResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePostAppointNoify_descriptor_, &CMessagePostAppointNoify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLeaveFamilyRequest_descriptor_, &CMessageLeaveFamilyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLeaveFamilyResponse_descriptor_, &CMessageLeaveFamilyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageMemberLeaveFamilyNotify_descriptor_, &CMessageMemberLeaveFamilyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetFamilyMemberInfoRequest_descriptor_, &CMessageGetFamilyMemberInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetFamilyMemberInfoResponse_descriptor_, &CMessageGetFamilyMemberInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetFamilyPropertyRequest_descriptor_, &CMessageGetFamilyPropertyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetFamilyPropertyResponse_descriptor_, &CMessageGetFamilyPropertyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetAllFanmilyInfoRequest_descriptor_, &CMessageGetAllFanmilyInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetAllFamilyInfoResponse_descriptor_, &CMessageGetAllFamilyInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetApplyListRequest_descriptor_, &CMessageGetApplyListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetApplyListResponse_descriptor_, &CMessageGetApplyListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageKickPlayerRequest_descriptor_, &CMessageKickPlayerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageKickPlayerResponse_descriptor_, &CMessageKickPlayerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageKickPlayerNotify_descriptor_, &CMessageKickPlayerNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageDisbandFamilyRequest_descriptor_, &CMessageDisbandFamilyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageDisbandFamilyResponse_descriptor_, &CMessageDisbandFamilyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageDisbandFamilyNotify_descriptor_, &CMessageDisbandFamilyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeFamilyNoticeRequest_descriptor_, &CMessageChangeFamilyNoticeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeFamilyNoticeResponse_descriptor_, &CMessageChangeFamilyNoticeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageAppointHeaderRequest_descriptor_, &CMessageAppointHeaderRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageAppointHeaderResponse_descriptor_, &CMessageAppointHeaderResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeHeaderNotify_descriptor_, &CMessageChangeHeaderNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFamilyPropertyNotify_descriptor_, &CMessageFamilyPropertyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageInviteFamilyResultNotify_descriptor_, &CMessageInviteFamilyResultNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageClearFamilyApplyRequest_descriptor_, &CMessageClearFamilyApplyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageClearFamilyApplyResponse_descriptor_, &CMessageClearFamilyApplyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageJoinCorpsNotify_descriptor_, &CMessageJoinCorpsNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCancelFamilyDisbandRequest_descriptor_, &CMessageCancelFamilyDisbandRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCancelFamilyDisbandResponse_descriptor_, &CMessageCancelFamilyDisbandResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeFamilyNoticeNotify_descriptor_, &CMessageChangeFamilyNoticeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRefreshFamilyInfoRequest_descriptor_, &CMessageRefreshFamilyInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRefreshFamilyInfoResponse_descriptor_, &CMessageRefreshFamilyInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageSetFamilyPostRequest_descriptor_, &CMessageSetFamilyPostRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageSetFamilyPostResponse_descriptor_, &CMessageSetFamilyPostResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLevelUPFamilyRequest_descriptor_, &CMessageLevelUPFamilyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLevelUPFamilyResponse_descriptor_, &CMessageLevelUPFamilyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageContributeFamilyMoneyRequest_descriptor_, &CMessageContributeFamilyMoneyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageContributeFamilyMoneyResponse_descriptor_, &CMessageContributeFamilyMoneyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageObtainFamilyMoneyRequest_descriptor_, &CMessageObtainFamilyMoneyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageObtainFamilyMoneyResponse_descriptor_, &CMessageObtainFamilyMoneyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageSetFamilyPostNotify_descriptor_, &CMessageSetFamilyPostNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLevelUPFamilyNotify_descriptor_, &CMessageLevelUPFamilyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFamilyBidNpcRequest_descriptor_, &CMessageFamilyBidNpcRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFamilyBidNpcResponse_descriptor_, &CMessageFamilyBidNpcResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageMemberSubmitNotify_descriptor_, &CMessageMemberSubmitNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageMemberSubmitRequest_descriptor_, &CMessageMemberSubmitRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageMemberSubmitResponse_descriptor_, &CMessageMemberSubmitResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageAbortNpcRequest_descriptor_, &CMessageAbortNpcRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageAbortNpcResponse_descriptor_, &CMessageAbortNpcResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBidInfoRequest_descriptor_, &CMessageBidInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidResult_descriptor_, &BidResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBidInfoResponse_descriptor_, &CMessageBidInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFamilySubmitNotify_descriptor_, &CMessageFamilySubmitNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBattleResultNotify_descriptor_, &CMessageBattleResultNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFamilyPVPStarLevelUPNotify_descriptor_, &CMessageFamilyPVPStarLevelUPNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageMakeRoomRequest_descriptor_, &CMessageMakeRoomRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageMakeRoomResponse_descriptor_, &CMessageMakeRoomResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChaRoomRequest_descriptor_, &CMessageChaRoomRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChaRoomResponse_descriptor_, &CMessageChaRoomResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageAgreeBattleRequest_descriptor_, &CMessageAgreeBattleRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageAgreeBattleResponse_descriptor_, &CMessageAgreeBattleResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageQueryAllRoomRequest_descriptor_, &CMessageQueryAllRoomRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllRoomInfo_descriptor_, &AllRoomInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageQueryAllRoomResponse_descriptor_, &CMessageQueryAllRoomResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageQueryMyRoomRequest_descriptor_, &CMessageQueryMyRoomRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MyRoomInfo_descriptor_, &MyRoomInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageQueryMyRoomResponse_descriptor_, &CMessageQueryMyRoomResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageQueryMyChaRequest_descriptor_, &CMessageQueryMyChaRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MyChaInfo_descriptor_, &MyChaInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageQueryMyChaResponse_descriptor_, &CMessageQueryMyChaResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageAbortRoomRequest_descriptor_, &CMessageAbortRoomRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageAbortRoomResponse_descriptor_, &CMessageAbortRoomResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageAbortChaRequest_descriptor_, &CMessageAbortChaRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageAbortChaResponse_descriptor_, &CMessageAbortChaResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageContributeFamilyMoneyNotify_descriptor_, &CMessageContributeFamilyMoneyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFamilyMoneyChangedNotify_descriptor_, &CMessageFamilyMoneyChangedNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUseFamilyExpCardNotify_descriptor_, &CMessageUseFamilyExpCardNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageStartFamilyBossRequest_descriptor_, &CMessageStartFamilyBossRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageMakeRoomNotify_descriptor_, &CMessageMakeRoomNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageStartFamilyBossResponse_descriptor_, &CMessageStartFamilyBossResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageEnterBossReptionRequest_descriptor_, &CMessageEnterBossReptionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageEnterBossReptionResponse_descriptor_, &CMessageEnterBossReptionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageAbortRoomNotify_descriptor_, &CMessageAbortRoomNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChaRoomNotify_descriptor_, &CMessageChaRoomNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageAbortChaNotify_descriptor_, &CMessageAbortChaNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFamilyGloryChangedNotify_descriptor_, &CMessageFamilyGloryChangedNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageMemberContributeChangedNotify_descriptor_, &CMessageMemberContributeChangedNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageQueryNpcWelfareRequest_descriptor_, &CMessageQueryNpcWelfareRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageQueryNpcWelfareResponse_descriptor_, &CMessageQueryNpcWelfareResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetFamilyMoneyRequest_descriptor_, &CMessageGetFamilyMoneyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetFamilyMoneyResponse_descriptor_, &CMessageGetFamilyMoneyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageAbortNpcNotify_descriptor_, &CMessageAbortNpcNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePreBattleNotify_descriptor_, &CMessagePreBattleNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetExpCardRequest_descriptor_, &CMessageGetExpCardRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetExpCardResponse_descriptor_, &CMessageGetExpCardResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFamilyCanLevelUPNotify_descriptor_, &CMessageFamilyCanLevelUPNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFamilyRepetionScoreNotify_descriptor_, &CMessageFamilyRepetionScoreNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GoodItem_descriptor_, &GoodItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetFamilyGoodsListRequest_descriptor_, &CMessageGetFamilyGoodsListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetFamilyGoodsListResponse_descriptor_, &CMessageGetFamilyGoodsListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetFamilyExchangeGoodsListRequest_descriptor_, &CMessageGetFamilyExchangeGoodsListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetFamilyExchangeGoodsListResponse_descriptor_, &CMessageGetFamilyExchangeGoodsListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeFamilyGoodsListNotify_descriptor_, &CMessageChangeFamilyGoodsListNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeFamilyExchangeGoodsListNotify_descriptor_, &CMessageChangeFamilyExchangeGoodsListNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUseFamilyLeagueItemNotify_descriptor_, &CMessageUseFamilyLeagueItemNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetHomeInfoRequest_descriptor_, &CMessageGetHomeInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetHomeInfoResponse_descriptor_, &CMessageGetHomeInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUpgradeHomeRequest_descriptor_, &CMessageUpgradeHomeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUpgradeHomeResponse_descriptor_, &CMessageUpgradeHomeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFamilyStabilityChangedNotify_descriptor_, &CMessageFamilyStabilityChangedNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_familymessage_5fpb_2ehxx() {
  delete FamilyHead::default_instance_;
  delete FamilyHead_reflection_;
  delete CMessageCreatFamilyRequest::default_instance_;
  delete CMessageCreatFamilyRequest_reflection_;
  delete CMessageCreatFamilyResponse::default_instance_;
  delete CMessageCreatFamilyResponse_reflection_;
  delete CMessageInviteMemberRequest::default_instance_;
  delete CMessageInviteMemberRequest_reflection_;
  delete CMessageInviteMemberResponse::default_instance_;
  delete CMessageInviteMemberResponse_reflection_;
  delete CMessageFamilyInvitedNotify::default_instance_;
  delete CMessageFamilyInvitedNotify_reflection_;
  delete CMessageReplyFamilyInviteRequest::default_instance_;
  delete CMessageReplyFamilyInviteRequest_reflection_;
  delete CMessageReplyFamilyInviteResponse::default_instance_;
  delete CMessageReplyFamilyInviteResponse_reflection_;
  delete CMessageApplyFamilyRequest::default_instance_;
  delete CMessageApplyFamilyRequest_reflection_;
  delete CMessageApplyFamilyResponse::default_instance_;
  delete CMessageApplyFamilyResponse_reflection_;
  delete CMessageMemberApplyNotify::default_instance_;
  delete CMessageMemberApplyNotify_reflection_;
  delete CMessageReplyMemberApplyRequest::default_instance_;
  delete CMessageReplyMemberApplyRequest_reflection_;
  delete CMessageReplyMemberApplyResponse::default_instance_;
  delete CMessageReplyMemberApplyResponse_reflection_;
  delete CMessageApplyFamilySuccessNotify::default_instance_;
  delete CMessageApplyFamilySuccessNotify_reflection_;
  delete CMessageFamilyMemberAddedNotify::default_instance_;
  delete CMessageFamilyMemberAddedNotify_reflection_;
  delete CMessagePostAppointRequest::default_instance_;
  delete CMessagePostAppointRequest_reflection_;
  delete CMessagePostAppointResponse::default_instance_;
  delete CMessagePostAppointResponse_reflection_;
  delete CMessagePostAppointNoify::default_instance_;
  delete CMessagePostAppointNoify_reflection_;
  delete CMessageLeaveFamilyRequest::default_instance_;
  delete CMessageLeaveFamilyRequest_reflection_;
  delete CMessageLeaveFamilyResponse::default_instance_;
  delete CMessageLeaveFamilyResponse_reflection_;
  delete CMessageMemberLeaveFamilyNotify::default_instance_;
  delete CMessageMemberLeaveFamilyNotify_reflection_;
  delete CMessageGetFamilyMemberInfoRequest::default_instance_;
  delete CMessageGetFamilyMemberInfoRequest_reflection_;
  delete CMessageGetFamilyMemberInfoResponse::default_instance_;
  delete CMessageGetFamilyMemberInfoResponse_reflection_;
  delete CMessageGetFamilyPropertyRequest::default_instance_;
  delete CMessageGetFamilyPropertyRequest_reflection_;
  delete CMessageGetFamilyPropertyResponse::default_instance_;
  delete CMessageGetFamilyPropertyResponse_reflection_;
  delete CMessageGetAllFanmilyInfoRequest::default_instance_;
  delete CMessageGetAllFanmilyInfoRequest_reflection_;
  delete CMessageGetAllFamilyInfoResponse::default_instance_;
  delete CMessageGetAllFamilyInfoResponse_reflection_;
  delete CMessageGetApplyListRequest::default_instance_;
  delete CMessageGetApplyListRequest_reflection_;
  delete CMessageGetApplyListResponse::default_instance_;
  delete CMessageGetApplyListResponse_reflection_;
  delete CMessageKickPlayerRequest::default_instance_;
  delete CMessageKickPlayerRequest_reflection_;
  delete CMessageKickPlayerResponse::default_instance_;
  delete CMessageKickPlayerResponse_reflection_;
  delete CMessageKickPlayerNotify::default_instance_;
  delete CMessageKickPlayerNotify_reflection_;
  delete CMessageDisbandFamilyRequest::default_instance_;
  delete CMessageDisbandFamilyRequest_reflection_;
  delete CMessageDisbandFamilyResponse::default_instance_;
  delete CMessageDisbandFamilyResponse_reflection_;
  delete CMessageDisbandFamilyNotify::default_instance_;
  delete CMessageDisbandFamilyNotify_reflection_;
  delete CMessageChangeFamilyNoticeRequest::default_instance_;
  delete CMessageChangeFamilyNoticeRequest_reflection_;
  delete CMessageChangeFamilyNoticeResponse::default_instance_;
  delete CMessageChangeFamilyNoticeResponse_reflection_;
  delete CMessageAppointHeaderRequest::default_instance_;
  delete CMessageAppointHeaderRequest_reflection_;
  delete CMessageAppointHeaderResponse::default_instance_;
  delete CMessageAppointHeaderResponse_reflection_;
  delete CMessageChangeHeaderNotify::default_instance_;
  delete CMessageChangeHeaderNotify_reflection_;
  delete CMessageFamilyPropertyNotify::default_instance_;
  delete CMessageFamilyPropertyNotify_reflection_;
  delete CMessageInviteFamilyResultNotify::default_instance_;
  delete CMessageInviteFamilyResultNotify_reflection_;
  delete CMessageClearFamilyApplyRequest::default_instance_;
  delete CMessageClearFamilyApplyRequest_reflection_;
  delete CMessageClearFamilyApplyResponse::default_instance_;
  delete CMessageClearFamilyApplyResponse_reflection_;
  delete CMessageJoinCorpsNotify::default_instance_;
  delete CMessageJoinCorpsNotify_reflection_;
  delete CMessageCancelFamilyDisbandRequest::default_instance_;
  delete CMessageCancelFamilyDisbandRequest_reflection_;
  delete CMessageCancelFamilyDisbandResponse::default_instance_;
  delete CMessageCancelFamilyDisbandResponse_reflection_;
  delete CMessageChangeFamilyNoticeNotify::default_instance_;
  delete CMessageChangeFamilyNoticeNotify_reflection_;
  delete CMessageRefreshFamilyInfoRequest::default_instance_;
  delete CMessageRefreshFamilyInfoRequest_reflection_;
  delete CMessageRefreshFamilyInfoResponse::default_instance_;
  delete CMessageRefreshFamilyInfoResponse_reflection_;
  delete CMessageSetFamilyPostRequest::default_instance_;
  delete CMessageSetFamilyPostRequest_reflection_;
  delete CMessageSetFamilyPostResponse::default_instance_;
  delete CMessageSetFamilyPostResponse_reflection_;
  delete CMessageLevelUPFamilyRequest::default_instance_;
  delete CMessageLevelUPFamilyRequest_reflection_;
  delete CMessageLevelUPFamilyResponse::default_instance_;
  delete CMessageLevelUPFamilyResponse_reflection_;
  delete CMessageContributeFamilyMoneyRequest::default_instance_;
  delete CMessageContributeFamilyMoneyRequest_reflection_;
  delete CMessageContributeFamilyMoneyResponse::default_instance_;
  delete CMessageContributeFamilyMoneyResponse_reflection_;
  delete CMessageObtainFamilyMoneyRequest::default_instance_;
  delete CMessageObtainFamilyMoneyRequest_reflection_;
  delete CMessageObtainFamilyMoneyResponse::default_instance_;
  delete CMessageObtainFamilyMoneyResponse_reflection_;
  delete CMessageSetFamilyPostNotify::default_instance_;
  delete CMessageSetFamilyPostNotify_reflection_;
  delete CMessageLevelUPFamilyNotify::default_instance_;
  delete CMessageLevelUPFamilyNotify_reflection_;
  delete CMessageFamilyBidNpcRequest::default_instance_;
  delete CMessageFamilyBidNpcRequest_reflection_;
  delete CMessageFamilyBidNpcResponse::default_instance_;
  delete CMessageFamilyBidNpcResponse_reflection_;
  delete CMessageMemberSubmitNotify::default_instance_;
  delete CMessageMemberSubmitNotify_reflection_;
  delete CMessageMemberSubmitRequest::default_instance_;
  delete CMessageMemberSubmitRequest_reflection_;
  delete CMessageMemberSubmitResponse::default_instance_;
  delete CMessageMemberSubmitResponse_reflection_;
  delete CMessageAbortNpcRequest::default_instance_;
  delete CMessageAbortNpcRequest_reflection_;
  delete CMessageAbortNpcResponse::default_instance_;
  delete CMessageAbortNpcResponse_reflection_;
  delete CMessageBidInfoRequest::default_instance_;
  delete CMessageBidInfoRequest_reflection_;
  delete BidResult::default_instance_;
  delete BidResult_reflection_;
  delete CMessageBidInfoResponse::default_instance_;
  delete CMessageBidInfoResponse_reflection_;
  delete CMessageFamilySubmitNotify::default_instance_;
  delete CMessageFamilySubmitNotify_reflection_;
  delete CMessageBattleResultNotify::default_instance_;
  delete CMessageBattleResultNotify_reflection_;
  delete CMessageFamilyPVPStarLevelUPNotify::default_instance_;
  delete CMessageFamilyPVPStarLevelUPNotify_reflection_;
  delete CMessageMakeRoomRequest::default_instance_;
  delete CMessageMakeRoomRequest_reflection_;
  delete CMessageMakeRoomResponse::default_instance_;
  delete CMessageMakeRoomResponse_reflection_;
  delete CMessageChaRoomRequest::default_instance_;
  delete CMessageChaRoomRequest_reflection_;
  delete CMessageChaRoomResponse::default_instance_;
  delete CMessageChaRoomResponse_reflection_;
  delete CMessageAgreeBattleRequest::default_instance_;
  delete CMessageAgreeBattleRequest_reflection_;
  delete CMessageAgreeBattleResponse::default_instance_;
  delete CMessageAgreeBattleResponse_reflection_;
  delete CMessageQueryAllRoomRequest::default_instance_;
  delete CMessageQueryAllRoomRequest_reflection_;
  delete AllRoomInfo::default_instance_;
  delete AllRoomInfo_reflection_;
  delete CMessageQueryAllRoomResponse::default_instance_;
  delete CMessageQueryAllRoomResponse_reflection_;
  delete CMessageQueryMyRoomRequest::default_instance_;
  delete CMessageQueryMyRoomRequest_reflection_;
  delete MyRoomInfo::default_instance_;
  delete MyRoomInfo_reflection_;
  delete CMessageQueryMyRoomResponse::default_instance_;
  delete CMessageQueryMyRoomResponse_reflection_;
  delete CMessageQueryMyChaRequest::default_instance_;
  delete CMessageQueryMyChaRequest_reflection_;
  delete MyChaInfo::default_instance_;
  delete MyChaInfo_reflection_;
  delete CMessageQueryMyChaResponse::default_instance_;
  delete CMessageQueryMyChaResponse_reflection_;
  delete CMessageAbortRoomRequest::default_instance_;
  delete CMessageAbortRoomRequest_reflection_;
  delete CMessageAbortRoomResponse::default_instance_;
  delete CMessageAbortRoomResponse_reflection_;
  delete CMessageAbortChaRequest::default_instance_;
  delete CMessageAbortChaRequest_reflection_;
  delete CMessageAbortChaResponse::default_instance_;
  delete CMessageAbortChaResponse_reflection_;
  delete CMessageContributeFamilyMoneyNotify::default_instance_;
  delete CMessageContributeFamilyMoneyNotify_reflection_;
  delete CMessageFamilyMoneyChangedNotify::default_instance_;
  delete CMessageFamilyMoneyChangedNotify_reflection_;
  delete CMessageUseFamilyExpCardNotify::default_instance_;
  delete CMessageUseFamilyExpCardNotify_reflection_;
  delete CMessageStartFamilyBossRequest::default_instance_;
  delete CMessageStartFamilyBossRequest_reflection_;
  delete CMessageMakeRoomNotify::default_instance_;
  delete CMessageMakeRoomNotify_reflection_;
  delete CMessageStartFamilyBossResponse::default_instance_;
  delete CMessageStartFamilyBossResponse_reflection_;
  delete CMessageEnterBossReptionRequest::default_instance_;
  delete CMessageEnterBossReptionRequest_reflection_;
  delete CMessageEnterBossReptionResponse::default_instance_;
  delete CMessageEnterBossReptionResponse_reflection_;
  delete CMessageAbortRoomNotify::default_instance_;
  delete CMessageAbortRoomNotify_reflection_;
  delete CMessageChaRoomNotify::default_instance_;
  delete CMessageChaRoomNotify_reflection_;
  delete CMessageAbortChaNotify::default_instance_;
  delete CMessageAbortChaNotify_reflection_;
  delete CMessageFamilyGloryChangedNotify::default_instance_;
  delete CMessageFamilyGloryChangedNotify_reflection_;
  delete CMessageMemberContributeChangedNotify::default_instance_;
  delete CMessageMemberContributeChangedNotify_reflection_;
  delete CMessageQueryNpcWelfareRequest::default_instance_;
  delete CMessageQueryNpcWelfareRequest_reflection_;
  delete CMessageQueryNpcWelfareResponse::default_instance_;
  delete CMessageQueryNpcWelfareResponse_reflection_;
  delete CMessageGetFamilyMoneyRequest::default_instance_;
  delete CMessageGetFamilyMoneyRequest_reflection_;
  delete CMessageGetFamilyMoneyResponse::default_instance_;
  delete CMessageGetFamilyMoneyResponse_reflection_;
  delete CMessageAbortNpcNotify::default_instance_;
  delete CMessageAbortNpcNotify_reflection_;
  delete CMessagePreBattleNotify::default_instance_;
  delete CMessagePreBattleNotify_reflection_;
  delete CMessageGetExpCardRequest::default_instance_;
  delete CMessageGetExpCardRequest_reflection_;
  delete CMessageGetExpCardResponse::default_instance_;
  delete CMessageGetExpCardResponse_reflection_;
  delete CMessageFamilyCanLevelUPNotify::default_instance_;
  delete CMessageFamilyCanLevelUPNotify_reflection_;
  delete CMessageFamilyRepetionScoreNotify::default_instance_;
  delete CMessageFamilyRepetionScoreNotify_reflection_;
  delete GoodItem::default_instance_;
  delete GoodItem_reflection_;
  delete CMessageGetFamilyGoodsListRequest::default_instance_;
  delete CMessageGetFamilyGoodsListRequest_reflection_;
  delete CMessageGetFamilyGoodsListResponse::default_instance_;
  delete CMessageGetFamilyGoodsListResponse_reflection_;
  delete CMessageGetFamilyExchangeGoodsListRequest::default_instance_;
  delete CMessageGetFamilyExchangeGoodsListRequest_reflection_;
  delete CMessageGetFamilyExchangeGoodsListResponse::default_instance_;
  delete CMessageGetFamilyExchangeGoodsListResponse_reflection_;
  delete CMessageChangeFamilyGoodsListNotify::default_instance_;
  delete CMessageChangeFamilyGoodsListNotify_reflection_;
  delete CMessageChangeFamilyExchangeGoodsListNotify::default_instance_;
  delete CMessageChangeFamilyExchangeGoodsListNotify_reflection_;
  delete CMessageUseFamilyLeagueItemNotify::default_instance_;
  delete CMessageUseFamilyLeagueItemNotify_reflection_;
  delete CMessageGetHomeInfoRequest::default_instance_;
  delete CMessageGetHomeInfoRequest_reflection_;
  delete CMessageGetHomeInfoResponse::default_instance_;
  delete CMessageGetHomeInfoResponse_reflection_;
  delete CMessageUpgradeHomeRequest::default_instance_;
  delete CMessageUpgradeHomeRequest_reflection_;
  delete CMessageUpgradeHomeResponse::default_instance_;
  delete CMessageUpgradeHomeResponse_reflection_;
  delete CMessageFamilyStabilityChangedNotify::default_instance_;
  delete CMessageFamilyStabilityChangedNotify_reflection_;
}

void protobuf_AddDesc_familymessage_5fpb_2ehxx() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_familydbinfo_5fpb_2ehxx();
  #ifndef _NO_PROTOBUF_STR_
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024familymessage_pb.hxx\032\023familydbinfo_pb."
    "hxx\"=\n\nFamilyHead\022\016\n\006RoleID\030\001 \001(\r\022\r\n\005Msg"
    "ID\030\002 \001(\r\022\020\n\010EntityID\030\003 \001(\r\"c\n\032CMessageCr"
    "eatFamilyRequest\022\034\n\007HeadMsg\030\001 \001(\0132\013.Fami"
    "lyHead\022\022\n\nFamilyName\030\002 \001(\t\022\023\n\013NpcEntityI"
    "D\030\003 \001(\r\"r\n\033CMessageCreatFamilyResponse\022\034"
    "\n\007HeadMsg\030\001 \001(\0132\013.FamilyHead\022\017\n\007ErrCode\030"
    "\002 \001(\r\022\020\n\010FamilyID\030\003 \001(\r\022\022\n\nFamilyName\030\004 "
    "\001(\t\"]\n\033CMessageInviteMemberRequest\022\034\n\007He"
    "adMsg\030\001 \001(\0132\013.FamilyHead\022\016\n\006RoleID\030\002 \001(\r"
    "\022\020\n\010RoleName\030\003 \001(\t\"_\n\034CMessageInviteMemb"
    "erResponse\022\034\n\007HeadMsg\030\001 \001(\0132\013.FamilyHead"
    "\022\017\n\007Errcode\030\002 \001(\r\022\020\n\010RoleName\030\003 \001(\t\"\260\002\n\033"
    "CMessageFamilyInvitedNotify\022\034\n\007HeadMsg\030\001"
    " \001(\0132\013.FamilyHead\022\022\n\nPlayerName\030\002 \001(\t\022\023\n"
    "\013FamiltyName\030\003 \001(\t\022\016\n\006RoleID\030\004 \001(\r\022\020\n\010Fa"
    "milyID\030\005 \001(\r\022\023\n\013FamilyLevel\030\006 \001(\r\022\021\n\tMem"
    "berNum\030\007 \001(\r\022\021\n\tCorpsName\030\010 \001(\t\022\r\n\005Glory"
    "\030\t \001(\r\022\021\n\tStarLevel\030\n \001(\r\022\r\n\005NpcID\030\013 \001(\r"
    "\022\030\n\020FamilyHeaderName\030\014 \001(\t\022\017\n\007UnionID\030\r "
    "\001(\r\022\021\n\tUnionName\030\016 \001(\t\"z\n CMessageReplyF"
    "amilyInviteRequest\022\034\n\007HeadMsg\030\001 \001(\0132\013.Fa"
    "milyHead\022\016\n\006Result\030\002 \001(\r\022\020\n\010FamilyID\030\003 \001"
    "(\r\022\026\n\016InvitingRoleID\030\004 \001(\r\"\377\001\n!CMessageR"
    "eplyFamilyInviteResponse\022\034\n\007HeadMsg\030\001 \001("
    "\0132\013.FamilyHead\022\017\n\007Errcode\030\002 \001(\r\022\020\n\010Famil"
    "yID\030\003 \001(\r\022\022\n\nFamilyName\030\004 \001(\t\022\016\n\006Result\030"
    "\005 \001(\r\022\017\n\007CorpsID\030\006 \001(\r\022\021\n\tCorpsName\030\007 \001("
    "\t\022\026\n\016FamilyHeaderID\030\010 \001(\r\022\025\n\rCorpsHeader"
    "ID\030\t \001(\r\022\017\n\007UnionID\030\n \001(\r\022\021\n\tUnionName\030\013"
    " \001(\t\"p\n\032CMessageApplyFamilyRequest\022\034\n\007He"
    "adMsg\030\001 \001(\0132\013.FamilyHead\022\016\n\006CharID\030\002 \001(\r"
    "\022\020\n\010FamilyID\030\003 \001(\r\022\022\n\nFamilyName\030\004 \001(\t\"r"
    "\n\033CMessageApplyFamilyResponse\022\034\n\007HeadMsg"
    "\030\001 \001(\0132\013.FamilyHead\022\017\n\007Errcode\030\002 \001(\r\022\022\n\n"
    "FamilyName\030\003 \001(\t\022\020\n\010FamilyID\030\004 \001(\r\"\306\001\n\031C"
    "MessageMemberApplyNotify\022\034\n\007HeadMsg\030\001 \001("
    "\0132\013.FamilyHead\022\022\n\nPlayerName\030\002 \001(\t\022\016\n\006Ro"
    "leID\030\003 \001(\r\022\021\n\tRoleLevel\030\004 \001(\r\022\022\n\nRoleMet"
    "ier\030\005 \001(\r\022\020\n\010FaceType\030\006 \001(\r\022\017\n\007RoleSex\030\007"
    " \001(\r\022\016\n\006LineID\030\010 \001(\r\022\r\n\005MapID\030\t \001(\r\"_\n\037C"
    "MessageReplyMemberApplyRequest\022\034\n\007HeadMs"
    "g\030\001 \001(\0132\013.FamilyHead\022\016\n\006Result\030\002 \001(\r\022\016\n\006"
    "RoleID\030\003 \001(\r\"\205\001\n CMessageReplyMemberAppl"
    "yResponse\022\034\n\007HeadMsg\030\001 \001(\0132\013.FamilyHead\022"
    "\017\n\007Errcode\030\002 \001(\r\022\022\n\nPlayerName\030\003 \001(\t\022\016\n\006"
    "CharID\030\004 \001(\r\022\016\n\006Result\030\005 \001(\r\"\351\001\n CMessag"
    "eApplyFamilySuccessNotify\022\034\n\007HeadMsg\030\001 \001"
    "(\0132\013.FamilyHead\022\016\n\006Result\030\002 \001(\r\022\020\n\010Famil"
    "yID\030\003 \001(\r\022\022\n\nFamilyName\030\004 \001(\t\022\017\n\007CorpsID"
    "\030\005 \001(\r\022\021\n\tCorpsName\030\006 \001(\t\022\024\n\014FamilyHeade"
    "r\030\007 \001(\r\022\023\n\013CorpsHeader\030\010 \001(\r\022\017\n\007UnionID\030"
    "\t \001(\r\022\021\n\tUnionName\030\n \001(\t\"y\n\037CMessageFami"
    "lyMemberAddedNotify\022\034\n\007HeadMsg\030\001 \001(\0132\013.F"
    "amilyHead\022\023\n\013ManagerName\030\002 \001(\t\022#\n\010RoleIn"
    "fo\030\003 \001(\0132\021.FamilyMemberInfo\"d\n\032CMessageP"
    "ostAppointRequest\022\034\n\007HeadMsg\030\001 \001(\0132\013.Fam"
    "ilyHead\022\024\n\014PlayerCharID\030\002 \001(\r\022\022\n\nActionK"
    "ind\030\003 \001(\r\"v\n\033CMessagePostAppointResponse"
    "\022\034\n\007HeadMsg\030\001 \001(\0132\013.FamilyHead\022\017\n\007Errcod"
    "e\030\002 \001(\r\022\024\n\014PlayerCharID\030\003 \001(\r\022\022\n\nActionK"
    "ind\030\004 \001(\r\"\213\001\n\030CMessagePostAppointNoify\022\034"
    "\n\007HeadMsg\030\001 \001(\0132\013.FamilyHead\022\024\n\014PlayerCh"
    "arID\030\002 \001(\r\022\022\n\nActionKind\030\003 \001(\r\022\023\n\013Manage"
    "rName\030\004 \001(\t\022\022\n\nPlayerName\030\005 \001(\t\"K\n\032CMess"
    "ageLeaveFamilyRequest\022\034\n\007HeadMsg\030\001 \001(\0132\013"
    ".FamilyHead\022\017\n\007MsgCode\030\002 \001(\r\"L\n\033CMessage"
    "LeaveFamilyResponse\022\034\n\007HeadMsg\030\001 \001(\0132\013.F"
    "amilyHead\022\017\n\007Errcode\030\002 \001(\r\"\212\001\n\037CMessageM"
    "emberLeaveFamilyNotify\022\034\n\007HeadMsg\030\001 \001(\0132"
    "\013.FamilyHead\022\016\n\006RoleID\030\002 \001(\r\022\020\n\010RoleName"
    "\030\003 \001(\t\022\023\n\013PlayerLevel\030\004 \001(\r\022\022\n\nPlayerPos"
    "t\030\005 \001(\r\"B\n\"CMessageGetFamilyMemberInfoRe"
    "quest\022\034\n\007HeadMsg\030\001 \001(\0132\013.FamilyHead\"l\n#C"
    "MessageGetFamilyMemberInfoResponse\022\034\n\007He"
    "adMsg\030\001 \001(\0132\013.FamilyHead\022\'\n\nMemberInfo\030\002"
    " \001(\0132\023.PBFamilyMemberList\"@\n CMessageGet"
    "FamilyPropertyRequest\022\034\n\007HeadMsg\030\001 \001(\0132\013"
    ".FamilyHead\"\335\005\n!CMessageGetFamilyPropert"
    "yResponse\022\034\n\007HeadMsg\030\001 \001(\0132\013.FamilyHead\022"
    "\024\n\014FamilyNotice\030\002 \001(\t\022\021\n\tFamilyNum\030\003 \001(\r"
    "\022\023\n\013FamilyLevel\030\004 \001(\r\022\023\n\013FamilyMoney\030\005 \001"
    "(\r\022\026\n\016FamilyHeaderID\030\006 \001(\r\022\030\n\020FamilyHead"
    "erName\030\007 \001(\t\022\023\n\013FamilyGlory\030\010 \001(\r\022\r\n\005Npc"
    "ID\030\t \001(\r\022\020\n\010BidMoney\030\n \001(\r\022\017\n\007BidTime\030\013 "
    "\001(\r\022\024\n\014WarNpcStatus\030\014 \001(\r\022\017\n\007WarRank\030\r \001"
    "(\r\022\021\n\tWarWinNum\030\016 \001(\r\022\022\n\nWarLostNum\030\017 \001("
    "\r\022\027\n\017FamilyStarLevel\030\020 \001(\r\022\016\n\006WarExp\030\021 \001"
    "(\r\022\021\n\tWarMaxExp\030\022 \001(\r\022\027\n\017EnemyFamilyName"
    "\030\023 \001(\t\022\021\n\tWarStatus\030\024 \001(\r\022\027\n\017ChallengeSt"
    "atus\030\025 \001(\r\022\026\n\016ChallengeMoney\030\026 \001(\r\022\030\n\020Ch"
    "allengeStarted\030\027 \001(\t\022\031\n\021ChallengeReceive"
    "d\030\030 \001(\t\022\032\n\022MaxFamilyMemberNum\030\031 \001(\r\022\022\n\nC"
    "anLevelUP\030\032 \001(\r\022\025\n\rMaxPresterNum\030\033 \001(\r\022\022"
    "\n\nGloryLimit\030\034 \001(\r\022\022\n\nLevelMoney\030\035 \001(\r\022\021"
    "\n\tStability\030\036 \001(\r\022\027\n\017ReduceStability\030\037 \001"
    "(\r\022\027\n\017ExtraRedstonExp\030  \001(\r\"Q\n CMessageG"
    "etAllFanmilyInfoRequest\022\034\n\007HeadMsg\030\001 \001(\013"
    "2\013.FamilyHead\022\017\n\007CurPage\030\002 \001(\r\"\207\001\n CMess"
    "ageGetAllFamilyInfoResponse\022\034\n\007HeadMsg\030\001"
    " \001(\0132\013.FamilyHead\022!\n\nFamilyInfo\030\002 \001(\0132\r."
    "PBFamilyList\022\017\n\007CurPage\030\003 \001(\r\022\021\n\tTotalPa"
    "ge\030\004 \001(\r\"M\n\033CMessageGetApplyListRequest\022"
    "\034\n\007HeadMsg\030\001 \001(\0132\013.FamilyHead\022\020\n\010FamilyI"
    "D\030\002 \001(\r\"]\n\034CMessageGetApplyListResponse\022"
    "\034\n\007HeadMsg\030\001 \001(\0132\013.FamilyHead\022\037\n\tApplyLi"
    "st\030\002 \001(\0132\014.PBApplyList\"O\n\031CMessageKickPl"
    "ayerRequest\022\034\n\007HeadMsg\030\001 \001(\0132\013.FamilyHea"
    "d\022\024\n\014PlayerCharID\030\002 \001(\r\"u\n\032CMessageKickP"
    "layerResponse\022\034\n\007HeadMsg\030\001 \001(\0132\013.FamilyH"
    "ead\022\017\n\007Errcode\030\002 \001(\r\022\022\n\nPlayerName\030\003 \001(\t"
    "\022\024\n\014PlayerCharID\030\004 \001(\r\"\216\001\n\030CMessageKickP"
    "layerNotify\022\034\n\007HeadMsg\030\001 \001(\0132\013.FamilyHea"
    "d\022\022\n\nPlayerName\030\002 \001(\t\022\024\n\014PlayerCharID\030\003 "
    "\001(\r\022\023\n\013ManagerName\030\004 \001(\t\022\025\n\rManagerCharI"
    "D\030\005 \001(\r\"b\n\034CMessageDisbandFamilyRequest\022"
    "\034\n\007HeadMsg\030\001 \001(\0132\013.FamilyHead\022\017\n\007MsgCode"
    "\030\002 \001(\r\022\023\n\013NpcEntityID\030\003 \001(\r\"N\n\035CMessageD"
    "isbandFamilyResponse\022\034\n\007HeadMsg\030\001 \001(\0132\013."
    "FamilyHead\022\017\n\007Errcode\030\002 \001(\r\"d\n\033CMessageD"
    "isbandFamilyNotify\022\034\n\007HeadMsg\030\001 \001(\0132\013.Fa"
    "milyHead\022\025\n\rManagerCharID\030\002 \001(\r\022\020\n\010Famil"
    "yID\030\003 \001(\r\"Q\n!CMessageChangeFamilyNoticeR"
    "equest\022\034\n\007HeadMsg\030\001 \001(\0132\013.FamilyHead\022\016\n\006"
    "Notice\030\002 \001(\t\"c\n\"CMessageChangeFamilyNoti"
    "ceResponse\022\034\n\007HeadMsg\030\001 \001(\0132\013.FamilyHead"
    "\022\017\n\007Errcode\030\002 \001(\r\022\016\n\006Notice\030\003 \001(\t\"R\n\034CMe"
    "ssageAppointHeaderRequest\022\034\n\007HeadMsg\030\001 \001"
    "(\0132\013.FamilyHead\022\024\n\014PlayerCharID\030\002 \001(\r\"x\n"
    "\035CMessageAppointHeaderResponse\022\034\n\007HeadMs"
    "g\030\001 \001(\0132\013.FamilyHead\022\017\n\007Errcode\030\002 \001(\r\022\024\n"
    "\014PlayerCharID\030\003 \001(\r\022\022\n\nPlayerName\030\004 \001(\t\""
    "\214\001\n\032CMessageChangeHeaderNotify\022\034\n\007HeadMs"
    "g\030\001 \001(\0132\013.FamilyHead\022\024\n\014PlayerCharID\030\002 \001"
    "(\r\022\022\n\nPlayerName\030\003 \001(\t\022\021\n\tManagerID\030\004 \001("
    "\r\022\023\n\013ManagerName\030\005 \001(\t\"u\n\034CMessageFamily"
    "PropertyNotify\022\034\n\007HeadMsg\030\001 \001(\0132\013.Family"
    "Head\022\"\n\010Property\030\002 \001(\0132\020.PBFamilyPropery"
    "\022\023\n\013FamilyLevel\030\003 \001(\r\"b\n CMessageInviteF"
    "amilyResultNotify\022\034\n\007HeadMsg\030\001 \001(\0132\013.Fam"
    "ilyHead\022\016\n\006Result\030\002 \001(\r\022\020\n\010RoleName\030\003 \001("
    "\t\"P\n\037CMessageClearFamilyApplyRequest\022\034\n\007"
    "HeadMsg\030\001 \001(\0132\013.FamilyHead\022\017\n\007MsgCode\030\002 "
    "\001(\r\"Q\n CMessageClearFamilyApplyResponse\022"
    "\034\n\007HeadMsg\030\001 \001(\0132\013.FamilyHead\022\017\n\007Errcode"
    "\030\002 \001(\r\"\223\001\n\027CMessageJoinCorpsNotify\022\034\n\007He"
    "adMsg\030\001 \001(\0132\013.FamilyHead\022\017\n\007CorpsID\030\002 \001("
    "\r\022\021\n\tCorpsName\030\003 \001(\t\022\022\n\nJoinMethod\030\004 \001(\r"
    "\022\017\n\007UnionID\030\005 \001(\r\022\021\n\tUnionName\030\006 \001(\t\"W\n\""
    "CMessageCancelFamilyDisbandRequest\022\034\n\007He"
    "adMsg\030\001 \001(\0132\013.FamilyHead\022\023\n\013NpcEntityID\030"
    "\002 \001(\r\"T\n#CMessageCancelFamilyDisbandResp"
    "onse\022\034\n\007HeadMsg\030\001 \001(\0132\013.FamilyHead\022\017\n\007Er"
    "rcode\030\002 \001(\r\"P\n CMessageChangeFamilyNotic"
    "eNotify\022\034\n\007HeadMsg\030\001 \001(\0132\013.FamilyHead\022\016\n"
    "\006Notice\030\002 \001(\t\"Q\n CMessageRefreshFamilyIn"
    "foRequest\022\034\n\007HeadMsg\030\001 \001(\0132\013.FamilyHead\022"
    "\017\n\007MsgCode\030\002 \001(\r\"j\n!CMessageRefreshFamil"
    "yInfoResponse\022\034\n\007HeadMsg\030\001 \001(\0132\013.FamilyH"
    "ead\022\'\n\nMemberList\030\002 \001(\0132\023.PBFamilyMember"
    "List\"\\\n\034CMessageSetFamilyPostRequest\022\034\n\007"
    "HeadMsg\030\001 \001(\0132\013.FamilyHead\022\020\n\010MemberID\030\002"
    " \001(\r\022\014\n\004Post\030\003 \001(\r\"n\n\035CMessageSetFamilyP"
    "ostResponse\022\034\n\007HeadMsg\030\001 \001(\0132\013.FamilyHea"
    "d\022\017\n\007Errcode\030\002 \001(\r\022\020\n\010MemberID\030\003 \001(\r\022\014\n\004"
    "Post\030\004 \001(\r\"M\n\034CMessageLevelUPFamilyReque"
    "st\022\034\n\007HeadMsg\030\001 \001(\0132\013.FamilyHead\022\017\n\007MsgC"
    "ode\030\002 \001(\r\"]\n\035CMessageLevelUPFamilyRespon"
    "se\022\034\n\007HeadMsg\030\001 \001(\0132\013.FamilyHead\022\017\n\007Errc"
    "ode\030\002 \001(\r\022\r\n\005Level\030\003 \001(\r\"S\n$CMessageCont"
    "ributeFamilyMoneyRequest\022\034\n\007HeadMsg\030\001 \001("
    "\0132\013.FamilyHead\022\r\n\005Money\030\002 \001(\r\"y\n%CMessag"
    "eContributeFamilyMoneyResponse\022\034\n\007HeadMs"
    "g\030\001 \001(\0132\013.FamilyHead\022\017\n\007Errcode\030\002 \001(\r\022\r\n"
    "\005Money\030\003 \001(\r\022\022\n\nContribute\030\004 \001(\r\"a\n CMes"
    "sageObtainFamilyMoneyRequest\022\034\n\007HeadMsg\030"
    "\001 \001(\0132\013.FamilyHead\022\r\n\005NpcID\030\002 \001(\r\022\020\n\010Npc"
    "TmpID\030\003 \001(\r\"p\n!CMessageObtainFamilyMoney"
    "Response\022\034\n\007HeadMsg\030\001 \001(\0132\013.FamilyHead\022\017"
    "\n\007Errcode\030\002 \001(\r\022\r\n\005Money\030\003 \001(\r\022\r\n\005Glory\030"
    "\004 \001(\r\"\260\001\n\033CMessageSetFamilyPostNotify\022\034\n"
    "\007HeadMsg\030\001 \001(\0132\013.FamilyHead\022\021\n\tManagerID"
    "\030\002 \001(\r\022\023\n\013ManagerName\030\003 \001(\t\022\020\n\010MemberID\030"
    "\004 \001(\r\022\022\n\nMemberName\030\005 \001(\t\022\024\n\014OriginalPos"
    "t\030\006 \001(\r\022\017\n\007NewPost\030\007 \001(\r\"\354\001\n\033CMessageLev"
    "elUPFamilyNotify\022\034\n\007HeadMsg\030\001 \001(\0132\013.Fami"
    "lyHead\022\r\n\005Level\030\002 \001(\r\022\r\n\005Money\030\003 \001(\r\022\r\n\005"
    "Glory\030\004 \001(\r\022\027\n\017MaxFamilyMember\030\005 \001(\r\022\025\n\r"
    "MaxPresterNum\030\006 \001(\r\022\022\n\nLevelMoney\030\007 \001(\r\022"
    "\022\n\nLevelGlory\030\010 \001(\r\022\021\n\tStability\030\t \001(\r\022\027"
    "\n\017ReduceStability\030\n \001(\r\"Y\n\033CMessageFamil"
    "yBidNpcRequest\022\034\n\007HeadMsg\030\001 \001(\0132\013.Family"
    "Head\022\r\n\005NpcID\030\002 \001(\r\022\r\n\005Money\030\003 \001(\r\"j\n\034CM"
    "essageFamilyBidNpcResponse\022\034\n\007HeadMsg\030\001 "
    "\001(\0132\013.FamilyHead\022\016\n\006Result\030\002 \001(\r\022\r\n\005NpcI"
    "D\030\003 \001(\r\022\r\n\005Money\030\004 \001(\r\"l\n\032CMessageMember"
    "SubmitNotify\022\034\n\007HeadMsg\030\001 \001(\0132\013.FamilyHe"
    "ad\022\r\n\005NpcID\030\002 \001(\r\022\022\n\nFamilyName\030\003 \001(\t\022\r\n"
    "\005First\030\004 \001(\r\"\\\n\033CMessageMemberSubmitRequ"
    "est\022\034\n\007HeadMsg\030\001 \001(\0132\013.FamilyHead\022\r\n\005Npc"
    "ID\030\002 \001(\r\022\020\n\010MemberID\030\003 \003(\r\"[\n\034CMessageMe"
    "mberSubmitResponse\022\034\n\007HeadMsg\030\001 \001(\0132\013.Fa"
    "milyHead\022\016\n\006Result\030\002 \001(\r\022\r\n\005NpcID\030\003 \001(\r\""
    "X\n\027CMessageAbortNpcRequest\022\034\n\007HeadMsg\030\001 "
    "\001(\0132\013.FamilyHead\022\020\n\010FamilyID\030\002 \001(\r\022\r\n\005Np"
    "cID\030\003 \001(\r\"i\n\030CMessageAbortNpcResponse\022\034\n"
    "\007HeadMsg\030\001 \001(\0132\013.FamilyHead\022\016\n\006Result\030\002 "
    "\001(\r\022\020\n\010FamilyID\030\003 \001(\r\022\r\n\005NpcID\030\004 \001(\r\"E\n\026"
    "CMessageBidInfoRequest\022\034\n\007HeadMsg\030\001 \001(\0132"
    "\013.FamilyHead\022\r\n\005NpcID\030\002 \001(\r\"{\n\tBidResult"
    "\022\020\n\010FamilyID\030\001 \001(\r\022\022\n\nFamilyName\030\002 \001(\t\022\r"
    "\n\005Money\030\003 \001(\r\022\013\n\003Win\030\004 \001(\r\022\014\n\004Lost\030\005 \001(\r"
    "\022\017\n\007Country\030\006 \001(\r\022\r\n\005Level\030\007 \001(\r\"\207\001\n\027CMe"
    "ssageBidInfoResponse\022\034\n\007HeadMsg\030\001 \001(\0132\013."
    "FamilyHead\022\016\n\006Result\030\002 \001(\r\022\r\n\005NpcID\030\003 \001("
    "\r\022\022\n\nFamilyName\030\004 \001(\t\022\033\n\007BidData\030\005 \003(\0132\n"
    ".BidResult\"\227\001\n\032CMessageFamilySubmitNotif"
    "y\022\034\n\007HeadMsg\030\001 \001(\0132\013.FamilyHead\022\r\n\005NpcID"
    "\030\002 \001(\r\022\022\n\nFamilyName\030\003 \001(\t\022\020\n\010MemberID\030\004"
    " \003(\r\022\021\n\tManagerID\030\005 \001(\r\022\023\n\013ManagerName\030\006"
    " \001(\t\"\262\001\n\032CMessageBattleResultNotify\022\034\n\007H"
    "eadMsg\030\001 \001(\0132\013.FamilyHead\022\r\n\005NpcID\030\002 \001(\r"
    "\022\025\n\rAttFamilyName\030\003 \001(\t\022\025\n\rDefFamilyName"
    "\030\004 \001(\t\022\017\n\007WinSide\030\005 \001(\r\022\023\n\013AttFamilyID\030\006"
    " \001(\r\022\023\n\013DefFamilyID\030\007 \001(\r\"X\n\"CMessageFam"
    "ilyPVPStarLevelUPNotify\022\034\n\007HeadMsg\030\001 \001(\013"
    "2\013.FamilyHead\022\024\n\014PVPStarLevel\030\002 \001(\r\"T\n\027C"
    "MessageMakeRoomRequest\022\034\n\007HeadMsg\030\001 \001(\0132"
    "\013.FamilyHead\022\r\n\005Money\030\002 \001(\r\022\014\n\004Name\030\003 \001("
    "\t\"e\n\030CMessageMakeRoomResponse\022\034\n\007HeadMsg"
    "\030\001 \001(\0132\013.FamilyHead\022\016\n\006Result\030\002 \001(\r\022\014\n\004N"
    "ame\030\003 \001(\t\022\r\n\005Money\030\004 \001(\r\"H\n\026CMessageChaR"
    "oomRequest\022\034\n\007HeadMsg\030\001 \001(\0132\013.FamilyHead"
    "\022\020\n\010FamilyID\030\002 \001(\r\"Y\n\027CMessageChaRoomRes"
    "ponse\022\034\n\007HeadMsg\030\001 \001(\0132\013.FamilyHead\022\016\n\006R"
    "esult\030\002 \001(\r\022\020\n\010FamilyID\030\003 \001(\r\"L\n\032CMessag"
    "eAgreeBattleRequest\022\034\n\007HeadMsg\030\001 \001(\0132\013.F"
    "amilyHead\022\020\n\010FamilyID\030\002 \001(\r\"]\n\033CMessageA"
    "greeBattleResponse\022\034\n\007HeadMsg\030\001 \001(\0132\013.Fa"
    "milyHead\022\016\n\006Result\030\002 \001(\r\022\020\n\010FamilyID\030\003 \001"
    "(\r\";\n\033CMessageQueryAllRoomRequest\022\034\n\007Hea"
    "dMsg\030\001 \001(\0132\013.FamilyHead\"\217\001\n\013AllRoomInfo\022"
    "\020\n\010FamilyID\030\001 \001(\r\022\022\n\nFamilyName\030\002 \001(\t\022\r\n"
    "\005Money\030\003 \001(\r\022\020\n\010RoomName\030\004 \001(\t\022\013\n\003Win\030\005 "
    "\001(\r\022\014\n\004Lost\030\006 \001(\r\022\017\n\007AttName\030\007 \001(\t\022\r\n\005St"
    "ate\030\010 \001(\r\"l\n\034CMessageQueryAllRoomRespons"
    "e\022\034\n\007HeadMsg\030\001 \001(\0132\013.FamilyHead\022\016\n\006Resul"
    "t\030\002 \001(\r\022\036\n\010RoomData\030\003 \003(\0132\014.AllRoomInfo\""
    ":\n\032CMessageQueryMyRoomRequest\022\034\n\007HeadMsg"
    "\030\001 \001(\0132\013.FamilyHead\"M\n\nMyRoomInfo\022\020\n\010Fam"
    "ilyID\030\001 \001(\r\022\022\n\nFamilyName\030\002 \001(\t\022\013\n\003Win\030\003"
    " \001(\r\022\014\n\004Lost\030\004 \001(\r\"\207\001\n\033CMessageQueryMyRo"
    "omResponse\022\034\n\007HeadMsg\030\001 \001(\0132\013.FamilyHead"
    "\022\016\n\006Result\030\002 \001(\r\022\r\n\005Money\030\003 \001(\r\022\035\n\010RoomD"
    "ata\030\004 \003(\0132\013.MyRoomInfo\022\014\n\004Name\030\005 \001(\t\"9\n\031"
    "CMessageQueryMyChaRequest\022\034\n\007HeadMsg\030\001 \001"
    "(\0132\013.FamilyHead\"m\n\tMyChaInfo\022\020\n\010FamilyID"
    "\030\001 \001(\r\022\022\n\nFamilyName\030\002 \001(\t\022\r\n\005Money\030\003 \001("
    "\r\022\020\n\010RoomName\030\004 \001(\t\022\013\n\003Win\030\005 \001(\r\022\014\n\004Lost"
    "\030\006 \001(\r\"h\n\032CMessageQueryMyChaResponse\022\034\n\007"
    "HeadMsg\030\001 \001(\0132\013.FamilyHead\022\016\n\006Result\030\002 \001"
    "(\r\022\034\n\010RoomData\030\003 \003(\0132\n.MyChaInfo\"8\n\030CMes"
    "sageAbortRoomRequest\022\034\n\007HeadMsg\030\001 \001(\0132\013."
    "FamilyHead\"I\n\031CMessageAbortRoomResponse\022"
    "\034\n\007HeadMsg\030\001 \001(\0132\013.FamilyHead\022\016\n\006Result\030"
    "\002 \001(\r\"I\n\027CMessageAbortChaRequest\022\034\n\007Head"
    "Msg\030\001 \001(\0132\013.FamilyHead\022\020\n\010FamilyID\030\002 \001(\r"
    "\"Z\n\030CMessageAbortChaResponse\022\034\n\007HeadMsg\030"
    "\001 \001(\0132\013.FamilyHead\022\016\n\006Result\030\002 \001(\r\022\020\n\010Fa"
    "milyID\030\003 \001(\r\"\215\001\n#CMessageContributeFamil"
    "yMoneyNotify\022\034\n\007HeadMsg\030\001 \001(\0132\013.FamilyHe"
    "ad\022\023\n\013FamilyMoney\030\002 \001(\r\022\022\n\nMemberName\030\003 "
    "\001(\t\022\020\n\010MemberID\030\004 \001(\r\022\r\n\005Value\030\005 \001(\r\"r\n "
    "CMessageFamilyMoneyChangedNotify\022\r\n\005Mone"
    "y\030\001 \001(\r\022\016\n\006RoleID\030\002 \001(\r\022\016\n\006Reason\030\003 \001(\r\022"
    "\020\n\010RoleName\030\004 \001(\t\022\r\n\005Value\030\005 \001(\005\"\203\001\n\036CMe"
    "ssageUseFamilyExpCardNotify\022\023\n\013ManagerNa"
    "me\030\001 \001(\t\022\021\n\tManagerID\030\002 \001(\r\022\016\n\006LineID\030\003 "
    "\001(\r\022\r\n\005MapID\030\004 \001(\r\022\014\n\004PosX\030\005 \001(\r\022\014\n\004PosY"
    "\030\006 \001(\r\"\206\001\n\036CMessageStartFamilyBossReques"
    "t\022\034\n\007HeadMsg\030\001 \001(\0132\013.FamilyHead\022\017\n\007Enity"
    "ID\030\002 \001(\r\022\025\n\rRepetionLevel\030\003 \001(\r\022\014\n\004Date\030"
    "\004 \001(\r\022\020\n\010MaxTimes\030\005 \001(\r\"\\\n\026CMessageMakeR"
    "oomNotify\022\034\n\007HeadMsg\030\001 \001(\0132\013.FamilyHead\022"
    "\020\n\010HeaderID\030\002 \001(\r\022\022\n\nHeaderName\030\003 \001(\t\"P\n"
    "\037CMessageStartFamilyBossResponse\022\034\n\007Head"
    "Msg\030\001 \001(\0132\013.FamilyHead\022\017\n\007Errcode\030\002 \001(\r\""
    "`\n\037CMessageEnterBossReptionRequest\022\034\n\007He"
    "adMsg\030\001 \001(\0132\013.FamilyHead\022\r\n\005NpcID\030\002 \001(\r\022"
    "\020\n\010FamilyID\030\003 \001(\r\"Q\n CMessageEnterBossRe"
    "ptionResponse\022\034\n\007HeadMsg\030\001 \001(\0132\013.FamilyH"
    "ead\022\017\n\007Errcode\030\002 \001(\r\"]\n\027CMessageAbortRoo"
    "mNotify\022\034\n\007HeadMsg\030\001 \001(\0132\013.FamilyHead\022\020\n"
    "\010HeaderID\030\002 \001(\r\022\022\n\nHeaderName\030\003 \001(\t\"\206\002\n\025"
    "CMessageChaRoomNotify\022\034\n\007HeadMsg\030\001 \001(\0132\013"
    ".FamilyHead\022\023\n\013SrcFamilyID\030\002 \001(\r\022\025\n\rSrcF"
    "amilyName\030\003 \001(\t\022\023\n\013SrcHeaderID\030\004 \001(\r\022\025\n\r"
    "SrcHeaderName\030\005 \001(\t\022\023\n\013DesFamilyID\030\006 \001(\r"
    "\022\025\n\rDesFamilyName\030\007 \001(\t\022\023\n\013DesHeaderID\030\010"
    " \001(\r\022\025\n\rDesHeaderName\030\t \001(\t\022\016\n\006SrcWin\030\n "
    "\001(\r\022\017\n\007SrcLost\030\013 \001(\r\"\312\001\n\026CMessageAbortCh"
    "aNotify\022\034\n\007HeadMsg\030\001 \001(\0132\013.FamilyHead\022\023\n"
    "\013SrcFamilyID\030\002 \001(\r\022\025\n\rSrcFamilyName\030\003 \001("
    "\t\022\023\n\013DesFamilyID\030\004 \001(\r\022\025\n\rDesFamilyName\030"
    "\005 \001(\t\022\022\n\nHeaderName\030\006 \001(\t\022\021\n\tManagerID\030\007"
    " \001(\r\022\023\n\013ManagerName\030\010 \001(\t\"\220\001\n CMessageFa"
    "milyGloryChangedNotify\022\034\n\007HeadMsg\030\001 \001(\0132"
    "\013.FamilyHead\022\r\n\005Glory\030\002 \001(\r\022\016\n\006RoleID\030\003 "
    "\001(\r\022\016\n\006Reason\030\004 \001(\r\022\020\n\010RoleName\030\005 \001(\t\022\r\n"
    "\005Value\030\006 \001(\005\"x\n%CMessageMemberContribute"
    "ChangedNotify\022\034\n\007HeadMsg\030\001 \001(\0132\013.FamilyH"
    "ead\022\022\n\nContribute\030\002 \001(\r\022\016\n\006RoleID\030\003 \001(\r\022"
    "\r\n\005Value\030\004 \001(\005\"b\n\036CMessageQueryNpcWelfar"
    "eRequest\022\034\n\007HeadMsg\030\001 \001(\0132\013.FamilyHead\022\020"
    "\n\010EntityID\030\002 \001(\r\022\020\n\010NpcTmpID\030\003 \001(\r\"n\n\037CM"
    "essageQueryNpcWelfareResponse\022\034\n\007HeadMsg"
    "\030\001 \001(\0132\013.FamilyHead\022\r\n\005Money\030\002 \001(\r\022\r\n\005Gl"
    "ory\030\003 \001(\r\022\017\n\007Errcode\030\004 \001(\r\"R\n\035CMessageGe"
    "tFamilyMoneyRequest\022\034\n\007HeadMsg\030\001 \001(\0132\013.F"
    "amilyHead\022\023\n\013FamilyMoney\030\002 \001(\r\"d\n\036CMessa"
    "geGetFamilyMoneyResponse\022\034\n\007HeadMsg\030\001 \001("
    "\0132\013.FamilyHead\022\017\n\007Errcode\030\002 \001(\r\022\023\n\013Famil"
    "yMoney\030\003 \001(\r\"Y\n\026CMessageAbortNpcNotify\022\034"
    "\n\007HeadMsg\030\001 \001(\0132\013.FamilyHead\022\r\n\005NpcID\030\002 "
    "\001(\r\022\022\n\nHeaderName\030\003 \001(\t\"\203\001\n\027CMessagePreB"
    "attleNotify\022\034\n\007HeadMsg\030\001 \001(\0132\013.FamilyHea"
    "d\022\r\n\005NpcID\030\002 \001(\r\022\025\n\rAttFamilyName\030\003 \001(\t\022"
    "\025\n\rDefFamilyName\030\004 \001(\t\022\r\n\005Money\030\005 \001(\r\"J\n"
    "\031CMessageGetExpCardRequest\022\034\n\007HeadMsg\030\001 "
    "\001(\0132\013.FamilyHead\022\017\n\007Msgcode\030\002 \001(\r\"_\n\032CMe"
    "ssageGetExpCardResponse\022\034\n\007HeadMsg\030\001 \001(\013"
    "2\013.FamilyHead\022\017\n\007Errcode\030\002 \001(\r\022\022\n\nRedSto"
    "neID\030\003 \001(\r\">\n\036CMessageFamilyCanLevelUPNo"
    "tify\022\034\n\007HeadMsg\030\001 \001(\0132\013.FamilyHead\"\222\001\n!C"
    "MessageFamilyRepetionScoreNotify\022\025\n\rRepe"
    "tionLevel\030\001 \001(\r\022\017\n\007OgreNum\030\002 \001(\r\022\022\n\nTime"
    "Length\030\003 \001(\r\022\017\n\007WaveNum\030\004 \001(\r\022\021\n\tMaxHitN"
    "um\030\005 \001(\r\022\r\n\005Score\030\006 \001(\r\">\n\010GoodItem\022\016\n\006I"
    "temID\030\001 \001(\r\022\017\n\007ItemNum\030\002 \001(\r\022\021\n\tComposeI"
    "D\030\003 \001(\r\"w\n!CMessageGetFamilyGoodsListReq"
    "uest\022\034\n\007HeadMsg\030\001 \001(\0132\013.FamilyHead\022\020\n\010Fa"
    "milyID\030\002 \001(\r\022\020\n\010EntityID\030\003 \001(\r\022\020\n\010NpcTmp"
    "ID\030\004 \001(\r\"\203\001\n\"CMessageGetFamilyGoodsListR"
    "esponse\022\034\n\007HeadMsg\030\001 \001(\0132\013.FamilyHead\022\017\n"
    "\007Errcode\030\002 \001(\r\022\034\n\tGoodsList\030\003 \003(\0132\t.Good"
    "Item\022\020\n\010NpcTmpID\030\004 \001(\r\"\177\n)CMessageGetFam"
    "ilyExchangeGoodsListRequest\022\034\n\007HeadMsg\030\001"
    " \001(\0132\013.FamilyHead\022\020\n\010FamilyID\030\002 \001(\r\022\020\n\010E"
    "ntityID\030\003 \001(\r\022\020\n\010NpcTmpID\030\004 \001(\r\"\213\001\n*CMes"
    "sageGetFamilyExchangeGoodsListResponse\022\034"
    "\n\007HeadMsg\030\001 \001(\0132\013.FamilyHead\022\017\n\007Errcode\030"
    "\002 \001(\r\022\034\n\tGoodsList\030\003 \003(\0132\t.GoodItem\022\020\n\010N"
    "pcTmpID\030\004 \001(\r\"T\n#CMessageChangeFamilyGoo"
    "dsListNotify\022\033\n\010GoodList\030\001 \003(\0132\t.GoodIte"
    "m\022\020\n\010NpcTmpID\030\002 \001(\r\"J\n+CMessageChangeFam"
    "ilyExchangeGoodsListNotify\022\033\n\010GoodList\030\001"
    " \003(\0132\t.GoodItem\"h\n!CMessageUseFamilyLeag"
    "ueItemNotify\022\033\n\010GoodList\030\001 \003(\0132\t.GoodIte"
    "m\022\021\n\tManagerID\030\002 \001(\r\022\023\n\013ManagerName\030\003 \001("
    "\t\">\n\032CMessageGetHomeInfoRequest\022\016\n\006CharI"
    "D\030\001 \001(\r\022\020\n\010FamilyID\030\002 \001(\r\"\221\001\n\033CMessageGe"
    "tHomeInfoResponse\022\016\n\006CharID\030\001 \001(\r\022\020\n\010Fam"
    "ilyID\030\002 \001(\r\022\016\n\006Result\030\003 \001(\r\022\016\n\006Wizard\030\004 "
    "\003(\r\022\021\n\tConstruct\030\005 \003(\r\022\r\n\005Level\030\006 \003(\r\022\016\n"
    "\006UpData\030\007 \003(\r\":\n\032CMessageUpgradeHomeRequ"
    "est\022\016\n\006CharID\030\001 \001(\r\022\014\n\004Type\030\002 \001(\r\"K\n\033CMe"
    "ssageUpgradeHomeResponse\022\016\n\006CharID\030\001 \001(\r"
    "\022\014\n\004Type\030\002 \001(\r\022\016\n\006UpData\030\003 \001(\r\"\216\001\n$CMess"
    "ageFamilyStabilityChangedNotify\022\016\n\006Reaso"
    "n\030\001 \001(\r\022\021\n\tStability\030\002 \001(\r\022\r\n\005Value\030\003 \001("
    "\r\022\016\n\006RoleID\030\004 \001(\r\022\020\n\010RoleName\030\005 \001(\t\022\022\n\nO"
    "nLineTime\030\006 \001(\r*\231\"\n\017FamilyMessageID\022\037\n\032I"
    "D_C2S_REQUEST_CREATFAMILY\020\200h\022 \n\033ID_S2C_R"
    "ESPONSE_CREATFAMILY\020\201h\022 \n\033ID_C2S_REQUEST"
    "_INVITEMEMBER\020\202h\022!\n\034ID_S2C_RESPONSE_INVI"
    "TEMEMBER\020\203h\022\037\n\032ID_S2C_NOTIY_FAMILYINVITE"
    "D\020\204h\022%\n ID_C2S_REQUEST_REPLYFAMILYINVITE"
    "\020\205h\022&\n!ID_S2C_RESPONSE_REPLYFAMILYINVITE"
    "\020\206h\022\037\n\032ID_S2C_NOTIFY_INVITERESULT\020\207h\022\037\n\032"
    "ID_C2S_REQUEST_FAMILYAPPLY\020\210h\022 \n\033ID_S2C_"
    "RESPONSE_FAMILYAPPLY\020\211h\022\036\n\031ID_S2C_NOTIFY"
    "_MEMBERAPPLY\020\212h\022$\n\037ID_C2S_REQUEST_REPLYM"
    "EMBERAPPLY\020\213h\022%\n ID_S2C_RESPONSE_REPLYME"
    "MBERAPPLY\020\214h\022$\n\037ID_S2C_NOTIFY_FAMILYAPPL"
    "YSUCESS\020\215h\022$\n\037ID_S2C_NOTIFY_FAMILYMEMBER"
    "ADDED\020\216h\022\037\n\032ID_C2S_REQUEST_POSTAPPOINT\020\217"
    "h\022 \n\033ID_S2C_RESPONSE_POSTAPPOINT\020\220h\022\036\n\031I"
    "D_S2C_NOTIFY_POSTAPPOINT\020\221h\022\037\n\032ID_C2S_RE"
    "QUEST_LEAVEFAMILY\020\222h\022 \n\033ID_S2C_RESPONSE_"
    "LEAVEFAMILY\020\223h\022$\n\037ID_S2C_NOTIFY_MEMBERLE"
    "AVEFAMILY\020\224h\022\'\n\"ID_C2S_REQUEST_GETFAMILY"
    "MEMBERINFO\020\225h\022(\n#ID_S2C_RESPONSE_GETFAMI"
    "LYMEMBERINFO\020\226h\022%\n ID_C2S_REQUEST_GETFAM"
    "ILYPROPERTY\020\227h\022#\n\036ID_S2C_RESPONSE_FAMILY"
    "PROPERTY\020\230h\022$\n\037ID_C2S_REQUEST_GETALLFAMI"
    "LYINFO\020\231h\022%\n ID_S2C_RESPONSE_GETALLFAMIL"
    "YINFO\020\232h\022 \n\033ID_C2S_REQUEST_GETAPPLYLIST\020"
    "\233h\022!\n\034ID_S2C_RESPONSE_GETAPPLYLIST\020\234h\022\036\n"
    "\031ID_C2S_REQUEST_KICKMEMBER\020\235h\022\037\n\032ID_S2C_"
    "RESPONSE_KICKMEMBER\020\236h\022\035\n\030ID_S2C_NOTIFY_"
    "KICKPLAYER\020\237h\022!\n\034ID_C2S_REQUEST_DISBANDF"
    "AMILY\020\240h\022\"\n\035ID_S2C_RESPONSE_DISBANDFAMIL"
    "Y\020\241h\022 \n\033ID_S2C_NOTIFY_DISBANDFAMILY\020\242h\022 "
    "\n\033ID_C2S_REQUEST_CHANGENOTICE\020\243h\022!\n\034ID_S"
    "2C_RESPONSE_CHANGENOTICE\020\244h\022!\n\034ID_C2S_RE"
    "QUEST_APPOINTHEADER\020\245h\022\"\n\035ID_S2C_RESPONS"
    "E_APPOINTHEADER\020\246h\022 \n\033ID_S2C_NOTIFY_CHAN"
    "GERHEADER\020\247h\022\"\n\035ID_S2C_NOTIFY_FAMILYPERO"
    "PERTY\020\250h\022(\n#ID_C2S_REQUEST_CLEARFAMILYAP"
    "PLYLIST\020\251h\022)\n$ID_S2C_RESPONSE_CLEARFAMIL"
    "YAPPLYLIST\020\252h\022\034\n\027ID_S2C_NOTIFY_JOINCORPS"
    "\020\253h\022\'\n\"ID_C2S_REQUEST_CANCELFAMILYDISBAN"
    "D\020\254h\022(\n#ID_S2C_RESPONSE_CANCELFAMILYDISB"
    "AND\020\255h\022%\n ID_S2C_NOTIFY_CHANGEFAMILYNOTI"
    "CE\020\256h\022%\n ID_C2S_REQUEST_REFRESHFAMILYINF"
    "O\020\257h\022&\n!ID_S2C_RESPONSE_REFRESHFAMILYINF"
    "O\020\260h\022\032\n\025ID_C2S_REQUEST_BIDNPC\020\261h\022\033\n\026ID_S"
    "2C_RESPONSE_BIDNPC\020\262h\022\037\n\032ID_S2C_NOTIFY_M"
    "EMBERSUBMIT\020\263h\022 \n\033ID_C2S_REQUEST_MEMBERS"
    "UBMIT\020\264h\022!\n\034ID_S2C_RESPONSE_MEMBERSUBMIT"
    "\020\265h\022\034\n\027ID_C2S_REQUEST_ABORTNPC\020\266h\022\035\n\030ID_"
    "S2C_RESPONSE_ABORTNPC\020\267h\022\033\n\026ID_C2S_REQUE"
    "ST_BIDINFO\020\270h\022\034\n\027ID_S2C_RESPONSE_BIDINFO"
    "\020\271h\022\'\n\"ID_C2S_REQUEST_SETFAMILYMEMBERPOS"
    "T\020\272h\022(\n#ID_S2C_RESPONSE_SETFAMILYMEMBERP"
    "OST\020\273h\022!\n\034ID_C2S_REQUEST_LEVELUPFAMILY\020\274"
    "h\022\"\n\035ID_S2C_RESPONSE_LEVELUPFAMILY\020\275h\022)\n"
    "$ID_C2S_REQUEST_CONTRIBUTEFAMILYMONEY\020\276h"
    "\022*\n%ID_S2C_RESPONSE_CONTRIBUTEFAMILYMONE"
    "Y\020\277h\022%\n ID_C2S_REQUEST_OBTAINFAMILYMONEY"
    "\020\300h\022&\n!ID_S2C_RESPONSE_OBTAINFAMILYMONEY"
    "\020\301h\022 \n\033ID_S2C_NOTIFY_SETFAMILYPOST\020\302h\022 \n"
    "\033ID_S2C_NOTIFY_LEVELUPFAMILY\020\303h\022\037\n\032ID_S2"
    "C_NOTIFY_FAMILYSUBMIT\020\304h\022\037\n\032ID_S2C_NOTIF"
    "Y_BATTLERESULT\020\305h\022\'\n\"ID_S2C_NOTIFY_FAMIL"
    "YPVPSTARLEVELUP\020\306h\022\034\n\027ID_C2S_REQUEST_MAK"
    "EROOM\020\310h\022\035\n\030ID_S2C_RESPONSE_MAKEROOM\020\311h\022"
    "\033\n\026ID_C2S_REQUEST_CHAROOM\020\312h\022\034\n\027ID_S2C_R"
    "ESPONSE_CHAROOM\020\313h\022\037\n\032ID_C2S_REQUEST_AGR"
    "EEBATTLE\020\314h\022 \n\033ID_S2C_RESPONSE_AGREEBATT"
    "LE\020\315h\022 \n\033ID_C2S_REQUEST_QUERYALLROOM\020\316h\022"
    "!\n\034ID_S2C_RESPONSE_QUERYALLROOM\020\317h\022\037\n\032ID"
    "_C2S_REQUEST_QUERYMYROOM\020\320h\022 \n\033ID_S2C_RE"
    "SPONSE_QUERYMYROOM\020\321h\022\036\n\031ID_C2S_REQUEST_"
    "QUERYMYCHA\020\322h\022\037\n\032ID_S2C_RESPONSE_QUERYMY"
    "CHA\020\323h\022\035\n\030ID_C2S_REQUEST_ABORTROOM\020\324h\022\036\n"
    "\031ID_S2C_RESPONSE_ABORTROOM\020\325h\022\034\n\027ID_C2S_"
    "REQUEST_ABORTCHA\020\326h\022\035\n\030ID_S2C_RESPONSE_A"
    "BORTCHA\020\327h\022(\n#ID_S2C_NOTIFY_CONTRIBUTEFA"
    "MILYMONEY\020\330h\022%\n ID_S2C_NOTIFY_FAMILYMONE"
    "YCHANGED\020\331h\022#\n\036ID_S2C_NOTIFY_USEFAMILYEX"
    "PCARD\020\332h\022#\n\036ID_C2S_REQUEST_STARTFAMILYBO"
    "SS\020\333h\022$\n\037ID_S2C_RESPONSE_STARTFAMILYBOSS"
    "\020\334h\022$\n\037ID_C2S_REQUEST_ENTERBOSSREPTION\020\335"
    "h\022%\n ID_S2C_RESPONSE_ENTERBOSSREPTION\020\336h"
    "\022\033\n\026ID_S2C_NOTIFY_MAKEROOM\020\337h\022\034\n\027ID_S2C_"
    "NOTIFY_ABORTROOM\020\340h\022\032\n\025ID_S2C_NOTIFY_CHA"
    "ROOM\020\341h\022\033\n\026ID_S2C_NOTIFY_ABORTCHA\020\342h\022%\n "
    "ID_S2C_NOTIFY_FAMILYGLORYCHANGED\020\343h\022*\n%I"
    "D_S2C_NOTIFY_MEMBERCONTRIBUTECHANGED\020\344h\022"
    "#\n\036ID_C2S_REQUEST_QUERYNPCWELFARE\020\345h\022$\n\037"
    "ID_S2C_RESPONSE_QUERYNPCWELFARE\020\346h\022\"\n\035ID"
    "_C2S_REQUEST_GETFAMILYMONEY\020\347h\022#\n\036ID_S2C"
    "_RESPONSE_GETFAMILYMONEY\020\350h\022\033\n\026ID_S2C_NO"
    "TIFY_ABORTNPC\020\351h\022\034\n\027ID_S2C_NOTIFY_PREBAT"
    "TLE\020\352h\022\036\n\031ID_C2S_REQUEST_GETEXPCARD\020\353h\022\037"
    "\n\032ID_S2C_RESPONSE_GETEXPCARD\020\354h\022#\n\036ID_S2"
    "C_NOTIFY_FAMILYCANLEVELUP\020\355h\022&\n!ID_S2C_N"
    "OTIFY_FAMILYREPETIONSCORE\020\356h\022&\n!ID_C2S_R"
    "EQUEST_GETFAMILYGOODSLIST\020\357h\022\'\n\"ID_S2C_R"
    "ESPONSE_GETFAMILYGOODSLIST\020\360h\022.\n)ID_C2S_"
    "REQUEST_GETFAMILYEXCHANGEGOODSLIST\020\361h\022/\n"
    "*ID_S2C_RESPONSE_GETFAMILYEXCHANGEGOODSL"
    "IST\020\362h\022(\n#ID_S2C_NOTIFY_CHANGEFAMILYGOOD"
    "SLIST\020\363h\0220\n+ID_S2C_NOTIFY_CHANGEFAMILYEX"
    "CHANGEGOODSLIST\020\364h\022&\n!ID_S2C_NOTIFY_USEF"
    "AMILYLEAGUEITEM\020\365h\022\037\n\032ID_C2S_REQUEST_GET"
    "HOMEINFO\020\366h\022 \n\033ID_S2C_RESPONSE_GETHOMEIN"
    "FO\020\367h\022\037\n\032ID_C2S_REQUEST_UPGRADEHOME\020\370h\022 "
    "\n\033ID_S2C_RESPONSE_UPGRADEHOME\020\371h\022)\n$ID_S"
    "2C_NOTIFY_FAMILYSTABILITYCHANGED\020\372hB\002H\001", 19239);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "familymessage_pb.hxx", &protobuf_RegisterTypes);
  #endif
  FamilyHead::default_instance_ = new FamilyHead();
  CMessageCreatFamilyRequest::default_instance_ = new CMessageCreatFamilyRequest();
  CMessageCreatFamilyResponse::default_instance_ = new CMessageCreatFamilyResponse();
  CMessageInviteMemberRequest::default_instance_ = new CMessageInviteMemberRequest();
  CMessageInviteMemberResponse::default_instance_ = new CMessageInviteMemberResponse();
  CMessageFamilyInvitedNotify::default_instance_ = new CMessageFamilyInvitedNotify();
  CMessageReplyFamilyInviteRequest::default_instance_ = new CMessageReplyFamilyInviteRequest();
  CMessageReplyFamilyInviteResponse::default_instance_ = new CMessageReplyFamilyInviteResponse();
  CMessageApplyFamilyRequest::default_instance_ = new CMessageApplyFamilyRequest();
  CMessageApplyFamilyResponse::default_instance_ = new CMessageApplyFamilyResponse();
  CMessageMemberApplyNotify::default_instance_ = new CMessageMemberApplyNotify();
  CMessageReplyMemberApplyRequest::default_instance_ = new CMessageReplyMemberApplyRequest();
  CMessageReplyMemberApplyResponse::default_instance_ = new CMessageReplyMemberApplyResponse();
  CMessageApplyFamilySuccessNotify::default_instance_ = new CMessageApplyFamilySuccessNotify();
  CMessageFamilyMemberAddedNotify::default_instance_ = new CMessageFamilyMemberAddedNotify();
  CMessagePostAppointRequest::default_instance_ = new CMessagePostAppointRequest();
  CMessagePostAppointResponse::default_instance_ = new CMessagePostAppointResponse();
  CMessagePostAppointNoify::default_instance_ = new CMessagePostAppointNoify();
  CMessageLeaveFamilyRequest::default_instance_ = new CMessageLeaveFamilyRequest();
  CMessageLeaveFamilyResponse::default_instance_ = new CMessageLeaveFamilyResponse();
  CMessageMemberLeaveFamilyNotify::default_instance_ = new CMessageMemberLeaveFamilyNotify();
  CMessageGetFamilyMemberInfoRequest::default_instance_ = new CMessageGetFamilyMemberInfoRequest();
  CMessageGetFamilyMemberInfoResponse::default_instance_ = new CMessageGetFamilyMemberInfoResponse();
  CMessageGetFamilyPropertyRequest::default_instance_ = new CMessageGetFamilyPropertyRequest();
  CMessageGetFamilyPropertyResponse::default_instance_ = new CMessageGetFamilyPropertyResponse();
  CMessageGetAllFanmilyInfoRequest::default_instance_ = new CMessageGetAllFanmilyInfoRequest();
  CMessageGetAllFamilyInfoResponse::default_instance_ = new CMessageGetAllFamilyInfoResponse();
  CMessageGetApplyListRequest::default_instance_ = new CMessageGetApplyListRequest();
  CMessageGetApplyListResponse::default_instance_ = new CMessageGetApplyListResponse();
  CMessageKickPlayerRequest::default_instance_ = new CMessageKickPlayerRequest();
  CMessageKickPlayerResponse::default_instance_ = new CMessageKickPlayerResponse();
  CMessageKickPlayerNotify::default_instance_ = new CMessageKickPlayerNotify();
  CMessageDisbandFamilyRequest::default_instance_ = new CMessageDisbandFamilyRequest();
  CMessageDisbandFamilyResponse::default_instance_ = new CMessageDisbandFamilyResponse();
  CMessageDisbandFamilyNotify::default_instance_ = new CMessageDisbandFamilyNotify();
  CMessageChangeFamilyNoticeRequest::default_instance_ = new CMessageChangeFamilyNoticeRequest();
  CMessageChangeFamilyNoticeResponse::default_instance_ = new CMessageChangeFamilyNoticeResponse();
  CMessageAppointHeaderRequest::default_instance_ = new CMessageAppointHeaderRequest();
  CMessageAppointHeaderResponse::default_instance_ = new CMessageAppointHeaderResponse();
  CMessageChangeHeaderNotify::default_instance_ = new CMessageChangeHeaderNotify();
  CMessageFamilyPropertyNotify::default_instance_ = new CMessageFamilyPropertyNotify();
  CMessageInviteFamilyResultNotify::default_instance_ = new CMessageInviteFamilyResultNotify();
  CMessageClearFamilyApplyRequest::default_instance_ = new CMessageClearFamilyApplyRequest();
  CMessageClearFamilyApplyResponse::default_instance_ = new CMessageClearFamilyApplyResponse();
  CMessageJoinCorpsNotify::default_instance_ = new CMessageJoinCorpsNotify();
  CMessageCancelFamilyDisbandRequest::default_instance_ = new CMessageCancelFamilyDisbandRequest();
  CMessageCancelFamilyDisbandResponse::default_instance_ = new CMessageCancelFamilyDisbandResponse();
  CMessageChangeFamilyNoticeNotify::default_instance_ = new CMessageChangeFamilyNoticeNotify();
  CMessageRefreshFamilyInfoRequest::default_instance_ = new CMessageRefreshFamilyInfoRequest();
  CMessageRefreshFamilyInfoResponse::default_instance_ = new CMessageRefreshFamilyInfoResponse();
  CMessageSetFamilyPostRequest::default_instance_ = new CMessageSetFamilyPostRequest();
  CMessageSetFamilyPostResponse::default_instance_ = new CMessageSetFamilyPostResponse();
  CMessageLevelUPFamilyRequest::default_instance_ = new CMessageLevelUPFamilyRequest();
  CMessageLevelUPFamilyResponse::default_instance_ = new CMessageLevelUPFamilyResponse();
  CMessageContributeFamilyMoneyRequest::default_instance_ = new CMessageContributeFamilyMoneyRequest();
  CMessageContributeFamilyMoneyResponse::default_instance_ = new CMessageContributeFamilyMoneyResponse();
  CMessageObtainFamilyMoneyRequest::default_instance_ = new CMessageObtainFamilyMoneyRequest();
  CMessageObtainFamilyMoneyResponse::default_instance_ = new CMessageObtainFamilyMoneyResponse();
  CMessageSetFamilyPostNotify::default_instance_ = new CMessageSetFamilyPostNotify();
  CMessageLevelUPFamilyNotify::default_instance_ = new CMessageLevelUPFamilyNotify();
  CMessageFamilyBidNpcRequest::default_instance_ = new CMessageFamilyBidNpcRequest();
  CMessageFamilyBidNpcResponse::default_instance_ = new CMessageFamilyBidNpcResponse();
  CMessageMemberSubmitNotify::default_instance_ = new CMessageMemberSubmitNotify();
  CMessageMemberSubmitRequest::default_instance_ = new CMessageMemberSubmitRequest();
  CMessageMemberSubmitResponse::default_instance_ = new CMessageMemberSubmitResponse();
  CMessageAbortNpcRequest::default_instance_ = new CMessageAbortNpcRequest();
  CMessageAbortNpcResponse::default_instance_ = new CMessageAbortNpcResponse();
  CMessageBidInfoRequest::default_instance_ = new CMessageBidInfoRequest();
  BidResult::default_instance_ = new BidResult();
  CMessageBidInfoResponse::default_instance_ = new CMessageBidInfoResponse();
  CMessageFamilySubmitNotify::default_instance_ = new CMessageFamilySubmitNotify();
  CMessageBattleResultNotify::default_instance_ = new CMessageBattleResultNotify();
  CMessageFamilyPVPStarLevelUPNotify::default_instance_ = new CMessageFamilyPVPStarLevelUPNotify();
  CMessageMakeRoomRequest::default_instance_ = new CMessageMakeRoomRequest();
  CMessageMakeRoomResponse::default_instance_ = new CMessageMakeRoomResponse();
  CMessageChaRoomRequest::default_instance_ = new CMessageChaRoomRequest();
  CMessageChaRoomResponse::default_instance_ = new CMessageChaRoomResponse();
  CMessageAgreeBattleRequest::default_instance_ = new CMessageAgreeBattleRequest();
  CMessageAgreeBattleResponse::default_instance_ = new CMessageAgreeBattleResponse();
  CMessageQueryAllRoomRequest::default_instance_ = new CMessageQueryAllRoomRequest();
  AllRoomInfo::default_instance_ = new AllRoomInfo();
  CMessageQueryAllRoomResponse::default_instance_ = new CMessageQueryAllRoomResponse();
  CMessageQueryMyRoomRequest::default_instance_ = new CMessageQueryMyRoomRequest();
  MyRoomInfo::default_instance_ = new MyRoomInfo();
  CMessageQueryMyRoomResponse::default_instance_ = new CMessageQueryMyRoomResponse();
  CMessageQueryMyChaRequest::default_instance_ = new CMessageQueryMyChaRequest();
  MyChaInfo::default_instance_ = new MyChaInfo();
  CMessageQueryMyChaResponse::default_instance_ = new CMessageQueryMyChaResponse();
  CMessageAbortRoomRequest::default_instance_ = new CMessageAbortRoomRequest();
  CMessageAbortRoomResponse::default_instance_ = new CMessageAbortRoomResponse();
  CMessageAbortChaRequest::default_instance_ = new CMessageAbortChaRequest();
  CMessageAbortChaResponse::default_instance_ = new CMessageAbortChaResponse();
  CMessageContributeFamilyMoneyNotify::default_instance_ = new CMessageContributeFamilyMoneyNotify();
  CMessageFamilyMoneyChangedNotify::default_instance_ = new CMessageFamilyMoneyChangedNotify();
  CMessageUseFamilyExpCardNotify::default_instance_ = new CMessageUseFamilyExpCardNotify();
  CMessageStartFamilyBossRequest::default_instance_ = new CMessageStartFamilyBossRequest();
  CMessageMakeRoomNotify::default_instance_ = new CMessageMakeRoomNotify();
  CMessageStartFamilyBossResponse::default_instance_ = new CMessageStartFamilyBossResponse();
  CMessageEnterBossReptionRequest::default_instance_ = new CMessageEnterBossReptionRequest();
  CMessageEnterBossReptionResponse::default_instance_ = new CMessageEnterBossReptionResponse();
  CMessageAbortRoomNotify::default_instance_ = new CMessageAbortRoomNotify();
  CMessageChaRoomNotify::default_instance_ = new CMessageChaRoomNotify();
  CMessageAbortChaNotify::default_instance_ = new CMessageAbortChaNotify();
  CMessageFamilyGloryChangedNotify::default_instance_ = new CMessageFamilyGloryChangedNotify();
  CMessageMemberContributeChangedNotify::default_instance_ = new CMessageMemberContributeChangedNotify();
  CMessageQueryNpcWelfareRequest::default_instance_ = new CMessageQueryNpcWelfareRequest();
  CMessageQueryNpcWelfareResponse::default_instance_ = new CMessageQueryNpcWelfareResponse();
  CMessageGetFamilyMoneyRequest::default_instance_ = new CMessageGetFamilyMoneyRequest();
  CMessageGetFamilyMoneyResponse::default_instance_ = new CMessageGetFamilyMoneyResponse();
  CMessageAbortNpcNotify::default_instance_ = new CMessageAbortNpcNotify();
  CMessagePreBattleNotify::default_instance_ = new CMessagePreBattleNotify();
  CMessageGetExpCardRequest::default_instance_ = new CMessageGetExpCardRequest();
  CMessageGetExpCardResponse::default_instance_ = new CMessageGetExpCardResponse();
  CMessageFamilyCanLevelUPNotify::default_instance_ = new CMessageFamilyCanLevelUPNotify();
  CMessageFamilyRepetionScoreNotify::default_instance_ = new CMessageFamilyRepetionScoreNotify();
  GoodItem::default_instance_ = new GoodItem();
  CMessageGetFamilyGoodsListRequest::default_instance_ = new CMessageGetFamilyGoodsListRequest();
  CMessageGetFamilyGoodsListResponse::default_instance_ = new CMessageGetFamilyGoodsListResponse();
  CMessageGetFamilyExchangeGoodsListRequest::default_instance_ = new CMessageGetFamilyExchangeGoodsListRequest();
  CMessageGetFamilyExchangeGoodsListResponse::default_instance_ = new CMessageGetFamilyExchangeGoodsListResponse();
  CMessageChangeFamilyGoodsListNotify::default_instance_ = new CMessageChangeFamilyGoodsListNotify();
  CMessageChangeFamilyExchangeGoodsListNotify::default_instance_ = new CMessageChangeFamilyExchangeGoodsListNotify();
  CMessageUseFamilyLeagueItemNotify::default_instance_ = new CMessageUseFamilyLeagueItemNotify();
  CMessageGetHomeInfoRequest::default_instance_ = new CMessageGetHomeInfoRequest();
  CMessageGetHomeInfoResponse::default_instance_ = new CMessageGetHomeInfoResponse();
  CMessageUpgradeHomeRequest::default_instance_ = new CMessageUpgradeHomeRequest();
  CMessageUpgradeHomeResponse::default_instance_ = new CMessageUpgradeHomeResponse();
  CMessageFamilyStabilityChangedNotify::default_instance_ = new CMessageFamilyStabilityChangedNotify();
  FamilyHead::default_instance_->InitAsDefaultInstance();
  CMessageCreatFamilyRequest::default_instance_->InitAsDefaultInstance();
  CMessageCreatFamilyResponse::default_instance_->InitAsDefaultInstance();
  CMessageInviteMemberRequest::default_instance_->InitAsDefaultInstance();
  CMessageInviteMemberResponse::default_instance_->InitAsDefaultInstance();
  CMessageFamilyInvitedNotify::default_instance_->InitAsDefaultInstance();
  CMessageReplyFamilyInviteRequest::default_instance_->InitAsDefaultInstance();
  CMessageReplyFamilyInviteResponse::default_instance_->InitAsDefaultInstance();
  CMessageApplyFamilyRequest::default_instance_->InitAsDefaultInstance();
  CMessageApplyFamilyResponse::default_instance_->InitAsDefaultInstance();
  CMessageMemberApplyNotify::default_instance_->InitAsDefaultInstance();
  CMessageReplyMemberApplyRequest::default_instance_->InitAsDefaultInstance();
  CMessageReplyMemberApplyResponse::default_instance_->InitAsDefaultInstance();
  CMessageApplyFamilySuccessNotify::default_instance_->InitAsDefaultInstance();
  CMessageFamilyMemberAddedNotify::default_instance_->InitAsDefaultInstance();
  CMessagePostAppointRequest::default_instance_->InitAsDefaultInstance();
  CMessagePostAppointResponse::default_instance_->InitAsDefaultInstance();
  CMessagePostAppointNoify::default_instance_->InitAsDefaultInstance();
  CMessageLeaveFamilyRequest::default_instance_->InitAsDefaultInstance();
  CMessageLeaveFamilyResponse::default_instance_->InitAsDefaultInstance();
  CMessageMemberLeaveFamilyNotify::default_instance_->InitAsDefaultInstance();
  CMessageGetFamilyMemberInfoRequest::default_instance_->InitAsDefaultInstance();
  CMessageGetFamilyMemberInfoResponse::default_instance_->InitAsDefaultInstance();
  CMessageGetFamilyPropertyRequest::default_instance_->InitAsDefaultInstance();
  CMessageGetFamilyPropertyResponse::default_instance_->InitAsDefaultInstance();
  CMessageGetAllFanmilyInfoRequest::default_instance_->InitAsDefaultInstance();
  CMessageGetAllFamilyInfoResponse::default_instance_->InitAsDefaultInstance();
  CMessageGetApplyListRequest::default_instance_->InitAsDefaultInstance();
  CMessageGetApplyListResponse::default_instance_->InitAsDefaultInstance();
  CMessageKickPlayerRequest::default_instance_->InitAsDefaultInstance();
  CMessageKickPlayerResponse::default_instance_->InitAsDefaultInstance();
  CMessageKickPlayerNotify::default_instance_->InitAsDefaultInstance();
  CMessageDisbandFamilyRequest::default_instance_->InitAsDefaultInstance();
  CMessageDisbandFamilyResponse::default_instance_->InitAsDefaultInstance();
  CMessageDisbandFamilyNotify::default_instance_->InitAsDefaultInstance();
  CMessageChangeFamilyNoticeRequest::default_instance_->InitAsDefaultInstance();
  CMessageChangeFamilyNoticeResponse::default_instance_->InitAsDefaultInstance();
  CMessageAppointHeaderRequest::default_instance_->InitAsDefaultInstance();
  CMessageAppointHeaderResponse::default_instance_->InitAsDefaultInstance();
  CMessageChangeHeaderNotify::default_instance_->InitAsDefaultInstance();
  CMessageFamilyPropertyNotify::default_instance_->InitAsDefaultInstance();
  CMessageInviteFamilyResultNotify::default_instance_->InitAsDefaultInstance();
  CMessageClearFamilyApplyRequest::default_instance_->InitAsDefaultInstance();
  CMessageClearFamilyApplyResponse::default_instance_->InitAsDefaultInstance();
  CMessageJoinCorpsNotify::default_instance_->InitAsDefaultInstance();
  CMessageCancelFamilyDisbandRequest::default_instance_->InitAsDefaultInstance();
  CMessageCancelFamilyDisbandResponse::default_instance_->InitAsDefaultInstance();
  CMessageChangeFamilyNoticeNotify::default_instance_->InitAsDefaultInstance();
  CMessageRefreshFamilyInfoRequest::default_instance_->InitAsDefaultInstance();
  CMessageRefreshFamilyInfoResponse::default_instance_->InitAsDefaultInstance();
  CMessageSetFamilyPostRequest::default_instance_->InitAsDefaultInstance();
  CMessageSetFamilyPostResponse::default_instance_->InitAsDefaultInstance();
  CMessageLevelUPFamilyRequest::default_instance_->InitAsDefaultInstance();
  CMessageLevelUPFamilyResponse::default_instance_->InitAsDefaultInstance();
  CMessageContributeFamilyMoneyRequest::default_instance_->InitAsDefaultInstance();
  CMessageContributeFamilyMoneyResponse::default_instance_->InitAsDefaultInstance();
  CMessageObtainFamilyMoneyRequest::default_instance_->InitAsDefaultInstance();
  CMessageObtainFamilyMoneyResponse::default_instance_->InitAsDefaultInstance();
  CMessageSetFamilyPostNotify::default_instance_->InitAsDefaultInstance();
  CMessageLevelUPFamilyNotify::default_instance_->InitAsDefaultInstance();
  CMessageFamilyBidNpcRequest::default_instance_->InitAsDefaultInstance();
  CMessageFamilyBidNpcResponse::default_instance_->InitAsDefaultInstance();
  CMessageMemberSubmitNotify::default_instance_->InitAsDefaultInstance();
  CMessageMemberSubmitRequest::default_instance_->InitAsDefaultInstance();
  CMessageMemberSubmitResponse::default_instance_->InitAsDefaultInstance();
  CMessageAbortNpcRequest::default_instance_->InitAsDefaultInstance();
  CMessageAbortNpcResponse::default_instance_->InitAsDefaultInstance();
  CMessageBidInfoRequest::default_instance_->InitAsDefaultInstance();
  BidResult::default_instance_->InitAsDefaultInstance();
  CMessageBidInfoResponse::default_instance_->InitAsDefaultInstance();
  CMessageFamilySubmitNotify::default_instance_->InitAsDefaultInstance();
  CMessageBattleResultNotify::default_instance_->InitAsDefaultInstance();
  CMessageFamilyPVPStarLevelUPNotify::default_instance_->InitAsDefaultInstance();
  CMessageMakeRoomRequest::default_instance_->InitAsDefaultInstance();
  CMessageMakeRoomResponse::default_instance_->InitAsDefaultInstance();
  CMessageChaRoomRequest::default_instance_->InitAsDefaultInstance();
  CMessageChaRoomResponse::default_instance_->InitAsDefaultInstance();
  CMessageAgreeBattleRequest::default_instance_->InitAsDefaultInstance();
  CMessageAgreeBattleResponse::default_instance_->InitAsDefaultInstance();
  CMessageQueryAllRoomRequest::default_instance_->InitAsDefaultInstance();
  AllRoomInfo::default_instance_->InitAsDefaultInstance();
  CMessageQueryAllRoomResponse::default_instance_->InitAsDefaultInstance();
  CMessageQueryMyRoomRequest::default_instance_->InitAsDefaultInstance();
  MyRoomInfo::default_instance_->InitAsDefaultInstance();
  CMessageQueryMyRoomResponse::default_instance_->InitAsDefaultInstance();
  CMessageQueryMyChaRequest::default_instance_->InitAsDefaultInstance();
  MyChaInfo::default_instance_->InitAsDefaultInstance();
  CMessageQueryMyChaResponse::default_instance_->InitAsDefaultInstance();
  CMessageAbortRoomRequest::default_instance_->InitAsDefaultInstance();
  CMessageAbortRoomResponse::default_instance_->InitAsDefaultInstance();
  CMessageAbortChaRequest::default_instance_->InitAsDefaultInstance();
  CMessageAbortChaResponse::default_instance_->InitAsDefaultInstance();
  CMessageContributeFamilyMoneyNotify::default_instance_->InitAsDefaultInstance();
  CMessageFamilyMoneyChangedNotify::default_instance_->InitAsDefaultInstance();
  CMessageUseFamilyExpCardNotify::default_instance_->InitAsDefaultInstance();
  CMessageStartFamilyBossRequest::default_instance_->InitAsDefaultInstance();
  CMessageMakeRoomNotify::default_instance_->InitAsDefaultInstance();
  CMessageStartFamilyBossResponse::default_instance_->InitAsDefaultInstance();
  CMessageEnterBossReptionRequest::default_instance_->InitAsDefaultInstance();
  CMessageEnterBossReptionResponse::default_instance_->InitAsDefaultInstance();
  CMessageAbortRoomNotify::default_instance_->InitAsDefaultInstance();
  CMessageChaRoomNotify::default_instance_->InitAsDefaultInstance();
  CMessageAbortChaNotify::default_instance_->InitAsDefaultInstance();
  CMessageFamilyGloryChangedNotify::default_instance_->InitAsDefaultInstance();
  CMessageMemberContributeChangedNotify::default_instance_->InitAsDefaultInstance();
  CMessageQueryNpcWelfareRequest::default_instance_->InitAsDefaultInstance();
  CMessageQueryNpcWelfareResponse::default_instance_->InitAsDefaultInstance();
  CMessageGetFamilyMoneyRequest::default_instance_->InitAsDefaultInstance();
  CMessageGetFamilyMoneyResponse::default_instance_->InitAsDefaultInstance();
  CMessageAbortNpcNotify::default_instance_->InitAsDefaultInstance();
  CMessagePreBattleNotify::default_instance_->InitAsDefaultInstance();
  CMessageGetExpCardRequest::default_instance_->InitAsDefaultInstance();
  CMessageGetExpCardResponse::default_instance_->InitAsDefaultInstance();
  CMessageFamilyCanLevelUPNotify::default_instance_->InitAsDefaultInstance();
  CMessageFamilyRepetionScoreNotify::default_instance_->InitAsDefaultInstance();
  GoodItem::default_instance_->InitAsDefaultInstance();
  CMessageGetFamilyGoodsListRequest::default_instance_->InitAsDefaultInstance();
  CMessageGetFamilyGoodsListResponse::default_instance_->InitAsDefaultInstance();
  CMessageGetFamilyExchangeGoodsListRequest::default_instance_->InitAsDefaultInstance();
  CMessageGetFamilyExchangeGoodsListResponse::default_instance_->InitAsDefaultInstance();
  CMessageChangeFamilyGoodsListNotify::default_instance_->InitAsDefaultInstance();
  CMessageChangeFamilyExchangeGoodsListNotify::default_instance_->InitAsDefaultInstance();
  CMessageUseFamilyLeagueItemNotify::default_instance_->InitAsDefaultInstance();
  CMessageGetHomeInfoRequest::default_instance_->InitAsDefaultInstance();
  CMessageGetHomeInfoResponse::default_instance_->InitAsDefaultInstance();
  CMessageUpgradeHomeRequest::default_instance_->InitAsDefaultInstance();
  CMessageUpgradeHomeResponse::default_instance_->InitAsDefaultInstance();
  CMessageFamilyStabilityChangedNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_familymessage_5fpb_2ehxx);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_familymessage_5fpb_2ehxx {
  StaticDescriptorInitializer_familymessage_5fpb_2ehxx() {
    protobuf_AddDesc_familymessage_5fpb_2ehxx();
  }
} static_descriptor_initializer_familymessage_5fpb_2ehxx_;

const ::google::protobuf::EnumDescriptor* FamilyMessageID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FamilyMessageID_descriptor_;
}
bool FamilyMessageID_IsValid(int value) {
  switch(value) {
    case 13312:
    case 13313:
    case 13314:
    case 13315:
    case 13316:
    case 13317:
    case 13318:
    case 13319:
    case 13320:
    case 13321:
    case 13322:
    case 13323:
    case 13324:
    case 13325:
    case 13326:
    case 13327:
    case 13328:
    case 13329:
    case 13330:
    case 13331:
    case 13332:
    case 13333:
    case 13334:
    case 13335:
    case 13336:
    case 13337:
    case 13338:
    case 13339:
    case 13340:
    case 13341:
    case 13342:
    case 13343:
    case 13344:
    case 13345:
    case 13346:
    case 13347:
    case 13348:
    case 13349:
    case 13350:
    case 13351:
    case 13352:
    case 13353:
    case 13354:
    case 13355:
    case 13356:
    case 13357:
    case 13358:
    case 13359:
    case 13360:
    case 13361:
    case 13362:
    case 13363:
    case 13364:
    case 13365:
    case 13366:
    case 13367:
    case 13368:
    case 13369:
    case 13370:
    case 13371:
    case 13372:
    case 13373:
    case 13374:
    case 13375:
    case 13376:
    case 13377:
    case 13378:
    case 13379:
    case 13380:
    case 13381:
    case 13382:
    case 13384:
    case 13385:
    case 13386:
    case 13387:
    case 13388:
    case 13389:
    case 13390:
    case 13391:
    case 13392:
    case 13393:
    case 13394:
    case 13395:
    case 13396:
    case 13397:
    case 13398:
    case 13399:
    case 13400:
    case 13401:
    case 13402:
    case 13403:
    case 13404:
    case 13405:
    case 13406:
    case 13407:
    case 13408:
    case 13409:
    case 13410:
    case 13411:
    case 13412:
    case 13413:
    case 13414:
    case 13415:
    case 13416:
    case 13417:
    case 13418:
    case 13419:
    case 13420:
    case 13421:
    case 13422:
    case 13423:
    case 13424:
    case 13425:
    case 13426:
    case 13427:
    case 13428:
    case 13429:
    case 13430:
    case 13431:
    case 13432:
    case 13433:
    case 13434:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int FamilyHead::kRoleIDFieldNumber;
const int FamilyHead::kMsgIDFieldNumber;
const int FamilyHead::kEntityIDFieldNumber;
#endif  // !_MSC_VER

FamilyHead::FamilyHead()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FamilyHead::InitAsDefaultInstance() {}

FamilyHead::FamilyHead(const FamilyHead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FamilyHead::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  msgid_ = 0u;
  entityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FamilyHead::~FamilyHead() {
  SharedDtor();
}

void FamilyHead::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* FamilyHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FamilyHead_descriptor_;
}

const FamilyHead& FamilyHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

FamilyHead* FamilyHead::default_instance_ = NULL;

FamilyHead* FamilyHead::New() const {
  return new FamilyHead;
}

void FamilyHead::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    msgid_ = 0u;
    entityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FamilyHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_MsgID;
        break;
      }
      
      // optional uint32 MsgID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MsgID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &msgid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_EntityID;
        break;
      }
      
      // optional uint32 EntityID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FamilyHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    FamilyHead::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional uint32 MsgID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->msgid(), output);
  }
  
  // optional uint32 EntityID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->entityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FamilyHead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional uint32 MsgID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->msgid(), target);
  }
  
  // optional uint32 EntityID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->entityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FamilyHead::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 MsgID = 2;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->msgid());
    }
    
    // optional uint32 EntityID = 3;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void FamilyHead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FamilyHead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FamilyHead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FamilyHead::MergeFrom(const FamilyHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_msgid(from.msgid());
    }
    if (from._has_bit(2)) {
      set_entityid(from.entityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FamilyHead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FamilyHead::CopyFrom(const FamilyHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FamilyHead::Swap(FamilyHead* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(msgid_, other->msgid_);
    std::swap(entityid_, other->entityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool FamilyHead::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* FamilyHead::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* FamilyHead::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return FamilyHead_reflection_;
}

// ===================================================================

const ::std::string CMessageCreatFamilyRequest::_default_familyname_;
#ifndef _MSC_VER
const int CMessageCreatFamilyRequest::kHeadMsgFieldNumber;
const int CMessageCreatFamilyRequest::kFamilyNameFieldNumber;
const int CMessageCreatFamilyRequest::kNpcEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageCreatFamilyRequest::CMessageCreatFamilyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCreatFamilyRequest::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageCreatFamilyRequest::CMessageCreatFamilyRequest(const CMessageCreatFamilyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCreatFamilyRequest::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  familyname_ = const_cast< ::std::string*>(&_default_familyname_);
  npcentityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCreatFamilyRequest::~CMessageCreatFamilyRequest() {
  SharedDtor();
}

void CMessageCreatFamilyRequest::SharedDtor() {
  if (familyname_ != &_default_familyname_) {
    delete familyname_;
  }
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageCreatFamilyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCreatFamilyRequest_descriptor_;
}

const CMessageCreatFamilyRequest& CMessageCreatFamilyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCreatFamilyRequest* CMessageCreatFamilyRequest::default_instance_ = NULL;

CMessageCreatFamilyRequest* CMessageCreatFamilyRequest::New() const {
  return new CMessageCreatFamilyRequest;
}

void CMessageCreatFamilyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    if (_has_bit(1)) {
      if (familyname_ != &_default_familyname_) {
        familyname_->clear();
      }
    }
    npcentityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCreatFamilyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(18)) goto parse_FamilyName;
        break;
      }
      
      // optional string FamilyName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FamilyName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_familyname()));
        if (input->ExpectTag(24)) goto parse_NpcEntityID;
        break;
      }
      
      // optional uint32 NpcEntityID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcEntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcentityid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCreatFamilyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCreatFamilyRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional string FamilyName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->familyname(), output);
  }
  
  // optional uint32 NpcEntityID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->npcentityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCreatFamilyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional string FamilyName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->familyname(), target);
  }
  
  // optional uint32 NpcEntityID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->npcentityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCreatFamilyRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional string FamilyName = 2;
    if (has_familyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->familyname());
    }
    
    // optional uint32 NpcEntityID = 3;
    if (has_npcentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcentityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCreatFamilyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCreatFamilyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCreatFamilyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCreatFamilyRequest::MergeFrom(const CMessageCreatFamilyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_familyname(from.familyname());
    }
    if (from._has_bit(2)) {
      set_npcentityid(from.npcentityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCreatFamilyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCreatFamilyRequest::CopyFrom(const CMessageCreatFamilyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCreatFamilyRequest::Swap(CMessageCreatFamilyRequest* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(familyname_, other->familyname_);
    std::swap(npcentityid_, other->npcentityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCreatFamilyRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCreatFamilyRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCreatFamilyRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCreatFamilyRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageCreatFamilyResponse::_default_familyname_;
#ifndef _MSC_VER
const int CMessageCreatFamilyResponse::kHeadMsgFieldNumber;
const int CMessageCreatFamilyResponse::kErrCodeFieldNumber;
const int CMessageCreatFamilyResponse::kFamilyIDFieldNumber;
const int CMessageCreatFamilyResponse::kFamilyNameFieldNumber;
#endif  // !_MSC_VER

CMessageCreatFamilyResponse::CMessageCreatFamilyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCreatFamilyResponse::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageCreatFamilyResponse::CMessageCreatFamilyResponse(const CMessageCreatFamilyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCreatFamilyResponse::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  errcode_ = 0u;
  familyid_ = 0u;
  familyname_ = const_cast< ::std::string*>(&_default_familyname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCreatFamilyResponse::~CMessageCreatFamilyResponse() {
  SharedDtor();
}

void CMessageCreatFamilyResponse::SharedDtor() {
  if (familyname_ != &_default_familyname_) {
    delete familyname_;
  }
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageCreatFamilyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCreatFamilyResponse_descriptor_;
}

const CMessageCreatFamilyResponse& CMessageCreatFamilyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCreatFamilyResponse* CMessageCreatFamilyResponse::default_instance_ = NULL;

CMessageCreatFamilyResponse* CMessageCreatFamilyResponse::New() const {
  return new CMessageCreatFamilyResponse;
}

void CMessageCreatFamilyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    errcode_ = 0u;
    familyid_ = 0u;
    if (_has_bit(3)) {
      if (familyname_ != &_default_familyname_) {
        familyname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCreatFamilyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_ErrCode;
        break;
      }
      
      // optional uint32 ErrCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ErrCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_FamilyID;
        break;
      }
      
      // optional uint32 FamilyID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_FamilyName;
        break;
      }
      
      // optional string FamilyName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FamilyName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_familyname()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCreatFamilyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCreatFamilyResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 ErrCode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  // optional uint32 FamilyID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->familyid(), output);
  }
  
  // optional string FamilyName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->familyname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCreatFamilyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 ErrCode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  // optional uint32 FamilyID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->familyid(), target);
  }
  
  // optional string FamilyName = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->familyname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCreatFamilyResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 ErrCode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional uint32 FamilyID = 3;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
    // optional string FamilyName = 4;
    if (has_familyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->familyname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCreatFamilyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCreatFamilyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCreatFamilyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCreatFamilyResponse::MergeFrom(const CMessageCreatFamilyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(2)) {
      set_familyid(from.familyid());
    }
    if (from._has_bit(3)) {
      set_familyname(from.familyname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCreatFamilyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCreatFamilyResponse::CopyFrom(const CMessageCreatFamilyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCreatFamilyResponse::Swap(CMessageCreatFamilyResponse* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(errcode_, other->errcode_);
    std::swap(familyid_, other->familyid_);
    std::swap(familyname_, other->familyname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCreatFamilyResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCreatFamilyResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCreatFamilyResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCreatFamilyResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageInviteMemberRequest::_default_rolename_;
#ifndef _MSC_VER
const int CMessageInviteMemberRequest::kHeadMsgFieldNumber;
const int CMessageInviteMemberRequest::kRoleIDFieldNumber;
const int CMessageInviteMemberRequest::kRoleNameFieldNumber;
#endif  // !_MSC_VER

CMessageInviteMemberRequest::CMessageInviteMemberRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageInviteMemberRequest::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageInviteMemberRequest::CMessageInviteMemberRequest(const CMessageInviteMemberRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageInviteMemberRequest::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  roleid_ = 0u;
  rolename_ = const_cast< ::std::string*>(&_default_rolename_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageInviteMemberRequest::~CMessageInviteMemberRequest() {
  SharedDtor();
}

void CMessageInviteMemberRequest::SharedDtor() {
  if (rolename_ != &_default_rolename_) {
    delete rolename_;
  }
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageInviteMemberRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageInviteMemberRequest_descriptor_;
}

const CMessageInviteMemberRequest& CMessageInviteMemberRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageInviteMemberRequest* CMessageInviteMemberRequest::default_instance_ = NULL;

CMessageInviteMemberRequest* CMessageInviteMemberRequest::New() const {
  return new CMessageInviteMemberRequest;
}

void CMessageInviteMemberRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    roleid_ = 0u;
    if (_has_bit(2)) {
      if (rolename_ != &_default_rolename_) {
        rolename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageInviteMemberRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_RoleName;
        break;
      }
      
      // optional string RoleName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RoleName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_rolename()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageInviteMemberRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageInviteMemberRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 RoleID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->roleid(), output);
  }
  
  // optional string RoleName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->rolename(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageInviteMemberRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 RoleID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->roleid(), target);
  }
  
  // optional string RoleName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->rolename(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageInviteMemberRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 RoleID = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional string RoleName = 3;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->rolename());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageInviteMemberRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageInviteMemberRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageInviteMemberRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageInviteMemberRequest::MergeFrom(const CMessageInviteMemberRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(2)) {
      set_rolename(from.rolename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageInviteMemberRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageInviteMemberRequest::CopyFrom(const CMessageInviteMemberRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageInviteMemberRequest::Swap(CMessageInviteMemberRequest* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(roleid_, other->roleid_);
    std::swap(rolename_, other->rolename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageInviteMemberRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageInviteMemberRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageInviteMemberRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageInviteMemberRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageInviteMemberResponse::_default_rolename_;
#ifndef _MSC_VER
const int CMessageInviteMemberResponse::kHeadMsgFieldNumber;
const int CMessageInviteMemberResponse::kErrcodeFieldNumber;
const int CMessageInviteMemberResponse::kRoleNameFieldNumber;
#endif  // !_MSC_VER

CMessageInviteMemberResponse::CMessageInviteMemberResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageInviteMemberResponse::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageInviteMemberResponse::CMessageInviteMemberResponse(const CMessageInviteMemberResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageInviteMemberResponse::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  errcode_ = 0u;
  rolename_ = const_cast< ::std::string*>(&_default_rolename_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageInviteMemberResponse::~CMessageInviteMemberResponse() {
  SharedDtor();
}

void CMessageInviteMemberResponse::SharedDtor() {
  if (rolename_ != &_default_rolename_) {
    delete rolename_;
  }
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageInviteMemberResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageInviteMemberResponse_descriptor_;
}

const CMessageInviteMemberResponse& CMessageInviteMemberResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageInviteMemberResponse* CMessageInviteMemberResponse::default_instance_ = NULL;

CMessageInviteMemberResponse* CMessageInviteMemberResponse::New() const {
  return new CMessageInviteMemberResponse;
}

void CMessageInviteMemberResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    errcode_ = 0u;
    if (_has_bit(2)) {
      if (rolename_ != &_default_rolename_) {
        rolename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageInviteMemberResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_RoleName;
        break;
      }
      
      // optional string RoleName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RoleName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_rolename()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageInviteMemberResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageInviteMemberResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  // optional string RoleName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->rolename(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageInviteMemberResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  // optional string RoleName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->rolename(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageInviteMemberResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional string RoleName = 3;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->rolename());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageInviteMemberResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageInviteMemberResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageInviteMemberResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageInviteMemberResponse::MergeFrom(const CMessageInviteMemberResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(2)) {
      set_rolename(from.rolename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageInviteMemberResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageInviteMemberResponse::CopyFrom(const CMessageInviteMemberResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageInviteMemberResponse::Swap(CMessageInviteMemberResponse* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(errcode_, other->errcode_);
    std::swap(rolename_, other->rolename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageInviteMemberResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageInviteMemberResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageInviteMemberResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageInviteMemberResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageFamilyInvitedNotify::_default_playername_;
const ::std::string CMessageFamilyInvitedNotify::_default_familtyname_;
const ::std::string CMessageFamilyInvitedNotify::_default_corpsname_;
const ::std::string CMessageFamilyInvitedNotify::_default_familyheadername_;
const ::std::string CMessageFamilyInvitedNotify::_default_unionname_;
#ifndef _MSC_VER
const int CMessageFamilyInvitedNotify::kHeadMsgFieldNumber;
const int CMessageFamilyInvitedNotify::kPlayerNameFieldNumber;
const int CMessageFamilyInvitedNotify::kFamiltyNameFieldNumber;
const int CMessageFamilyInvitedNotify::kRoleIDFieldNumber;
const int CMessageFamilyInvitedNotify::kFamilyIDFieldNumber;
const int CMessageFamilyInvitedNotify::kFamilyLevelFieldNumber;
const int CMessageFamilyInvitedNotify::kMemberNumFieldNumber;
const int CMessageFamilyInvitedNotify::kCorpsNameFieldNumber;
const int CMessageFamilyInvitedNotify::kGloryFieldNumber;
const int CMessageFamilyInvitedNotify::kStarLevelFieldNumber;
const int CMessageFamilyInvitedNotify::kNpcIDFieldNumber;
const int CMessageFamilyInvitedNotify::kFamilyHeaderNameFieldNumber;
const int CMessageFamilyInvitedNotify::kUnionIDFieldNumber;
const int CMessageFamilyInvitedNotify::kUnionNameFieldNumber;
#endif  // !_MSC_VER

CMessageFamilyInvitedNotify::CMessageFamilyInvitedNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFamilyInvitedNotify::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageFamilyInvitedNotify::CMessageFamilyInvitedNotify(const CMessageFamilyInvitedNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFamilyInvitedNotify::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  playername_ = const_cast< ::std::string*>(&_default_playername_);
  familtyname_ = const_cast< ::std::string*>(&_default_familtyname_);
  roleid_ = 0u;
  familyid_ = 0u;
  familylevel_ = 0u;
  membernum_ = 0u;
  corpsname_ = const_cast< ::std::string*>(&_default_corpsname_);
  glory_ = 0u;
  starlevel_ = 0u;
  npcid_ = 0u;
  familyheadername_ = const_cast< ::std::string*>(&_default_familyheadername_);
  unionid_ = 0u;
  unionname_ = const_cast< ::std::string*>(&_default_unionname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFamilyInvitedNotify::~CMessageFamilyInvitedNotify() {
  SharedDtor();
}

void CMessageFamilyInvitedNotify::SharedDtor() {
  if (playername_ != &_default_playername_) {
    delete playername_;
  }
  if (familtyname_ != &_default_familtyname_) {
    delete familtyname_;
  }
  if (corpsname_ != &_default_corpsname_) {
    delete corpsname_;
  }
  if (familyheadername_ != &_default_familyheadername_) {
    delete familyheadername_;
  }
  if (unionname_ != &_default_unionname_) {
    delete unionname_;
  }
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageFamilyInvitedNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFamilyInvitedNotify_descriptor_;
}

const CMessageFamilyInvitedNotify& CMessageFamilyInvitedNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFamilyInvitedNotify* CMessageFamilyInvitedNotify::default_instance_ = NULL;

CMessageFamilyInvitedNotify* CMessageFamilyInvitedNotify::New() const {
  return new CMessageFamilyInvitedNotify;
}

void CMessageFamilyInvitedNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    if (_has_bit(1)) {
      if (playername_ != &_default_playername_) {
        playername_->clear();
      }
    }
    if (_has_bit(2)) {
      if (familtyname_ != &_default_familtyname_) {
        familtyname_->clear();
      }
    }
    roleid_ = 0u;
    familyid_ = 0u;
    familylevel_ = 0u;
    membernum_ = 0u;
    if (_has_bit(7)) {
      if (corpsname_ != &_default_corpsname_) {
        corpsname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    glory_ = 0u;
    starlevel_ = 0u;
    npcid_ = 0u;
    if (_has_bit(11)) {
      if (familyheadername_ != &_default_familyheadername_) {
        familyheadername_->clear();
      }
    }
    unionid_ = 0u;
    if (_has_bit(13)) {
      if (unionname_ != &_default_unionname_) {
        unionname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFamilyInvitedNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(18)) goto parse_PlayerName;
        break;
      }
      
      // optional string PlayerName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_PlayerName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_playername()));
        if (input->ExpectTag(26)) goto parse_FamiltyName;
        break;
      }
      
      // optional string FamiltyName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FamiltyName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_familtyname()));
        if (input->ExpectTag(32)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_FamilyID;
        break;
      }
      
      // optional uint32 FamilyID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_FamilyLevel;
        break;
      }
      
      // optional uint32 FamilyLevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familylevel_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_MemberNum;
        break;
      }
      
      // optional uint32 MemberNum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MemberNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &membernum_));
        _set_bit(6);
        if (input->ExpectTag(66)) goto parse_CorpsName;
        break;
      }
      
      // optional string CorpsName = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_corpsname()));
        if (input->ExpectTag(72)) goto parse_Glory;
        break;
      }
      
      // optional uint32 Glory = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Glory:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &glory_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_StarLevel;
        break;
      }
      
      // optional uint32 StarLevel = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_StarLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &starlevel_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_NpcID;
        break;
      }
      
      // optional uint32 NpcID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(10);
        if (input->ExpectTag(98)) goto parse_FamilyHeaderName;
        break;
      }
      
      // optional string FamilyHeaderName = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FamilyHeaderName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_familyheadername()));
        if (input->ExpectTag(104)) goto parse_UnionID;
        break;
      }
      
      // optional uint32 UnionID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UnionID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &unionid_));
        _set_bit(12);
        if (input->ExpectTag(114)) goto parse_UnionName;
        break;
      }
      
      // optional string UnionName = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_UnionName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_unionname()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageFamilyInvitedNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFamilyInvitedNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional string PlayerName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->playername(), output);
  }
  
  // optional string FamiltyName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->familtyname(), output);
  }
  
  // optional uint32 RoleID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->roleid(), output);
  }
  
  // optional uint32 FamilyID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->familyid(), output);
  }
  
  // optional uint32 FamilyLevel = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->familylevel(), output);
  }
  
  // optional uint32 MemberNum = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->membernum(), output);
  }
  
  // optional string CorpsName = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteString(8, this->corpsname(), output);
  }
  
  // optional uint32 Glory = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->glory(), output);
  }
  
  // optional uint32 StarLevel = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->starlevel(), output);
  }
  
  // optional uint32 NpcID = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->npcid(), output);
  }
  
  // optional string FamilyHeaderName = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteString(12, this->familyheadername(), output);
  }
  
  // optional uint32 UnionID = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->unionid(), output);
  }
  
  // optional string UnionName = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteString(14, this->unionname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFamilyInvitedNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional string PlayerName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->playername(), target);
  }
  
  // optional string FamiltyName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->familtyname(), target);
  }
  
  // optional uint32 RoleID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->roleid(), target);
  }
  
  // optional uint32 FamilyID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->familyid(), target);
  }
  
  // optional uint32 FamilyLevel = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->familylevel(), target);
  }
  
  // optional uint32 MemberNum = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->membernum(), target);
  }
  
  // optional string CorpsName = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(8, this->corpsname(), target);
  }
  
  // optional uint32 Glory = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->glory(), target);
  }
  
  // optional uint32 StarLevel = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->starlevel(), target);
  }
  
  // optional uint32 NpcID = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->npcid(), target);
  }
  
  // optional string FamilyHeaderName = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(12, this->familyheadername(), target);
  }
  
  // optional uint32 UnionID = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->unionid(), target);
  }
  
  // optional string UnionName = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(14, this->unionname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFamilyInvitedNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional string PlayerName = 2;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->playername());
    }
    
    // optional string FamiltyName = 3;
    if (has_familtyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->familtyname());
    }
    
    // optional uint32 RoleID = 4;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 FamilyID = 5;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
    // optional uint32 FamilyLevel = 6;
    if (has_familylevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familylevel());
    }
    
    // optional uint32 MemberNum = 7;
    if (has_membernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->membernum());
    }
    
    // optional string CorpsName = 8;
    if (has_corpsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->corpsname());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 Glory = 9;
    if (has_glory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->glory());
    }
    
    // optional uint32 StarLevel = 10;
    if (has_starlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->starlevel());
    }
    
    // optional uint32 NpcID = 11;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
    // optional string FamilyHeaderName = 12;
    if (has_familyheadername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->familyheadername());
    }
    
    // optional uint32 UnionID = 13;
    if (has_unionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->unionid());
    }
    
    // optional string UnionName = 14;
    if (has_unionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->unionname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFamilyInvitedNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFamilyInvitedNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFamilyInvitedNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFamilyInvitedNotify::MergeFrom(const CMessageFamilyInvitedNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_playername(from.playername());
    }
    if (from._has_bit(2)) {
      set_familtyname(from.familtyname());
    }
    if (from._has_bit(3)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(4)) {
      set_familyid(from.familyid());
    }
    if (from._has_bit(5)) {
      set_familylevel(from.familylevel());
    }
    if (from._has_bit(6)) {
      set_membernum(from.membernum());
    }
    if (from._has_bit(7)) {
      set_corpsname(from.corpsname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_glory(from.glory());
    }
    if (from._has_bit(9)) {
      set_starlevel(from.starlevel());
    }
    if (from._has_bit(10)) {
      set_npcid(from.npcid());
    }
    if (from._has_bit(11)) {
      set_familyheadername(from.familyheadername());
    }
    if (from._has_bit(12)) {
      set_unionid(from.unionid());
    }
    if (from._has_bit(13)) {
      set_unionname(from.unionname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFamilyInvitedNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFamilyInvitedNotify::CopyFrom(const CMessageFamilyInvitedNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFamilyInvitedNotify::Swap(CMessageFamilyInvitedNotify* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(playername_, other->playername_);
    std::swap(familtyname_, other->familtyname_);
    std::swap(roleid_, other->roleid_);
    std::swap(familyid_, other->familyid_);
    std::swap(familylevel_, other->familylevel_);
    std::swap(membernum_, other->membernum_);
    std::swap(corpsname_, other->corpsname_);
    std::swap(glory_, other->glory_);
    std::swap(starlevel_, other->starlevel_);
    std::swap(npcid_, other->npcid_);
    std::swap(familyheadername_, other->familyheadername_);
    std::swap(unionid_, other->unionid_);
    std::swap(unionname_, other->unionname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFamilyInvitedNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFamilyInvitedNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFamilyInvitedNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFamilyInvitedNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageReplyFamilyInviteRequest::kHeadMsgFieldNumber;
const int CMessageReplyFamilyInviteRequest::kResultFieldNumber;
const int CMessageReplyFamilyInviteRequest::kFamilyIDFieldNumber;
const int CMessageReplyFamilyInviteRequest::kInvitingRoleIDFieldNumber;
#endif  // !_MSC_VER

CMessageReplyFamilyInviteRequest::CMessageReplyFamilyInviteRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageReplyFamilyInviteRequest::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageReplyFamilyInviteRequest::CMessageReplyFamilyInviteRequest(const CMessageReplyFamilyInviteRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageReplyFamilyInviteRequest::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  result_ = 0u;
  familyid_ = 0u;
  invitingroleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageReplyFamilyInviteRequest::~CMessageReplyFamilyInviteRequest() {
  SharedDtor();
}

void CMessageReplyFamilyInviteRequest::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageReplyFamilyInviteRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageReplyFamilyInviteRequest_descriptor_;
}

const CMessageReplyFamilyInviteRequest& CMessageReplyFamilyInviteRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageReplyFamilyInviteRequest* CMessageReplyFamilyInviteRequest::default_instance_ = NULL;

CMessageReplyFamilyInviteRequest* CMessageReplyFamilyInviteRequest::New() const {
  return new CMessageReplyFamilyInviteRequest;
}

void CMessageReplyFamilyInviteRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    result_ = 0u;
    familyid_ = 0u;
    invitingroleid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageReplyFamilyInviteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_FamilyID;
        break;
      }
      
      // optional uint32 FamilyID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_InvitingRoleID;
        break;
      }
      
      // optional uint32 InvitingRoleID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InvitingRoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &invitingroleid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageReplyFamilyInviteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageReplyFamilyInviteRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  // optional uint32 FamilyID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->familyid(), output);
  }
  
  // optional uint32 InvitingRoleID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->invitingroleid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageReplyFamilyInviteRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  // optional uint32 FamilyID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->familyid(), target);
  }
  
  // optional uint32 InvitingRoleID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->invitingroleid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageReplyFamilyInviteRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 FamilyID = 3;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
    // optional uint32 InvitingRoleID = 4;
    if (has_invitingroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->invitingroleid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageReplyFamilyInviteRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageReplyFamilyInviteRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageReplyFamilyInviteRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageReplyFamilyInviteRequest::MergeFrom(const CMessageReplyFamilyInviteRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_familyid(from.familyid());
    }
    if (from._has_bit(3)) {
      set_invitingroleid(from.invitingroleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageReplyFamilyInviteRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReplyFamilyInviteRequest::CopyFrom(const CMessageReplyFamilyInviteRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReplyFamilyInviteRequest::Swap(CMessageReplyFamilyInviteRequest* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(result_, other->result_);
    std::swap(familyid_, other->familyid_);
    std::swap(invitingroleid_, other->invitingroleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageReplyFamilyInviteRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageReplyFamilyInviteRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageReplyFamilyInviteRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageReplyFamilyInviteRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageReplyFamilyInviteResponse::_default_familyname_;
const ::std::string CMessageReplyFamilyInviteResponse::_default_corpsname_;
const ::std::string CMessageReplyFamilyInviteResponse::_default_unionname_;
#ifndef _MSC_VER
const int CMessageReplyFamilyInviteResponse::kHeadMsgFieldNumber;
const int CMessageReplyFamilyInviteResponse::kErrcodeFieldNumber;
const int CMessageReplyFamilyInviteResponse::kFamilyIDFieldNumber;
const int CMessageReplyFamilyInviteResponse::kFamilyNameFieldNumber;
const int CMessageReplyFamilyInviteResponse::kResultFieldNumber;
const int CMessageReplyFamilyInviteResponse::kCorpsIDFieldNumber;
const int CMessageReplyFamilyInviteResponse::kCorpsNameFieldNumber;
const int CMessageReplyFamilyInviteResponse::kFamilyHeaderIDFieldNumber;
const int CMessageReplyFamilyInviteResponse::kCorpsHeaderIDFieldNumber;
const int CMessageReplyFamilyInviteResponse::kUnionIDFieldNumber;
const int CMessageReplyFamilyInviteResponse::kUnionNameFieldNumber;
#endif  // !_MSC_VER

CMessageReplyFamilyInviteResponse::CMessageReplyFamilyInviteResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageReplyFamilyInviteResponse::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageReplyFamilyInviteResponse::CMessageReplyFamilyInviteResponse(const CMessageReplyFamilyInviteResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageReplyFamilyInviteResponse::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  errcode_ = 0u;
  familyid_ = 0u;
  familyname_ = const_cast< ::std::string*>(&_default_familyname_);
  result_ = 0u;
  corpsid_ = 0u;
  corpsname_ = const_cast< ::std::string*>(&_default_corpsname_);
  familyheaderid_ = 0u;
  corpsheaderid_ = 0u;
  unionid_ = 0u;
  unionname_ = const_cast< ::std::string*>(&_default_unionname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageReplyFamilyInviteResponse::~CMessageReplyFamilyInviteResponse() {
  SharedDtor();
}

void CMessageReplyFamilyInviteResponse::SharedDtor() {
  if (familyname_ != &_default_familyname_) {
    delete familyname_;
  }
  if (corpsname_ != &_default_corpsname_) {
    delete corpsname_;
  }
  if (unionname_ != &_default_unionname_) {
    delete unionname_;
  }
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageReplyFamilyInviteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageReplyFamilyInviteResponse_descriptor_;
}

const CMessageReplyFamilyInviteResponse& CMessageReplyFamilyInviteResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageReplyFamilyInviteResponse* CMessageReplyFamilyInviteResponse::default_instance_ = NULL;

CMessageReplyFamilyInviteResponse* CMessageReplyFamilyInviteResponse::New() const {
  return new CMessageReplyFamilyInviteResponse;
}

void CMessageReplyFamilyInviteResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    errcode_ = 0u;
    familyid_ = 0u;
    if (_has_bit(3)) {
      if (familyname_ != &_default_familyname_) {
        familyname_->clear();
      }
    }
    result_ = 0u;
    corpsid_ = 0u;
    if (_has_bit(6)) {
      if (corpsname_ != &_default_corpsname_) {
        corpsname_->clear();
      }
    }
    familyheaderid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    corpsheaderid_ = 0u;
    unionid_ = 0u;
    if (_has_bit(10)) {
      if (unionname_ != &_default_unionname_) {
        unionname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageReplyFamilyInviteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_FamilyID;
        break;
      }
      
      // optional uint32 FamilyID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_FamilyName;
        break;
      }
      
      // optional string FamilyName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FamilyName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_familyname()));
        if (input->ExpectTag(40)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_CorpsID;
        break;
      }
      
      // optional uint32 CorpsID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(5);
        if (input->ExpectTag(58)) goto parse_CorpsName;
        break;
      }
      
      // optional string CorpsName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_corpsname()));
        if (input->ExpectTag(64)) goto parse_FamilyHeaderID;
        break;
      }
      
      // optional uint32 FamilyHeaderID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyHeaderID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyheaderid_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_CorpsHeaderID;
        break;
      }
      
      // optional uint32 CorpsHeaderID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsHeaderID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsheaderid_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_UnionID;
        break;
      }
      
      // optional uint32 UnionID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UnionID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &unionid_));
        _set_bit(9);
        if (input->ExpectTag(90)) goto parse_UnionName;
        break;
      }
      
      // optional string UnionName = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_UnionName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_unionname()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageReplyFamilyInviteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageReplyFamilyInviteResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  // optional uint32 FamilyID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->familyid(), output);
  }
  
  // optional string FamilyName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->familyname(), output);
  }
  
  // optional uint32 Result = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->result(), output);
  }
  
  // optional uint32 CorpsID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->corpsid(), output);
  }
  
  // optional string CorpsName = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteString(7, this->corpsname(), output);
  }
  
  // optional uint32 FamilyHeaderID = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->familyheaderid(), output);
  }
  
  // optional uint32 CorpsHeaderID = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->corpsheaderid(), output);
  }
  
  // optional uint32 UnionID = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->unionid(), output);
  }
  
  // optional string UnionName = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteString(11, this->unionname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageReplyFamilyInviteResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  // optional uint32 FamilyID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->familyid(), target);
  }
  
  // optional string FamilyName = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->familyname(), target);
  }
  
  // optional uint32 Result = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->result(), target);
  }
  
  // optional uint32 CorpsID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->corpsid(), target);
  }
  
  // optional string CorpsName = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(7, this->corpsname(), target);
  }
  
  // optional uint32 FamilyHeaderID = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->familyheaderid(), target);
  }
  
  // optional uint32 CorpsHeaderID = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->corpsheaderid(), target);
  }
  
  // optional uint32 UnionID = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->unionid(), target);
  }
  
  // optional string UnionName = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(11, this->unionname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageReplyFamilyInviteResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional uint32 FamilyID = 3;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
    // optional string FamilyName = 4;
    if (has_familyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->familyname());
    }
    
    // optional uint32 Result = 5;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 CorpsID = 6;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
    // optional string CorpsName = 7;
    if (has_corpsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->corpsname());
    }
    
    // optional uint32 FamilyHeaderID = 8;
    if (has_familyheaderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyheaderid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 CorpsHeaderID = 9;
    if (has_corpsheaderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsheaderid());
    }
    
    // optional uint32 UnionID = 10;
    if (has_unionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->unionid());
    }
    
    // optional string UnionName = 11;
    if (has_unionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->unionname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageReplyFamilyInviteResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageReplyFamilyInviteResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageReplyFamilyInviteResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageReplyFamilyInviteResponse::MergeFrom(const CMessageReplyFamilyInviteResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(2)) {
      set_familyid(from.familyid());
    }
    if (from._has_bit(3)) {
      set_familyname(from.familyname());
    }
    if (from._has_bit(4)) {
      set_result(from.result());
    }
    if (from._has_bit(5)) {
      set_corpsid(from.corpsid());
    }
    if (from._has_bit(6)) {
      set_corpsname(from.corpsname());
    }
    if (from._has_bit(7)) {
      set_familyheaderid(from.familyheaderid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_corpsheaderid(from.corpsheaderid());
    }
    if (from._has_bit(9)) {
      set_unionid(from.unionid());
    }
    if (from._has_bit(10)) {
      set_unionname(from.unionname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageReplyFamilyInviteResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReplyFamilyInviteResponse::CopyFrom(const CMessageReplyFamilyInviteResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReplyFamilyInviteResponse::Swap(CMessageReplyFamilyInviteResponse* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(errcode_, other->errcode_);
    std::swap(familyid_, other->familyid_);
    std::swap(familyname_, other->familyname_);
    std::swap(result_, other->result_);
    std::swap(corpsid_, other->corpsid_);
    std::swap(corpsname_, other->corpsname_);
    std::swap(familyheaderid_, other->familyheaderid_);
    std::swap(corpsheaderid_, other->corpsheaderid_);
    std::swap(unionid_, other->unionid_);
    std::swap(unionname_, other->unionname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageReplyFamilyInviteResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageReplyFamilyInviteResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageReplyFamilyInviteResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageReplyFamilyInviteResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageApplyFamilyRequest::_default_familyname_;
#ifndef _MSC_VER
const int CMessageApplyFamilyRequest::kHeadMsgFieldNumber;
const int CMessageApplyFamilyRequest::kCharIDFieldNumber;
const int CMessageApplyFamilyRequest::kFamilyIDFieldNumber;
const int CMessageApplyFamilyRequest::kFamilyNameFieldNumber;
#endif  // !_MSC_VER

CMessageApplyFamilyRequest::CMessageApplyFamilyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageApplyFamilyRequest::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageApplyFamilyRequest::CMessageApplyFamilyRequest(const CMessageApplyFamilyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageApplyFamilyRequest::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  charid_ = 0u;
  familyid_ = 0u;
  familyname_ = const_cast< ::std::string*>(&_default_familyname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageApplyFamilyRequest::~CMessageApplyFamilyRequest() {
  SharedDtor();
}

void CMessageApplyFamilyRequest::SharedDtor() {
  if (familyname_ != &_default_familyname_) {
    delete familyname_;
  }
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageApplyFamilyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageApplyFamilyRequest_descriptor_;
}

const CMessageApplyFamilyRequest& CMessageApplyFamilyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageApplyFamilyRequest* CMessageApplyFamilyRequest::default_instance_ = NULL;

CMessageApplyFamilyRequest* CMessageApplyFamilyRequest::New() const {
  return new CMessageApplyFamilyRequest;
}

void CMessageApplyFamilyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    charid_ = 0u;
    familyid_ = 0u;
    if (_has_bit(3)) {
      if (familyname_ != &_default_familyname_) {
        familyname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageApplyFamilyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_FamilyID;
        break;
      }
      
      // optional uint32 FamilyID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_FamilyName;
        break;
      }
      
      // optional string FamilyName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FamilyName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_familyname()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageApplyFamilyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageApplyFamilyRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charid(), output);
  }
  
  // optional uint32 FamilyID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->familyid(), output);
  }
  
  // optional string FamilyName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->familyname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageApplyFamilyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charid(), target);
  }
  
  // optional uint32 FamilyID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->familyid(), target);
  }
  
  // optional string FamilyName = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->familyname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageApplyFamilyRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 CharID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 FamilyID = 3;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
    // optional string FamilyName = 4;
    if (has_familyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->familyname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageApplyFamilyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageApplyFamilyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageApplyFamilyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageApplyFamilyRequest::MergeFrom(const CMessageApplyFamilyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_charid(from.charid());
    }
    if (from._has_bit(2)) {
      set_familyid(from.familyid());
    }
    if (from._has_bit(3)) {
      set_familyname(from.familyname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageApplyFamilyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageApplyFamilyRequest::CopyFrom(const CMessageApplyFamilyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageApplyFamilyRequest::Swap(CMessageApplyFamilyRequest* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(charid_, other->charid_);
    std::swap(familyid_, other->familyid_);
    std::swap(familyname_, other->familyname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageApplyFamilyRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageApplyFamilyRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageApplyFamilyRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageApplyFamilyRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageApplyFamilyResponse::_default_familyname_;
#ifndef _MSC_VER
const int CMessageApplyFamilyResponse::kHeadMsgFieldNumber;
const int CMessageApplyFamilyResponse::kErrcodeFieldNumber;
const int CMessageApplyFamilyResponse::kFamilyNameFieldNumber;
const int CMessageApplyFamilyResponse::kFamilyIDFieldNumber;
#endif  // !_MSC_VER

CMessageApplyFamilyResponse::CMessageApplyFamilyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageApplyFamilyResponse::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageApplyFamilyResponse::CMessageApplyFamilyResponse(const CMessageApplyFamilyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageApplyFamilyResponse::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  errcode_ = 0u;
  familyname_ = const_cast< ::std::string*>(&_default_familyname_);
  familyid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageApplyFamilyResponse::~CMessageApplyFamilyResponse() {
  SharedDtor();
}

void CMessageApplyFamilyResponse::SharedDtor() {
  if (familyname_ != &_default_familyname_) {
    delete familyname_;
  }
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageApplyFamilyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageApplyFamilyResponse_descriptor_;
}

const CMessageApplyFamilyResponse& CMessageApplyFamilyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageApplyFamilyResponse* CMessageApplyFamilyResponse::default_instance_ = NULL;

CMessageApplyFamilyResponse* CMessageApplyFamilyResponse::New() const {
  return new CMessageApplyFamilyResponse;
}

void CMessageApplyFamilyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    errcode_ = 0u;
    if (_has_bit(2)) {
      if (familyname_ != &_default_familyname_) {
        familyname_->clear();
      }
    }
    familyid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageApplyFamilyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_FamilyName;
        break;
      }
      
      // optional string FamilyName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FamilyName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_familyname()));
        if (input->ExpectTag(32)) goto parse_FamilyID;
        break;
      }
      
      // optional uint32 FamilyID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageApplyFamilyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageApplyFamilyResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  // optional string FamilyName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->familyname(), output);
  }
  
  // optional uint32 FamilyID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->familyid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageApplyFamilyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  // optional string FamilyName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->familyname(), target);
  }
  
  // optional uint32 FamilyID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->familyid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageApplyFamilyResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional string FamilyName = 3;
    if (has_familyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->familyname());
    }
    
    // optional uint32 FamilyID = 4;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageApplyFamilyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageApplyFamilyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageApplyFamilyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageApplyFamilyResponse::MergeFrom(const CMessageApplyFamilyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(2)) {
      set_familyname(from.familyname());
    }
    if (from._has_bit(3)) {
      set_familyid(from.familyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageApplyFamilyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageApplyFamilyResponse::CopyFrom(const CMessageApplyFamilyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageApplyFamilyResponse::Swap(CMessageApplyFamilyResponse* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(errcode_, other->errcode_);
    std::swap(familyname_, other->familyname_);
    std::swap(familyid_, other->familyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageApplyFamilyResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageApplyFamilyResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageApplyFamilyResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageApplyFamilyResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageMemberApplyNotify::_default_playername_;
#ifndef _MSC_VER
const int CMessageMemberApplyNotify::kHeadMsgFieldNumber;
const int CMessageMemberApplyNotify::kPlayerNameFieldNumber;
const int CMessageMemberApplyNotify::kRoleIDFieldNumber;
const int CMessageMemberApplyNotify::kRoleLevelFieldNumber;
const int CMessageMemberApplyNotify::kRoleMetierFieldNumber;
const int CMessageMemberApplyNotify::kFaceTypeFieldNumber;
const int CMessageMemberApplyNotify::kRoleSexFieldNumber;
const int CMessageMemberApplyNotify::kLineIDFieldNumber;
const int CMessageMemberApplyNotify::kMapIDFieldNumber;
#endif  // !_MSC_VER

CMessageMemberApplyNotify::CMessageMemberApplyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageMemberApplyNotify::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageMemberApplyNotify::CMessageMemberApplyNotify(const CMessageMemberApplyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageMemberApplyNotify::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  playername_ = const_cast< ::std::string*>(&_default_playername_);
  roleid_ = 0u;
  rolelevel_ = 0u;
  rolemetier_ = 0u;
  facetype_ = 0u;
  rolesex_ = 0u;
  lineid_ = 0u;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageMemberApplyNotify::~CMessageMemberApplyNotify() {
  SharedDtor();
}

void CMessageMemberApplyNotify::SharedDtor() {
  if (playername_ != &_default_playername_) {
    delete playername_;
  }
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageMemberApplyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageMemberApplyNotify_descriptor_;
}

const CMessageMemberApplyNotify& CMessageMemberApplyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageMemberApplyNotify* CMessageMemberApplyNotify::default_instance_ = NULL;

CMessageMemberApplyNotify* CMessageMemberApplyNotify::New() const {
  return new CMessageMemberApplyNotify;
}

void CMessageMemberApplyNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    if (_has_bit(1)) {
      if (playername_ != &_default_playername_) {
        playername_->clear();
      }
    }
    roleid_ = 0u;
    rolelevel_ = 0u;
    rolemetier_ = 0u;
    facetype_ = 0u;
    rolesex_ = 0u;
    lineid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    mapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageMemberApplyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(18)) goto parse_PlayerName;
        break;
      }
      
      // optional string PlayerName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_PlayerName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_playername()));
        if (input->ExpectTag(24)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_RoleLevel;
        break;
      }
      
      // optional uint32 RoleLevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rolelevel_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_RoleMetier;
        break;
      }
      
      // optional uint32 RoleMetier = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleMetier:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rolemetier_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_FaceType;
        break;
      }
      
      // optional uint32 FaceType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FaceType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &facetype_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_RoleSex;
        break;
      }
      
      // optional uint32 RoleSex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleSex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rolesex_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_LineID;
        break;
      }
      
      // optional uint32 LineID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lineid_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(8);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageMemberApplyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageMemberApplyNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional string PlayerName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->playername(), output);
  }
  
  // optional uint32 RoleID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->roleid(), output);
  }
  
  // optional uint32 RoleLevel = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->rolelevel(), output);
  }
  
  // optional uint32 RoleMetier = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->rolemetier(), output);
  }
  
  // optional uint32 FaceType = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->facetype(), output);
  }
  
  // optional uint32 RoleSex = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->rolesex(), output);
  }
  
  // optional uint32 LineID = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->lineid(), output);
  }
  
  // optional uint32 MapID = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->mapid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageMemberApplyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional string PlayerName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->playername(), target);
  }
  
  // optional uint32 RoleID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->roleid(), target);
  }
  
  // optional uint32 RoleLevel = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->rolelevel(), target);
  }
  
  // optional uint32 RoleMetier = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->rolemetier(), target);
  }
  
  // optional uint32 FaceType = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->facetype(), target);
  }
  
  // optional uint32 RoleSex = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->rolesex(), target);
  }
  
  // optional uint32 LineID = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->lineid(), target);
  }
  
  // optional uint32 MapID = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->mapid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageMemberApplyNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional string PlayerName = 2;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->playername());
    }
    
    // optional uint32 RoleID = 3;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 RoleLevel = 4;
    if (has_rolelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rolelevel());
    }
    
    // optional uint32 RoleMetier = 5;
    if (has_rolemetier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rolemetier());
    }
    
    // optional uint32 FaceType = 6;
    if (has_facetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->facetype());
    }
    
    // optional uint32 RoleSex = 7;
    if (has_rolesex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rolesex());
    }
    
    // optional uint32 LineID = 8;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lineid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 MapID = 9;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageMemberApplyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageMemberApplyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageMemberApplyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageMemberApplyNotify::MergeFrom(const CMessageMemberApplyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_playername(from.playername());
    }
    if (from._has_bit(2)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(3)) {
      set_rolelevel(from.rolelevel());
    }
    if (from._has_bit(4)) {
      set_rolemetier(from.rolemetier());
    }
    if (from._has_bit(5)) {
      set_facetype(from.facetype());
    }
    if (from._has_bit(6)) {
      set_rolesex(from.rolesex());
    }
    if (from._has_bit(7)) {
      set_lineid(from.lineid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageMemberApplyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMemberApplyNotify::CopyFrom(const CMessageMemberApplyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMemberApplyNotify::Swap(CMessageMemberApplyNotify* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(playername_, other->playername_);
    std::swap(roleid_, other->roleid_);
    std::swap(rolelevel_, other->rolelevel_);
    std::swap(rolemetier_, other->rolemetier_);
    std::swap(facetype_, other->facetype_);
    std::swap(rolesex_, other->rolesex_);
    std::swap(lineid_, other->lineid_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageMemberApplyNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageMemberApplyNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageMemberApplyNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageMemberApplyNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageReplyMemberApplyRequest::kHeadMsgFieldNumber;
const int CMessageReplyMemberApplyRequest::kResultFieldNumber;
const int CMessageReplyMemberApplyRequest::kRoleIDFieldNumber;
#endif  // !_MSC_VER

CMessageReplyMemberApplyRequest::CMessageReplyMemberApplyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageReplyMemberApplyRequest::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageReplyMemberApplyRequest::CMessageReplyMemberApplyRequest(const CMessageReplyMemberApplyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageReplyMemberApplyRequest::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  result_ = 0u;
  roleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageReplyMemberApplyRequest::~CMessageReplyMemberApplyRequest() {
  SharedDtor();
}

void CMessageReplyMemberApplyRequest::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageReplyMemberApplyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageReplyMemberApplyRequest_descriptor_;
}

const CMessageReplyMemberApplyRequest& CMessageReplyMemberApplyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageReplyMemberApplyRequest* CMessageReplyMemberApplyRequest::default_instance_ = NULL;

CMessageReplyMemberApplyRequest* CMessageReplyMemberApplyRequest::New() const {
  return new CMessageReplyMemberApplyRequest;
}

void CMessageReplyMemberApplyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    result_ = 0u;
    roleid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageReplyMemberApplyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageReplyMemberApplyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageReplyMemberApplyRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  // optional uint32 RoleID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->roleid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageReplyMemberApplyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  // optional uint32 RoleID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->roleid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageReplyMemberApplyRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 RoleID = 3;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageReplyMemberApplyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageReplyMemberApplyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageReplyMemberApplyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageReplyMemberApplyRequest::MergeFrom(const CMessageReplyMemberApplyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageReplyMemberApplyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReplyMemberApplyRequest::CopyFrom(const CMessageReplyMemberApplyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReplyMemberApplyRequest::Swap(CMessageReplyMemberApplyRequest* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(result_, other->result_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageReplyMemberApplyRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageReplyMemberApplyRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageReplyMemberApplyRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageReplyMemberApplyRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageReplyMemberApplyResponse::_default_playername_;
#ifndef _MSC_VER
const int CMessageReplyMemberApplyResponse::kHeadMsgFieldNumber;
const int CMessageReplyMemberApplyResponse::kErrcodeFieldNumber;
const int CMessageReplyMemberApplyResponse::kPlayerNameFieldNumber;
const int CMessageReplyMemberApplyResponse::kCharIDFieldNumber;
const int CMessageReplyMemberApplyResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMessageReplyMemberApplyResponse::CMessageReplyMemberApplyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageReplyMemberApplyResponse::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageReplyMemberApplyResponse::CMessageReplyMemberApplyResponse(const CMessageReplyMemberApplyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageReplyMemberApplyResponse::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  errcode_ = 0u;
  playername_ = const_cast< ::std::string*>(&_default_playername_);
  charid_ = 0u;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageReplyMemberApplyResponse::~CMessageReplyMemberApplyResponse() {
  SharedDtor();
}

void CMessageReplyMemberApplyResponse::SharedDtor() {
  if (playername_ != &_default_playername_) {
    delete playername_;
  }
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageReplyMemberApplyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageReplyMemberApplyResponse_descriptor_;
}

const CMessageReplyMemberApplyResponse& CMessageReplyMemberApplyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageReplyMemberApplyResponse* CMessageReplyMemberApplyResponse::default_instance_ = NULL;

CMessageReplyMemberApplyResponse* CMessageReplyMemberApplyResponse::New() const {
  return new CMessageReplyMemberApplyResponse;
}

void CMessageReplyMemberApplyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    errcode_ = 0u;
    if (_has_bit(2)) {
      if (playername_ != &_default_playername_) {
        playername_->clear();
      }
    }
    charid_ = 0u;
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageReplyMemberApplyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_PlayerName;
        break;
      }
      
      // optional string PlayerName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_PlayerName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_playername()));
        if (input->ExpectTag(32)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageReplyMemberApplyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageReplyMemberApplyResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  // optional string PlayerName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->playername(), output);
  }
  
  // optional uint32 CharID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->charid(), output);
  }
  
  // optional uint32 Result = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageReplyMemberApplyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  // optional string PlayerName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->playername(), target);
  }
  
  // optional uint32 CharID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->charid(), target);
  }
  
  // optional uint32 Result = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageReplyMemberApplyResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional string PlayerName = 3;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->playername());
    }
    
    // optional uint32 CharID = 4;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 Result = 5;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageReplyMemberApplyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageReplyMemberApplyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageReplyMemberApplyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageReplyMemberApplyResponse::MergeFrom(const CMessageReplyMemberApplyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(2)) {
      set_playername(from.playername());
    }
    if (from._has_bit(3)) {
      set_charid(from.charid());
    }
    if (from._has_bit(4)) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageReplyMemberApplyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReplyMemberApplyResponse::CopyFrom(const CMessageReplyMemberApplyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReplyMemberApplyResponse::Swap(CMessageReplyMemberApplyResponse* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(errcode_, other->errcode_);
    std::swap(playername_, other->playername_);
    std::swap(charid_, other->charid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageReplyMemberApplyResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageReplyMemberApplyResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageReplyMemberApplyResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageReplyMemberApplyResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageApplyFamilySuccessNotify::_default_familyname_;
const ::std::string CMessageApplyFamilySuccessNotify::_default_corpsname_;
const ::std::string CMessageApplyFamilySuccessNotify::_default_unionname_;
#ifndef _MSC_VER
const int CMessageApplyFamilySuccessNotify::kHeadMsgFieldNumber;
const int CMessageApplyFamilySuccessNotify::kResultFieldNumber;
const int CMessageApplyFamilySuccessNotify::kFamilyIDFieldNumber;
const int CMessageApplyFamilySuccessNotify::kFamilyNameFieldNumber;
const int CMessageApplyFamilySuccessNotify::kCorpsIDFieldNumber;
const int CMessageApplyFamilySuccessNotify::kCorpsNameFieldNumber;
const int CMessageApplyFamilySuccessNotify::kFamilyHeaderFieldNumber;
const int CMessageApplyFamilySuccessNotify::kCorpsHeaderFieldNumber;
const int CMessageApplyFamilySuccessNotify::kUnionIDFieldNumber;
const int CMessageApplyFamilySuccessNotify::kUnionNameFieldNumber;
#endif  // !_MSC_VER

CMessageApplyFamilySuccessNotify::CMessageApplyFamilySuccessNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageApplyFamilySuccessNotify::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageApplyFamilySuccessNotify::CMessageApplyFamilySuccessNotify(const CMessageApplyFamilySuccessNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageApplyFamilySuccessNotify::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  result_ = 0u;
  familyid_ = 0u;
  familyname_ = const_cast< ::std::string*>(&_default_familyname_);
  corpsid_ = 0u;
  corpsname_ = const_cast< ::std::string*>(&_default_corpsname_);
  familyheader_ = 0u;
  corpsheader_ = 0u;
  unionid_ = 0u;
  unionname_ = const_cast< ::std::string*>(&_default_unionname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageApplyFamilySuccessNotify::~CMessageApplyFamilySuccessNotify() {
  SharedDtor();
}

void CMessageApplyFamilySuccessNotify::SharedDtor() {
  if (familyname_ != &_default_familyname_) {
    delete familyname_;
  }
  if (corpsname_ != &_default_corpsname_) {
    delete corpsname_;
  }
  if (unionname_ != &_default_unionname_) {
    delete unionname_;
  }
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageApplyFamilySuccessNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageApplyFamilySuccessNotify_descriptor_;
}

const CMessageApplyFamilySuccessNotify& CMessageApplyFamilySuccessNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageApplyFamilySuccessNotify* CMessageApplyFamilySuccessNotify::default_instance_ = NULL;

CMessageApplyFamilySuccessNotify* CMessageApplyFamilySuccessNotify::New() const {
  return new CMessageApplyFamilySuccessNotify;
}

void CMessageApplyFamilySuccessNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    result_ = 0u;
    familyid_ = 0u;
    if (_has_bit(3)) {
      if (familyname_ != &_default_familyname_) {
        familyname_->clear();
      }
    }
    corpsid_ = 0u;
    if (_has_bit(5)) {
      if (corpsname_ != &_default_corpsname_) {
        corpsname_->clear();
      }
    }
    familyheader_ = 0u;
    corpsheader_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    unionid_ = 0u;
    if (_has_bit(9)) {
      if (unionname_ != &_default_unionname_) {
        unionname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageApplyFamilySuccessNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_FamilyID;
        break;
      }
      
      // optional uint32 FamilyID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_FamilyName;
        break;
      }
      
      // optional string FamilyName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FamilyName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_familyname()));
        if (input->ExpectTag(40)) goto parse_CorpsID;
        break;
      }
      
      // optional uint32 CorpsID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_CorpsName;
        break;
      }
      
      // optional string CorpsName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_corpsname()));
        if (input->ExpectTag(56)) goto parse_FamilyHeader;
        break;
      }
      
      // optional uint32 FamilyHeader = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyHeader:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyheader_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_CorpsHeader;
        break;
      }
      
      // optional uint32 CorpsHeader = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsHeader:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsheader_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_UnionID;
        break;
      }
      
      // optional uint32 UnionID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UnionID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &unionid_));
        _set_bit(8);
        if (input->ExpectTag(82)) goto parse_UnionName;
        break;
      }
      
      // optional string UnionName = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_UnionName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_unionname()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageApplyFamilySuccessNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageApplyFamilySuccessNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  // optional uint32 FamilyID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->familyid(), output);
  }
  
  // optional string FamilyName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->familyname(), output);
  }
  
  // optional uint32 CorpsID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->corpsid(), output);
  }
  
  // optional string CorpsName = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteString(6, this->corpsname(), output);
  }
  
  // optional uint32 FamilyHeader = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->familyheader(), output);
  }
  
  // optional uint32 CorpsHeader = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->corpsheader(), output);
  }
  
  // optional uint32 UnionID = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->unionid(), output);
  }
  
  // optional string UnionName = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteString(10, this->unionname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageApplyFamilySuccessNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  // optional uint32 FamilyID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->familyid(), target);
  }
  
  // optional string FamilyName = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->familyname(), target);
  }
  
  // optional uint32 CorpsID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->corpsid(), target);
  }
  
  // optional string CorpsName = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(6, this->corpsname(), target);
  }
  
  // optional uint32 FamilyHeader = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->familyheader(), target);
  }
  
  // optional uint32 CorpsHeader = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->corpsheader(), target);
  }
  
  // optional uint32 UnionID = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->unionid(), target);
  }
  
  // optional string UnionName = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(10, this->unionname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageApplyFamilySuccessNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 FamilyID = 3;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
    // optional string FamilyName = 4;
    if (has_familyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->familyname());
    }
    
    // optional uint32 CorpsID = 5;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
    // optional string CorpsName = 6;
    if (has_corpsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->corpsname());
    }
    
    // optional uint32 FamilyHeader = 7;
    if (has_familyheader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyheader());
    }
    
    // optional uint32 CorpsHeader = 8;
    if (has_corpsheader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsheader());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 UnionID = 9;
    if (has_unionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->unionid());
    }
    
    // optional string UnionName = 10;
    if (has_unionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->unionname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageApplyFamilySuccessNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageApplyFamilySuccessNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageApplyFamilySuccessNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageApplyFamilySuccessNotify::MergeFrom(const CMessageApplyFamilySuccessNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_familyid(from.familyid());
    }
    if (from._has_bit(3)) {
      set_familyname(from.familyname());
    }
    if (from._has_bit(4)) {
      set_corpsid(from.corpsid());
    }
    if (from._has_bit(5)) {
      set_corpsname(from.corpsname());
    }
    if (from._has_bit(6)) {
      set_familyheader(from.familyheader());
    }
    if (from._has_bit(7)) {
      set_corpsheader(from.corpsheader());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_unionid(from.unionid());
    }
    if (from._has_bit(9)) {
      set_unionname(from.unionname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageApplyFamilySuccessNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageApplyFamilySuccessNotify::CopyFrom(const CMessageApplyFamilySuccessNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageApplyFamilySuccessNotify::Swap(CMessageApplyFamilySuccessNotify* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(result_, other->result_);
    std::swap(familyid_, other->familyid_);
    std::swap(familyname_, other->familyname_);
    std::swap(corpsid_, other->corpsid_);
    std::swap(corpsname_, other->corpsname_);
    std::swap(familyheader_, other->familyheader_);
    std::swap(corpsheader_, other->corpsheader_);
    std::swap(unionid_, other->unionid_);
    std::swap(unionname_, other->unionname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageApplyFamilySuccessNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageApplyFamilySuccessNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageApplyFamilySuccessNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageApplyFamilySuccessNotify_reflection_;
}

// ===================================================================

const ::std::string CMessageFamilyMemberAddedNotify::_default_managername_;
#ifndef _MSC_VER
const int CMessageFamilyMemberAddedNotify::kHeadMsgFieldNumber;
const int CMessageFamilyMemberAddedNotify::kManagerNameFieldNumber;
const int CMessageFamilyMemberAddedNotify::kRoleInfoFieldNumber;
#endif  // !_MSC_VER

CMessageFamilyMemberAddedNotify::CMessageFamilyMemberAddedNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFamilyMemberAddedNotify::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
  roleinfo_ = const_cast< ::FamilyMemberInfo*>(&::FamilyMemberInfo::default_instance());
}

CMessageFamilyMemberAddedNotify::CMessageFamilyMemberAddedNotify(const CMessageFamilyMemberAddedNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFamilyMemberAddedNotify::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  managername_ = const_cast< ::std::string*>(&_default_managername_);
  roleinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFamilyMemberAddedNotify::~CMessageFamilyMemberAddedNotify() {
  SharedDtor();
}

void CMessageFamilyMemberAddedNotify::SharedDtor() {
  if (managername_ != &_default_managername_) {
    delete managername_;
  }
  if (this != default_instance_) {
    delete headmsg_;
    delete roleinfo_;
  }
}

const ::google::protobuf::Descriptor* CMessageFamilyMemberAddedNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFamilyMemberAddedNotify_descriptor_;
}

const CMessageFamilyMemberAddedNotify& CMessageFamilyMemberAddedNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFamilyMemberAddedNotify* CMessageFamilyMemberAddedNotify::default_instance_ = NULL;

CMessageFamilyMemberAddedNotify* CMessageFamilyMemberAddedNotify::New() const {
  return new CMessageFamilyMemberAddedNotify;
}

void CMessageFamilyMemberAddedNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    if (_has_bit(1)) {
      if (managername_ != &_default_managername_) {
        managername_->clear();
      }
    }
    if (_has_bit(2)) {
      if (roleinfo_ != NULL) roleinfo_->::FamilyMemberInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFamilyMemberAddedNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(18)) goto parse_ManagerName;
        break;
      }
      
      // optional string ManagerName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ManagerName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_managername()));
        if (input->ExpectTag(26)) goto parse_RoleInfo;
        break;
      }
      
      // optional .FamilyMemberInfo RoleInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RoleInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_roleinfo()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageFamilyMemberAddedNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFamilyMemberAddedNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional string ManagerName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->managername(), output);
  }
  
  // optional .FamilyMemberInfo RoleInfo = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->roleinfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFamilyMemberAddedNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional string ManagerName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->managername(), target);
  }
  
  // optional .FamilyMemberInfo RoleInfo = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->roleinfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFamilyMemberAddedNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional string ManagerName = 2;
    if (has_managername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->managername());
    }
    
    // optional .FamilyMemberInfo RoleInfo = 3;
    if (has_roleinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->roleinfo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFamilyMemberAddedNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFamilyMemberAddedNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFamilyMemberAddedNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFamilyMemberAddedNotify::MergeFrom(const CMessageFamilyMemberAddedNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_managername(from.managername());
    }
    if (from._has_bit(2)) {
      mutable_roleinfo()->::FamilyMemberInfo::MergeFrom(from.roleinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFamilyMemberAddedNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFamilyMemberAddedNotify::CopyFrom(const CMessageFamilyMemberAddedNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFamilyMemberAddedNotify::Swap(CMessageFamilyMemberAddedNotify* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(managername_, other->managername_);
    std::swap(roleinfo_, other->roleinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFamilyMemberAddedNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFamilyMemberAddedNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFamilyMemberAddedNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFamilyMemberAddedNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessagePostAppointRequest::kHeadMsgFieldNumber;
const int CMessagePostAppointRequest::kPlayerCharIDFieldNumber;
const int CMessagePostAppointRequest::kActionKindFieldNumber;
#endif  // !_MSC_VER

CMessagePostAppointRequest::CMessagePostAppointRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePostAppointRequest::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessagePostAppointRequest::CMessagePostAppointRequest(const CMessagePostAppointRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePostAppointRequest::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  playercharid_ = 0u;
  actionkind_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePostAppointRequest::~CMessagePostAppointRequest() {
  SharedDtor();
}

void CMessagePostAppointRequest::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessagePostAppointRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePostAppointRequest_descriptor_;
}

const CMessagePostAppointRequest& CMessagePostAppointRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePostAppointRequest* CMessagePostAppointRequest::default_instance_ = NULL;

CMessagePostAppointRequest* CMessagePostAppointRequest::New() const {
  return new CMessagePostAppointRequest;
}

void CMessagePostAppointRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    playercharid_ = 0u;
    actionkind_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePostAppointRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_PlayerCharID;
        break;
      }
      
      // optional uint32 PlayerCharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PlayerCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playercharid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_ActionKind;
        break;
      }
      
      // optional uint32 ActionKind = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ActionKind:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &actionkind_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePostAppointRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePostAppointRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 PlayerCharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->playercharid(), output);
  }
  
  // optional uint32 ActionKind = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->actionkind(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePostAppointRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 PlayerCharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->playercharid(), target);
  }
  
  // optional uint32 ActionKind = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->actionkind(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePostAppointRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 PlayerCharID = 2;
    if (has_playercharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playercharid());
    }
    
    // optional uint32 ActionKind = 3;
    if (has_actionkind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->actionkind());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePostAppointRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePostAppointRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePostAppointRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePostAppointRequest::MergeFrom(const CMessagePostAppointRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_playercharid(from.playercharid());
    }
    if (from._has_bit(2)) {
      set_actionkind(from.actionkind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePostAppointRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePostAppointRequest::CopyFrom(const CMessagePostAppointRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePostAppointRequest::Swap(CMessagePostAppointRequest* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(playercharid_, other->playercharid_);
    std::swap(actionkind_, other->actionkind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePostAppointRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePostAppointRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePostAppointRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePostAppointRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessagePostAppointResponse::kHeadMsgFieldNumber;
const int CMessagePostAppointResponse::kErrcodeFieldNumber;
const int CMessagePostAppointResponse::kPlayerCharIDFieldNumber;
const int CMessagePostAppointResponse::kActionKindFieldNumber;
#endif  // !_MSC_VER

CMessagePostAppointResponse::CMessagePostAppointResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePostAppointResponse::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessagePostAppointResponse::CMessagePostAppointResponse(const CMessagePostAppointResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePostAppointResponse::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  errcode_ = 0u;
  playercharid_ = 0u;
  actionkind_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePostAppointResponse::~CMessagePostAppointResponse() {
  SharedDtor();
}

void CMessagePostAppointResponse::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessagePostAppointResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePostAppointResponse_descriptor_;
}

const CMessagePostAppointResponse& CMessagePostAppointResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePostAppointResponse* CMessagePostAppointResponse::default_instance_ = NULL;

CMessagePostAppointResponse* CMessagePostAppointResponse::New() const {
  return new CMessagePostAppointResponse;
}

void CMessagePostAppointResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    errcode_ = 0u;
    playercharid_ = 0u;
    actionkind_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePostAppointResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_PlayerCharID;
        break;
      }
      
      // optional uint32 PlayerCharID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PlayerCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playercharid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_ActionKind;
        break;
      }
      
      // optional uint32 ActionKind = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ActionKind:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &actionkind_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePostAppointResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePostAppointResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  // optional uint32 PlayerCharID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->playercharid(), output);
  }
  
  // optional uint32 ActionKind = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->actionkind(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePostAppointResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  // optional uint32 PlayerCharID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->playercharid(), target);
  }
  
  // optional uint32 ActionKind = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->actionkind(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePostAppointResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional uint32 PlayerCharID = 3;
    if (has_playercharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playercharid());
    }
    
    // optional uint32 ActionKind = 4;
    if (has_actionkind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->actionkind());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePostAppointResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePostAppointResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePostAppointResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePostAppointResponse::MergeFrom(const CMessagePostAppointResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(2)) {
      set_playercharid(from.playercharid());
    }
    if (from._has_bit(3)) {
      set_actionkind(from.actionkind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePostAppointResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePostAppointResponse::CopyFrom(const CMessagePostAppointResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePostAppointResponse::Swap(CMessagePostAppointResponse* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(errcode_, other->errcode_);
    std::swap(playercharid_, other->playercharid_);
    std::swap(actionkind_, other->actionkind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePostAppointResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePostAppointResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePostAppointResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePostAppointResponse_reflection_;
}

// ===================================================================

const ::std::string CMessagePostAppointNoify::_default_managername_;
const ::std::string CMessagePostAppointNoify::_default_playername_;
#ifndef _MSC_VER
const int CMessagePostAppointNoify::kHeadMsgFieldNumber;
const int CMessagePostAppointNoify::kPlayerCharIDFieldNumber;
const int CMessagePostAppointNoify::kActionKindFieldNumber;
const int CMessagePostAppointNoify::kManagerNameFieldNumber;
const int CMessagePostAppointNoify::kPlayerNameFieldNumber;
#endif  // !_MSC_VER

CMessagePostAppointNoify::CMessagePostAppointNoify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePostAppointNoify::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessagePostAppointNoify::CMessagePostAppointNoify(const CMessagePostAppointNoify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePostAppointNoify::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  playercharid_ = 0u;
  actionkind_ = 0u;
  managername_ = const_cast< ::std::string*>(&_default_managername_);
  playername_ = const_cast< ::std::string*>(&_default_playername_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePostAppointNoify::~CMessagePostAppointNoify() {
  SharedDtor();
}

void CMessagePostAppointNoify::SharedDtor() {
  if (managername_ != &_default_managername_) {
    delete managername_;
  }
  if (playername_ != &_default_playername_) {
    delete playername_;
  }
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessagePostAppointNoify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePostAppointNoify_descriptor_;
}

const CMessagePostAppointNoify& CMessagePostAppointNoify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePostAppointNoify* CMessagePostAppointNoify::default_instance_ = NULL;

CMessagePostAppointNoify* CMessagePostAppointNoify::New() const {
  return new CMessagePostAppointNoify;
}

void CMessagePostAppointNoify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    playercharid_ = 0u;
    actionkind_ = 0u;
    if (_has_bit(3)) {
      if (managername_ != &_default_managername_) {
        managername_->clear();
      }
    }
    if (_has_bit(4)) {
      if (playername_ != &_default_playername_) {
        playername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePostAppointNoify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_PlayerCharID;
        break;
      }
      
      // optional uint32 PlayerCharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PlayerCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playercharid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_ActionKind;
        break;
      }
      
      // optional uint32 ActionKind = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ActionKind:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &actionkind_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_ManagerName;
        break;
      }
      
      // optional string ManagerName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ManagerName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_managername()));
        if (input->ExpectTag(42)) goto parse_PlayerName;
        break;
      }
      
      // optional string PlayerName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_PlayerName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_playername()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePostAppointNoify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePostAppointNoify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 PlayerCharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->playercharid(), output);
  }
  
  // optional uint32 ActionKind = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->actionkind(), output);
  }
  
  // optional string ManagerName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->managername(), output);
  }
  
  // optional string PlayerName = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->playername(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePostAppointNoify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 PlayerCharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->playercharid(), target);
  }
  
  // optional uint32 ActionKind = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->actionkind(), target);
  }
  
  // optional string ManagerName = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->managername(), target);
  }
  
  // optional string PlayerName = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->playername(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePostAppointNoify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 PlayerCharID = 2;
    if (has_playercharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playercharid());
    }
    
    // optional uint32 ActionKind = 3;
    if (has_actionkind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->actionkind());
    }
    
    // optional string ManagerName = 4;
    if (has_managername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->managername());
    }
    
    // optional string PlayerName = 5;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->playername());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePostAppointNoify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePostAppointNoify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePostAppointNoify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePostAppointNoify::MergeFrom(const CMessagePostAppointNoify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_playercharid(from.playercharid());
    }
    if (from._has_bit(2)) {
      set_actionkind(from.actionkind());
    }
    if (from._has_bit(3)) {
      set_managername(from.managername());
    }
    if (from._has_bit(4)) {
      set_playername(from.playername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePostAppointNoify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePostAppointNoify::CopyFrom(const CMessagePostAppointNoify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePostAppointNoify::Swap(CMessagePostAppointNoify* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(playercharid_, other->playercharid_);
    std::swap(actionkind_, other->actionkind_);
    std::swap(managername_, other->managername_);
    std::swap(playername_, other->playername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePostAppointNoify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePostAppointNoify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePostAppointNoify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePostAppointNoify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLeaveFamilyRequest::kHeadMsgFieldNumber;
const int CMessageLeaveFamilyRequest::kMsgCodeFieldNumber;
#endif  // !_MSC_VER

CMessageLeaveFamilyRequest::CMessageLeaveFamilyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLeaveFamilyRequest::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageLeaveFamilyRequest::CMessageLeaveFamilyRequest(const CMessageLeaveFamilyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLeaveFamilyRequest::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  msgcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLeaveFamilyRequest::~CMessageLeaveFamilyRequest() {
  SharedDtor();
}

void CMessageLeaveFamilyRequest::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageLeaveFamilyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLeaveFamilyRequest_descriptor_;
}

const CMessageLeaveFamilyRequest& CMessageLeaveFamilyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageLeaveFamilyRequest* CMessageLeaveFamilyRequest::default_instance_ = NULL;

CMessageLeaveFamilyRequest* CMessageLeaveFamilyRequest::New() const {
  return new CMessageLeaveFamilyRequest;
}

void CMessageLeaveFamilyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    msgcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLeaveFamilyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_MsgCode;
        break;
      }
      
      // optional uint32 MsgCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MsgCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &msgcode_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLeaveFamilyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLeaveFamilyRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 MsgCode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->msgcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLeaveFamilyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 MsgCode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->msgcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLeaveFamilyRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 MsgCode = 2;
    if (has_msgcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->msgcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLeaveFamilyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLeaveFamilyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLeaveFamilyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLeaveFamilyRequest::MergeFrom(const CMessageLeaveFamilyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_msgcode(from.msgcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLeaveFamilyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLeaveFamilyRequest::CopyFrom(const CMessageLeaveFamilyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLeaveFamilyRequest::Swap(CMessageLeaveFamilyRequest* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(msgcode_, other->msgcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLeaveFamilyRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLeaveFamilyRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLeaveFamilyRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLeaveFamilyRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLeaveFamilyResponse::kHeadMsgFieldNumber;
const int CMessageLeaveFamilyResponse::kErrcodeFieldNumber;
#endif  // !_MSC_VER

CMessageLeaveFamilyResponse::CMessageLeaveFamilyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLeaveFamilyResponse::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageLeaveFamilyResponse::CMessageLeaveFamilyResponse(const CMessageLeaveFamilyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLeaveFamilyResponse::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLeaveFamilyResponse::~CMessageLeaveFamilyResponse() {
  SharedDtor();
}

void CMessageLeaveFamilyResponse::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageLeaveFamilyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLeaveFamilyResponse_descriptor_;
}

const CMessageLeaveFamilyResponse& CMessageLeaveFamilyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageLeaveFamilyResponse* CMessageLeaveFamilyResponse::default_instance_ = NULL;

CMessageLeaveFamilyResponse* CMessageLeaveFamilyResponse::New() const {
  return new CMessageLeaveFamilyResponse;
}

void CMessageLeaveFamilyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLeaveFamilyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLeaveFamilyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLeaveFamilyResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLeaveFamilyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLeaveFamilyResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLeaveFamilyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLeaveFamilyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLeaveFamilyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLeaveFamilyResponse::MergeFrom(const CMessageLeaveFamilyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLeaveFamilyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLeaveFamilyResponse::CopyFrom(const CMessageLeaveFamilyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLeaveFamilyResponse::Swap(CMessageLeaveFamilyResponse* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLeaveFamilyResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLeaveFamilyResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLeaveFamilyResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLeaveFamilyResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageMemberLeaveFamilyNotify::_default_rolename_;
#ifndef _MSC_VER
const int CMessageMemberLeaveFamilyNotify::kHeadMsgFieldNumber;
const int CMessageMemberLeaveFamilyNotify::kRoleIDFieldNumber;
const int CMessageMemberLeaveFamilyNotify::kRoleNameFieldNumber;
const int CMessageMemberLeaveFamilyNotify::kPlayerLevelFieldNumber;
const int CMessageMemberLeaveFamilyNotify::kPlayerPostFieldNumber;
#endif  // !_MSC_VER

CMessageMemberLeaveFamilyNotify::CMessageMemberLeaveFamilyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageMemberLeaveFamilyNotify::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageMemberLeaveFamilyNotify::CMessageMemberLeaveFamilyNotify(const CMessageMemberLeaveFamilyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageMemberLeaveFamilyNotify::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  roleid_ = 0u;
  rolename_ = const_cast< ::std::string*>(&_default_rolename_);
  playerlevel_ = 0u;
  playerpost_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageMemberLeaveFamilyNotify::~CMessageMemberLeaveFamilyNotify() {
  SharedDtor();
}

void CMessageMemberLeaveFamilyNotify::SharedDtor() {
  if (rolename_ != &_default_rolename_) {
    delete rolename_;
  }
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageMemberLeaveFamilyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageMemberLeaveFamilyNotify_descriptor_;
}

const CMessageMemberLeaveFamilyNotify& CMessageMemberLeaveFamilyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageMemberLeaveFamilyNotify* CMessageMemberLeaveFamilyNotify::default_instance_ = NULL;

CMessageMemberLeaveFamilyNotify* CMessageMemberLeaveFamilyNotify::New() const {
  return new CMessageMemberLeaveFamilyNotify;
}

void CMessageMemberLeaveFamilyNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    roleid_ = 0u;
    if (_has_bit(2)) {
      if (rolename_ != &_default_rolename_) {
        rolename_->clear();
      }
    }
    playerlevel_ = 0u;
    playerpost_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageMemberLeaveFamilyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_RoleName;
        break;
      }
      
      // optional string RoleName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RoleName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_rolename()));
        if (input->ExpectTag(32)) goto parse_PlayerLevel;
        break;
      }
      
      // optional uint32 PlayerLevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PlayerLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playerlevel_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_PlayerPost;
        break;
      }
      
      // optional uint32 PlayerPost = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PlayerPost:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playerpost_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageMemberLeaveFamilyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageMemberLeaveFamilyNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 RoleID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->roleid(), output);
  }
  
  // optional string RoleName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->rolename(), output);
  }
  
  // optional uint32 PlayerLevel = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->playerlevel(), output);
  }
  
  // optional uint32 PlayerPost = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->playerpost(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageMemberLeaveFamilyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 RoleID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->roleid(), target);
  }
  
  // optional string RoleName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->rolename(), target);
  }
  
  // optional uint32 PlayerLevel = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->playerlevel(), target);
  }
  
  // optional uint32 PlayerPost = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->playerpost(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageMemberLeaveFamilyNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 RoleID = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional string RoleName = 3;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->rolename());
    }
    
    // optional uint32 PlayerLevel = 4;
    if (has_playerlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playerlevel());
    }
    
    // optional uint32 PlayerPost = 5;
    if (has_playerpost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playerpost());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageMemberLeaveFamilyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageMemberLeaveFamilyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageMemberLeaveFamilyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageMemberLeaveFamilyNotify::MergeFrom(const CMessageMemberLeaveFamilyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(2)) {
      set_rolename(from.rolename());
    }
    if (from._has_bit(3)) {
      set_playerlevel(from.playerlevel());
    }
    if (from._has_bit(4)) {
      set_playerpost(from.playerpost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageMemberLeaveFamilyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMemberLeaveFamilyNotify::CopyFrom(const CMessageMemberLeaveFamilyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMemberLeaveFamilyNotify::Swap(CMessageMemberLeaveFamilyNotify* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(roleid_, other->roleid_);
    std::swap(rolename_, other->rolename_);
    std::swap(playerlevel_, other->playerlevel_);
    std::swap(playerpost_, other->playerpost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageMemberLeaveFamilyNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageMemberLeaveFamilyNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageMemberLeaveFamilyNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageMemberLeaveFamilyNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetFamilyMemberInfoRequest::kHeadMsgFieldNumber;
#endif  // !_MSC_VER

CMessageGetFamilyMemberInfoRequest::CMessageGetFamilyMemberInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetFamilyMemberInfoRequest::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageGetFamilyMemberInfoRequest::CMessageGetFamilyMemberInfoRequest(const CMessageGetFamilyMemberInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetFamilyMemberInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetFamilyMemberInfoRequest::~CMessageGetFamilyMemberInfoRequest() {
  SharedDtor();
}

void CMessageGetFamilyMemberInfoRequest::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageGetFamilyMemberInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetFamilyMemberInfoRequest_descriptor_;
}

const CMessageGetFamilyMemberInfoRequest& CMessageGetFamilyMemberInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetFamilyMemberInfoRequest* CMessageGetFamilyMemberInfoRequest::default_instance_ = NULL;

CMessageGetFamilyMemberInfoRequest* CMessageGetFamilyMemberInfoRequest::New() const {
  return new CMessageGetFamilyMemberInfoRequest;
}

void CMessageGetFamilyMemberInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetFamilyMemberInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetFamilyMemberInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetFamilyMemberInfoRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetFamilyMemberInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetFamilyMemberInfoRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetFamilyMemberInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetFamilyMemberInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetFamilyMemberInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetFamilyMemberInfoRequest::MergeFrom(const CMessageGetFamilyMemberInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetFamilyMemberInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetFamilyMemberInfoRequest::CopyFrom(const CMessageGetFamilyMemberInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetFamilyMemberInfoRequest::Swap(CMessageGetFamilyMemberInfoRequest* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetFamilyMemberInfoRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetFamilyMemberInfoRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetFamilyMemberInfoRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetFamilyMemberInfoRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetFamilyMemberInfoResponse::kHeadMsgFieldNumber;
const int CMessageGetFamilyMemberInfoResponse::kMemberInfoFieldNumber;
#endif  // !_MSC_VER

CMessageGetFamilyMemberInfoResponse::CMessageGetFamilyMemberInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetFamilyMemberInfoResponse::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
  memberinfo_ = const_cast< ::PBFamilyMemberList*>(&::PBFamilyMemberList::default_instance());
}

CMessageGetFamilyMemberInfoResponse::CMessageGetFamilyMemberInfoResponse(const CMessageGetFamilyMemberInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetFamilyMemberInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  memberinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetFamilyMemberInfoResponse::~CMessageGetFamilyMemberInfoResponse() {
  SharedDtor();
}

void CMessageGetFamilyMemberInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
    delete memberinfo_;
  }
}

const ::google::protobuf::Descriptor* CMessageGetFamilyMemberInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetFamilyMemberInfoResponse_descriptor_;
}

const CMessageGetFamilyMemberInfoResponse& CMessageGetFamilyMemberInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetFamilyMemberInfoResponse* CMessageGetFamilyMemberInfoResponse::default_instance_ = NULL;

CMessageGetFamilyMemberInfoResponse* CMessageGetFamilyMemberInfoResponse::New() const {
  return new CMessageGetFamilyMemberInfoResponse;
}

void CMessageGetFamilyMemberInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    if (_has_bit(1)) {
      if (memberinfo_ != NULL) memberinfo_->::PBFamilyMemberList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetFamilyMemberInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(18)) goto parse_MemberInfo;
        break;
      }
      
      // optional .PBFamilyMemberList MemberInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MemberInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_memberinfo()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetFamilyMemberInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetFamilyMemberInfoResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional .PBFamilyMemberList MemberInfo = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->memberinfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetFamilyMemberInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional .PBFamilyMemberList MemberInfo = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->memberinfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetFamilyMemberInfoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional .PBFamilyMemberList MemberInfo = 2;
    if (has_memberinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->memberinfo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetFamilyMemberInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetFamilyMemberInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetFamilyMemberInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetFamilyMemberInfoResponse::MergeFrom(const CMessageGetFamilyMemberInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      mutable_memberinfo()->::PBFamilyMemberList::MergeFrom(from.memberinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetFamilyMemberInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetFamilyMemberInfoResponse::CopyFrom(const CMessageGetFamilyMemberInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetFamilyMemberInfoResponse::Swap(CMessageGetFamilyMemberInfoResponse* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(memberinfo_, other->memberinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetFamilyMemberInfoResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetFamilyMemberInfoResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetFamilyMemberInfoResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetFamilyMemberInfoResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetFamilyPropertyRequest::kHeadMsgFieldNumber;
#endif  // !_MSC_VER

CMessageGetFamilyPropertyRequest::CMessageGetFamilyPropertyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetFamilyPropertyRequest::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageGetFamilyPropertyRequest::CMessageGetFamilyPropertyRequest(const CMessageGetFamilyPropertyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetFamilyPropertyRequest::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetFamilyPropertyRequest::~CMessageGetFamilyPropertyRequest() {
  SharedDtor();
}

void CMessageGetFamilyPropertyRequest::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageGetFamilyPropertyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetFamilyPropertyRequest_descriptor_;
}

const CMessageGetFamilyPropertyRequest& CMessageGetFamilyPropertyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetFamilyPropertyRequest* CMessageGetFamilyPropertyRequest::default_instance_ = NULL;

CMessageGetFamilyPropertyRequest* CMessageGetFamilyPropertyRequest::New() const {
  return new CMessageGetFamilyPropertyRequest;
}

void CMessageGetFamilyPropertyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetFamilyPropertyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetFamilyPropertyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetFamilyPropertyRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetFamilyPropertyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetFamilyPropertyRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetFamilyPropertyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetFamilyPropertyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetFamilyPropertyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetFamilyPropertyRequest::MergeFrom(const CMessageGetFamilyPropertyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetFamilyPropertyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetFamilyPropertyRequest::CopyFrom(const CMessageGetFamilyPropertyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetFamilyPropertyRequest::Swap(CMessageGetFamilyPropertyRequest* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetFamilyPropertyRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetFamilyPropertyRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetFamilyPropertyRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetFamilyPropertyRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageGetFamilyPropertyResponse::_default_familynotice_;
const ::std::string CMessageGetFamilyPropertyResponse::_default_familyheadername_;
const ::std::string CMessageGetFamilyPropertyResponse::_default_enemyfamilyname_;
const ::std::string CMessageGetFamilyPropertyResponse::_default_challengestarted_;
const ::std::string CMessageGetFamilyPropertyResponse::_default_challengereceived_;
#ifndef _MSC_VER
const int CMessageGetFamilyPropertyResponse::kHeadMsgFieldNumber;
const int CMessageGetFamilyPropertyResponse::kFamilyNoticeFieldNumber;
const int CMessageGetFamilyPropertyResponse::kFamilyNumFieldNumber;
const int CMessageGetFamilyPropertyResponse::kFamilyLevelFieldNumber;
const int CMessageGetFamilyPropertyResponse::kFamilyMoneyFieldNumber;
const int CMessageGetFamilyPropertyResponse::kFamilyHeaderIDFieldNumber;
const int CMessageGetFamilyPropertyResponse::kFamilyHeaderNameFieldNumber;
const int CMessageGetFamilyPropertyResponse::kFamilyGloryFieldNumber;
const int CMessageGetFamilyPropertyResponse::kNpcIDFieldNumber;
const int CMessageGetFamilyPropertyResponse::kBidMoneyFieldNumber;
const int CMessageGetFamilyPropertyResponse::kBidTimeFieldNumber;
const int CMessageGetFamilyPropertyResponse::kWarNpcStatusFieldNumber;
const int CMessageGetFamilyPropertyResponse::kWarRankFieldNumber;
const int CMessageGetFamilyPropertyResponse::kWarWinNumFieldNumber;
const int CMessageGetFamilyPropertyResponse::kWarLostNumFieldNumber;
const int CMessageGetFamilyPropertyResponse::kFamilyStarLevelFieldNumber;
const int CMessageGetFamilyPropertyResponse::kWarExpFieldNumber;
const int CMessageGetFamilyPropertyResponse::kWarMaxExpFieldNumber;
const int CMessageGetFamilyPropertyResponse::kEnemyFamilyNameFieldNumber;
const int CMessageGetFamilyPropertyResponse::kWarStatusFieldNumber;
const int CMessageGetFamilyPropertyResponse::kChallengeStatusFieldNumber;
const int CMessageGetFamilyPropertyResponse::kChallengeMoneyFieldNumber;
const int CMessageGetFamilyPropertyResponse::kChallengeStartedFieldNumber;
const int CMessageGetFamilyPropertyResponse::kChallengeReceivedFieldNumber;
const int CMessageGetFamilyPropertyResponse::kMaxFamilyMemberNumFieldNumber;
const int CMessageGetFamilyPropertyResponse::kCanLevelUPFieldNumber;
const int CMessageGetFamilyPropertyResponse::kMaxPresterNumFieldNumber;
const int CMessageGetFamilyPropertyResponse::kGloryLimitFieldNumber;
const int CMessageGetFamilyPropertyResponse::kLevelMoneyFieldNumber;
const int CMessageGetFamilyPropertyResponse::kStabilityFieldNumber;
const int CMessageGetFamilyPropertyResponse::kReduceStabilityFieldNumber;
const int CMessageGetFamilyPropertyResponse::kExtraRedstonExpFieldNumber;
#endif  // !_MSC_VER

CMessageGetFamilyPropertyResponse::CMessageGetFamilyPropertyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetFamilyPropertyResponse::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageGetFamilyPropertyResponse::CMessageGetFamilyPropertyResponse(const CMessageGetFamilyPropertyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetFamilyPropertyResponse::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  familynotice_ = const_cast< ::std::string*>(&_default_familynotice_);
  familynum_ = 0u;
  familylevel_ = 0u;
  familymoney_ = 0u;
  familyheaderid_ = 0u;
  familyheadername_ = const_cast< ::std::string*>(&_default_familyheadername_);
  familyglory_ = 0u;
  npcid_ = 0u;
  bidmoney_ = 0u;
  bidtime_ = 0u;
  warnpcstatus_ = 0u;
  warrank_ = 0u;
  warwinnum_ = 0u;
  warlostnum_ = 0u;
  familystarlevel_ = 0u;
  warexp_ = 0u;
  warmaxexp_ = 0u;
  enemyfamilyname_ = const_cast< ::std::string*>(&_default_enemyfamilyname_);
  warstatus_ = 0u;
  challengestatus_ = 0u;
  challengemoney_ = 0u;
  challengestarted_ = const_cast< ::std::string*>(&_default_challengestarted_);
  challengereceived_ = const_cast< ::std::string*>(&_default_challengereceived_);
  maxfamilymembernum_ = 0u;
  canlevelup_ = 0u;
  maxpresternum_ = 0u;
  glorylimit_ = 0u;
  levelmoney_ = 0u;
  stability_ = 0u;
  reducestability_ = 0u;
  extraredstonexp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetFamilyPropertyResponse::~CMessageGetFamilyPropertyResponse() {
  SharedDtor();
}

void CMessageGetFamilyPropertyResponse::SharedDtor() {
  if (familynotice_ != &_default_familynotice_) {
    delete familynotice_;
  }
  if (familyheadername_ != &_default_familyheadername_) {
    delete familyheadername_;
  }
  if (enemyfamilyname_ != &_default_enemyfamilyname_) {
    delete enemyfamilyname_;
  }
  if (challengestarted_ != &_default_challengestarted_) {
    delete challengestarted_;
  }
  if (challengereceived_ != &_default_challengereceived_) {
    delete challengereceived_;
  }
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageGetFamilyPropertyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetFamilyPropertyResponse_descriptor_;
}

const CMessageGetFamilyPropertyResponse& CMessageGetFamilyPropertyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetFamilyPropertyResponse* CMessageGetFamilyPropertyResponse::default_instance_ = NULL;

CMessageGetFamilyPropertyResponse* CMessageGetFamilyPropertyResponse::New() const {
  return new CMessageGetFamilyPropertyResponse;
}

void CMessageGetFamilyPropertyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    if (_has_bit(1)) {
      if (familynotice_ != &_default_familynotice_) {
        familynotice_->clear();
      }
    }
    familynum_ = 0u;
    familylevel_ = 0u;
    familymoney_ = 0u;
    familyheaderid_ = 0u;
    if (_has_bit(6)) {
      if (familyheadername_ != &_default_familyheadername_) {
        familyheadername_->clear();
      }
    }
    familyglory_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    npcid_ = 0u;
    bidmoney_ = 0u;
    bidtime_ = 0u;
    warnpcstatus_ = 0u;
    warrank_ = 0u;
    warwinnum_ = 0u;
    warlostnum_ = 0u;
    familystarlevel_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    warexp_ = 0u;
    warmaxexp_ = 0u;
    if (_has_bit(18)) {
      if (enemyfamilyname_ != &_default_enemyfamilyname_) {
        enemyfamilyname_->clear();
      }
    }
    warstatus_ = 0u;
    challengestatus_ = 0u;
    challengemoney_ = 0u;
    if (_has_bit(22)) {
      if (challengestarted_ != &_default_challengestarted_) {
        challengestarted_->clear();
      }
    }
    if (_has_bit(23)) {
      if (challengereceived_ != &_default_challengereceived_) {
        challengereceived_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    maxfamilymembernum_ = 0u;
    canlevelup_ = 0u;
    maxpresternum_ = 0u;
    glorylimit_ = 0u;
    levelmoney_ = 0u;
    stability_ = 0u;
    reducestability_ = 0u;
    extraredstonexp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetFamilyPropertyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(18)) goto parse_FamilyNotice;
        break;
      }
      
      // optional string FamilyNotice = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FamilyNotice:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_familynotice()));
        if (input->ExpectTag(24)) goto parse_FamilyNum;
        break;
      }
      
      // optional uint32 FamilyNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familynum_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_FamilyLevel;
        break;
      }
      
      // optional uint32 FamilyLevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familylevel_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_FamilyMoney;
        break;
      }
      
      // optional uint32 FamilyMoney = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familymoney_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_FamilyHeaderID;
        break;
      }
      
      // optional uint32 FamilyHeaderID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyHeaderID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyheaderid_));
        _set_bit(5);
        if (input->ExpectTag(58)) goto parse_FamilyHeaderName;
        break;
      }
      
      // optional string FamilyHeaderName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FamilyHeaderName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_familyheadername()));
        if (input->ExpectTag(64)) goto parse_FamilyGlory;
        break;
      }
      
      // optional uint32 FamilyGlory = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyGlory:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyglory_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_NpcID;
        break;
      }
      
      // optional uint32 NpcID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_BidMoney;
        break;
      }
      
      // optional uint32 BidMoney = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BidMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &bidmoney_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_BidTime;
        break;
      }
      
      // optional uint32 BidTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BidTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &bidtime_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_WarNpcStatus;
        break;
      }
      
      // optional uint32 WarNpcStatus = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarNpcStatus:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warnpcstatus_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_WarRank;
        break;
      }
      
      // optional uint32 WarRank = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarRank:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warrank_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_WarWinNum;
        break;
      }
      
      // optional uint32 WarWinNum = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarWinNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warwinnum_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_WarLostNum;
        break;
      }
      
      // optional uint32 WarLostNum = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarLostNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warlostnum_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_FamilyStarLevel;
        break;
      }
      
      // optional uint32 FamilyStarLevel = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyStarLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familystarlevel_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_WarExp;
        break;
      }
      
      // optional uint32 WarExp = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarExp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warexp_));
        _set_bit(16);
        if (input->ExpectTag(144)) goto parse_WarMaxExp;
        break;
      }
      
      // optional uint32 WarMaxExp = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarMaxExp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warmaxexp_));
        _set_bit(17);
        if (input->ExpectTag(154)) goto parse_EnemyFamilyName;
        break;
      }
      
      // optional string EnemyFamilyName = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_EnemyFamilyName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_enemyfamilyname()));
        if (input->ExpectTag(160)) goto parse_WarStatus;
        break;
      }
      
      // optional uint32 WarStatus = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarStatus:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warstatus_));
        _set_bit(19);
        if (input->ExpectTag(168)) goto parse_ChallengeStatus;
        break;
      }
      
      // optional uint32 ChallengeStatus = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ChallengeStatus:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &challengestatus_));
        _set_bit(20);
        if (input->ExpectTag(176)) goto parse_ChallengeMoney;
        break;
      }
      
      // optional uint32 ChallengeMoney = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ChallengeMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &challengemoney_));
        _set_bit(21);
        if (input->ExpectTag(186)) goto parse_ChallengeStarted;
        break;
      }
      
      // optional string ChallengeStarted = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ChallengeStarted:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_challengestarted()));
        if (input->ExpectTag(194)) goto parse_ChallengeReceived;
        break;
      }
      
      // optional string ChallengeReceived = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ChallengeReceived:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_challengereceived()));
        if (input->ExpectTag(200)) goto parse_MaxFamilyMemberNum;
        break;
      }
      
      // optional uint32 MaxFamilyMemberNum = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxFamilyMemberNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxfamilymembernum_));
        _set_bit(24);
        if (input->ExpectTag(208)) goto parse_CanLevelUP;
        break;
      }
      
      // optional uint32 CanLevelUP = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CanLevelUP:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &canlevelup_));
        _set_bit(25);
        if (input->ExpectTag(216)) goto parse_MaxPresterNum;
        break;
      }
      
      // optional uint32 MaxPresterNum = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxPresterNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxpresternum_));
        _set_bit(26);
        if (input->ExpectTag(224)) goto parse_GloryLimit;
        break;
      }
      
      // optional uint32 GloryLimit = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GloryLimit:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &glorylimit_));
        _set_bit(27);
        if (input->ExpectTag(232)) goto parse_LevelMoney;
        break;
      }
      
      // optional uint32 LevelMoney = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LevelMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &levelmoney_));
        _set_bit(28);
        if (input->ExpectTag(240)) goto parse_Stability;
        break;
      }
      
      // optional uint32 Stability = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Stability:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &stability_));
        _set_bit(29);
        if (input->ExpectTag(248)) goto parse_ReduceStability;
        break;
      }
      
      // optional uint32 ReduceStability = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ReduceStability:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &reducestability_));
        _set_bit(30);
        if (input->ExpectTag(256)) goto parse_ExtraRedstonExp;
        break;
      }
      
      // optional uint32 ExtraRedstonExp = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExtraRedstonExp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &extraredstonexp_));
        _set_bit(31);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetFamilyPropertyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetFamilyPropertyResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional string FamilyNotice = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->familynotice(), output);
  }
  
  // optional uint32 FamilyNum = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->familynum(), output);
  }
  
  // optional uint32 FamilyLevel = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->familylevel(), output);
  }
  
  // optional uint32 FamilyMoney = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->familymoney(), output);
  }
  
  // optional uint32 FamilyHeaderID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->familyheaderid(), output);
  }
  
  // optional string FamilyHeaderName = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteString(7, this->familyheadername(), output);
  }
  
  // optional uint32 FamilyGlory = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->familyglory(), output);
  }
  
  // optional uint32 NpcID = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->npcid(), output);
  }
  
  // optional uint32 BidMoney = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->bidmoney(), output);
  }
  
  // optional uint32 BidTime = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->bidtime(), output);
  }
  
  // optional uint32 WarNpcStatus = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->warnpcstatus(), output);
  }
  
  // optional uint32 WarRank = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->warrank(), output);
  }
  
  // optional uint32 WarWinNum = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->warwinnum(), output);
  }
  
  // optional uint32 WarLostNum = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(15, this->warlostnum(), output);
  }
  
  // optional uint32 FamilyStarLevel = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(16, this->familystarlevel(), output);
  }
  
  // optional uint32 WarExp = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(17, this->warexp(), output);
  }
  
  // optional uint32 WarMaxExp = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(18, this->warmaxexp(), output);
  }
  
  // optional string EnemyFamilyName = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormat::WriteString(19, this->enemyfamilyname(), output);
  }
  
  // optional uint32 WarStatus = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(20, this->warstatus(), output);
  }
  
  // optional uint32 ChallengeStatus = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(21, this->challengestatus(), output);
  }
  
  // optional uint32 ChallengeMoney = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(22, this->challengemoney(), output);
  }
  
  // optional string ChallengeStarted = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormat::WriteString(23, this->challengestarted(), output);
  }
  
  // optional string ChallengeReceived = 24;
  if (_has_bit(23)) {
    ::google::protobuf::internal::WireFormat::WriteString(24, this->challengereceived(), output);
  }
  
  // optional uint32 MaxFamilyMemberNum = 25;
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(25, this->maxfamilymembernum(), output);
  }
  
  // optional uint32 CanLevelUP = 26;
  if (_has_bit(25)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(26, this->canlevelup(), output);
  }
  
  // optional uint32 MaxPresterNum = 27;
  if (_has_bit(26)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(27, this->maxpresternum(), output);
  }
  
  // optional uint32 GloryLimit = 28;
  if (_has_bit(27)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(28, this->glorylimit(), output);
  }
  
  // optional uint32 LevelMoney = 29;
  if (_has_bit(28)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(29, this->levelmoney(), output);
  }
  
  // optional uint32 Stability = 30;
  if (_has_bit(29)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(30, this->stability(), output);
  }
  
  // optional uint32 ReduceStability = 31;
  if (_has_bit(30)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(31, this->reducestability(), output);
  }
  
  // optional uint32 ExtraRedstonExp = 32;
  if (_has_bit(31)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(32, this->extraredstonexp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetFamilyPropertyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional string FamilyNotice = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->familynotice(), target);
  }
  
  // optional uint32 FamilyNum = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->familynum(), target);
  }
  
  // optional uint32 FamilyLevel = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->familylevel(), target);
  }
  
  // optional uint32 FamilyMoney = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->familymoney(), target);
  }
  
  // optional uint32 FamilyHeaderID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->familyheaderid(), target);
  }
  
  // optional string FamilyHeaderName = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(7, this->familyheadername(), target);
  }
  
  // optional uint32 FamilyGlory = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->familyglory(), target);
  }
  
  // optional uint32 NpcID = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->npcid(), target);
  }
  
  // optional uint32 BidMoney = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->bidmoney(), target);
  }
  
  // optional uint32 BidTime = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->bidtime(), target);
  }
  
  // optional uint32 WarNpcStatus = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->warnpcstatus(), target);
  }
  
  // optional uint32 WarRank = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->warrank(), target);
  }
  
  // optional uint32 WarWinNum = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->warwinnum(), target);
  }
  
  // optional uint32 WarLostNum = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(15, this->warlostnum(), target);
  }
  
  // optional uint32 FamilyStarLevel = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(16, this->familystarlevel(), target);
  }
  
  // optional uint32 WarExp = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(17, this->warexp(), target);
  }
  
  // optional uint32 WarMaxExp = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(18, this->warmaxexp(), target);
  }
  
  // optional string EnemyFamilyName = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(19, this->enemyfamilyname(), target);
  }
  
  // optional uint32 WarStatus = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(20, this->warstatus(), target);
  }
  
  // optional uint32 ChallengeStatus = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(21, this->challengestatus(), target);
  }
  
  // optional uint32 ChallengeMoney = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(22, this->challengemoney(), target);
  }
  
  // optional string ChallengeStarted = 23;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(23, this->challengestarted(), target);
  }
  
  // optional string ChallengeReceived = 24;
  if (_has_bit(23)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(24, this->challengereceived(), target);
  }
  
  // optional uint32 MaxFamilyMemberNum = 25;
  if (_has_bit(24)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(25, this->maxfamilymembernum(), target);
  }
  
  // optional uint32 CanLevelUP = 26;
  if (_has_bit(25)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(26, this->canlevelup(), target);
  }
  
  // optional uint32 MaxPresterNum = 27;
  if (_has_bit(26)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(27, this->maxpresternum(), target);
  }
  
  // optional uint32 GloryLimit = 28;
  if (_has_bit(27)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(28, this->glorylimit(), target);
  }
  
  // optional uint32 LevelMoney = 29;
  if (_has_bit(28)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(29, this->levelmoney(), target);
  }
  
  // optional uint32 Stability = 30;
  if (_has_bit(29)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(30, this->stability(), target);
  }
  
  // optional uint32 ReduceStability = 31;
  if (_has_bit(30)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(31, this->reducestability(), target);
  }
  
  // optional uint32 ExtraRedstonExp = 32;
  if (_has_bit(31)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(32, this->extraredstonexp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetFamilyPropertyResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional string FamilyNotice = 2;
    if (has_familynotice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->familynotice());
    }
    
    // optional uint32 FamilyNum = 3;
    if (has_familynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familynum());
    }
    
    // optional uint32 FamilyLevel = 4;
    if (has_familylevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familylevel());
    }
    
    // optional uint32 FamilyMoney = 5;
    if (has_familymoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familymoney());
    }
    
    // optional uint32 FamilyHeaderID = 6;
    if (has_familyheaderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyheaderid());
    }
    
    // optional string FamilyHeaderName = 7;
    if (has_familyheadername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->familyheadername());
    }
    
    // optional uint32 FamilyGlory = 8;
    if (has_familyglory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyglory());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 NpcID = 9;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
    // optional uint32 BidMoney = 10;
    if (has_bidmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->bidmoney());
    }
    
    // optional uint32 BidTime = 11;
    if (has_bidtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->bidtime());
    }
    
    // optional uint32 WarNpcStatus = 12;
    if (has_warnpcstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warnpcstatus());
    }
    
    // optional uint32 WarRank = 13;
    if (has_warrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warrank());
    }
    
    // optional uint32 WarWinNum = 14;
    if (has_warwinnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warwinnum());
    }
    
    // optional uint32 WarLostNum = 15;
    if (has_warlostnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warlostnum());
    }
    
    // optional uint32 FamilyStarLevel = 16;
    if (has_familystarlevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familystarlevel());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 WarExp = 17;
    if (has_warexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warexp());
    }
    
    // optional uint32 WarMaxExp = 18;
    if (has_warmaxexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warmaxexp());
    }
    
    // optional string EnemyFamilyName = 19;
    if (has_enemyfamilyname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::StringSize(this->enemyfamilyname());
    }
    
    // optional uint32 WarStatus = 20;
    if (has_warstatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warstatus());
    }
    
    // optional uint32 ChallengeStatus = 21;
    if (has_challengestatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->challengestatus());
    }
    
    // optional uint32 ChallengeMoney = 22;
    if (has_challengemoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->challengemoney());
    }
    
    // optional string ChallengeStarted = 23;
    if (has_challengestarted()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::StringSize(this->challengestarted());
    }
    
    // optional string ChallengeReceived = 24;
    if (has_challengereceived()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::StringSize(this->challengereceived());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 MaxFamilyMemberNum = 25;
    if (has_maxfamilymembernum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxfamilymembernum());
    }
    
    // optional uint32 CanLevelUP = 26;
    if (has_canlevelup()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->canlevelup());
    }
    
    // optional uint32 MaxPresterNum = 27;
    if (has_maxpresternum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxpresternum());
    }
    
    // optional uint32 GloryLimit = 28;
    if (has_glorylimit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->glorylimit());
    }
    
    // optional uint32 LevelMoney = 29;
    if (has_levelmoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->levelmoney());
    }
    
    // optional uint32 Stability = 30;
    if (has_stability()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->stability());
    }
    
    // optional uint32 ReduceStability = 31;
    if (has_reducestability()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->reducestability());
    }
    
    // optional uint32 ExtraRedstonExp = 32;
    if (has_extraredstonexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->extraredstonexp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetFamilyPropertyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetFamilyPropertyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetFamilyPropertyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetFamilyPropertyResponse::MergeFrom(const CMessageGetFamilyPropertyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_familynotice(from.familynotice());
    }
    if (from._has_bit(2)) {
      set_familynum(from.familynum());
    }
    if (from._has_bit(3)) {
      set_familylevel(from.familylevel());
    }
    if (from._has_bit(4)) {
      set_familymoney(from.familymoney());
    }
    if (from._has_bit(5)) {
      set_familyheaderid(from.familyheaderid());
    }
    if (from._has_bit(6)) {
      set_familyheadername(from.familyheadername());
    }
    if (from._has_bit(7)) {
      set_familyglory(from.familyglory());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_npcid(from.npcid());
    }
    if (from._has_bit(9)) {
      set_bidmoney(from.bidmoney());
    }
    if (from._has_bit(10)) {
      set_bidtime(from.bidtime());
    }
    if (from._has_bit(11)) {
      set_warnpcstatus(from.warnpcstatus());
    }
    if (from._has_bit(12)) {
      set_warrank(from.warrank());
    }
    if (from._has_bit(13)) {
      set_warwinnum(from.warwinnum());
    }
    if (from._has_bit(14)) {
      set_warlostnum(from.warlostnum());
    }
    if (from._has_bit(15)) {
      set_familystarlevel(from.familystarlevel());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_warexp(from.warexp());
    }
    if (from._has_bit(17)) {
      set_warmaxexp(from.warmaxexp());
    }
    if (from._has_bit(18)) {
      set_enemyfamilyname(from.enemyfamilyname());
    }
    if (from._has_bit(19)) {
      set_warstatus(from.warstatus());
    }
    if (from._has_bit(20)) {
      set_challengestatus(from.challengestatus());
    }
    if (from._has_bit(21)) {
      set_challengemoney(from.challengemoney());
    }
    if (from._has_bit(22)) {
      set_challengestarted(from.challengestarted());
    }
    if (from._has_bit(23)) {
      set_challengereceived(from.challengereceived());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from._has_bit(24)) {
      set_maxfamilymembernum(from.maxfamilymembernum());
    }
    if (from._has_bit(25)) {
      set_canlevelup(from.canlevelup());
    }
    if (from._has_bit(26)) {
      set_maxpresternum(from.maxpresternum());
    }
    if (from._has_bit(27)) {
      set_glorylimit(from.glorylimit());
    }
    if (from._has_bit(28)) {
      set_levelmoney(from.levelmoney());
    }
    if (from._has_bit(29)) {
      set_stability(from.stability());
    }
    if (from._has_bit(30)) {
      set_reducestability(from.reducestability());
    }
    if (from._has_bit(31)) {
      set_extraredstonexp(from.extraredstonexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetFamilyPropertyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetFamilyPropertyResponse::CopyFrom(const CMessageGetFamilyPropertyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetFamilyPropertyResponse::Swap(CMessageGetFamilyPropertyResponse* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(familynotice_, other->familynotice_);
    std::swap(familynum_, other->familynum_);
    std::swap(familylevel_, other->familylevel_);
    std::swap(familymoney_, other->familymoney_);
    std::swap(familyheaderid_, other->familyheaderid_);
    std::swap(familyheadername_, other->familyheadername_);
    std::swap(familyglory_, other->familyglory_);
    std::swap(npcid_, other->npcid_);
    std::swap(bidmoney_, other->bidmoney_);
    std::swap(bidtime_, other->bidtime_);
    std::swap(warnpcstatus_, other->warnpcstatus_);
    std::swap(warrank_, other->warrank_);
    std::swap(warwinnum_, other->warwinnum_);
    std::swap(warlostnum_, other->warlostnum_);
    std::swap(familystarlevel_, other->familystarlevel_);
    std::swap(warexp_, other->warexp_);
    std::swap(warmaxexp_, other->warmaxexp_);
    std::swap(enemyfamilyname_, other->enemyfamilyname_);
    std::swap(warstatus_, other->warstatus_);
    std::swap(challengestatus_, other->challengestatus_);
    std::swap(challengemoney_, other->challengemoney_);
    std::swap(challengestarted_, other->challengestarted_);
    std::swap(challengereceived_, other->challengereceived_);
    std::swap(maxfamilymembernum_, other->maxfamilymembernum_);
    std::swap(canlevelup_, other->canlevelup_);
    std::swap(maxpresternum_, other->maxpresternum_);
    std::swap(glorylimit_, other->glorylimit_);
    std::swap(levelmoney_, other->levelmoney_);
    std::swap(stability_, other->stability_);
    std::swap(reducestability_, other->reducestability_);
    std::swap(extraredstonexp_, other->extraredstonexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetFamilyPropertyResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetFamilyPropertyResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetFamilyPropertyResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetFamilyPropertyResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetAllFanmilyInfoRequest::kHeadMsgFieldNumber;
const int CMessageGetAllFanmilyInfoRequest::kCurPageFieldNumber;
#endif  // !_MSC_VER

CMessageGetAllFanmilyInfoRequest::CMessageGetAllFanmilyInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetAllFanmilyInfoRequest::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageGetAllFanmilyInfoRequest::CMessageGetAllFanmilyInfoRequest(const CMessageGetAllFanmilyInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetAllFanmilyInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  curpage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetAllFanmilyInfoRequest::~CMessageGetAllFanmilyInfoRequest() {
  SharedDtor();
}

void CMessageGetAllFanmilyInfoRequest::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageGetAllFanmilyInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetAllFanmilyInfoRequest_descriptor_;
}

const CMessageGetAllFanmilyInfoRequest& CMessageGetAllFanmilyInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetAllFanmilyInfoRequest* CMessageGetAllFanmilyInfoRequest::default_instance_ = NULL;

CMessageGetAllFanmilyInfoRequest* CMessageGetAllFanmilyInfoRequest::New() const {
  return new CMessageGetAllFanmilyInfoRequest;
}

void CMessageGetAllFanmilyInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    curpage_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetAllFanmilyInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_CurPage;
        break;
      }
      
      // optional uint32 CurPage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CurPage:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &curpage_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetAllFanmilyInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetAllFanmilyInfoRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 CurPage = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->curpage(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetAllFanmilyInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 CurPage = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->curpage(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetAllFanmilyInfoRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 CurPage = 2;
    if (has_curpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->curpage());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetAllFanmilyInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetAllFanmilyInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetAllFanmilyInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetAllFanmilyInfoRequest::MergeFrom(const CMessageGetAllFanmilyInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_curpage(from.curpage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetAllFanmilyInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetAllFanmilyInfoRequest::CopyFrom(const CMessageGetAllFanmilyInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetAllFanmilyInfoRequest::Swap(CMessageGetAllFanmilyInfoRequest* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(curpage_, other->curpage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetAllFanmilyInfoRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetAllFanmilyInfoRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetAllFanmilyInfoRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetAllFanmilyInfoRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetAllFamilyInfoResponse::kHeadMsgFieldNumber;
const int CMessageGetAllFamilyInfoResponse::kFamilyInfoFieldNumber;
const int CMessageGetAllFamilyInfoResponse::kCurPageFieldNumber;
const int CMessageGetAllFamilyInfoResponse::kTotalPageFieldNumber;
#endif  // !_MSC_VER

CMessageGetAllFamilyInfoResponse::CMessageGetAllFamilyInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetAllFamilyInfoResponse::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
  familyinfo_ = const_cast< ::PBFamilyList*>(&::PBFamilyList::default_instance());
}

CMessageGetAllFamilyInfoResponse::CMessageGetAllFamilyInfoResponse(const CMessageGetAllFamilyInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetAllFamilyInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  familyinfo_ = NULL;
  curpage_ = 0u;
  totalpage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetAllFamilyInfoResponse::~CMessageGetAllFamilyInfoResponse() {
  SharedDtor();
}

void CMessageGetAllFamilyInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
    delete familyinfo_;
  }
}

const ::google::protobuf::Descriptor* CMessageGetAllFamilyInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetAllFamilyInfoResponse_descriptor_;
}

const CMessageGetAllFamilyInfoResponse& CMessageGetAllFamilyInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetAllFamilyInfoResponse* CMessageGetAllFamilyInfoResponse::default_instance_ = NULL;

CMessageGetAllFamilyInfoResponse* CMessageGetAllFamilyInfoResponse::New() const {
  return new CMessageGetAllFamilyInfoResponse;
}

void CMessageGetAllFamilyInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    if (_has_bit(1)) {
      if (familyinfo_ != NULL) familyinfo_->::PBFamilyList::Clear();
    }
    curpage_ = 0u;
    totalpage_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetAllFamilyInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(18)) goto parse_FamilyInfo;
        break;
      }
      
      // optional .PBFamilyList FamilyInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FamilyInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_familyinfo()));
        if (input->ExpectTag(24)) goto parse_CurPage;
        break;
      }
      
      // optional uint32 CurPage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CurPage:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &curpage_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_TotalPage;
        break;
      }
      
      // optional uint32 TotalPage = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TotalPage:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &totalpage_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetAllFamilyInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetAllFamilyInfoResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional .PBFamilyList FamilyInfo = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->familyinfo(), output);
  }
  
  // optional uint32 CurPage = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->curpage(), output);
  }
  
  // optional uint32 TotalPage = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->totalpage(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetAllFamilyInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional .PBFamilyList FamilyInfo = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->familyinfo(), target);
  }
  
  // optional uint32 CurPage = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->curpage(), target);
  }
  
  // optional uint32 TotalPage = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->totalpage(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetAllFamilyInfoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional .PBFamilyList FamilyInfo = 2;
    if (has_familyinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->familyinfo());
    }
    
    // optional uint32 CurPage = 3;
    if (has_curpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->curpage());
    }
    
    // optional uint32 TotalPage = 4;
    if (has_totalpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->totalpage());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetAllFamilyInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetAllFamilyInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetAllFamilyInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetAllFamilyInfoResponse::MergeFrom(const CMessageGetAllFamilyInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      mutable_familyinfo()->::PBFamilyList::MergeFrom(from.familyinfo());
    }
    if (from._has_bit(2)) {
      set_curpage(from.curpage());
    }
    if (from._has_bit(3)) {
      set_totalpage(from.totalpage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetAllFamilyInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetAllFamilyInfoResponse::CopyFrom(const CMessageGetAllFamilyInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetAllFamilyInfoResponse::Swap(CMessageGetAllFamilyInfoResponse* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(familyinfo_, other->familyinfo_);
    std::swap(curpage_, other->curpage_);
    std::swap(totalpage_, other->totalpage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetAllFamilyInfoResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetAllFamilyInfoResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetAllFamilyInfoResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetAllFamilyInfoResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetApplyListRequest::kHeadMsgFieldNumber;
const int CMessageGetApplyListRequest::kFamilyIDFieldNumber;
#endif  // !_MSC_VER

CMessageGetApplyListRequest::CMessageGetApplyListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetApplyListRequest::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageGetApplyListRequest::CMessageGetApplyListRequest(const CMessageGetApplyListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetApplyListRequest::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  familyid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetApplyListRequest::~CMessageGetApplyListRequest() {
  SharedDtor();
}

void CMessageGetApplyListRequest::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageGetApplyListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetApplyListRequest_descriptor_;
}

const CMessageGetApplyListRequest& CMessageGetApplyListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetApplyListRequest* CMessageGetApplyListRequest::default_instance_ = NULL;

CMessageGetApplyListRequest* CMessageGetApplyListRequest::New() const {
  return new CMessageGetApplyListRequest;
}

void CMessageGetApplyListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    familyid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetApplyListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_FamilyID;
        break;
      }
      
      // optional uint32 FamilyID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetApplyListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetApplyListRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 FamilyID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->familyid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetApplyListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 FamilyID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->familyid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetApplyListRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 FamilyID = 2;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetApplyListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetApplyListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetApplyListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetApplyListRequest::MergeFrom(const CMessageGetApplyListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_familyid(from.familyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetApplyListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetApplyListRequest::CopyFrom(const CMessageGetApplyListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetApplyListRequest::Swap(CMessageGetApplyListRequest* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(familyid_, other->familyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetApplyListRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetApplyListRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetApplyListRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetApplyListRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetApplyListResponse::kHeadMsgFieldNumber;
const int CMessageGetApplyListResponse::kApplyListFieldNumber;
#endif  // !_MSC_VER

CMessageGetApplyListResponse::CMessageGetApplyListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetApplyListResponse::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
  applylist_ = const_cast< ::PBApplyList*>(&::PBApplyList::default_instance());
}

CMessageGetApplyListResponse::CMessageGetApplyListResponse(const CMessageGetApplyListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetApplyListResponse::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  applylist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetApplyListResponse::~CMessageGetApplyListResponse() {
  SharedDtor();
}

void CMessageGetApplyListResponse::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
    delete applylist_;
  }
}

const ::google::protobuf::Descriptor* CMessageGetApplyListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetApplyListResponse_descriptor_;
}

const CMessageGetApplyListResponse& CMessageGetApplyListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetApplyListResponse* CMessageGetApplyListResponse::default_instance_ = NULL;

CMessageGetApplyListResponse* CMessageGetApplyListResponse::New() const {
  return new CMessageGetApplyListResponse;
}

void CMessageGetApplyListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    if (_has_bit(1)) {
      if (applylist_ != NULL) applylist_->::PBApplyList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetApplyListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(18)) goto parse_ApplyList;
        break;
      }
      
      // optional .PBApplyList ApplyList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ApplyList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_applylist()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetApplyListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetApplyListResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional .PBApplyList ApplyList = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->applylist(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetApplyListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional .PBApplyList ApplyList = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->applylist(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetApplyListResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional .PBApplyList ApplyList = 2;
    if (has_applylist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->applylist());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetApplyListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetApplyListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetApplyListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetApplyListResponse::MergeFrom(const CMessageGetApplyListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      mutable_applylist()->::PBApplyList::MergeFrom(from.applylist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetApplyListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetApplyListResponse::CopyFrom(const CMessageGetApplyListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetApplyListResponse::Swap(CMessageGetApplyListResponse* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(applylist_, other->applylist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetApplyListResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetApplyListResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetApplyListResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetApplyListResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageKickPlayerRequest::kHeadMsgFieldNumber;
const int CMessageKickPlayerRequest::kPlayerCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageKickPlayerRequest::CMessageKickPlayerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageKickPlayerRequest::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageKickPlayerRequest::CMessageKickPlayerRequest(const CMessageKickPlayerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageKickPlayerRequest::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  playercharid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageKickPlayerRequest::~CMessageKickPlayerRequest() {
  SharedDtor();
}

void CMessageKickPlayerRequest::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageKickPlayerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageKickPlayerRequest_descriptor_;
}

const CMessageKickPlayerRequest& CMessageKickPlayerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageKickPlayerRequest* CMessageKickPlayerRequest::default_instance_ = NULL;

CMessageKickPlayerRequest* CMessageKickPlayerRequest::New() const {
  return new CMessageKickPlayerRequest;
}

void CMessageKickPlayerRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    playercharid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageKickPlayerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_PlayerCharID;
        break;
      }
      
      // optional uint32 PlayerCharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PlayerCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playercharid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageKickPlayerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageKickPlayerRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 PlayerCharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->playercharid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageKickPlayerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 PlayerCharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->playercharid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageKickPlayerRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 PlayerCharID = 2;
    if (has_playercharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playercharid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageKickPlayerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageKickPlayerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageKickPlayerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageKickPlayerRequest::MergeFrom(const CMessageKickPlayerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_playercharid(from.playercharid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageKickPlayerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageKickPlayerRequest::CopyFrom(const CMessageKickPlayerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageKickPlayerRequest::Swap(CMessageKickPlayerRequest* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(playercharid_, other->playercharid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageKickPlayerRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageKickPlayerRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageKickPlayerRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageKickPlayerRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageKickPlayerResponse::_default_playername_;
#ifndef _MSC_VER
const int CMessageKickPlayerResponse::kHeadMsgFieldNumber;
const int CMessageKickPlayerResponse::kErrcodeFieldNumber;
const int CMessageKickPlayerResponse::kPlayerNameFieldNumber;
const int CMessageKickPlayerResponse::kPlayerCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageKickPlayerResponse::CMessageKickPlayerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageKickPlayerResponse::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageKickPlayerResponse::CMessageKickPlayerResponse(const CMessageKickPlayerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageKickPlayerResponse::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  errcode_ = 0u;
  playername_ = const_cast< ::std::string*>(&_default_playername_);
  playercharid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageKickPlayerResponse::~CMessageKickPlayerResponse() {
  SharedDtor();
}

void CMessageKickPlayerResponse::SharedDtor() {
  if (playername_ != &_default_playername_) {
    delete playername_;
  }
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageKickPlayerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageKickPlayerResponse_descriptor_;
}

const CMessageKickPlayerResponse& CMessageKickPlayerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageKickPlayerResponse* CMessageKickPlayerResponse::default_instance_ = NULL;

CMessageKickPlayerResponse* CMessageKickPlayerResponse::New() const {
  return new CMessageKickPlayerResponse;
}

void CMessageKickPlayerResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    errcode_ = 0u;
    if (_has_bit(2)) {
      if (playername_ != &_default_playername_) {
        playername_->clear();
      }
    }
    playercharid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageKickPlayerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_PlayerName;
        break;
      }
      
      // optional string PlayerName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_PlayerName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_playername()));
        if (input->ExpectTag(32)) goto parse_PlayerCharID;
        break;
      }
      
      // optional uint32 PlayerCharID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PlayerCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playercharid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageKickPlayerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageKickPlayerResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  // optional string PlayerName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->playername(), output);
  }
  
  // optional uint32 PlayerCharID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->playercharid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageKickPlayerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  // optional string PlayerName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->playername(), target);
  }
  
  // optional uint32 PlayerCharID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->playercharid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageKickPlayerResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional string PlayerName = 3;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->playername());
    }
    
    // optional uint32 PlayerCharID = 4;
    if (has_playercharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playercharid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageKickPlayerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageKickPlayerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageKickPlayerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageKickPlayerResponse::MergeFrom(const CMessageKickPlayerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(2)) {
      set_playername(from.playername());
    }
    if (from._has_bit(3)) {
      set_playercharid(from.playercharid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageKickPlayerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageKickPlayerResponse::CopyFrom(const CMessageKickPlayerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageKickPlayerResponse::Swap(CMessageKickPlayerResponse* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(errcode_, other->errcode_);
    std::swap(playername_, other->playername_);
    std::swap(playercharid_, other->playercharid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageKickPlayerResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageKickPlayerResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageKickPlayerResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageKickPlayerResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageKickPlayerNotify::_default_playername_;
const ::std::string CMessageKickPlayerNotify::_default_managername_;
#ifndef _MSC_VER
const int CMessageKickPlayerNotify::kHeadMsgFieldNumber;
const int CMessageKickPlayerNotify::kPlayerNameFieldNumber;
const int CMessageKickPlayerNotify::kPlayerCharIDFieldNumber;
const int CMessageKickPlayerNotify::kManagerNameFieldNumber;
const int CMessageKickPlayerNotify::kManagerCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageKickPlayerNotify::CMessageKickPlayerNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageKickPlayerNotify::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageKickPlayerNotify::CMessageKickPlayerNotify(const CMessageKickPlayerNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageKickPlayerNotify::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  playername_ = const_cast< ::std::string*>(&_default_playername_);
  playercharid_ = 0u;
  managername_ = const_cast< ::std::string*>(&_default_managername_);
  managercharid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageKickPlayerNotify::~CMessageKickPlayerNotify() {
  SharedDtor();
}

void CMessageKickPlayerNotify::SharedDtor() {
  if (playername_ != &_default_playername_) {
    delete playername_;
  }
  if (managername_ != &_default_managername_) {
    delete managername_;
  }
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageKickPlayerNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageKickPlayerNotify_descriptor_;
}

const CMessageKickPlayerNotify& CMessageKickPlayerNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageKickPlayerNotify* CMessageKickPlayerNotify::default_instance_ = NULL;

CMessageKickPlayerNotify* CMessageKickPlayerNotify::New() const {
  return new CMessageKickPlayerNotify;
}

void CMessageKickPlayerNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    if (_has_bit(1)) {
      if (playername_ != &_default_playername_) {
        playername_->clear();
      }
    }
    playercharid_ = 0u;
    if (_has_bit(3)) {
      if (managername_ != &_default_managername_) {
        managername_->clear();
      }
    }
    managercharid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageKickPlayerNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(18)) goto parse_PlayerName;
        break;
      }
      
      // optional string PlayerName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_PlayerName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_playername()));
        if (input->ExpectTag(24)) goto parse_PlayerCharID;
        break;
      }
      
      // optional uint32 PlayerCharID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PlayerCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playercharid_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_ManagerName;
        break;
      }
      
      // optional string ManagerName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ManagerName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_managername()));
        if (input->ExpectTag(40)) goto parse_ManagerCharID;
        break;
      }
      
      // optional uint32 ManagerCharID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ManagerCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &managercharid_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageKickPlayerNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageKickPlayerNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional string PlayerName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->playername(), output);
  }
  
  // optional uint32 PlayerCharID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->playercharid(), output);
  }
  
  // optional string ManagerName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->managername(), output);
  }
  
  // optional uint32 ManagerCharID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->managercharid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageKickPlayerNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional string PlayerName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->playername(), target);
  }
  
  // optional uint32 PlayerCharID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->playercharid(), target);
  }
  
  // optional string ManagerName = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->managername(), target);
  }
  
  // optional uint32 ManagerCharID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->managercharid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageKickPlayerNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional string PlayerName = 2;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->playername());
    }
    
    // optional uint32 PlayerCharID = 3;
    if (has_playercharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playercharid());
    }
    
    // optional string ManagerName = 4;
    if (has_managername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->managername());
    }
    
    // optional uint32 ManagerCharID = 5;
    if (has_managercharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->managercharid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageKickPlayerNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageKickPlayerNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageKickPlayerNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageKickPlayerNotify::MergeFrom(const CMessageKickPlayerNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_playername(from.playername());
    }
    if (from._has_bit(2)) {
      set_playercharid(from.playercharid());
    }
    if (from._has_bit(3)) {
      set_managername(from.managername());
    }
    if (from._has_bit(4)) {
      set_managercharid(from.managercharid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageKickPlayerNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageKickPlayerNotify::CopyFrom(const CMessageKickPlayerNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageKickPlayerNotify::Swap(CMessageKickPlayerNotify* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(playername_, other->playername_);
    std::swap(playercharid_, other->playercharid_);
    std::swap(managername_, other->managername_);
    std::swap(managercharid_, other->managercharid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageKickPlayerNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageKickPlayerNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageKickPlayerNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageKickPlayerNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageDisbandFamilyRequest::kHeadMsgFieldNumber;
const int CMessageDisbandFamilyRequest::kMsgCodeFieldNumber;
const int CMessageDisbandFamilyRequest::kNpcEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageDisbandFamilyRequest::CMessageDisbandFamilyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageDisbandFamilyRequest::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageDisbandFamilyRequest::CMessageDisbandFamilyRequest(const CMessageDisbandFamilyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageDisbandFamilyRequest::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  msgcode_ = 0u;
  npcentityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageDisbandFamilyRequest::~CMessageDisbandFamilyRequest() {
  SharedDtor();
}

void CMessageDisbandFamilyRequest::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageDisbandFamilyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageDisbandFamilyRequest_descriptor_;
}

const CMessageDisbandFamilyRequest& CMessageDisbandFamilyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageDisbandFamilyRequest* CMessageDisbandFamilyRequest::default_instance_ = NULL;

CMessageDisbandFamilyRequest* CMessageDisbandFamilyRequest::New() const {
  return new CMessageDisbandFamilyRequest;
}

void CMessageDisbandFamilyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    msgcode_ = 0u;
    npcentityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageDisbandFamilyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_MsgCode;
        break;
      }
      
      // optional uint32 MsgCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MsgCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &msgcode_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_NpcEntityID;
        break;
      }
      
      // optional uint32 NpcEntityID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcEntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcentityid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageDisbandFamilyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageDisbandFamilyRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 MsgCode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->msgcode(), output);
  }
  
  // optional uint32 NpcEntityID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->npcentityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageDisbandFamilyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 MsgCode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->msgcode(), target);
  }
  
  // optional uint32 NpcEntityID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->npcentityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageDisbandFamilyRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 MsgCode = 2;
    if (has_msgcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->msgcode());
    }
    
    // optional uint32 NpcEntityID = 3;
    if (has_npcentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcentityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageDisbandFamilyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageDisbandFamilyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageDisbandFamilyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageDisbandFamilyRequest::MergeFrom(const CMessageDisbandFamilyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_msgcode(from.msgcode());
    }
    if (from._has_bit(2)) {
      set_npcentityid(from.npcentityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageDisbandFamilyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDisbandFamilyRequest::CopyFrom(const CMessageDisbandFamilyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDisbandFamilyRequest::Swap(CMessageDisbandFamilyRequest* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(msgcode_, other->msgcode_);
    std::swap(npcentityid_, other->npcentityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageDisbandFamilyRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageDisbandFamilyRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageDisbandFamilyRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageDisbandFamilyRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageDisbandFamilyResponse::kHeadMsgFieldNumber;
const int CMessageDisbandFamilyResponse::kErrcodeFieldNumber;
#endif  // !_MSC_VER

CMessageDisbandFamilyResponse::CMessageDisbandFamilyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageDisbandFamilyResponse::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageDisbandFamilyResponse::CMessageDisbandFamilyResponse(const CMessageDisbandFamilyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageDisbandFamilyResponse::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageDisbandFamilyResponse::~CMessageDisbandFamilyResponse() {
  SharedDtor();
}

void CMessageDisbandFamilyResponse::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageDisbandFamilyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageDisbandFamilyResponse_descriptor_;
}

const CMessageDisbandFamilyResponse& CMessageDisbandFamilyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageDisbandFamilyResponse* CMessageDisbandFamilyResponse::default_instance_ = NULL;

CMessageDisbandFamilyResponse* CMessageDisbandFamilyResponse::New() const {
  return new CMessageDisbandFamilyResponse;
}

void CMessageDisbandFamilyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageDisbandFamilyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageDisbandFamilyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageDisbandFamilyResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageDisbandFamilyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageDisbandFamilyResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageDisbandFamilyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageDisbandFamilyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageDisbandFamilyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageDisbandFamilyResponse::MergeFrom(const CMessageDisbandFamilyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageDisbandFamilyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDisbandFamilyResponse::CopyFrom(const CMessageDisbandFamilyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDisbandFamilyResponse::Swap(CMessageDisbandFamilyResponse* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageDisbandFamilyResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageDisbandFamilyResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageDisbandFamilyResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageDisbandFamilyResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageDisbandFamilyNotify::kHeadMsgFieldNumber;
const int CMessageDisbandFamilyNotify::kManagerCharIDFieldNumber;
const int CMessageDisbandFamilyNotify::kFamilyIDFieldNumber;
#endif  // !_MSC_VER

CMessageDisbandFamilyNotify::CMessageDisbandFamilyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageDisbandFamilyNotify::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageDisbandFamilyNotify::CMessageDisbandFamilyNotify(const CMessageDisbandFamilyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageDisbandFamilyNotify::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  managercharid_ = 0u;
  familyid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageDisbandFamilyNotify::~CMessageDisbandFamilyNotify() {
  SharedDtor();
}

void CMessageDisbandFamilyNotify::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageDisbandFamilyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageDisbandFamilyNotify_descriptor_;
}

const CMessageDisbandFamilyNotify& CMessageDisbandFamilyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageDisbandFamilyNotify* CMessageDisbandFamilyNotify::default_instance_ = NULL;

CMessageDisbandFamilyNotify* CMessageDisbandFamilyNotify::New() const {
  return new CMessageDisbandFamilyNotify;
}

void CMessageDisbandFamilyNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    managercharid_ = 0u;
    familyid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageDisbandFamilyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_ManagerCharID;
        break;
      }
      
      // optional uint32 ManagerCharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ManagerCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &managercharid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_FamilyID;
        break;
      }
      
      // optional uint32 FamilyID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageDisbandFamilyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageDisbandFamilyNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 ManagerCharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->managercharid(), output);
  }
  
  // optional uint32 FamilyID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->familyid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageDisbandFamilyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 ManagerCharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->managercharid(), target);
  }
  
  // optional uint32 FamilyID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->familyid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageDisbandFamilyNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 ManagerCharID = 2;
    if (has_managercharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->managercharid());
    }
    
    // optional uint32 FamilyID = 3;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageDisbandFamilyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageDisbandFamilyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageDisbandFamilyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageDisbandFamilyNotify::MergeFrom(const CMessageDisbandFamilyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_managercharid(from.managercharid());
    }
    if (from._has_bit(2)) {
      set_familyid(from.familyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageDisbandFamilyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDisbandFamilyNotify::CopyFrom(const CMessageDisbandFamilyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDisbandFamilyNotify::Swap(CMessageDisbandFamilyNotify* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(managercharid_, other->managercharid_);
    std::swap(familyid_, other->familyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageDisbandFamilyNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageDisbandFamilyNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageDisbandFamilyNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageDisbandFamilyNotify_reflection_;
}

// ===================================================================

const ::std::string CMessageChangeFamilyNoticeRequest::_default_notice_;
#ifndef _MSC_VER
const int CMessageChangeFamilyNoticeRequest::kHeadMsgFieldNumber;
const int CMessageChangeFamilyNoticeRequest::kNoticeFieldNumber;
#endif  // !_MSC_VER

CMessageChangeFamilyNoticeRequest::CMessageChangeFamilyNoticeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeFamilyNoticeRequest::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageChangeFamilyNoticeRequest::CMessageChangeFamilyNoticeRequest(const CMessageChangeFamilyNoticeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeFamilyNoticeRequest::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  notice_ = const_cast< ::std::string*>(&_default_notice_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeFamilyNoticeRequest::~CMessageChangeFamilyNoticeRequest() {
  SharedDtor();
}

void CMessageChangeFamilyNoticeRequest::SharedDtor() {
  if (notice_ != &_default_notice_) {
    delete notice_;
  }
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageChangeFamilyNoticeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeFamilyNoticeRequest_descriptor_;
}

const CMessageChangeFamilyNoticeRequest& CMessageChangeFamilyNoticeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeFamilyNoticeRequest* CMessageChangeFamilyNoticeRequest::default_instance_ = NULL;

CMessageChangeFamilyNoticeRequest* CMessageChangeFamilyNoticeRequest::New() const {
  return new CMessageChangeFamilyNoticeRequest;
}

void CMessageChangeFamilyNoticeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    if (_has_bit(1)) {
      if (notice_ != &_default_notice_) {
        notice_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeFamilyNoticeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(18)) goto parse_Notice;
        break;
      }
      
      // optional string Notice = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Notice:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_notice()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeFamilyNoticeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeFamilyNoticeRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional string Notice = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->notice(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeFamilyNoticeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional string Notice = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->notice(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeFamilyNoticeRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional string Notice = 2;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->notice());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeFamilyNoticeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeFamilyNoticeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeFamilyNoticeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeFamilyNoticeRequest::MergeFrom(const CMessageChangeFamilyNoticeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_notice(from.notice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeFamilyNoticeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeFamilyNoticeRequest::CopyFrom(const CMessageChangeFamilyNoticeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeFamilyNoticeRequest::Swap(CMessageChangeFamilyNoticeRequest* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(notice_, other->notice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeFamilyNoticeRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeFamilyNoticeRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeFamilyNoticeRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeFamilyNoticeRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageChangeFamilyNoticeResponse::_default_notice_;
#ifndef _MSC_VER
const int CMessageChangeFamilyNoticeResponse::kHeadMsgFieldNumber;
const int CMessageChangeFamilyNoticeResponse::kErrcodeFieldNumber;
const int CMessageChangeFamilyNoticeResponse::kNoticeFieldNumber;
#endif  // !_MSC_VER

CMessageChangeFamilyNoticeResponse::CMessageChangeFamilyNoticeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeFamilyNoticeResponse::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageChangeFamilyNoticeResponse::CMessageChangeFamilyNoticeResponse(const CMessageChangeFamilyNoticeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeFamilyNoticeResponse::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  errcode_ = 0u;
  notice_ = const_cast< ::std::string*>(&_default_notice_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeFamilyNoticeResponse::~CMessageChangeFamilyNoticeResponse() {
  SharedDtor();
}

void CMessageChangeFamilyNoticeResponse::SharedDtor() {
  if (notice_ != &_default_notice_) {
    delete notice_;
  }
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageChangeFamilyNoticeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeFamilyNoticeResponse_descriptor_;
}

const CMessageChangeFamilyNoticeResponse& CMessageChangeFamilyNoticeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeFamilyNoticeResponse* CMessageChangeFamilyNoticeResponse::default_instance_ = NULL;

CMessageChangeFamilyNoticeResponse* CMessageChangeFamilyNoticeResponse::New() const {
  return new CMessageChangeFamilyNoticeResponse;
}

void CMessageChangeFamilyNoticeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    errcode_ = 0u;
    if (_has_bit(2)) {
      if (notice_ != &_default_notice_) {
        notice_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeFamilyNoticeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_Notice;
        break;
      }
      
      // optional string Notice = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Notice:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_notice()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeFamilyNoticeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeFamilyNoticeResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  // optional string Notice = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->notice(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeFamilyNoticeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  // optional string Notice = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->notice(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeFamilyNoticeResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional string Notice = 3;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->notice());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeFamilyNoticeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeFamilyNoticeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeFamilyNoticeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeFamilyNoticeResponse::MergeFrom(const CMessageChangeFamilyNoticeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(2)) {
      set_notice(from.notice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeFamilyNoticeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeFamilyNoticeResponse::CopyFrom(const CMessageChangeFamilyNoticeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeFamilyNoticeResponse::Swap(CMessageChangeFamilyNoticeResponse* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(errcode_, other->errcode_);
    std::swap(notice_, other->notice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeFamilyNoticeResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeFamilyNoticeResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeFamilyNoticeResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeFamilyNoticeResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageAppointHeaderRequest::kHeadMsgFieldNumber;
const int CMessageAppointHeaderRequest::kPlayerCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageAppointHeaderRequest::CMessageAppointHeaderRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageAppointHeaderRequest::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageAppointHeaderRequest::CMessageAppointHeaderRequest(const CMessageAppointHeaderRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageAppointHeaderRequest::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  playercharid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageAppointHeaderRequest::~CMessageAppointHeaderRequest() {
  SharedDtor();
}

void CMessageAppointHeaderRequest::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageAppointHeaderRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageAppointHeaderRequest_descriptor_;
}

const CMessageAppointHeaderRequest& CMessageAppointHeaderRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageAppointHeaderRequest* CMessageAppointHeaderRequest::default_instance_ = NULL;

CMessageAppointHeaderRequest* CMessageAppointHeaderRequest::New() const {
  return new CMessageAppointHeaderRequest;
}

void CMessageAppointHeaderRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    playercharid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageAppointHeaderRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_PlayerCharID;
        break;
      }
      
      // optional uint32 PlayerCharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PlayerCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playercharid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageAppointHeaderRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageAppointHeaderRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 PlayerCharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->playercharid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageAppointHeaderRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 PlayerCharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->playercharid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageAppointHeaderRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 PlayerCharID = 2;
    if (has_playercharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playercharid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageAppointHeaderRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageAppointHeaderRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageAppointHeaderRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageAppointHeaderRequest::MergeFrom(const CMessageAppointHeaderRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_playercharid(from.playercharid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageAppointHeaderRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAppointHeaderRequest::CopyFrom(const CMessageAppointHeaderRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAppointHeaderRequest::Swap(CMessageAppointHeaderRequest* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(playercharid_, other->playercharid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageAppointHeaderRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageAppointHeaderRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageAppointHeaderRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageAppointHeaderRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageAppointHeaderResponse::_default_playername_;
#ifndef _MSC_VER
const int CMessageAppointHeaderResponse::kHeadMsgFieldNumber;
const int CMessageAppointHeaderResponse::kErrcodeFieldNumber;
const int CMessageAppointHeaderResponse::kPlayerCharIDFieldNumber;
const int CMessageAppointHeaderResponse::kPlayerNameFieldNumber;
#endif  // !_MSC_VER

CMessageAppointHeaderResponse::CMessageAppointHeaderResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageAppointHeaderResponse::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageAppointHeaderResponse::CMessageAppointHeaderResponse(const CMessageAppointHeaderResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageAppointHeaderResponse::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  errcode_ = 0u;
  playercharid_ = 0u;
  playername_ = const_cast< ::std::string*>(&_default_playername_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageAppointHeaderResponse::~CMessageAppointHeaderResponse() {
  SharedDtor();
}

void CMessageAppointHeaderResponse::SharedDtor() {
  if (playername_ != &_default_playername_) {
    delete playername_;
  }
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageAppointHeaderResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageAppointHeaderResponse_descriptor_;
}

const CMessageAppointHeaderResponse& CMessageAppointHeaderResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageAppointHeaderResponse* CMessageAppointHeaderResponse::default_instance_ = NULL;

CMessageAppointHeaderResponse* CMessageAppointHeaderResponse::New() const {
  return new CMessageAppointHeaderResponse;
}

void CMessageAppointHeaderResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    errcode_ = 0u;
    playercharid_ = 0u;
    if (_has_bit(3)) {
      if (playername_ != &_default_playername_) {
        playername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageAppointHeaderResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_PlayerCharID;
        break;
      }
      
      // optional uint32 PlayerCharID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PlayerCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playercharid_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_PlayerName;
        break;
      }
      
      // optional string PlayerName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_PlayerName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_playername()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageAppointHeaderResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageAppointHeaderResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  // optional uint32 PlayerCharID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->playercharid(), output);
  }
  
  // optional string PlayerName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->playername(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageAppointHeaderResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  // optional uint32 PlayerCharID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->playercharid(), target);
  }
  
  // optional string PlayerName = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->playername(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageAppointHeaderResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional uint32 PlayerCharID = 3;
    if (has_playercharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playercharid());
    }
    
    // optional string PlayerName = 4;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->playername());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageAppointHeaderResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageAppointHeaderResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageAppointHeaderResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageAppointHeaderResponse::MergeFrom(const CMessageAppointHeaderResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(2)) {
      set_playercharid(from.playercharid());
    }
    if (from._has_bit(3)) {
      set_playername(from.playername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageAppointHeaderResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAppointHeaderResponse::CopyFrom(const CMessageAppointHeaderResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAppointHeaderResponse::Swap(CMessageAppointHeaderResponse* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(errcode_, other->errcode_);
    std::swap(playercharid_, other->playercharid_);
    std::swap(playername_, other->playername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageAppointHeaderResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageAppointHeaderResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageAppointHeaderResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageAppointHeaderResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageChangeHeaderNotify::_default_playername_;
const ::std::string CMessageChangeHeaderNotify::_default_managername_;
#ifndef _MSC_VER
const int CMessageChangeHeaderNotify::kHeadMsgFieldNumber;
const int CMessageChangeHeaderNotify::kPlayerCharIDFieldNumber;
const int CMessageChangeHeaderNotify::kPlayerNameFieldNumber;
const int CMessageChangeHeaderNotify::kManagerIDFieldNumber;
const int CMessageChangeHeaderNotify::kManagerNameFieldNumber;
#endif  // !_MSC_VER

CMessageChangeHeaderNotify::CMessageChangeHeaderNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeHeaderNotify::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageChangeHeaderNotify::CMessageChangeHeaderNotify(const CMessageChangeHeaderNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeHeaderNotify::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  playercharid_ = 0u;
  playername_ = const_cast< ::std::string*>(&_default_playername_);
  managerid_ = 0u;
  managername_ = const_cast< ::std::string*>(&_default_managername_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeHeaderNotify::~CMessageChangeHeaderNotify() {
  SharedDtor();
}

void CMessageChangeHeaderNotify::SharedDtor() {
  if (playername_ != &_default_playername_) {
    delete playername_;
  }
  if (managername_ != &_default_managername_) {
    delete managername_;
  }
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageChangeHeaderNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeHeaderNotify_descriptor_;
}

const CMessageChangeHeaderNotify& CMessageChangeHeaderNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeHeaderNotify* CMessageChangeHeaderNotify::default_instance_ = NULL;

CMessageChangeHeaderNotify* CMessageChangeHeaderNotify::New() const {
  return new CMessageChangeHeaderNotify;
}

void CMessageChangeHeaderNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    playercharid_ = 0u;
    if (_has_bit(2)) {
      if (playername_ != &_default_playername_) {
        playername_->clear();
      }
    }
    managerid_ = 0u;
    if (_has_bit(4)) {
      if (managername_ != &_default_managername_) {
        managername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeHeaderNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_PlayerCharID;
        break;
      }
      
      // optional uint32 PlayerCharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PlayerCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playercharid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_PlayerName;
        break;
      }
      
      // optional string PlayerName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_PlayerName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_playername()));
        if (input->ExpectTag(32)) goto parse_ManagerID;
        break;
      }
      
      // optional uint32 ManagerID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ManagerID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &managerid_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_ManagerName;
        break;
      }
      
      // optional string ManagerName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ManagerName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_managername()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeHeaderNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeHeaderNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 PlayerCharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->playercharid(), output);
  }
  
  // optional string PlayerName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->playername(), output);
  }
  
  // optional uint32 ManagerID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->managerid(), output);
  }
  
  // optional string ManagerName = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->managername(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeHeaderNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 PlayerCharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->playercharid(), target);
  }
  
  // optional string PlayerName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->playername(), target);
  }
  
  // optional uint32 ManagerID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->managerid(), target);
  }
  
  // optional string ManagerName = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->managername(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeHeaderNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 PlayerCharID = 2;
    if (has_playercharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playercharid());
    }
    
    // optional string PlayerName = 3;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->playername());
    }
    
    // optional uint32 ManagerID = 4;
    if (has_managerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->managerid());
    }
    
    // optional string ManagerName = 5;
    if (has_managername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->managername());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeHeaderNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeHeaderNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeHeaderNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeHeaderNotify::MergeFrom(const CMessageChangeHeaderNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_playercharid(from.playercharid());
    }
    if (from._has_bit(2)) {
      set_playername(from.playername());
    }
    if (from._has_bit(3)) {
      set_managerid(from.managerid());
    }
    if (from._has_bit(4)) {
      set_managername(from.managername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeHeaderNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeHeaderNotify::CopyFrom(const CMessageChangeHeaderNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeHeaderNotify::Swap(CMessageChangeHeaderNotify* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(playercharid_, other->playercharid_);
    std::swap(playername_, other->playername_);
    std::swap(managerid_, other->managerid_);
    std::swap(managername_, other->managername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeHeaderNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeHeaderNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeHeaderNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeHeaderNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageFamilyPropertyNotify::kHeadMsgFieldNumber;
const int CMessageFamilyPropertyNotify::kPropertyFieldNumber;
const int CMessageFamilyPropertyNotify::kFamilyLevelFieldNumber;
#endif  // !_MSC_VER

CMessageFamilyPropertyNotify::CMessageFamilyPropertyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFamilyPropertyNotify::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
  property_ = const_cast< ::PBFamilyPropery*>(&::PBFamilyPropery::default_instance());
}

CMessageFamilyPropertyNotify::CMessageFamilyPropertyNotify(const CMessageFamilyPropertyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFamilyPropertyNotify::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  property_ = NULL;
  familylevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFamilyPropertyNotify::~CMessageFamilyPropertyNotify() {
  SharedDtor();
}

void CMessageFamilyPropertyNotify::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
    delete property_;
  }
}

const ::google::protobuf::Descriptor* CMessageFamilyPropertyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFamilyPropertyNotify_descriptor_;
}

const CMessageFamilyPropertyNotify& CMessageFamilyPropertyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFamilyPropertyNotify* CMessageFamilyPropertyNotify::default_instance_ = NULL;

CMessageFamilyPropertyNotify* CMessageFamilyPropertyNotify::New() const {
  return new CMessageFamilyPropertyNotify;
}

void CMessageFamilyPropertyNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    if (_has_bit(1)) {
      if (property_ != NULL) property_->::PBFamilyPropery::Clear();
    }
    familylevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFamilyPropertyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(18)) goto parse_Property;
        break;
      }
      
      // optional .PBFamilyPropery Property = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Property:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_property()));
        if (input->ExpectTag(24)) goto parse_FamilyLevel;
        break;
      }
      
      // optional uint32 FamilyLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familylevel_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageFamilyPropertyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFamilyPropertyNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional .PBFamilyPropery Property = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->property(), output);
  }
  
  // optional uint32 FamilyLevel = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->familylevel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFamilyPropertyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional .PBFamilyPropery Property = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->property(), target);
  }
  
  // optional uint32 FamilyLevel = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->familylevel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFamilyPropertyNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional .PBFamilyPropery Property = 2;
    if (has_property()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->property());
    }
    
    // optional uint32 FamilyLevel = 3;
    if (has_familylevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familylevel());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFamilyPropertyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFamilyPropertyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFamilyPropertyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFamilyPropertyNotify::MergeFrom(const CMessageFamilyPropertyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      mutable_property()->::PBFamilyPropery::MergeFrom(from.property());
    }
    if (from._has_bit(2)) {
      set_familylevel(from.familylevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFamilyPropertyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFamilyPropertyNotify::CopyFrom(const CMessageFamilyPropertyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFamilyPropertyNotify::Swap(CMessageFamilyPropertyNotify* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(property_, other->property_);
    std::swap(familylevel_, other->familylevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFamilyPropertyNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFamilyPropertyNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFamilyPropertyNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFamilyPropertyNotify_reflection_;
}

// ===================================================================

const ::std::string CMessageInviteFamilyResultNotify::_default_rolename_;
#ifndef _MSC_VER
const int CMessageInviteFamilyResultNotify::kHeadMsgFieldNumber;
const int CMessageInviteFamilyResultNotify::kResultFieldNumber;
const int CMessageInviteFamilyResultNotify::kRoleNameFieldNumber;
#endif  // !_MSC_VER

CMessageInviteFamilyResultNotify::CMessageInviteFamilyResultNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageInviteFamilyResultNotify::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageInviteFamilyResultNotify::CMessageInviteFamilyResultNotify(const CMessageInviteFamilyResultNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageInviteFamilyResultNotify::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  result_ = 0u;
  rolename_ = const_cast< ::std::string*>(&_default_rolename_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageInviteFamilyResultNotify::~CMessageInviteFamilyResultNotify() {
  SharedDtor();
}

void CMessageInviteFamilyResultNotify::SharedDtor() {
  if (rolename_ != &_default_rolename_) {
    delete rolename_;
  }
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageInviteFamilyResultNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageInviteFamilyResultNotify_descriptor_;
}

const CMessageInviteFamilyResultNotify& CMessageInviteFamilyResultNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageInviteFamilyResultNotify* CMessageInviteFamilyResultNotify::default_instance_ = NULL;

CMessageInviteFamilyResultNotify* CMessageInviteFamilyResultNotify::New() const {
  return new CMessageInviteFamilyResultNotify;
}

void CMessageInviteFamilyResultNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    result_ = 0u;
    if (_has_bit(2)) {
      if (rolename_ != &_default_rolename_) {
        rolename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageInviteFamilyResultNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_RoleName;
        break;
      }
      
      // optional string RoleName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RoleName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_rolename()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageInviteFamilyResultNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageInviteFamilyResultNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  // optional string RoleName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->rolename(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageInviteFamilyResultNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  // optional string RoleName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->rolename(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageInviteFamilyResultNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional string RoleName = 3;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->rolename());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageInviteFamilyResultNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageInviteFamilyResultNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageInviteFamilyResultNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageInviteFamilyResultNotify::MergeFrom(const CMessageInviteFamilyResultNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_rolename(from.rolename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageInviteFamilyResultNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageInviteFamilyResultNotify::CopyFrom(const CMessageInviteFamilyResultNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageInviteFamilyResultNotify::Swap(CMessageInviteFamilyResultNotify* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(result_, other->result_);
    std::swap(rolename_, other->rolename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageInviteFamilyResultNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageInviteFamilyResultNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageInviteFamilyResultNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageInviteFamilyResultNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageClearFamilyApplyRequest::kHeadMsgFieldNumber;
const int CMessageClearFamilyApplyRequest::kMsgCodeFieldNumber;
#endif  // !_MSC_VER

CMessageClearFamilyApplyRequest::CMessageClearFamilyApplyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageClearFamilyApplyRequest::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageClearFamilyApplyRequest::CMessageClearFamilyApplyRequest(const CMessageClearFamilyApplyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageClearFamilyApplyRequest::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  msgcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageClearFamilyApplyRequest::~CMessageClearFamilyApplyRequest() {
  SharedDtor();
}

void CMessageClearFamilyApplyRequest::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageClearFamilyApplyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageClearFamilyApplyRequest_descriptor_;
}

const CMessageClearFamilyApplyRequest& CMessageClearFamilyApplyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageClearFamilyApplyRequest* CMessageClearFamilyApplyRequest::default_instance_ = NULL;

CMessageClearFamilyApplyRequest* CMessageClearFamilyApplyRequest::New() const {
  return new CMessageClearFamilyApplyRequest;
}

void CMessageClearFamilyApplyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    msgcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageClearFamilyApplyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_MsgCode;
        break;
      }
      
      // optional uint32 MsgCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MsgCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &msgcode_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageClearFamilyApplyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageClearFamilyApplyRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 MsgCode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->msgcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageClearFamilyApplyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 MsgCode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->msgcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageClearFamilyApplyRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 MsgCode = 2;
    if (has_msgcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->msgcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageClearFamilyApplyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageClearFamilyApplyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageClearFamilyApplyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageClearFamilyApplyRequest::MergeFrom(const CMessageClearFamilyApplyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_msgcode(from.msgcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageClearFamilyApplyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageClearFamilyApplyRequest::CopyFrom(const CMessageClearFamilyApplyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageClearFamilyApplyRequest::Swap(CMessageClearFamilyApplyRequest* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(msgcode_, other->msgcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageClearFamilyApplyRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageClearFamilyApplyRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageClearFamilyApplyRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageClearFamilyApplyRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageClearFamilyApplyResponse::kHeadMsgFieldNumber;
const int CMessageClearFamilyApplyResponse::kErrcodeFieldNumber;
#endif  // !_MSC_VER

CMessageClearFamilyApplyResponse::CMessageClearFamilyApplyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageClearFamilyApplyResponse::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageClearFamilyApplyResponse::CMessageClearFamilyApplyResponse(const CMessageClearFamilyApplyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageClearFamilyApplyResponse::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageClearFamilyApplyResponse::~CMessageClearFamilyApplyResponse() {
  SharedDtor();
}

void CMessageClearFamilyApplyResponse::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageClearFamilyApplyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageClearFamilyApplyResponse_descriptor_;
}

const CMessageClearFamilyApplyResponse& CMessageClearFamilyApplyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageClearFamilyApplyResponse* CMessageClearFamilyApplyResponse::default_instance_ = NULL;

CMessageClearFamilyApplyResponse* CMessageClearFamilyApplyResponse::New() const {
  return new CMessageClearFamilyApplyResponse;
}

void CMessageClearFamilyApplyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageClearFamilyApplyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageClearFamilyApplyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageClearFamilyApplyResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageClearFamilyApplyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageClearFamilyApplyResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageClearFamilyApplyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageClearFamilyApplyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageClearFamilyApplyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageClearFamilyApplyResponse::MergeFrom(const CMessageClearFamilyApplyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageClearFamilyApplyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageClearFamilyApplyResponse::CopyFrom(const CMessageClearFamilyApplyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageClearFamilyApplyResponse::Swap(CMessageClearFamilyApplyResponse* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageClearFamilyApplyResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageClearFamilyApplyResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageClearFamilyApplyResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageClearFamilyApplyResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageJoinCorpsNotify::_default_corpsname_;
const ::std::string CMessageJoinCorpsNotify::_default_unionname_;
#ifndef _MSC_VER
const int CMessageJoinCorpsNotify::kHeadMsgFieldNumber;
const int CMessageJoinCorpsNotify::kCorpsIDFieldNumber;
const int CMessageJoinCorpsNotify::kCorpsNameFieldNumber;
const int CMessageJoinCorpsNotify::kJoinMethodFieldNumber;
const int CMessageJoinCorpsNotify::kUnionIDFieldNumber;
const int CMessageJoinCorpsNotify::kUnionNameFieldNumber;
#endif  // !_MSC_VER

CMessageJoinCorpsNotify::CMessageJoinCorpsNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageJoinCorpsNotify::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageJoinCorpsNotify::CMessageJoinCorpsNotify(const CMessageJoinCorpsNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageJoinCorpsNotify::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  corpsid_ = 0u;
  corpsname_ = const_cast< ::std::string*>(&_default_corpsname_);
  joinmethod_ = 0u;
  unionid_ = 0u;
  unionname_ = const_cast< ::std::string*>(&_default_unionname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageJoinCorpsNotify::~CMessageJoinCorpsNotify() {
  SharedDtor();
}

void CMessageJoinCorpsNotify::SharedDtor() {
  if (corpsname_ != &_default_corpsname_) {
    delete corpsname_;
  }
  if (unionname_ != &_default_unionname_) {
    delete unionname_;
  }
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageJoinCorpsNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageJoinCorpsNotify_descriptor_;
}

const CMessageJoinCorpsNotify& CMessageJoinCorpsNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageJoinCorpsNotify* CMessageJoinCorpsNotify::default_instance_ = NULL;

CMessageJoinCorpsNotify* CMessageJoinCorpsNotify::New() const {
  return new CMessageJoinCorpsNotify;
}

void CMessageJoinCorpsNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    corpsid_ = 0u;
    if (_has_bit(2)) {
      if (corpsname_ != &_default_corpsname_) {
        corpsname_->clear();
      }
    }
    joinmethod_ = 0u;
    unionid_ = 0u;
    if (_has_bit(5)) {
      if (unionname_ != &_default_unionname_) {
        unionname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageJoinCorpsNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_CorpsID;
        break;
      }
      
      // optional uint32 CorpsID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_CorpsName;
        break;
      }
      
      // optional string CorpsName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_corpsname()));
        if (input->ExpectTag(32)) goto parse_JoinMethod;
        break;
      }
      
      // optional uint32 JoinMethod = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_JoinMethod:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &joinmethod_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_UnionID;
        break;
      }
      
      // optional uint32 UnionID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UnionID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &unionid_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_UnionName;
        break;
      }
      
      // optional string UnionName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_UnionName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_unionname()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageJoinCorpsNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageJoinCorpsNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 CorpsID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->corpsid(), output);
  }
  
  // optional string CorpsName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->corpsname(), output);
  }
  
  // optional uint32 JoinMethod = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->joinmethod(), output);
  }
  
  // optional uint32 UnionID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->unionid(), output);
  }
  
  // optional string UnionName = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteString(6, this->unionname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageJoinCorpsNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 CorpsID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->corpsid(), target);
  }
  
  // optional string CorpsName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->corpsname(), target);
  }
  
  // optional uint32 JoinMethod = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->joinmethod(), target);
  }
  
  // optional uint32 UnionID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->unionid(), target);
  }
  
  // optional string UnionName = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(6, this->unionname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageJoinCorpsNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 CorpsID = 2;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
    // optional string CorpsName = 3;
    if (has_corpsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->corpsname());
    }
    
    // optional uint32 JoinMethod = 4;
    if (has_joinmethod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->joinmethod());
    }
    
    // optional uint32 UnionID = 5;
    if (has_unionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->unionid());
    }
    
    // optional string UnionName = 6;
    if (has_unionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->unionname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageJoinCorpsNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageJoinCorpsNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageJoinCorpsNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageJoinCorpsNotify::MergeFrom(const CMessageJoinCorpsNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_corpsid(from.corpsid());
    }
    if (from._has_bit(2)) {
      set_corpsname(from.corpsname());
    }
    if (from._has_bit(3)) {
      set_joinmethod(from.joinmethod());
    }
    if (from._has_bit(4)) {
      set_unionid(from.unionid());
    }
    if (from._has_bit(5)) {
      set_unionname(from.unionname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageJoinCorpsNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageJoinCorpsNotify::CopyFrom(const CMessageJoinCorpsNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageJoinCorpsNotify::Swap(CMessageJoinCorpsNotify* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(corpsid_, other->corpsid_);
    std::swap(corpsname_, other->corpsname_);
    std::swap(joinmethod_, other->joinmethod_);
    std::swap(unionid_, other->unionid_);
    std::swap(unionname_, other->unionname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageJoinCorpsNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageJoinCorpsNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageJoinCorpsNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageJoinCorpsNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCancelFamilyDisbandRequest::kHeadMsgFieldNumber;
const int CMessageCancelFamilyDisbandRequest::kNpcEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageCancelFamilyDisbandRequest::CMessageCancelFamilyDisbandRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCancelFamilyDisbandRequest::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageCancelFamilyDisbandRequest::CMessageCancelFamilyDisbandRequest(const CMessageCancelFamilyDisbandRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCancelFamilyDisbandRequest::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  npcentityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCancelFamilyDisbandRequest::~CMessageCancelFamilyDisbandRequest() {
  SharedDtor();
}

void CMessageCancelFamilyDisbandRequest::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageCancelFamilyDisbandRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCancelFamilyDisbandRequest_descriptor_;
}

const CMessageCancelFamilyDisbandRequest& CMessageCancelFamilyDisbandRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCancelFamilyDisbandRequest* CMessageCancelFamilyDisbandRequest::default_instance_ = NULL;

CMessageCancelFamilyDisbandRequest* CMessageCancelFamilyDisbandRequest::New() const {
  return new CMessageCancelFamilyDisbandRequest;
}

void CMessageCancelFamilyDisbandRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    npcentityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCancelFamilyDisbandRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_NpcEntityID;
        break;
      }
      
      // optional uint32 NpcEntityID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcEntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcentityid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCancelFamilyDisbandRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCancelFamilyDisbandRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 NpcEntityID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->npcentityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCancelFamilyDisbandRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 NpcEntityID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->npcentityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCancelFamilyDisbandRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 NpcEntityID = 2;
    if (has_npcentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcentityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCancelFamilyDisbandRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCancelFamilyDisbandRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCancelFamilyDisbandRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCancelFamilyDisbandRequest::MergeFrom(const CMessageCancelFamilyDisbandRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_npcentityid(from.npcentityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCancelFamilyDisbandRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCancelFamilyDisbandRequest::CopyFrom(const CMessageCancelFamilyDisbandRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCancelFamilyDisbandRequest::Swap(CMessageCancelFamilyDisbandRequest* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(npcentityid_, other->npcentityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCancelFamilyDisbandRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCancelFamilyDisbandRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCancelFamilyDisbandRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCancelFamilyDisbandRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCancelFamilyDisbandResponse::kHeadMsgFieldNumber;
const int CMessageCancelFamilyDisbandResponse::kErrcodeFieldNumber;
#endif  // !_MSC_VER

CMessageCancelFamilyDisbandResponse::CMessageCancelFamilyDisbandResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCancelFamilyDisbandResponse::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageCancelFamilyDisbandResponse::CMessageCancelFamilyDisbandResponse(const CMessageCancelFamilyDisbandResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCancelFamilyDisbandResponse::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCancelFamilyDisbandResponse::~CMessageCancelFamilyDisbandResponse() {
  SharedDtor();
}

void CMessageCancelFamilyDisbandResponse::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageCancelFamilyDisbandResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCancelFamilyDisbandResponse_descriptor_;
}

const CMessageCancelFamilyDisbandResponse& CMessageCancelFamilyDisbandResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCancelFamilyDisbandResponse* CMessageCancelFamilyDisbandResponse::default_instance_ = NULL;

CMessageCancelFamilyDisbandResponse* CMessageCancelFamilyDisbandResponse::New() const {
  return new CMessageCancelFamilyDisbandResponse;
}

void CMessageCancelFamilyDisbandResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCancelFamilyDisbandResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCancelFamilyDisbandResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCancelFamilyDisbandResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCancelFamilyDisbandResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCancelFamilyDisbandResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCancelFamilyDisbandResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCancelFamilyDisbandResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCancelFamilyDisbandResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCancelFamilyDisbandResponse::MergeFrom(const CMessageCancelFamilyDisbandResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCancelFamilyDisbandResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCancelFamilyDisbandResponse::CopyFrom(const CMessageCancelFamilyDisbandResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCancelFamilyDisbandResponse::Swap(CMessageCancelFamilyDisbandResponse* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCancelFamilyDisbandResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCancelFamilyDisbandResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCancelFamilyDisbandResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCancelFamilyDisbandResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageChangeFamilyNoticeNotify::_default_notice_;
#ifndef _MSC_VER
const int CMessageChangeFamilyNoticeNotify::kHeadMsgFieldNumber;
const int CMessageChangeFamilyNoticeNotify::kNoticeFieldNumber;
#endif  // !_MSC_VER

CMessageChangeFamilyNoticeNotify::CMessageChangeFamilyNoticeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeFamilyNoticeNotify::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageChangeFamilyNoticeNotify::CMessageChangeFamilyNoticeNotify(const CMessageChangeFamilyNoticeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeFamilyNoticeNotify::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  notice_ = const_cast< ::std::string*>(&_default_notice_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeFamilyNoticeNotify::~CMessageChangeFamilyNoticeNotify() {
  SharedDtor();
}

void CMessageChangeFamilyNoticeNotify::SharedDtor() {
  if (notice_ != &_default_notice_) {
    delete notice_;
  }
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageChangeFamilyNoticeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeFamilyNoticeNotify_descriptor_;
}

const CMessageChangeFamilyNoticeNotify& CMessageChangeFamilyNoticeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeFamilyNoticeNotify* CMessageChangeFamilyNoticeNotify::default_instance_ = NULL;

CMessageChangeFamilyNoticeNotify* CMessageChangeFamilyNoticeNotify::New() const {
  return new CMessageChangeFamilyNoticeNotify;
}

void CMessageChangeFamilyNoticeNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    if (_has_bit(1)) {
      if (notice_ != &_default_notice_) {
        notice_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeFamilyNoticeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(18)) goto parse_Notice;
        break;
      }
      
      // optional string Notice = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Notice:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_notice()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeFamilyNoticeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeFamilyNoticeNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional string Notice = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->notice(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeFamilyNoticeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional string Notice = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->notice(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeFamilyNoticeNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional string Notice = 2;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->notice());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeFamilyNoticeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeFamilyNoticeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeFamilyNoticeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeFamilyNoticeNotify::MergeFrom(const CMessageChangeFamilyNoticeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_notice(from.notice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeFamilyNoticeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeFamilyNoticeNotify::CopyFrom(const CMessageChangeFamilyNoticeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeFamilyNoticeNotify::Swap(CMessageChangeFamilyNoticeNotify* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(notice_, other->notice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeFamilyNoticeNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeFamilyNoticeNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeFamilyNoticeNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeFamilyNoticeNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageRefreshFamilyInfoRequest::kHeadMsgFieldNumber;
const int CMessageRefreshFamilyInfoRequest::kMsgCodeFieldNumber;
#endif  // !_MSC_VER

CMessageRefreshFamilyInfoRequest::CMessageRefreshFamilyInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRefreshFamilyInfoRequest::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageRefreshFamilyInfoRequest::CMessageRefreshFamilyInfoRequest(const CMessageRefreshFamilyInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRefreshFamilyInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  msgcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRefreshFamilyInfoRequest::~CMessageRefreshFamilyInfoRequest() {
  SharedDtor();
}

void CMessageRefreshFamilyInfoRequest::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageRefreshFamilyInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRefreshFamilyInfoRequest_descriptor_;
}

const CMessageRefreshFamilyInfoRequest& CMessageRefreshFamilyInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRefreshFamilyInfoRequest* CMessageRefreshFamilyInfoRequest::default_instance_ = NULL;

CMessageRefreshFamilyInfoRequest* CMessageRefreshFamilyInfoRequest::New() const {
  return new CMessageRefreshFamilyInfoRequest;
}

void CMessageRefreshFamilyInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    msgcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRefreshFamilyInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_MsgCode;
        break;
      }
      
      // optional uint32 MsgCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MsgCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &msgcode_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageRefreshFamilyInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRefreshFamilyInfoRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 MsgCode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->msgcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRefreshFamilyInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 MsgCode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->msgcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRefreshFamilyInfoRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 MsgCode = 2;
    if (has_msgcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->msgcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRefreshFamilyInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRefreshFamilyInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRefreshFamilyInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRefreshFamilyInfoRequest::MergeFrom(const CMessageRefreshFamilyInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_msgcode(from.msgcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRefreshFamilyInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRefreshFamilyInfoRequest::CopyFrom(const CMessageRefreshFamilyInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRefreshFamilyInfoRequest::Swap(CMessageRefreshFamilyInfoRequest* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(msgcode_, other->msgcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRefreshFamilyInfoRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRefreshFamilyInfoRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRefreshFamilyInfoRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRefreshFamilyInfoRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageRefreshFamilyInfoResponse::kHeadMsgFieldNumber;
const int CMessageRefreshFamilyInfoResponse::kMemberListFieldNumber;
#endif  // !_MSC_VER

CMessageRefreshFamilyInfoResponse::CMessageRefreshFamilyInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRefreshFamilyInfoResponse::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
  memberlist_ = const_cast< ::PBFamilyMemberList*>(&::PBFamilyMemberList::default_instance());
}

CMessageRefreshFamilyInfoResponse::CMessageRefreshFamilyInfoResponse(const CMessageRefreshFamilyInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRefreshFamilyInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  memberlist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRefreshFamilyInfoResponse::~CMessageRefreshFamilyInfoResponse() {
  SharedDtor();
}

void CMessageRefreshFamilyInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
    delete memberlist_;
  }
}

const ::google::protobuf::Descriptor* CMessageRefreshFamilyInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRefreshFamilyInfoResponse_descriptor_;
}

const CMessageRefreshFamilyInfoResponse& CMessageRefreshFamilyInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRefreshFamilyInfoResponse* CMessageRefreshFamilyInfoResponse::default_instance_ = NULL;

CMessageRefreshFamilyInfoResponse* CMessageRefreshFamilyInfoResponse::New() const {
  return new CMessageRefreshFamilyInfoResponse;
}

void CMessageRefreshFamilyInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    if (_has_bit(1)) {
      if (memberlist_ != NULL) memberlist_->::PBFamilyMemberList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRefreshFamilyInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(18)) goto parse_MemberList;
        break;
      }
      
      // optional .PBFamilyMemberList MemberList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MemberList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_memberlist()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageRefreshFamilyInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRefreshFamilyInfoResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional .PBFamilyMemberList MemberList = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->memberlist(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRefreshFamilyInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional .PBFamilyMemberList MemberList = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->memberlist(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRefreshFamilyInfoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional .PBFamilyMemberList MemberList = 2;
    if (has_memberlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->memberlist());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRefreshFamilyInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRefreshFamilyInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRefreshFamilyInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRefreshFamilyInfoResponse::MergeFrom(const CMessageRefreshFamilyInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      mutable_memberlist()->::PBFamilyMemberList::MergeFrom(from.memberlist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRefreshFamilyInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRefreshFamilyInfoResponse::CopyFrom(const CMessageRefreshFamilyInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRefreshFamilyInfoResponse::Swap(CMessageRefreshFamilyInfoResponse* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(memberlist_, other->memberlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRefreshFamilyInfoResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRefreshFamilyInfoResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRefreshFamilyInfoResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRefreshFamilyInfoResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageSetFamilyPostRequest::kHeadMsgFieldNumber;
const int CMessageSetFamilyPostRequest::kMemberIDFieldNumber;
const int CMessageSetFamilyPostRequest::kPostFieldNumber;
#endif  // !_MSC_VER

CMessageSetFamilyPostRequest::CMessageSetFamilyPostRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageSetFamilyPostRequest::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageSetFamilyPostRequest::CMessageSetFamilyPostRequest(const CMessageSetFamilyPostRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageSetFamilyPostRequest::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  memberid_ = 0u;
  post_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageSetFamilyPostRequest::~CMessageSetFamilyPostRequest() {
  SharedDtor();
}

void CMessageSetFamilyPostRequest::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageSetFamilyPostRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageSetFamilyPostRequest_descriptor_;
}

const CMessageSetFamilyPostRequest& CMessageSetFamilyPostRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageSetFamilyPostRequest* CMessageSetFamilyPostRequest::default_instance_ = NULL;

CMessageSetFamilyPostRequest* CMessageSetFamilyPostRequest::New() const {
  return new CMessageSetFamilyPostRequest;
}

void CMessageSetFamilyPostRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    memberid_ = 0u;
    post_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageSetFamilyPostRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_MemberID;
        break;
      }
      
      // optional uint32 MemberID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MemberID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &memberid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Post;
        break;
      }
      
      // optional uint32 Post = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Post:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &post_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageSetFamilyPostRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageSetFamilyPostRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 MemberID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->memberid(), output);
  }
  
  // optional uint32 Post = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->post(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageSetFamilyPostRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 MemberID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->memberid(), target);
  }
  
  // optional uint32 Post = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->post(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageSetFamilyPostRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 MemberID = 2;
    if (has_memberid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->memberid());
    }
    
    // optional uint32 Post = 3;
    if (has_post()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->post());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageSetFamilyPostRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageSetFamilyPostRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageSetFamilyPostRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageSetFamilyPostRequest::MergeFrom(const CMessageSetFamilyPostRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_memberid(from.memberid());
    }
    if (from._has_bit(2)) {
      set_post(from.post());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageSetFamilyPostRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSetFamilyPostRequest::CopyFrom(const CMessageSetFamilyPostRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSetFamilyPostRequest::Swap(CMessageSetFamilyPostRequest* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(memberid_, other->memberid_);
    std::swap(post_, other->post_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageSetFamilyPostRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageSetFamilyPostRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageSetFamilyPostRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageSetFamilyPostRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageSetFamilyPostResponse::kHeadMsgFieldNumber;
const int CMessageSetFamilyPostResponse::kErrcodeFieldNumber;
const int CMessageSetFamilyPostResponse::kMemberIDFieldNumber;
const int CMessageSetFamilyPostResponse::kPostFieldNumber;
#endif  // !_MSC_VER

CMessageSetFamilyPostResponse::CMessageSetFamilyPostResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageSetFamilyPostResponse::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageSetFamilyPostResponse::CMessageSetFamilyPostResponse(const CMessageSetFamilyPostResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageSetFamilyPostResponse::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  errcode_ = 0u;
  memberid_ = 0u;
  post_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageSetFamilyPostResponse::~CMessageSetFamilyPostResponse() {
  SharedDtor();
}

void CMessageSetFamilyPostResponse::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageSetFamilyPostResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageSetFamilyPostResponse_descriptor_;
}

const CMessageSetFamilyPostResponse& CMessageSetFamilyPostResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageSetFamilyPostResponse* CMessageSetFamilyPostResponse::default_instance_ = NULL;

CMessageSetFamilyPostResponse* CMessageSetFamilyPostResponse::New() const {
  return new CMessageSetFamilyPostResponse;
}

void CMessageSetFamilyPostResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    errcode_ = 0u;
    memberid_ = 0u;
    post_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageSetFamilyPostResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_MemberID;
        break;
      }
      
      // optional uint32 MemberID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MemberID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &memberid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Post;
        break;
      }
      
      // optional uint32 Post = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Post:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &post_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageSetFamilyPostResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageSetFamilyPostResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  // optional uint32 MemberID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->memberid(), output);
  }
  
  // optional uint32 Post = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->post(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageSetFamilyPostResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  // optional uint32 MemberID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->memberid(), target);
  }
  
  // optional uint32 Post = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->post(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageSetFamilyPostResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional uint32 MemberID = 3;
    if (has_memberid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->memberid());
    }
    
    // optional uint32 Post = 4;
    if (has_post()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->post());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageSetFamilyPostResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageSetFamilyPostResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageSetFamilyPostResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageSetFamilyPostResponse::MergeFrom(const CMessageSetFamilyPostResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(2)) {
      set_memberid(from.memberid());
    }
    if (from._has_bit(3)) {
      set_post(from.post());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageSetFamilyPostResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSetFamilyPostResponse::CopyFrom(const CMessageSetFamilyPostResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSetFamilyPostResponse::Swap(CMessageSetFamilyPostResponse* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(errcode_, other->errcode_);
    std::swap(memberid_, other->memberid_);
    std::swap(post_, other->post_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageSetFamilyPostResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageSetFamilyPostResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageSetFamilyPostResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageSetFamilyPostResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLevelUPFamilyRequest::kHeadMsgFieldNumber;
const int CMessageLevelUPFamilyRequest::kMsgCodeFieldNumber;
#endif  // !_MSC_VER

CMessageLevelUPFamilyRequest::CMessageLevelUPFamilyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLevelUPFamilyRequest::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageLevelUPFamilyRequest::CMessageLevelUPFamilyRequest(const CMessageLevelUPFamilyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLevelUPFamilyRequest::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  msgcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLevelUPFamilyRequest::~CMessageLevelUPFamilyRequest() {
  SharedDtor();
}

void CMessageLevelUPFamilyRequest::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageLevelUPFamilyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLevelUPFamilyRequest_descriptor_;
}

const CMessageLevelUPFamilyRequest& CMessageLevelUPFamilyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageLevelUPFamilyRequest* CMessageLevelUPFamilyRequest::default_instance_ = NULL;

CMessageLevelUPFamilyRequest* CMessageLevelUPFamilyRequest::New() const {
  return new CMessageLevelUPFamilyRequest;
}

void CMessageLevelUPFamilyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    msgcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLevelUPFamilyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_MsgCode;
        break;
      }
      
      // optional uint32 MsgCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MsgCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &msgcode_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLevelUPFamilyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLevelUPFamilyRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 MsgCode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->msgcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLevelUPFamilyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 MsgCode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->msgcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLevelUPFamilyRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 MsgCode = 2;
    if (has_msgcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->msgcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLevelUPFamilyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLevelUPFamilyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLevelUPFamilyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLevelUPFamilyRequest::MergeFrom(const CMessageLevelUPFamilyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_msgcode(from.msgcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLevelUPFamilyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLevelUPFamilyRequest::CopyFrom(const CMessageLevelUPFamilyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLevelUPFamilyRequest::Swap(CMessageLevelUPFamilyRequest* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(msgcode_, other->msgcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLevelUPFamilyRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLevelUPFamilyRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLevelUPFamilyRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLevelUPFamilyRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLevelUPFamilyResponse::kHeadMsgFieldNumber;
const int CMessageLevelUPFamilyResponse::kErrcodeFieldNumber;
const int CMessageLevelUPFamilyResponse::kLevelFieldNumber;
#endif  // !_MSC_VER

CMessageLevelUPFamilyResponse::CMessageLevelUPFamilyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLevelUPFamilyResponse::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageLevelUPFamilyResponse::CMessageLevelUPFamilyResponse(const CMessageLevelUPFamilyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLevelUPFamilyResponse::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  errcode_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLevelUPFamilyResponse::~CMessageLevelUPFamilyResponse() {
  SharedDtor();
}

void CMessageLevelUPFamilyResponse::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageLevelUPFamilyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLevelUPFamilyResponse_descriptor_;
}

const CMessageLevelUPFamilyResponse& CMessageLevelUPFamilyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageLevelUPFamilyResponse* CMessageLevelUPFamilyResponse::default_instance_ = NULL;

CMessageLevelUPFamilyResponse* CMessageLevelUPFamilyResponse::New() const {
  return new CMessageLevelUPFamilyResponse;
}

void CMessageLevelUPFamilyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    errcode_ = 0u;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLevelUPFamilyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLevelUPFamilyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLevelUPFamilyResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  // optional uint32 Level = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLevelUPFamilyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  // optional uint32 Level = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLevelUPFamilyResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional uint32 Level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLevelUPFamilyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLevelUPFamilyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLevelUPFamilyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLevelUPFamilyResponse::MergeFrom(const CMessageLevelUPFamilyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(2)) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLevelUPFamilyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLevelUPFamilyResponse::CopyFrom(const CMessageLevelUPFamilyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLevelUPFamilyResponse::Swap(CMessageLevelUPFamilyResponse* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(errcode_, other->errcode_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLevelUPFamilyResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLevelUPFamilyResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLevelUPFamilyResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLevelUPFamilyResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageContributeFamilyMoneyRequest::kHeadMsgFieldNumber;
const int CMessageContributeFamilyMoneyRequest::kMoneyFieldNumber;
#endif  // !_MSC_VER

CMessageContributeFamilyMoneyRequest::CMessageContributeFamilyMoneyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageContributeFamilyMoneyRequest::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageContributeFamilyMoneyRequest::CMessageContributeFamilyMoneyRequest(const CMessageContributeFamilyMoneyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageContributeFamilyMoneyRequest::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  money_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageContributeFamilyMoneyRequest::~CMessageContributeFamilyMoneyRequest() {
  SharedDtor();
}

void CMessageContributeFamilyMoneyRequest::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageContributeFamilyMoneyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageContributeFamilyMoneyRequest_descriptor_;
}

const CMessageContributeFamilyMoneyRequest& CMessageContributeFamilyMoneyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageContributeFamilyMoneyRequest* CMessageContributeFamilyMoneyRequest::default_instance_ = NULL;

CMessageContributeFamilyMoneyRequest* CMessageContributeFamilyMoneyRequest::New() const {
  return new CMessageContributeFamilyMoneyRequest;
}

void CMessageContributeFamilyMoneyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    money_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageContributeFamilyMoneyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_Money;
        break;
      }
      
      // optional uint32 Money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageContributeFamilyMoneyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageContributeFamilyMoneyRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 Money = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->money(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageContributeFamilyMoneyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 Money = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->money(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageContributeFamilyMoneyRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 Money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageContributeFamilyMoneyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageContributeFamilyMoneyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageContributeFamilyMoneyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageContributeFamilyMoneyRequest::MergeFrom(const CMessageContributeFamilyMoneyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageContributeFamilyMoneyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageContributeFamilyMoneyRequest::CopyFrom(const CMessageContributeFamilyMoneyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageContributeFamilyMoneyRequest::Swap(CMessageContributeFamilyMoneyRequest* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageContributeFamilyMoneyRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageContributeFamilyMoneyRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageContributeFamilyMoneyRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageContributeFamilyMoneyRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageContributeFamilyMoneyResponse::kHeadMsgFieldNumber;
const int CMessageContributeFamilyMoneyResponse::kErrcodeFieldNumber;
const int CMessageContributeFamilyMoneyResponse::kMoneyFieldNumber;
const int CMessageContributeFamilyMoneyResponse::kContributeFieldNumber;
#endif  // !_MSC_VER

CMessageContributeFamilyMoneyResponse::CMessageContributeFamilyMoneyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageContributeFamilyMoneyResponse::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageContributeFamilyMoneyResponse::CMessageContributeFamilyMoneyResponse(const CMessageContributeFamilyMoneyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageContributeFamilyMoneyResponse::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  errcode_ = 0u;
  money_ = 0u;
  contribute_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageContributeFamilyMoneyResponse::~CMessageContributeFamilyMoneyResponse() {
  SharedDtor();
}

void CMessageContributeFamilyMoneyResponse::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageContributeFamilyMoneyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageContributeFamilyMoneyResponse_descriptor_;
}

const CMessageContributeFamilyMoneyResponse& CMessageContributeFamilyMoneyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageContributeFamilyMoneyResponse* CMessageContributeFamilyMoneyResponse::default_instance_ = NULL;

CMessageContributeFamilyMoneyResponse* CMessageContributeFamilyMoneyResponse::New() const {
  return new CMessageContributeFamilyMoneyResponse;
}

void CMessageContributeFamilyMoneyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    errcode_ = 0u;
    money_ = 0u;
    contribute_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageContributeFamilyMoneyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Money;
        break;
      }
      
      // optional uint32 Money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Contribute;
        break;
      }
      
      // optional uint32 Contribute = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Contribute:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &contribute_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageContributeFamilyMoneyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageContributeFamilyMoneyResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  // optional uint32 Money = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->money(), output);
  }
  
  // optional uint32 Contribute = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->contribute(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageContributeFamilyMoneyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  // optional uint32 Money = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->money(), target);
  }
  
  // optional uint32 Contribute = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->contribute(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageContributeFamilyMoneyResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional uint32 Money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
    // optional uint32 Contribute = 4;
    if (has_contribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->contribute());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageContributeFamilyMoneyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageContributeFamilyMoneyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageContributeFamilyMoneyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageContributeFamilyMoneyResponse::MergeFrom(const CMessageContributeFamilyMoneyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(2)) {
      set_money(from.money());
    }
    if (from._has_bit(3)) {
      set_contribute(from.contribute());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageContributeFamilyMoneyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageContributeFamilyMoneyResponse::CopyFrom(const CMessageContributeFamilyMoneyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageContributeFamilyMoneyResponse::Swap(CMessageContributeFamilyMoneyResponse* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(errcode_, other->errcode_);
    std::swap(money_, other->money_);
    std::swap(contribute_, other->contribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageContributeFamilyMoneyResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageContributeFamilyMoneyResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageContributeFamilyMoneyResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageContributeFamilyMoneyResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageObtainFamilyMoneyRequest::kHeadMsgFieldNumber;
const int CMessageObtainFamilyMoneyRequest::kNpcIDFieldNumber;
const int CMessageObtainFamilyMoneyRequest::kNpcTmpIDFieldNumber;
#endif  // !_MSC_VER

CMessageObtainFamilyMoneyRequest::CMessageObtainFamilyMoneyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageObtainFamilyMoneyRequest::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageObtainFamilyMoneyRequest::CMessageObtainFamilyMoneyRequest(const CMessageObtainFamilyMoneyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageObtainFamilyMoneyRequest::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  npcid_ = 0u;
  npctmpid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageObtainFamilyMoneyRequest::~CMessageObtainFamilyMoneyRequest() {
  SharedDtor();
}

void CMessageObtainFamilyMoneyRequest::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageObtainFamilyMoneyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageObtainFamilyMoneyRequest_descriptor_;
}

const CMessageObtainFamilyMoneyRequest& CMessageObtainFamilyMoneyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageObtainFamilyMoneyRequest* CMessageObtainFamilyMoneyRequest::default_instance_ = NULL;

CMessageObtainFamilyMoneyRequest* CMessageObtainFamilyMoneyRequest::New() const {
  return new CMessageObtainFamilyMoneyRequest;
}

void CMessageObtainFamilyMoneyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    npcid_ = 0u;
    npctmpid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageObtainFamilyMoneyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_NpcID;
        break;
      }
      
      // optional uint32 NpcID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_NpcTmpID;
        break;
      }
      
      // optional uint32 NpcTmpID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcTmpID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npctmpid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageObtainFamilyMoneyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageObtainFamilyMoneyRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 NpcID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->npcid(), output);
  }
  
  // optional uint32 NpcTmpID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->npctmpid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageObtainFamilyMoneyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 NpcID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->npcid(), target);
  }
  
  // optional uint32 NpcTmpID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->npctmpid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageObtainFamilyMoneyRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 NpcID = 2;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
    // optional uint32 NpcTmpID = 3;
    if (has_npctmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npctmpid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageObtainFamilyMoneyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageObtainFamilyMoneyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageObtainFamilyMoneyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageObtainFamilyMoneyRequest::MergeFrom(const CMessageObtainFamilyMoneyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_npcid(from.npcid());
    }
    if (from._has_bit(2)) {
      set_npctmpid(from.npctmpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageObtainFamilyMoneyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageObtainFamilyMoneyRequest::CopyFrom(const CMessageObtainFamilyMoneyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageObtainFamilyMoneyRequest::Swap(CMessageObtainFamilyMoneyRequest* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(npcid_, other->npcid_);
    std::swap(npctmpid_, other->npctmpid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageObtainFamilyMoneyRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageObtainFamilyMoneyRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageObtainFamilyMoneyRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageObtainFamilyMoneyRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageObtainFamilyMoneyResponse::kHeadMsgFieldNumber;
const int CMessageObtainFamilyMoneyResponse::kErrcodeFieldNumber;
const int CMessageObtainFamilyMoneyResponse::kMoneyFieldNumber;
const int CMessageObtainFamilyMoneyResponse::kGloryFieldNumber;
#endif  // !_MSC_VER

CMessageObtainFamilyMoneyResponse::CMessageObtainFamilyMoneyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageObtainFamilyMoneyResponse::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageObtainFamilyMoneyResponse::CMessageObtainFamilyMoneyResponse(const CMessageObtainFamilyMoneyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageObtainFamilyMoneyResponse::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  errcode_ = 0u;
  money_ = 0u;
  glory_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageObtainFamilyMoneyResponse::~CMessageObtainFamilyMoneyResponse() {
  SharedDtor();
}

void CMessageObtainFamilyMoneyResponse::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageObtainFamilyMoneyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageObtainFamilyMoneyResponse_descriptor_;
}

const CMessageObtainFamilyMoneyResponse& CMessageObtainFamilyMoneyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageObtainFamilyMoneyResponse* CMessageObtainFamilyMoneyResponse::default_instance_ = NULL;

CMessageObtainFamilyMoneyResponse* CMessageObtainFamilyMoneyResponse::New() const {
  return new CMessageObtainFamilyMoneyResponse;
}

void CMessageObtainFamilyMoneyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    errcode_ = 0u;
    money_ = 0u;
    glory_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageObtainFamilyMoneyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Money;
        break;
      }
      
      // optional uint32 Money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Glory;
        break;
      }
      
      // optional uint32 Glory = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Glory:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &glory_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageObtainFamilyMoneyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageObtainFamilyMoneyResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  // optional uint32 Money = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->money(), output);
  }
  
  // optional uint32 Glory = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->glory(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageObtainFamilyMoneyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  // optional uint32 Money = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->money(), target);
  }
  
  // optional uint32 Glory = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->glory(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageObtainFamilyMoneyResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional uint32 Money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
    // optional uint32 Glory = 4;
    if (has_glory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->glory());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageObtainFamilyMoneyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageObtainFamilyMoneyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageObtainFamilyMoneyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageObtainFamilyMoneyResponse::MergeFrom(const CMessageObtainFamilyMoneyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(2)) {
      set_money(from.money());
    }
    if (from._has_bit(3)) {
      set_glory(from.glory());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageObtainFamilyMoneyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageObtainFamilyMoneyResponse::CopyFrom(const CMessageObtainFamilyMoneyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageObtainFamilyMoneyResponse::Swap(CMessageObtainFamilyMoneyResponse* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(errcode_, other->errcode_);
    std::swap(money_, other->money_);
    std::swap(glory_, other->glory_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageObtainFamilyMoneyResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageObtainFamilyMoneyResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageObtainFamilyMoneyResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageObtainFamilyMoneyResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageSetFamilyPostNotify::_default_managername_;
const ::std::string CMessageSetFamilyPostNotify::_default_membername_;
#ifndef _MSC_VER
const int CMessageSetFamilyPostNotify::kHeadMsgFieldNumber;
const int CMessageSetFamilyPostNotify::kManagerIDFieldNumber;
const int CMessageSetFamilyPostNotify::kManagerNameFieldNumber;
const int CMessageSetFamilyPostNotify::kMemberIDFieldNumber;
const int CMessageSetFamilyPostNotify::kMemberNameFieldNumber;
const int CMessageSetFamilyPostNotify::kOriginalPostFieldNumber;
const int CMessageSetFamilyPostNotify::kNewPostFieldNumber;
#endif  // !_MSC_VER

CMessageSetFamilyPostNotify::CMessageSetFamilyPostNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageSetFamilyPostNotify::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageSetFamilyPostNotify::CMessageSetFamilyPostNotify(const CMessageSetFamilyPostNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageSetFamilyPostNotify::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  managerid_ = 0u;
  managername_ = const_cast< ::std::string*>(&_default_managername_);
  memberid_ = 0u;
  membername_ = const_cast< ::std::string*>(&_default_membername_);
  originalpost_ = 0u;
  newpost_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageSetFamilyPostNotify::~CMessageSetFamilyPostNotify() {
  SharedDtor();
}

void CMessageSetFamilyPostNotify::SharedDtor() {
  if (managername_ != &_default_managername_) {
    delete managername_;
  }
  if (membername_ != &_default_membername_) {
    delete membername_;
  }
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageSetFamilyPostNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageSetFamilyPostNotify_descriptor_;
}

const CMessageSetFamilyPostNotify& CMessageSetFamilyPostNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageSetFamilyPostNotify* CMessageSetFamilyPostNotify::default_instance_ = NULL;

CMessageSetFamilyPostNotify* CMessageSetFamilyPostNotify::New() const {
  return new CMessageSetFamilyPostNotify;
}

void CMessageSetFamilyPostNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    managerid_ = 0u;
    if (_has_bit(2)) {
      if (managername_ != &_default_managername_) {
        managername_->clear();
      }
    }
    memberid_ = 0u;
    if (_has_bit(4)) {
      if (membername_ != &_default_membername_) {
        membername_->clear();
      }
    }
    originalpost_ = 0u;
    newpost_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageSetFamilyPostNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_ManagerID;
        break;
      }
      
      // optional uint32 ManagerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ManagerID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &managerid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_ManagerName;
        break;
      }
      
      // optional string ManagerName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ManagerName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_managername()));
        if (input->ExpectTag(32)) goto parse_MemberID;
        break;
      }
      
      // optional uint32 MemberID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MemberID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &memberid_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_MemberName;
        break;
      }
      
      // optional string MemberName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MemberName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_membername()));
        if (input->ExpectTag(48)) goto parse_OriginalPost;
        break;
      }
      
      // optional uint32 OriginalPost = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OriginalPost:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &originalpost_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_NewPost;
        break;
      }
      
      // optional uint32 NewPost = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NewPost:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &newpost_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageSetFamilyPostNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageSetFamilyPostNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 ManagerID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->managerid(), output);
  }
  
  // optional string ManagerName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->managername(), output);
  }
  
  // optional uint32 MemberID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->memberid(), output);
  }
  
  // optional string MemberName = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->membername(), output);
  }
  
  // optional uint32 OriginalPost = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->originalpost(), output);
  }
  
  // optional uint32 NewPost = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->newpost(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageSetFamilyPostNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 ManagerID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->managerid(), target);
  }
  
  // optional string ManagerName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->managername(), target);
  }
  
  // optional uint32 MemberID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->memberid(), target);
  }
  
  // optional string MemberName = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->membername(), target);
  }
  
  // optional uint32 OriginalPost = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->originalpost(), target);
  }
  
  // optional uint32 NewPost = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->newpost(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageSetFamilyPostNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 ManagerID = 2;
    if (has_managerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->managerid());
    }
    
    // optional string ManagerName = 3;
    if (has_managername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->managername());
    }
    
    // optional uint32 MemberID = 4;
    if (has_memberid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->memberid());
    }
    
    // optional string MemberName = 5;
    if (has_membername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->membername());
    }
    
    // optional uint32 OriginalPost = 6;
    if (has_originalpost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->originalpost());
    }
    
    // optional uint32 NewPost = 7;
    if (has_newpost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->newpost());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageSetFamilyPostNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageSetFamilyPostNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageSetFamilyPostNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageSetFamilyPostNotify::MergeFrom(const CMessageSetFamilyPostNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_managerid(from.managerid());
    }
    if (from._has_bit(2)) {
      set_managername(from.managername());
    }
    if (from._has_bit(3)) {
      set_memberid(from.memberid());
    }
    if (from._has_bit(4)) {
      set_membername(from.membername());
    }
    if (from._has_bit(5)) {
      set_originalpost(from.originalpost());
    }
    if (from._has_bit(6)) {
      set_newpost(from.newpost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageSetFamilyPostNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSetFamilyPostNotify::CopyFrom(const CMessageSetFamilyPostNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSetFamilyPostNotify::Swap(CMessageSetFamilyPostNotify* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(managerid_, other->managerid_);
    std::swap(managername_, other->managername_);
    std::swap(memberid_, other->memberid_);
    std::swap(membername_, other->membername_);
    std::swap(originalpost_, other->originalpost_);
    std::swap(newpost_, other->newpost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageSetFamilyPostNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageSetFamilyPostNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageSetFamilyPostNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageSetFamilyPostNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLevelUPFamilyNotify::kHeadMsgFieldNumber;
const int CMessageLevelUPFamilyNotify::kLevelFieldNumber;
const int CMessageLevelUPFamilyNotify::kMoneyFieldNumber;
const int CMessageLevelUPFamilyNotify::kGloryFieldNumber;
const int CMessageLevelUPFamilyNotify::kMaxFamilyMemberFieldNumber;
const int CMessageLevelUPFamilyNotify::kMaxPresterNumFieldNumber;
const int CMessageLevelUPFamilyNotify::kLevelMoneyFieldNumber;
const int CMessageLevelUPFamilyNotify::kLevelGloryFieldNumber;
const int CMessageLevelUPFamilyNotify::kStabilityFieldNumber;
const int CMessageLevelUPFamilyNotify::kReduceStabilityFieldNumber;
#endif  // !_MSC_VER

CMessageLevelUPFamilyNotify::CMessageLevelUPFamilyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLevelUPFamilyNotify::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageLevelUPFamilyNotify::CMessageLevelUPFamilyNotify(const CMessageLevelUPFamilyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLevelUPFamilyNotify::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  level_ = 0u;
  money_ = 0u;
  glory_ = 0u;
  maxfamilymember_ = 0u;
  maxpresternum_ = 0u;
  levelmoney_ = 0u;
  levelglory_ = 0u;
  stability_ = 0u;
  reducestability_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLevelUPFamilyNotify::~CMessageLevelUPFamilyNotify() {
  SharedDtor();
}

void CMessageLevelUPFamilyNotify::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageLevelUPFamilyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLevelUPFamilyNotify_descriptor_;
}

const CMessageLevelUPFamilyNotify& CMessageLevelUPFamilyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageLevelUPFamilyNotify* CMessageLevelUPFamilyNotify::default_instance_ = NULL;

CMessageLevelUPFamilyNotify* CMessageLevelUPFamilyNotify::New() const {
  return new CMessageLevelUPFamilyNotify;
}

void CMessageLevelUPFamilyNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    level_ = 0u;
    money_ = 0u;
    glory_ = 0u;
    maxfamilymember_ = 0u;
    maxpresternum_ = 0u;
    levelmoney_ = 0u;
    levelglory_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    stability_ = 0u;
    reducestability_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLevelUPFamilyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Money;
        break;
      }
      
      // optional uint32 Money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Glory;
        break;
      }
      
      // optional uint32 Glory = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Glory:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &glory_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_MaxFamilyMember;
        break;
      }
      
      // optional uint32 MaxFamilyMember = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxFamilyMember:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxfamilymember_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_MaxPresterNum;
        break;
      }
      
      // optional uint32 MaxPresterNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxPresterNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxpresternum_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_LevelMoney;
        break;
      }
      
      // optional uint32 LevelMoney = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LevelMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &levelmoney_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_LevelGlory;
        break;
      }
      
      // optional uint32 LevelGlory = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LevelGlory:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &levelglory_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_Stability;
        break;
      }
      
      // optional uint32 Stability = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Stability:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &stability_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_ReduceStability;
        break;
      }
      
      // optional uint32 ReduceStability = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ReduceStability:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &reducestability_));
        _set_bit(9);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLevelUPFamilyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLevelUPFamilyNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 Level = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->level(), output);
  }
  
  // optional uint32 Money = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->money(), output);
  }
  
  // optional uint32 Glory = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->glory(), output);
  }
  
  // optional uint32 MaxFamilyMember = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->maxfamilymember(), output);
  }
  
  // optional uint32 MaxPresterNum = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->maxpresternum(), output);
  }
  
  // optional uint32 LevelMoney = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->levelmoney(), output);
  }
  
  // optional uint32 LevelGlory = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->levelglory(), output);
  }
  
  // optional uint32 Stability = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->stability(), output);
  }
  
  // optional uint32 ReduceStability = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->reducestability(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLevelUPFamilyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 Level = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->level(), target);
  }
  
  // optional uint32 Money = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->money(), target);
  }
  
  // optional uint32 Glory = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->glory(), target);
  }
  
  // optional uint32 MaxFamilyMember = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->maxfamilymember(), target);
  }
  
  // optional uint32 MaxPresterNum = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->maxpresternum(), target);
  }
  
  // optional uint32 LevelMoney = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->levelmoney(), target);
  }
  
  // optional uint32 LevelGlory = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->levelglory(), target);
  }
  
  // optional uint32 Stability = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->stability(), target);
  }
  
  // optional uint32 ReduceStability = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->reducestability(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLevelUPFamilyNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 Level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
    // optional uint32 Money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
    // optional uint32 Glory = 4;
    if (has_glory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->glory());
    }
    
    // optional uint32 MaxFamilyMember = 5;
    if (has_maxfamilymember()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxfamilymember());
    }
    
    // optional uint32 MaxPresterNum = 6;
    if (has_maxpresternum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxpresternum());
    }
    
    // optional uint32 LevelMoney = 7;
    if (has_levelmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->levelmoney());
    }
    
    // optional uint32 LevelGlory = 8;
    if (has_levelglory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->levelglory());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 Stability = 9;
    if (has_stability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->stability());
    }
    
    // optional uint32 ReduceStability = 10;
    if (has_reducestability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->reducestability());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLevelUPFamilyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLevelUPFamilyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLevelUPFamilyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLevelUPFamilyNotify::MergeFrom(const CMessageLevelUPFamilyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_level(from.level());
    }
    if (from._has_bit(2)) {
      set_money(from.money());
    }
    if (from._has_bit(3)) {
      set_glory(from.glory());
    }
    if (from._has_bit(4)) {
      set_maxfamilymember(from.maxfamilymember());
    }
    if (from._has_bit(5)) {
      set_maxpresternum(from.maxpresternum());
    }
    if (from._has_bit(6)) {
      set_levelmoney(from.levelmoney());
    }
    if (from._has_bit(7)) {
      set_levelglory(from.levelglory());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_stability(from.stability());
    }
    if (from._has_bit(9)) {
      set_reducestability(from.reducestability());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLevelUPFamilyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLevelUPFamilyNotify::CopyFrom(const CMessageLevelUPFamilyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLevelUPFamilyNotify::Swap(CMessageLevelUPFamilyNotify* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(level_, other->level_);
    std::swap(money_, other->money_);
    std::swap(glory_, other->glory_);
    std::swap(maxfamilymember_, other->maxfamilymember_);
    std::swap(maxpresternum_, other->maxpresternum_);
    std::swap(levelmoney_, other->levelmoney_);
    std::swap(levelglory_, other->levelglory_);
    std::swap(stability_, other->stability_);
    std::swap(reducestability_, other->reducestability_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLevelUPFamilyNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLevelUPFamilyNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLevelUPFamilyNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLevelUPFamilyNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageFamilyBidNpcRequest::kHeadMsgFieldNumber;
const int CMessageFamilyBidNpcRequest::kNpcIDFieldNumber;
const int CMessageFamilyBidNpcRequest::kMoneyFieldNumber;
#endif  // !_MSC_VER

CMessageFamilyBidNpcRequest::CMessageFamilyBidNpcRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFamilyBidNpcRequest::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageFamilyBidNpcRequest::CMessageFamilyBidNpcRequest(const CMessageFamilyBidNpcRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFamilyBidNpcRequest::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  npcid_ = 0u;
  money_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFamilyBidNpcRequest::~CMessageFamilyBidNpcRequest() {
  SharedDtor();
}

void CMessageFamilyBidNpcRequest::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageFamilyBidNpcRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFamilyBidNpcRequest_descriptor_;
}

const CMessageFamilyBidNpcRequest& CMessageFamilyBidNpcRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFamilyBidNpcRequest* CMessageFamilyBidNpcRequest::default_instance_ = NULL;

CMessageFamilyBidNpcRequest* CMessageFamilyBidNpcRequest::New() const {
  return new CMessageFamilyBidNpcRequest;
}

void CMessageFamilyBidNpcRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    npcid_ = 0u;
    money_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFamilyBidNpcRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_NpcID;
        break;
      }
      
      // optional uint32 NpcID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Money;
        break;
      }
      
      // optional uint32 Money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageFamilyBidNpcRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFamilyBidNpcRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 NpcID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->npcid(), output);
  }
  
  // optional uint32 Money = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->money(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFamilyBidNpcRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 NpcID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->npcid(), target);
  }
  
  // optional uint32 Money = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->money(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFamilyBidNpcRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 NpcID = 2;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
    // optional uint32 Money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFamilyBidNpcRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFamilyBidNpcRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFamilyBidNpcRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFamilyBidNpcRequest::MergeFrom(const CMessageFamilyBidNpcRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_npcid(from.npcid());
    }
    if (from._has_bit(2)) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFamilyBidNpcRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFamilyBidNpcRequest::CopyFrom(const CMessageFamilyBidNpcRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFamilyBidNpcRequest::Swap(CMessageFamilyBidNpcRequest* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(npcid_, other->npcid_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFamilyBidNpcRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFamilyBidNpcRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFamilyBidNpcRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFamilyBidNpcRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageFamilyBidNpcResponse::kHeadMsgFieldNumber;
const int CMessageFamilyBidNpcResponse::kResultFieldNumber;
const int CMessageFamilyBidNpcResponse::kNpcIDFieldNumber;
const int CMessageFamilyBidNpcResponse::kMoneyFieldNumber;
#endif  // !_MSC_VER

CMessageFamilyBidNpcResponse::CMessageFamilyBidNpcResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFamilyBidNpcResponse::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageFamilyBidNpcResponse::CMessageFamilyBidNpcResponse(const CMessageFamilyBidNpcResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFamilyBidNpcResponse::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  result_ = 0u;
  npcid_ = 0u;
  money_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFamilyBidNpcResponse::~CMessageFamilyBidNpcResponse() {
  SharedDtor();
}

void CMessageFamilyBidNpcResponse::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageFamilyBidNpcResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFamilyBidNpcResponse_descriptor_;
}

const CMessageFamilyBidNpcResponse& CMessageFamilyBidNpcResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFamilyBidNpcResponse* CMessageFamilyBidNpcResponse::default_instance_ = NULL;

CMessageFamilyBidNpcResponse* CMessageFamilyBidNpcResponse::New() const {
  return new CMessageFamilyBidNpcResponse;
}

void CMessageFamilyBidNpcResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    result_ = 0u;
    npcid_ = 0u;
    money_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFamilyBidNpcResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_NpcID;
        break;
      }
      
      // optional uint32 NpcID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Money;
        break;
      }
      
      // optional uint32 Money = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageFamilyBidNpcResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFamilyBidNpcResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  // optional uint32 NpcID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->npcid(), output);
  }
  
  // optional uint32 Money = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->money(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFamilyBidNpcResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  // optional uint32 NpcID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->npcid(), target);
  }
  
  // optional uint32 Money = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->money(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFamilyBidNpcResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 NpcID = 3;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
    // optional uint32 Money = 4;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFamilyBidNpcResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFamilyBidNpcResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFamilyBidNpcResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFamilyBidNpcResponse::MergeFrom(const CMessageFamilyBidNpcResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_npcid(from.npcid());
    }
    if (from._has_bit(3)) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFamilyBidNpcResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFamilyBidNpcResponse::CopyFrom(const CMessageFamilyBidNpcResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFamilyBidNpcResponse::Swap(CMessageFamilyBidNpcResponse* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(result_, other->result_);
    std::swap(npcid_, other->npcid_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFamilyBidNpcResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFamilyBidNpcResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFamilyBidNpcResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFamilyBidNpcResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageMemberSubmitNotify::_default_familyname_;
#ifndef _MSC_VER
const int CMessageMemberSubmitNotify::kHeadMsgFieldNumber;
const int CMessageMemberSubmitNotify::kNpcIDFieldNumber;
const int CMessageMemberSubmitNotify::kFamilyNameFieldNumber;
const int CMessageMemberSubmitNotify::kFirstFieldNumber;
#endif  // !_MSC_VER

CMessageMemberSubmitNotify::CMessageMemberSubmitNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageMemberSubmitNotify::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageMemberSubmitNotify::CMessageMemberSubmitNotify(const CMessageMemberSubmitNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageMemberSubmitNotify::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  npcid_ = 0u;
  familyname_ = const_cast< ::std::string*>(&_default_familyname_);
  first_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageMemberSubmitNotify::~CMessageMemberSubmitNotify() {
  SharedDtor();
}

void CMessageMemberSubmitNotify::SharedDtor() {
  if (familyname_ != &_default_familyname_) {
    delete familyname_;
  }
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageMemberSubmitNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageMemberSubmitNotify_descriptor_;
}

const CMessageMemberSubmitNotify& CMessageMemberSubmitNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageMemberSubmitNotify* CMessageMemberSubmitNotify::default_instance_ = NULL;

CMessageMemberSubmitNotify* CMessageMemberSubmitNotify::New() const {
  return new CMessageMemberSubmitNotify;
}

void CMessageMemberSubmitNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    npcid_ = 0u;
    if (_has_bit(2)) {
      if (familyname_ != &_default_familyname_) {
        familyname_->clear();
      }
    }
    first_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageMemberSubmitNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_NpcID;
        break;
      }
      
      // optional uint32 NpcID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_FamilyName;
        break;
      }
      
      // optional string FamilyName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FamilyName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_familyname()));
        if (input->ExpectTag(32)) goto parse_First;
        break;
      }
      
      // optional uint32 First = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_First:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &first_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageMemberSubmitNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageMemberSubmitNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 NpcID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->npcid(), output);
  }
  
  // optional string FamilyName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->familyname(), output);
  }
  
  // optional uint32 First = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->first(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageMemberSubmitNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 NpcID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->npcid(), target);
  }
  
  // optional string FamilyName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->familyname(), target);
  }
  
  // optional uint32 First = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->first(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageMemberSubmitNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 NpcID = 2;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
    // optional string FamilyName = 3;
    if (has_familyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->familyname());
    }
    
    // optional uint32 First = 4;
    if (has_first()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->first());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageMemberSubmitNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageMemberSubmitNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageMemberSubmitNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageMemberSubmitNotify::MergeFrom(const CMessageMemberSubmitNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_npcid(from.npcid());
    }
    if (from._has_bit(2)) {
      set_familyname(from.familyname());
    }
    if (from._has_bit(3)) {
      set_first(from.first());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageMemberSubmitNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMemberSubmitNotify::CopyFrom(const CMessageMemberSubmitNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMemberSubmitNotify::Swap(CMessageMemberSubmitNotify* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(npcid_, other->npcid_);
    std::swap(familyname_, other->familyname_);
    std::swap(first_, other->first_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageMemberSubmitNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageMemberSubmitNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageMemberSubmitNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageMemberSubmitNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageMemberSubmitRequest::kHeadMsgFieldNumber;
const int CMessageMemberSubmitRequest::kNpcIDFieldNumber;
const int CMessageMemberSubmitRequest::kMemberIDFieldNumber;
#endif  // !_MSC_VER

CMessageMemberSubmitRequest::CMessageMemberSubmitRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageMemberSubmitRequest::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageMemberSubmitRequest::CMessageMemberSubmitRequest(const CMessageMemberSubmitRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageMemberSubmitRequest::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  npcid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageMemberSubmitRequest::~CMessageMemberSubmitRequest() {
  SharedDtor();
}

void CMessageMemberSubmitRequest::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageMemberSubmitRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageMemberSubmitRequest_descriptor_;
}

const CMessageMemberSubmitRequest& CMessageMemberSubmitRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageMemberSubmitRequest* CMessageMemberSubmitRequest::default_instance_ = NULL;

CMessageMemberSubmitRequest* CMessageMemberSubmitRequest::New() const {
  return new CMessageMemberSubmitRequest;
}

void CMessageMemberSubmitRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    npcid_ = 0u;
  }
  memberid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageMemberSubmitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_NpcID;
        break;
      }
      
      // optional uint32 NpcID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_MemberID;
        break;
      }
      
      // repeated uint32 MemberID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MemberID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_memberid(value);
        if (input->ExpectTag(24)) goto parse_MemberID;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageMemberSubmitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageMemberSubmitRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 NpcID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->npcid(), output);
  }
  
  // repeated uint32 MemberID = 3;
  for (int i = 0; i < this->memberid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->memberid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageMemberSubmitRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 NpcID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->npcid(), target);
  }
  
  // repeated uint32 MemberID = 3;
  for (int i = 0; i < this->memberid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->memberid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageMemberSubmitRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 NpcID = 2;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
  }
  // repeated uint32 MemberID = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->memberid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->memberid(i));
    }
    total_size += 1 * this->memberid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageMemberSubmitRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageMemberSubmitRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageMemberSubmitRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageMemberSubmitRequest::MergeFrom(const CMessageMemberSubmitRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  memberid_.MergeFrom(from.memberid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_npcid(from.npcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageMemberSubmitRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMemberSubmitRequest::CopyFrom(const CMessageMemberSubmitRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMemberSubmitRequest::Swap(CMessageMemberSubmitRequest* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(npcid_, other->npcid_);
    memberid_.Swap(&other->memberid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageMemberSubmitRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageMemberSubmitRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageMemberSubmitRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageMemberSubmitRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageMemberSubmitResponse::kHeadMsgFieldNumber;
const int CMessageMemberSubmitResponse::kResultFieldNumber;
const int CMessageMemberSubmitResponse::kNpcIDFieldNumber;
#endif  // !_MSC_VER

CMessageMemberSubmitResponse::CMessageMemberSubmitResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageMemberSubmitResponse::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageMemberSubmitResponse::CMessageMemberSubmitResponse(const CMessageMemberSubmitResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageMemberSubmitResponse::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  result_ = 0u;
  npcid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageMemberSubmitResponse::~CMessageMemberSubmitResponse() {
  SharedDtor();
}

void CMessageMemberSubmitResponse::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageMemberSubmitResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageMemberSubmitResponse_descriptor_;
}

const CMessageMemberSubmitResponse& CMessageMemberSubmitResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageMemberSubmitResponse* CMessageMemberSubmitResponse::default_instance_ = NULL;

CMessageMemberSubmitResponse* CMessageMemberSubmitResponse::New() const {
  return new CMessageMemberSubmitResponse;
}

void CMessageMemberSubmitResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    result_ = 0u;
    npcid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageMemberSubmitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_NpcID;
        break;
      }
      
      // optional uint32 NpcID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageMemberSubmitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageMemberSubmitResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  // optional uint32 NpcID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->npcid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageMemberSubmitResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  // optional uint32 NpcID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->npcid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageMemberSubmitResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 NpcID = 3;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageMemberSubmitResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageMemberSubmitResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageMemberSubmitResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageMemberSubmitResponse::MergeFrom(const CMessageMemberSubmitResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_npcid(from.npcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageMemberSubmitResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMemberSubmitResponse::CopyFrom(const CMessageMemberSubmitResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMemberSubmitResponse::Swap(CMessageMemberSubmitResponse* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(result_, other->result_);
    std::swap(npcid_, other->npcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageMemberSubmitResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageMemberSubmitResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageMemberSubmitResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageMemberSubmitResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageAbortNpcRequest::kHeadMsgFieldNumber;
const int CMessageAbortNpcRequest::kFamilyIDFieldNumber;
const int CMessageAbortNpcRequest::kNpcIDFieldNumber;
#endif  // !_MSC_VER

CMessageAbortNpcRequest::CMessageAbortNpcRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageAbortNpcRequest::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageAbortNpcRequest::CMessageAbortNpcRequest(const CMessageAbortNpcRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageAbortNpcRequest::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  familyid_ = 0u;
  npcid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageAbortNpcRequest::~CMessageAbortNpcRequest() {
  SharedDtor();
}

void CMessageAbortNpcRequest::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageAbortNpcRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageAbortNpcRequest_descriptor_;
}

const CMessageAbortNpcRequest& CMessageAbortNpcRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageAbortNpcRequest* CMessageAbortNpcRequest::default_instance_ = NULL;

CMessageAbortNpcRequest* CMessageAbortNpcRequest::New() const {
  return new CMessageAbortNpcRequest;
}

void CMessageAbortNpcRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    familyid_ = 0u;
    npcid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageAbortNpcRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_FamilyID;
        break;
      }
      
      // optional uint32 FamilyID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_NpcID;
        break;
      }
      
      // optional uint32 NpcID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageAbortNpcRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageAbortNpcRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 FamilyID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->familyid(), output);
  }
  
  // optional uint32 NpcID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->npcid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageAbortNpcRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 FamilyID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->familyid(), target);
  }
  
  // optional uint32 NpcID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->npcid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageAbortNpcRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 FamilyID = 2;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
    // optional uint32 NpcID = 3;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageAbortNpcRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageAbortNpcRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageAbortNpcRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageAbortNpcRequest::MergeFrom(const CMessageAbortNpcRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_familyid(from.familyid());
    }
    if (from._has_bit(2)) {
      set_npcid(from.npcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageAbortNpcRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAbortNpcRequest::CopyFrom(const CMessageAbortNpcRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAbortNpcRequest::Swap(CMessageAbortNpcRequest* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(familyid_, other->familyid_);
    std::swap(npcid_, other->npcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageAbortNpcRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageAbortNpcRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageAbortNpcRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageAbortNpcRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageAbortNpcResponse::kHeadMsgFieldNumber;
const int CMessageAbortNpcResponse::kResultFieldNumber;
const int CMessageAbortNpcResponse::kFamilyIDFieldNumber;
const int CMessageAbortNpcResponse::kNpcIDFieldNumber;
#endif  // !_MSC_VER

CMessageAbortNpcResponse::CMessageAbortNpcResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageAbortNpcResponse::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageAbortNpcResponse::CMessageAbortNpcResponse(const CMessageAbortNpcResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageAbortNpcResponse::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  result_ = 0u;
  familyid_ = 0u;
  npcid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageAbortNpcResponse::~CMessageAbortNpcResponse() {
  SharedDtor();
}

void CMessageAbortNpcResponse::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageAbortNpcResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageAbortNpcResponse_descriptor_;
}

const CMessageAbortNpcResponse& CMessageAbortNpcResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageAbortNpcResponse* CMessageAbortNpcResponse::default_instance_ = NULL;

CMessageAbortNpcResponse* CMessageAbortNpcResponse::New() const {
  return new CMessageAbortNpcResponse;
}

void CMessageAbortNpcResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    result_ = 0u;
    familyid_ = 0u;
    npcid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageAbortNpcResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_FamilyID;
        break;
      }
      
      // optional uint32 FamilyID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_NpcID;
        break;
      }
      
      // optional uint32 NpcID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageAbortNpcResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageAbortNpcResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  // optional uint32 FamilyID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->familyid(), output);
  }
  
  // optional uint32 NpcID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->npcid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageAbortNpcResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  // optional uint32 FamilyID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->familyid(), target);
  }
  
  // optional uint32 NpcID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->npcid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageAbortNpcResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 FamilyID = 3;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
    // optional uint32 NpcID = 4;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageAbortNpcResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageAbortNpcResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageAbortNpcResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageAbortNpcResponse::MergeFrom(const CMessageAbortNpcResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_familyid(from.familyid());
    }
    if (from._has_bit(3)) {
      set_npcid(from.npcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageAbortNpcResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAbortNpcResponse::CopyFrom(const CMessageAbortNpcResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAbortNpcResponse::Swap(CMessageAbortNpcResponse* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(result_, other->result_);
    std::swap(familyid_, other->familyid_);
    std::swap(npcid_, other->npcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageAbortNpcResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageAbortNpcResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageAbortNpcResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageAbortNpcResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBidInfoRequest::kHeadMsgFieldNumber;
const int CMessageBidInfoRequest::kNpcIDFieldNumber;
#endif  // !_MSC_VER

CMessageBidInfoRequest::CMessageBidInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBidInfoRequest::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageBidInfoRequest::CMessageBidInfoRequest(const CMessageBidInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBidInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  npcid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBidInfoRequest::~CMessageBidInfoRequest() {
  SharedDtor();
}

void CMessageBidInfoRequest::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageBidInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBidInfoRequest_descriptor_;
}

const CMessageBidInfoRequest& CMessageBidInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageBidInfoRequest* CMessageBidInfoRequest::default_instance_ = NULL;

CMessageBidInfoRequest* CMessageBidInfoRequest::New() const {
  return new CMessageBidInfoRequest;
}

void CMessageBidInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    npcid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBidInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_NpcID;
        break;
      }
      
      // optional uint32 NpcID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBidInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBidInfoRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 NpcID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->npcid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBidInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 NpcID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->npcid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBidInfoRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 NpcID = 2;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBidInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBidInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBidInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBidInfoRequest::MergeFrom(const CMessageBidInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_npcid(from.npcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBidInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBidInfoRequest::CopyFrom(const CMessageBidInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBidInfoRequest::Swap(CMessageBidInfoRequest* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(npcid_, other->npcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBidInfoRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBidInfoRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBidInfoRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBidInfoRequest_reflection_;
}

// ===================================================================

const ::std::string BidResult::_default_familyname_;
#ifndef _MSC_VER
const int BidResult::kFamilyIDFieldNumber;
const int BidResult::kFamilyNameFieldNumber;
const int BidResult::kMoneyFieldNumber;
const int BidResult::kWinFieldNumber;
const int BidResult::kLostFieldNumber;
const int BidResult::kCountryFieldNumber;
const int BidResult::kLevelFieldNumber;
#endif  // !_MSC_VER

BidResult::BidResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BidResult::InitAsDefaultInstance() {}

BidResult::BidResult(const BidResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BidResult::SharedCtor() {
  _cached_size_ = 0;
  familyid_ = 0u;
  familyname_ = const_cast< ::std::string*>(&_default_familyname_);
  money_ = 0u;
  win_ = 0u;
  lost_ = 0u;
  country_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResult::~BidResult() {
  SharedDtor();
}

void BidResult::SharedDtor() {
  if (familyname_ != &_default_familyname_) {
    delete familyname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* BidResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResult_descriptor_;
}

const BidResult& BidResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

BidResult* BidResult::default_instance_ = NULL;

BidResult* BidResult::New() const {
  return new BidResult;
}

void BidResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    familyid_ = 0u;
    if (_has_bit(1)) {
      if (familyname_ != &_default_familyname_) {
        familyname_->clear();
      }
    }
    money_ = 0u;
    win_ = 0u;
    lost_ = 0u;
    country_ = 0u;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 FamilyID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_FamilyName;
        break;
      }
      
      // optional string FamilyName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FamilyName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_familyname()));
        if (input->ExpectTag(24)) goto parse_Money;
        break;
      }
      
      // optional uint32 Money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Win;
        break;
      }
      
      // optional uint32 Win = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Win:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &win_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Lost;
        break;
      }
      
      // optional uint32 Lost = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Lost:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lost_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Country;
        break;
      }
      
      // optional uint32 Country = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Country:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &country_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BidResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    BidResult::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 FamilyID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->familyid(), output);
  }
  
  // optional string FamilyName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->familyname(), output);
  }
  
  // optional uint32 Money = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->money(), output);
  }
  
  // optional uint32 Win = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->win(), output);
  }
  
  // optional uint32 Lost = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->lost(), output);
  }
  
  // optional uint32 Country = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->country(), output);
  }
  
  // optional uint32 Level = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BidResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 FamilyID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->familyid(), target);
  }
  
  // optional string FamilyName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->familyname(), target);
  }
  
  // optional uint32 Money = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->money(), target);
  }
  
  // optional uint32 Win = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->win(), target);
  }
  
  // optional uint32 Lost = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->lost(), target);
  }
  
  // optional uint32 Country = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->country(), target);
  }
  
  // optional uint32 Level = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BidResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 FamilyID = 1;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
    // optional string FamilyName = 2;
    if (has_familyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->familyname());
    }
    
    // optional uint32 Money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
    // optional uint32 Win = 4;
    if (has_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->win());
    }
    
    // optional uint32 Lost = 5;
    if (has_lost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lost());
    }
    
    // optional uint32 Country = 6;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->country());
    }
    
    // optional uint32 Level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void BidResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidResult::MergeFrom(const BidResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_familyid(from.familyid());
    }
    if (from._has_bit(1)) {
      set_familyname(from.familyname());
    }
    if (from._has_bit(2)) {
      set_money(from.money());
    }
    if (from._has_bit(3)) {
      set_win(from.win());
    }
    if (from._has_bit(4)) {
      set_lost(from.lost());
    }
    if (from._has_bit(5)) {
      set_country(from.country());
    }
    if (from._has_bit(6)) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResult::CopyFrom(const BidResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResult::Swap(BidResult* other) {
  if (other != this) {
    std::swap(familyid_, other->familyid_);
    std::swap(familyname_, other->familyname_);
    std::swap(money_, other->money_);
    std::swap(win_, other->win_);
    std::swap(lost_, other->lost_);
    std::swap(country_, other->country_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool BidResult::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* BidResult::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* BidResult::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return BidResult_reflection_;
}

// ===================================================================

const ::std::string CMessageBidInfoResponse::_default_familyname_;
#ifndef _MSC_VER
const int CMessageBidInfoResponse::kHeadMsgFieldNumber;
const int CMessageBidInfoResponse::kResultFieldNumber;
const int CMessageBidInfoResponse::kNpcIDFieldNumber;
const int CMessageBidInfoResponse::kFamilyNameFieldNumber;
const int CMessageBidInfoResponse::kBidDataFieldNumber;
#endif  // !_MSC_VER

CMessageBidInfoResponse::CMessageBidInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBidInfoResponse::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageBidInfoResponse::CMessageBidInfoResponse(const CMessageBidInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBidInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  result_ = 0u;
  npcid_ = 0u;
  familyname_ = const_cast< ::std::string*>(&_default_familyname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBidInfoResponse::~CMessageBidInfoResponse() {
  SharedDtor();
}

void CMessageBidInfoResponse::SharedDtor() {
  if (familyname_ != &_default_familyname_) {
    delete familyname_;
  }
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageBidInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBidInfoResponse_descriptor_;
}

const CMessageBidInfoResponse& CMessageBidInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageBidInfoResponse* CMessageBidInfoResponse::default_instance_ = NULL;

CMessageBidInfoResponse* CMessageBidInfoResponse::New() const {
  return new CMessageBidInfoResponse;
}

void CMessageBidInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    result_ = 0u;
    npcid_ = 0u;
    if (_has_bit(3)) {
      if (familyname_ != &_default_familyname_) {
        familyname_->clear();
      }
    }
  }
  biddata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBidInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_NpcID;
        break;
      }
      
      // optional uint32 NpcID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_FamilyName;
        break;
      }
      
      // optional string FamilyName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FamilyName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_familyname()));
        if (input->ExpectTag(42)) goto parse_BidData;
        break;
      }
      
      // repeated .BidResult BidData = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_BidData:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_biddata()));
        if (input->ExpectTag(42)) goto parse_BidData;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBidInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBidInfoResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  // optional uint32 NpcID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->npcid(), output);
  }
  
  // optional string FamilyName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->familyname(), output);
  }
  
  // repeated .BidResult BidData = 5;
  for (int i = 0; i < this->biddata_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(5, this->biddata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBidInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  // optional uint32 NpcID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->npcid(), target);
  }
  
  // optional string FamilyName = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->familyname(), target);
  }
  
  // repeated .BidResult BidData = 5;
  for (int i = 0; i < this->biddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(5, this->biddata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBidInfoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 NpcID = 3;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
    // optional string FamilyName = 4;
    if (has_familyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->familyname());
    }
    
  }
  // repeated .BidResult BidData = 5;
  total_size += 1 * this->biddata_size();
  for (int i = 0; i < this->biddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->biddata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBidInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBidInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBidInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBidInfoResponse::MergeFrom(const CMessageBidInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  biddata_.MergeFrom(from.biddata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_npcid(from.npcid());
    }
    if (from._has_bit(3)) {
      set_familyname(from.familyname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBidInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBidInfoResponse::CopyFrom(const CMessageBidInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBidInfoResponse::Swap(CMessageBidInfoResponse* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(result_, other->result_);
    std::swap(npcid_, other->npcid_);
    std::swap(familyname_, other->familyname_);
    biddata_.Swap(&other->biddata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBidInfoResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBidInfoResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBidInfoResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBidInfoResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageFamilySubmitNotify::_default_familyname_;
const ::std::string CMessageFamilySubmitNotify::_default_managername_;
#ifndef _MSC_VER
const int CMessageFamilySubmitNotify::kHeadMsgFieldNumber;
const int CMessageFamilySubmitNotify::kNpcIDFieldNumber;
const int CMessageFamilySubmitNotify::kFamilyNameFieldNumber;
const int CMessageFamilySubmitNotify::kMemberIDFieldNumber;
const int CMessageFamilySubmitNotify::kManagerIDFieldNumber;
const int CMessageFamilySubmitNotify::kManagerNameFieldNumber;
#endif  // !_MSC_VER

CMessageFamilySubmitNotify::CMessageFamilySubmitNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFamilySubmitNotify::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageFamilySubmitNotify::CMessageFamilySubmitNotify(const CMessageFamilySubmitNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFamilySubmitNotify::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  npcid_ = 0u;
  familyname_ = const_cast< ::std::string*>(&_default_familyname_);
  managerid_ = 0u;
  managername_ = const_cast< ::std::string*>(&_default_managername_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFamilySubmitNotify::~CMessageFamilySubmitNotify() {
  SharedDtor();
}

void CMessageFamilySubmitNotify::SharedDtor() {
  if (familyname_ != &_default_familyname_) {
    delete familyname_;
  }
  if (managername_ != &_default_managername_) {
    delete managername_;
  }
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageFamilySubmitNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFamilySubmitNotify_descriptor_;
}

const CMessageFamilySubmitNotify& CMessageFamilySubmitNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFamilySubmitNotify* CMessageFamilySubmitNotify::default_instance_ = NULL;

CMessageFamilySubmitNotify* CMessageFamilySubmitNotify::New() const {
  return new CMessageFamilySubmitNotify;
}

void CMessageFamilySubmitNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    npcid_ = 0u;
    if (_has_bit(2)) {
      if (familyname_ != &_default_familyname_) {
        familyname_->clear();
      }
    }
    managerid_ = 0u;
    if (_has_bit(5)) {
      if (managername_ != &_default_managername_) {
        managername_->clear();
      }
    }
  }
  memberid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFamilySubmitNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_NpcID;
        break;
      }
      
      // optional uint32 NpcID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_FamilyName;
        break;
      }
      
      // optional string FamilyName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FamilyName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_familyname()));
        if (input->ExpectTag(32)) goto parse_MemberID;
        break;
      }
      
      // repeated uint32 MemberID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MemberID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_memberid(value);
        if (input->ExpectTag(32)) goto parse_MemberID;
        if (input->ExpectTag(40)) goto parse_ManagerID;
        break;
      }
      
      // optional uint32 ManagerID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ManagerID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &managerid_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_ManagerName;
        break;
      }
      
      // optional string ManagerName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ManagerName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_managername()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageFamilySubmitNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFamilySubmitNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 NpcID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->npcid(), output);
  }
  
  // optional string FamilyName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->familyname(), output);
  }
  
  // repeated uint32 MemberID = 4;
  for (int i = 0; i < this->memberid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->memberid(i), output);
  }
  
  // optional uint32 ManagerID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->managerid(), output);
  }
  
  // optional string ManagerName = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteString(6, this->managername(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFamilySubmitNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 NpcID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->npcid(), target);
  }
  
  // optional string FamilyName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->familyname(), target);
  }
  
  // repeated uint32 MemberID = 4;
  for (int i = 0; i < this->memberid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->memberid(i), target);
  }
  
  // optional uint32 ManagerID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->managerid(), target);
  }
  
  // optional string ManagerName = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(6, this->managername(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFamilySubmitNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 NpcID = 2;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
    // optional string FamilyName = 3;
    if (has_familyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->familyname());
    }
    
    // optional uint32 ManagerID = 5;
    if (has_managerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->managerid());
    }
    
    // optional string ManagerName = 6;
    if (has_managername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->managername());
    }
    
  }
  // repeated uint32 MemberID = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->memberid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->memberid(i));
    }
    total_size += 1 * this->memberid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFamilySubmitNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFamilySubmitNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFamilySubmitNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFamilySubmitNotify::MergeFrom(const CMessageFamilySubmitNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  memberid_.MergeFrom(from.memberid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_npcid(from.npcid());
    }
    if (from._has_bit(2)) {
      set_familyname(from.familyname());
    }
    if (from._has_bit(4)) {
      set_managerid(from.managerid());
    }
    if (from._has_bit(5)) {
      set_managername(from.managername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFamilySubmitNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFamilySubmitNotify::CopyFrom(const CMessageFamilySubmitNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFamilySubmitNotify::Swap(CMessageFamilySubmitNotify* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(npcid_, other->npcid_);
    std::swap(familyname_, other->familyname_);
    memberid_.Swap(&other->memberid_);
    std::swap(managerid_, other->managerid_);
    std::swap(managername_, other->managername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFamilySubmitNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFamilySubmitNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFamilySubmitNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFamilySubmitNotify_reflection_;
}

// ===================================================================

const ::std::string CMessageBattleResultNotify::_default_attfamilyname_;
const ::std::string CMessageBattleResultNotify::_default_deffamilyname_;
#ifndef _MSC_VER
const int CMessageBattleResultNotify::kHeadMsgFieldNumber;
const int CMessageBattleResultNotify::kNpcIDFieldNumber;
const int CMessageBattleResultNotify::kAttFamilyNameFieldNumber;
const int CMessageBattleResultNotify::kDefFamilyNameFieldNumber;
const int CMessageBattleResultNotify::kWinSideFieldNumber;
const int CMessageBattleResultNotify::kAttFamilyIDFieldNumber;
const int CMessageBattleResultNotify::kDefFamilyIDFieldNumber;
#endif  // !_MSC_VER

CMessageBattleResultNotify::CMessageBattleResultNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBattleResultNotify::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageBattleResultNotify::CMessageBattleResultNotify(const CMessageBattleResultNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBattleResultNotify::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  npcid_ = 0u;
  attfamilyname_ = const_cast< ::std::string*>(&_default_attfamilyname_);
  deffamilyname_ = const_cast< ::std::string*>(&_default_deffamilyname_);
  winside_ = 0u;
  attfamilyid_ = 0u;
  deffamilyid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBattleResultNotify::~CMessageBattleResultNotify() {
  SharedDtor();
}

void CMessageBattleResultNotify::SharedDtor() {
  if (attfamilyname_ != &_default_attfamilyname_) {
    delete attfamilyname_;
  }
  if (deffamilyname_ != &_default_deffamilyname_) {
    delete deffamilyname_;
  }
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageBattleResultNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBattleResultNotify_descriptor_;
}

const CMessageBattleResultNotify& CMessageBattleResultNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageBattleResultNotify* CMessageBattleResultNotify::default_instance_ = NULL;

CMessageBattleResultNotify* CMessageBattleResultNotify::New() const {
  return new CMessageBattleResultNotify;
}

void CMessageBattleResultNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    npcid_ = 0u;
    if (_has_bit(2)) {
      if (attfamilyname_ != &_default_attfamilyname_) {
        attfamilyname_->clear();
      }
    }
    if (_has_bit(3)) {
      if (deffamilyname_ != &_default_deffamilyname_) {
        deffamilyname_->clear();
      }
    }
    winside_ = 0u;
    attfamilyid_ = 0u;
    deffamilyid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBattleResultNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_NpcID;
        break;
      }
      
      // optional uint32 NpcID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_AttFamilyName;
        break;
      }
      
      // optional string AttFamilyName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_AttFamilyName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_attfamilyname()));
        if (input->ExpectTag(34)) goto parse_DefFamilyName;
        break;
      }
      
      // optional string DefFamilyName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_DefFamilyName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_deffamilyname()));
        if (input->ExpectTag(40)) goto parse_WinSide;
        break;
      }
      
      // optional uint32 WinSide = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WinSide:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &winside_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_AttFamilyID;
        break;
      }
      
      // optional uint32 AttFamilyID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AttFamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &attfamilyid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_DefFamilyID;
        break;
      }
      
      // optional uint32 DefFamilyID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DefFamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deffamilyid_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBattleResultNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBattleResultNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 NpcID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->npcid(), output);
  }
  
  // optional string AttFamilyName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->attfamilyname(), output);
  }
  
  // optional string DefFamilyName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->deffamilyname(), output);
  }
  
  // optional uint32 WinSide = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->winside(), output);
  }
  
  // optional uint32 AttFamilyID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->attfamilyid(), output);
  }
  
  // optional uint32 DefFamilyID = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->deffamilyid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBattleResultNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 NpcID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->npcid(), target);
  }
  
  // optional string AttFamilyName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->attfamilyname(), target);
  }
  
  // optional string DefFamilyName = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->deffamilyname(), target);
  }
  
  // optional uint32 WinSide = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->winside(), target);
  }
  
  // optional uint32 AttFamilyID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->attfamilyid(), target);
  }
  
  // optional uint32 DefFamilyID = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->deffamilyid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBattleResultNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 NpcID = 2;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
    // optional string AttFamilyName = 3;
    if (has_attfamilyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->attfamilyname());
    }
    
    // optional string DefFamilyName = 4;
    if (has_deffamilyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->deffamilyname());
    }
    
    // optional uint32 WinSide = 5;
    if (has_winside()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->winside());
    }
    
    // optional uint32 AttFamilyID = 6;
    if (has_attfamilyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->attfamilyid());
    }
    
    // optional uint32 DefFamilyID = 7;
    if (has_deffamilyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deffamilyid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBattleResultNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBattleResultNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBattleResultNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBattleResultNotify::MergeFrom(const CMessageBattleResultNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_npcid(from.npcid());
    }
    if (from._has_bit(2)) {
      set_attfamilyname(from.attfamilyname());
    }
    if (from._has_bit(3)) {
      set_deffamilyname(from.deffamilyname());
    }
    if (from._has_bit(4)) {
      set_winside(from.winside());
    }
    if (from._has_bit(5)) {
      set_attfamilyid(from.attfamilyid());
    }
    if (from._has_bit(6)) {
      set_deffamilyid(from.deffamilyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBattleResultNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBattleResultNotify::CopyFrom(const CMessageBattleResultNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBattleResultNotify::Swap(CMessageBattleResultNotify* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(npcid_, other->npcid_);
    std::swap(attfamilyname_, other->attfamilyname_);
    std::swap(deffamilyname_, other->deffamilyname_);
    std::swap(winside_, other->winside_);
    std::swap(attfamilyid_, other->attfamilyid_);
    std::swap(deffamilyid_, other->deffamilyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBattleResultNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBattleResultNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBattleResultNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBattleResultNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageFamilyPVPStarLevelUPNotify::kHeadMsgFieldNumber;
const int CMessageFamilyPVPStarLevelUPNotify::kPVPStarLevelFieldNumber;
#endif  // !_MSC_VER

CMessageFamilyPVPStarLevelUPNotify::CMessageFamilyPVPStarLevelUPNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFamilyPVPStarLevelUPNotify::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageFamilyPVPStarLevelUPNotify::CMessageFamilyPVPStarLevelUPNotify(const CMessageFamilyPVPStarLevelUPNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFamilyPVPStarLevelUPNotify::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  pvpstarlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFamilyPVPStarLevelUPNotify::~CMessageFamilyPVPStarLevelUPNotify() {
  SharedDtor();
}

void CMessageFamilyPVPStarLevelUPNotify::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageFamilyPVPStarLevelUPNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFamilyPVPStarLevelUPNotify_descriptor_;
}

const CMessageFamilyPVPStarLevelUPNotify& CMessageFamilyPVPStarLevelUPNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFamilyPVPStarLevelUPNotify* CMessageFamilyPVPStarLevelUPNotify::default_instance_ = NULL;

CMessageFamilyPVPStarLevelUPNotify* CMessageFamilyPVPStarLevelUPNotify::New() const {
  return new CMessageFamilyPVPStarLevelUPNotify;
}

void CMessageFamilyPVPStarLevelUPNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    pvpstarlevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFamilyPVPStarLevelUPNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_PVPStarLevel;
        break;
      }
      
      // optional uint32 PVPStarLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PVPStarLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pvpstarlevel_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageFamilyPVPStarLevelUPNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFamilyPVPStarLevelUPNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 PVPStarLevel = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->pvpstarlevel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFamilyPVPStarLevelUPNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 PVPStarLevel = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->pvpstarlevel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFamilyPVPStarLevelUPNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 PVPStarLevel = 2;
    if (has_pvpstarlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pvpstarlevel());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFamilyPVPStarLevelUPNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFamilyPVPStarLevelUPNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFamilyPVPStarLevelUPNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFamilyPVPStarLevelUPNotify::MergeFrom(const CMessageFamilyPVPStarLevelUPNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_pvpstarlevel(from.pvpstarlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFamilyPVPStarLevelUPNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFamilyPVPStarLevelUPNotify::CopyFrom(const CMessageFamilyPVPStarLevelUPNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFamilyPVPStarLevelUPNotify::Swap(CMessageFamilyPVPStarLevelUPNotify* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(pvpstarlevel_, other->pvpstarlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFamilyPVPStarLevelUPNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFamilyPVPStarLevelUPNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFamilyPVPStarLevelUPNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFamilyPVPStarLevelUPNotify_reflection_;
}

// ===================================================================

const ::std::string CMessageMakeRoomRequest::_default_name_;
#ifndef _MSC_VER
const int CMessageMakeRoomRequest::kHeadMsgFieldNumber;
const int CMessageMakeRoomRequest::kMoneyFieldNumber;
const int CMessageMakeRoomRequest::kNameFieldNumber;
#endif  // !_MSC_VER

CMessageMakeRoomRequest::CMessageMakeRoomRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageMakeRoomRequest::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageMakeRoomRequest::CMessageMakeRoomRequest(const CMessageMakeRoomRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageMakeRoomRequest::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  money_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageMakeRoomRequest::~CMessageMakeRoomRequest() {
  SharedDtor();
}

void CMessageMakeRoomRequest::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageMakeRoomRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageMakeRoomRequest_descriptor_;
}

const CMessageMakeRoomRequest& CMessageMakeRoomRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageMakeRoomRequest* CMessageMakeRoomRequest::default_instance_ = NULL;

CMessageMakeRoomRequest* CMessageMakeRoomRequest::New() const {
  return new CMessageMakeRoomRequest;
}

void CMessageMakeRoomRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    money_ = 0u;
    if (_has_bit(2)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageMakeRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_Money;
        break;
      }
      
      // optional uint32 Money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_Name;
        break;
      }
      
      // optional string Name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageMakeRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageMakeRoomRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 Money = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->money(), output);
  }
  
  // optional string Name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageMakeRoomRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 Money = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->money(), target);
  }
  
  // optional string Name = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageMakeRoomRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 Money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
    // optional string Name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageMakeRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageMakeRoomRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageMakeRoomRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageMakeRoomRequest::MergeFrom(const CMessageMakeRoomRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_money(from.money());
    }
    if (from._has_bit(2)) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageMakeRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMakeRoomRequest::CopyFrom(const CMessageMakeRoomRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMakeRoomRequest::Swap(CMessageMakeRoomRequest* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(money_, other->money_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageMakeRoomRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageMakeRoomRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageMakeRoomRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageMakeRoomRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageMakeRoomResponse::_default_name_;
#ifndef _MSC_VER
const int CMessageMakeRoomResponse::kHeadMsgFieldNumber;
const int CMessageMakeRoomResponse::kResultFieldNumber;
const int CMessageMakeRoomResponse::kNameFieldNumber;
const int CMessageMakeRoomResponse::kMoneyFieldNumber;
#endif  // !_MSC_VER

CMessageMakeRoomResponse::CMessageMakeRoomResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageMakeRoomResponse::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageMakeRoomResponse::CMessageMakeRoomResponse(const CMessageMakeRoomResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageMakeRoomResponse::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  result_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  money_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageMakeRoomResponse::~CMessageMakeRoomResponse() {
  SharedDtor();
}

void CMessageMakeRoomResponse::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageMakeRoomResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageMakeRoomResponse_descriptor_;
}

const CMessageMakeRoomResponse& CMessageMakeRoomResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageMakeRoomResponse* CMessageMakeRoomResponse::default_instance_ = NULL;

CMessageMakeRoomResponse* CMessageMakeRoomResponse::New() const {
  return new CMessageMakeRoomResponse;
}

void CMessageMakeRoomResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    result_ = 0u;
    if (_has_bit(2)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    money_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageMakeRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_Name;
        break;
      }
      
      // optional string Name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(32)) goto parse_Money;
        break;
      }
      
      // optional uint32 Money = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageMakeRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageMakeRoomResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  // optional string Name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->name(), output);
  }
  
  // optional uint32 Money = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->money(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageMakeRoomResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  // optional string Name = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->name(), target);
  }
  
  // optional uint32 Money = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->money(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageMakeRoomResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional string Name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional uint32 Money = 4;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageMakeRoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageMakeRoomResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageMakeRoomResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageMakeRoomResponse::MergeFrom(const CMessageMakeRoomResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_name(from.name());
    }
    if (from._has_bit(3)) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageMakeRoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMakeRoomResponse::CopyFrom(const CMessageMakeRoomResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMakeRoomResponse::Swap(CMessageMakeRoomResponse* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(result_, other->result_);
    std::swap(name_, other->name_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageMakeRoomResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageMakeRoomResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageMakeRoomResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageMakeRoomResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageChaRoomRequest::kHeadMsgFieldNumber;
const int CMessageChaRoomRequest::kFamilyIDFieldNumber;
#endif  // !_MSC_VER

CMessageChaRoomRequest::CMessageChaRoomRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChaRoomRequest::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageChaRoomRequest::CMessageChaRoomRequest(const CMessageChaRoomRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChaRoomRequest::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  familyid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChaRoomRequest::~CMessageChaRoomRequest() {
  SharedDtor();
}

void CMessageChaRoomRequest::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageChaRoomRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChaRoomRequest_descriptor_;
}

const CMessageChaRoomRequest& CMessageChaRoomRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChaRoomRequest* CMessageChaRoomRequest::default_instance_ = NULL;

CMessageChaRoomRequest* CMessageChaRoomRequest::New() const {
  return new CMessageChaRoomRequest;
}

void CMessageChaRoomRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    familyid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChaRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_FamilyID;
        break;
      }
      
      // optional uint32 FamilyID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChaRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChaRoomRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 FamilyID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->familyid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChaRoomRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 FamilyID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->familyid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChaRoomRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 FamilyID = 2;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChaRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChaRoomRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChaRoomRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChaRoomRequest::MergeFrom(const CMessageChaRoomRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_familyid(from.familyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChaRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChaRoomRequest::CopyFrom(const CMessageChaRoomRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChaRoomRequest::Swap(CMessageChaRoomRequest* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(familyid_, other->familyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChaRoomRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChaRoomRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChaRoomRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChaRoomRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageChaRoomResponse::kHeadMsgFieldNumber;
const int CMessageChaRoomResponse::kResultFieldNumber;
const int CMessageChaRoomResponse::kFamilyIDFieldNumber;
#endif  // !_MSC_VER

CMessageChaRoomResponse::CMessageChaRoomResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChaRoomResponse::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageChaRoomResponse::CMessageChaRoomResponse(const CMessageChaRoomResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChaRoomResponse::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  result_ = 0u;
  familyid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChaRoomResponse::~CMessageChaRoomResponse() {
  SharedDtor();
}

void CMessageChaRoomResponse::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageChaRoomResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChaRoomResponse_descriptor_;
}

const CMessageChaRoomResponse& CMessageChaRoomResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChaRoomResponse* CMessageChaRoomResponse::default_instance_ = NULL;

CMessageChaRoomResponse* CMessageChaRoomResponse::New() const {
  return new CMessageChaRoomResponse;
}

void CMessageChaRoomResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    result_ = 0u;
    familyid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChaRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_FamilyID;
        break;
      }
      
      // optional uint32 FamilyID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChaRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChaRoomResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  // optional uint32 FamilyID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->familyid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChaRoomResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  // optional uint32 FamilyID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->familyid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChaRoomResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 FamilyID = 3;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChaRoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChaRoomResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChaRoomResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChaRoomResponse::MergeFrom(const CMessageChaRoomResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_familyid(from.familyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChaRoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChaRoomResponse::CopyFrom(const CMessageChaRoomResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChaRoomResponse::Swap(CMessageChaRoomResponse* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(result_, other->result_);
    std::swap(familyid_, other->familyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChaRoomResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChaRoomResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChaRoomResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChaRoomResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageAgreeBattleRequest::kHeadMsgFieldNumber;
const int CMessageAgreeBattleRequest::kFamilyIDFieldNumber;
#endif  // !_MSC_VER

CMessageAgreeBattleRequest::CMessageAgreeBattleRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageAgreeBattleRequest::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageAgreeBattleRequest::CMessageAgreeBattleRequest(const CMessageAgreeBattleRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageAgreeBattleRequest::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  familyid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageAgreeBattleRequest::~CMessageAgreeBattleRequest() {
  SharedDtor();
}

void CMessageAgreeBattleRequest::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageAgreeBattleRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageAgreeBattleRequest_descriptor_;
}

const CMessageAgreeBattleRequest& CMessageAgreeBattleRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageAgreeBattleRequest* CMessageAgreeBattleRequest::default_instance_ = NULL;

CMessageAgreeBattleRequest* CMessageAgreeBattleRequest::New() const {
  return new CMessageAgreeBattleRequest;
}

void CMessageAgreeBattleRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    familyid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageAgreeBattleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_FamilyID;
        break;
      }
      
      // optional uint32 FamilyID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageAgreeBattleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageAgreeBattleRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 FamilyID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->familyid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageAgreeBattleRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 FamilyID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->familyid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageAgreeBattleRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 FamilyID = 2;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageAgreeBattleRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageAgreeBattleRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageAgreeBattleRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageAgreeBattleRequest::MergeFrom(const CMessageAgreeBattleRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_familyid(from.familyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageAgreeBattleRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAgreeBattleRequest::CopyFrom(const CMessageAgreeBattleRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAgreeBattleRequest::Swap(CMessageAgreeBattleRequest* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(familyid_, other->familyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageAgreeBattleRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageAgreeBattleRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageAgreeBattleRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageAgreeBattleRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageAgreeBattleResponse::kHeadMsgFieldNumber;
const int CMessageAgreeBattleResponse::kResultFieldNumber;
const int CMessageAgreeBattleResponse::kFamilyIDFieldNumber;
#endif  // !_MSC_VER

CMessageAgreeBattleResponse::CMessageAgreeBattleResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageAgreeBattleResponse::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageAgreeBattleResponse::CMessageAgreeBattleResponse(const CMessageAgreeBattleResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageAgreeBattleResponse::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  result_ = 0u;
  familyid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageAgreeBattleResponse::~CMessageAgreeBattleResponse() {
  SharedDtor();
}

void CMessageAgreeBattleResponse::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageAgreeBattleResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageAgreeBattleResponse_descriptor_;
}

const CMessageAgreeBattleResponse& CMessageAgreeBattleResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageAgreeBattleResponse* CMessageAgreeBattleResponse::default_instance_ = NULL;

CMessageAgreeBattleResponse* CMessageAgreeBattleResponse::New() const {
  return new CMessageAgreeBattleResponse;
}

void CMessageAgreeBattleResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    result_ = 0u;
    familyid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageAgreeBattleResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_FamilyID;
        break;
      }
      
      // optional uint32 FamilyID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageAgreeBattleResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageAgreeBattleResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  // optional uint32 FamilyID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->familyid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageAgreeBattleResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  // optional uint32 FamilyID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->familyid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageAgreeBattleResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 FamilyID = 3;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageAgreeBattleResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageAgreeBattleResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageAgreeBattleResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageAgreeBattleResponse::MergeFrom(const CMessageAgreeBattleResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_familyid(from.familyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageAgreeBattleResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAgreeBattleResponse::CopyFrom(const CMessageAgreeBattleResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAgreeBattleResponse::Swap(CMessageAgreeBattleResponse* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(result_, other->result_);
    std::swap(familyid_, other->familyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageAgreeBattleResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageAgreeBattleResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageAgreeBattleResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageAgreeBattleResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageQueryAllRoomRequest::kHeadMsgFieldNumber;
#endif  // !_MSC_VER

CMessageQueryAllRoomRequest::CMessageQueryAllRoomRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageQueryAllRoomRequest::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageQueryAllRoomRequest::CMessageQueryAllRoomRequest(const CMessageQueryAllRoomRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageQueryAllRoomRequest::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageQueryAllRoomRequest::~CMessageQueryAllRoomRequest() {
  SharedDtor();
}

void CMessageQueryAllRoomRequest::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageQueryAllRoomRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryAllRoomRequest_descriptor_;
}

const CMessageQueryAllRoomRequest& CMessageQueryAllRoomRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageQueryAllRoomRequest* CMessageQueryAllRoomRequest::default_instance_ = NULL;

CMessageQueryAllRoomRequest* CMessageQueryAllRoomRequest::New() const {
  return new CMessageQueryAllRoomRequest;
}

void CMessageQueryAllRoomRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageQueryAllRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageQueryAllRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageQueryAllRoomRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageQueryAllRoomRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageQueryAllRoomRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageQueryAllRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageQueryAllRoomRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageQueryAllRoomRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageQueryAllRoomRequest::MergeFrom(const CMessageQueryAllRoomRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageQueryAllRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryAllRoomRequest::CopyFrom(const CMessageQueryAllRoomRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryAllRoomRequest::Swap(CMessageQueryAllRoomRequest* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageQueryAllRoomRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageQueryAllRoomRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageQueryAllRoomRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryAllRoomRequest_reflection_;
}

// ===================================================================

const ::std::string AllRoomInfo::_default_familyname_;
const ::std::string AllRoomInfo::_default_roomname_;
const ::std::string AllRoomInfo::_default_attname_;
#ifndef _MSC_VER
const int AllRoomInfo::kFamilyIDFieldNumber;
const int AllRoomInfo::kFamilyNameFieldNumber;
const int AllRoomInfo::kMoneyFieldNumber;
const int AllRoomInfo::kRoomNameFieldNumber;
const int AllRoomInfo::kWinFieldNumber;
const int AllRoomInfo::kLostFieldNumber;
const int AllRoomInfo::kAttNameFieldNumber;
const int AllRoomInfo::kStateFieldNumber;
#endif  // !_MSC_VER

AllRoomInfo::AllRoomInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllRoomInfo::InitAsDefaultInstance() {}

AllRoomInfo::AllRoomInfo(const AllRoomInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllRoomInfo::SharedCtor() {
  _cached_size_ = 0;
  familyid_ = 0u;
  familyname_ = const_cast< ::std::string*>(&_default_familyname_);
  money_ = 0u;
  roomname_ = const_cast< ::std::string*>(&_default_roomname_);
  win_ = 0u;
  lost_ = 0u;
  attname_ = const_cast< ::std::string*>(&_default_attname_);
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllRoomInfo::~AllRoomInfo() {
  SharedDtor();
}

void AllRoomInfo::SharedDtor() {
  if (familyname_ != &_default_familyname_) {
    delete familyname_;
  }
  if (roomname_ != &_default_roomname_) {
    delete roomname_;
  }
  if (attname_ != &_default_attname_) {
    delete attname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* AllRoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllRoomInfo_descriptor_;
}

const AllRoomInfo& AllRoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

AllRoomInfo* AllRoomInfo::default_instance_ = NULL;

AllRoomInfo* AllRoomInfo::New() const {
  return new AllRoomInfo;
}

void AllRoomInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    familyid_ = 0u;
    if (_has_bit(1)) {
      if (familyname_ != &_default_familyname_) {
        familyname_->clear();
      }
    }
    money_ = 0u;
    if (_has_bit(3)) {
      if (roomname_ != &_default_roomname_) {
        roomname_->clear();
      }
    }
    win_ = 0u;
    lost_ = 0u;
    if (_has_bit(6)) {
      if (attname_ != &_default_attname_) {
        attname_->clear();
      }
    }
    state_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllRoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 FamilyID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_FamilyName;
        break;
      }
      
      // optional string FamilyName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FamilyName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_familyname()));
        if (input->ExpectTag(24)) goto parse_Money;
        break;
      }
      
      // optional uint32 Money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_RoomName;
        break;
      }
      
      // optional string RoomName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RoomName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_roomname()));
        if (input->ExpectTag(40)) goto parse_Win;
        break;
      }
      
      // optional uint32 Win = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Win:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &win_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Lost;
        break;
      }
      
      // optional uint32 Lost = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Lost:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lost_));
        _set_bit(5);
        if (input->ExpectTag(58)) goto parse_AttName;
        break;
      }
      
      // optional string AttName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_AttName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_attname()));
        if (input->ExpectTag(64)) goto parse_State;
        break;
      }
      
      // optional uint32 State = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_State:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &state_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllRoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    AllRoomInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 FamilyID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->familyid(), output);
  }
  
  // optional string FamilyName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->familyname(), output);
  }
  
  // optional uint32 Money = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->money(), output);
  }
  
  // optional string RoomName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->roomname(), output);
  }
  
  // optional uint32 Win = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->win(), output);
  }
  
  // optional uint32 Lost = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->lost(), output);
  }
  
  // optional string AttName = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteString(7, this->attname(), output);
  }
  
  // optional uint32 State = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->state(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllRoomInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 FamilyID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->familyid(), target);
  }
  
  // optional string FamilyName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->familyname(), target);
  }
  
  // optional uint32 Money = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->money(), target);
  }
  
  // optional string RoomName = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->roomname(), target);
  }
  
  // optional uint32 Win = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->win(), target);
  }
  
  // optional uint32 Lost = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->lost(), target);
  }
  
  // optional string AttName = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(7, this->attname(), target);
  }
  
  // optional uint32 State = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->state(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllRoomInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 FamilyID = 1;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
    // optional string FamilyName = 2;
    if (has_familyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->familyname());
    }
    
    // optional uint32 Money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
    // optional string RoomName = 4;
    if (has_roomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->roomname());
    }
    
    // optional uint32 Win = 5;
    if (has_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->win());
    }
    
    // optional uint32 Lost = 6;
    if (has_lost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lost());
    }
    
    // optional string AttName = 7;
    if (has_attname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->attname());
    }
    
    // optional uint32 State = 8;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->state());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void AllRoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllRoomInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllRoomInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllRoomInfo::MergeFrom(const AllRoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_familyid(from.familyid());
    }
    if (from._has_bit(1)) {
      set_familyname(from.familyname());
    }
    if (from._has_bit(2)) {
      set_money(from.money());
    }
    if (from._has_bit(3)) {
      set_roomname(from.roomname());
    }
    if (from._has_bit(4)) {
      set_win(from.win());
    }
    if (from._has_bit(5)) {
      set_lost(from.lost());
    }
    if (from._has_bit(6)) {
      set_attname(from.attname());
    }
    if (from._has_bit(7)) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllRoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllRoomInfo::CopyFrom(const AllRoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllRoomInfo::Swap(AllRoomInfo* other) {
  if (other != this) {
    std::swap(familyid_, other->familyid_);
    std::swap(familyname_, other->familyname_);
    std::swap(money_, other->money_);
    std::swap(roomname_, other->roomname_);
    std::swap(win_, other->win_);
    std::swap(lost_, other->lost_);
    std::swap(attname_, other->attname_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool AllRoomInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* AllRoomInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* AllRoomInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return AllRoomInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageQueryAllRoomResponse::kHeadMsgFieldNumber;
const int CMessageQueryAllRoomResponse::kResultFieldNumber;
const int CMessageQueryAllRoomResponse::kRoomDataFieldNumber;
#endif  // !_MSC_VER

CMessageQueryAllRoomResponse::CMessageQueryAllRoomResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageQueryAllRoomResponse::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageQueryAllRoomResponse::CMessageQueryAllRoomResponse(const CMessageQueryAllRoomResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageQueryAllRoomResponse::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageQueryAllRoomResponse::~CMessageQueryAllRoomResponse() {
  SharedDtor();
}

void CMessageQueryAllRoomResponse::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageQueryAllRoomResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryAllRoomResponse_descriptor_;
}

const CMessageQueryAllRoomResponse& CMessageQueryAllRoomResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageQueryAllRoomResponse* CMessageQueryAllRoomResponse::default_instance_ = NULL;

CMessageQueryAllRoomResponse* CMessageQueryAllRoomResponse::New() const {
  return new CMessageQueryAllRoomResponse;
}

void CMessageQueryAllRoomResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    result_ = 0u;
  }
  roomdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageQueryAllRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_RoomData;
        break;
      }
      
      // repeated .AllRoomInfo RoomData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RoomData:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_roomdata()));
        if (input->ExpectTag(26)) goto parse_RoomData;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageQueryAllRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageQueryAllRoomResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  // repeated .AllRoomInfo RoomData = 3;
  for (int i = 0; i < this->roomdata_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->roomdata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageQueryAllRoomResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  // repeated .AllRoomInfo RoomData = 3;
  for (int i = 0; i < this->roomdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->roomdata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageQueryAllRoomResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
  }
  // repeated .AllRoomInfo RoomData = 3;
  total_size += 1 * this->roomdata_size();
  for (int i = 0; i < this->roomdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->roomdata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageQueryAllRoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageQueryAllRoomResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageQueryAllRoomResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageQueryAllRoomResponse::MergeFrom(const CMessageQueryAllRoomResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  roomdata_.MergeFrom(from.roomdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageQueryAllRoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryAllRoomResponse::CopyFrom(const CMessageQueryAllRoomResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryAllRoomResponse::Swap(CMessageQueryAllRoomResponse* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(result_, other->result_);
    roomdata_.Swap(&other->roomdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageQueryAllRoomResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageQueryAllRoomResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageQueryAllRoomResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryAllRoomResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageQueryMyRoomRequest::kHeadMsgFieldNumber;
#endif  // !_MSC_VER

CMessageQueryMyRoomRequest::CMessageQueryMyRoomRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageQueryMyRoomRequest::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageQueryMyRoomRequest::CMessageQueryMyRoomRequest(const CMessageQueryMyRoomRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageQueryMyRoomRequest::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageQueryMyRoomRequest::~CMessageQueryMyRoomRequest() {
  SharedDtor();
}

void CMessageQueryMyRoomRequest::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageQueryMyRoomRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryMyRoomRequest_descriptor_;
}

const CMessageQueryMyRoomRequest& CMessageQueryMyRoomRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageQueryMyRoomRequest* CMessageQueryMyRoomRequest::default_instance_ = NULL;

CMessageQueryMyRoomRequest* CMessageQueryMyRoomRequest::New() const {
  return new CMessageQueryMyRoomRequest;
}

void CMessageQueryMyRoomRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageQueryMyRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageQueryMyRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageQueryMyRoomRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageQueryMyRoomRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageQueryMyRoomRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageQueryMyRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageQueryMyRoomRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageQueryMyRoomRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageQueryMyRoomRequest::MergeFrom(const CMessageQueryMyRoomRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageQueryMyRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryMyRoomRequest::CopyFrom(const CMessageQueryMyRoomRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryMyRoomRequest::Swap(CMessageQueryMyRoomRequest* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageQueryMyRoomRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageQueryMyRoomRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageQueryMyRoomRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryMyRoomRequest_reflection_;
}

// ===================================================================

const ::std::string MyRoomInfo::_default_familyname_;
#ifndef _MSC_VER
const int MyRoomInfo::kFamilyIDFieldNumber;
const int MyRoomInfo::kFamilyNameFieldNumber;
const int MyRoomInfo::kWinFieldNumber;
const int MyRoomInfo::kLostFieldNumber;
#endif  // !_MSC_VER

MyRoomInfo::MyRoomInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MyRoomInfo::InitAsDefaultInstance() {}

MyRoomInfo::MyRoomInfo(const MyRoomInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MyRoomInfo::SharedCtor() {
  _cached_size_ = 0;
  familyid_ = 0u;
  familyname_ = const_cast< ::std::string*>(&_default_familyname_);
  win_ = 0u;
  lost_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MyRoomInfo::~MyRoomInfo() {
  SharedDtor();
}

void MyRoomInfo::SharedDtor() {
  if (familyname_ != &_default_familyname_) {
    delete familyname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MyRoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MyRoomInfo_descriptor_;
}

const MyRoomInfo& MyRoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

MyRoomInfo* MyRoomInfo::default_instance_ = NULL;

MyRoomInfo* MyRoomInfo::New() const {
  return new MyRoomInfo;
}

void MyRoomInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    familyid_ = 0u;
    if (_has_bit(1)) {
      if (familyname_ != &_default_familyname_) {
        familyname_->clear();
      }
    }
    win_ = 0u;
    lost_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MyRoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 FamilyID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_FamilyName;
        break;
      }
      
      // optional string FamilyName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FamilyName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_familyname()));
        if (input->ExpectTag(24)) goto parse_Win;
        break;
      }
      
      // optional uint32 Win = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Win:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &win_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Lost;
        break;
      }
      
      // optional uint32 Lost = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Lost:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lost_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MyRoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MyRoomInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 FamilyID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->familyid(), output);
  }
  
  // optional string FamilyName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->familyname(), output);
  }
  
  // optional uint32 Win = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->win(), output);
  }
  
  // optional uint32 Lost = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->lost(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MyRoomInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 FamilyID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->familyid(), target);
  }
  
  // optional string FamilyName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->familyname(), target);
  }
  
  // optional uint32 Win = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->win(), target);
  }
  
  // optional uint32 Lost = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->lost(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MyRoomInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 FamilyID = 1;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
    // optional string FamilyName = 2;
    if (has_familyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->familyname());
    }
    
    // optional uint32 Win = 3;
    if (has_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->win());
    }
    
    // optional uint32 Lost = 4;
    if (has_lost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lost());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MyRoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MyRoomInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MyRoomInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MyRoomInfo::MergeFrom(const MyRoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_familyid(from.familyid());
    }
    if (from._has_bit(1)) {
      set_familyname(from.familyname());
    }
    if (from._has_bit(2)) {
      set_win(from.win());
    }
    if (from._has_bit(3)) {
      set_lost(from.lost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MyRoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyRoomInfo::CopyFrom(const MyRoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyRoomInfo::Swap(MyRoomInfo* other) {
  if (other != this) {
    std::swap(familyid_, other->familyid_);
    std::swap(familyname_, other->familyname_);
    std::swap(win_, other->win_);
    std::swap(lost_, other->lost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool MyRoomInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* MyRoomInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* MyRoomInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return MyRoomInfo_reflection_;
}

// ===================================================================

const ::std::string CMessageQueryMyRoomResponse::_default_name_;
#ifndef _MSC_VER
const int CMessageQueryMyRoomResponse::kHeadMsgFieldNumber;
const int CMessageQueryMyRoomResponse::kResultFieldNumber;
const int CMessageQueryMyRoomResponse::kMoneyFieldNumber;
const int CMessageQueryMyRoomResponse::kRoomDataFieldNumber;
const int CMessageQueryMyRoomResponse::kNameFieldNumber;
#endif  // !_MSC_VER

CMessageQueryMyRoomResponse::CMessageQueryMyRoomResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageQueryMyRoomResponse::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageQueryMyRoomResponse::CMessageQueryMyRoomResponse(const CMessageQueryMyRoomResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageQueryMyRoomResponse::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  result_ = 0u;
  money_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageQueryMyRoomResponse::~CMessageQueryMyRoomResponse() {
  SharedDtor();
}

void CMessageQueryMyRoomResponse::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageQueryMyRoomResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryMyRoomResponse_descriptor_;
}

const CMessageQueryMyRoomResponse& CMessageQueryMyRoomResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageQueryMyRoomResponse* CMessageQueryMyRoomResponse::default_instance_ = NULL;

CMessageQueryMyRoomResponse* CMessageQueryMyRoomResponse::New() const {
  return new CMessageQueryMyRoomResponse;
}

void CMessageQueryMyRoomResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    result_ = 0u;
    money_ = 0u;
    if (_has_bit(4)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
  }
  roomdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageQueryMyRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Money;
        break;
      }
      
      // optional uint32 Money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_RoomData;
        break;
      }
      
      // repeated .MyRoomInfo RoomData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RoomData:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_roomdata()));
        if (input->ExpectTag(34)) goto parse_RoomData;
        if (input->ExpectTag(42)) goto parse_Name;
        break;
      }
      
      // optional string Name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageQueryMyRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageQueryMyRoomResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  // optional uint32 Money = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->money(), output);
  }
  
  // repeated .MyRoomInfo RoomData = 4;
  for (int i = 0; i < this->roomdata_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->roomdata(i), output);
  }
  
  // optional string Name = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageQueryMyRoomResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  // optional uint32 Money = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->money(), target);
  }
  
  // repeated .MyRoomInfo RoomData = 4;
  for (int i = 0; i < this->roomdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(4, this->roomdata(i), target);
  }
  
  // optional string Name = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageQueryMyRoomResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 Money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
    // optional string Name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
  }
  // repeated .MyRoomInfo RoomData = 4;
  total_size += 1 * this->roomdata_size();
  for (int i = 0; i < this->roomdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->roomdata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageQueryMyRoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageQueryMyRoomResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageQueryMyRoomResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageQueryMyRoomResponse::MergeFrom(const CMessageQueryMyRoomResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  roomdata_.MergeFrom(from.roomdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_money(from.money());
    }
    if (from._has_bit(4)) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageQueryMyRoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryMyRoomResponse::CopyFrom(const CMessageQueryMyRoomResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryMyRoomResponse::Swap(CMessageQueryMyRoomResponse* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(result_, other->result_);
    std::swap(money_, other->money_);
    roomdata_.Swap(&other->roomdata_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageQueryMyRoomResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageQueryMyRoomResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageQueryMyRoomResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryMyRoomResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageQueryMyChaRequest::kHeadMsgFieldNumber;
#endif  // !_MSC_VER

CMessageQueryMyChaRequest::CMessageQueryMyChaRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageQueryMyChaRequest::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageQueryMyChaRequest::CMessageQueryMyChaRequest(const CMessageQueryMyChaRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageQueryMyChaRequest::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageQueryMyChaRequest::~CMessageQueryMyChaRequest() {
  SharedDtor();
}

void CMessageQueryMyChaRequest::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageQueryMyChaRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryMyChaRequest_descriptor_;
}

const CMessageQueryMyChaRequest& CMessageQueryMyChaRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageQueryMyChaRequest* CMessageQueryMyChaRequest::default_instance_ = NULL;

CMessageQueryMyChaRequest* CMessageQueryMyChaRequest::New() const {
  return new CMessageQueryMyChaRequest;
}

void CMessageQueryMyChaRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageQueryMyChaRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageQueryMyChaRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageQueryMyChaRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageQueryMyChaRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageQueryMyChaRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageQueryMyChaRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageQueryMyChaRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageQueryMyChaRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageQueryMyChaRequest::MergeFrom(const CMessageQueryMyChaRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageQueryMyChaRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryMyChaRequest::CopyFrom(const CMessageQueryMyChaRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryMyChaRequest::Swap(CMessageQueryMyChaRequest* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageQueryMyChaRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageQueryMyChaRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageQueryMyChaRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryMyChaRequest_reflection_;
}

// ===================================================================

const ::std::string MyChaInfo::_default_familyname_;
const ::std::string MyChaInfo::_default_roomname_;
#ifndef _MSC_VER
const int MyChaInfo::kFamilyIDFieldNumber;
const int MyChaInfo::kFamilyNameFieldNumber;
const int MyChaInfo::kMoneyFieldNumber;
const int MyChaInfo::kRoomNameFieldNumber;
const int MyChaInfo::kWinFieldNumber;
const int MyChaInfo::kLostFieldNumber;
#endif  // !_MSC_VER

MyChaInfo::MyChaInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MyChaInfo::InitAsDefaultInstance() {}

MyChaInfo::MyChaInfo(const MyChaInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MyChaInfo::SharedCtor() {
  _cached_size_ = 0;
  familyid_ = 0u;
  familyname_ = const_cast< ::std::string*>(&_default_familyname_);
  money_ = 0u;
  roomname_ = const_cast< ::std::string*>(&_default_roomname_);
  win_ = 0u;
  lost_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MyChaInfo::~MyChaInfo() {
  SharedDtor();
}

void MyChaInfo::SharedDtor() {
  if (familyname_ != &_default_familyname_) {
    delete familyname_;
  }
  if (roomname_ != &_default_roomname_) {
    delete roomname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MyChaInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MyChaInfo_descriptor_;
}

const MyChaInfo& MyChaInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

MyChaInfo* MyChaInfo::default_instance_ = NULL;

MyChaInfo* MyChaInfo::New() const {
  return new MyChaInfo;
}

void MyChaInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    familyid_ = 0u;
    if (_has_bit(1)) {
      if (familyname_ != &_default_familyname_) {
        familyname_->clear();
      }
    }
    money_ = 0u;
    if (_has_bit(3)) {
      if (roomname_ != &_default_roomname_) {
        roomname_->clear();
      }
    }
    win_ = 0u;
    lost_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MyChaInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 FamilyID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_FamilyName;
        break;
      }
      
      // optional string FamilyName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FamilyName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_familyname()));
        if (input->ExpectTag(24)) goto parse_Money;
        break;
      }
      
      // optional uint32 Money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_RoomName;
        break;
      }
      
      // optional string RoomName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RoomName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_roomname()));
        if (input->ExpectTag(40)) goto parse_Win;
        break;
      }
      
      // optional uint32 Win = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Win:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &win_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Lost;
        break;
      }
      
      // optional uint32 Lost = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Lost:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lost_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MyChaInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MyChaInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 FamilyID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->familyid(), output);
  }
  
  // optional string FamilyName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->familyname(), output);
  }
  
  // optional uint32 Money = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->money(), output);
  }
  
  // optional string RoomName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->roomname(), output);
  }
  
  // optional uint32 Win = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->win(), output);
  }
  
  // optional uint32 Lost = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->lost(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MyChaInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 FamilyID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->familyid(), target);
  }
  
  // optional string FamilyName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->familyname(), target);
  }
  
  // optional uint32 Money = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->money(), target);
  }
  
  // optional string RoomName = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->roomname(), target);
  }
  
  // optional uint32 Win = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->win(), target);
  }
  
  // optional uint32 Lost = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->lost(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MyChaInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 FamilyID = 1;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
    // optional string FamilyName = 2;
    if (has_familyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->familyname());
    }
    
    // optional uint32 Money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
    // optional string RoomName = 4;
    if (has_roomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->roomname());
    }
    
    // optional uint32 Win = 5;
    if (has_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->win());
    }
    
    // optional uint32 Lost = 6;
    if (has_lost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lost());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MyChaInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MyChaInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MyChaInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MyChaInfo::MergeFrom(const MyChaInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_familyid(from.familyid());
    }
    if (from._has_bit(1)) {
      set_familyname(from.familyname());
    }
    if (from._has_bit(2)) {
      set_money(from.money());
    }
    if (from._has_bit(3)) {
      set_roomname(from.roomname());
    }
    if (from._has_bit(4)) {
      set_win(from.win());
    }
    if (from._has_bit(5)) {
      set_lost(from.lost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MyChaInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyChaInfo::CopyFrom(const MyChaInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyChaInfo::Swap(MyChaInfo* other) {
  if (other != this) {
    std::swap(familyid_, other->familyid_);
    std::swap(familyname_, other->familyname_);
    std::swap(money_, other->money_);
    std::swap(roomname_, other->roomname_);
    std::swap(win_, other->win_);
    std::swap(lost_, other->lost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool MyChaInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* MyChaInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* MyChaInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return MyChaInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageQueryMyChaResponse::kHeadMsgFieldNumber;
const int CMessageQueryMyChaResponse::kResultFieldNumber;
const int CMessageQueryMyChaResponse::kRoomDataFieldNumber;
#endif  // !_MSC_VER

CMessageQueryMyChaResponse::CMessageQueryMyChaResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageQueryMyChaResponse::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageQueryMyChaResponse::CMessageQueryMyChaResponse(const CMessageQueryMyChaResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageQueryMyChaResponse::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageQueryMyChaResponse::~CMessageQueryMyChaResponse() {
  SharedDtor();
}

void CMessageQueryMyChaResponse::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageQueryMyChaResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryMyChaResponse_descriptor_;
}

const CMessageQueryMyChaResponse& CMessageQueryMyChaResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageQueryMyChaResponse* CMessageQueryMyChaResponse::default_instance_ = NULL;

CMessageQueryMyChaResponse* CMessageQueryMyChaResponse::New() const {
  return new CMessageQueryMyChaResponse;
}

void CMessageQueryMyChaResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    result_ = 0u;
  }
  roomdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageQueryMyChaResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_RoomData;
        break;
      }
      
      // repeated .MyChaInfo RoomData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RoomData:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_roomdata()));
        if (input->ExpectTag(26)) goto parse_RoomData;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageQueryMyChaResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageQueryMyChaResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  // repeated .MyChaInfo RoomData = 3;
  for (int i = 0; i < this->roomdata_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->roomdata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageQueryMyChaResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  // repeated .MyChaInfo RoomData = 3;
  for (int i = 0; i < this->roomdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->roomdata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageQueryMyChaResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
  }
  // repeated .MyChaInfo RoomData = 3;
  total_size += 1 * this->roomdata_size();
  for (int i = 0; i < this->roomdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->roomdata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageQueryMyChaResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageQueryMyChaResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageQueryMyChaResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageQueryMyChaResponse::MergeFrom(const CMessageQueryMyChaResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  roomdata_.MergeFrom(from.roomdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageQueryMyChaResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryMyChaResponse::CopyFrom(const CMessageQueryMyChaResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryMyChaResponse::Swap(CMessageQueryMyChaResponse* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(result_, other->result_);
    roomdata_.Swap(&other->roomdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageQueryMyChaResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageQueryMyChaResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageQueryMyChaResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryMyChaResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageAbortRoomRequest::kHeadMsgFieldNumber;
#endif  // !_MSC_VER

CMessageAbortRoomRequest::CMessageAbortRoomRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageAbortRoomRequest::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageAbortRoomRequest::CMessageAbortRoomRequest(const CMessageAbortRoomRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageAbortRoomRequest::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageAbortRoomRequest::~CMessageAbortRoomRequest() {
  SharedDtor();
}

void CMessageAbortRoomRequest::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageAbortRoomRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageAbortRoomRequest_descriptor_;
}

const CMessageAbortRoomRequest& CMessageAbortRoomRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageAbortRoomRequest* CMessageAbortRoomRequest::default_instance_ = NULL;

CMessageAbortRoomRequest* CMessageAbortRoomRequest::New() const {
  return new CMessageAbortRoomRequest;
}

void CMessageAbortRoomRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageAbortRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageAbortRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageAbortRoomRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageAbortRoomRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageAbortRoomRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageAbortRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageAbortRoomRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageAbortRoomRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageAbortRoomRequest::MergeFrom(const CMessageAbortRoomRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageAbortRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAbortRoomRequest::CopyFrom(const CMessageAbortRoomRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAbortRoomRequest::Swap(CMessageAbortRoomRequest* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageAbortRoomRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageAbortRoomRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageAbortRoomRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageAbortRoomRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageAbortRoomResponse::kHeadMsgFieldNumber;
const int CMessageAbortRoomResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMessageAbortRoomResponse::CMessageAbortRoomResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageAbortRoomResponse::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageAbortRoomResponse::CMessageAbortRoomResponse(const CMessageAbortRoomResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageAbortRoomResponse::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageAbortRoomResponse::~CMessageAbortRoomResponse() {
  SharedDtor();
}

void CMessageAbortRoomResponse::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageAbortRoomResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageAbortRoomResponse_descriptor_;
}

const CMessageAbortRoomResponse& CMessageAbortRoomResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageAbortRoomResponse* CMessageAbortRoomResponse::default_instance_ = NULL;

CMessageAbortRoomResponse* CMessageAbortRoomResponse::New() const {
  return new CMessageAbortRoomResponse;
}

void CMessageAbortRoomResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageAbortRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageAbortRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageAbortRoomResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageAbortRoomResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageAbortRoomResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageAbortRoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageAbortRoomResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageAbortRoomResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageAbortRoomResponse::MergeFrom(const CMessageAbortRoomResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageAbortRoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAbortRoomResponse::CopyFrom(const CMessageAbortRoomResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAbortRoomResponse::Swap(CMessageAbortRoomResponse* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageAbortRoomResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageAbortRoomResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageAbortRoomResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageAbortRoomResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageAbortChaRequest::kHeadMsgFieldNumber;
const int CMessageAbortChaRequest::kFamilyIDFieldNumber;
#endif  // !_MSC_VER

CMessageAbortChaRequest::CMessageAbortChaRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageAbortChaRequest::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageAbortChaRequest::CMessageAbortChaRequest(const CMessageAbortChaRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageAbortChaRequest::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  familyid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageAbortChaRequest::~CMessageAbortChaRequest() {
  SharedDtor();
}

void CMessageAbortChaRequest::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageAbortChaRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageAbortChaRequest_descriptor_;
}

const CMessageAbortChaRequest& CMessageAbortChaRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageAbortChaRequest* CMessageAbortChaRequest::default_instance_ = NULL;

CMessageAbortChaRequest* CMessageAbortChaRequest::New() const {
  return new CMessageAbortChaRequest;
}

void CMessageAbortChaRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    familyid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageAbortChaRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_FamilyID;
        break;
      }
      
      // optional uint32 FamilyID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageAbortChaRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageAbortChaRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 FamilyID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->familyid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageAbortChaRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 FamilyID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->familyid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageAbortChaRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 FamilyID = 2;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageAbortChaRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageAbortChaRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageAbortChaRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageAbortChaRequest::MergeFrom(const CMessageAbortChaRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_familyid(from.familyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageAbortChaRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAbortChaRequest::CopyFrom(const CMessageAbortChaRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAbortChaRequest::Swap(CMessageAbortChaRequest* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(familyid_, other->familyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageAbortChaRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageAbortChaRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageAbortChaRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageAbortChaRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageAbortChaResponse::kHeadMsgFieldNumber;
const int CMessageAbortChaResponse::kResultFieldNumber;
const int CMessageAbortChaResponse::kFamilyIDFieldNumber;
#endif  // !_MSC_VER

CMessageAbortChaResponse::CMessageAbortChaResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageAbortChaResponse::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageAbortChaResponse::CMessageAbortChaResponse(const CMessageAbortChaResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageAbortChaResponse::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  result_ = 0u;
  familyid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageAbortChaResponse::~CMessageAbortChaResponse() {
  SharedDtor();
}

void CMessageAbortChaResponse::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageAbortChaResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageAbortChaResponse_descriptor_;
}

const CMessageAbortChaResponse& CMessageAbortChaResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageAbortChaResponse* CMessageAbortChaResponse::default_instance_ = NULL;

CMessageAbortChaResponse* CMessageAbortChaResponse::New() const {
  return new CMessageAbortChaResponse;
}

void CMessageAbortChaResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    result_ = 0u;
    familyid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageAbortChaResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_FamilyID;
        break;
      }
      
      // optional uint32 FamilyID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageAbortChaResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageAbortChaResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  // optional uint32 FamilyID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->familyid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageAbortChaResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  // optional uint32 FamilyID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->familyid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageAbortChaResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 FamilyID = 3;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageAbortChaResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageAbortChaResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageAbortChaResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageAbortChaResponse::MergeFrom(const CMessageAbortChaResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_familyid(from.familyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageAbortChaResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAbortChaResponse::CopyFrom(const CMessageAbortChaResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAbortChaResponse::Swap(CMessageAbortChaResponse* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(result_, other->result_);
    std::swap(familyid_, other->familyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageAbortChaResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageAbortChaResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageAbortChaResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageAbortChaResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageContributeFamilyMoneyNotify::_default_membername_;
#ifndef _MSC_VER
const int CMessageContributeFamilyMoneyNotify::kHeadMsgFieldNumber;
const int CMessageContributeFamilyMoneyNotify::kFamilyMoneyFieldNumber;
const int CMessageContributeFamilyMoneyNotify::kMemberNameFieldNumber;
const int CMessageContributeFamilyMoneyNotify::kMemberIDFieldNumber;
const int CMessageContributeFamilyMoneyNotify::kValueFieldNumber;
#endif  // !_MSC_VER

CMessageContributeFamilyMoneyNotify::CMessageContributeFamilyMoneyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageContributeFamilyMoneyNotify::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageContributeFamilyMoneyNotify::CMessageContributeFamilyMoneyNotify(const CMessageContributeFamilyMoneyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageContributeFamilyMoneyNotify::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  familymoney_ = 0u;
  membername_ = const_cast< ::std::string*>(&_default_membername_);
  memberid_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageContributeFamilyMoneyNotify::~CMessageContributeFamilyMoneyNotify() {
  SharedDtor();
}

void CMessageContributeFamilyMoneyNotify::SharedDtor() {
  if (membername_ != &_default_membername_) {
    delete membername_;
  }
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageContributeFamilyMoneyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageContributeFamilyMoneyNotify_descriptor_;
}

const CMessageContributeFamilyMoneyNotify& CMessageContributeFamilyMoneyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageContributeFamilyMoneyNotify* CMessageContributeFamilyMoneyNotify::default_instance_ = NULL;

CMessageContributeFamilyMoneyNotify* CMessageContributeFamilyMoneyNotify::New() const {
  return new CMessageContributeFamilyMoneyNotify;
}

void CMessageContributeFamilyMoneyNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    familymoney_ = 0u;
    if (_has_bit(2)) {
      if (membername_ != &_default_membername_) {
        membername_->clear();
      }
    }
    memberid_ = 0u;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageContributeFamilyMoneyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_FamilyMoney;
        break;
      }
      
      // optional uint32 FamilyMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familymoney_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_MemberName;
        break;
      }
      
      // optional string MemberName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MemberName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_membername()));
        if (input->ExpectTag(32)) goto parse_MemberID;
        break;
      }
      
      // optional uint32 MemberID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MemberID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &memberid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Value;
        break;
      }
      
      // optional uint32 Value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Value:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &value_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageContributeFamilyMoneyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageContributeFamilyMoneyNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 FamilyMoney = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->familymoney(), output);
  }
  
  // optional string MemberName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->membername(), output);
  }
  
  // optional uint32 MemberID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->memberid(), output);
  }
  
  // optional uint32 Value = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageContributeFamilyMoneyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 FamilyMoney = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->familymoney(), target);
  }
  
  // optional string MemberName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->membername(), target);
  }
  
  // optional uint32 MemberID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->memberid(), target);
  }
  
  // optional uint32 Value = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageContributeFamilyMoneyNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 FamilyMoney = 2;
    if (has_familymoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familymoney());
    }
    
    // optional string MemberName = 3;
    if (has_membername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->membername());
    }
    
    // optional uint32 MemberID = 4;
    if (has_memberid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->memberid());
    }
    
    // optional uint32 Value = 5;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageContributeFamilyMoneyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageContributeFamilyMoneyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageContributeFamilyMoneyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageContributeFamilyMoneyNotify::MergeFrom(const CMessageContributeFamilyMoneyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_familymoney(from.familymoney());
    }
    if (from._has_bit(2)) {
      set_membername(from.membername());
    }
    if (from._has_bit(3)) {
      set_memberid(from.memberid());
    }
    if (from._has_bit(4)) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageContributeFamilyMoneyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageContributeFamilyMoneyNotify::CopyFrom(const CMessageContributeFamilyMoneyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageContributeFamilyMoneyNotify::Swap(CMessageContributeFamilyMoneyNotify* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(familymoney_, other->familymoney_);
    std::swap(membername_, other->membername_);
    std::swap(memberid_, other->memberid_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageContributeFamilyMoneyNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageContributeFamilyMoneyNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageContributeFamilyMoneyNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageContributeFamilyMoneyNotify_reflection_;
}

// ===================================================================

const ::std::string CMessageFamilyMoneyChangedNotify::_default_rolename_;
#ifndef _MSC_VER
const int CMessageFamilyMoneyChangedNotify::kMoneyFieldNumber;
const int CMessageFamilyMoneyChangedNotify::kRoleIDFieldNumber;
const int CMessageFamilyMoneyChangedNotify::kReasonFieldNumber;
const int CMessageFamilyMoneyChangedNotify::kRoleNameFieldNumber;
const int CMessageFamilyMoneyChangedNotify::kValueFieldNumber;
#endif  // !_MSC_VER

CMessageFamilyMoneyChangedNotify::CMessageFamilyMoneyChangedNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFamilyMoneyChangedNotify::InitAsDefaultInstance() {}

CMessageFamilyMoneyChangedNotify::CMessageFamilyMoneyChangedNotify(const CMessageFamilyMoneyChangedNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFamilyMoneyChangedNotify::SharedCtor() {
  _cached_size_ = 0;
  money_ = 0u;
  roleid_ = 0u;
  reason_ = 0u;
  rolename_ = const_cast< ::std::string*>(&_default_rolename_);
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFamilyMoneyChangedNotify::~CMessageFamilyMoneyChangedNotify() {
  SharedDtor();
}

void CMessageFamilyMoneyChangedNotify::SharedDtor() {
  if (rolename_ != &_default_rolename_) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageFamilyMoneyChangedNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFamilyMoneyChangedNotify_descriptor_;
}

const CMessageFamilyMoneyChangedNotify& CMessageFamilyMoneyChangedNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFamilyMoneyChangedNotify* CMessageFamilyMoneyChangedNotify::default_instance_ = NULL;

CMessageFamilyMoneyChangedNotify* CMessageFamilyMoneyChangedNotify::New() const {
  return new CMessageFamilyMoneyChangedNotify;
}

void CMessageFamilyMoneyChangedNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    money_ = 0u;
    roleid_ = 0u;
    reason_ = 0u;
    if (_has_bit(3)) {
      if (rolename_ != &_default_rolename_) {
        rolename_->clear();
      }
    }
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFamilyMoneyChangedNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Money = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Reason;
        break;
      }
      
      // optional uint32 Reason = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Reason:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &reason_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_RoleName;
        break;
      }
      
      // optional string RoleName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RoleName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_rolename()));
        if (input->ExpectTag(40)) goto parse_Value;
        break;
      }
      
      // optional int32 Value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Value:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &value_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageFamilyMoneyChangedNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFamilyMoneyChangedNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Money = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->money(), output);
  }
  
  // optional uint32 RoleID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->roleid(), output);
  }
  
  // optional uint32 Reason = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->reason(), output);
  }
  
  // optional string RoleName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->rolename(), output);
  }
  
  // optional int32 Value = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(5, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFamilyMoneyChangedNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Money = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->money(), target);
  }
  
  // optional uint32 RoleID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->roleid(), target);
  }
  
  // optional uint32 Reason = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->reason(), target);
  }
  
  // optional string RoleName = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->rolename(), target);
  }
  
  // optional int32 Value = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(5, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFamilyMoneyChangedNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Money = 1;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
    // optional uint32 RoleID = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 Reason = 3;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->reason());
    }
    
    // optional string RoleName = 4;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->rolename());
    }
    
    // optional int32 Value = 5;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFamilyMoneyChangedNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFamilyMoneyChangedNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFamilyMoneyChangedNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFamilyMoneyChangedNotify::MergeFrom(const CMessageFamilyMoneyChangedNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_money(from.money());
    }
    if (from._has_bit(1)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(2)) {
      set_reason(from.reason());
    }
    if (from._has_bit(3)) {
      set_rolename(from.rolename());
    }
    if (from._has_bit(4)) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFamilyMoneyChangedNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFamilyMoneyChangedNotify::CopyFrom(const CMessageFamilyMoneyChangedNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFamilyMoneyChangedNotify::Swap(CMessageFamilyMoneyChangedNotify* other) {
  if (other != this) {
    std::swap(money_, other->money_);
    std::swap(roleid_, other->roleid_);
    std::swap(reason_, other->reason_);
    std::swap(rolename_, other->rolename_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFamilyMoneyChangedNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFamilyMoneyChangedNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFamilyMoneyChangedNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFamilyMoneyChangedNotify_reflection_;
}

// ===================================================================

const ::std::string CMessageUseFamilyExpCardNotify::_default_managername_;
#ifndef _MSC_VER
const int CMessageUseFamilyExpCardNotify::kManagerNameFieldNumber;
const int CMessageUseFamilyExpCardNotify::kManagerIDFieldNumber;
const int CMessageUseFamilyExpCardNotify::kLineIDFieldNumber;
const int CMessageUseFamilyExpCardNotify::kMapIDFieldNumber;
const int CMessageUseFamilyExpCardNotify::kPosXFieldNumber;
const int CMessageUseFamilyExpCardNotify::kPosYFieldNumber;
#endif  // !_MSC_VER

CMessageUseFamilyExpCardNotify::CMessageUseFamilyExpCardNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUseFamilyExpCardNotify::InitAsDefaultInstance() {}

CMessageUseFamilyExpCardNotify::CMessageUseFamilyExpCardNotify(const CMessageUseFamilyExpCardNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUseFamilyExpCardNotify::SharedCtor() {
  _cached_size_ = 0;
  managername_ = const_cast< ::std::string*>(&_default_managername_);
  managerid_ = 0u;
  lineid_ = 0u;
  mapid_ = 0u;
  posx_ = 0u;
  posy_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUseFamilyExpCardNotify::~CMessageUseFamilyExpCardNotify() {
  SharedDtor();
}

void CMessageUseFamilyExpCardNotify::SharedDtor() {
  if (managername_ != &_default_managername_) {
    delete managername_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageUseFamilyExpCardNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUseFamilyExpCardNotify_descriptor_;
}

const CMessageUseFamilyExpCardNotify& CMessageUseFamilyExpCardNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageUseFamilyExpCardNotify* CMessageUseFamilyExpCardNotify::default_instance_ = NULL;

CMessageUseFamilyExpCardNotify* CMessageUseFamilyExpCardNotify::New() const {
  return new CMessageUseFamilyExpCardNotify;
}

void CMessageUseFamilyExpCardNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (managername_ != &_default_managername_) {
        managername_->clear();
      }
    }
    managerid_ = 0u;
    lineid_ = 0u;
    mapid_ = 0u;
    posx_ = 0u;
    posy_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUseFamilyExpCardNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string ManagerName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_managername()));
        if (input->ExpectTag(16)) goto parse_ManagerID;
        break;
      }
      
      // optional uint32 ManagerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ManagerID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &managerid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_LineID;
        break;
      }
      
      // optional uint32 LineID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lineid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_PosX;
        break;
      }
      
      // optional uint32 PosX = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosX:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posx_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_PosY;
        break;
      }
      
      // optional uint32 PosY = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posy_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUseFamilyExpCardNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUseFamilyExpCardNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string ManagerName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->managername(), output);
  }
  
  // optional uint32 ManagerID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->managerid(), output);
  }
  
  // optional uint32 LineID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->lineid(), output);
  }
  
  // optional uint32 MapID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->mapid(), output);
  }
  
  // optional uint32 PosX = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->posx(), output);
  }
  
  // optional uint32 PosY = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->posy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUseFamilyExpCardNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string ManagerName = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->managername(), target);
  }
  
  // optional uint32 ManagerID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->managerid(), target);
  }
  
  // optional uint32 LineID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->lineid(), target);
  }
  
  // optional uint32 MapID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->mapid(), target);
  }
  
  // optional uint32 PosX = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->posx(), target);
  }
  
  // optional uint32 PosY = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->posy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUseFamilyExpCardNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ManagerName = 1;
    if (has_managername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->managername());
    }
    
    // optional uint32 ManagerID = 2;
    if (has_managerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->managerid());
    }
    
    // optional uint32 LineID = 3;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lineid());
    }
    
    // optional uint32 MapID = 4;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 PosX = 5;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posx());
    }
    
    // optional uint32 PosY = 6;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posy());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUseFamilyExpCardNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUseFamilyExpCardNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUseFamilyExpCardNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUseFamilyExpCardNotify::MergeFrom(const CMessageUseFamilyExpCardNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_managername(from.managername());
    }
    if (from._has_bit(1)) {
      set_managerid(from.managerid());
    }
    if (from._has_bit(2)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(3)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(4)) {
      set_posx(from.posx());
    }
    if (from._has_bit(5)) {
      set_posy(from.posy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUseFamilyExpCardNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUseFamilyExpCardNotify::CopyFrom(const CMessageUseFamilyExpCardNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUseFamilyExpCardNotify::Swap(CMessageUseFamilyExpCardNotify* other) {
  if (other != this) {
    std::swap(managername_, other->managername_);
    std::swap(managerid_, other->managerid_);
    std::swap(lineid_, other->lineid_);
    std::swap(mapid_, other->mapid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUseFamilyExpCardNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUseFamilyExpCardNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUseFamilyExpCardNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUseFamilyExpCardNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageStartFamilyBossRequest::kHeadMsgFieldNumber;
const int CMessageStartFamilyBossRequest::kEnityIDFieldNumber;
const int CMessageStartFamilyBossRequest::kRepetionLevelFieldNumber;
const int CMessageStartFamilyBossRequest::kDateFieldNumber;
const int CMessageStartFamilyBossRequest::kMaxTimesFieldNumber;
#endif  // !_MSC_VER

CMessageStartFamilyBossRequest::CMessageStartFamilyBossRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageStartFamilyBossRequest::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageStartFamilyBossRequest::CMessageStartFamilyBossRequest(const CMessageStartFamilyBossRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageStartFamilyBossRequest::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  enityid_ = 0u;
  repetionlevel_ = 0u;
  date_ = 0u;
  maxtimes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageStartFamilyBossRequest::~CMessageStartFamilyBossRequest() {
  SharedDtor();
}

void CMessageStartFamilyBossRequest::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageStartFamilyBossRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageStartFamilyBossRequest_descriptor_;
}

const CMessageStartFamilyBossRequest& CMessageStartFamilyBossRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageStartFamilyBossRequest* CMessageStartFamilyBossRequest::default_instance_ = NULL;

CMessageStartFamilyBossRequest* CMessageStartFamilyBossRequest::New() const {
  return new CMessageStartFamilyBossRequest;
}

void CMessageStartFamilyBossRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    enityid_ = 0u;
    repetionlevel_ = 0u;
    date_ = 0u;
    maxtimes_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageStartFamilyBossRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_EnityID;
        break;
      }
      
      // optional uint32 EnityID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EnityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &enityid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_RepetionLevel;
        break;
      }
      
      // optional uint32 RepetionLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RepetionLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &repetionlevel_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Date;
        break;
      }
      
      // optional uint32 Date = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Date:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &date_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_MaxTimes;
        break;
      }
      
      // optional uint32 MaxTimes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxTimes:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxtimes_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageStartFamilyBossRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageStartFamilyBossRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 EnityID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->enityid(), output);
  }
  
  // optional uint32 RepetionLevel = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->repetionlevel(), output);
  }
  
  // optional uint32 Date = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->date(), output);
  }
  
  // optional uint32 MaxTimes = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->maxtimes(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageStartFamilyBossRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 EnityID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->enityid(), target);
  }
  
  // optional uint32 RepetionLevel = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->repetionlevel(), target);
  }
  
  // optional uint32 Date = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->date(), target);
  }
  
  // optional uint32 MaxTimes = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->maxtimes(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageStartFamilyBossRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 EnityID = 2;
    if (has_enityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->enityid());
    }
    
    // optional uint32 RepetionLevel = 3;
    if (has_repetionlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->repetionlevel());
    }
    
    // optional uint32 Date = 4;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->date());
    }
    
    // optional uint32 MaxTimes = 5;
    if (has_maxtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxtimes());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageStartFamilyBossRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageStartFamilyBossRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageStartFamilyBossRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageStartFamilyBossRequest::MergeFrom(const CMessageStartFamilyBossRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_enityid(from.enityid());
    }
    if (from._has_bit(2)) {
      set_repetionlevel(from.repetionlevel());
    }
    if (from._has_bit(3)) {
      set_date(from.date());
    }
    if (from._has_bit(4)) {
      set_maxtimes(from.maxtimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageStartFamilyBossRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageStartFamilyBossRequest::CopyFrom(const CMessageStartFamilyBossRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageStartFamilyBossRequest::Swap(CMessageStartFamilyBossRequest* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(enityid_, other->enityid_);
    std::swap(repetionlevel_, other->repetionlevel_);
    std::swap(date_, other->date_);
    std::swap(maxtimes_, other->maxtimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageStartFamilyBossRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageStartFamilyBossRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageStartFamilyBossRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageStartFamilyBossRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageMakeRoomNotify::_default_headername_;
#ifndef _MSC_VER
const int CMessageMakeRoomNotify::kHeadMsgFieldNumber;
const int CMessageMakeRoomNotify::kHeaderIDFieldNumber;
const int CMessageMakeRoomNotify::kHeaderNameFieldNumber;
#endif  // !_MSC_VER

CMessageMakeRoomNotify::CMessageMakeRoomNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageMakeRoomNotify::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageMakeRoomNotify::CMessageMakeRoomNotify(const CMessageMakeRoomNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageMakeRoomNotify::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  headerid_ = 0u;
  headername_ = const_cast< ::std::string*>(&_default_headername_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageMakeRoomNotify::~CMessageMakeRoomNotify() {
  SharedDtor();
}

void CMessageMakeRoomNotify::SharedDtor() {
  if (headername_ != &_default_headername_) {
    delete headername_;
  }
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageMakeRoomNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageMakeRoomNotify_descriptor_;
}

const CMessageMakeRoomNotify& CMessageMakeRoomNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageMakeRoomNotify* CMessageMakeRoomNotify::default_instance_ = NULL;

CMessageMakeRoomNotify* CMessageMakeRoomNotify::New() const {
  return new CMessageMakeRoomNotify;
}

void CMessageMakeRoomNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    headerid_ = 0u;
    if (_has_bit(2)) {
      if (headername_ != &_default_headername_) {
        headername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageMakeRoomNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_HeaderID;
        break;
      }
      
      // optional uint32 HeaderID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HeaderID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &headerid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_HeaderName;
        break;
      }
      
      // optional string HeaderName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_HeaderName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_headername()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageMakeRoomNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageMakeRoomNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 HeaderID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->headerid(), output);
  }
  
  // optional string HeaderName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->headername(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageMakeRoomNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 HeaderID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->headerid(), target);
  }
  
  // optional string HeaderName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->headername(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageMakeRoomNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 HeaderID = 2;
    if (has_headerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->headerid());
    }
    
    // optional string HeaderName = 3;
    if (has_headername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->headername());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageMakeRoomNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageMakeRoomNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageMakeRoomNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageMakeRoomNotify::MergeFrom(const CMessageMakeRoomNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_headerid(from.headerid());
    }
    if (from._has_bit(2)) {
      set_headername(from.headername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageMakeRoomNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMakeRoomNotify::CopyFrom(const CMessageMakeRoomNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMakeRoomNotify::Swap(CMessageMakeRoomNotify* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(headerid_, other->headerid_);
    std::swap(headername_, other->headername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageMakeRoomNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageMakeRoomNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageMakeRoomNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageMakeRoomNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageStartFamilyBossResponse::kHeadMsgFieldNumber;
const int CMessageStartFamilyBossResponse::kErrcodeFieldNumber;
#endif  // !_MSC_VER

CMessageStartFamilyBossResponse::CMessageStartFamilyBossResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageStartFamilyBossResponse::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageStartFamilyBossResponse::CMessageStartFamilyBossResponse(const CMessageStartFamilyBossResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageStartFamilyBossResponse::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageStartFamilyBossResponse::~CMessageStartFamilyBossResponse() {
  SharedDtor();
}

void CMessageStartFamilyBossResponse::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageStartFamilyBossResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageStartFamilyBossResponse_descriptor_;
}

const CMessageStartFamilyBossResponse& CMessageStartFamilyBossResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageStartFamilyBossResponse* CMessageStartFamilyBossResponse::default_instance_ = NULL;

CMessageStartFamilyBossResponse* CMessageStartFamilyBossResponse::New() const {
  return new CMessageStartFamilyBossResponse;
}

void CMessageStartFamilyBossResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageStartFamilyBossResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageStartFamilyBossResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageStartFamilyBossResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageStartFamilyBossResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageStartFamilyBossResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageStartFamilyBossResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageStartFamilyBossResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageStartFamilyBossResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageStartFamilyBossResponse::MergeFrom(const CMessageStartFamilyBossResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageStartFamilyBossResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageStartFamilyBossResponse::CopyFrom(const CMessageStartFamilyBossResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageStartFamilyBossResponse::Swap(CMessageStartFamilyBossResponse* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageStartFamilyBossResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageStartFamilyBossResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageStartFamilyBossResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageStartFamilyBossResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageEnterBossReptionRequest::kHeadMsgFieldNumber;
const int CMessageEnterBossReptionRequest::kNpcIDFieldNumber;
const int CMessageEnterBossReptionRequest::kFamilyIDFieldNumber;
#endif  // !_MSC_VER

CMessageEnterBossReptionRequest::CMessageEnterBossReptionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageEnterBossReptionRequest::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageEnterBossReptionRequest::CMessageEnterBossReptionRequest(const CMessageEnterBossReptionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageEnterBossReptionRequest::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  npcid_ = 0u;
  familyid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageEnterBossReptionRequest::~CMessageEnterBossReptionRequest() {
  SharedDtor();
}

void CMessageEnterBossReptionRequest::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageEnterBossReptionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageEnterBossReptionRequest_descriptor_;
}

const CMessageEnterBossReptionRequest& CMessageEnterBossReptionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageEnterBossReptionRequest* CMessageEnterBossReptionRequest::default_instance_ = NULL;

CMessageEnterBossReptionRequest* CMessageEnterBossReptionRequest::New() const {
  return new CMessageEnterBossReptionRequest;
}

void CMessageEnterBossReptionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    npcid_ = 0u;
    familyid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageEnterBossReptionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_NpcID;
        break;
      }
      
      // optional uint32 NpcID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_FamilyID;
        break;
      }
      
      // optional uint32 FamilyID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageEnterBossReptionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageEnterBossReptionRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 NpcID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->npcid(), output);
  }
  
  // optional uint32 FamilyID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->familyid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageEnterBossReptionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 NpcID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->npcid(), target);
  }
  
  // optional uint32 FamilyID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->familyid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageEnterBossReptionRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 NpcID = 2;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
    // optional uint32 FamilyID = 3;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageEnterBossReptionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageEnterBossReptionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageEnterBossReptionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageEnterBossReptionRequest::MergeFrom(const CMessageEnterBossReptionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_npcid(from.npcid());
    }
    if (from._has_bit(2)) {
      set_familyid(from.familyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageEnterBossReptionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageEnterBossReptionRequest::CopyFrom(const CMessageEnterBossReptionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageEnterBossReptionRequest::Swap(CMessageEnterBossReptionRequest* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(npcid_, other->npcid_);
    std::swap(familyid_, other->familyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageEnterBossReptionRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageEnterBossReptionRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageEnterBossReptionRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageEnterBossReptionRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageEnterBossReptionResponse::kHeadMsgFieldNumber;
const int CMessageEnterBossReptionResponse::kErrcodeFieldNumber;
#endif  // !_MSC_VER

CMessageEnterBossReptionResponse::CMessageEnterBossReptionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageEnterBossReptionResponse::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageEnterBossReptionResponse::CMessageEnterBossReptionResponse(const CMessageEnterBossReptionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageEnterBossReptionResponse::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageEnterBossReptionResponse::~CMessageEnterBossReptionResponse() {
  SharedDtor();
}

void CMessageEnterBossReptionResponse::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageEnterBossReptionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageEnterBossReptionResponse_descriptor_;
}

const CMessageEnterBossReptionResponse& CMessageEnterBossReptionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageEnterBossReptionResponse* CMessageEnterBossReptionResponse::default_instance_ = NULL;

CMessageEnterBossReptionResponse* CMessageEnterBossReptionResponse::New() const {
  return new CMessageEnterBossReptionResponse;
}

void CMessageEnterBossReptionResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageEnterBossReptionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageEnterBossReptionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageEnterBossReptionResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageEnterBossReptionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageEnterBossReptionResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageEnterBossReptionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageEnterBossReptionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageEnterBossReptionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageEnterBossReptionResponse::MergeFrom(const CMessageEnterBossReptionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageEnterBossReptionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageEnterBossReptionResponse::CopyFrom(const CMessageEnterBossReptionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageEnterBossReptionResponse::Swap(CMessageEnterBossReptionResponse* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageEnterBossReptionResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageEnterBossReptionResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageEnterBossReptionResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageEnterBossReptionResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageAbortRoomNotify::_default_headername_;
#ifndef _MSC_VER
const int CMessageAbortRoomNotify::kHeadMsgFieldNumber;
const int CMessageAbortRoomNotify::kHeaderIDFieldNumber;
const int CMessageAbortRoomNotify::kHeaderNameFieldNumber;
#endif  // !_MSC_VER

CMessageAbortRoomNotify::CMessageAbortRoomNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageAbortRoomNotify::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageAbortRoomNotify::CMessageAbortRoomNotify(const CMessageAbortRoomNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageAbortRoomNotify::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  headerid_ = 0u;
  headername_ = const_cast< ::std::string*>(&_default_headername_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageAbortRoomNotify::~CMessageAbortRoomNotify() {
  SharedDtor();
}

void CMessageAbortRoomNotify::SharedDtor() {
  if (headername_ != &_default_headername_) {
    delete headername_;
  }
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageAbortRoomNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageAbortRoomNotify_descriptor_;
}

const CMessageAbortRoomNotify& CMessageAbortRoomNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageAbortRoomNotify* CMessageAbortRoomNotify::default_instance_ = NULL;

CMessageAbortRoomNotify* CMessageAbortRoomNotify::New() const {
  return new CMessageAbortRoomNotify;
}

void CMessageAbortRoomNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    headerid_ = 0u;
    if (_has_bit(2)) {
      if (headername_ != &_default_headername_) {
        headername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageAbortRoomNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_HeaderID;
        break;
      }
      
      // optional uint32 HeaderID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HeaderID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &headerid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_HeaderName;
        break;
      }
      
      // optional string HeaderName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_HeaderName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_headername()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageAbortRoomNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageAbortRoomNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 HeaderID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->headerid(), output);
  }
  
  // optional string HeaderName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->headername(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageAbortRoomNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 HeaderID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->headerid(), target);
  }
  
  // optional string HeaderName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->headername(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageAbortRoomNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 HeaderID = 2;
    if (has_headerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->headerid());
    }
    
    // optional string HeaderName = 3;
    if (has_headername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->headername());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageAbortRoomNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageAbortRoomNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageAbortRoomNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageAbortRoomNotify::MergeFrom(const CMessageAbortRoomNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_headerid(from.headerid());
    }
    if (from._has_bit(2)) {
      set_headername(from.headername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageAbortRoomNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAbortRoomNotify::CopyFrom(const CMessageAbortRoomNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAbortRoomNotify::Swap(CMessageAbortRoomNotify* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(headerid_, other->headerid_);
    std::swap(headername_, other->headername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageAbortRoomNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageAbortRoomNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageAbortRoomNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageAbortRoomNotify_reflection_;
}

// ===================================================================

const ::std::string CMessageChaRoomNotify::_default_srcfamilyname_;
const ::std::string CMessageChaRoomNotify::_default_srcheadername_;
const ::std::string CMessageChaRoomNotify::_default_desfamilyname_;
const ::std::string CMessageChaRoomNotify::_default_desheadername_;
#ifndef _MSC_VER
const int CMessageChaRoomNotify::kHeadMsgFieldNumber;
const int CMessageChaRoomNotify::kSrcFamilyIDFieldNumber;
const int CMessageChaRoomNotify::kSrcFamilyNameFieldNumber;
const int CMessageChaRoomNotify::kSrcHeaderIDFieldNumber;
const int CMessageChaRoomNotify::kSrcHeaderNameFieldNumber;
const int CMessageChaRoomNotify::kDesFamilyIDFieldNumber;
const int CMessageChaRoomNotify::kDesFamilyNameFieldNumber;
const int CMessageChaRoomNotify::kDesHeaderIDFieldNumber;
const int CMessageChaRoomNotify::kDesHeaderNameFieldNumber;
const int CMessageChaRoomNotify::kSrcWinFieldNumber;
const int CMessageChaRoomNotify::kSrcLostFieldNumber;
#endif  // !_MSC_VER

CMessageChaRoomNotify::CMessageChaRoomNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChaRoomNotify::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageChaRoomNotify::CMessageChaRoomNotify(const CMessageChaRoomNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChaRoomNotify::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  srcfamilyid_ = 0u;
  srcfamilyname_ = const_cast< ::std::string*>(&_default_srcfamilyname_);
  srcheaderid_ = 0u;
  srcheadername_ = const_cast< ::std::string*>(&_default_srcheadername_);
  desfamilyid_ = 0u;
  desfamilyname_ = const_cast< ::std::string*>(&_default_desfamilyname_);
  desheaderid_ = 0u;
  desheadername_ = const_cast< ::std::string*>(&_default_desheadername_);
  srcwin_ = 0u;
  srclost_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChaRoomNotify::~CMessageChaRoomNotify() {
  SharedDtor();
}

void CMessageChaRoomNotify::SharedDtor() {
  if (srcfamilyname_ != &_default_srcfamilyname_) {
    delete srcfamilyname_;
  }
  if (srcheadername_ != &_default_srcheadername_) {
    delete srcheadername_;
  }
  if (desfamilyname_ != &_default_desfamilyname_) {
    delete desfamilyname_;
  }
  if (desheadername_ != &_default_desheadername_) {
    delete desheadername_;
  }
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageChaRoomNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChaRoomNotify_descriptor_;
}

const CMessageChaRoomNotify& CMessageChaRoomNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChaRoomNotify* CMessageChaRoomNotify::default_instance_ = NULL;

CMessageChaRoomNotify* CMessageChaRoomNotify::New() const {
  return new CMessageChaRoomNotify;
}

void CMessageChaRoomNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    srcfamilyid_ = 0u;
    if (_has_bit(2)) {
      if (srcfamilyname_ != &_default_srcfamilyname_) {
        srcfamilyname_->clear();
      }
    }
    srcheaderid_ = 0u;
    if (_has_bit(4)) {
      if (srcheadername_ != &_default_srcheadername_) {
        srcheadername_->clear();
      }
    }
    desfamilyid_ = 0u;
    if (_has_bit(6)) {
      if (desfamilyname_ != &_default_desfamilyname_) {
        desfamilyname_->clear();
      }
    }
    desheaderid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (desheadername_ != &_default_desheadername_) {
        desheadername_->clear();
      }
    }
    srcwin_ = 0u;
    srclost_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChaRoomNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_SrcFamilyID;
        break;
      }
      
      // optional uint32 SrcFamilyID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SrcFamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srcfamilyid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_SrcFamilyName;
        break;
      }
      
      // optional string SrcFamilyName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SrcFamilyName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_srcfamilyname()));
        if (input->ExpectTag(32)) goto parse_SrcHeaderID;
        break;
      }
      
      // optional uint32 SrcHeaderID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SrcHeaderID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srcheaderid_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_SrcHeaderName;
        break;
      }
      
      // optional string SrcHeaderName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SrcHeaderName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_srcheadername()));
        if (input->ExpectTag(48)) goto parse_DesFamilyID;
        break;
      }
      
      // optional uint32 DesFamilyID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DesFamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &desfamilyid_));
        _set_bit(5);
        if (input->ExpectTag(58)) goto parse_DesFamilyName;
        break;
      }
      
      // optional string DesFamilyName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_DesFamilyName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_desfamilyname()));
        if (input->ExpectTag(64)) goto parse_DesHeaderID;
        break;
      }
      
      // optional uint32 DesHeaderID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DesHeaderID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &desheaderid_));
        _set_bit(7);
        if (input->ExpectTag(74)) goto parse_DesHeaderName;
        break;
      }
      
      // optional string DesHeaderName = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_DesHeaderName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_desheadername()));
        if (input->ExpectTag(80)) goto parse_SrcWin;
        break;
      }
      
      // optional uint32 SrcWin = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SrcWin:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srcwin_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_SrcLost;
        break;
      }
      
      // optional uint32 SrcLost = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SrcLost:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srclost_));
        _set_bit(10);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChaRoomNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChaRoomNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 SrcFamilyID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->srcfamilyid(), output);
  }
  
  // optional string SrcFamilyName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->srcfamilyname(), output);
  }
  
  // optional uint32 SrcHeaderID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->srcheaderid(), output);
  }
  
  // optional string SrcHeaderName = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->srcheadername(), output);
  }
  
  // optional uint32 DesFamilyID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->desfamilyid(), output);
  }
  
  // optional string DesFamilyName = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteString(7, this->desfamilyname(), output);
  }
  
  // optional uint32 DesHeaderID = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->desheaderid(), output);
  }
  
  // optional string DesHeaderName = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteString(9, this->desheadername(), output);
  }
  
  // optional uint32 SrcWin = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->srcwin(), output);
  }
  
  // optional uint32 SrcLost = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->srclost(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChaRoomNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 SrcFamilyID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->srcfamilyid(), target);
  }
  
  // optional string SrcFamilyName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->srcfamilyname(), target);
  }
  
  // optional uint32 SrcHeaderID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->srcheaderid(), target);
  }
  
  // optional string SrcHeaderName = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->srcheadername(), target);
  }
  
  // optional uint32 DesFamilyID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->desfamilyid(), target);
  }
  
  // optional string DesFamilyName = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(7, this->desfamilyname(), target);
  }
  
  // optional uint32 DesHeaderID = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->desheaderid(), target);
  }
  
  // optional string DesHeaderName = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(9, this->desheadername(), target);
  }
  
  // optional uint32 SrcWin = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->srcwin(), target);
  }
  
  // optional uint32 SrcLost = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->srclost(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChaRoomNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 SrcFamilyID = 2;
    if (has_srcfamilyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srcfamilyid());
    }
    
    // optional string SrcFamilyName = 3;
    if (has_srcfamilyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->srcfamilyname());
    }
    
    // optional uint32 SrcHeaderID = 4;
    if (has_srcheaderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srcheaderid());
    }
    
    // optional string SrcHeaderName = 5;
    if (has_srcheadername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->srcheadername());
    }
    
    // optional uint32 DesFamilyID = 6;
    if (has_desfamilyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->desfamilyid());
    }
    
    // optional string DesFamilyName = 7;
    if (has_desfamilyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->desfamilyname());
    }
    
    // optional uint32 DesHeaderID = 8;
    if (has_desheaderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->desheaderid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string DesHeaderName = 9;
    if (has_desheadername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->desheadername());
    }
    
    // optional uint32 SrcWin = 10;
    if (has_srcwin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srcwin());
    }
    
    // optional uint32 SrcLost = 11;
    if (has_srclost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srclost());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChaRoomNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChaRoomNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChaRoomNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChaRoomNotify::MergeFrom(const CMessageChaRoomNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_srcfamilyid(from.srcfamilyid());
    }
    if (from._has_bit(2)) {
      set_srcfamilyname(from.srcfamilyname());
    }
    if (from._has_bit(3)) {
      set_srcheaderid(from.srcheaderid());
    }
    if (from._has_bit(4)) {
      set_srcheadername(from.srcheadername());
    }
    if (from._has_bit(5)) {
      set_desfamilyid(from.desfamilyid());
    }
    if (from._has_bit(6)) {
      set_desfamilyname(from.desfamilyname());
    }
    if (from._has_bit(7)) {
      set_desheaderid(from.desheaderid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_desheadername(from.desheadername());
    }
    if (from._has_bit(9)) {
      set_srcwin(from.srcwin());
    }
    if (from._has_bit(10)) {
      set_srclost(from.srclost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChaRoomNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChaRoomNotify::CopyFrom(const CMessageChaRoomNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChaRoomNotify::Swap(CMessageChaRoomNotify* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(srcfamilyid_, other->srcfamilyid_);
    std::swap(srcfamilyname_, other->srcfamilyname_);
    std::swap(srcheaderid_, other->srcheaderid_);
    std::swap(srcheadername_, other->srcheadername_);
    std::swap(desfamilyid_, other->desfamilyid_);
    std::swap(desfamilyname_, other->desfamilyname_);
    std::swap(desheaderid_, other->desheaderid_);
    std::swap(desheadername_, other->desheadername_);
    std::swap(srcwin_, other->srcwin_);
    std::swap(srclost_, other->srclost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChaRoomNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChaRoomNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChaRoomNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChaRoomNotify_reflection_;
}

// ===================================================================

const ::std::string CMessageAbortChaNotify::_default_srcfamilyname_;
const ::std::string CMessageAbortChaNotify::_default_desfamilyname_;
const ::std::string CMessageAbortChaNotify::_default_headername_;
const ::std::string CMessageAbortChaNotify::_default_managername_;
#ifndef _MSC_VER
const int CMessageAbortChaNotify::kHeadMsgFieldNumber;
const int CMessageAbortChaNotify::kSrcFamilyIDFieldNumber;
const int CMessageAbortChaNotify::kSrcFamilyNameFieldNumber;
const int CMessageAbortChaNotify::kDesFamilyIDFieldNumber;
const int CMessageAbortChaNotify::kDesFamilyNameFieldNumber;
const int CMessageAbortChaNotify::kHeaderNameFieldNumber;
const int CMessageAbortChaNotify::kManagerIDFieldNumber;
const int CMessageAbortChaNotify::kManagerNameFieldNumber;
#endif  // !_MSC_VER

CMessageAbortChaNotify::CMessageAbortChaNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageAbortChaNotify::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageAbortChaNotify::CMessageAbortChaNotify(const CMessageAbortChaNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageAbortChaNotify::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  srcfamilyid_ = 0u;
  srcfamilyname_ = const_cast< ::std::string*>(&_default_srcfamilyname_);
  desfamilyid_ = 0u;
  desfamilyname_ = const_cast< ::std::string*>(&_default_desfamilyname_);
  headername_ = const_cast< ::std::string*>(&_default_headername_);
  managerid_ = 0u;
  managername_ = const_cast< ::std::string*>(&_default_managername_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageAbortChaNotify::~CMessageAbortChaNotify() {
  SharedDtor();
}

void CMessageAbortChaNotify::SharedDtor() {
  if (srcfamilyname_ != &_default_srcfamilyname_) {
    delete srcfamilyname_;
  }
  if (desfamilyname_ != &_default_desfamilyname_) {
    delete desfamilyname_;
  }
  if (headername_ != &_default_headername_) {
    delete headername_;
  }
  if (managername_ != &_default_managername_) {
    delete managername_;
  }
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageAbortChaNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageAbortChaNotify_descriptor_;
}

const CMessageAbortChaNotify& CMessageAbortChaNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageAbortChaNotify* CMessageAbortChaNotify::default_instance_ = NULL;

CMessageAbortChaNotify* CMessageAbortChaNotify::New() const {
  return new CMessageAbortChaNotify;
}

void CMessageAbortChaNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    srcfamilyid_ = 0u;
    if (_has_bit(2)) {
      if (srcfamilyname_ != &_default_srcfamilyname_) {
        srcfamilyname_->clear();
      }
    }
    desfamilyid_ = 0u;
    if (_has_bit(4)) {
      if (desfamilyname_ != &_default_desfamilyname_) {
        desfamilyname_->clear();
      }
    }
    if (_has_bit(5)) {
      if (headername_ != &_default_headername_) {
        headername_->clear();
      }
    }
    managerid_ = 0u;
    if (_has_bit(7)) {
      if (managername_ != &_default_managername_) {
        managername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageAbortChaNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_SrcFamilyID;
        break;
      }
      
      // optional uint32 SrcFamilyID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SrcFamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srcfamilyid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_SrcFamilyName;
        break;
      }
      
      // optional string SrcFamilyName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SrcFamilyName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_srcfamilyname()));
        if (input->ExpectTag(32)) goto parse_DesFamilyID;
        break;
      }
      
      // optional uint32 DesFamilyID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DesFamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &desfamilyid_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_DesFamilyName;
        break;
      }
      
      // optional string DesFamilyName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_DesFamilyName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_desfamilyname()));
        if (input->ExpectTag(50)) goto parse_HeaderName;
        break;
      }
      
      // optional string HeaderName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_HeaderName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_headername()));
        if (input->ExpectTag(56)) goto parse_ManagerID;
        break;
      }
      
      // optional uint32 ManagerID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ManagerID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &managerid_));
        _set_bit(6);
        if (input->ExpectTag(66)) goto parse_ManagerName;
        break;
      }
      
      // optional string ManagerName = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ManagerName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_managername()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageAbortChaNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageAbortChaNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 SrcFamilyID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->srcfamilyid(), output);
  }
  
  // optional string SrcFamilyName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->srcfamilyname(), output);
  }
  
  // optional uint32 DesFamilyID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->desfamilyid(), output);
  }
  
  // optional string DesFamilyName = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->desfamilyname(), output);
  }
  
  // optional string HeaderName = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteString(6, this->headername(), output);
  }
  
  // optional uint32 ManagerID = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->managerid(), output);
  }
  
  // optional string ManagerName = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteString(8, this->managername(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageAbortChaNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 SrcFamilyID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->srcfamilyid(), target);
  }
  
  // optional string SrcFamilyName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->srcfamilyname(), target);
  }
  
  // optional uint32 DesFamilyID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->desfamilyid(), target);
  }
  
  // optional string DesFamilyName = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->desfamilyname(), target);
  }
  
  // optional string HeaderName = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(6, this->headername(), target);
  }
  
  // optional uint32 ManagerID = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->managerid(), target);
  }
  
  // optional string ManagerName = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(8, this->managername(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageAbortChaNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 SrcFamilyID = 2;
    if (has_srcfamilyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srcfamilyid());
    }
    
    // optional string SrcFamilyName = 3;
    if (has_srcfamilyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->srcfamilyname());
    }
    
    // optional uint32 DesFamilyID = 4;
    if (has_desfamilyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->desfamilyid());
    }
    
    // optional string DesFamilyName = 5;
    if (has_desfamilyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->desfamilyname());
    }
    
    // optional string HeaderName = 6;
    if (has_headername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->headername());
    }
    
    // optional uint32 ManagerID = 7;
    if (has_managerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->managerid());
    }
    
    // optional string ManagerName = 8;
    if (has_managername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->managername());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageAbortChaNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageAbortChaNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageAbortChaNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageAbortChaNotify::MergeFrom(const CMessageAbortChaNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_srcfamilyid(from.srcfamilyid());
    }
    if (from._has_bit(2)) {
      set_srcfamilyname(from.srcfamilyname());
    }
    if (from._has_bit(3)) {
      set_desfamilyid(from.desfamilyid());
    }
    if (from._has_bit(4)) {
      set_desfamilyname(from.desfamilyname());
    }
    if (from._has_bit(5)) {
      set_headername(from.headername());
    }
    if (from._has_bit(6)) {
      set_managerid(from.managerid());
    }
    if (from._has_bit(7)) {
      set_managername(from.managername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageAbortChaNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAbortChaNotify::CopyFrom(const CMessageAbortChaNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAbortChaNotify::Swap(CMessageAbortChaNotify* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(srcfamilyid_, other->srcfamilyid_);
    std::swap(srcfamilyname_, other->srcfamilyname_);
    std::swap(desfamilyid_, other->desfamilyid_);
    std::swap(desfamilyname_, other->desfamilyname_);
    std::swap(headername_, other->headername_);
    std::swap(managerid_, other->managerid_);
    std::swap(managername_, other->managername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageAbortChaNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageAbortChaNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageAbortChaNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageAbortChaNotify_reflection_;
}

// ===================================================================

const ::std::string CMessageFamilyGloryChangedNotify::_default_rolename_;
#ifndef _MSC_VER
const int CMessageFamilyGloryChangedNotify::kHeadMsgFieldNumber;
const int CMessageFamilyGloryChangedNotify::kGloryFieldNumber;
const int CMessageFamilyGloryChangedNotify::kRoleIDFieldNumber;
const int CMessageFamilyGloryChangedNotify::kReasonFieldNumber;
const int CMessageFamilyGloryChangedNotify::kRoleNameFieldNumber;
const int CMessageFamilyGloryChangedNotify::kValueFieldNumber;
#endif  // !_MSC_VER

CMessageFamilyGloryChangedNotify::CMessageFamilyGloryChangedNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFamilyGloryChangedNotify::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageFamilyGloryChangedNotify::CMessageFamilyGloryChangedNotify(const CMessageFamilyGloryChangedNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFamilyGloryChangedNotify::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  glory_ = 0u;
  roleid_ = 0u;
  reason_ = 0u;
  rolename_ = const_cast< ::std::string*>(&_default_rolename_);
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFamilyGloryChangedNotify::~CMessageFamilyGloryChangedNotify() {
  SharedDtor();
}

void CMessageFamilyGloryChangedNotify::SharedDtor() {
  if (rolename_ != &_default_rolename_) {
    delete rolename_;
  }
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageFamilyGloryChangedNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFamilyGloryChangedNotify_descriptor_;
}

const CMessageFamilyGloryChangedNotify& CMessageFamilyGloryChangedNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFamilyGloryChangedNotify* CMessageFamilyGloryChangedNotify::default_instance_ = NULL;

CMessageFamilyGloryChangedNotify* CMessageFamilyGloryChangedNotify::New() const {
  return new CMessageFamilyGloryChangedNotify;
}

void CMessageFamilyGloryChangedNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    glory_ = 0u;
    roleid_ = 0u;
    reason_ = 0u;
    if (_has_bit(4)) {
      if (rolename_ != &_default_rolename_) {
        rolename_->clear();
      }
    }
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFamilyGloryChangedNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_Glory;
        break;
      }
      
      // optional uint32 Glory = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Glory:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &glory_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Reason;
        break;
      }
      
      // optional uint32 Reason = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Reason:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &reason_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_RoleName;
        break;
      }
      
      // optional string RoleName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RoleName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_rolename()));
        if (input->ExpectTag(48)) goto parse_Value;
        break;
      }
      
      // optional int32 Value = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Value:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &value_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageFamilyGloryChangedNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFamilyGloryChangedNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 Glory = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->glory(), output);
  }
  
  // optional uint32 RoleID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->roleid(), output);
  }
  
  // optional uint32 Reason = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->reason(), output);
  }
  
  // optional string RoleName = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->rolename(), output);
  }
  
  // optional int32 Value = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(6, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFamilyGloryChangedNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 Glory = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->glory(), target);
  }
  
  // optional uint32 RoleID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->roleid(), target);
  }
  
  // optional uint32 Reason = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->reason(), target);
  }
  
  // optional string RoleName = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->rolename(), target);
  }
  
  // optional int32 Value = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(6, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFamilyGloryChangedNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 Glory = 2;
    if (has_glory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->glory());
    }
    
    // optional uint32 RoleID = 3;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 Reason = 4;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->reason());
    }
    
    // optional string RoleName = 5;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->rolename());
    }
    
    // optional int32 Value = 6;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFamilyGloryChangedNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFamilyGloryChangedNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFamilyGloryChangedNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFamilyGloryChangedNotify::MergeFrom(const CMessageFamilyGloryChangedNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_glory(from.glory());
    }
    if (from._has_bit(2)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(3)) {
      set_reason(from.reason());
    }
    if (from._has_bit(4)) {
      set_rolename(from.rolename());
    }
    if (from._has_bit(5)) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFamilyGloryChangedNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFamilyGloryChangedNotify::CopyFrom(const CMessageFamilyGloryChangedNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFamilyGloryChangedNotify::Swap(CMessageFamilyGloryChangedNotify* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(glory_, other->glory_);
    std::swap(roleid_, other->roleid_);
    std::swap(reason_, other->reason_);
    std::swap(rolename_, other->rolename_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFamilyGloryChangedNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFamilyGloryChangedNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFamilyGloryChangedNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFamilyGloryChangedNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageMemberContributeChangedNotify::kHeadMsgFieldNumber;
const int CMessageMemberContributeChangedNotify::kContributeFieldNumber;
const int CMessageMemberContributeChangedNotify::kRoleIDFieldNumber;
const int CMessageMemberContributeChangedNotify::kValueFieldNumber;
#endif  // !_MSC_VER

CMessageMemberContributeChangedNotify::CMessageMemberContributeChangedNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageMemberContributeChangedNotify::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageMemberContributeChangedNotify::CMessageMemberContributeChangedNotify(const CMessageMemberContributeChangedNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageMemberContributeChangedNotify::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  contribute_ = 0u;
  roleid_ = 0u;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageMemberContributeChangedNotify::~CMessageMemberContributeChangedNotify() {
  SharedDtor();
}

void CMessageMemberContributeChangedNotify::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageMemberContributeChangedNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageMemberContributeChangedNotify_descriptor_;
}

const CMessageMemberContributeChangedNotify& CMessageMemberContributeChangedNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageMemberContributeChangedNotify* CMessageMemberContributeChangedNotify::default_instance_ = NULL;

CMessageMemberContributeChangedNotify* CMessageMemberContributeChangedNotify::New() const {
  return new CMessageMemberContributeChangedNotify;
}

void CMessageMemberContributeChangedNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    contribute_ = 0u;
    roleid_ = 0u;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageMemberContributeChangedNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_Contribute;
        break;
      }
      
      // optional uint32 Contribute = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Contribute:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &contribute_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Value;
        break;
      }
      
      // optional int32 Value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Value:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &value_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageMemberContributeChangedNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageMemberContributeChangedNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 Contribute = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->contribute(), output);
  }
  
  // optional uint32 RoleID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->roleid(), output);
  }
  
  // optional int32 Value = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageMemberContributeChangedNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 Contribute = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->contribute(), target);
  }
  
  // optional uint32 RoleID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->roleid(), target);
  }
  
  // optional int32 Value = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageMemberContributeChangedNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 Contribute = 2;
    if (has_contribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->contribute());
    }
    
    // optional uint32 RoleID = 3;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional int32 Value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageMemberContributeChangedNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageMemberContributeChangedNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageMemberContributeChangedNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageMemberContributeChangedNotify::MergeFrom(const CMessageMemberContributeChangedNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_contribute(from.contribute());
    }
    if (from._has_bit(2)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(3)) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageMemberContributeChangedNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMemberContributeChangedNotify::CopyFrom(const CMessageMemberContributeChangedNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMemberContributeChangedNotify::Swap(CMessageMemberContributeChangedNotify* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(contribute_, other->contribute_);
    std::swap(roleid_, other->roleid_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageMemberContributeChangedNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageMemberContributeChangedNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageMemberContributeChangedNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageMemberContributeChangedNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageQueryNpcWelfareRequest::kHeadMsgFieldNumber;
const int CMessageQueryNpcWelfareRequest::kEntityIDFieldNumber;
const int CMessageQueryNpcWelfareRequest::kNpcTmpIDFieldNumber;
#endif  // !_MSC_VER

CMessageQueryNpcWelfareRequest::CMessageQueryNpcWelfareRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageQueryNpcWelfareRequest::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageQueryNpcWelfareRequest::CMessageQueryNpcWelfareRequest(const CMessageQueryNpcWelfareRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageQueryNpcWelfareRequest::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  entityid_ = 0u;
  npctmpid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageQueryNpcWelfareRequest::~CMessageQueryNpcWelfareRequest() {
  SharedDtor();
}

void CMessageQueryNpcWelfareRequest::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageQueryNpcWelfareRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryNpcWelfareRequest_descriptor_;
}

const CMessageQueryNpcWelfareRequest& CMessageQueryNpcWelfareRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageQueryNpcWelfareRequest* CMessageQueryNpcWelfareRequest::default_instance_ = NULL;

CMessageQueryNpcWelfareRequest* CMessageQueryNpcWelfareRequest::New() const {
  return new CMessageQueryNpcWelfareRequest;
}

void CMessageQueryNpcWelfareRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    entityid_ = 0u;
    npctmpid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageQueryNpcWelfareRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_EntityID;
        break;
      }
      
      // optional uint32 EntityID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_NpcTmpID;
        break;
      }
      
      // optional uint32 NpcTmpID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcTmpID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npctmpid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageQueryNpcWelfareRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageQueryNpcWelfareRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 EntityID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->entityid(), output);
  }
  
  // optional uint32 NpcTmpID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->npctmpid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageQueryNpcWelfareRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 EntityID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->entityid(), target);
  }
  
  // optional uint32 NpcTmpID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->npctmpid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageQueryNpcWelfareRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 EntityID = 2;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
    // optional uint32 NpcTmpID = 3;
    if (has_npctmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npctmpid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageQueryNpcWelfareRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageQueryNpcWelfareRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageQueryNpcWelfareRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageQueryNpcWelfareRequest::MergeFrom(const CMessageQueryNpcWelfareRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_entityid(from.entityid());
    }
    if (from._has_bit(2)) {
      set_npctmpid(from.npctmpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageQueryNpcWelfareRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryNpcWelfareRequest::CopyFrom(const CMessageQueryNpcWelfareRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryNpcWelfareRequest::Swap(CMessageQueryNpcWelfareRequest* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(entityid_, other->entityid_);
    std::swap(npctmpid_, other->npctmpid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageQueryNpcWelfareRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageQueryNpcWelfareRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageQueryNpcWelfareRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryNpcWelfareRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageQueryNpcWelfareResponse::kHeadMsgFieldNumber;
const int CMessageQueryNpcWelfareResponse::kMoneyFieldNumber;
const int CMessageQueryNpcWelfareResponse::kGloryFieldNumber;
const int CMessageQueryNpcWelfareResponse::kErrcodeFieldNumber;
#endif  // !_MSC_VER

CMessageQueryNpcWelfareResponse::CMessageQueryNpcWelfareResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageQueryNpcWelfareResponse::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageQueryNpcWelfareResponse::CMessageQueryNpcWelfareResponse(const CMessageQueryNpcWelfareResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageQueryNpcWelfareResponse::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  money_ = 0u;
  glory_ = 0u;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageQueryNpcWelfareResponse::~CMessageQueryNpcWelfareResponse() {
  SharedDtor();
}

void CMessageQueryNpcWelfareResponse::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageQueryNpcWelfareResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryNpcWelfareResponse_descriptor_;
}

const CMessageQueryNpcWelfareResponse& CMessageQueryNpcWelfareResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageQueryNpcWelfareResponse* CMessageQueryNpcWelfareResponse::default_instance_ = NULL;

CMessageQueryNpcWelfareResponse* CMessageQueryNpcWelfareResponse::New() const {
  return new CMessageQueryNpcWelfareResponse;
}

void CMessageQueryNpcWelfareResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    money_ = 0u;
    glory_ = 0u;
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageQueryNpcWelfareResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_Money;
        break;
      }
      
      // optional uint32 Money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Glory;
        break;
      }
      
      // optional uint32 Glory = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Glory:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &glory_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageQueryNpcWelfareResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageQueryNpcWelfareResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 Money = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->money(), output);
  }
  
  // optional uint32 Glory = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->glory(), output);
  }
  
  // optional uint32 Errcode = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageQueryNpcWelfareResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 Money = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->money(), target);
  }
  
  // optional uint32 Glory = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->glory(), target);
  }
  
  // optional uint32 Errcode = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageQueryNpcWelfareResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 Money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
    // optional uint32 Glory = 3;
    if (has_glory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->glory());
    }
    
    // optional uint32 Errcode = 4;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageQueryNpcWelfareResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageQueryNpcWelfareResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageQueryNpcWelfareResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageQueryNpcWelfareResponse::MergeFrom(const CMessageQueryNpcWelfareResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_money(from.money());
    }
    if (from._has_bit(2)) {
      set_glory(from.glory());
    }
    if (from._has_bit(3)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageQueryNpcWelfareResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryNpcWelfareResponse::CopyFrom(const CMessageQueryNpcWelfareResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryNpcWelfareResponse::Swap(CMessageQueryNpcWelfareResponse* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(money_, other->money_);
    std::swap(glory_, other->glory_);
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageQueryNpcWelfareResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageQueryNpcWelfareResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageQueryNpcWelfareResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryNpcWelfareResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetFamilyMoneyRequest::kHeadMsgFieldNumber;
const int CMessageGetFamilyMoneyRequest::kFamilyMoneyFieldNumber;
#endif  // !_MSC_VER

CMessageGetFamilyMoneyRequest::CMessageGetFamilyMoneyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetFamilyMoneyRequest::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageGetFamilyMoneyRequest::CMessageGetFamilyMoneyRequest(const CMessageGetFamilyMoneyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetFamilyMoneyRequest::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  familymoney_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetFamilyMoneyRequest::~CMessageGetFamilyMoneyRequest() {
  SharedDtor();
}

void CMessageGetFamilyMoneyRequest::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageGetFamilyMoneyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetFamilyMoneyRequest_descriptor_;
}

const CMessageGetFamilyMoneyRequest& CMessageGetFamilyMoneyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetFamilyMoneyRequest* CMessageGetFamilyMoneyRequest::default_instance_ = NULL;

CMessageGetFamilyMoneyRequest* CMessageGetFamilyMoneyRequest::New() const {
  return new CMessageGetFamilyMoneyRequest;
}

void CMessageGetFamilyMoneyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    familymoney_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetFamilyMoneyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_FamilyMoney;
        break;
      }
      
      // optional uint32 FamilyMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familymoney_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetFamilyMoneyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetFamilyMoneyRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 FamilyMoney = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->familymoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetFamilyMoneyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 FamilyMoney = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->familymoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetFamilyMoneyRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 FamilyMoney = 2;
    if (has_familymoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familymoney());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetFamilyMoneyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetFamilyMoneyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetFamilyMoneyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetFamilyMoneyRequest::MergeFrom(const CMessageGetFamilyMoneyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_familymoney(from.familymoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetFamilyMoneyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetFamilyMoneyRequest::CopyFrom(const CMessageGetFamilyMoneyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetFamilyMoneyRequest::Swap(CMessageGetFamilyMoneyRequest* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(familymoney_, other->familymoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetFamilyMoneyRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetFamilyMoneyRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetFamilyMoneyRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetFamilyMoneyRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetFamilyMoneyResponse::kHeadMsgFieldNumber;
const int CMessageGetFamilyMoneyResponse::kErrcodeFieldNumber;
const int CMessageGetFamilyMoneyResponse::kFamilyMoneyFieldNumber;
#endif  // !_MSC_VER

CMessageGetFamilyMoneyResponse::CMessageGetFamilyMoneyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetFamilyMoneyResponse::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageGetFamilyMoneyResponse::CMessageGetFamilyMoneyResponse(const CMessageGetFamilyMoneyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetFamilyMoneyResponse::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  errcode_ = 0u;
  familymoney_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetFamilyMoneyResponse::~CMessageGetFamilyMoneyResponse() {
  SharedDtor();
}

void CMessageGetFamilyMoneyResponse::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageGetFamilyMoneyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetFamilyMoneyResponse_descriptor_;
}

const CMessageGetFamilyMoneyResponse& CMessageGetFamilyMoneyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetFamilyMoneyResponse* CMessageGetFamilyMoneyResponse::default_instance_ = NULL;

CMessageGetFamilyMoneyResponse* CMessageGetFamilyMoneyResponse::New() const {
  return new CMessageGetFamilyMoneyResponse;
}

void CMessageGetFamilyMoneyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    errcode_ = 0u;
    familymoney_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetFamilyMoneyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_FamilyMoney;
        break;
      }
      
      // optional uint32 FamilyMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familymoney_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetFamilyMoneyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetFamilyMoneyResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  // optional uint32 FamilyMoney = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->familymoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetFamilyMoneyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  // optional uint32 FamilyMoney = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->familymoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetFamilyMoneyResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional uint32 FamilyMoney = 3;
    if (has_familymoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familymoney());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetFamilyMoneyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetFamilyMoneyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetFamilyMoneyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetFamilyMoneyResponse::MergeFrom(const CMessageGetFamilyMoneyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(2)) {
      set_familymoney(from.familymoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetFamilyMoneyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetFamilyMoneyResponse::CopyFrom(const CMessageGetFamilyMoneyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetFamilyMoneyResponse::Swap(CMessageGetFamilyMoneyResponse* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(errcode_, other->errcode_);
    std::swap(familymoney_, other->familymoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetFamilyMoneyResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetFamilyMoneyResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetFamilyMoneyResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetFamilyMoneyResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageAbortNpcNotify::_default_headername_;
#ifndef _MSC_VER
const int CMessageAbortNpcNotify::kHeadMsgFieldNumber;
const int CMessageAbortNpcNotify::kNpcIDFieldNumber;
const int CMessageAbortNpcNotify::kHeaderNameFieldNumber;
#endif  // !_MSC_VER

CMessageAbortNpcNotify::CMessageAbortNpcNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageAbortNpcNotify::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageAbortNpcNotify::CMessageAbortNpcNotify(const CMessageAbortNpcNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageAbortNpcNotify::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  npcid_ = 0u;
  headername_ = const_cast< ::std::string*>(&_default_headername_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageAbortNpcNotify::~CMessageAbortNpcNotify() {
  SharedDtor();
}

void CMessageAbortNpcNotify::SharedDtor() {
  if (headername_ != &_default_headername_) {
    delete headername_;
  }
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageAbortNpcNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageAbortNpcNotify_descriptor_;
}

const CMessageAbortNpcNotify& CMessageAbortNpcNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageAbortNpcNotify* CMessageAbortNpcNotify::default_instance_ = NULL;

CMessageAbortNpcNotify* CMessageAbortNpcNotify::New() const {
  return new CMessageAbortNpcNotify;
}

void CMessageAbortNpcNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    npcid_ = 0u;
    if (_has_bit(2)) {
      if (headername_ != &_default_headername_) {
        headername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageAbortNpcNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_NpcID;
        break;
      }
      
      // optional uint32 NpcID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_HeaderName;
        break;
      }
      
      // optional string HeaderName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_HeaderName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_headername()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageAbortNpcNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageAbortNpcNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 NpcID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->npcid(), output);
  }
  
  // optional string HeaderName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->headername(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageAbortNpcNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 NpcID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->npcid(), target);
  }
  
  // optional string HeaderName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->headername(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageAbortNpcNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 NpcID = 2;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
    // optional string HeaderName = 3;
    if (has_headername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->headername());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageAbortNpcNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageAbortNpcNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageAbortNpcNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageAbortNpcNotify::MergeFrom(const CMessageAbortNpcNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_npcid(from.npcid());
    }
    if (from._has_bit(2)) {
      set_headername(from.headername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageAbortNpcNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAbortNpcNotify::CopyFrom(const CMessageAbortNpcNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAbortNpcNotify::Swap(CMessageAbortNpcNotify* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(npcid_, other->npcid_);
    std::swap(headername_, other->headername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageAbortNpcNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageAbortNpcNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageAbortNpcNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageAbortNpcNotify_reflection_;
}

// ===================================================================

const ::std::string CMessagePreBattleNotify::_default_attfamilyname_;
const ::std::string CMessagePreBattleNotify::_default_deffamilyname_;
#ifndef _MSC_VER
const int CMessagePreBattleNotify::kHeadMsgFieldNumber;
const int CMessagePreBattleNotify::kNpcIDFieldNumber;
const int CMessagePreBattleNotify::kAttFamilyNameFieldNumber;
const int CMessagePreBattleNotify::kDefFamilyNameFieldNumber;
const int CMessagePreBattleNotify::kMoneyFieldNumber;
#endif  // !_MSC_VER

CMessagePreBattleNotify::CMessagePreBattleNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePreBattleNotify::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessagePreBattleNotify::CMessagePreBattleNotify(const CMessagePreBattleNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePreBattleNotify::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  npcid_ = 0u;
  attfamilyname_ = const_cast< ::std::string*>(&_default_attfamilyname_);
  deffamilyname_ = const_cast< ::std::string*>(&_default_deffamilyname_);
  money_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePreBattleNotify::~CMessagePreBattleNotify() {
  SharedDtor();
}

void CMessagePreBattleNotify::SharedDtor() {
  if (attfamilyname_ != &_default_attfamilyname_) {
    delete attfamilyname_;
  }
  if (deffamilyname_ != &_default_deffamilyname_) {
    delete deffamilyname_;
  }
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessagePreBattleNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePreBattleNotify_descriptor_;
}

const CMessagePreBattleNotify& CMessagePreBattleNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePreBattleNotify* CMessagePreBattleNotify::default_instance_ = NULL;

CMessagePreBattleNotify* CMessagePreBattleNotify::New() const {
  return new CMessagePreBattleNotify;
}

void CMessagePreBattleNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    npcid_ = 0u;
    if (_has_bit(2)) {
      if (attfamilyname_ != &_default_attfamilyname_) {
        attfamilyname_->clear();
      }
    }
    if (_has_bit(3)) {
      if (deffamilyname_ != &_default_deffamilyname_) {
        deffamilyname_->clear();
      }
    }
    money_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePreBattleNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_NpcID;
        break;
      }
      
      // optional uint32 NpcID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_AttFamilyName;
        break;
      }
      
      // optional string AttFamilyName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_AttFamilyName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_attfamilyname()));
        if (input->ExpectTag(34)) goto parse_DefFamilyName;
        break;
      }
      
      // optional string DefFamilyName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_DefFamilyName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_deffamilyname()));
        if (input->ExpectTag(40)) goto parse_Money;
        break;
      }
      
      // optional uint32 Money = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePreBattleNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePreBattleNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 NpcID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->npcid(), output);
  }
  
  // optional string AttFamilyName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->attfamilyname(), output);
  }
  
  // optional string DefFamilyName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->deffamilyname(), output);
  }
  
  // optional uint32 Money = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->money(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePreBattleNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 NpcID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->npcid(), target);
  }
  
  // optional string AttFamilyName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->attfamilyname(), target);
  }
  
  // optional string DefFamilyName = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->deffamilyname(), target);
  }
  
  // optional uint32 Money = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->money(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePreBattleNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 NpcID = 2;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
    // optional string AttFamilyName = 3;
    if (has_attfamilyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->attfamilyname());
    }
    
    // optional string DefFamilyName = 4;
    if (has_deffamilyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->deffamilyname());
    }
    
    // optional uint32 Money = 5;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePreBattleNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePreBattleNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePreBattleNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePreBattleNotify::MergeFrom(const CMessagePreBattleNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_npcid(from.npcid());
    }
    if (from._has_bit(2)) {
      set_attfamilyname(from.attfamilyname());
    }
    if (from._has_bit(3)) {
      set_deffamilyname(from.deffamilyname());
    }
    if (from._has_bit(4)) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePreBattleNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePreBattleNotify::CopyFrom(const CMessagePreBattleNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePreBattleNotify::Swap(CMessagePreBattleNotify* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(npcid_, other->npcid_);
    std::swap(attfamilyname_, other->attfamilyname_);
    std::swap(deffamilyname_, other->deffamilyname_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePreBattleNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePreBattleNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePreBattleNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePreBattleNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetExpCardRequest::kHeadMsgFieldNumber;
const int CMessageGetExpCardRequest::kMsgcodeFieldNumber;
#endif  // !_MSC_VER

CMessageGetExpCardRequest::CMessageGetExpCardRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetExpCardRequest::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageGetExpCardRequest::CMessageGetExpCardRequest(const CMessageGetExpCardRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetExpCardRequest::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  msgcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetExpCardRequest::~CMessageGetExpCardRequest() {
  SharedDtor();
}

void CMessageGetExpCardRequest::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageGetExpCardRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetExpCardRequest_descriptor_;
}

const CMessageGetExpCardRequest& CMessageGetExpCardRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetExpCardRequest* CMessageGetExpCardRequest::default_instance_ = NULL;

CMessageGetExpCardRequest* CMessageGetExpCardRequest::New() const {
  return new CMessageGetExpCardRequest;
}

void CMessageGetExpCardRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    msgcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetExpCardRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_Msgcode;
        break;
      }
      
      // optional uint32 Msgcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Msgcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &msgcode_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetExpCardRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetExpCardRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 Msgcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->msgcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetExpCardRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 Msgcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->msgcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetExpCardRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 Msgcode = 2;
    if (has_msgcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->msgcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetExpCardRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetExpCardRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetExpCardRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetExpCardRequest::MergeFrom(const CMessageGetExpCardRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_msgcode(from.msgcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetExpCardRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetExpCardRequest::CopyFrom(const CMessageGetExpCardRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetExpCardRequest::Swap(CMessageGetExpCardRequest* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(msgcode_, other->msgcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetExpCardRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetExpCardRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetExpCardRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetExpCardRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetExpCardResponse::kHeadMsgFieldNumber;
const int CMessageGetExpCardResponse::kErrcodeFieldNumber;
const int CMessageGetExpCardResponse::kRedStoneIDFieldNumber;
#endif  // !_MSC_VER

CMessageGetExpCardResponse::CMessageGetExpCardResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetExpCardResponse::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageGetExpCardResponse::CMessageGetExpCardResponse(const CMessageGetExpCardResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetExpCardResponse::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  errcode_ = 0u;
  redstoneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetExpCardResponse::~CMessageGetExpCardResponse() {
  SharedDtor();
}

void CMessageGetExpCardResponse::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageGetExpCardResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetExpCardResponse_descriptor_;
}

const CMessageGetExpCardResponse& CMessageGetExpCardResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetExpCardResponse* CMessageGetExpCardResponse::default_instance_ = NULL;

CMessageGetExpCardResponse* CMessageGetExpCardResponse::New() const {
  return new CMessageGetExpCardResponse;
}

void CMessageGetExpCardResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    errcode_ = 0u;
    redstoneid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetExpCardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_RedStoneID;
        break;
      }
      
      // optional uint32 RedStoneID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RedStoneID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &redstoneid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetExpCardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetExpCardResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  // optional uint32 RedStoneID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->redstoneid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetExpCardResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  // optional uint32 RedStoneID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->redstoneid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetExpCardResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional uint32 RedStoneID = 3;
    if (has_redstoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->redstoneid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetExpCardResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetExpCardResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetExpCardResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetExpCardResponse::MergeFrom(const CMessageGetExpCardResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(2)) {
      set_redstoneid(from.redstoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetExpCardResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetExpCardResponse::CopyFrom(const CMessageGetExpCardResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetExpCardResponse::Swap(CMessageGetExpCardResponse* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(errcode_, other->errcode_);
    std::swap(redstoneid_, other->redstoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetExpCardResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetExpCardResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetExpCardResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetExpCardResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageFamilyCanLevelUPNotify::kHeadMsgFieldNumber;
#endif  // !_MSC_VER

CMessageFamilyCanLevelUPNotify::CMessageFamilyCanLevelUPNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFamilyCanLevelUPNotify::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageFamilyCanLevelUPNotify::CMessageFamilyCanLevelUPNotify(const CMessageFamilyCanLevelUPNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFamilyCanLevelUPNotify::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFamilyCanLevelUPNotify::~CMessageFamilyCanLevelUPNotify() {
  SharedDtor();
}

void CMessageFamilyCanLevelUPNotify::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageFamilyCanLevelUPNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFamilyCanLevelUPNotify_descriptor_;
}

const CMessageFamilyCanLevelUPNotify& CMessageFamilyCanLevelUPNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFamilyCanLevelUPNotify* CMessageFamilyCanLevelUPNotify::default_instance_ = NULL;

CMessageFamilyCanLevelUPNotify* CMessageFamilyCanLevelUPNotify::New() const {
  return new CMessageFamilyCanLevelUPNotify;
}

void CMessageFamilyCanLevelUPNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFamilyCanLevelUPNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageFamilyCanLevelUPNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFamilyCanLevelUPNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFamilyCanLevelUPNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFamilyCanLevelUPNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFamilyCanLevelUPNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFamilyCanLevelUPNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFamilyCanLevelUPNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFamilyCanLevelUPNotify::MergeFrom(const CMessageFamilyCanLevelUPNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFamilyCanLevelUPNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFamilyCanLevelUPNotify::CopyFrom(const CMessageFamilyCanLevelUPNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFamilyCanLevelUPNotify::Swap(CMessageFamilyCanLevelUPNotify* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFamilyCanLevelUPNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFamilyCanLevelUPNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFamilyCanLevelUPNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFamilyCanLevelUPNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageFamilyRepetionScoreNotify::kRepetionLevelFieldNumber;
const int CMessageFamilyRepetionScoreNotify::kOgreNumFieldNumber;
const int CMessageFamilyRepetionScoreNotify::kTimeLengthFieldNumber;
const int CMessageFamilyRepetionScoreNotify::kWaveNumFieldNumber;
const int CMessageFamilyRepetionScoreNotify::kMaxHitNumFieldNumber;
const int CMessageFamilyRepetionScoreNotify::kScoreFieldNumber;
#endif  // !_MSC_VER

CMessageFamilyRepetionScoreNotify::CMessageFamilyRepetionScoreNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFamilyRepetionScoreNotify::InitAsDefaultInstance() {}

CMessageFamilyRepetionScoreNotify::CMessageFamilyRepetionScoreNotify(const CMessageFamilyRepetionScoreNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFamilyRepetionScoreNotify::SharedCtor() {
  _cached_size_ = 0;
  repetionlevel_ = 0u;
  ogrenum_ = 0u;
  timelength_ = 0u;
  wavenum_ = 0u;
  maxhitnum_ = 0u;
  score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFamilyRepetionScoreNotify::~CMessageFamilyRepetionScoreNotify() {
  SharedDtor();
}

void CMessageFamilyRepetionScoreNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageFamilyRepetionScoreNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFamilyRepetionScoreNotify_descriptor_;
}

const CMessageFamilyRepetionScoreNotify& CMessageFamilyRepetionScoreNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFamilyRepetionScoreNotify* CMessageFamilyRepetionScoreNotify::default_instance_ = NULL;

CMessageFamilyRepetionScoreNotify* CMessageFamilyRepetionScoreNotify::New() const {
  return new CMessageFamilyRepetionScoreNotify;
}

void CMessageFamilyRepetionScoreNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    repetionlevel_ = 0u;
    ogrenum_ = 0u;
    timelength_ = 0u;
    wavenum_ = 0u;
    maxhitnum_ = 0u;
    score_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFamilyRepetionScoreNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RepetionLevel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &repetionlevel_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_OgreNum;
        break;
      }
      
      // optional uint32 OgreNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OgreNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ogrenum_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_TimeLength;
        break;
      }
      
      // optional uint32 TimeLength = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TimeLength:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &timelength_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_WaveNum;
        break;
      }
      
      // optional uint32 WaveNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WaveNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &wavenum_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_MaxHitNum;
        break;
      }
      
      // optional uint32 MaxHitNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxHitNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxhitnum_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Score;
        break;
      }
      
      // optional uint32 Score = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Score:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &score_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageFamilyRepetionScoreNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFamilyRepetionScoreNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RepetionLevel = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->repetionlevel(), output);
  }
  
  // optional uint32 OgreNum = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->ogrenum(), output);
  }
  
  // optional uint32 TimeLength = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->timelength(), output);
  }
  
  // optional uint32 WaveNum = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->wavenum(), output);
  }
  
  // optional uint32 MaxHitNum = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->maxhitnum(), output);
  }
  
  // optional uint32 Score = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->score(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFamilyRepetionScoreNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RepetionLevel = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->repetionlevel(), target);
  }
  
  // optional uint32 OgreNum = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->ogrenum(), target);
  }
  
  // optional uint32 TimeLength = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->timelength(), target);
  }
  
  // optional uint32 WaveNum = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->wavenum(), target);
  }
  
  // optional uint32 MaxHitNum = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->maxhitnum(), target);
  }
  
  // optional uint32 Score = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->score(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFamilyRepetionScoreNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RepetionLevel = 1;
    if (has_repetionlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->repetionlevel());
    }
    
    // optional uint32 OgreNum = 2;
    if (has_ogrenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ogrenum());
    }
    
    // optional uint32 TimeLength = 3;
    if (has_timelength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->timelength());
    }
    
    // optional uint32 WaveNum = 4;
    if (has_wavenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->wavenum());
    }
    
    // optional uint32 MaxHitNum = 5;
    if (has_maxhitnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxhitnum());
    }
    
    // optional uint32 Score = 6;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->score());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFamilyRepetionScoreNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFamilyRepetionScoreNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFamilyRepetionScoreNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFamilyRepetionScoreNotify::MergeFrom(const CMessageFamilyRepetionScoreNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_repetionlevel(from.repetionlevel());
    }
    if (from._has_bit(1)) {
      set_ogrenum(from.ogrenum());
    }
    if (from._has_bit(2)) {
      set_timelength(from.timelength());
    }
    if (from._has_bit(3)) {
      set_wavenum(from.wavenum());
    }
    if (from._has_bit(4)) {
      set_maxhitnum(from.maxhitnum());
    }
    if (from._has_bit(5)) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFamilyRepetionScoreNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFamilyRepetionScoreNotify::CopyFrom(const CMessageFamilyRepetionScoreNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFamilyRepetionScoreNotify::Swap(CMessageFamilyRepetionScoreNotify* other) {
  if (other != this) {
    std::swap(repetionlevel_, other->repetionlevel_);
    std::swap(ogrenum_, other->ogrenum_);
    std::swap(timelength_, other->timelength_);
    std::swap(wavenum_, other->wavenum_);
    std::swap(maxhitnum_, other->maxhitnum_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFamilyRepetionScoreNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFamilyRepetionScoreNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFamilyRepetionScoreNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFamilyRepetionScoreNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int GoodItem::kItemIDFieldNumber;
const int GoodItem::kItemNumFieldNumber;
const int GoodItem::kComposeIDFieldNumber;
#endif  // !_MSC_VER

GoodItem::GoodItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GoodItem::InitAsDefaultInstance() {}

GoodItem::GoodItem(const GoodItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GoodItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  itemnum_ = 0u;
  composeid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GoodItem::~GoodItem() {
  SharedDtor();
}

void GoodItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* GoodItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoodItem_descriptor_;
}

const GoodItem& GoodItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

GoodItem* GoodItem::default_instance_ = NULL;

GoodItem* GoodItem::New() const {
  return new GoodItem;
}

void GoodItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    itemnum_ = 0u;
    composeid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GoodItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ItemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ItemNum;
        break;
      }
      
      // optional uint32 ItemNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemnum_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_ComposeID;
        break;
      }
      
      // optional uint32 ComposeID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ComposeID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &composeid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GoodItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    GoodItem::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ItemID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->itemid(), output);
  }
  
  // optional uint32 ItemNum = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->itemnum(), output);
  }
  
  // optional uint32 ComposeID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->composeid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GoodItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ItemID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->itemid(), target);
  }
  
  // optional uint32 ItemNum = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->itemnum(), target);
  }
  
  // optional uint32 ComposeID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->composeid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GoodItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ItemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemid());
    }
    
    // optional uint32 ItemNum = 2;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemnum());
    }
    
    // optional uint32 ComposeID = 3;
    if (has_composeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->composeid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void GoodItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GoodItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GoodItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GoodItem::MergeFrom(const GoodItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_itemid(from.itemid());
    }
    if (from._has_bit(1)) {
      set_itemnum(from.itemnum());
    }
    if (from._has_bit(2)) {
      set_composeid(from.composeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GoodItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoodItem::CopyFrom(const GoodItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoodItem::Swap(GoodItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(composeid_, other->composeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool GoodItem::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* GoodItem::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* GoodItem::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return GoodItem_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetFamilyGoodsListRequest::kHeadMsgFieldNumber;
const int CMessageGetFamilyGoodsListRequest::kFamilyIDFieldNumber;
const int CMessageGetFamilyGoodsListRequest::kEntityIDFieldNumber;
const int CMessageGetFamilyGoodsListRequest::kNpcTmpIDFieldNumber;
#endif  // !_MSC_VER

CMessageGetFamilyGoodsListRequest::CMessageGetFamilyGoodsListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetFamilyGoodsListRequest::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageGetFamilyGoodsListRequest::CMessageGetFamilyGoodsListRequest(const CMessageGetFamilyGoodsListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetFamilyGoodsListRequest::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  familyid_ = 0u;
  entityid_ = 0u;
  npctmpid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetFamilyGoodsListRequest::~CMessageGetFamilyGoodsListRequest() {
  SharedDtor();
}

void CMessageGetFamilyGoodsListRequest::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageGetFamilyGoodsListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetFamilyGoodsListRequest_descriptor_;
}

const CMessageGetFamilyGoodsListRequest& CMessageGetFamilyGoodsListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetFamilyGoodsListRequest* CMessageGetFamilyGoodsListRequest::default_instance_ = NULL;

CMessageGetFamilyGoodsListRequest* CMessageGetFamilyGoodsListRequest::New() const {
  return new CMessageGetFamilyGoodsListRequest;
}

void CMessageGetFamilyGoodsListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    familyid_ = 0u;
    entityid_ = 0u;
    npctmpid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetFamilyGoodsListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_FamilyID;
        break;
      }
      
      // optional uint32 FamilyID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_EntityID;
        break;
      }
      
      // optional uint32 EntityID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_NpcTmpID;
        break;
      }
      
      // optional uint32 NpcTmpID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcTmpID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npctmpid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetFamilyGoodsListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetFamilyGoodsListRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 FamilyID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->familyid(), output);
  }
  
  // optional uint32 EntityID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->entityid(), output);
  }
  
  // optional uint32 NpcTmpID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->npctmpid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetFamilyGoodsListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 FamilyID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->familyid(), target);
  }
  
  // optional uint32 EntityID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->entityid(), target);
  }
  
  // optional uint32 NpcTmpID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->npctmpid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetFamilyGoodsListRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 FamilyID = 2;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
    // optional uint32 EntityID = 3;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
    // optional uint32 NpcTmpID = 4;
    if (has_npctmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npctmpid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetFamilyGoodsListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetFamilyGoodsListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetFamilyGoodsListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetFamilyGoodsListRequest::MergeFrom(const CMessageGetFamilyGoodsListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_familyid(from.familyid());
    }
    if (from._has_bit(2)) {
      set_entityid(from.entityid());
    }
    if (from._has_bit(3)) {
      set_npctmpid(from.npctmpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetFamilyGoodsListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetFamilyGoodsListRequest::CopyFrom(const CMessageGetFamilyGoodsListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetFamilyGoodsListRequest::Swap(CMessageGetFamilyGoodsListRequest* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(familyid_, other->familyid_);
    std::swap(entityid_, other->entityid_);
    std::swap(npctmpid_, other->npctmpid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetFamilyGoodsListRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetFamilyGoodsListRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetFamilyGoodsListRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetFamilyGoodsListRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetFamilyGoodsListResponse::kHeadMsgFieldNumber;
const int CMessageGetFamilyGoodsListResponse::kErrcodeFieldNumber;
const int CMessageGetFamilyGoodsListResponse::kGoodsListFieldNumber;
const int CMessageGetFamilyGoodsListResponse::kNpcTmpIDFieldNumber;
#endif  // !_MSC_VER

CMessageGetFamilyGoodsListResponse::CMessageGetFamilyGoodsListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetFamilyGoodsListResponse::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageGetFamilyGoodsListResponse::CMessageGetFamilyGoodsListResponse(const CMessageGetFamilyGoodsListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetFamilyGoodsListResponse::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  errcode_ = 0u;
  npctmpid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetFamilyGoodsListResponse::~CMessageGetFamilyGoodsListResponse() {
  SharedDtor();
}

void CMessageGetFamilyGoodsListResponse::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageGetFamilyGoodsListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetFamilyGoodsListResponse_descriptor_;
}

const CMessageGetFamilyGoodsListResponse& CMessageGetFamilyGoodsListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetFamilyGoodsListResponse* CMessageGetFamilyGoodsListResponse::default_instance_ = NULL;

CMessageGetFamilyGoodsListResponse* CMessageGetFamilyGoodsListResponse::New() const {
  return new CMessageGetFamilyGoodsListResponse;
}

void CMessageGetFamilyGoodsListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    errcode_ = 0u;
    npctmpid_ = 0u;
  }
  goodslist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetFamilyGoodsListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_GoodsList;
        break;
      }
      
      // repeated .GoodItem GoodsList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_GoodsList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_goodslist()));
        if (input->ExpectTag(26)) goto parse_GoodsList;
        if (input->ExpectTag(32)) goto parse_NpcTmpID;
        break;
      }
      
      // optional uint32 NpcTmpID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcTmpID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npctmpid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetFamilyGoodsListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetFamilyGoodsListResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  // repeated .GoodItem GoodsList = 3;
  for (int i = 0; i < this->goodslist_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->goodslist(i), output);
  }
  
  // optional uint32 NpcTmpID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->npctmpid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetFamilyGoodsListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  // repeated .GoodItem GoodsList = 3;
  for (int i = 0; i < this->goodslist_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->goodslist(i), target);
  }
  
  // optional uint32 NpcTmpID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->npctmpid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetFamilyGoodsListResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional uint32 NpcTmpID = 4;
    if (has_npctmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npctmpid());
    }
    
  }
  // repeated .GoodItem GoodsList = 3;
  total_size += 1 * this->goodslist_size();
  for (int i = 0; i < this->goodslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->goodslist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetFamilyGoodsListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetFamilyGoodsListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetFamilyGoodsListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetFamilyGoodsListResponse::MergeFrom(const CMessageGetFamilyGoodsListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  goodslist_.MergeFrom(from.goodslist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(3)) {
      set_npctmpid(from.npctmpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetFamilyGoodsListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetFamilyGoodsListResponse::CopyFrom(const CMessageGetFamilyGoodsListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetFamilyGoodsListResponse::Swap(CMessageGetFamilyGoodsListResponse* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(errcode_, other->errcode_);
    goodslist_.Swap(&other->goodslist_);
    std::swap(npctmpid_, other->npctmpid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetFamilyGoodsListResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetFamilyGoodsListResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetFamilyGoodsListResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetFamilyGoodsListResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetFamilyExchangeGoodsListRequest::kHeadMsgFieldNumber;
const int CMessageGetFamilyExchangeGoodsListRequest::kFamilyIDFieldNumber;
const int CMessageGetFamilyExchangeGoodsListRequest::kEntityIDFieldNumber;
const int CMessageGetFamilyExchangeGoodsListRequest::kNpcTmpIDFieldNumber;
#endif  // !_MSC_VER

CMessageGetFamilyExchangeGoodsListRequest::CMessageGetFamilyExchangeGoodsListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetFamilyExchangeGoodsListRequest::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageGetFamilyExchangeGoodsListRequest::CMessageGetFamilyExchangeGoodsListRequest(const CMessageGetFamilyExchangeGoodsListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetFamilyExchangeGoodsListRequest::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  familyid_ = 0u;
  entityid_ = 0u;
  npctmpid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetFamilyExchangeGoodsListRequest::~CMessageGetFamilyExchangeGoodsListRequest() {
  SharedDtor();
}

void CMessageGetFamilyExchangeGoodsListRequest::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageGetFamilyExchangeGoodsListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetFamilyExchangeGoodsListRequest_descriptor_;
}

const CMessageGetFamilyExchangeGoodsListRequest& CMessageGetFamilyExchangeGoodsListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetFamilyExchangeGoodsListRequest* CMessageGetFamilyExchangeGoodsListRequest::default_instance_ = NULL;

CMessageGetFamilyExchangeGoodsListRequest* CMessageGetFamilyExchangeGoodsListRequest::New() const {
  return new CMessageGetFamilyExchangeGoodsListRequest;
}

void CMessageGetFamilyExchangeGoodsListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    familyid_ = 0u;
    entityid_ = 0u;
    npctmpid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetFamilyExchangeGoodsListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_FamilyID;
        break;
      }
      
      // optional uint32 FamilyID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_EntityID;
        break;
      }
      
      // optional uint32 EntityID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_NpcTmpID;
        break;
      }
      
      // optional uint32 NpcTmpID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcTmpID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npctmpid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetFamilyExchangeGoodsListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetFamilyExchangeGoodsListRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 FamilyID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->familyid(), output);
  }
  
  // optional uint32 EntityID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->entityid(), output);
  }
  
  // optional uint32 NpcTmpID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->npctmpid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetFamilyExchangeGoodsListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 FamilyID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->familyid(), target);
  }
  
  // optional uint32 EntityID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->entityid(), target);
  }
  
  // optional uint32 NpcTmpID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->npctmpid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetFamilyExchangeGoodsListRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 FamilyID = 2;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
    // optional uint32 EntityID = 3;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
    // optional uint32 NpcTmpID = 4;
    if (has_npctmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npctmpid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetFamilyExchangeGoodsListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetFamilyExchangeGoodsListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetFamilyExchangeGoodsListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetFamilyExchangeGoodsListRequest::MergeFrom(const CMessageGetFamilyExchangeGoodsListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_familyid(from.familyid());
    }
    if (from._has_bit(2)) {
      set_entityid(from.entityid());
    }
    if (from._has_bit(3)) {
      set_npctmpid(from.npctmpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetFamilyExchangeGoodsListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetFamilyExchangeGoodsListRequest::CopyFrom(const CMessageGetFamilyExchangeGoodsListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetFamilyExchangeGoodsListRequest::Swap(CMessageGetFamilyExchangeGoodsListRequest* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(familyid_, other->familyid_);
    std::swap(entityid_, other->entityid_);
    std::swap(npctmpid_, other->npctmpid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetFamilyExchangeGoodsListRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetFamilyExchangeGoodsListRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetFamilyExchangeGoodsListRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetFamilyExchangeGoodsListRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetFamilyExchangeGoodsListResponse::kHeadMsgFieldNumber;
const int CMessageGetFamilyExchangeGoodsListResponse::kErrcodeFieldNumber;
const int CMessageGetFamilyExchangeGoodsListResponse::kGoodsListFieldNumber;
const int CMessageGetFamilyExchangeGoodsListResponse::kNpcTmpIDFieldNumber;
#endif  // !_MSC_VER

CMessageGetFamilyExchangeGoodsListResponse::CMessageGetFamilyExchangeGoodsListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetFamilyExchangeGoodsListResponse::InitAsDefaultInstance() {  headmsg_ = const_cast< ::FamilyHead*>(&::FamilyHead::default_instance());
}

CMessageGetFamilyExchangeGoodsListResponse::CMessageGetFamilyExchangeGoodsListResponse(const CMessageGetFamilyExchangeGoodsListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetFamilyExchangeGoodsListResponse::SharedCtor() {
  _cached_size_ = 0;
  headmsg_ = NULL;
  errcode_ = 0u;
  npctmpid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetFamilyExchangeGoodsListResponse::~CMessageGetFamilyExchangeGoodsListResponse() {
  SharedDtor();
}

void CMessageGetFamilyExchangeGoodsListResponse::SharedDtor() {
  if (this != default_instance_) {
    delete headmsg_;
  }
}

const ::google::protobuf::Descriptor* CMessageGetFamilyExchangeGoodsListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetFamilyExchangeGoodsListResponse_descriptor_;
}

const CMessageGetFamilyExchangeGoodsListResponse& CMessageGetFamilyExchangeGoodsListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetFamilyExchangeGoodsListResponse* CMessageGetFamilyExchangeGoodsListResponse::default_instance_ = NULL;

CMessageGetFamilyExchangeGoodsListResponse* CMessageGetFamilyExchangeGoodsListResponse::New() const {
  return new CMessageGetFamilyExchangeGoodsListResponse;
}

void CMessageGetFamilyExchangeGoodsListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (headmsg_ != NULL) headmsg_->::FamilyHead::Clear();
    }
    errcode_ = 0u;
    npctmpid_ = 0u;
  }
  goodslist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetFamilyExchangeGoodsListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .FamilyHead HeadMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_headmsg()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_GoodsList;
        break;
      }
      
      // repeated .GoodItem GoodsList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_GoodsList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_goodslist()));
        if (input->ExpectTag(26)) goto parse_GoodsList;
        if (input->ExpectTag(32)) goto parse_NpcTmpID;
        break;
      }
      
      // optional uint32 NpcTmpID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcTmpID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npctmpid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetFamilyExchangeGoodsListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetFamilyExchangeGoodsListResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->headmsg(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  // repeated .GoodItem GoodsList = 3;
  for (int i = 0; i < this->goodslist_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->goodslist(i), output);
  }
  
  // optional uint32 NpcTmpID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->npctmpid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetFamilyExchangeGoodsListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FamilyHead HeadMsg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->headmsg(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  // repeated .GoodItem GoodsList = 3;
  for (int i = 0; i < this->goodslist_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->goodslist(i), target);
  }
  
  // optional uint32 NpcTmpID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->npctmpid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetFamilyExchangeGoodsListResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FamilyHead HeadMsg = 1;
    if (has_headmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->headmsg());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional uint32 NpcTmpID = 4;
    if (has_npctmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npctmpid());
    }
    
  }
  // repeated .GoodItem GoodsList = 3;
  total_size += 1 * this->goodslist_size();
  for (int i = 0; i < this->goodslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->goodslist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetFamilyExchangeGoodsListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetFamilyExchangeGoodsListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetFamilyExchangeGoodsListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetFamilyExchangeGoodsListResponse::MergeFrom(const CMessageGetFamilyExchangeGoodsListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  goodslist_.MergeFrom(from.goodslist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_headmsg()->::FamilyHead::MergeFrom(from.headmsg());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(3)) {
      set_npctmpid(from.npctmpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetFamilyExchangeGoodsListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetFamilyExchangeGoodsListResponse::CopyFrom(const CMessageGetFamilyExchangeGoodsListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetFamilyExchangeGoodsListResponse::Swap(CMessageGetFamilyExchangeGoodsListResponse* other) {
  if (other != this) {
    std::swap(headmsg_, other->headmsg_);
    std::swap(errcode_, other->errcode_);
    goodslist_.Swap(&other->goodslist_);
    std::swap(npctmpid_, other->npctmpid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetFamilyExchangeGoodsListResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetFamilyExchangeGoodsListResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetFamilyExchangeGoodsListResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetFamilyExchangeGoodsListResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageChangeFamilyGoodsListNotify::kGoodListFieldNumber;
const int CMessageChangeFamilyGoodsListNotify::kNpcTmpIDFieldNumber;
#endif  // !_MSC_VER

CMessageChangeFamilyGoodsListNotify::CMessageChangeFamilyGoodsListNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeFamilyGoodsListNotify::InitAsDefaultInstance() {}

CMessageChangeFamilyGoodsListNotify::CMessageChangeFamilyGoodsListNotify(const CMessageChangeFamilyGoodsListNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeFamilyGoodsListNotify::SharedCtor() {
  _cached_size_ = 0;
  npctmpid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeFamilyGoodsListNotify::~CMessageChangeFamilyGoodsListNotify() {
  SharedDtor();
}

void CMessageChangeFamilyGoodsListNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageChangeFamilyGoodsListNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeFamilyGoodsListNotify_descriptor_;
}

const CMessageChangeFamilyGoodsListNotify& CMessageChangeFamilyGoodsListNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeFamilyGoodsListNotify* CMessageChangeFamilyGoodsListNotify::default_instance_ = NULL;

CMessageChangeFamilyGoodsListNotify* CMessageChangeFamilyGoodsListNotify::New() const {
  return new CMessageChangeFamilyGoodsListNotify;
}

void CMessageChangeFamilyGoodsListNotify::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    npctmpid_ = 0u;
  }
  goodlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeFamilyGoodsListNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .GoodItem GoodList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_GoodList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_goodlist()));
        if (input->ExpectTag(10)) goto parse_GoodList;
        if (input->ExpectTag(16)) goto parse_NpcTmpID;
        break;
      }
      
      // optional uint32 NpcTmpID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcTmpID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npctmpid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeFamilyGoodsListNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeFamilyGoodsListNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .GoodItem GoodList = 1;
  for (int i = 0; i < this->goodlist_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->goodlist(i), output);
  }
  
  // optional uint32 NpcTmpID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->npctmpid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeFamilyGoodsListNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GoodItem GoodList = 1;
  for (int i = 0; i < this->goodlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->goodlist(i), target);
  }
  
  // optional uint32 NpcTmpID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->npctmpid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeFamilyGoodsListNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 NpcTmpID = 2;
    if (has_npctmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npctmpid());
    }
    
  }
  // repeated .GoodItem GoodList = 1;
  total_size += 1 * this->goodlist_size();
  for (int i = 0; i < this->goodlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->goodlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeFamilyGoodsListNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeFamilyGoodsListNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeFamilyGoodsListNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeFamilyGoodsListNotify::MergeFrom(const CMessageChangeFamilyGoodsListNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  goodlist_.MergeFrom(from.goodlist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_npctmpid(from.npctmpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeFamilyGoodsListNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeFamilyGoodsListNotify::CopyFrom(const CMessageChangeFamilyGoodsListNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeFamilyGoodsListNotify::Swap(CMessageChangeFamilyGoodsListNotify* other) {
  if (other != this) {
    goodlist_.Swap(&other->goodlist_);
    std::swap(npctmpid_, other->npctmpid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeFamilyGoodsListNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeFamilyGoodsListNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeFamilyGoodsListNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeFamilyGoodsListNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageChangeFamilyExchangeGoodsListNotify::kGoodListFieldNumber;
#endif  // !_MSC_VER

CMessageChangeFamilyExchangeGoodsListNotify::CMessageChangeFamilyExchangeGoodsListNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeFamilyExchangeGoodsListNotify::InitAsDefaultInstance() {}

CMessageChangeFamilyExchangeGoodsListNotify::CMessageChangeFamilyExchangeGoodsListNotify(const CMessageChangeFamilyExchangeGoodsListNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeFamilyExchangeGoodsListNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeFamilyExchangeGoodsListNotify::~CMessageChangeFamilyExchangeGoodsListNotify() {
  SharedDtor();
}

void CMessageChangeFamilyExchangeGoodsListNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageChangeFamilyExchangeGoodsListNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeFamilyExchangeGoodsListNotify_descriptor_;
}

const CMessageChangeFamilyExchangeGoodsListNotify& CMessageChangeFamilyExchangeGoodsListNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeFamilyExchangeGoodsListNotify* CMessageChangeFamilyExchangeGoodsListNotify::default_instance_ = NULL;

CMessageChangeFamilyExchangeGoodsListNotify* CMessageChangeFamilyExchangeGoodsListNotify::New() const {
  return new CMessageChangeFamilyExchangeGoodsListNotify;
}

void CMessageChangeFamilyExchangeGoodsListNotify::Clear() {
  goodlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeFamilyExchangeGoodsListNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .GoodItem GoodList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_GoodList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_goodlist()));
        if (input->ExpectTag(10)) goto parse_GoodList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeFamilyExchangeGoodsListNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeFamilyExchangeGoodsListNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .GoodItem GoodList = 1;
  for (int i = 0; i < this->goodlist_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->goodlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeFamilyExchangeGoodsListNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GoodItem GoodList = 1;
  for (int i = 0; i < this->goodlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->goodlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeFamilyExchangeGoodsListNotify::ByteSize() const {
  int total_size = 0;
  
  // repeated .GoodItem GoodList = 1;
  total_size += 1 * this->goodlist_size();
  for (int i = 0; i < this->goodlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->goodlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeFamilyExchangeGoodsListNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeFamilyExchangeGoodsListNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeFamilyExchangeGoodsListNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeFamilyExchangeGoodsListNotify::MergeFrom(const CMessageChangeFamilyExchangeGoodsListNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  goodlist_.MergeFrom(from.goodlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeFamilyExchangeGoodsListNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeFamilyExchangeGoodsListNotify::CopyFrom(const CMessageChangeFamilyExchangeGoodsListNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeFamilyExchangeGoodsListNotify::Swap(CMessageChangeFamilyExchangeGoodsListNotify* other) {
  if (other != this) {
    goodlist_.Swap(&other->goodlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeFamilyExchangeGoodsListNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeFamilyExchangeGoodsListNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeFamilyExchangeGoodsListNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeFamilyExchangeGoodsListNotify_reflection_;
}

// ===================================================================

const ::std::string CMessageUseFamilyLeagueItemNotify::_default_managername_;
#ifndef _MSC_VER
const int CMessageUseFamilyLeagueItemNotify::kGoodListFieldNumber;
const int CMessageUseFamilyLeagueItemNotify::kManagerIDFieldNumber;
const int CMessageUseFamilyLeagueItemNotify::kManagerNameFieldNumber;
#endif  // !_MSC_VER

CMessageUseFamilyLeagueItemNotify::CMessageUseFamilyLeagueItemNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUseFamilyLeagueItemNotify::InitAsDefaultInstance() {}

CMessageUseFamilyLeagueItemNotify::CMessageUseFamilyLeagueItemNotify(const CMessageUseFamilyLeagueItemNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUseFamilyLeagueItemNotify::SharedCtor() {
  _cached_size_ = 0;
  managerid_ = 0u;
  managername_ = const_cast< ::std::string*>(&_default_managername_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUseFamilyLeagueItemNotify::~CMessageUseFamilyLeagueItemNotify() {
  SharedDtor();
}

void CMessageUseFamilyLeagueItemNotify::SharedDtor() {
  if (managername_ != &_default_managername_) {
    delete managername_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageUseFamilyLeagueItemNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUseFamilyLeagueItemNotify_descriptor_;
}

const CMessageUseFamilyLeagueItemNotify& CMessageUseFamilyLeagueItemNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageUseFamilyLeagueItemNotify* CMessageUseFamilyLeagueItemNotify::default_instance_ = NULL;

CMessageUseFamilyLeagueItemNotify* CMessageUseFamilyLeagueItemNotify::New() const {
  return new CMessageUseFamilyLeagueItemNotify;
}

void CMessageUseFamilyLeagueItemNotify::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    managerid_ = 0u;
    if (_has_bit(2)) {
      if (managername_ != &_default_managername_) {
        managername_->clear();
      }
    }
  }
  goodlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUseFamilyLeagueItemNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .GoodItem GoodList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_GoodList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_goodlist()));
        if (input->ExpectTag(10)) goto parse_GoodList;
        if (input->ExpectTag(16)) goto parse_ManagerID;
        break;
      }
      
      // optional uint32 ManagerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ManagerID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &managerid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_ManagerName;
        break;
      }
      
      // optional string ManagerName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ManagerName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_managername()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUseFamilyLeagueItemNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUseFamilyLeagueItemNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .GoodItem GoodList = 1;
  for (int i = 0; i < this->goodlist_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->goodlist(i), output);
  }
  
  // optional uint32 ManagerID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->managerid(), output);
  }
  
  // optional string ManagerName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->managername(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUseFamilyLeagueItemNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GoodItem GoodList = 1;
  for (int i = 0; i < this->goodlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->goodlist(i), target);
  }
  
  // optional uint32 ManagerID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->managerid(), target);
  }
  
  // optional string ManagerName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->managername(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUseFamilyLeagueItemNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 ManagerID = 2;
    if (has_managerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->managerid());
    }
    
    // optional string ManagerName = 3;
    if (has_managername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->managername());
    }
    
  }
  // repeated .GoodItem GoodList = 1;
  total_size += 1 * this->goodlist_size();
  for (int i = 0; i < this->goodlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->goodlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUseFamilyLeagueItemNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUseFamilyLeagueItemNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUseFamilyLeagueItemNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUseFamilyLeagueItemNotify::MergeFrom(const CMessageUseFamilyLeagueItemNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  goodlist_.MergeFrom(from.goodlist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_managerid(from.managerid());
    }
    if (from._has_bit(2)) {
      set_managername(from.managername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUseFamilyLeagueItemNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUseFamilyLeagueItemNotify::CopyFrom(const CMessageUseFamilyLeagueItemNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUseFamilyLeagueItemNotify::Swap(CMessageUseFamilyLeagueItemNotify* other) {
  if (other != this) {
    goodlist_.Swap(&other->goodlist_);
    std::swap(managerid_, other->managerid_);
    std::swap(managername_, other->managername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUseFamilyLeagueItemNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUseFamilyLeagueItemNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUseFamilyLeagueItemNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUseFamilyLeagueItemNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetHomeInfoRequest::kCharIDFieldNumber;
const int CMessageGetHomeInfoRequest::kFamilyIDFieldNumber;
#endif  // !_MSC_VER

CMessageGetHomeInfoRequest::CMessageGetHomeInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetHomeInfoRequest::InitAsDefaultInstance() {}

CMessageGetHomeInfoRequest::CMessageGetHomeInfoRequest(const CMessageGetHomeInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetHomeInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  familyid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetHomeInfoRequest::~CMessageGetHomeInfoRequest() {
  SharedDtor();
}

void CMessageGetHomeInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGetHomeInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetHomeInfoRequest_descriptor_;
}

const CMessageGetHomeInfoRequest& CMessageGetHomeInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetHomeInfoRequest* CMessageGetHomeInfoRequest::default_instance_ = NULL;

CMessageGetHomeInfoRequest* CMessageGetHomeInfoRequest::New() const {
  return new CMessageGetHomeInfoRequest;
}

void CMessageGetHomeInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    familyid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetHomeInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_FamilyID;
        break;
      }
      
      // optional uint32 FamilyID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetHomeInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetHomeInfoRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 FamilyID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->familyid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetHomeInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 FamilyID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->familyid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetHomeInfoRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 FamilyID = 2;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetHomeInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetHomeInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetHomeInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetHomeInfoRequest::MergeFrom(const CMessageGetHomeInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_familyid(from.familyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetHomeInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetHomeInfoRequest::CopyFrom(const CMessageGetHomeInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetHomeInfoRequest::Swap(CMessageGetHomeInfoRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(familyid_, other->familyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetHomeInfoRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetHomeInfoRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetHomeInfoRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetHomeInfoRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetHomeInfoResponse::kCharIDFieldNumber;
const int CMessageGetHomeInfoResponse::kFamilyIDFieldNumber;
const int CMessageGetHomeInfoResponse::kResultFieldNumber;
const int CMessageGetHomeInfoResponse::kWizardFieldNumber;
const int CMessageGetHomeInfoResponse::kConstructFieldNumber;
const int CMessageGetHomeInfoResponse::kLevelFieldNumber;
const int CMessageGetHomeInfoResponse::kUpDataFieldNumber;
#endif  // !_MSC_VER

CMessageGetHomeInfoResponse::CMessageGetHomeInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetHomeInfoResponse::InitAsDefaultInstance() {}

CMessageGetHomeInfoResponse::CMessageGetHomeInfoResponse(const CMessageGetHomeInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetHomeInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  familyid_ = 0u;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetHomeInfoResponse::~CMessageGetHomeInfoResponse() {
  SharedDtor();
}

void CMessageGetHomeInfoResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGetHomeInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetHomeInfoResponse_descriptor_;
}

const CMessageGetHomeInfoResponse& CMessageGetHomeInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetHomeInfoResponse* CMessageGetHomeInfoResponse::default_instance_ = NULL;

CMessageGetHomeInfoResponse* CMessageGetHomeInfoResponse::New() const {
  return new CMessageGetHomeInfoResponse;
}

void CMessageGetHomeInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    familyid_ = 0u;
    result_ = 0u;
  }
  wizard_.Clear();
  construct_.Clear();
  level_.Clear();
  updata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetHomeInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_FamilyID;
        break;
      }
      
      // optional uint32 FamilyID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Wizard;
        break;
      }
      
      // repeated uint32 Wizard = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Wizard:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_wizard(value);
        if (input->ExpectTag(32)) goto parse_Wizard;
        if (input->ExpectTag(40)) goto parse_Construct;
        break;
      }
      
      // repeated uint32 Construct = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Construct:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_construct(value);
        if (input->ExpectTag(40)) goto parse_Construct;
        if (input->ExpectTag(48)) goto parse_Level;
        break;
      }
      
      // repeated uint32 Level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_level(value);
        if (input->ExpectTag(48)) goto parse_Level;
        if (input->ExpectTag(56)) goto parse_UpData;
        break;
      }
      
      // repeated uint32 UpData = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UpData:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_updata(value);
        if (input->ExpectTag(56)) goto parse_UpData;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetHomeInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetHomeInfoResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 FamilyID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->familyid(), output);
  }
  
  // optional uint32 Result = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->result(), output);
  }
  
  // repeated uint32 Wizard = 4;
  for (int i = 0; i < this->wizard_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->wizard(i), output);
  }
  
  // repeated uint32 Construct = 5;
  for (int i = 0; i < this->construct_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->construct(i), output);
  }
  
  // repeated uint32 Level = 6;
  for (int i = 0; i < this->level_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->level(i), output);
  }
  
  // repeated uint32 UpData = 7;
  for (int i = 0; i < this->updata_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->updata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetHomeInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 FamilyID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->familyid(), target);
  }
  
  // optional uint32 Result = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->result(), target);
  }
  
  // repeated uint32 Wizard = 4;
  for (int i = 0; i < this->wizard_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->wizard(i), target);
  }
  
  // repeated uint32 Construct = 5;
  for (int i = 0; i < this->construct_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->construct(i), target);
  }
  
  // repeated uint32 Level = 6;
  for (int i = 0; i < this->level_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->level(i), target);
  }
  
  // repeated uint32 UpData = 7;
  for (int i = 0; i < this->updata_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->updata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetHomeInfoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 FamilyID = 2;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
    // optional uint32 Result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
  }
  // repeated uint32 Wizard = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->wizard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->wizard(i));
    }
    total_size += 1 * this->wizard_size() + data_size;
  }
  
  // repeated uint32 Construct = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->construct_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->construct(i));
    }
    total_size += 1 * this->construct_size() + data_size;
  }
  
  // repeated uint32 Level = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->level_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->level(i));
    }
    total_size += 1 * this->level_size() + data_size;
  }
  
  // repeated uint32 UpData = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->updata_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->updata(i));
    }
    total_size += 1 * this->updata_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetHomeInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetHomeInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetHomeInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetHomeInfoResponse::MergeFrom(const CMessageGetHomeInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  wizard_.MergeFrom(from.wizard_);
  construct_.MergeFrom(from.construct_);
  level_.MergeFrom(from.level_);
  updata_.MergeFrom(from.updata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_familyid(from.familyid());
    }
    if (from._has_bit(2)) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetHomeInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetHomeInfoResponse::CopyFrom(const CMessageGetHomeInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetHomeInfoResponse::Swap(CMessageGetHomeInfoResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(familyid_, other->familyid_);
    std::swap(result_, other->result_);
    wizard_.Swap(&other->wizard_);
    construct_.Swap(&other->construct_);
    level_.Swap(&other->level_);
    updata_.Swap(&other->updata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetHomeInfoResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetHomeInfoResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetHomeInfoResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetHomeInfoResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageUpgradeHomeRequest::kCharIDFieldNumber;
const int CMessageUpgradeHomeRequest::kTypeFieldNumber;
#endif  // !_MSC_VER

CMessageUpgradeHomeRequest::CMessageUpgradeHomeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUpgradeHomeRequest::InitAsDefaultInstance() {}

CMessageUpgradeHomeRequest::CMessageUpgradeHomeRequest(const CMessageUpgradeHomeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUpgradeHomeRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUpgradeHomeRequest::~CMessageUpgradeHomeRequest() {
  SharedDtor();
}

void CMessageUpgradeHomeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageUpgradeHomeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUpgradeHomeRequest_descriptor_;
}

const CMessageUpgradeHomeRequest& CMessageUpgradeHomeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageUpgradeHomeRequest* CMessageUpgradeHomeRequest::default_instance_ = NULL;

CMessageUpgradeHomeRequest* CMessageUpgradeHomeRequest::New() const {
  return new CMessageUpgradeHomeRequest;
}

void CMessageUpgradeHomeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUpgradeHomeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }
      
      // optional uint32 Type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Type:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUpgradeHomeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUpgradeHomeRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 Type = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUpgradeHomeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 Type = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUpgradeHomeRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 Type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUpgradeHomeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUpgradeHomeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUpgradeHomeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUpgradeHomeRequest::MergeFrom(const CMessageUpgradeHomeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUpgradeHomeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUpgradeHomeRequest::CopyFrom(const CMessageUpgradeHomeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUpgradeHomeRequest::Swap(CMessageUpgradeHomeRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUpgradeHomeRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUpgradeHomeRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUpgradeHomeRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUpgradeHomeRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageUpgradeHomeResponse::kCharIDFieldNumber;
const int CMessageUpgradeHomeResponse::kTypeFieldNumber;
const int CMessageUpgradeHomeResponse::kUpDataFieldNumber;
#endif  // !_MSC_VER

CMessageUpgradeHomeResponse::CMessageUpgradeHomeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUpgradeHomeResponse::InitAsDefaultInstance() {}

CMessageUpgradeHomeResponse::CMessageUpgradeHomeResponse(const CMessageUpgradeHomeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUpgradeHomeResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  type_ = 0u;
  updata_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUpgradeHomeResponse::~CMessageUpgradeHomeResponse() {
  SharedDtor();
}

void CMessageUpgradeHomeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageUpgradeHomeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUpgradeHomeResponse_descriptor_;
}

const CMessageUpgradeHomeResponse& CMessageUpgradeHomeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageUpgradeHomeResponse* CMessageUpgradeHomeResponse::default_instance_ = NULL;

CMessageUpgradeHomeResponse* CMessageUpgradeHomeResponse::New() const {
  return new CMessageUpgradeHomeResponse;
}

void CMessageUpgradeHomeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    type_ = 0u;
    updata_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUpgradeHomeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }
      
      // optional uint32 Type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Type:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_UpData;
        break;
      }
      
      // optional uint32 UpData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UpData:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &updata_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUpgradeHomeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUpgradeHomeResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 Type = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->type(), output);
  }
  
  // optional uint32 UpData = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->updata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUpgradeHomeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 Type = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->type(), target);
  }
  
  // optional uint32 UpData = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->updata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUpgradeHomeResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 Type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
    // optional uint32 UpData = 3;
    if (has_updata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->updata());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUpgradeHomeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUpgradeHomeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUpgradeHomeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUpgradeHomeResponse::MergeFrom(const CMessageUpgradeHomeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_type(from.type());
    }
    if (from._has_bit(2)) {
      set_updata(from.updata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUpgradeHomeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUpgradeHomeResponse::CopyFrom(const CMessageUpgradeHomeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUpgradeHomeResponse::Swap(CMessageUpgradeHomeResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(type_, other->type_);
    std::swap(updata_, other->updata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUpgradeHomeResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUpgradeHomeResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUpgradeHomeResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUpgradeHomeResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageFamilyStabilityChangedNotify::_default_rolename_;
#ifndef _MSC_VER
const int CMessageFamilyStabilityChangedNotify::kReasonFieldNumber;
const int CMessageFamilyStabilityChangedNotify::kStabilityFieldNumber;
const int CMessageFamilyStabilityChangedNotify::kValueFieldNumber;
const int CMessageFamilyStabilityChangedNotify::kRoleIDFieldNumber;
const int CMessageFamilyStabilityChangedNotify::kRoleNameFieldNumber;
const int CMessageFamilyStabilityChangedNotify::kOnLineTimeFieldNumber;
#endif  // !_MSC_VER

CMessageFamilyStabilityChangedNotify::CMessageFamilyStabilityChangedNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFamilyStabilityChangedNotify::InitAsDefaultInstance() {}

CMessageFamilyStabilityChangedNotify::CMessageFamilyStabilityChangedNotify(const CMessageFamilyStabilityChangedNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFamilyStabilityChangedNotify::SharedCtor() {
  _cached_size_ = 0;
  reason_ = 0u;
  stability_ = 0u;
  value_ = 0u;
  roleid_ = 0u;
  rolename_ = const_cast< ::std::string*>(&_default_rolename_);
  onlinetime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFamilyStabilityChangedNotify::~CMessageFamilyStabilityChangedNotify() {
  SharedDtor();
}

void CMessageFamilyStabilityChangedNotify::SharedDtor() {
  if (rolename_ != &_default_rolename_) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageFamilyStabilityChangedNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFamilyStabilityChangedNotify_descriptor_;
}

const CMessageFamilyStabilityChangedNotify& CMessageFamilyStabilityChangedNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familymessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFamilyStabilityChangedNotify* CMessageFamilyStabilityChangedNotify::default_instance_ = NULL;

CMessageFamilyStabilityChangedNotify* CMessageFamilyStabilityChangedNotify::New() const {
  return new CMessageFamilyStabilityChangedNotify;
}

void CMessageFamilyStabilityChangedNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reason_ = 0u;
    stability_ = 0u;
    value_ = 0u;
    roleid_ = 0u;
    if (_has_bit(4)) {
      if (rolename_ != &_default_rolename_) {
        rolename_->clear();
      }
    }
    onlinetime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFamilyStabilityChangedNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Reason = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &reason_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Stability;
        break;
      }
      
      // optional uint32 Stability = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Stability:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &stability_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Value;
        break;
      }
      
      // optional uint32 Value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Value:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &value_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_RoleName;
        break;
      }
      
      // optional string RoleName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RoleName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_rolename()));
        if (input->ExpectTag(48)) goto parse_OnLineTime;
        break;
      }
      
      // optional uint32 OnLineTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OnLineTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &onlinetime_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageFamilyStabilityChangedNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFamilyStabilityChangedNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Reason = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->reason(), output);
  }
  
  // optional uint32 Stability = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->stability(), output);
  }
  
  // optional uint32 Value = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->value(), output);
  }
  
  // optional uint32 RoleID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->roleid(), output);
  }
  
  // optional string RoleName = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->rolename(), output);
  }
  
  // optional uint32 OnLineTime = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->onlinetime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFamilyStabilityChangedNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Reason = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->reason(), target);
  }
  
  // optional uint32 Stability = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->stability(), target);
  }
  
  // optional uint32 Value = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->value(), target);
  }
  
  // optional uint32 RoleID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->roleid(), target);
  }
  
  // optional string RoleName = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->rolename(), target);
  }
  
  // optional uint32 OnLineTime = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->onlinetime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFamilyStabilityChangedNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Reason = 1;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->reason());
    }
    
    // optional uint32 Stability = 2;
    if (has_stability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->stability());
    }
    
    // optional uint32 Value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->value());
    }
    
    // optional uint32 RoleID = 4;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional string RoleName = 5;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->rolename());
    }
    
    // optional uint32 OnLineTime = 6;
    if (has_onlinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->onlinetime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFamilyStabilityChangedNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFamilyStabilityChangedNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFamilyStabilityChangedNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFamilyStabilityChangedNotify::MergeFrom(const CMessageFamilyStabilityChangedNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_reason(from.reason());
    }
    if (from._has_bit(1)) {
      set_stability(from.stability());
    }
    if (from._has_bit(2)) {
      set_value(from.value());
    }
    if (from._has_bit(3)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(4)) {
      set_rolename(from.rolename());
    }
    if (from._has_bit(5)) {
      set_onlinetime(from.onlinetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFamilyStabilityChangedNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFamilyStabilityChangedNotify::CopyFrom(const CMessageFamilyStabilityChangedNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFamilyStabilityChangedNotify::Swap(CMessageFamilyStabilityChangedNotify* other) {
  if (other != this) {
    std::swap(reason_, other->reason_);
    std::swap(stability_, other->stability_);
    std::swap(value_, other->value_);
    std::swap(roleid_, other->roleid_);
    std::swap(rolename_, other->rolename_);
    std::swap(onlinetime_, other->onlinetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFamilyStabilityChangedNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFamilyStabilityChangedNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFamilyStabilityChangedNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFamilyStabilityChangedNotify_reflection_;
}
