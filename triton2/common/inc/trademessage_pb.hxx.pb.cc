// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "trademessage_pb.hxx.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>
#ifdef LEAK_CHK_DEBUG_NEW
#include "debug_new.h"
#endif

namespace {

const ::google::protobuf::Descriptor* CMessageTradeInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTradeInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTradeInviteCallBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTradeInviteCallBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTradeInviteReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTradeInviteReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageNotifyTradeBegin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageNotifyTradeBegin_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageSendGoodsInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageSendGoodsInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageNotifyGoodsInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageNotifyGoodsInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageSendTradeMoney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageSendTradeMoney_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageNotifyTradeMoney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageNotifyTradeMoney_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLockTradeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLockTradeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageNotifyTradeInfoLock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageNotifyTradeInfoLock_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCloseTrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCloseTrade_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageNotifyTradeClose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageNotifyTradeClose_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageNotifyResultCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageNotifyResultCode_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageSubmitTrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageSubmitTrade_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TradeMessageID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_trademessage_5fpb_2ehxx() {
  protobuf_AddDesc_trademessage_5fpb_2ehxx();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "trademessage_pb.hxx");
  GOOGLE_CHECK(file != NULL);
  CMessageTradeInvite_descriptor_ = file->message_type(0);
  static const int CMessageTradeInvite_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTradeInvite, targetentityid_),
  };
  CMessageTradeInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTradeInvite_descriptor_,
      CMessageTradeInvite::default_instance_,
      CMessageTradeInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTradeInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTradeInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTradeInvite));
  CMessageTradeInviteCallBack_descriptor_ = file->message_type(1);
  static const int CMessageTradeInviteCallBack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTradeInviteCallBack, originentityid_),
  };
  CMessageTradeInviteCallBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTradeInviteCallBack_descriptor_,
      CMessageTradeInviteCallBack::default_instance_,
      CMessageTradeInviteCallBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTradeInviteCallBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTradeInviteCallBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTradeInviteCallBack));
  CMessageTradeInviteReply_descriptor_ = file->message_type(2);
  static const int CMessageTradeInviteReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTradeInviteReply, originentityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTradeInviteReply, code_),
  };
  CMessageTradeInviteReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTradeInviteReply_descriptor_,
      CMessageTradeInviteReply::default_instance_,
      CMessageTradeInviteReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTradeInviteReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTradeInviteReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTradeInviteReply));
  CMessageNotifyTradeBegin_descriptor_ = file->message_type(3);
  static const int CMessageNotifyTradeBegin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifyTradeBegin, targetentityid_),
  };
  CMessageNotifyTradeBegin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageNotifyTradeBegin_descriptor_,
      CMessageNotifyTradeBegin::default_instance_,
      CMessageNotifyTradeBegin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifyTradeBegin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifyTradeBegin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageNotifyTradeBegin));
  CMessageSendGoodsInfo_descriptor_ = file->message_type(4);
  static const int CMessageSendGoodsInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSendGoodsInfo, tradetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSendGoodsInfo, tradeindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSendGoodsInfo, itemindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSendGoodsInfo, count_),
  };
  CMessageSendGoodsInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageSendGoodsInfo_descriptor_,
      CMessageSendGoodsInfo::default_instance_,
      CMessageSendGoodsInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSendGoodsInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSendGoodsInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageSendGoodsInfo));
  CMessageNotifyGoodsInfo_descriptor_ = file->message_type(5);
  static const int CMessageNotifyGoodsInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifyGoodsInfo, goodsbuff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifyGoodsInfo, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifyGoodsInfo, bufflen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifyGoodsInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifyGoodsInfo, tradeindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifyGoodsInfo, isself_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifyGoodsInfo, itemindex_),
  };
  CMessageNotifyGoodsInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageNotifyGoodsInfo_descriptor_,
      CMessageNotifyGoodsInfo::default_instance_,
      CMessageNotifyGoodsInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifyGoodsInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifyGoodsInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageNotifyGoodsInfo));
  CMessageSendTradeMoney_descriptor_ = file->message_type(6);
  static const int CMessageSendTradeMoney_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSendTradeMoney, money_),
  };
  CMessageSendTradeMoney_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageSendTradeMoney_descriptor_,
      CMessageSendTradeMoney::default_instance_,
      CMessageSendTradeMoney_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSendTradeMoney, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSendTradeMoney, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageSendTradeMoney));
  CMessageNotifyTradeMoney_descriptor_ = file->message_type(7);
  static const int CMessageNotifyTradeMoney_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifyTradeMoney, isself_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifyTradeMoney, money_),
  };
  CMessageNotifyTradeMoney_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageNotifyTradeMoney_descriptor_,
      CMessageNotifyTradeMoney::default_instance_,
      CMessageNotifyTradeMoney_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifyTradeMoney, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifyTradeMoney, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageNotifyTradeMoney));
  CMessageLockTradeInfo_descriptor_ = file->message_type(8);
  static const int CMessageLockTradeInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLockTradeInfo, lockstate_),
  };
  CMessageLockTradeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLockTradeInfo_descriptor_,
      CMessageLockTradeInfo::default_instance_,
      CMessageLockTradeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLockTradeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLockTradeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLockTradeInfo));
  CMessageNotifyTradeInfoLock_descriptor_ = file->message_type(9);
  static const int CMessageNotifyTradeInfoLock_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifyTradeInfoLock, isself_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifyTradeInfoLock, lockstate_),
  };
  CMessageNotifyTradeInfoLock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageNotifyTradeInfoLock_descriptor_,
      CMessageNotifyTradeInfoLock::default_instance_,
      CMessageNotifyTradeInfoLock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifyTradeInfoLock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifyTradeInfoLock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageNotifyTradeInfoLock));
  CMessageCloseTrade_descriptor_ = file->message_type(10);
  static const int CMessageCloseTrade_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCloseTrade, code_),
  };
  CMessageCloseTrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCloseTrade_descriptor_,
      CMessageCloseTrade::default_instance_,
      CMessageCloseTrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCloseTrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCloseTrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCloseTrade));
  CMessageNotifyTradeClose_descriptor_ = file->message_type(11);
  static const int CMessageNotifyTradeClose_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifyTradeClose, code_),
  };
  CMessageNotifyTradeClose_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageNotifyTradeClose_descriptor_,
      CMessageNotifyTradeClose::default_instance_,
      CMessageNotifyTradeClose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifyTradeClose, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifyTradeClose, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageNotifyTradeClose));
  CMessageNotifyResultCode_descriptor_ = file->message_type(12);
  static const int CMessageNotifyResultCode_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifyResultCode, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifyResultCode, entityid_),
  };
  CMessageNotifyResultCode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageNotifyResultCode_descriptor_,
      CMessageNotifyResultCode::default_instance_,
      CMessageNotifyResultCode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifyResultCode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifyResultCode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageNotifyResultCode));
  CMessageSubmitTrade_descriptor_ = file->message_type(13);
  static const int CMessageSubmitTrade_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSubmitTrade, code_),
  };
  CMessageSubmitTrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageSubmitTrade_descriptor_,
      CMessageSubmitTrade::default_instance_,
      CMessageSubmitTrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSubmitTrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSubmitTrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageSubmitTrade));
  TradeMessageID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_trademessage_5fpb_2ehxx);
}

void protobuf_RegisterTypes() {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTradeInvite_descriptor_, &CMessageTradeInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTradeInviteCallBack_descriptor_, &CMessageTradeInviteCallBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTradeInviteReply_descriptor_, &CMessageTradeInviteReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageNotifyTradeBegin_descriptor_, &CMessageNotifyTradeBegin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageSendGoodsInfo_descriptor_, &CMessageSendGoodsInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageNotifyGoodsInfo_descriptor_, &CMessageNotifyGoodsInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageSendTradeMoney_descriptor_, &CMessageSendTradeMoney::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageNotifyTradeMoney_descriptor_, &CMessageNotifyTradeMoney::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLockTradeInfo_descriptor_, &CMessageLockTradeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageNotifyTradeInfoLock_descriptor_, &CMessageNotifyTradeInfoLock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCloseTrade_descriptor_, &CMessageCloseTrade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageNotifyTradeClose_descriptor_, &CMessageNotifyTradeClose::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageNotifyResultCode_descriptor_, &CMessageNotifyResultCode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageSubmitTrade_descriptor_, &CMessageSubmitTrade::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_trademessage_5fpb_2ehxx() {
  delete CMessageTradeInvite::default_instance_;
  delete CMessageTradeInvite_reflection_;
  delete CMessageTradeInviteCallBack::default_instance_;
  delete CMessageTradeInviteCallBack_reflection_;
  delete CMessageTradeInviteReply::default_instance_;
  delete CMessageTradeInviteReply_reflection_;
  delete CMessageNotifyTradeBegin::default_instance_;
  delete CMessageNotifyTradeBegin_reflection_;
  delete CMessageSendGoodsInfo::default_instance_;
  delete CMessageSendGoodsInfo_reflection_;
  delete CMessageNotifyGoodsInfo::default_instance_;
  delete CMessageNotifyGoodsInfo_reflection_;
  delete CMessageSendTradeMoney::default_instance_;
  delete CMessageSendTradeMoney_reflection_;
  delete CMessageNotifyTradeMoney::default_instance_;
  delete CMessageNotifyTradeMoney_reflection_;
  delete CMessageLockTradeInfo::default_instance_;
  delete CMessageLockTradeInfo_reflection_;
  delete CMessageNotifyTradeInfoLock::default_instance_;
  delete CMessageNotifyTradeInfoLock_reflection_;
  delete CMessageCloseTrade::default_instance_;
  delete CMessageCloseTrade_reflection_;
  delete CMessageNotifyTradeClose::default_instance_;
  delete CMessageNotifyTradeClose_reflection_;
  delete CMessageNotifyResultCode::default_instance_;
  delete CMessageNotifyResultCode_reflection_;
  delete CMessageSubmitTrade::default_instance_;
  delete CMessageSubmitTrade_reflection_;
}

void protobuf_AddDesc_trademessage_5fpb_2ehxx() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_coremessage_5fpb_2ehxx();
  ::protobuf_AddDesc_property_5fpb_2ehxx();
  #ifndef _NO_PROTOBUF_STR_
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023trademessage_pb.hxx\032\022coremessage_pb.hx"
    "x\032\017property_pb.hxx\"-\n\023CMessageTradeInvit"
    "e\022\026\n\016TargetEntityID\030\001 \001(\r\"5\n\033CMessageTra"
    "deInviteCallBack\022\026\n\016OriginEntityID\030\001 \001(\r"
    "\"@\n\030CMessageTradeInviteReply\022\026\n\016OriginEn"
    "tityID\030\001 \001(\r\022\014\n\004Code\030\002 \001(\r\"2\n\030CMessageNo"
    "tifyTradeBegin\022\026\n\016TargetEntityID\030\001 \001(\r\"`"
    "\n\025CMessageSendGoodsInfo\022\021\n\tTradeType\030\001 \001"
    "(\r\022\022\n\nTradeIndex\030\002 \001(\r\022\021\n\tItemIndex\030\003 \001("
    "\r\022\r\n\005Count\030\004 \001(\r\"\237\001\n\027CMessageNotifyGoods"
    "Info\022\021\n\tGoodsBuff\030\001 \001(\014\022\033\n\004Item\030\002 \001(\0132\r."
    "PBItemObject\022\017\n\007BuffLen\030\003 \001(\r\022\014\n\004Type\030\004 "
    "\001(\r\022\022\n\nTradeIndex\030\005 \001(\r\022\016\n\006IsSelf\030\006 \001(\r\022"
    "\021\n\tItemIndex\030\007 \001(\r\"\'\n\026CMessageSendTradeM"
    "oney\022\r\n\005Money\030\001 \001(\r\"9\n\030CMessageNotifyTra"
    "deMoney\022\016\n\006IsSelf\030\001 \001(\r\022\r\n\005Money\030\002 \001(\r\"*"
    "\n\025CMessageLockTradeInfo\022\021\n\tLockState\030\001 \001"
    "(\r\"@\n\033CMessageNotifyTradeInfoLock\022\016\n\006IsS"
    "elf\030\001 \001(\r\022\021\n\tLockState\030\002 \001(\r\"\"\n\022CMessage"
    "CloseTrade\022\014\n\004Code\030\001 \001(\r\"(\n\030CMessageNoti"
    "fyTradeClose\022\014\n\004Code\030\001 \001(\r\":\n\030CMessageNo"
    "tifyResultCode\022\014\n\004Code\030\001 \001(\r\022\020\n\010EntityID"
    "\030\002 \001(\r\"#\n\023CMessageSubmitTrade\022\014\n\004Code\030\001 "
    "\001(\r*\327\003\n\016TradeMessageID\022\037\n\032ID_C2S_REQUEST"
    "_TRADEINVITE\020\200H\022\034\n\027ID_S2C_NOTIFY_INVITER"
    "TN\020\201H\022\037\n\032ID_C2S_REQUEST_INVITEREPLY\020\202H\022\035"
    "\n\030ID_S2C_NOTIFY_TRADEBEGIN\020\203H\022!\n\034ID_C2S_"
    "REQUEST_SENDGOODSINFO\020\204H\022\034\n\027ID_S2C_NOTIF"
    "Y_GOODSINFO\020\205H\022\"\n\035ID_C2S_REQUEST_SENDTRA"
    "DEMONEY\020\206H\022\035\n\030ID_S2C_NOTIFY_TRADEMONEY\020\207"
    "H\022!\n\034ID_C2S_REQUEST_LOCKTRADEINFO\020\210H\022 \n\033"
    "ID_S2C_NOTIFY_TRADEINFOLOCK\020\211H\022\036\n\031ID_C2S"
    "_REQUEST_CLOSETRADE\020\220H\022\035\n\030ID_S2C_NOTIFY_"
    "TRADECLOSE\020\221H\022\037\n\032ID_C2S_REQUEST_SUBMITTR"
    "ADE\020\222H\022\035\n\030ID_S2C_NOTIFY_RESULTCODE\020\223HB\002H"
    "\001", 1401);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "trademessage_pb.hxx", &protobuf_RegisterTypes);
  #endif
  CMessageTradeInvite::default_instance_ = new CMessageTradeInvite();
  CMessageTradeInviteCallBack::default_instance_ = new CMessageTradeInviteCallBack();
  CMessageTradeInviteReply::default_instance_ = new CMessageTradeInviteReply();
  CMessageNotifyTradeBegin::default_instance_ = new CMessageNotifyTradeBegin();
  CMessageSendGoodsInfo::default_instance_ = new CMessageSendGoodsInfo();
  CMessageNotifyGoodsInfo::default_instance_ = new CMessageNotifyGoodsInfo();
  CMessageSendTradeMoney::default_instance_ = new CMessageSendTradeMoney();
  CMessageNotifyTradeMoney::default_instance_ = new CMessageNotifyTradeMoney();
  CMessageLockTradeInfo::default_instance_ = new CMessageLockTradeInfo();
  CMessageNotifyTradeInfoLock::default_instance_ = new CMessageNotifyTradeInfoLock();
  CMessageCloseTrade::default_instance_ = new CMessageCloseTrade();
  CMessageNotifyTradeClose::default_instance_ = new CMessageNotifyTradeClose();
  CMessageNotifyResultCode::default_instance_ = new CMessageNotifyResultCode();
  CMessageSubmitTrade::default_instance_ = new CMessageSubmitTrade();
  CMessageTradeInvite::default_instance_->InitAsDefaultInstance();
  CMessageTradeInviteCallBack::default_instance_->InitAsDefaultInstance();
  CMessageTradeInviteReply::default_instance_->InitAsDefaultInstance();
  CMessageNotifyTradeBegin::default_instance_->InitAsDefaultInstance();
  CMessageSendGoodsInfo::default_instance_->InitAsDefaultInstance();
  CMessageNotifyGoodsInfo::default_instance_->InitAsDefaultInstance();
  CMessageSendTradeMoney::default_instance_->InitAsDefaultInstance();
  CMessageNotifyTradeMoney::default_instance_->InitAsDefaultInstance();
  CMessageLockTradeInfo::default_instance_->InitAsDefaultInstance();
  CMessageNotifyTradeInfoLock::default_instance_->InitAsDefaultInstance();
  CMessageCloseTrade::default_instance_->InitAsDefaultInstance();
  CMessageNotifyTradeClose::default_instance_->InitAsDefaultInstance();
  CMessageNotifyResultCode::default_instance_->InitAsDefaultInstance();
  CMessageSubmitTrade::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_trademessage_5fpb_2ehxx);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_trademessage_5fpb_2ehxx {
  StaticDescriptorInitializer_trademessage_5fpb_2ehxx() {
    protobuf_AddDesc_trademessage_5fpb_2ehxx();
  }
} static_descriptor_initializer_trademessage_5fpb_2ehxx_;

const ::google::protobuf::EnumDescriptor* TradeMessageID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradeMessageID_descriptor_;
}
bool TradeMessageID_IsValid(int value) {
  switch(value) {
    case 9216:
    case 9217:
    case 9218:
    case 9219:
    case 9220:
    case 9221:
    case 9222:
    case 9223:
    case 9224:
    case 9225:
    case 9232:
    case 9233:
    case 9234:
    case 9235:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CMessageTradeInvite::kTargetEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageTradeInvite::CMessageTradeInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTradeInvite::InitAsDefaultInstance() {}

CMessageTradeInvite::CMessageTradeInvite(const CMessageTradeInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTradeInvite::SharedCtor() {
  _cached_size_ = 0;
  targetentityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTradeInvite::~CMessageTradeInvite() {
  SharedDtor();
}

void CMessageTradeInvite::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTradeInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTradeInvite_descriptor_;
}

const CMessageTradeInvite& CMessageTradeInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trademessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTradeInvite* CMessageTradeInvite::default_instance_ = NULL;

CMessageTradeInvite* CMessageTradeInvite::New() const {
  return new CMessageTradeInvite;
}

void CMessageTradeInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    targetentityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTradeInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TargetEntityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &targetentityid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTradeInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTradeInvite::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TargetEntityID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->targetentityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTradeInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TargetEntityID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->targetentityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTradeInvite::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TargetEntityID = 1;
    if (has_targetentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->targetentityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTradeInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTradeInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTradeInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTradeInvite::MergeFrom(const CMessageTradeInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_targetentityid(from.targetentityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTradeInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTradeInvite::CopyFrom(const CMessageTradeInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTradeInvite::Swap(CMessageTradeInvite* other) {
  if (other != this) {
    std::swap(targetentityid_, other->targetentityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTradeInvite::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTradeInvite::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTradeInvite::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTradeInvite_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageTradeInviteCallBack::kOriginEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageTradeInviteCallBack::CMessageTradeInviteCallBack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTradeInviteCallBack::InitAsDefaultInstance() {}

CMessageTradeInviteCallBack::CMessageTradeInviteCallBack(const CMessageTradeInviteCallBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTradeInviteCallBack::SharedCtor() {
  _cached_size_ = 0;
  originentityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTradeInviteCallBack::~CMessageTradeInviteCallBack() {
  SharedDtor();
}

void CMessageTradeInviteCallBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTradeInviteCallBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTradeInviteCallBack_descriptor_;
}

const CMessageTradeInviteCallBack& CMessageTradeInviteCallBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trademessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTradeInviteCallBack* CMessageTradeInviteCallBack::default_instance_ = NULL;

CMessageTradeInviteCallBack* CMessageTradeInviteCallBack::New() const {
  return new CMessageTradeInviteCallBack;
}

void CMessageTradeInviteCallBack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    originentityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTradeInviteCallBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 OriginEntityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &originentityid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTradeInviteCallBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTradeInviteCallBack::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 OriginEntityID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->originentityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTradeInviteCallBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 OriginEntityID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->originentityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTradeInviteCallBack::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 OriginEntityID = 1;
    if (has_originentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->originentityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTradeInviteCallBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTradeInviteCallBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTradeInviteCallBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTradeInviteCallBack::MergeFrom(const CMessageTradeInviteCallBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_originentityid(from.originentityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTradeInviteCallBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTradeInviteCallBack::CopyFrom(const CMessageTradeInviteCallBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTradeInviteCallBack::Swap(CMessageTradeInviteCallBack* other) {
  if (other != this) {
    std::swap(originentityid_, other->originentityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTradeInviteCallBack::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTradeInviteCallBack::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTradeInviteCallBack::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTradeInviteCallBack_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageTradeInviteReply::kOriginEntityIDFieldNumber;
const int CMessageTradeInviteReply::kCodeFieldNumber;
#endif  // !_MSC_VER

CMessageTradeInviteReply::CMessageTradeInviteReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTradeInviteReply::InitAsDefaultInstance() {}

CMessageTradeInviteReply::CMessageTradeInviteReply(const CMessageTradeInviteReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTradeInviteReply::SharedCtor() {
  _cached_size_ = 0;
  originentityid_ = 0u;
  code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTradeInviteReply::~CMessageTradeInviteReply() {
  SharedDtor();
}

void CMessageTradeInviteReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTradeInviteReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTradeInviteReply_descriptor_;
}

const CMessageTradeInviteReply& CMessageTradeInviteReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trademessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTradeInviteReply* CMessageTradeInviteReply::default_instance_ = NULL;

CMessageTradeInviteReply* CMessageTradeInviteReply::New() const {
  return new CMessageTradeInviteReply;
}

void CMessageTradeInviteReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    originentityid_ = 0u;
    code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTradeInviteReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 OriginEntityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &originentityid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Code;
        break;
      }
      
      // optional uint32 Code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Code:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &code_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTradeInviteReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTradeInviteReply::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 OriginEntityID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->originentityid(), output);
  }
  
  // optional uint32 Code = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTradeInviteReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 OriginEntityID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->originentityid(), target);
  }
  
  // optional uint32 Code = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTradeInviteReply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 OriginEntityID = 1;
    if (has_originentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->originentityid());
    }
    
    // optional uint32 Code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTradeInviteReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTradeInviteReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTradeInviteReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTradeInviteReply::MergeFrom(const CMessageTradeInviteReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_originentityid(from.originentityid());
    }
    if (from._has_bit(1)) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTradeInviteReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTradeInviteReply::CopyFrom(const CMessageTradeInviteReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTradeInviteReply::Swap(CMessageTradeInviteReply* other) {
  if (other != this) {
    std::swap(originentityid_, other->originentityid_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTradeInviteReply::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTradeInviteReply::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTradeInviteReply::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTradeInviteReply_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageNotifyTradeBegin::kTargetEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageNotifyTradeBegin::CMessageNotifyTradeBegin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageNotifyTradeBegin::InitAsDefaultInstance() {}

CMessageNotifyTradeBegin::CMessageNotifyTradeBegin(const CMessageNotifyTradeBegin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageNotifyTradeBegin::SharedCtor() {
  _cached_size_ = 0;
  targetentityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageNotifyTradeBegin::~CMessageNotifyTradeBegin() {
  SharedDtor();
}

void CMessageNotifyTradeBegin::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageNotifyTradeBegin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageNotifyTradeBegin_descriptor_;
}

const CMessageNotifyTradeBegin& CMessageNotifyTradeBegin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trademessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageNotifyTradeBegin* CMessageNotifyTradeBegin::default_instance_ = NULL;

CMessageNotifyTradeBegin* CMessageNotifyTradeBegin::New() const {
  return new CMessageNotifyTradeBegin;
}

void CMessageNotifyTradeBegin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    targetentityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageNotifyTradeBegin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TargetEntityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &targetentityid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageNotifyTradeBegin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageNotifyTradeBegin::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TargetEntityID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->targetentityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageNotifyTradeBegin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TargetEntityID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->targetentityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageNotifyTradeBegin::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TargetEntityID = 1;
    if (has_targetentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->targetentityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageNotifyTradeBegin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageNotifyTradeBegin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageNotifyTradeBegin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageNotifyTradeBegin::MergeFrom(const CMessageNotifyTradeBegin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_targetentityid(from.targetentityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageNotifyTradeBegin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageNotifyTradeBegin::CopyFrom(const CMessageNotifyTradeBegin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageNotifyTradeBegin::Swap(CMessageNotifyTradeBegin* other) {
  if (other != this) {
    std::swap(targetentityid_, other->targetentityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageNotifyTradeBegin::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageNotifyTradeBegin::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageNotifyTradeBegin::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageNotifyTradeBegin_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageSendGoodsInfo::kTradeTypeFieldNumber;
const int CMessageSendGoodsInfo::kTradeIndexFieldNumber;
const int CMessageSendGoodsInfo::kItemIndexFieldNumber;
const int CMessageSendGoodsInfo::kCountFieldNumber;
#endif  // !_MSC_VER

CMessageSendGoodsInfo::CMessageSendGoodsInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageSendGoodsInfo::InitAsDefaultInstance() {}

CMessageSendGoodsInfo::CMessageSendGoodsInfo(const CMessageSendGoodsInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageSendGoodsInfo::SharedCtor() {
  _cached_size_ = 0;
  tradetype_ = 0u;
  tradeindex_ = 0u;
  itemindex_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageSendGoodsInfo::~CMessageSendGoodsInfo() {
  SharedDtor();
}

void CMessageSendGoodsInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageSendGoodsInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageSendGoodsInfo_descriptor_;
}

const CMessageSendGoodsInfo& CMessageSendGoodsInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trademessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageSendGoodsInfo* CMessageSendGoodsInfo::default_instance_ = NULL;

CMessageSendGoodsInfo* CMessageSendGoodsInfo::New() const {
  return new CMessageSendGoodsInfo;
}

void CMessageSendGoodsInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tradetype_ = 0u;
    tradeindex_ = 0u;
    itemindex_ = 0u;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageSendGoodsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TradeType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tradetype_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_TradeIndex;
        break;
      }
      
      // optional uint32 TradeIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TradeIndex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tradeindex_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_ItemIndex;
        break;
      }
      
      // optional uint32 ItemIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemIndex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemindex_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Count;
        break;
      }
      
      // optional uint32 Count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Count:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &count_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageSendGoodsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageSendGoodsInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TradeType = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tradetype(), output);
  }
  
  // optional uint32 TradeIndex = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->tradeindex(), output);
  }
  
  // optional uint32 ItemIndex = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->itemindex(), output);
  }
  
  // optional uint32 Count = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageSendGoodsInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TradeType = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tradetype(), target);
  }
  
  // optional uint32 TradeIndex = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->tradeindex(), target);
  }
  
  // optional uint32 ItemIndex = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->itemindex(), target);
  }
  
  // optional uint32 Count = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageSendGoodsInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TradeType = 1;
    if (has_tradetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tradetype());
    }
    
    // optional uint32 TradeIndex = 2;
    if (has_tradeindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tradeindex());
    }
    
    // optional uint32 ItemIndex = 3;
    if (has_itemindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemindex());
    }
    
    // optional uint32 Count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageSendGoodsInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageSendGoodsInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageSendGoodsInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageSendGoodsInfo::MergeFrom(const CMessageSendGoodsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tradetype(from.tradetype());
    }
    if (from._has_bit(1)) {
      set_tradeindex(from.tradeindex());
    }
    if (from._has_bit(2)) {
      set_itemindex(from.itemindex());
    }
    if (from._has_bit(3)) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageSendGoodsInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSendGoodsInfo::CopyFrom(const CMessageSendGoodsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSendGoodsInfo::Swap(CMessageSendGoodsInfo* other) {
  if (other != this) {
    std::swap(tradetype_, other->tradetype_);
    std::swap(tradeindex_, other->tradeindex_);
    std::swap(itemindex_, other->itemindex_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageSendGoodsInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageSendGoodsInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageSendGoodsInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageSendGoodsInfo_reflection_;
}

// ===================================================================

const ::std::string CMessageNotifyGoodsInfo::_default_goodsbuff_;
#ifndef _MSC_VER
const int CMessageNotifyGoodsInfo::kGoodsBuffFieldNumber;
const int CMessageNotifyGoodsInfo::kItemFieldNumber;
const int CMessageNotifyGoodsInfo::kBuffLenFieldNumber;
const int CMessageNotifyGoodsInfo::kTypeFieldNumber;
const int CMessageNotifyGoodsInfo::kTradeIndexFieldNumber;
const int CMessageNotifyGoodsInfo::kIsSelfFieldNumber;
const int CMessageNotifyGoodsInfo::kItemIndexFieldNumber;
#endif  // !_MSC_VER

CMessageNotifyGoodsInfo::CMessageNotifyGoodsInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageNotifyGoodsInfo::InitAsDefaultInstance() {  item_ = const_cast< ::PBItemObject*>(&::PBItemObject::default_instance());
}

CMessageNotifyGoodsInfo::CMessageNotifyGoodsInfo(const CMessageNotifyGoodsInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageNotifyGoodsInfo::SharedCtor() {
  _cached_size_ = 0;
  goodsbuff_ = const_cast< ::std::string*>(&_default_goodsbuff_);
  item_ = NULL;
  bufflen_ = 0u;
  type_ = 0u;
  tradeindex_ = 0u;
  isself_ = 0u;
  itemindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageNotifyGoodsInfo::~CMessageNotifyGoodsInfo() {
  SharedDtor();
}

void CMessageNotifyGoodsInfo::SharedDtor() {
  if (goodsbuff_ != &_default_goodsbuff_) {
    delete goodsbuff_;
  }
  if (this != default_instance_) {
    delete item_;
  }
}

const ::google::protobuf::Descriptor* CMessageNotifyGoodsInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageNotifyGoodsInfo_descriptor_;
}

const CMessageNotifyGoodsInfo& CMessageNotifyGoodsInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trademessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageNotifyGoodsInfo* CMessageNotifyGoodsInfo::default_instance_ = NULL;

CMessageNotifyGoodsInfo* CMessageNotifyGoodsInfo::New() const {
  return new CMessageNotifyGoodsInfo;
}

void CMessageNotifyGoodsInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (goodsbuff_ != &_default_goodsbuff_) {
        goodsbuff_->clear();
      }
    }
    if (_has_bit(1)) {
      if (item_ != NULL) item_->::PBItemObject::Clear();
    }
    bufflen_ = 0u;
    type_ = 0u;
    tradeindex_ = 0u;
    isself_ = 0u;
    itemindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageNotifyGoodsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional bytes GoodsBuff = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_goodsbuff()));
        if (input->ExpectTag(18)) goto parse_Item;
        break;
      }
      
      // optional .PBItemObject Item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Item:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_item()));
        if (input->ExpectTag(24)) goto parse_BuffLen;
        break;
      }
      
      // optional uint32 BuffLen = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BuffLen:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &bufflen_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Type;
        break;
      }
      
      // optional uint32 Type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Type:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_TradeIndex;
        break;
      }
      
      // optional uint32 TradeIndex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TradeIndex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tradeindex_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_IsSelf;
        break;
      }
      
      // optional uint32 IsSelf = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IsSelf:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &isself_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_ItemIndex;
        break;
      }
      
      // optional uint32 ItemIndex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemIndex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemindex_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageNotifyGoodsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageNotifyGoodsInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional bytes GoodsBuff = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->goodsbuff(), output);
  }
  
  // optional .PBItemObject Item = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->item(), output);
  }
  
  // optional uint32 BuffLen = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->bufflen(), output);
  }
  
  // optional uint32 Type = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->type(), output);
  }
  
  // optional uint32 TradeIndex = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->tradeindex(), output);
  }
  
  // optional uint32 IsSelf = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->isself(), output);
  }
  
  // optional uint32 ItemIndex = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->itemindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageNotifyGoodsInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes GoodsBuff = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->goodsbuff(), target);
  }
  
  // optional .PBItemObject Item = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->item(), target);
  }
  
  // optional uint32 BuffLen = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->bufflen(), target);
  }
  
  // optional uint32 Type = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->type(), target);
  }
  
  // optional uint32 TradeIndex = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->tradeindex(), target);
  }
  
  // optional uint32 IsSelf = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->isself(), target);
  }
  
  // optional uint32 ItemIndex = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->itemindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageNotifyGoodsInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes GoodsBuff = 1;
    if (has_goodsbuff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->goodsbuff());
    }
    
    // optional .PBItemObject Item = 2;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->item());
    }
    
    // optional uint32 BuffLen = 3;
    if (has_bufflen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->bufflen());
    }
    
    // optional uint32 Type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
    // optional uint32 TradeIndex = 5;
    if (has_tradeindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tradeindex());
    }
    
    // optional uint32 IsSelf = 6;
    if (has_isself()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->isself());
    }
    
    // optional uint32 ItemIndex = 7;
    if (has_itemindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemindex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageNotifyGoodsInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageNotifyGoodsInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageNotifyGoodsInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageNotifyGoodsInfo::MergeFrom(const CMessageNotifyGoodsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_goodsbuff(from.goodsbuff());
    }
    if (from._has_bit(1)) {
      mutable_item()->::PBItemObject::MergeFrom(from.item());
    }
    if (from._has_bit(2)) {
      set_bufflen(from.bufflen());
    }
    if (from._has_bit(3)) {
      set_type(from.type());
    }
    if (from._has_bit(4)) {
      set_tradeindex(from.tradeindex());
    }
    if (from._has_bit(5)) {
      set_isself(from.isself());
    }
    if (from._has_bit(6)) {
      set_itemindex(from.itemindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageNotifyGoodsInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageNotifyGoodsInfo::CopyFrom(const CMessageNotifyGoodsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageNotifyGoodsInfo::Swap(CMessageNotifyGoodsInfo* other) {
  if (other != this) {
    std::swap(goodsbuff_, other->goodsbuff_);
    std::swap(item_, other->item_);
    std::swap(bufflen_, other->bufflen_);
    std::swap(type_, other->type_);
    std::swap(tradeindex_, other->tradeindex_);
    std::swap(isself_, other->isself_);
    std::swap(itemindex_, other->itemindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageNotifyGoodsInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageNotifyGoodsInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageNotifyGoodsInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageNotifyGoodsInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageSendTradeMoney::kMoneyFieldNumber;
#endif  // !_MSC_VER

CMessageSendTradeMoney::CMessageSendTradeMoney()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageSendTradeMoney::InitAsDefaultInstance() {}

CMessageSendTradeMoney::CMessageSendTradeMoney(const CMessageSendTradeMoney& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageSendTradeMoney::SharedCtor() {
  _cached_size_ = 0;
  money_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageSendTradeMoney::~CMessageSendTradeMoney() {
  SharedDtor();
}

void CMessageSendTradeMoney::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageSendTradeMoney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageSendTradeMoney_descriptor_;
}

const CMessageSendTradeMoney& CMessageSendTradeMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trademessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageSendTradeMoney* CMessageSendTradeMoney::default_instance_ = NULL;

CMessageSendTradeMoney* CMessageSendTradeMoney::New() const {
  return new CMessageSendTradeMoney;
}

void CMessageSendTradeMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    money_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageSendTradeMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Money = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageSendTradeMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageSendTradeMoney::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Money = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->money(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageSendTradeMoney::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Money = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->money(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageSendTradeMoney::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Money = 1;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageSendTradeMoney::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageSendTradeMoney* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageSendTradeMoney*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageSendTradeMoney::MergeFrom(const CMessageSendTradeMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageSendTradeMoney::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSendTradeMoney::CopyFrom(const CMessageSendTradeMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSendTradeMoney::Swap(CMessageSendTradeMoney* other) {
  if (other != this) {
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageSendTradeMoney::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageSendTradeMoney::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageSendTradeMoney::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageSendTradeMoney_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageNotifyTradeMoney::kIsSelfFieldNumber;
const int CMessageNotifyTradeMoney::kMoneyFieldNumber;
#endif  // !_MSC_VER

CMessageNotifyTradeMoney::CMessageNotifyTradeMoney()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageNotifyTradeMoney::InitAsDefaultInstance() {}

CMessageNotifyTradeMoney::CMessageNotifyTradeMoney(const CMessageNotifyTradeMoney& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageNotifyTradeMoney::SharedCtor() {
  _cached_size_ = 0;
  isself_ = 0u;
  money_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageNotifyTradeMoney::~CMessageNotifyTradeMoney() {
  SharedDtor();
}

void CMessageNotifyTradeMoney::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageNotifyTradeMoney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageNotifyTradeMoney_descriptor_;
}

const CMessageNotifyTradeMoney& CMessageNotifyTradeMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trademessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageNotifyTradeMoney* CMessageNotifyTradeMoney::default_instance_ = NULL;

CMessageNotifyTradeMoney* CMessageNotifyTradeMoney::New() const {
  return new CMessageNotifyTradeMoney;
}

void CMessageNotifyTradeMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isself_ = 0u;
    money_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageNotifyTradeMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 IsSelf = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &isself_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Money;
        break;
      }
      
      // optional uint32 Money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageNotifyTradeMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageNotifyTradeMoney::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 IsSelf = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->isself(), output);
  }
  
  // optional uint32 Money = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->money(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageNotifyTradeMoney::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 IsSelf = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->isself(), target);
  }
  
  // optional uint32 Money = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->money(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageNotifyTradeMoney::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 IsSelf = 1;
    if (has_isself()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->isself());
    }
    
    // optional uint32 Money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageNotifyTradeMoney::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageNotifyTradeMoney* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageNotifyTradeMoney*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageNotifyTradeMoney::MergeFrom(const CMessageNotifyTradeMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_isself(from.isself());
    }
    if (from._has_bit(1)) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageNotifyTradeMoney::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageNotifyTradeMoney::CopyFrom(const CMessageNotifyTradeMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageNotifyTradeMoney::Swap(CMessageNotifyTradeMoney* other) {
  if (other != this) {
    std::swap(isself_, other->isself_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageNotifyTradeMoney::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageNotifyTradeMoney::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageNotifyTradeMoney::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageNotifyTradeMoney_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLockTradeInfo::kLockStateFieldNumber;
#endif  // !_MSC_VER

CMessageLockTradeInfo::CMessageLockTradeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLockTradeInfo::InitAsDefaultInstance() {}

CMessageLockTradeInfo::CMessageLockTradeInfo(const CMessageLockTradeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLockTradeInfo::SharedCtor() {
  _cached_size_ = 0;
  lockstate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLockTradeInfo::~CMessageLockTradeInfo() {
  SharedDtor();
}

void CMessageLockTradeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLockTradeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLockTradeInfo_descriptor_;
}

const CMessageLockTradeInfo& CMessageLockTradeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trademessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageLockTradeInfo* CMessageLockTradeInfo::default_instance_ = NULL;

CMessageLockTradeInfo* CMessageLockTradeInfo::New() const {
  return new CMessageLockTradeInfo;
}

void CMessageLockTradeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lockstate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLockTradeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 LockState = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lockstate_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLockTradeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLockTradeInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 LockState = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->lockstate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLockTradeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 LockState = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->lockstate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLockTradeInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 LockState = 1;
    if (has_lockstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lockstate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLockTradeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLockTradeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLockTradeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLockTradeInfo::MergeFrom(const CMessageLockTradeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_lockstate(from.lockstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLockTradeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLockTradeInfo::CopyFrom(const CMessageLockTradeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLockTradeInfo::Swap(CMessageLockTradeInfo* other) {
  if (other != this) {
    std::swap(lockstate_, other->lockstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLockTradeInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLockTradeInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLockTradeInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLockTradeInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageNotifyTradeInfoLock::kIsSelfFieldNumber;
const int CMessageNotifyTradeInfoLock::kLockStateFieldNumber;
#endif  // !_MSC_VER

CMessageNotifyTradeInfoLock::CMessageNotifyTradeInfoLock()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageNotifyTradeInfoLock::InitAsDefaultInstance() {}

CMessageNotifyTradeInfoLock::CMessageNotifyTradeInfoLock(const CMessageNotifyTradeInfoLock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageNotifyTradeInfoLock::SharedCtor() {
  _cached_size_ = 0;
  isself_ = 0u;
  lockstate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageNotifyTradeInfoLock::~CMessageNotifyTradeInfoLock() {
  SharedDtor();
}

void CMessageNotifyTradeInfoLock::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageNotifyTradeInfoLock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageNotifyTradeInfoLock_descriptor_;
}

const CMessageNotifyTradeInfoLock& CMessageNotifyTradeInfoLock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trademessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageNotifyTradeInfoLock* CMessageNotifyTradeInfoLock::default_instance_ = NULL;

CMessageNotifyTradeInfoLock* CMessageNotifyTradeInfoLock::New() const {
  return new CMessageNotifyTradeInfoLock;
}

void CMessageNotifyTradeInfoLock::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isself_ = 0u;
    lockstate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageNotifyTradeInfoLock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 IsSelf = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &isself_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_LockState;
        break;
      }
      
      // optional uint32 LockState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LockState:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lockstate_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageNotifyTradeInfoLock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageNotifyTradeInfoLock::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 IsSelf = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->isself(), output);
  }
  
  // optional uint32 LockState = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->lockstate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageNotifyTradeInfoLock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 IsSelf = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->isself(), target);
  }
  
  // optional uint32 LockState = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->lockstate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageNotifyTradeInfoLock::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 IsSelf = 1;
    if (has_isself()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->isself());
    }
    
    // optional uint32 LockState = 2;
    if (has_lockstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lockstate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageNotifyTradeInfoLock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageNotifyTradeInfoLock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageNotifyTradeInfoLock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageNotifyTradeInfoLock::MergeFrom(const CMessageNotifyTradeInfoLock& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_isself(from.isself());
    }
    if (from._has_bit(1)) {
      set_lockstate(from.lockstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageNotifyTradeInfoLock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageNotifyTradeInfoLock::CopyFrom(const CMessageNotifyTradeInfoLock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageNotifyTradeInfoLock::Swap(CMessageNotifyTradeInfoLock* other) {
  if (other != this) {
    std::swap(isself_, other->isself_);
    std::swap(lockstate_, other->lockstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageNotifyTradeInfoLock::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageNotifyTradeInfoLock::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageNotifyTradeInfoLock::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageNotifyTradeInfoLock_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCloseTrade::kCodeFieldNumber;
#endif  // !_MSC_VER

CMessageCloseTrade::CMessageCloseTrade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCloseTrade::InitAsDefaultInstance() {}

CMessageCloseTrade::CMessageCloseTrade(const CMessageCloseTrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCloseTrade::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCloseTrade::~CMessageCloseTrade() {
  SharedDtor();
}

void CMessageCloseTrade::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCloseTrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCloseTrade_descriptor_;
}

const CMessageCloseTrade& CMessageCloseTrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trademessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCloseTrade* CMessageCloseTrade::default_instance_ = NULL;

CMessageCloseTrade* CMessageCloseTrade::New() const {
  return new CMessageCloseTrade;
}

void CMessageCloseTrade::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCloseTrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &code_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCloseTrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCloseTrade::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Code = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCloseTrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Code = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCloseTrade::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCloseTrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCloseTrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCloseTrade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCloseTrade::MergeFrom(const CMessageCloseTrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCloseTrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCloseTrade::CopyFrom(const CMessageCloseTrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCloseTrade::Swap(CMessageCloseTrade* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCloseTrade::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCloseTrade::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCloseTrade::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCloseTrade_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageNotifyTradeClose::kCodeFieldNumber;
#endif  // !_MSC_VER

CMessageNotifyTradeClose::CMessageNotifyTradeClose()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageNotifyTradeClose::InitAsDefaultInstance() {}

CMessageNotifyTradeClose::CMessageNotifyTradeClose(const CMessageNotifyTradeClose& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageNotifyTradeClose::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageNotifyTradeClose::~CMessageNotifyTradeClose() {
  SharedDtor();
}

void CMessageNotifyTradeClose::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageNotifyTradeClose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageNotifyTradeClose_descriptor_;
}

const CMessageNotifyTradeClose& CMessageNotifyTradeClose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trademessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageNotifyTradeClose* CMessageNotifyTradeClose::default_instance_ = NULL;

CMessageNotifyTradeClose* CMessageNotifyTradeClose::New() const {
  return new CMessageNotifyTradeClose;
}

void CMessageNotifyTradeClose::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageNotifyTradeClose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &code_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageNotifyTradeClose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageNotifyTradeClose::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Code = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageNotifyTradeClose::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Code = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageNotifyTradeClose::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageNotifyTradeClose::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageNotifyTradeClose* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageNotifyTradeClose*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageNotifyTradeClose::MergeFrom(const CMessageNotifyTradeClose& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageNotifyTradeClose::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageNotifyTradeClose::CopyFrom(const CMessageNotifyTradeClose& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageNotifyTradeClose::Swap(CMessageNotifyTradeClose* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageNotifyTradeClose::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageNotifyTradeClose::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageNotifyTradeClose::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageNotifyTradeClose_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageNotifyResultCode::kCodeFieldNumber;
const int CMessageNotifyResultCode::kEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageNotifyResultCode::CMessageNotifyResultCode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageNotifyResultCode::InitAsDefaultInstance() {}

CMessageNotifyResultCode::CMessageNotifyResultCode(const CMessageNotifyResultCode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageNotifyResultCode::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0u;
  entityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageNotifyResultCode::~CMessageNotifyResultCode() {
  SharedDtor();
}

void CMessageNotifyResultCode::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageNotifyResultCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageNotifyResultCode_descriptor_;
}

const CMessageNotifyResultCode& CMessageNotifyResultCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trademessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageNotifyResultCode* CMessageNotifyResultCode::default_instance_ = NULL;

CMessageNotifyResultCode* CMessageNotifyResultCode::New() const {
  return new CMessageNotifyResultCode;
}

void CMessageNotifyResultCode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0u;
    entityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageNotifyResultCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &code_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_EntityID;
        break;
      }
      
      // optional uint32 EntityID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageNotifyResultCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageNotifyResultCode::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Code = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->code(), output);
  }
  
  // optional uint32 EntityID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->entityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageNotifyResultCode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Code = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->code(), target);
  }
  
  // optional uint32 EntityID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->entityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageNotifyResultCode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->code());
    }
    
    // optional uint32 EntityID = 2;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageNotifyResultCode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageNotifyResultCode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageNotifyResultCode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageNotifyResultCode::MergeFrom(const CMessageNotifyResultCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_code(from.code());
    }
    if (from._has_bit(1)) {
      set_entityid(from.entityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageNotifyResultCode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageNotifyResultCode::CopyFrom(const CMessageNotifyResultCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageNotifyResultCode::Swap(CMessageNotifyResultCode* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(entityid_, other->entityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageNotifyResultCode::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageNotifyResultCode::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageNotifyResultCode::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageNotifyResultCode_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageSubmitTrade::kCodeFieldNumber;
#endif  // !_MSC_VER

CMessageSubmitTrade::CMessageSubmitTrade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageSubmitTrade::InitAsDefaultInstance() {}

CMessageSubmitTrade::CMessageSubmitTrade(const CMessageSubmitTrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageSubmitTrade::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageSubmitTrade::~CMessageSubmitTrade() {
  SharedDtor();
}

void CMessageSubmitTrade::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageSubmitTrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageSubmitTrade_descriptor_;
}

const CMessageSubmitTrade& CMessageSubmitTrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trademessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageSubmitTrade* CMessageSubmitTrade::default_instance_ = NULL;

CMessageSubmitTrade* CMessageSubmitTrade::New() const {
  return new CMessageSubmitTrade;
}

void CMessageSubmitTrade::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageSubmitTrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &code_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageSubmitTrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageSubmitTrade::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Code = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageSubmitTrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Code = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageSubmitTrade::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageSubmitTrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageSubmitTrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageSubmitTrade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageSubmitTrade::MergeFrom(const CMessageSubmitTrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageSubmitTrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSubmitTrade::CopyFrom(const CMessageSubmitTrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSubmitTrade::Swap(CMessageSubmitTrade* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageSubmitTrade::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageSubmitTrade::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageSubmitTrade::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageSubmitTrade_reflection_;
}
