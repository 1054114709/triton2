// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "mailmessage_pb.hxx.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>
#ifdef LEAK_CHK_DEBUG_NEW
#include "debug_new.h"
#endif

namespace {

const ::google::protobuf::Descriptor* MailItemBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailItemBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageOpenMailBoxRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageOpenMailBoxRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageOpenMailBoxResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageOpenMailBoxResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageShutDownMailBoxRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageShutDownMailBoxRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageMailChangeItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageMailChangeItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageMailChangeItemCallBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageMailChangeItemCallBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageMailCanSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageMailCanSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageMailCanSendCallBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageMailCanSendCallBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccessoryInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccessoryInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageMailSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageMailSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageMailListNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageMailListNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageMailErrorCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageMailErrorCode_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageShutMailBoxRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageShutMailBoxRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageShutReadMailBoxRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageShutReadMailBoxRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageShutSendMailBoxRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageShutSendMailBoxRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageNewMailNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageNewMailNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageMailRead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageMailRead_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageMailReadResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageMailReadResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetAccessory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetAccessory_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageDelMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageDelMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageReadMailEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageReadMailEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBackMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBackMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageDelMailResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageDelMailResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetAccessoryResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetAccessoryResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBackMailResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBackMailResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCannelMailSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCannelMailSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLockMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLockMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUnLockMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUnLockMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetMailPageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetMailPageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageOpenSendMailBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageOpenSendMailBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageOpenSendMailBoxResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageOpenSendMailBoxResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageOpenReadMailBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageOpenReadMailBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageOpenReadMailBoxResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageOpenReadMailBoxResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageMailBoxStatusNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageMailBoxStatusNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePayMailMoneyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePayMailMoneyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePayMailMoneyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePayMailMoneyResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MailMessageID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_mailmessage_5fpb_2ehxx() {
  protobuf_AddDesc_mailmessage_5fpb_2ehxx();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mailmessage_pb.hxx");
  GOOGLE_CHECK(file != NULL);
  MailItemBox_descriptor_ = file->message_type(0);
  static const int MailItemBox_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailItemBox, mailitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailItemBox, itemindex_),
  };
  MailItemBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailItemBox_descriptor_,
      MailItemBox::default_instance_,
      MailItemBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailItemBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailItemBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailItemBox));
  CMessageOpenMailBoxRequest_descriptor_ = file->message_type(1);
  static const int CMessageOpenMailBoxRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOpenMailBoxRequest, msgcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOpenMailBoxRequest, entityid_),
  };
  CMessageOpenMailBoxRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageOpenMailBoxRequest_descriptor_,
      CMessageOpenMailBoxRequest::default_instance_,
      CMessageOpenMailBoxRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOpenMailBoxRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOpenMailBoxRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageOpenMailBoxRequest));
  CMessageOpenMailBoxResponse_descriptor_ = file->message_type(2);
  static const int CMessageOpenMailBoxResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOpenMailBoxResponse, result_),
  };
  CMessageOpenMailBoxResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageOpenMailBoxResponse_descriptor_,
      CMessageOpenMailBoxResponse::default_instance_,
      CMessageOpenMailBoxResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOpenMailBoxResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOpenMailBoxResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageOpenMailBoxResponse));
  CMessageShutDownMailBoxRequest_descriptor_ = file->message_type(3);
  static const int CMessageShutDownMailBoxRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageShutDownMailBoxRequest, msgcode_),
  };
  CMessageShutDownMailBoxRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageShutDownMailBoxRequest_descriptor_,
      CMessageShutDownMailBoxRequest::default_instance_,
      CMessageShutDownMailBoxRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageShutDownMailBoxRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageShutDownMailBoxRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageShutDownMailBoxRequest));
  CMessageMailChangeItem_descriptor_ = file->message_type(4);
  static const int CMessageMailChangeItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailChangeItem, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailChangeItem, srcindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailChangeItem, movemethod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailChangeItem, desindex_),
  };
  CMessageMailChangeItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageMailChangeItem_descriptor_,
      CMessageMailChangeItem::default_instance_,
      CMessageMailChangeItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailChangeItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailChangeItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageMailChangeItem));
  CMessageMailChangeItemCallBack_descriptor_ = file->message_type(5);
  static const int CMessageMailChangeItemCallBack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailChangeItemCallBack, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailChangeItemCallBack, desindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailChangeItemCallBack, movemethod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailChangeItemCallBack, srcindex_),
  };
  CMessageMailChangeItemCallBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageMailChangeItemCallBack_descriptor_,
      CMessageMailChangeItemCallBack::default_instance_,
      CMessageMailChangeItemCallBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailChangeItemCallBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailChangeItemCallBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageMailChangeItemCallBack));
  CMessageMailCanSend_descriptor_ = file->message_type(6);
  static const int CMessageMailCanSend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailCanSend, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailCanSend, entityid_),
  };
  CMessageMailCanSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageMailCanSend_descriptor_,
      CMessageMailCanSend::default_instance_,
      CMessageMailCanSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailCanSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailCanSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageMailCanSend));
  CMessageMailCanSendCallBack_descriptor_ = file->message_type(7);
  static const int CMessageMailCanSendCallBack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailCanSendCallBack, cansendmail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailCanSendCallBack, playercharid_),
  };
  CMessageMailCanSendCallBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageMailCanSendCallBack_descriptor_,
      CMessageMailCanSendCallBack::default_instance_,
      CMessageMailCanSendCallBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailCanSendCallBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailCanSendCallBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageMailCanSendCallBack));
  AccessoryInfo_descriptor_ = file->message_type(8);
  static const int AccessoryInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessoryInfo, itemindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessoryInfo, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessoryInfo, itempos_),
  };
  AccessoryInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccessoryInfo_descriptor_,
      AccessoryInfo::default_instance_,
      AccessoryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessoryInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessoryInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccessoryInfo));
  CMessageMailSend_descriptor_ = file->message_type(9);
  static const int CMessageMailSend_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailSend, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailSend, moneyneedback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailSend, desname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailSend, descharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailSend, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailSend, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailSend, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailSend, accessory_),
  };
  CMessageMailSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageMailSend_descriptor_,
      CMessageMailSend::default_instance_,
      CMessageMailSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageMailSend));
  CMailInfo_descriptor_ = file->message_type(10);
  static const int CMailInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMailInfo, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMailInfo, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMailInfo, sendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMailInfo, expiredtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMailInfo, moneyneedback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMailInfo, maillevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMailInfo, mailtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMailInfo, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMailInfo, srcname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMailInfo, itemnum_),
  };
  CMailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMailInfo_descriptor_,
      CMailInfo::default_instance_,
      CMailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMailInfo));
  CMessageMailListNotify_descriptor_ = file->message_type(11);
  static const int CMessageMailListNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailListNotify, maillist_),
  };
  CMessageMailListNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageMailListNotify_descriptor_,
      CMessageMailListNotify::default_instance_,
      CMessageMailListNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailListNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailListNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageMailListNotify));
  CMessageMailErrorCode_descriptor_ = file->message_type(12);
  static const int CMessageMailErrorCode_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailErrorCode, errorcode_),
  };
  CMessageMailErrorCode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageMailErrorCode_descriptor_,
      CMessageMailErrorCode::default_instance_,
      CMessageMailErrorCode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailErrorCode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailErrorCode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageMailErrorCode));
  CMessageShutMailBoxRequest_descriptor_ = file->message_type(13);
  static const int CMessageShutMailBoxRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageShutMailBoxRequest, msgcode_),
  };
  CMessageShutMailBoxRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageShutMailBoxRequest_descriptor_,
      CMessageShutMailBoxRequest::default_instance_,
      CMessageShutMailBoxRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageShutMailBoxRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageShutMailBoxRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageShutMailBoxRequest));
  CMessageShutReadMailBoxRequest_descriptor_ = file->message_type(14);
  static const int CMessageShutReadMailBoxRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageShutReadMailBoxRequest, msgcode_),
  };
  CMessageShutReadMailBoxRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageShutReadMailBoxRequest_descriptor_,
      CMessageShutReadMailBoxRequest::default_instance_,
      CMessageShutReadMailBoxRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageShutReadMailBoxRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageShutReadMailBoxRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageShutReadMailBoxRequest));
  CMessageShutSendMailBoxRequest_descriptor_ = file->message_type(15);
  static const int CMessageShutSendMailBoxRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageShutSendMailBoxRequest, msgcode_),
  };
  CMessageShutSendMailBoxRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageShutSendMailBoxRequest_descriptor_,
      CMessageShutSendMailBoxRequest::default_instance_,
      CMessageShutSendMailBoxRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageShutSendMailBoxRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageShutSendMailBoxRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageShutSendMailBoxRequest));
  CMessageNewMailNotify_descriptor_ = file->message_type(16);
  static const int CMessageNewMailNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNewMailNotify, router_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNewMailNotify, haslist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNewMailNotify, maillist_),
  };
  CMessageNewMailNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageNewMailNotify_descriptor_,
      CMessageNewMailNotify::default_instance_,
      CMessageNewMailNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNewMailNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNewMailNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageNewMailNotify));
  CMessageMailRead_descriptor_ = file->message_type(17);
  static const int CMessageMailRead_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailRead, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailRead, entityid_),
  };
  CMessageMailRead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageMailRead_descriptor_,
      CMessageMailRead::default_instance_,
      CMessageMailRead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailRead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailRead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageMailRead));
  CMessageMailReadResponse_descriptor_ = file->message_type(18);
  static const int CMessageMailReadResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailReadResponse, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailReadResponse, mailbody_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailReadResponse, mailitemindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailReadResponse, accessory_),
  };
  CMessageMailReadResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageMailReadResponse_descriptor_,
      CMessageMailReadResponse::default_instance_,
      CMessageMailReadResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailReadResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailReadResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageMailReadResponse));
  CMessageGetAccessory_descriptor_ = file->message_type(19);
  static const int CMessageGetAccessory_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetAccessory, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetAccessory, itemindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetAccessory, ismoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetAccessory, entityid_),
  };
  CMessageGetAccessory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetAccessory_descriptor_,
      CMessageGetAccessory::default_instance_,
      CMessageGetAccessory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetAccessory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetAccessory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetAccessory));
  CMessageDelMail_descriptor_ = file->message_type(20);
  static const int CMessageDelMail_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDelMail, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDelMail, entityid_),
  };
  CMessageDelMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageDelMail_descriptor_,
      CMessageDelMail::default_instance_,
      CMessageDelMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDelMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDelMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageDelMail));
  CMessageReadMailEnd_descriptor_ = file->message_type(21);
  static const int CMessageReadMailEnd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReadMailEnd, mailid_),
  };
  CMessageReadMailEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageReadMailEnd_descriptor_,
      CMessageReadMailEnd::default_instance_,
      CMessageReadMailEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReadMailEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReadMailEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageReadMailEnd));
  CMessageBackMail_descriptor_ = file->message_type(22);
  static const int CMessageBackMail_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBackMail, mailbody_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBackMail, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBackMail, entityid_),
  };
  CMessageBackMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBackMail_descriptor_,
      CMessageBackMail::default_instance_,
      CMessageBackMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBackMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBackMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBackMail));
  CMessageDelMailResponse_descriptor_ = file->message_type(23);
  static const int CMessageDelMailResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDelMailResponse, mailid_),
  };
  CMessageDelMailResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageDelMailResponse_descriptor_,
      CMessageDelMailResponse::default_instance_,
      CMessageDelMailResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDelMailResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDelMailResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageDelMailResponse));
  CMessageGetAccessoryResponse_descriptor_ = file->message_type(24);
  static const int CMessageGetAccessoryResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetAccessoryResponse, itemindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetAccessoryResponse, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetAccessoryResponse, ismoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetAccessoryResponse, ifdelmail_),
  };
  CMessageGetAccessoryResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetAccessoryResponse_descriptor_,
      CMessageGetAccessoryResponse::default_instance_,
      CMessageGetAccessoryResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetAccessoryResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetAccessoryResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetAccessoryResponse));
  CMessageBackMailResponse_descriptor_ = file->message_type(25);
  static const int CMessageBackMailResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBackMailResponse, mailid_),
  };
  CMessageBackMailResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBackMailResponse_descriptor_,
      CMessageBackMailResponse::default_instance_,
      CMessageBackMailResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBackMailResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBackMailResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBackMailResponse));
  CMessageCannelMailSend_descriptor_ = file->message_type(26);
  static const int CMessageCannelMailSend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCannelMailSend, mailid_),
  };
  CMessageCannelMailSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCannelMailSend_descriptor_,
      CMessageCannelMailSend::default_instance_,
      CMessageCannelMailSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCannelMailSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCannelMailSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCannelMailSend));
  CMessageLockMail_descriptor_ = file->message_type(27);
  static const int CMessageLockMail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLockMail, mailid_),
  };
  CMessageLockMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLockMail_descriptor_,
      CMessageLockMail::default_instance_,
      CMessageLockMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLockMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLockMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLockMail));
  CMessageUnLockMail_descriptor_ = file->message_type(28);
  static const int CMessageUnLockMail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnLockMail, mailid_),
  };
  CMessageUnLockMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUnLockMail_descriptor_,
      CMessageUnLockMail::default_instance_,
      CMessageUnLockMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnLockMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnLockMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUnLockMail));
  CMessageGetMailPageRequest_descriptor_ = file->message_type(29);
  static const int CMessageGetMailPageRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetMailPageRequest, clientcode_),
  };
  CMessageGetMailPageRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetMailPageRequest_descriptor_,
      CMessageGetMailPageRequest::default_instance_,
      CMessageGetMailPageRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetMailPageRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetMailPageRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetMailPageRequest));
  CMessageOpenSendMailBox_descriptor_ = file->message_type(30);
  static const int CMessageOpenSendMailBox_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOpenSendMailBox, msgcode_),
  };
  CMessageOpenSendMailBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageOpenSendMailBox_descriptor_,
      CMessageOpenSendMailBox::default_instance_,
      CMessageOpenSendMailBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOpenSendMailBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOpenSendMailBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageOpenSendMailBox));
  CMessageOpenSendMailBoxResponse_descriptor_ = file->message_type(31);
  static const int CMessageOpenSendMailBoxResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOpenSendMailBoxResponse, result_),
  };
  CMessageOpenSendMailBoxResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageOpenSendMailBoxResponse_descriptor_,
      CMessageOpenSendMailBoxResponse::default_instance_,
      CMessageOpenSendMailBoxResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOpenSendMailBoxResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOpenSendMailBoxResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageOpenSendMailBoxResponse));
  CMessageOpenReadMailBox_descriptor_ = file->message_type(32);
  static const int CMessageOpenReadMailBox_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOpenReadMailBox, msgcode_),
  };
  CMessageOpenReadMailBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageOpenReadMailBox_descriptor_,
      CMessageOpenReadMailBox::default_instance_,
      CMessageOpenReadMailBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOpenReadMailBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOpenReadMailBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageOpenReadMailBox));
  CMessageOpenReadMailBoxResponse_descriptor_ = file->message_type(33);
  static const int CMessageOpenReadMailBoxResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOpenReadMailBoxResponse, result_),
  };
  CMessageOpenReadMailBoxResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageOpenReadMailBoxResponse_descriptor_,
      CMessageOpenReadMailBoxResponse::default_instance_,
      CMessageOpenReadMailBoxResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOpenReadMailBoxResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOpenReadMailBoxResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageOpenReadMailBoxResponse));
  CMessageMailBoxStatusNotify_descriptor_ = file->message_type(34);
  static const int CMessageMailBoxStatusNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailBoxStatusNotify, mailcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailBoxStatusNotify, newmailcount_),
  };
  CMessageMailBoxStatusNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageMailBoxStatusNotify_descriptor_,
      CMessageMailBoxStatusNotify::default_instance_,
      CMessageMailBoxStatusNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailBoxStatusNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMailBoxStatusNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageMailBoxStatusNotify));
  CMessagePayMailMoneyRequest_descriptor_ = file->message_type(35);
  static const int CMessagePayMailMoneyRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePayMailMoneyRequest, mailid_),
  };
  CMessagePayMailMoneyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePayMailMoneyRequest_descriptor_,
      CMessagePayMailMoneyRequest::default_instance_,
      CMessagePayMailMoneyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePayMailMoneyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePayMailMoneyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePayMailMoneyRequest));
  CMessagePayMailMoneyResponse_descriptor_ = file->message_type(36);
  static const int CMessagePayMailMoneyResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePayMailMoneyResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePayMailMoneyResponse, expiredtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePayMailMoneyResponse, mailid_),
  };
  CMessagePayMailMoneyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePayMailMoneyResponse_descriptor_,
      CMessagePayMailMoneyResponse::default_instance_,
      CMessagePayMailMoneyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePayMailMoneyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePayMailMoneyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePayMailMoneyResponse));
  MailMessageID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mailmessage_5fpb_2ehxx);
}

void protobuf_RegisterTypes() {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailItemBox_descriptor_, &MailItemBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageOpenMailBoxRequest_descriptor_, &CMessageOpenMailBoxRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageOpenMailBoxResponse_descriptor_, &CMessageOpenMailBoxResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageShutDownMailBoxRequest_descriptor_, &CMessageShutDownMailBoxRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageMailChangeItem_descriptor_, &CMessageMailChangeItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageMailChangeItemCallBack_descriptor_, &CMessageMailChangeItemCallBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageMailCanSend_descriptor_, &CMessageMailCanSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageMailCanSendCallBack_descriptor_, &CMessageMailCanSendCallBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccessoryInfo_descriptor_, &AccessoryInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageMailSend_descriptor_, &CMessageMailSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMailInfo_descriptor_, &CMailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageMailListNotify_descriptor_, &CMessageMailListNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageMailErrorCode_descriptor_, &CMessageMailErrorCode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageShutMailBoxRequest_descriptor_, &CMessageShutMailBoxRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageShutReadMailBoxRequest_descriptor_, &CMessageShutReadMailBoxRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageShutSendMailBoxRequest_descriptor_, &CMessageShutSendMailBoxRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageNewMailNotify_descriptor_, &CMessageNewMailNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageMailRead_descriptor_, &CMessageMailRead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageMailReadResponse_descriptor_, &CMessageMailReadResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetAccessory_descriptor_, &CMessageGetAccessory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageDelMail_descriptor_, &CMessageDelMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageReadMailEnd_descriptor_, &CMessageReadMailEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBackMail_descriptor_, &CMessageBackMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageDelMailResponse_descriptor_, &CMessageDelMailResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetAccessoryResponse_descriptor_, &CMessageGetAccessoryResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBackMailResponse_descriptor_, &CMessageBackMailResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCannelMailSend_descriptor_, &CMessageCannelMailSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLockMail_descriptor_, &CMessageLockMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUnLockMail_descriptor_, &CMessageUnLockMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetMailPageRequest_descriptor_, &CMessageGetMailPageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageOpenSendMailBox_descriptor_, &CMessageOpenSendMailBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageOpenSendMailBoxResponse_descriptor_, &CMessageOpenSendMailBoxResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageOpenReadMailBox_descriptor_, &CMessageOpenReadMailBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageOpenReadMailBoxResponse_descriptor_, &CMessageOpenReadMailBoxResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageMailBoxStatusNotify_descriptor_, &CMessageMailBoxStatusNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePayMailMoneyRequest_descriptor_, &CMessagePayMailMoneyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePayMailMoneyResponse_descriptor_, &CMessagePayMailMoneyResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mailmessage_5fpb_2ehxx() {
  delete MailItemBox::default_instance_;
  delete MailItemBox_reflection_;
  delete CMessageOpenMailBoxRequest::default_instance_;
  delete CMessageOpenMailBoxRequest_reflection_;
  delete CMessageOpenMailBoxResponse::default_instance_;
  delete CMessageOpenMailBoxResponse_reflection_;
  delete CMessageShutDownMailBoxRequest::default_instance_;
  delete CMessageShutDownMailBoxRequest_reflection_;
  delete CMessageMailChangeItem::default_instance_;
  delete CMessageMailChangeItem_reflection_;
  delete CMessageMailChangeItemCallBack::default_instance_;
  delete CMessageMailChangeItemCallBack_reflection_;
  delete CMessageMailCanSend::default_instance_;
  delete CMessageMailCanSend_reflection_;
  delete CMessageMailCanSendCallBack::default_instance_;
  delete CMessageMailCanSendCallBack_reflection_;
  delete AccessoryInfo::default_instance_;
  delete AccessoryInfo_reflection_;
  delete CMessageMailSend::default_instance_;
  delete CMessageMailSend_reflection_;
  delete CMailInfo::default_instance_;
  delete CMailInfo_reflection_;
  delete CMessageMailListNotify::default_instance_;
  delete CMessageMailListNotify_reflection_;
  delete CMessageMailErrorCode::default_instance_;
  delete CMessageMailErrorCode_reflection_;
  delete CMessageShutMailBoxRequest::default_instance_;
  delete CMessageShutMailBoxRequest_reflection_;
  delete CMessageShutReadMailBoxRequest::default_instance_;
  delete CMessageShutReadMailBoxRequest_reflection_;
  delete CMessageShutSendMailBoxRequest::default_instance_;
  delete CMessageShutSendMailBoxRequest_reflection_;
  delete CMessageNewMailNotify::default_instance_;
  delete CMessageNewMailNotify_reflection_;
  delete CMessageMailRead::default_instance_;
  delete CMessageMailRead_reflection_;
  delete CMessageMailReadResponse::default_instance_;
  delete CMessageMailReadResponse_reflection_;
  delete CMessageGetAccessory::default_instance_;
  delete CMessageGetAccessory_reflection_;
  delete CMessageDelMail::default_instance_;
  delete CMessageDelMail_reflection_;
  delete CMessageReadMailEnd::default_instance_;
  delete CMessageReadMailEnd_reflection_;
  delete CMessageBackMail::default_instance_;
  delete CMessageBackMail_reflection_;
  delete CMessageDelMailResponse::default_instance_;
  delete CMessageDelMailResponse_reflection_;
  delete CMessageGetAccessoryResponse::default_instance_;
  delete CMessageGetAccessoryResponse_reflection_;
  delete CMessageBackMailResponse::default_instance_;
  delete CMessageBackMailResponse_reflection_;
  delete CMessageCannelMailSend::default_instance_;
  delete CMessageCannelMailSend_reflection_;
  delete CMessageLockMail::default_instance_;
  delete CMessageLockMail_reflection_;
  delete CMessageUnLockMail::default_instance_;
  delete CMessageUnLockMail_reflection_;
  delete CMessageGetMailPageRequest::default_instance_;
  delete CMessageGetMailPageRequest_reflection_;
  delete CMessageOpenSendMailBox::default_instance_;
  delete CMessageOpenSendMailBox_reflection_;
  delete CMessageOpenSendMailBoxResponse::default_instance_;
  delete CMessageOpenSendMailBoxResponse_reflection_;
  delete CMessageOpenReadMailBox::default_instance_;
  delete CMessageOpenReadMailBox_reflection_;
  delete CMessageOpenReadMailBoxResponse::default_instance_;
  delete CMessageOpenReadMailBoxResponse_reflection_;
  delete CMessageMailBoxStatusNotify::default_instance_;
  delete CMessageMailBoxStatusNotify_reflection_;
  delete CMessagePayMailMoneyRequest::default_instance_;
  delete CMessagePayMailMoneyRequest_reflection_;
  delete CMessagePayMailMoneyResponse::default_instance_;
  delete CMessagePayMailMoneyResponse_reflection_;
}

void protobuf_AddDesc_mailmessage_5fpb_2ehxx() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_coremessage_5fpb_2ehxx();
  ::protobuf_AddDesc_property_5fpb_2ehxx();
  #ifndef _NO_PROTOBUF_STR_
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022mailmessage_pb.hxx\032\022coremessage_pb.hxx"
    "\032\017property_pb.hxx\"A\n\013MailItemBox\022\037\n\010Mail"
    "Item\030\001 \003(\0132\r.PBItemObject\022\021\n\tItemIndex\030\002"
    " \003(\r\"?\n\032CMessageOpenMailBoxRequest\022\017\n\007Ms"
    "gCode\030\001 \001(\r\022\020\n\010EntityID\030\002 \001(\r\"-\n\033CMessag"
    "eOpenMailBoxResponse\022\016\n\006Result\030\001 \001(\r\"1\n\036"
    "CMessageShutDownMailBoxRequest\022\017\n\007MsgCod"
    "e\030\001 \001(\r\"a\n\026CMessageMailChangeItem\022\017\n\007Ite"
    "mNum\030\001 \001(\r\022\020\n\010SrcIndex\030\002 \001(\r\022\022\n\nMoveMeth"
    "od\030\003 \001(\r\022\020\n\010DesIndex\030\004 \001(\r\"i\n\036CMessageMa"
    "ilChangeItemCallBack\022\017\n\007ItemNum\030\001 \001(\r\022\020\n"
    "\010DesIndex\030\002 \001(\r\022\022\n\nMoveMethod\030\003 \001(\r\022\020\n\010S"
    "rcIndex\030\004 \001(\r\"5\n\023CMessageMailCanSend\022\014\n\004"
    "Name\030\001 \001(\t\022\020\n\010EntityID\030\002 \001(\r\"H\n\033CMessage"
    "MailCanSendCallBack\022\023\n\013CanSendMail\030\001 \001(\r"
    "\022\024\n\014PlayerCharID\030\002 \001(\r\"D\n\rAccessoryInfo\022"
    "\021\n\tItemIndex\030\001 \001(\r\022\017\n\007ItemNum\030\002 \001(\r\022\017\n\007I"
    "temPos\030\003 \001(\r\"\256\001\n\020CMessageMailSend\022\014\n\004Bod"
    "y\030\001 \001(\t\022\025\n\rMoneyNeedBack\030\002 \001(\r\022\017\n\007DesNam"
    "e\030\003 \001(\t\022\021\n\tDesCharID\030\004 \001(\r\022\r\n\005Title\030\005 \001("
    "\t\022\r\n\005Money\030\006 \001(\r\022\020\n\010EntityID\030\007 \001(\r\022!\n\tAc"
    "cessory\030\010 \003(\0132\016.AccessoryInfo\"\276\001\n\tCMailI"
    "nfo\022\r\n\005Title\030\001 \001(\t\022\r\n\005Money\030\002 \001(\r\022\020\n\010Sen"
    "dtime\030\003 \001(\r\022\023\n\013ExpiredTime\030\004 \001(\r\022\025\n\rMone"
    "yNeedBack\030\005 \001(\r\022\021\n\tMailLevel\030\006 \001(\r\022\020\n\010Ma"
    "ilType\030\007 \001(\r\022\016\n\006MailID\030\010 \001(\r\022\017\n\007Srcname\030"
    "\t \001(\t\022\017\n\007ItemNum\030\n \001(\r\"6\n\026CMessageMailLi"
    "stNotify\022\034\n\010MailList\030\001 \003(\0132\n.CMailInfo\"*"
    "\n\025CMessageMailErrorCode\022\021\n\tErrorCode\030\001 \001"
    "(\005\"-\n\032CMessageShutMailBoxRequest\022\017\n\007MsgC"
    "ode\030\001 \001(\r\"1\n\036CMessageShutReadMailBoxRequ"
    "est\022\017\n\007MsgCode\030\001 \001(\r\"1\n\036CMessageShutSend"
    "MailBoxRequest\022\017\n\007MsgCode\030\001 \001(\r\"g\n\025CMess"
    "ageNewMailNotify\022\037\n\006Router\030\001 \001(\0132\017.CMess"
    "ageRouter\022\017\n\007HasList\030\002 \001(\r\022\034\n\010MailList\030\003"
    " \001(\0132\n.CMailInfo\"4\n\020CMessageMailRead\022\016\n\006"
    "MailID\030\001 \001(\r\022\020\n\010EntityID\030\002 \001(\r\"u\n\030CMessa"
    "geMailReadResponse\022\016\n\006MailID\030\001 \001(\r\022\020\n\010Ma"
    "ilBody\030\002 \001(\t\022\025\n\rMailItemIndex\030\003 \003(\r\022 \n\tA"
    "ccessory\030\004 \003(\0132\r.PBItemObject\"\\\n\024CMessag"
    "eGetAccessory\022\016\n\006MailID\030\001 \001(\r\022\021\n\tItemInd"
    "ex\030\002 \001(\r\022\017\n\007IsMoney\030\003 \001(\r\022\020\n\010EntityID\030\004 "
    "\001(\r\"3\n\017CMessageDelMail\022\016\n\006MailId\030\001 \001(\r\022\020"
    "\n\010EntityID\030\002 \001(\r\"%\n\023CMessageReadMailEnd\022"
    "\016\n\006MailID\030\001 \001(\r\"F\n\020CMessageBackMail\022\020\n\010M"
    "ailBody\030\001 \001(\t\022\016\n\006MailID\030\002 \001(\r\022\020\n\010EntityI"
    "D\030\003 \001(\r\")\n\027CMessageDelMailResponse\022\016\n\006Ma"
    "ilID\030\001 \001(\r\"e\n\034CMessageGetAccessoryRespon"
    "se\022\021\n\tItemIndex\030\001 \001(\r\022\016\n\006MailID\030\002 \001(\r\022\017\n"
    "\007IsMoney\030\003 \001(\r\022\021\n\tIfDelMail\030\004 \001(\r\"*\n\030CMe"
    "ssageBackMailResponse\022\016\n\006MailID\030\001 \001(\r\"(\n"
    "\026CMessageCannelMailSend\022\016\n\006MailID\030\001 \001(\r\""
    "\"\n\020CMessageLockMail\022\016\n\006MailID\030\001 \001(\r\"$\n\022C"
    "MessageUnLockMail\022\016\n\006MailID\030\001 \001(\r\"0\n\032CMe"
    "ssageGetMailPageRequest\022\022\n\nClientCode\030\001 "
    "\001(\r\"*\n\027CMessageOpenSendMailBox\022\017\n\007MsgCod"
    "e\030\001 \001(\r\"1\n\037CMessageOpenSendMailBoxRespon"
    "se\022\016\n\006Result\030\001 \001(\r\"*\n\027CMessageOpenReadMa"
    "ilBox\022\017\n\007MsgCode\030\001 \001(\r\"1\n\037CMessageOpenRe"
    "adMailBoxResponse\022\016\n\006Result\030\001 \001(\r\"F\n\033CMe"
    "ssageMailBoxStatusNotify\022\021\n\tMailCount\030\001 "
    "\001(\r\022\024\n\014NewMailCount\030\002 \001(\r\"-\n\033CMessagePay"
    "MailMoneyRequest\022\016\n\006MailID\030\001 \001(\r\"T\n\034CMes"
    "sagePayMailMoneyResponse\022\017\n\007Errcode\030\001 \001("
    "\r\022\023\n\013ExpiredTime\030\002 \001(\r\022\016\n\006MailID\030\003 \001(\r*\231"
    "\t\n\rMailMessageID\022\037\n\032ID_C2S_REQUEST_OPENM"
    "AILBOX\020\200@\022 \n\033ID_S2C_RESPONSE_OPENMAILBOX"
    "\020\201@\022#\n\036ID_C2S_REQUEST_OPENSENDMAILBOX\020\202@"
    "\022$\n\037ID_S2C_RESPONSE_OPENSENDMAILBOX\020\203@\022#"
    "\n\036ID_C2S_REQUEST_OPENREADMAILBOX\020\204@\022$\n\037I"
    "D_S2C_RESPONSE_OPENREADMAILBOX\020\205@\022 \n\033ID_"
    "S2C_NOTIFY_MAILERRORCODE\020\206@\022\036\n\031ID_C2S_RE"
    "QUEST_CHANGEITEM\020\207@\022\037\n\032ID_S2C_RESPONSE_C"
    "HANGEITEM\020\210@\022\037\n\032ID_C2S_REQUEST_MAILCANSE"
    "ND\020\211@\022 \n\033ID_S2C_RESPONSE_MAILCANSEND\020\212@\022"
    " \n\033ID_S2S_RESPONSE_PLAYEONLINE\020\213@\022\034\n\027ID_"
    "C2S_REQUEST_MAILSEND\020\214@\022\035\n\030ID_S2C_RESPON"
    "SE_MAILSEND\020\215@\022\037\n\032ID_S2C_NOTIFY_MAILLIST"
    "INFO\020\216@\022\037\n\032ID_S2C_REQUEST_SHUTMAILBOX\020\217@"
    "\022#\n\036ID_C2S_REQUEST_SHUTREADMAILBOX\020\220@\022#\n"
    "\036ID_C2S_REQUEST_SHUTSENDMAILBOX\020\221@\022\032\n\025ID"
    "_S2C_NOTIFY_NEWMAIL\020\222D\022\034\n\027ID_C2S_REQUEST"
    "_READMAIL\020\223@\022\035\n\030ID_S2C_RESPONSE_READMAIL"
    "\020\224@\022 \n\033ID_C2S_REQUEST_GETACCESSORY\020\225@\022\033\n"
    "\026ID_C2S_REQUEST_DELMAIL\020\226@\022\036\n\031ID_C2S_NOT"
    "IFY_READMAILEND\020\227@\022\034\n\027ID_C2S_REQUEST_BAC"
    "KMAIL\020\230@\022\034\n\027ID_C2S_REQUEST_LOCKMAIL\020\231@\022\036"
    "\n\031ID_C2S_REQUEST_UNLOCKMAIL\020\232@\022\037\n\032ID_C2S"
    "_REQUEST_GETMAILPAGE\020\233@\022\034\n\027ID_S2C_RESPON"
    "SE_DELMAIL\020\234@\022!\n\034ID_S2C_RESPONSE_GETACCE"
    "SSORY\020\235@\022\035\n\030ID_S2C_RESPONSE_BACKMAIL\020\236@\022"
    "\"\n\035ID_C2S_NOTIFY_CANNCELMAILSEND\020\257@\022 \n\033I"
    "D_S2C_NOTIFY_MAILBOXSTATUS\020\260@\022 \n\033ID_C2S_"
    "REQUEST_PAYMAILMONEY\020\261@\022!\n\034ID_S2C_RESPON"
    "SE_PAYMAILMONEY\020\262@B\002H\001", 3782);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mailmessage_pb.hxx", &protobuf_RegisterTypes);
  #endif
  MailItemBox::default_instance_ = new MailItemBox();
  CMessageOpenMailBoxRequest::default_instance_ = new CMessageOpenMailBoxRequest();
  CMessageOpenMailBoxResponse::default_instance_ = new CMessageOpenMailBoxResponse();
  CMessageShutDownMailBoxRequest::default_instance_ = new CMessageShutDownMailBoxRequest();
  CMessageMailChangeItem::default_instance_ = new CMessageMailChangeItem();
  CMessageMailChangeItemCallBack::default_instance_ = new CMessageMailChangeItemCallBack();
  CMessageMailCanSend::default_instance_ = new CMessageMailCanSend();
  CMessageMailCanSendCallBack::default_instance_ = new CMessageMailCanSendCallBack();
  AccessoryInfo::default_instance_ = new AccessoryInfo();
  CMessageMailSend::default_instance_ = new CMessageMailSend();
  CMailInfo::default_instance_ = new CMailInfo();
  CMessageMailListNotify::default_instance_ = new CMessageMailListNotify();
  CMessageMailErrorCode::default_instance_ = new CMessageMailErrorCode();
  CMessageShutMailBoxRequest::default_instance_ = new CMessageShutMailBoxRequest();
  CMessageShutReadMailBoxRequest::default_instance_ = new CMessageShutReadMailBoxRequest();
  CMessageShutSendMailBoxRequest::default_instance_ = new CMessageShutSendMailBoxRequest();
  CMessageNewMailNotify::default_instance_ = new CMessageNewMailNotify();
  CMessageMailRead::default_instance_ = new CMessageMailRead();
  CMessageMailReadResponse::default_instance_ = new CMessageMailReadResponse();
  CMessageGetAccessory::default_instance_ = new CMessageGetAccessory();
  CMessageDelMail::default_instance_ = new CMessageDelMail();
  CMessageReadMailEnd::default_instance_ = new CMessageReadMailEnd();
  CMessageBackMail::default_instance_ = new CMessageBackMail();
  CMessageDelMailResponse::default_instance_ = new CMessageDelMailResponse();
  CMessageGetAccessoryResponse::default_instance_ = new CMessageGetAccessoryResponse();
  CMessageBackMailResponse::default_instance_ = new CMessageBackMailResponse();
  CMessageCannelMailSend::default_instance_ = new CMessageCannelMailSend();
  CMessageLockMail::default_instance_ = new CMessageLockMail();
  CMessageUnLockMail::default_instance_ = new CMessageUnLockMail();
  CMessageGetMailPageRequest::default_instance_ = new CMessageGetMailPageRequest();
  CMessageOpenSendMailBox::default_instance_ = new CMessageOpenSendMailBox();
  CMessageOpenSendMailBoxResponse::default_instance_ = new CMessageOpenSendMailBoxResponse();
  CMessageOpenReadMailBox::default_instance_ = new CMessageOpenReadMailBox();
  CMessageOpenReadMailBoxResponse::default_instance_ = new CMessageOpenReadMailBoxResponse();
  CMessageMailBoxStatusNotify::default_instance_ = new CMessageMailBoxStatusNotify();
  CMessagePayMailMoneyRequest::default_instance_ = new CMessagePayMailMoneyRequest();
  CMessagePayMailMoneyResponse::default_instance_ = new CMessagePayMailMoneyResponse();
  MailItemBox::default_instance_->InitAsDefaultInstance();
  CMessageOpenMailBoxRequest::default_instance_->InitAsDefaultInstance();
  CMessageOpenMailBoxResponse::default_instance_->InitAsDefaultInstance();
  CMessageShutDownMailBoxRequest::default_instance_->InitAsDefaultInstance();
  CMessageMailChangeItem::default_instance_->InitAsDefaultInstance();
  CMessageMailChangeItemCallBack::default_instance_->InitAsDefaultInstance();
  CMessageMailCanSend::default_instance_->InitAsDefaultInstance();
  CMessageMailCanSendCallBack::default_instance_->InitAsDefaultInstance();
  AccessoryInfo::default_instance_->InitAsDefaultInstance();
  CMessageMailSend::default_instance_->InitAsDefaultInstance();
  CMailInfo::default_instance_->InitAsDefaultInstance();
  CMessageMailListNotify::default_instance_->InitAsDefaultInstance();
  CMessageMailErrorCode::default_instance_->InitAsDefaultInstance();
  CMessageShutMailBoxRequest::default_instance_->InitAsDefaultInstance();
  CMessageShutReadMailBoxRequest::default_instance_->InitAsDefaultInstance();
  CMessageShutSendMailBoxRequest::default_instance_->InitAsDefaultInstance();
  CMessageNewMailNotify::default_instance_->InitAsDefaultInstance();
  CMessageMailRead::default_instance_->InitAsDefaultInstance();
  CMessageMailReadResponse::default_instance_->InitAsDefaultInstance();
  CMessageGetAccessory::default_instance_->InitAsDefaultInstance();
  CMessageDelMail::default_instance_->InitAsDefaultInstance();
  CMessageReadMailEnd::default_instance_->InitAsDefaultInstance();
  CMessageBackMail::default_instance_->InitAsDefaultInstance();
  CMessageDelMailResponse::default_instance_->InitAsDefaultInstance();
  CMessageGetAccessoryResponse::default_instance_->InitAsDefaultInstance();
  CMessageBackMailResponse::default_instance_->InitAsDefaultInstance();
  CMessageCannelMailSend::default_instance_->InitAsDefaultInstance();
  CMessageLockMail::default_instance_->InitAsDefaultInstance();
  CMessageUnLockMail::default_instance_->InitAsDefaultInstance();
  CMessageGetMailPageRequest::default_instance_->InitAsDefaultInstance();
  CMessageOpenSendMailBox::default_instance_->InitAsDefaultInstance();
  CMessageOpenSendMailBoxResponse::default_instance_->InitAsDefaultInstance();
  CMessageOpenReadMailBox::default_instance_->InitAsDefaultInstance();
  CMessageOpenReadMailBoxResponse::default_instance_->InitAsDefaultInstance();
  CMessageMailBoxStatusNotify::default_instance_->InitAsDefaultInstance();
  CMessagePayMailMoneyRequest::default_instance_->InitAsDefaultInstance();
  CMessagePayMailMoneyResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mailmessage_5fpb_2ehxx);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mailmessage_5fpb_2ehxx {
  StaticDescriptorInitializer_mailmessage_5fpb_2ehxx() {
    protobuf_AddDesc_mailmessage_5fpb_2ehxx();
  }
} static_descriptor_initializer_mailmessage_5fpb_2ehxx_;

const ::google::protobuf::EnumDescriptor* MailMessageID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailMessageID_descriptor_;
}
bool MailMessageID_IsValid(int value) {
  switch(value) {
    case 8192:
    case 8193:
    case 8194:
    case 8195:
    case 8196:
    case 8197:
    case 8198:
    case 8199:
    case 8200:
    case 8201:
    case 8202:
    case 8203:
    case 8204:
    case 8205:
    case 8206:
    case 8207:
    case 8208:
    case 8209:
    case 8211:
    case 8212:
    case 8213:
    case 8214:
    case 8215:
    case 8216:
    case 8217:
    case 8218:
    case 8219:
    case 8220:
    case 8221:
    case 8222:
    case 8239:
    case 8240:
    case 8241:
    case 8242:
    case 8722:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MailItemBox::kMailItemFieldNumber;
const int MailItemBox::kItemIndexFieldNumber;
#endif  // !_MSC_VER

MailItemBox::MailItemBox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailItemBox::InitAsDefaultInstance() {}

MailItemBox::MailItemBox(const MailItemBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailItemBox::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailItemBox::~MailItemBox() {
  SharedDtor();
}

void MailItemBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MailItemBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailItemBox_descriptor_;
}

const MailItemBox& MailItemBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mailmessage_5fpb_2ehxx();  return *default_instance_;
}

MailItemBox* MailItemBox::default_instance_ = NULL;

MailItemBox* MailItemBox::New() const {
  return new MailItemBox;
}

void MailItemBox::Clear() {
  mailitem_.Clear();
  itemindex_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailItemBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .PBItemObject MailItem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MailItem:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_mailitem()));
        if (input->ExpectTag(10)) goto parse_MailItem;
        if (input->ExpectTag(16)) goto parse_ItemIndex;
        break;
      }
      
      // repeated uint32 ItemIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemIndex:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_itemindex(value);
        if (input->ExpectTag(16)) goto parse_ItemIndex;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailItemBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MailItemBox::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .PBItemObject MailItem = 1;
  for (int i = 0; i < this->mailitem_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->mailitem(i), output);
  }
  
  // repeated uint32 ItemIndex = 2;
  for (int i = 0; i < this->itemindex_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->itemindex(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailItemBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBItemObject MailItem = 1;
  for (int i = 0; i < this->mailitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->mailitem(i), target);
  }
  
  // repeated uint32 ItemIndex = 2;
  for (int i = 0; i < this->itemindex_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->itemindex(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailItemBox::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBItemObject MailItem = 1;
  total_size += 1 * this->mailitem_size();
  for (int i = 0; i < this->mailitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->mailitem(i));
  }
  
  // repeated uint32 ItemIndex = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemindex_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->itemindex(i));
    }
    total_size += 1 * this->itemindex_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MailItemBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailItemBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailItemBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailItemBox::MergeFrom(const MailItemBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  mailitem_.MergeFrom(from.mailitem_);
  itemindex_.MergeFrom(from.itemindex_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailItemBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailItemBox::CopyFrom(const MailItemBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailItemBox::Swap(MailItemBox* other) {
  if (other != this) {
    mailitem_.Swap(&other->mailitem_);
    itemindex_.Swap(&other->itemindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool MailItemBox::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* MailItemBox::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* MailItemBox::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return MailItemBox_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageOpenMailBoxRequest::kMsgCodeFieldNumber;
const int CMessageOpenMailBoxRequest::kEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageOpenMailBoxRequest::CMessageOpenMailBoxRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageOpenMailBoxRequest::InitAsDefaultInstance() {}

CMessageOpenMailBoxRequest::CMessageOpenMailBoxRequest(const CMessageOpenMailBoxRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageOpenMailBoxRequest::SharedCtor() {
  _cached_size_ = 0;
  msgcode_ = 0u;
  entityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageOpenMailBoxRequest::~CMessageOpenMailBoxRequest() {
  SharedDtor();
}

void CMessageOpenMailBoxRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageOpenMailBoxRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageOpenMailBoxRequest_descriptor_;
}

const CMessageOpenMailBoxRequest& CMessageOpenMailBoxRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mailmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageOpenMailBoxRequest* CMessageOpenMailBoxRequest::default_instance_ = NULL;

CMessageOpenMailBoxRequest* CMessageOpenMailBoxRequest::New() const {
  return new CMessageOpenMailBoxRequest;
}

void CMessageOpenMailBoxRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgcode_ = 0u;
    entityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageOpenMailBoxRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 MsgCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &msgcode_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_EntityID;
        break;
      }
      
      // optional uint32 EntityID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageOpenMailBoxRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageOpenMailBoxRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 MsgCode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->msgcode(), output);
  }
  
  // optional uint32 EntityID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->entityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageOpenMailBoxRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 MsgCode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->msgcode(), target);
  }
  
  // optional uint32 EntityID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->entityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageOpenMailBoxRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MsgCode = 1;
    if (has_msgcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->msgcode());
    }
    
    // optional uint32 EntityID = 2;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageOpenMailBoxRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageOpenMailBoxRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageOpenMailBoxRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageOpenMailBoxRequest::MergeFrom(const CMessageOpenMailBoxRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_msgcode(from.msgcode());
    }
    if (from._has_bit(1)) {
      set_entityid(from.entityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageOpenMailBoxRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageOpenMailBoxRequest::CopyFrom(const CMessageOpenMailBoxRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageOpenMailBoxRequest::Swap(CMessageOpenMailBoxRequest* other) {
  if (other != this) {
    std::swap(msgcode_, other->msgcode_);
    std::swap(entityid_, other->entityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageOpenMailBoxRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageOpenMailBoxRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageOpenMailBoxRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageOpenMailBoxRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageOpenMailBoxResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMessageOpenMailBoxResponse::CMessageOpenMailBoxResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageOpenMailBoxResponse::InitAsDefaultInstance() {}

CMessageOpenMailBoxResponse::CMessageOpenMailBoxResponse(const CMessageOpenMailBoxResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageOpenMailBoxResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageOpenMailBoxResponse::~CMessageOpenMailBoxResponse() {
  SharedDtor();
}

void CMessageOpenMailBoxResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageOpenMailBoxResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageOpenMailBoxResponse_descriptor_;
}

const CMessageOpenMailBoxResponse& CMessageOpenMailBoxResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mailmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageOpenMailBoxResponse* CMessageOpenMailBoxResponse::default_instance_ = NULL;

CMessageOpenMailBoxResponse* CMessageOpenMailBoxResponse::New() const {
  return new CMessageOpenMailBoxResponse;
}

void CMessageOpenMailBoxResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageOpenMailBoxResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageOpenMailBoxResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageOpenMailBoxResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageOpenMailBoxResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageOpenMailBoxResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageOpenMailBoxResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageOpenMailBoxResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageOpenMailBoxResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageOpenMailBoxResponse::MergeFrom(const CMessageOpenMailBoxResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageOpenMailBoxResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageOpenMailBoxResponse::CopyFrom(const CMessageOpenMailBoxResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageOpenMailBoxResponse::Swap(CMessageOpenMailBoxResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageOpenMailBoxResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageOpenMailBoxResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageOpenMailBoxResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageOpenMailBoxResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageShutDownMailBoxRequest::kMsgCodeFieldNumber;
#endif  // !_MSC_VER

CMessageShutDownMailBoxRequest::CMessageShutDownMailBoxRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageShutDownMailBoxRequest::InitAsDefaultInstance() {}

CMessageShutDownMailBoxRequest::CMessageShutDownMailBoxRequest(const CMessageShutDownMailBoxRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageShutDownMailBoxRequest::SharedCtor() {
  _cached_size_ = 0;
  msgcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageShutDownMailBoxRequest::~CMessageShutDownMailBoxRequest() {
  SharedDtor();
}

void CMessageShutDownMailBoxRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageShutDownMailBoxRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageShutDownMailBoxRequest_descriptor_;
}

const CMessageShutDownMailBoxRequest& CMessageShutDownMailBoxRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mailmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageShutDownMailBoxRequest* CMessageShutDownMailBoxRequest::default_instance_ = NULL;

CMessageShutDownMailBoxRequest* CMessageShutDownMailBoxRequest::New() const {
  return new CMessageShutDownMailBoxRequest;
}

void CMessageShutDownMailBoxRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageShutDownMailBoxRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 MsgCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &msgcode_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageShutDownMailBoxRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageShutDownMailBoxRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 MsgCode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->msgcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageShutDownMailBoxRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 MsgCode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->msgcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageShutDownMailBoxRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MsgCode = 1;
    if (has_msgcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->msgcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageShutDownMailBoxRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageShutDownMailBoxRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageShutDownMailBoxRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageShutDownMailBoxRequest::MergeFrom(const CMessageShutDownMailBoxRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_msgcode(from.msgcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageShutDownMailBoxRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageShutDownMailBoxRequest::CopyFrom(const CMessageShutDownMailBoxRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageShutDownMailBoxRequest::Swap(CMessageShutDownMailBoxRequest* other) {
  if (other != this) {
    std::swap(msgcode_, other->msgcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageShutDownMailBoxRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageShutDownMailBoxRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageShutDownMailBoxRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageShutDownMailBoxRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageMailChangeItem::kItemNumFieldNumber;
const int CMessageMailChangeItem::kSrcIndexFieldNumber;
const int CMessageMailChangeItem::kMoveMethodFieldNumber;
const int CMessageMailChangeItem::kDesIndexFieldNumber;
#endif  // !_MSC_VER

CMessageMailChangeItem::CMessageMailChangeItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageMailChangeItem::InitAsDefaultInstance() {}

CMessageMailChangeItem::CMessageMailChangeItem(const CMessageMailChangeItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageMailChangeItem::SharedCtor() {
  _cached_size_ = 0;
  itemnum_ = 0u;
  srcindex_ = 0u;
  movemethod_ = 0u;
  desindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageMailChangeItem::~CMessageMailChangeItem() {
  SharedDtor();
}

void CMessageMailChangeItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageMailChangeItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageMailChangeItem_descriptor_;
}

const CMessageMailChangeItem& CMessageMailChangeItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mailmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageMailChangeItem* CMessageMailChangeItem::default_instance_ = NULL;

CMessageMailChangeItem* CMessageMailChangeItem::New() const {
  return new CMessageMailChangeItem;
}

void CMessageMailChangeItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemnum_ = 0u;
    srcindex_ = 0u;
    movemethod_ = 0u;
    desindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageMailChangeItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ItemNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemnum_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_SrcIndex;
        break;
      }
      
      // optional uint32 SrcIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SrcIndex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srcindex_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_MoveMethod;
        break;
      }
      
      // optional uint32 MoveMethod = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MoveMethod:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &movemethod_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_DesIndex;
        break;
      }
      
      // optional uint32 DesIndex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DesIndex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &desindex_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageMailChangeItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageMailChangeItem::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ItemNum = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->itemnum(), output);
  }
  
  // optional uint32 SrcIndex = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->srcindex(), output);
  }
  
  // optional uint32 MoveMethod = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->movemethod(), output);
  }
  
  // optional uint32 DesIndex = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->desindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageMailChangeItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ItemNum = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->itemnum(), target);
  }
  
  // optional uint32 SrcIndex = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->srcindex(), target);
  }
  
  // optional uint32 MoveMethod = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->movemethod(), target);
  }
  
  // optional uint32 DesIndex = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->desindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageMailChangeItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ItemNum = 1;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemnum());
    }
    
    // optional uint32 SrcIndex = 2;
    if (has_srcindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srcindex());
    }
    
    // optional uint32 MoveMethod = 3;
    if (has_movemethod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->movemethod());
    }
    
    // optional uint32 DesIndex = 4;
    if (has_desindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->desindex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageMailChangeItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageMailChangeItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageMailChangeItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageMailChangeItem::MergeFrom(const CMessageMailChangeItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_itemnum(from.itemnum());
    }
    if (from._has_bit(1)) {
      set_srcindex(from.srcindex());
    }
    if (from._has_bit(2)) {
      set_movemethod(from.movemethod());
    }
    if (from._has_bit(3)) {
      set_desindex(from.desindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageMailChangeItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMailChangeItem::CopyFrom(const CMessageMailChangeItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMailChangeItem::Swap(CMessageMailChangeItem* other) {
  if (other != this) {
    std::swap(itemnum_, other->itemnum_);
    std::swap(srcindex_, other->srcindex_);
    std::swap(movemethod_, other->movemethod_);
    std::swap(desindex_, other->desindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageMailChangeItem::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageMailChangeItem::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageMailChangeItem::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageMailChangeItem_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageMailChangeItemCallBack::kItemNumFieldNumber;
const int CMessageMailChangeItemCallBack::kDesIndexFieldNumber;
const int CMessageMailChangeItemCallBack::kMoveMethodFieldNumber;
const int CMessageMailChangeItemCallBack::kSrcIndexFieldNumber;
#endif  // !_MSC_VER

CMessageMailChangeItemCallBack::CMessageMailChangeItemCallBack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageMailChangeItemCallBack::InitAsDefaultInstance() {}

CMessageMailChangeItemCallBack::CMessageMailChangeItemCallBack(const CMessageMailChangeItemCallBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageMailChangeItemCallBack::SharedCtor() {
  _cached_size_ = 0;
  itemnum_ = 0u;
  desindex_ = 0u;
  movemethod_ = 0u;
  srcindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageMailChangeItemCallBack::~CMessageMailChangeItemCallBack() {
  SharedDtor();
}

void CMessageMailChangeItemCallBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageMailChangeItemCallBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageMailChangeItemCallBack_descriptor_;
}

const CMessageMailChangeItemCallBack& CMessageMailChangeItemCallBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mailmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageMailChangeItemCallBack* CMessageMailChangeItemCallBack::default_instance_ = NULL;

CMessageMailChangeItemCallBack* CMessageMailChangeItemCallBack::New() const {
  return new CMessageMailChangeItemCallBack;
}

void CMessageMailChangeItemCallBack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemnum_ = 0u;
    desindex_ = 0u;
    movemethod_ = 0u;
    srcindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageMailChangeItemCallBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ItemNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemnum_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_DesIndex;
        break;
      }
      
      // optional uint32 DesIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DesIndex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &desindex_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_MoveMethod;
        break;
      }
      
      // optional uint32 MoveMethod = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MoveMethod:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &movemethod_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_SrcIndex;
        break;
      }
      
      // optional uint32 SrcIndex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SrcIndex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srcindex_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageMailChangeItemCallBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageMailChangeItemCallBack::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ItemNum = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->itemnum(), output);
  }
  
  // optional uint32 DesIndex = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->desindex(), output);
  }
  
  // optional uint32 MoveMethod = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->movemethod(), output);
  }
  
  // optional uint32 SrcIndex = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->srcindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageMailChangeItemCallBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ItemNum = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->itemnum(), target);
  }
  
  // optional uint32 DesIndex = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->desindex(), target);
  }
  
  // optional uint32 MoveMethod = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->movemethod(), target);
  }
  
  // optional uint32 SrcIndex = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->srcindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageMailChangeItemCallBack::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ItemNum = 1;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemnum());
    }
    
    // optional uint32 DesIndex = 2;
    if (has_desindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->desindex());
    }
    
    // optional uint32 MoveMethod = 3;
    if (has_movemethod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->movemethod());
    }
    
    // optional uint32 SrcIndex = 4;
    if (has_srcindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srcindex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageMailChangeItemCallBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageMailChangeItemCallBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageMailChangeItemCallBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageMailChangeItemCallBack::MergeFrom(const CMessageMailChangeItemCallBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_itemnum(from.itemnum());
    }
    if (from._has_bit(1)) {
      set_desindex(from.desindex());
    }
    if (from._has_bit(2)) {
      set_movemethod(from.movemethod());
    }
    if (from._has_bit(3)) {
      set_srcindex(from.srcindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageMailChangeItemCallBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMailChangeItemCallBack::CopyFrom(const CMessageMailChangeItemCallBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMailChangeItemCallBack::Swap(CMessageMailChangeItemCallBack* other) {
  if (other != this) {
    std::swap(itemnum_, other->itemnum_);
    std::swap(desindex_, other->desindex_);
    std::swap(movemethod_, other->movemethod_);
    std::swap(srcindex_, other->srcindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageMailChangeItemCallBack::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageMailChangeItemCallBack::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageMailChangeItemCallBack::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageMailChangeItemCallBack_reflection_;
}

// ===================================================================

const ::std::string CMessageMailCanSend::_default_name_;
#ifndef _MSC_VER
const int CMessageMailCanSend::kNameFieldNumber;
const int CMessageMailCanSend::kEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageMailCanSend::CMessageMailCanSend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageMailCanSend::InitAsDefaultInstance() {}

CMessageMailCanSend::CMessageMailCanSend(const CMessageMailCanSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageMailCanSend::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  entityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageMailCanSend::~CMessageMailCanSend() {
  SharedDtor();
}

void CMessageMailCanSend::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageMailCanSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageMailCanSend_descriptor_;
}

const CMessageMailCanSend& CMessageMailCanSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mailmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageMailCanSend* CMessageMailCanSend::default_instance_ = NULL;

CMessageMailCanSend* CMessageMailCanSend::New() const {
  return new CMessageMailCanSend;
}

void CMessageMailCanSend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    entityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageMailCanSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(16)) goto parse_EntityID;
        break;
      }
      
      // optional uint32 EntityID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageMailCanSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageMailCanSend::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string Name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->name(), output);
  }
  
  // optional uint32 EntityID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->entityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageMailCanSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Name = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->name(), target);
  }
  
  // optional uint32 EntityID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->entityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageMailCanSend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional uint32 EntityID = 2;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageMailCanSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageMailCanSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageMailCanSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageMailCanSend::MergeFrom(const CMessageMailCanSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_entityid(from.entityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageMailCanSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMailCanSend::CopyFrom(const CMessageMailCanSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMailCanSend::Swap(CMessageMailCanSend* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(entityid_, other->entityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageMailCanSend::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageMailCanSend::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageMailCanSend::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageMailCanSend_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageMailCanSendCallBack::kCanSendMailFieldNumber;
const int CMessageMailCanSendCallBack::kPlayerCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageMailCanSendCallBack::CMessageMailCanSendCallBack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageMailCanSendCallBack::InitAsDefaultInstance() {}

CMessageMailCanSendCallBack::CMessageMailCanSendCallBack(const CMessageMailCanSendCallBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageMailCanSendCallBack::SharedCtor() {
  _cached_size_ = 0;
  cansendmail_ = 0u;
  playercharid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageMailCanSendCallBack::~CMessageMailCanSendCallBack() {
  SharedDtor();
}

void CMessageMailCanSendCallBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageMailCanSendCallBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageMailCanSendCallBack_descriptor_;
}

const CMessageMailCanSendCallBack& CMessageMailCanSendCallBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mailmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageMailCanSendCallBack* CMessageMailCanSendCallBack::default_instance_ = NULL;

CMessageMailCanSendCallBack* CMessageMailCanSendCallBack::New() const {
  return new CMessageMailCanSendCallBack;
}

void CMessageMailCanSendCallBack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cansendmail_ = 0u;
    playercharid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageMailCanSendCallBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CanSendMail = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &cansendmail_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_PlayerCharID;
        break;
      }
      
      // optional uint32 PlayerCharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PlayerCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playercharid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageMailCanSendCallBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageMailCanSendCallBack::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CanSendMail = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->cansendmail(), output);
  }
  
  // optional uint32 PlayerCharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->playercharid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageMailCanSendCallBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CanSendMail = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->cansendmail(), target);
  }
  
  // optional uint32 PlayerCharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->playercharid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageMailCanSendCallBack::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CanSendMail = 1;
    if (has_cansendmail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->cansendmail());
    }
    
    // optional uint32 PlayerCharID = 2;
    if (has_playercharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playercharid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageMailCanSendCallBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageMailCanSendCallBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageMailCanSendCallBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageMailCanSendCallBack::MergeFrom(const CMessageMailCanSendCallBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_cansendmail(from.cansendmail());
    }
    if (from._has_bit(1)) {
      set_playercharid(from.playercharid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageMailCanSendCallBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMailCanSendCallBack::CopyFrom(const CMessageMailCanSendCallBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMailCanSendCallBack::Swap(CMessageMailCanSendCallBack* other) {
  if (other != this) {
    std::swap(cansendmail_, other->cansendmail_);
    std::swap(playercharid_, other->playercharid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageMailCanSendCallBack::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageMailCanSendCallBack::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageMailCanSendCallBack::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageMailCanSendCallBack_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int AccessoryInfo::kItemIndexFieldNumber;
const int AccessoryInfo::kItemNumFieldNumber;
const int AccessoryInfo::kItemPosFieldNumber;
#endif  // !_MSC_VER

AccessoryInfo::AccessoryInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccessoryInfo::InitAsDefaultInstance() {}

AccessoryInfo::AccessoryInfo(const AccessoryInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccessoryInfo::SharedCtor() {
  _cached_size_ = 0;
  itemindex_ = 0u;
  itemnum_ = 0u;
  itempos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccessoryInfo::~AccessoryInfo() {
  SharedDtor();
}

void AccessoryInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* AccessoryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccessoryInfo_descriptor_;
}

const AccessoryInfo& AccessoryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mailmessage_5fpb_2ehxx();  return *default_instance_;
}

AccessoryInfo* AccessoryInfo::default_instance_ = NULL;

AccessoryInfo* AccessoryInfo::New() const {
  return new AccessoryInfo;
}

void AccessoryInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemindex_ = 0u;
    itemnum_ = 0u;
    itempos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccessoryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ItemIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemindex_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ItemNum;
        break;
      }
      
      // optional uint32 ItemNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemnum_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_ItemPos;
        break;
      }
      
      // optional uint32 ItemPos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemPos:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itempos_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccessoryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    AccessoryInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ItemIndex = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->itemindex(), output);
  }
  
  // optional uint32 ItemNum = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->itemnum(), output);
  }
  
  // optional uint32 ItemPos = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->itempos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccessoryInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ItemIndex = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->itemindex(), target);
  }
  
  // optional uint32 ItemNum = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->itemnum(), target);
  }
  
  // optional uint32 ItemPos = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->itempos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccessoryInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ItemIndex = 1;
    if (has_itemindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemindex());
    }
    
    // optional uint32 ItemNum = 2;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemnum());
    }
    
    // optional uint32 ItemPos = 3;
    if (has_itempos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itempos());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void AccessoryInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccessoryInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccessoryInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccessoryInfo::MergeFrom(const AccessoryInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_itemindex(from.itemindex());
    }
    if (from._has_bit(1)) {
      set_itemnum(from.itemnum());
    }
    if (from._has_bit(2)) {
      set_itempos(from.itempos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccessoryInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessoryInfo::CopyFrom(const AccessoryInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessoryInfo::Swap(AccessoryInfo* other) {
  if (other != this) {
    std::swap(itemindex_, other->itemindex_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(itempos_, other->itempos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool AccessoryInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* AccessoryInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* AccessoryInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return AccessoryInfo_reflection_;
}

// ===================================================================

const ::std::string CMessageMailSend::_default_body_;
const ::std::string CMessageMailSend::_default_desname_;
const ::std::string CMessageMailSend::_default_title_;
#ifndef _MSC_VER
const int CMessageMailSend::kBodyFieldNumber;
const int CMessageMailSend::kMoneyNeedBackFieldNumber;
const int CMessageMailSend::kDesNameFieldNumber;
const int CMessageMailSend::kDesCharIDFieldNumber;
const int CMessageMailSend::kTitleFieldNumber;
const int CMessageMailSend::kMoneyFieldNumber;
const int CMessageMailSend::kEntityIDFieldNumber;
const int CMessageMailSend::kAccessoryFieldNumber;
#endif  // !_MSC_VER

CMessageMailSend::CMessageMailSend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageMailSend::InitAsDefaultInstance() {}

CMessageMailSend::CMessageMailSend(const CMessageMailSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageMailSend::SharedCtor() {
  _cached_size_ = 0;
  body_ = const_cast< ::std::string*>(&_default_body_);
  moneyneedback_ = 0u;
  desname_ = const_cast< ::std::string*>(&_default_desname_);
  descharid_ = 0u;
  title_ = const_cast< ::std::string*>(&_default_title_);
  money_ = 0u;
  entityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageMailSend::~CMessageMailSend() {
  SharedDtor();
}

void CMessageMailSend::SharedDtor() {
  if (body_ != &_default_body_) {
    delete body_;
  }
  if (desname_ != &_default_desname_) {
    delete desname_;
  }
  if (title_ != &_default_title_) {
    delete title_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageMailSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageMailSend_descriptor_;
}

const CMessageMailSend& CMessageMailSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mailmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageMailSend* CMessageMailSend::default_instance_ = NULL;

CMessageMailSend* CMessageMailSend::New() const {
  return new CMessageMailSend;
}

void CMessageMailSend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (body_ != &_default_body_) {
        body_->clear();
      }
    }
    moneyneedback_ = 0u;
    if (_has_bit(2)) {
      if (desname_ != &_default_desname_) {
        desname_->clear();
      }
    }
    descharid_ = 0u;
    if (_has_bit(4)) {
      if (title_ != &_default_title_) {
        title_->clear();
      }
    }
    money_ = 0u;
    entityid_ = 0u;
  }
  accessory_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageMailSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string Body = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_body()));
        if (input->ExpectTag(16)) goto parse_MoneyNeedBack;
        break;
      }
      
      // optional uint32 MoneyNeedBack = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MoneyNeedBack:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &moneyneedback_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_DesName;
        break;
      }
      
      // optional string DesName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_DesName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_desname()));
        if (input->ExpectTag(32)) goto parse_DesCharID;
        break;
      }
      
      // optional uint32 DesCharID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DesCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &descharid_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_Title;
        break;
      }
      
      // optional string Title = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Title:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_title()));
        if (input->ExpectTag(48)) goto parse_Money;
        break;
      }
      
      // optional uint32 Money = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_EntityID;
        break;
      }
      
      // optional uint32 EntityID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(6);
        if (input->ExpectTag(66)) goto parse_Accessory;
        break;
      }
      
      // repeated .AccessoryInfo Accessory = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Accessory:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_accessory()));
        if (input->ExpectTag(66)) goto parse_Accessory;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageMailSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageMailSend::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string Body = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->body(), output);
  }
  
  // optional uint32 MoneyNeedBack = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->moneyneedback(), output);
  }
  
  // optional string DesName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->desname(), output);
  }
  
  // optional uint32 DesCharID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->descharid(), output);
  }
  
  // optional string Title = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->title(), output);
  }
  
  // optional uint32 Money = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->money(), output);
  }
  
  // optional uint32 EntityID = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->entityid(), output);
  }
  
  // repeated .AccessoryInfo Accessory = 8;
  for (int i = 0; i < this->accessory_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(8, this->accessory(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageMailSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Body = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->body(), target);
  }
  
  // optional uint32 MoneyNeedBack = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->moneyneedback(), target);
  }
  
  // optional string DesName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->desname(), target);
  }
  
  // optional uint32 DesCharID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->descharid(), target);
  }
  
  // optional string Title = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->title(), target);
  }
  
  // optional uint32 Money = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->money(), target);
  }
  
  // optional uint32 EntityID = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->entityid(), target);
  }
  
  // repeated .AccessoryInfo Accessory = 8;
  for (int i = 0; i < this->accessory_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(8, this->accessory(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageMailSend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Body = 1;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->body());
    }
    
    // optional uint32 MoneyNeedBack = 2;
    if (has_moneyneedback()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->moneyneedback());
    }
    
    // optional string DesName = 3;
    if (has_desname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->desname());
    }
    
    // optional uint32 DesCharID = 4;
    if (has_descharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->descharid());
    }
    
    // optional string Title = 5;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->title());
    }
    
    // optional uint32 Money = 6;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
    // optional uint32 EntityID = 7;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
  }
  // repeated .AccessoryInfo Accessory = 8;
  total_size += 1 * this->accessory_size();
  for (int i = 0; i < this->accessory_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->accessory(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageMailSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageMailSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageMailSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageMailSend::MergeFrom(const CMessageMailSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  accessory_.MergeFrom(from.accessory_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_body(from.body());
    }
    if (from._has_bit(1)) {
      set_moneyneedback(from.moneyneedback());
    }
    if (from._has_bit(2)) {
      set_desname(from.desname());
    }
    if (from._has_bit(3)) {
      set_descharid(from.descharid());
    }
    if (from._has_bit(4)) {
      set_title(from.title());
    }
    if (from._has_bit(5)) {
      set_money(from.money());
    }
    if (from._has_bit(6)) {
      set_entityid(from.entityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageMailSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMailSend::CopyFrom(const CMessageMailSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMailSend::Swap(CMessageMailSend* other) {
  if (other != this) {
    std::swap(body_, other->body_);
    std::swap(moneyneedback_, other->moneyneedback_);
    std::swap(desname_, other->desname_);
    std::swap(descharid_, other->descharid_);
    std::swap(title_, other->title_);
    std::swap(money_, other->money_);
    std::swap(entityid_, other->entityid_);
    accessory_.Swap(&other->accessory_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageMailSend::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageMailSend::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageMailSend::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageMailSend_reflection_;
}

// ===================================================================

const ::std::string CMailInfo::_default_title_;
const ::std::string CMailInfo::_default_srcname_;
#ifndef _MSC_VER
const int CMailInfo::kTitleFieldNumber;
const int CMailInfo::kMoneyFieldNumber;
const int CMailInfo::kSendtimeFieldNumber;
const int CMailInfo::kExpiredTimeFieldNumber;
const int CMailInfo::kMoneyNeedBackFieldNumber;
const int CMailInfo::kMailLevelFieldNumber;
const int CMailInfo::kMailTypeFieldNumber;
const int CMailInfo::kMailIDFieldNumber;
const int CMailInfo::kSrcnameFieldNumber;
const int CMailInfo::kItemNumFieldNumber;
#endif  // !_MSC_VER

CMailInfo::CMailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMailInfo::InitAsDefaultInstance() {}

CMailInfo::CMailInfo(const CMailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMailInfo::SharedCtor() {
  _cached_size_ = 0;
  title_ = const_cast< ::std::string*>(&_default_title_);
  money_ = 0u;
  sendtime_ = 0u;
  expiredtime_ = 0u;
  moneyneedback_ = 0u;
  maillevel_ = 0u;
  mailtype_ = 0u;
  mailid_ = 0u;
  srcname_ = const_cast< ::std::string*>(&_default_srcname_);
  itemnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMailInfo::~CMailInfo() {
  SharedDtor();
}

void CMailInfo::SharedDtor() {
  if (title_ != &_default_title_) {
    delete title_;
  }
  if (srcname_ != &_default_srcname_) {
    delete srcname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMailInfo_descriptor_;
}

const CMailInfo& CMailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mailmessage_5fpb_2ehxx();  return *default_instance_;
}

CMailInfo* CMailInfo::default_instance_ = NULL;

CMailInfo* CMailInfo::New() const {
  return new CMailInfo;
}

void CMailInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (title_ != &_default_title_) {
        title_->clear();
      }
    }
    money_ = 0u;
    sendtime_ = 0u;
    expiredtime_ = 0u;
    moneyneedback_ = 0u;
    maillevel_ = 0u;
    mailtype_ = 0u;
    mailid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (srcname_ != &_default_srcname_) {
        srcname_->clear();
      }
    }
    itemnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string Title = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_title()));
        if (input->ExpectTag(16)) goto parse_Money;
        break;
      }
      
      // optional uint32 Money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Sendtime;
        break;
      }
      
      // optional uint32 Sendtime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Sendtime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sendtime_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_ExpiredTime;
        break;
      }
      
      // optional uint32 ExpiredTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExpiredTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &expiredtime_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_MoneyNeedBack;
        break;
      }
      
      // optional uint32 MoneyNeedBack = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MoneyNeedBack:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &moneyneedback_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_MailLevel;
        break;
      }
      
      // optional uint32 MailLevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MailLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maillevel_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_MailType;
        break;
      }
      
      // optional uint32 MailType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MailType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mailtype_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_MailID;
        break;
      }
      
      // optional uint32 MailID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MailID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mailid_));
        _set_bit(7);
        if (input->ExpectTag(74)) goto parse_Srcname;
        break;
      }
      
      // optional string Srcname = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Srcname:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_srcname()));
        if (input->ExpectTag(80)) goto parse_ItemNum;
        break;
      }
      
      // optional uint32 ItemNum = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemnum_));
        _set_bit(9);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMailInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string Title = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->title(), output);
  }
  
  // optional uint32 Money = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->money(), output);
  }
  
  // optional uint32 Sendtime = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->sendtime(), output);
  }
  
  // optional uint32 ExpiredTime = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->expiredtime(), output);
  }
  
  // optional uint32 MoneyNeedBack = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->moneyneedback(), output);
  }
  
  // optional uint32 MailLevel = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->maillevel(), output);
  }
  
  // optional uint32 MailType = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->mailtype(), output);
  }
  
  // optional uint32 MailID = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->mailid(), output);
  }
  
  // optional string Srcname = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteString(9, this->srcname(), output);
  }
  
  // optional uint32 ItemNum = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->itemnum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Title = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->title(), target);
  }
  
  // optional uint32 Money = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->money(), target);
  }
  
  // optional uint32 Sendtime = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->sendtime(), target);
  }
  
  // optional uint32 ExpiredTime = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->expiredtime(), target);
  }
  
  // optional uint32 MoneyNeedBack = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->moneyneedback(), target);
  }
  
  // optional uint32 MailLevel = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->maillevel(), target);
  }
  
  // optional uint32 MailType = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->mailtype(), target);
  }
  
  // optional uint32 MailID = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->mailid(), target);
  }
  
  // optional string Srcname = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(9, this->srcname(), target);
  }
  
  // optional uint32 ItemNum = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->itemnum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMailInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->title());
    }
    
    // optional uint32 Money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
    // optional uint32 Sendtime = 3;
    if (has_sendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sendtime());
    }
    
    // optional uint32 ExpiredTime = 4;
    if (has_expiredtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->expiredtime());
    }
    
    // optional uint32 MoneyNeedBack = 5;
    if (has_moneyneedback()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->moneyneedback());
    }
    
    // optional uint32 MailLevel = 6;
    if (has_maillevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maillevel());
    }
    
    // optional uint32 MailType = 7;
    if (has_mailtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mailtype());
    }
    
    // optional uint32 MailID = 8;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mailid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string Srcname = 9;
    if (has_srcname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->srcname());
    }
    
    // optional uint32 ItemNum = 10;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemnum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMailInfo::MergeFrom(const CMailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_title(from.title());
    }
    if (from._has_bit(1)) {
      set_money(from.money());
    }
    if (from._has_bit(2)) {
      set_sendtime(from.sendtime());
    }
    if (from._has_bit(3)) {
      set_expiredtime(from.expiredtime());
    }
    if (from._has_bit(4)) {
      set_moneyneedback(from.moneyneedback());
    }
    if (from._has_bit(5)) {
      set_maillevel(from.maillevel());
    }
    if (from._has_bit(6)) {
      set_mailtype(from.mailtype());
    }
    if (from._has_bit(7)) {
      set_mailid(from.mailid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_srcname(from.srcname());
    }
    if (from._has_bit(9)) {
      set_itemnum(from.itemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMailInfo::CopyFrom(const CMailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMailInfo::Swap(CMailInfo* other) {
  if (other != this) {
    std::swap(title_, other->title_);
    std::swap(money_, other->money_);
    std::swap(sendtime_, other->sendtime_);
    std::swap(expiredtime_, other->expiredtime_);
    std::swap(moneyneedback_, other->moneyneedback_);
    std::swap(maillevel_, other->maillevel_);
    std::swap(mailtype_, other->mailtype_);
    std::swap(mailid_, other->mailid_);
    std::swap(srcname_, other->srcname_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMailInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMailInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMailInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMailInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageMailListNotify::kMailListFieldNumber;
#endif  // !_MSC_VER

CMessageMailListNotify::CMessageMailListNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageMailListNotify::InitAsDefaultInstance() {}

CMessageMailListNotify::CMessageMailListNotify(const CMessageMailListNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageMailListNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageMailListNotify::~CMessageMailListNotify() {
  SharedDtor();
}

void CMessageMailListNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageMailListNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageMailListNotify_descriptor_;
}

const CMessageMailListNotify& CMessageMailListNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mailmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageMailListNotify* CMessageMailListNotify::default_instance_ = NULL;

CMessageMailListNotify* CMessageMailListNotify::New() const {
  return new CMessageMailListNotify;
}

void CMessageMailListNotify::Clear() {
  maillist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageMailListNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .CMailInfo MailList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MailList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_maillist()));
        if (input->ExpectTag(10)) goto parse_MailList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageMailListNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageMailListNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .CMailInfo MailList = 1;
  for (int i = 0; i < this->maillist_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->maillist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageMailListNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMailInfo MailList = 1;
  for (int i = 0; i < this->maillist_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->maillist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageMailListNotify::ByteSize() const {
  int total_size = 0;
  
  // repeated .CMailInfo MailList = 1;
  total_size += 1 * this->maillist_size();
  for (int i = 0; i < this->maillist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->maillist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageMailListNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageMailListNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageMailListNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageMailListNotify::MergeFrom(const CMessageMailListNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  maillist_.MergeFrom(from.maillist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageMailListNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMailListNotify::CopyFrom(const CMessageMailListNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMailListNotify::Swap(CMessageMailListNotify* other) {
  if (other != this) {
    maillist_.Swap(&other->maillist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageMailListNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageMailListNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageMailListNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageMailListNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageMailErrorCode::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

CMessageMailErrorCode::CMessageMailErrorCode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageMailErrorCode::InitAsDefaultInstance() {}

CMessageMailErrorCode::CMessageMailErrorCode(const CMessageMailErrorCode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageMailErrorCode::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageMailErrorCode::~CMessageMailErrorCode() {
  SharedDtor();
}

void CMessageMailErrorCode::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageMailErrorCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageMailErrorCode_descriptor_;
}

const CMessageMailErrorCode& CMessageMailErrorCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mailmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageMailErrorCode* CMessageMailErrorCode::default_instance_ = NULL;

CMessageMailErrorCode* CMessageMailErrorCode::New() const {
  return new CMessageMailErrorCode;
}

void CMessageMailErrorCode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageMailErrorCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional int32 ErrorCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &errorcode_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageMailErrorCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageMailErrorCode::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 ErrorCode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(1, this->errorcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageMailErrorCode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ErrorCode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(1, this->errorcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageMailErrorCode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ErrorCode = 1;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->errorcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageMailErrorCode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageMailErrorCode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageMailErrorCode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageMailErrorCode::MergeFrom(const CMessageMailErrorCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageMailErrorCode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMailErrorCode::CopyFrom(const CMessageMailErrorCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMailErrorCode::Swap(CMessageMailErrorCode* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageMailErrorCode::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageMailErrorCode::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageMailErrorCode::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageMailErrorCode_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageShutMailBoxRequest::kMsgCodeFieldNumber;
#endif  // !_MSC_VER

CMessageShutMailBoxRequest::CMessageShutMailBoxRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageShutMailBoxRequest::InitAsDefaultInstance() {}

CMessageShutMailBoxRequest::CMessageShutMailBoxRequest(const CMessageShutMailBoxRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageShutMailBoxRequest::SharedCtor() {
  _cached_size_ = 0;
  msgcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageShutMailBoxRequest::~CMessageShutMailBoxRequest() {
  SharedDtor();
}

void CMessageShutMailBoxRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageShutMailBoxRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageShutMailBoxRequest_descriptor_;
}

const CMessageShutMailBoxRequest& CMessageShutMailBoxRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mailmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageShutMailBoxRequest* CMessageShutMailBoxRequest::default_instance_ = NULL;

CMessageShutMailBoxRequest* CMessageShutMailBoxRequest::New() const {
  return new CMessageShutMailBoxRequest;
}

void CMessageShutMailBoxRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageShutMailBoxRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 MsgCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &msgcode_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageShutMailBoxRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageShutMailBoxRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 MsgCode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->msgcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageShutMailBoxRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 MsgCode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->msgcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageShutMailBoxRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MsgCode = 1;
    if (has_msgcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->msgcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageShutMailBoxRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageShutMailBoxRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageShutMailBoxRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageShutMailBoxRequest::MergeFrom(const CMessageShutMailBoxRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_msgcode(from.msgcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageShutMailBoxRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageShutMailBoxRequest::CopyFrom(const CMessageShutMailBoxRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageShutMailBoxRequest::Swap(CMessageShutMailBoxRequest* other) {
  if (other != this) {
    std::swap(msgcode_, other->msgcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageShutMailBoxRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageShutMailBoxRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageShutMailBoxRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageShutMailBoxRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageShutReadMailBoxRequest::kMsgCodeFieldNumber;
#endif  // !_MSC_VER

CMessageShutReadMailBoxRequest::CMessageShutReadMailBoxRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageShutReadMailBoxRequest::InitAsDefaultInstance() {}

CMessageShutReadMailBoxRequest::CMessageShutReadMailBoxRequest(const CMessageShutReadMailBoxRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageShutReadMailBoxRequest::SharedCtor() {
  _cached_size_ = 0;
  msgcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageShutReadMailBoxRequest::~CMessageShutReadMailBoxRequest() {
  SharedDtor();
}

void CMessageShutReadMailBoxRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageShutReadMailBoxRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageShutReadMailBoxRequest_descriptor_;
}

const CMessageShutReadMailBoxRequest& CMessageShutReadMailBoxRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mailmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageShutReadMailBoxRequest* CMessageShutReadMailBoxRequest::default_instance_ = NULL;

CMessageShutReadMailBoxRequest* CMessageShutReadMailBoxRequest::New() const {
  return new CMessageShutReadMailBoxRequest;
}

void CMessageShutReadMailBoxRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageShutReadMailBoxRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 MsgCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &msgcode_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageShutReadMailBoxRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageShutReadMailBoxRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 MsgCode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->msgcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageShutReadMailBoxRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 MsgCode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->msgcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageShutReadMailBoxRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MsgCode = 1;
    if (has_msgcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->msgcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageShutReadMailBoxRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageShutReadMailBoxRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageShutReadMailBoxRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageShutReadMailBoxRequest::MergeFrom(const CMessageShutReadMailBoxRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_msgcode(from.msgcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageShutReadMailBoxRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageShutReadMailBoxRequest::CopyFrom(const CMessageShutReadMailBoxRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageShutReadMailBoxRequest::Swap(CMessageShutReadMailBoxRequest* other) {
  if (other != this) {
    std::swap(msgcode_, other->msgcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageShutReadMailBoxRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageShutReadMailBoxRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageShutReadMailBoxRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageShutReadMailBoxRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageShutSendMailBoxRequest::kMsgCodeFieldNumber;
#endif  // !_MSC_VER

CMessageShutSendMailBoxRequest::CMessageShutSendMailBoxRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageShutSendMailBoxRequest::InitAsDefaultInstance() {}

CMessageShutSendMailBoxRequest::CMessageShutSendMailBoxRequest(const CMessageShutSendMailBoxRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageShutSendMailBoxRequest::SharedCtor() {
  _cached_size_ = 0;
  msgcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageShutSendMailBoxRequest::~CMessageShutSendMailBoxRequest() {
  SharedDtor();
}

void CMessageShutSendMailBoxRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageShutSendMailBoxRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageShutSendMailBoxRequest_descriptor_;
}

const CMessageShutSendMailBoxRequest& CMessageShutSendMailBoxRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mailmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageShutSendMailBoxRequest* CMessageShutSendMailBoxRequest::default_instance_ = NULL;

CMessageShutSendMailBoxRequest* CMessageShutSendMailBoxRequest::New() const {
  return new CMessageShutSendMailBoxRequest;
}

void CMessageShutSendMailBoxRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageShutSendMailBoxRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 MsgCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &msgcode_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageShutSendMailBoxRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageShutSendMailBoxRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 MsgCode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->msgcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageShutSendMailBoxRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 MsgCode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->msgcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageShutSendMailBoxRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MsgCode = 1;
    if (has_msgcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->msgcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageShutSendMailBoxRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageShutSendMailBoxRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageShutSendMailBoxRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageShutSendMailBoxRequest::MergeFrom(const CMessageShutSendMailBoxRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_msgcode(from.msgcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageShutSendMailBoxRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageShutSendMailBoxRequest::CopyFrom(const CMessageShutSendMailBoxRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageShutSendMailBoxRequest::Swap(CMessageShutSendMailBoxRequest* other) {
  if (other != this) {
    std::swap(msgcode_, other->msgcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageShutSendMailBoxRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageShutSendMailBoxRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageShutSendMailBoxRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageShutSendMailBoxRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageNewMailNotify::kRouterFieldNumber;
const int CMessageNewMailNotify::kHasListFieldNumber;
const int CMessageNewMailNotify::kMailListFieldNumber;
#endif  // !_MSC_VER

CMessageNewMailNotify::CMessageNewMailNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageNewMailNotify::InitAsDefaultInstance() {  router_ = const_cast< ::CMessageRouter*>(&::CMessageRouter::default_instance());
  maillist_ = const_cast< ::CMailInfo*>(&::CMailInfo::default_instance());
}

CMessageNewMailNotify::CMessageNewMailNotify(const CMessageNewMailNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageNewMailNotify::SharedCtor() {
  _cached_size_ = 0;
  router_ = NULL;
  haslist_ = 0u;
  maillist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageNewMailNotify::~CMessageNewMailNotify() {
  SharedDtor();
}

void CMessageNewMailNotify::SharedDtor() {
  if (this != default_instance_) {
    delete router_;
    delete maillist_;
  }
}

const ::google::protobuf::Descriptor* CMessageNewMailNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageNewMailNotify_descriptor_;
}

const CMessageNewMailNotify& CMessageNewMailNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mailmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageNewMailNotify* CMessageNewMailNotify::default_instance_ = NULL;

CMessageNewMailNotify* CMessageNewMailNotify::New() const {
  return new CMessageNewMailNotify;
}

void CMessageNewMailNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (router_ != NULL) router_->::CMessageRouter::Clear();
    }
    haslist_ = 0u;
    if (_has_bit(2)) {
      if (maillist_ != NULL) maillist_->::CMailInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageNewMailNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CMessageRouter Router = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_router()));
        if (input->ExpectTag(16)) goto parse_HasList;
        break;
      }
      
      // optional uint32 HasList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HasList:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &haslist_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_MailList;
        break;
      }
      
      // optional .CMailInfo MailList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MailList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_maillist()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageNewMailNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageNewMailNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->router(), output);
  }
  
  // optional uint32 HasList = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->haslist(), output);
  }
  
  // optional .CMailInfo MailList = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->maillist(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageNewMailNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->router(), target);
  }
  
  // optional uint32 HasList = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->haslist(), target);
  }
  
  // optional .CMailInfo MailList = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->maillist(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageNewMailNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMessageRouter Router = 1;
    if (has_router()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->router());
    }
    
    // optional uint32 HasList = 2;
    if (has_haslist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->haslist());
    }
    
    // optional .CMailInfo MailList = 3;
    if (has_maillist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->maillist());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageNewMailNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageNewMailNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageNewMailNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageNewMailNotify::MergeFrom(const CMessageNewMailNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_router()->::CMessageRouter::MergeFrom(from.router());
    }
    if (from._has_bit(1)) {
      set_haslist(from.haslist());
    }
    if (from._has_bit(2)) {
      mutable_maillist()->::CMailInfo::MergeFrom(from.maillist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageNewMailNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageNewMailNotify::CopyFrom(const CMessageNewMailNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageNewMailNotify::Swap(CMessageNewMailNotify* other) {
  if (other != this) {
    std::swap(router_, other->router_);
    std::swap(haslist_, other->haslist_);
    std::swap(maillist_, other->maillist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageNewMailNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageNewMailNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageNewMailNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageNewMailNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageMailRead::kMailIDFieldNumber;
const int CMessageMailRead::kEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageMailRead::CMessageMailRead()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageMailRead::InitAsDefaultInstance() {}

CMessageMailRead::CMessageMailRead(const CMessageMailRead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageMailRead::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = 0u;
  entityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageMailRead::~CMessageMailRead() {
  SharedDtor();
}

void CMessageMailRead::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageMailRead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageMailRead_descriptor_;
}

const CMessageMailRead& CMessageMailRead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mailmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageMailRead* CMessageMailRead::default_instance_ = NULL;

CMessageMailRead* CMessageMailRead::New() const {
  return new CMessageMailRead;
}

void CMessageMailRead::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = 0u;
    entityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageMailRead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 MailID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mailid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_EntityID;
        break;
      }
      
      // optional uint32 EntityID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageMailRead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageMailRead::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 MailID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->mailid(), output);
  }
  
  // optional uint32 EntityID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->entityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageMailRead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 MailID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->mailid(), target);
  }
  
  // optional uint32 EntityID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->entityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageMailRead::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MailID = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mailid());
    }
    
    // optional uint32 EntityID = 2;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageMailRead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageMailRead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageMailRead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageMailRead::MergeFrom(const CMessageMailRead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_mailid(from.mailid());
    }
    if (from._has_bit(1)) {
      set_entityid(from.entityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageMailRead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMailRead::CopyFrom(const CMessageMailRead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMailRead::Swap(CMessageMailRead* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(entityid_, other->entityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageMailRead::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageMailRead::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageMailRead::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageMailRead_reflection_;
}

// ===================================================================

const ::std::string CMessageMailReadResponse::_default_mailbody_;
#ifndef _MSC_VER
const int CMessageMailReadResponse::kMailIDFieldNumber;
const int CMessageMailReadResponse::kMailBodyFieldNumber;
const int CMessageMailReadResponse::kMailItemIndexFieldNumber;
const int CMessageMailReadResponse::kAccessoryFieldNumber;
#endif  // !_MSC_VER

CMessageMailReadResponse::CMessageMailReadResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageMailReadResponse::InitAsDefaultInstance() {}

CMessageMailReadResponse::CMessageMailReadResponse(const CMessageMailReadResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageMailReadResponse::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = 0u;
  mailbody_ = const_cast< ::std::string*>(&_default_mailbody_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageMailReadResponse::~CMessageMailReadResponse() {
  SharedDtor();
}

void CMessageMailReadResponse::SharedDtor() {
  if (mailbody_ != &_default_mailbody_) {
    delete mailbody_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageMailReadResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageMailReadResponse_descriptor_;
}

const CMessageMailReadResponse& CMessageMailReadResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mailmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageMailReadResponse* CMessageMailReadResponse::default_instance_ = NULL;

CMessageMailReadResponse* CMessageMailReadResponse::New() const {
  return new CMessageMailReadResponse;
}

void CMessageMailReadResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = 0u;
    if (_has_bit(1)) {
      if (mailbody_ != &_default_mailbody_) {
        mailbody_->clear();
      }
    }
  }
  mailitemindex_.Clear();
  accessory_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageMailReadResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 MailID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mailid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_MailBody;
        break;
      }
      
      // optional string MailBody = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MailBody:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_mailbody()));
        if (input->ExpectTag(24)) goto parse_MailItemIndex;
        break;
      }
      
      // repeated uint32 MailItemIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MailItemIndex:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_mailitemindex(value);
        if (input->ExpectTag(24)) goto parse_MailItemIndex;
        if (input->ExpectTag(34)) goto parse_Accessory;
        break;
      }
      
      // repeated .PBItemObject Accessory = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Accessory:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_accessory()));
        if (input->ExpectTag(34)) goto parse_Accessory;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageMailReadResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageMailReadResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 MailID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->mailid(), output);
  }
  
  // optional string MailBody = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->mailbody(), output);
  }
  
  // repeated uint32 MailItemIndex = 3;
  for (int i = 0; i < this->mailitemindex_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->mailitemindex(i), output);
  }
  
  // repeated .PBItemObject Accessory = 4;
  for (int i = 0; i < this->accessory_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->accessory(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageMailReadResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 MailID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->mailid(), target);
  }
  
  // optional string MailBody = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->mailbody(), target);
  }
  
  // repeated uint32 MailItemIndex = 3;
  for (int i = 0; i < this->mailitemindex_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->mailitemindex(i), target);
  }
  
  // repeated .PBItemObject Accessory = 4;
  for (int i = 0; i < this->accessory_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(4, this->accessory(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageMailReadResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MailID = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mailid());
    }
    
    // optional string MailBody = 2;
    if (has_mailbody()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->mailbody());
    }
    
  }
  // repeated uint32 MailItemIndex = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->mailitemindex_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->mailitemindex(i));
    }
    total_size += 1 * this->mailitemindex_size() + data_size;
  }
  
  // repeated .PBItemObject Accessory = 4;
  total_size += 1 * this->accessory_size();
  for (int i = 0; i < this->accessory_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->accessory(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageMailReadResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageMailReadResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageMailReadResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageMailReadResponse::MergeFrom(const CMessageMailReadResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mailitemindex_.MergeFrom(from.mailitemindex_);
  accessory_.MergeFrom(from.accessory_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_mailid(from.mailid());
    }
    if (from._has_bit(1)) {
      set_mailbody(from.mailbody());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageMailReadResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMailReadResponse::CopyFrom(const CMessageMailReadResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMailReadResponse::Swap(CMessageMailReadResponse* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(mailbody_, other->mailbody_);
    mailitemindex_.Swap(&other->mailitemindex_);
    accessory_.Swap(&other->accessory_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageMailReadResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageMailReadResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageMailReadResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageMailReadResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetAccessory::kMailIDFieldNumber;
const int CMessageGetAccessory::kItemIndexFieldNumber;
const int CMessageGetAccessory::kIsMoneyFieldNumber;
const int CMessageGetAccessory::kEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageGetAccessory::CMessageGetAccessory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetAccessory::InitAsDefaultInstance() {}

CMessageGetAccessory::CMessageGetAccessory(const CMessageGetAccessory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetAccessory::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = 0u;
  itemindex_ = 0u;
  ismoney_ = 0u;
  entityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetAccessory::~CMessageGetAccessory() {
  SharedDtor();
}

void CMessageGetAccessory::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGetAccessory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetAccessory_descriptor_;
}

const CMessageGetAccessory& CMessageGetAccessory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mailmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetAccessory* CMessageGetAccessory::default_instance_ = NULL;

CMessageGetAccessory* CMessageGetAccessory::New() const {
  return new CMessageGetAccessory;
}

void CMessageGetAccessory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = 0u;
    itemindex_ = 0u;
    ismoney_ = 0u;
    entityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetAccessory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 MailID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mailid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ItemIndex;
        break;
      }
      
      // optional uint32 ItemIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemIndex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemindex_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_IsMoney;
        break;
      }
      
      // optional uint32 IsMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IsMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ismoney_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_EntityID;
        break;
      }
      
      // optional uint32 EntityID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetAccessory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetAccessory::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 MailID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->mailid(), output);
  }
  
  // optional uint32 ItemIndex = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->itemindex(), output);
  }
  
  // optional uint32 IsMoney = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->ismoney(), output);
  }
  
  // optional uint32 EntityID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->entityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetAccessory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 MailID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->mailid(), target);
  }
  
  // optional uint32 ItemIndex = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->itemindex(), target);
  }
  
  // optional uint32 IsMoney = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->ismoney(), target);
  }
  
  // optional uint32 EntityID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->entityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetAccessory::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MailID = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mailid());
    }
    
    // optional uint32 ItemIndex = 2;
    if (has_itemindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemindex());
    }
    
    // optional uint32 IsMoney = 3;
    if (has_ismoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ismoney());
    }
    
    // optional uint32 EntityID = 4;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetAccessory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetAccessory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetAccessory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetAccessory::MergeFrom(const CMessageGetAccessory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_mailid(from.mailid());
    }
    if (from._has_bit(1)) {
      set_itemindex(from.itemindex());
    }
    if (from._has_bit(2)) {
      set_ismoney(from.ismoney());
    }
    if (from._has_bit(3)) {
      set_entityid(from.entityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetAccessory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetAccessory::CopyFrom(const CMessageGetAccessory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetAccessory::Swap(CMessageGetAccessory* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(itemindex_, other->itemindex_);
    std::swap(ismoney_, other->ismoney_);
    std::swap(entityid_, other->entityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetAccessory::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetAccessory::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetAccessory::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetAccessory_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageDelMail::kMailIdFieldNumber;
const int CMessageDelMail::kEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageDelMail::CMessageDelMail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageDelMail::InitAsDefaultInstance() {}

CMessageDelMail::CMessageDelMail(const CMessageDelMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageDelMail::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = 0u;
  entityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageDelMail::~CMessageDelMail() {
  SharedDtor();
}

void CMessageDelMail::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageDelMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageDelMail_descriptor_;
}

const CMessageDelMail& CMessageDelMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mailmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageDelMail* CMessageDelMail::default_instance_ = NULL;

CMessageDelMail* CMessageDelMail::New() const {
  return new CMessageDelMail;
}

void CMessageDelMail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = 0u;
    entityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageDelMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 MailId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mailid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_EntityID;
        break;
      }
      
      // optional uint32 EntityID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageDelMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageDelMail::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 MailId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->mailid(), output);
  }
  
  // optional uint32 EntityID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->entityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageDelMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 MailId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->mailid(), target);
  }
  
  // optional uint32 EntityID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->entityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageDelMail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MailId = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mailid());
    }
    
    // optional uint32 EntityID = 2;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageDelMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageDelMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageDelMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageDelMail::MergeFrom(const CMessageDelMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_mailid(from.mailid());
    }
    if (from._has_bit(1)) {
      set_entityid(from.entityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageDelMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDelMail::CopyFrom(const CMessageDelMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDelMail::Swap(CMessageDelMail* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(entityid_, other->entityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageDelMail::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageDelMail::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageDelMail::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageDelMail_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageReadMailEnd::kMailIDFieldNumber;
#endif  // !_MSC_VER

CMessageReadMailEnd::CMessageReadMailEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageReadMailEnd::InitAsDefaultInstance() {}

CMessageReadMailEnd::CMessageReadMailEnd(const CMessageReadMailEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageReadMailEnd::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageReadMailEnd::~CMessageReadMailEnd() {
  SharedDtor();
}

void CMessageReadMailEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageReadMailEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageReadMailEnd_descriptor_;
}

const CMessageReadMailEnd& CMessageReadMailEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mailmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageReadMailEnd* CMessageReadMailEnd::default_instance_ = NULL;

CMessageReadMailEnd* CMessageReadMailEnd::New() const {
  return new CMessageReadMailEnd;
}

void CMessageReadMailEnd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageReadMailEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 MailID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mailid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageReadMailEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageReadMailEnd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 MailID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->mailid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageReadMailEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 MailID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->mailid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageReadMailEnd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MailID = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mailid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageReadMailEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageReadMailEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageReadMailEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageReadMailEnd::MergeFrom(const CMessageReadMailEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_mailid(from.mailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageReadMailEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReadMailEnd::CopyFrom(const CMessageReadMailEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReadMailEnd::Swap(CMessageReadMailEnd* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageReadMailEnd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageReadMailEnd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageReadMailEnd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageReadMailEnd_reflection_;
}

// ===================================================================

const ::std::string CMessageBackMail::_default_mailbody_;
#ifndef _MSC_VER
const int CMessageBackMail::kMailBodyFieldNumber;
const int CMessageBackMail::kMailIDFieldNumber;
const int CMessageBackMail::kEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageBackMail::CMessageBackMail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBackMail::InitAsDefaultInstance() {}

CMessageBackMail::CMessageBackMail(const CMessageBackMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBackMail::SharedCtor() {
  _cached_size_ = 0;
  mailbody_ = const_cast< ::std::string*>(&_default_mailbody_);
  mailid_ = 0u;
  entityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBackMail::~CMessageBackMail() {
  SharedDtor();
}

void CMessageBackMail::SharedDtor() {
  if (mailbody_ != &_default_mailbody_) {
    delete mailbody_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageBackMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBackMail_descriptor_;
}

const CMessageBackMail& CMessageBackMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mailmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageBackMail* CMessageBackMail::default_instance_ = NULL;

CMessageBackMail* CMessageBackMail::New() const {
  return new CMessageBackMail;
}

void CMessageBackMail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (mailbody_ != &_default_mailbody_) {
        mailbody_->clear();
      }
    }
    mailid_ = 0u;
    entityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBackMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string MailBody = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_mailbody()));
        if (input->ExpectTag(16)) goto parse_MailID;
        break;
      }
      
      // optional uint32 MailID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MailID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mailid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_EntityID;
        break;
      }
      
      // optional uint32 EntityID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBackMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBackMail::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string MailBody = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->mailbody(), output);
  }
  
  // optional uint32 MailID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->mailid(), output);
  }
  
  // optional uint32 EntityID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->entityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBackMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string MailBody = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->mailbody(), target);
  }
  
  // optional uint32 MailID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->mailid(), target);
  }
  
  // optional uint32 EntityID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->entityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBackMail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string MailBody = 1;
    if (has_mailbody()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->mailbody());
    }
    
    // optional uint32 MailID = 2;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mailid());
    }
    
    // optional uint32 EntityID = 3;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBackMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBackMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBackMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBackMail::MergeFrom(const CMessageBackMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_mailbody(from.mailbody());
    }
    if (from._has_bit(1)) {
      set_mailid(from.mailid());
    }
    if (from._has_bit(2)) {
      set_entityid(from.entityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBackMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBackMail::CopyFrom(const CMessageBackMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBackMail::Swap(CMessageBackMail* other) {
  if (other != this) {
    std::swap(mailbody_, other->mailbody_);
    std::swap(mailid_, other->mailid_);
    std::swap(entityid_, other->entityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBackMail::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBackMail::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBackMail::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBackMail_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageDelMailResponse::kMailIDFieldNumber;
#endif  // !_MSC_VER

CMessageDelMailResponse::CMessageDelMailResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageDelMailResponse::InitAsDefaultInstance() {}

CMessageDelMailResponse::CMessageDelMailResponse(const CMessageDelMailResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageDelMailResponse::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageDelMailResponse::~CMessageDelMailResponse() {
  SharedDtor();
}

void CMessageDelMailResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageDelMailResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageDelMailResponse_descriptor_;
}

const CMessageDelMailResponse& CMessageDelMailResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mailmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageDelMailResponse* CMessageDelMailResponse::default_instance_ = NULL;

CMessageDelMailResponse* CMessageDelMailResponse::New() const {
  return new CMessageDelMailResponse;
}

void CMessageDelMailResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageDelMailResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 MailID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mailid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageDelMailResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageDelMailResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 MailID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->mailid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageDelMailResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 MailID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->mailid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageDelMailResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MailID = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mailid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageDelMailResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageDelMailResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageDelMailResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageDelMailResponse::MergeFrom(const CMessageDelMailResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_mailid(from.mailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageDelMailResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDelMailResponse::CopyFrom(const CMessageDelMailResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDelMailResponse::Swap(CMessageDelMailResponse* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageDelMailResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageDelMailResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageDelMailResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageDelMailResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetAccessoryResponse::kItemIndexFieldNumber;
const int CMessageGetAccessoryResponse::kMailIDFieldNumber;
const int CMessageGetAccessoryResponse::kIsMoneyFieldNumber;
const int CMessageGetAccessoryResponse::kIfDelMailFieldNumber;
#endif  // !_MSC_VER

CMessageGetAccessoryResponse::CMessageGetAccessoryResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetAccessoryResponse::InitAsDefaultInstance() {}

CMessageGetAccessoryResponse::CMessageGetAccessoryResponse(const CMessageGetAccessoryResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetAccessoryResponse::SharedCtor() {
  _cached_size_ = 0;
  itemindex_ = 0u;
  mailid_ = 0u;
  ismoney_ = 0u;
  ifdelmail_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetAccessoryResponse::~CMessageGetAccessoryResponse() {
  SharedDtor();
}

void CMessageGetAccessoryResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGetAccessoryResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetAccessoryResponse_descriptor_;
}

const CMessageGetAccessoryResponse& CMessageGetAccessoryResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mailmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetAccessoryResponse* CMessageGetAccessoryResponse::default_instance_ = NULL;

CMessageGetAccessoryResponse* CMessageGetAccessoryResponse::New() const {
  return new CMessageGetAccessoryResponse;
}

void CMessageGetAccessoryResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemindex_ = 0u;
    mailid_ = 0u;
    ismoney_ = 0u;
    ifdelmail_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetAccessoryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ItemIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemindex_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_MailID;
        break;
      }
      
      // optional uint32 MailID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MailID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mailid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_IsMoney;
        break;
      }
      
      // optional uint32 IsMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IsMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ismoney_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_IfDelMail;
        break;
      }
      
      // optional uint32 IfDelMail = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IfDelMail:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ifdelmail_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetAccessoryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetAccessoryResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ItemIndex = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->itemindex(), output);
  }
  
  // optional uint32 MailID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->mailid(), output);
  }
  
  // optional uint32 IsMoney = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->ismoney(), output);
  }
  
  // optional uint32 IfDelMail = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->ifdelmail(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetAccessoryResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ItemIndex = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->itemindex(), target);
  }
  
  // optional uint32 MailID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->mailid(), target);
  }
  
  // optional uint32 IsMoney = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->ismoney(), target);
  }
  
  // optional uint32 IfDelMail = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->ifdelmail(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetAccessoryResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ItemIndex = 1;
    if (has_itemindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemindex());
    }
    
    // optional uint32 MailID = 2;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mailid());
    }
    
    // optional uint32 IsMoney = 3;
    if (has_ismoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ismoney());
    }
    
    // optional uint32 IfDelMail = 4;
    if (has_ifdelmail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ifdelmail());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetAccessoryResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetAccessoryResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetAccessoryResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetAccessoryResponse::MergeFrom(const CMessageGetAccessoryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_itemindex(from.itemindex());
    }
    if (from._has_bit(1)) {
      set_mailid(from.mailid());
    }
    if (from._has_bit(2)) {
      set_ismoney(from.ismoney());
    }
    if (from._has_bit(3)) {
      set_ifdelmail(from.ifdelmail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetAccessoryResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetAccessoryResponse::CopyFrom(const CMessageGetAccessoryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetAccessoryResponse::Swap(CMessageGetAccessoryResponse* other) {
  if (other != this) {
    std::swap(itemindex_, other->itemindex_);
    std::swap(mailid_, other->mailid_);
    std::swap(ismoney_, other->ismoney_);
    std::swap(ifdelmail_, other->ifdelmail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetAccessoryResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetAccessoryResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetAccessoryResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetAccessoryResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBackMailResponse::kMailIDFieldNumber;
#endif  // !_MSC_VER

CMessageBackMailResponse::CMessageBackMailResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBackMailResponse::InitAsDefaultInstance() {}

CMessageBackMailResponse::CMessageBackMailResponse(const CMessageBackMailResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBackMailResponse::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBackMailResponse::~CMessageBackMailResponse() {
  SharedDtor();
}

void CMessageBackMailResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageBackMailResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBackMailResponse_descriptor_;
}

const CMessageBackMailResponse& CMessageBackMailResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mailmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageBackMailResponse* CMessageBackMailResponse::default_instance_ = NULL;

CMessageBackMailResponse* CMessageBackMailResponse::New() const {
  return new CMessageBackMailResponse;
}

void CMessageBackMailResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBackMailResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 MailID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mailid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBackMailResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBackMailResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 MailID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->mailid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBackMailResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 MailID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->mailid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBackMailResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MailID = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mailid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBackMailResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBackMailResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBackMailResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBackMailResponse::MergeFrom(const CMessageBackMailResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_mailid(from.mailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBackMailResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBackMailResponse::CopyFrom(const CMessageBackMailResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBackMailResponse::Swap(CMessageBackMailResponse* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBackMailResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBackMailResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBackMailResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBackMailResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCannelMailSend::kMailIDFieldNumber;
#endif  // !_MSC_VER

CMessageCannelMailSend::CMessageCannelMailSend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCannelMailSend::InitAsDefaultInstance() {}

CMessageCannelMailSend::CMessageCannelMailSend(const CMessageCannelMailSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCannelMailSend::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCannelMailSend::~CMessageCannelMailSend() {
  SharedDtor();
}

void CMessageCannelMailSend::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCannelMailSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCannelMailSend_descriptor_;
}

const CMessageCannelMailSend& CMessageCannelMailSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mailmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCannelMailSend* CMessageCannelMailSend::default_instance_ = NULL;

CMessageCannelMailSend* CMessageCannelMailSend::New() const {
  return new CMessageCannelMailSend;
}

void CMessageCannelMailSend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCannelMailSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 MailID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mailid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCannelMailSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCannelMailSend::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 MailID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->mailid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCannelMailSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 MailID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->mailid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCannelMailSend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MailID = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mailid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCannelMailSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCannelMailSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCannelMailSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCannelMailSend::MergeFrom(const CMessageCannelMailSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_mailid(from.mailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCannelMailSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCannelMailSend::CopyFrom(const CMessageCannelMailSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCannelMailSend::Swap(CMessageCannelMailSend* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCannelMailSend::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCannelMailSend::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCannelMailSend::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCannelMailSend_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLockMail::kMailIDFieldNumber;
#endif  // !_MSC_VER

CMessageLockMail::CMessageLockMail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLockMail::InitAsDefaultInstance() {}

CMessageLockMail::CMessageLockMail(const CMessageLockMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLockMail::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLockMail::~CMessageLockMail() {
  SharedDtor();
}

void CMessageLockMail::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLockMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLockMail_descriptor_;
}

const CMessageLockMail& CMessageLockMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mailmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageLockMail* CMessageLockMail::default_instance_ = NULL;

CMessageLockMail* CMessageLockMail::New() const {
  return new CMessageLockMail;
}

void CMessageLockMail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLockMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 MailID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mailid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLockMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLockMail::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 MailID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->mailid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLockMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 MailID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->mailid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLockMail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MailID = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mailid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLockMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLockMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLockMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLockMail::MergeFrom(const CMessageLockMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_mailid(from.mailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLockMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLockMail::CopyFrom(const CMessageLockMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLockMail::Swap(CMessageLockMail* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLockMail::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLockMail::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLockMail::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLockMail_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageUnLockMail::kMailIDFieldNumber;
#endif  // !_MSC_VER

CMessageUnLockMail::CMessageUnLockMail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUnLockMail::InitAsDefaultInstance() {}

CMessageUnLockMail::CMessageUnLockMail(const CMessageUnLockMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUnLockMail::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUnLockMail::~CMessageUnLockMail() {
  SharedDtor();
}

void CMessageUnLockMail::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageUnLockMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUnLockMail_descriptor_;
}

const CMessageUnLockMail& CMessageUnLockMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mailmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageUnLockMail* CMessageUnLockMail::default_instance_ = NULL;

CMessageUnLockMail* CMessageUnLockMail::New() const {
  return new CMessageUnLockMail;
}

void CMessageUnLockMail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUnLockMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 MailID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mailid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUnLockMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUnLockMail::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 MailID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->mailid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUnLockMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 MailID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->mailid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUnLockMail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MailID = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mailid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUnLockMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUnLockMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUnLockMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUnLockMail::MergeFrom(const CMessageUnLockMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_mailid(from.mailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUnLockMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUnLockMail::CopyFrom(const CMessageUnLockMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUnLockMail::Swap(CMessageUnLockMail* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUnLockMail::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUnLockMail::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUnLockMail::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUnLockMail_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetMailPageRequest::kClientCodeFieldNumber;
#endif  // !_MSC_VER

CMessageGetMailPageRequest::CMessageGetMailPageRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetMailPageRequest::InitAsDefaultInstance() {}

CMessageGetMailPageRequest::CMessageGetMailPageRequest(const CMessageGetMailPageRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetMailPageRequest::SharedCtor() {
  _cached_size_ = 0;
  clientcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetMailPageRequest::~CMessageGetMailPageRequest() {
  SharedDtor();
}

void CMessageGetMailPageRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGetMailPageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetMailPageRequest_descriptor_;
}

const CMessageGetMailPageRequest& CMessageGetMailPageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mailmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetMailPageRequest* CMessageGetMailPageRequest::default_instance_ = NULL;

CMessageGetMailPageRequest* CMessageGetMailPageRequest::New() const {
  return new CMessageGetMailPageRequest;
}

void CMessageGetMailPageRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clientcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetMailPageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ClientCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &clientcode_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetMailPageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetMailPageRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ClientCode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->clientcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetMailPageRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ClientCode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->clientcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetMailPageRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ClientCode = 1;
    if (has_clientcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->clientcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetMailPageRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetMailPageRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetMailPageRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetMailPageRequest::MergeFrom(const CMessageGetMailPageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_clientcode(from.clientcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetMailPageRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetMailPageRequest::CopyFrom(const CMessageGetMailPageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetMailPageRequest::Swap(CMessageGetMailPageRequest* other) {
  if (other != this) {
    std::swap(clientcode_, other->clientcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetMailPageRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetMailPageRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetMailPageRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetMailPageRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageOpenSendMailBox::kMsgCodeFieldNumber;
#endif  // !_MSC_VER

CMessageOpenSendMailBox::CMessageOpenSendMailBox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageOpenSendMailBox::InitAsDefaultInstance() {}

CMessageOpenSendMailBox::CMessageOpenSendMailBox(const CMessageOpenSendMailBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageOpenSendMailBox::SharedCtor() {
  _cached_size_ = 0;
  msgcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageOpenSendMailBox::~CMessageOpenSendMailBox() {
  SharedDtor();
}

void CMessageOpenSendMailBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageOpenSendMailBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageOpenSendMailBox_descriptor_;
}

const CMessageOpenSendMailBox& CMessageOpenSendMailBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mailmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageOpenSendMailBox* CMessageOpenSendMailBox::default_instance_ = NULL;

CMessageOpenSendMailBox* CMessageOpenSendMailBox::New() const {
  return new CMessageOpenSendMailBox;
}

void CMessageOpenSendMailBox::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageOpenSendMailBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 MsgCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &msgcode_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageOpenSendMailBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageOpenSendMailBox::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 MsgCode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->msgcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageOpenSendMailBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 MsgCode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->msgcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageOpenSendMailBox::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MsgCode = 1;
    if (has_msgcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->msgcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageOpenSendMailBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageOpenSendMailBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageOpenSendMailBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageOpenSendMailBox::MergeFrom(const CMessageOpenSendMailBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_msgcode(from.msgcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageOpenSendMailBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageOpenSendMailBox::CopyFrom(const CMessageOpenSendMailBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageOpenSendMailBox::Swap(CMessageOpenSendMailBox* other) {
  if (other != this) {
    std::swap(msgcode_, other->msgcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageOpenSendMailBox::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageOpenSendMailBox::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageOpenSendMailBox::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageOpenSendMailBox_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageOpenSendMailBoxResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMessageOpenSendMailBoxResponse::CMessageOpenSendMailBoxResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageOpenSendMailBoxResponse::InitAsDefaultInstance() {}

CMessageOpenSendMailBoxResponse::CMessageOpenSendMailBoxResponse(const CMessageOpenSendMailBoxResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageOpenSendMailBoxResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageOpenSendMailBoxResponse::~CMessageOpenSendMailBoxResponse() {
  SharedDtor();
}

void CMessageOpenSendMailBoxResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageOpenSendMailBoxResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageOpenSendMailBoxResponse_descriptor_;
}

const CMessageOpenSendMailBoxResponse& CMessageOpenSendMailBoxResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mailmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageOpenSendMailBoxResponse* CMessageOpenSendMailBoxResponse::default_instance_ = NULL;

CMessageOpenSendMailBoxResponse* CMessageOpenSendMailBoxResponse::New() const {
  return new CMessageOpenSendMailBoxResponse;
}

void CMessageOpenSendMailBoxResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageOpenSendMailBoxResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageOpenSendMailBoxResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageOpenSendMailBoxResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageOpenSendMailBoxResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageOpenSendMailBoxResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageOpenSendMailBoxResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageOpenSendMailBoxResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageOpenSendMailBoxResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageOpenSendMailBoxResponse::MergeFrom(const CMessageOpenSendMailBoxResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageOpenSendMailBoxResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageOpenSendMailBoxResponse::CopyFrom(const CMessageOpenSendMailBoxResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageOpenSendMailBoxResponse::Swap(CMessageOpenSendMailBoxResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageOpenSendMailBoxResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageOpenSendMailBoxResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageOpenSendMailBoxResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageOpenSendMailBoxResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageOpenReadMailBox::kMsgCodeFieldNumber;
#endif  // !_MSC_VER

CMessageOpenReadMailBox::CMessageOpenReadMailBox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageOpenReadMailBox::InitAsDefaultInstance() {}

CMessageOpenReadMailBox::CMessageOpenReadMailBox(const CMessageOpenReadMailBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageOpenReadMailBox::SharedCtor() {
  _cached_size_ = 0;
  msgcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageOpenReadMailBox::~CMessageOpenReadMailBox() {
  SharedDtor();
}

void CMessageOpenReadMailBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageOpenReadMailBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageOpenReadMailBox_descriptor_;
}

const CMessageOpenReadMailBox& CMessageOpenReadMailBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mailmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageOpenReadMailBox* CMessageOpenReadMailBox::default_instance_ = NULL;

CMessageOpenReadMailBox* CMessageOpenReadMailBox::New() const {
  return new CMessageOpenReadMailBox;
}

void CMessageOpenReadMailBox::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageOpenReadMailBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 MsgCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &msgcode_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageOpenReadMailBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageOpenReadMailBox::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 MsgCode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->msgcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageOpenReadMailBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 MsgCode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->msgcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageOpenReadMailBox::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MsgCode = 1;
    if (has_msgcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->msgcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageOpenReadMailBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageOpenReadMailBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageOpenReadMailBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageOpenReadMailBox::MergeFrom(const CMessageOpenReadMailBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_msgcode(from.msgcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageOpenReadMailBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageOpenReadMailBox::CopyFrom(const CMessageOpenReadMailBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageOpenReadMailBox::Swap(CMessageOpenReadMailBox* other) {
  if (other != this) {
    std::swap(msgcode_, other->msgcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageOpenReadMailBox::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageOpenReadMailBox::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageOpenReadMailBox::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageOpenReadMailBox_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageOpenReadMailBoxResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMessageOpenReadMailBoxResponse::CMessageOpenReadMailBoxResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageOpenReadMailBoxResponse::InitAsDefaultInstance() {}

CMessageOpenReadMailBoxResponse::CMessageOpenReadMailBoxResponse(const CMessageOpenReadMailBoxResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageOpenReadMailBoxResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageOpenReadMailBoxResponse::~CMessageOpenReadMailBoxResponse() {
  SharedDtor();
}

void CMessageOpenReadMailBoxResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageOpenReadMailBoxResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageOpenReadMailBoxResponse_descriptor_;
}

const CMessageOpenReadMailBoxResponse& CMessageOpenReadMailBoxResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mailmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageOpenReadMailBoxResponse* CMessageOpenReadMailBoxResponse::default_instance_ = NULL;

CMessageOpenReadMailBoxResponse* CMessageOpenReadMailBoxResponse::New() const {
  return new CMessageOpenReadMailBoxResponse;
}

void CMessageOpenReadMailBoxResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageOpenReadMailBoxResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageOpenReadMailBoxResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageOpenReadMailBoxResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageOpenReadMailBoxResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageOpenReadMailBoxResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageOpenReadMailBoxResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageOpenReadMailBoxResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageOpenReadMailBoxResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageOpenReadMailBoxResponse::MergeFrom(const CMessageOpenReadMailBoxResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageOpenReadMailBoxResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageOpenReadMailBoxResponse::CopyFrom(const CMessageOpenReadMailBoxResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageOpenReadMailBoxResponse::Swap(CMessageOpenReadMailBoxResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageOpenReadMailBoxResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageOpenReadMailBoxResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageOpenReadMailBoxResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageOpenReadMailBoxResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageMailBoxStatusNotify::kMailCountFieldNumber;
const int CMessageMailBoxStatusNotify::kNewMailCountFieldNumber;
#endif  // !_MSC_VER

CMessageMailBoxStatusNotify::CMessageMailBoxStatusNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageMailBoxStatusNotify::InitAsDefaultInstance() {}

CMessageMailBoxStatusNotify::CMessageMailBoxStatusNotify(const CMessageMailBoxStatusNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageMailBoxStatusNotify::SharedCtor() {
  _cached_size_ = 0;
  mailcount_ = 0u;
  newmailcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageMailBoxStatusNotify::~CMessageMailBoxStatusNotify() {
  SharedDtor();
}

void CMessageMailBoxStatusNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageMailBoxStatusNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageMailBoxStatusNotify_descriptor_;
}

const CMessageMailBoxStatusNotify& CMessageMailBoxStatusNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mailmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageMailBoxStatusNotify* CMessageMailBoxStatusNotify::default_instance_ = NULL;

CMessageMailBoxStatusNotify* CMessageMailBoxStatusNotify::New() const {
  return new CMessageMailBoxStatusNotify;
}

void CMessageMailBoxStatusNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailcount_ = 0u;
    newmailcount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageMailBoxStatusNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 MailCount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mailcount_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_NewMailCount;
        break;
      }
      
      // optional uint32 NewMailCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NewMailCount:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &newmailcount_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageMailBoxStatusNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageMailBoxStatusNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 MailCount = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->mailcount(), output);
  }
  
  // optional uint32 NewMailCount = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->newmailcount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageMailBoxStatusNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 MailCount = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->mailcount(), target);
  }
  
  // optional uint32 NewMailCount = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->newmailcount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageMailBoxStatusNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MailCount = 1;
    if (has_mailcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mailcount());
    }
    
    // optional uint32 NewMailCount = 2;
    if (has_newmailcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->newmailcount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageMailBoxStatusNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageMailBoxStatusNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageMailBoxStatusNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageMailBoxStatusNotify::MergeFrom(const CMessageMailBoxStatusNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_mailcount(from.mailcount());
    }
    if (from._has_bit(1)) {
      set_newmailcount(from.newmailcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageMailBoxStatusNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMailBoxStatusNotify::CopyFrom(const CMessageMailBoxStatusNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMailBoxStatusNotify::Swap(CMessageMailBoxStatusNotify* other) {
  if (other != this) {
    std::swap(mailcount_, other->mailcount_);
    std::swap(newmailcount_, other->newmailcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageMailBoxStatusNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageMailBoxStatusNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageMailBoxStatusNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageMailBoxStatusNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessagePayMailMoneyRequest::kMailIDFieldNumber;
#endif  // !_MSC_VER

CMessagePayMailMoneyRequest::CMessagePayMailMoneyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePayMailMoneyRequest::InitAsDefaultInstance() {}

CMessagePayMailMoneyRequest::CMessagePayMailMoneyRequest(const CMessagePayMailMoneyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePayMailMoneyRequest::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePayMailMoneyRequest::~CMessagePayMailMoneyRequest() {
  SharedDtor();
}

void CMessagePayMailMoneyRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessagePayMailMoneyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePayMailMoneyRequest_descriptor_;
}

const CMessagePayMailMoneyRequest& CMessagePayMailMoneyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mailmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePayMailMoneyRequest* CMessagePayMailMoneyRequest::default_instance_ = NULL;

CMessagePayMailMoneyRequest* CMessagePayMailMoneyRequest::New() const {
  return new CMessagePayMailMoneyRequest;
}

void CMessagePayMailMoneyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePayMailMoneyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 MailID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mailid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePayMailMoneyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePayMailMoneyRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 MailID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->mailid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePayMailMoneyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 MailID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->mailid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePayMailMoneyRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MailID = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mailid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePayMailMoneyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePayMailMoneyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePayMailMoneyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePayMailMoneyRequest::MergeFrom(const CMessagePayMailMoneyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_mailid(from.mailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePayMailMoneyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePayMailMoneyRequest::CopyFrom(const CMessagePayMailMoneyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePayMailMoneyRequest::Swap(CMessagePayMailMoneyRequest* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePayMailMoneyRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePayMailMoneyRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePayMailMoneyRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePayMailMoneyRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessagePayMailMoneyResponse::kErrcodeFieldNumber;
const int CMessagePayMailMoneyResponse::kExpiredTimeFieldNumber;
const int CMessagePayMailMoneyResponse::kMailIDFieldNumber;
#endif  // !_MSC_VER

CMessagePayMailMoneyResponse::CMessagePayMailMoneyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePayMailMoneyResponse::InitAsDefaultInstance() {}

CMessagePayMailMoneyResponse::CMessagePayMailMoneyResponse(const CMessagePayMailMoneyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePayMailMoneyResponse::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  expiredtime_ = 0u;
  mailid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePayMailMoneyResponse::~CMessagePayMailMoneyResponse() {
  SharedDtor();
}

void CMessagePayMailMoneyResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessagePayMailMoneyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePayMailMoneyResponse_descriptor_;
}

const CMessagePayMailMoneyResponse& CMessagePayMailMoneyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mailmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePayMailMoneyResponse* CMessagePayMailMoneyResponse::default_instance_ = NULL;

CMessagePayMailMoneyResponse* CMessagePayMailMoneyResponse::New() const {
  return new CMessagePayMailMoneyResponse;
}

void CMessagePayMailMoneyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
    expiredtime_ = 0u;
    mailid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePayMailMoneyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Errcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ExpiredTime;
        break;
      }
      
      // optional uint32 ExpiredTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExpiredTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &expiredtime_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_MailID;
        break;
      }
      
      // optional uint32 MailID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MailID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mailid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePayMailMoneyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePayMailMoneyResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->errcode(), output);
  }
  
  // optional uint32 ExpiredTime = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->expiredtime(), output);
  }
  
  // optional uint32 MailID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->mailid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePayMailMoneyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  // optional uint32 ExpiredTime = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->expiredtime(), target);
  }
  
  // optional uint32 MailID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->mailid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePayMailMoneyResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional uint32 ExpiredTime = 2;
    if (has_expiredtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->expiredtime());
    }
    
    // optional uint32 MailID = 3;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mailid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePayMailMoneyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePayMailMoneyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePayMailMoneyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePayMailMoneyResponse::MergeFrom(const CMessagePayMailMoneyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(1)) {
      set_expiredtime(from.expiredtime());
    }
    if (from._has_bit(2)) {
      set_mailid(from.mailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePayMailMoneyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePayMailMoneyResponse::CopyFrom(const CMessagePayMailMoneyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePayMailMoneyResponse::Swap(CMessagePayMailMoneyResponse* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(expiredtime_, other->expiredtime_);
    std::swap(mailid_, other->mailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePayMailMoneyResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePayMailMoneyResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePayMailMoneyResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePayMailMoneyResponse_reflection_;
}
