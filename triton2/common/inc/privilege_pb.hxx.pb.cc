// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "privilege_pb.hxx.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>
#ifdef LEAK_CHK_DEBUG_NEW
#include "debug_new.h"
#endif

namespace {

const ::google::protobuf::Descriptor* PBByteMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBByteMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBAttrValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBAttrValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUserPrivilegeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUserPrivilegeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageExecPrivilegeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageExecPrivilegeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageExecPrivilegeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageExecPrivilegeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageResultSetResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageResultSetResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EM_GMONLINE_MSG_ID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_privilege_5fpb_2ehxx() {
  protobuf_AddDesc_privilege_5fpb_2ehxx();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "privilege_pb.hxx");
  GOOGLE_CHECK(file != NULL);
  PBByteMsg_descriptor_ = file->message_type(0);
  static const int PBByteMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBByteMsg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBByteMsg, content_),
  };
  PBByteMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBByteMsg_descriptor_,
      PBByteMsg::default_instance_,
      PBByteMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBByteMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBByteMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBByteMsg));
  PBValue_descriptor_ = file->message_type(1);
  static const int PBValue_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBValue, valuetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBValue, uint32value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBValue, uint64value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBValue, int32value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBValue, int64value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBValue, floatvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBValue, doublevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBValue, stringvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBValue, msgvalue_),
  };
  PBValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBValue_descriptor_,
      PBValue::default_instance_,
      PBValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBValue));
  PBAttrValue_descriptor_ = file->message_type(2);
  static const int PBAttrValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAttrValue, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAttrValue, value_),
  };
  PBAttrValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBAttrValue_descriptor_,
      PBAttrValue::default_instance_,
      PBAttrValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAttrValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAttrValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBAttrValue));
  CMessageUserPrivilegeNotify_descriptor_ = file->message_type(3);
  static const int CMessageUserPrivilegeNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserPrivilegeNotify, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserPrivilegeNotify, privileges_),
  };
  CMessageUserPrivilegeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUserPrivilegeNotify_descriptor_,
      CMessageUserPrivilegeNotify::default_instance_,
      CMessageUserPrivilegeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserPrivilegeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserPrivilegeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUserPrivilegeNotify));
  CMessageExecPrivilegeRequest_descriptor_ = file->message_type(4);
  static const int CMessageExecPrivilegeRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExecPrivilegeRequest, privid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExecPrivilegeRequest, inputparam_),
  };
  CMessageExecPrivilegeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageExecPrivilegeRequest_descriptor_,
      CMessageExecPrivilegeRequest::default_instance_,
      CMessageExecPrivilegeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExecPrivilegeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExecPrivilegeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageExecPrivilegeRequest));
  CMessageExecPrivilegeResponse_descriptor_ = file->message_type(5);
  static const int CMessageExecPrivilegeResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExecPrivilegeResponse, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExecPrivilegeResponse, privid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExecPrivilegeResponse, proto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExecPrivilegeResponse, rolename_),
  };
  CMessageExecPrivilegeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageExecPrivilegeResponse_descriptor_,
      CMessageExecPrivilegeResponse::default_instance_,
      CMessageExecPrivilegeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExecPrivilegeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExecPrivilegeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageExecPrivilegeResponse));
  CMessageResultSetResponse_descriptor_ = file->message_type(6);
  static const int CMessageResultSetResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageResultSetResponse, rowcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageResultSetResponse, colcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageResultSetResponse, fieldvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageResultSetResponse, fieldvaluelen_),
  };
  CMessageResultSetResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageResultSetResponse_descriptor_,
      CMessageResultSetResponse::default_instance_,
      CMessageResultSetResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageResultSetResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageResultSetResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageResultSetResponse));
  EM_GMONLINE_MSG_ID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_privilege_5fpb_2ehxx);
}

void protobuf_RegisterTypes() {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBByteMsg_descriptor_, &PBByteMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBValue_descriptor_, &PBValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBAttrValue_descriptor_, &PBAttrValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUserPrivilegeNotify_descriptor_, &CMessageUserPrivilegeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageExecPrivilegeRequest_descriptor_, &CMessageExecPrivilegeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageExecPrivilegeResponse_descriptor_, &CMessageExecPrivilegeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageResultSetResponse_descriptor_, &CMessageResultSetResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_privilege_5fpb_2ehxx() {
  delete PBByteMsg::default_instance_;
  delete PBByteMsg_reflection_;
  delete PBValue::default_instance_;
  delete PBValue_reflection_;
  delete PBAttrValue::default_instance_;
  delete PBAttrValue_reflection_;
  delete CMessageUserPrivilegeNotify::default_instance_;
  delete CMessageUserPrivilegeNotify_reflection_;
  delete CMessageExecPrivilegeRequest::default_instance_;
  delete CMessageExecPrivilegeRequest_reflection_;
  delete CMessageExecPrivilegeResponse::default_instance_;
  delete CMessageExecPrivilegeResponse_reflection_;
  delete CMessageResultSetResponse::default_instance_;
  delete CMessageResultSetResponse_reflection_;
}

void protobuf_AddDesc_privilege_5fpb_2ehxx() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  #ifndef _NO_PROTOBUF_STR_
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020privilege_pb.hxx\"(\n\tPBByteMsg\022\n\n\002ID\030\001 "
    "\002(\r\022\017\n\007Content\030\002 \001(\014\"\312\001\n\007PBValue\022\021\n\tValu"
    "eType\030\001 \002(\r\022\023\n\013UInt32Value\030\002 \001(\r\022\023\n\013UInt"
    "64Value\030\003 \001(\004\022\022\n\nInt32Value\030\004 \001(\005\022\022\n\nInt"
    "64Value\030\005 \001(\003\022\022\n\nFloatValue\030\006 \001(\002\022\023\n\013Dou"
    "bleValue\030\007 \001(\001\022\023\n\013StringValue\030\010 \001(\t\022\034\n\010M"
    "sgValue\030\t \001(\0132\n.PBByteMsg\"2\n\013PBAttrValue"
    "\022\n\n\002ID\030\001 \002(\r\022\027\n\005Value\030\002 \002(\0132\010.PBValue\"A\n"
    "\033CMessageUserPrivilegeNotify\022\016\n\006UserID\030\001"
    " \002(\r\022\022\n\nPrivileges\030\002 \003(\r\"P\n\034CMessageExec"
    "PrivilegeRequest\022\016\n\006PrivID\030\001 \002(\r\022 \n\nInpu"
    "tParam\030\002 \003(\0132\014.PBAttrValue\"k\n\035CMessageEx"
    "ecPrivilegeResponse\022\r\n\005Error\030\001 \002(\005\022\016\n\006Pr"
    "ivID\030\002 \002(\r\022\031\n\005Proto\030\003 \001(\0132\n.PBByteMsg\022\020\n"
    "\010RoleName\030\004 \001(\t\"p\n\031CMessageResultSetResp"
    "onse\022\023\n\010RowCount\030\001 \001(\r:\0010\022\023\n\010ColCount\030\002 "
    "\001(\r:\0010\022\022\n\nFieldValue\030\003 \003(\014\022\025\n\rFieldValue"
    "Len\030\004 \003(\r*\225\001\n\022EM_GMONLINE_MSG_ID\022\035\n\027ID_G"
    "2C_NOTIFY_PRIVILEGE\020\200\200\001\022\036\n\030ID_C2G_REQUES"
    "T_PRIVILEGE\020\201\200\001\022\037\n\031ID_G2C_RESPONSE_PRIVI"
    "LEGE\020\202\200\001\022\037\n\031ID_G2C_RESULTSET_RESPONSE\020\221\200"
    "\001B\002H\001", 845);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "privilege_pb.hxx", &protobuf_RegisterTypes);
  #endif
  PBByteMsg::default_instance_ = new PBByteMsg();
  PBValue::default_instance_ = new PBValue();
  PBAttrValue::default_instance_ = new PBAttrValue();
  CMessageUserPrivilegeNotify::default_instance_ = new CMessageUserPrivilegeNotify();
  CMessageExecPrivilegeRequest::default_instance_ = new CMessageExecPrivilegeRequest();
  CMessageExecPrivilegeResponse::default_instance_ = new CMessageExecPrivilegeResponse();
  CMessageResultSetResponse::default_instance_ = new CMessageResultSetResponse();
  PBByteMsg::default_instance_->InitAsDefaultInstance();
  PBValue::default_instance_->InitAsDefaultInstance();
  PBAttrValue::default_instance_->InitAsDefaultInstance();
  CMessageUserPrivilegeNotify::default_instance_->InitAsDefaultInstance();
  CMessageExecPrivilegeRequest::default_instance_->InitAsDefaultInstance();
  CMessageExecPrivilegeResponse::default_instance_->InitAsDefaultInstance();
  CMessageResultSetResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_privilege_5fpb_2ehxx);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_privilege_5fpb_2ehxx {
  StaticDescriptorInitializer_privilege_5fpb_2ehxx() {
    protobuf_AddDesc_privilege_5fpb_2ehxx();
  }
} static_descriptor_initializer_privilege_5fpb_2ehxx_;

const ::google::protobuf::EnumDescriptor* EM_GMONLINE_MSG_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EM_GMONLINE_MSG_ID_descriptor_;
}
bool EM_GMONLINE_MSG_ID_IsValid(int value) {
  switch(value) {
    case 16384:
    case 16385:
    case 16386:
    case 16401:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::std::string PBByteMsg::_default_content_;
#ifndef _MSC_VER
const int PBByteMsg::kIDFieldNumber;
const int PBByteMsg::kContentFieldNumber;
#endif  // !_MSC_VER

PBByteMsg::PBByteMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBByteMsg::InitAsDefaultInstance() {}

PBByteMsg::PBByteMsg(const PBByteMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBByteMsg::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  content_ = const_cast< ::std::string*>(&_default_content_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBByteMsg::~PBByteMsg() {
  SharedDtor();
}

void PBByteMsg::SharedDtor() {
  if (content_ != &_default_content_) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBByteMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBByteMsg_descriptor_;
}

const PBByteMsg& PBByteMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_privilege_5fpb_2ehxx();  return *default_instance_;
}

PBByteMsg* PBByteMsg::default_instance_ = NULL;

PBByteMsg* PBByteMsg::New() const {
  return new PBByteMsg;
}

void PBByteMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (_has_bit(1)) {
      if (content_ != &_default_content_) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBByteMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Content;
        break;
      }
      
      // optional bytes Content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Content:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_content()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBByteMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBByteMsg::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 ID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->id(), output);
  }
  
  // optional bytes Content = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->content(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBByteMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional bytes Content = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->content(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBByteMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->id());
    }
    
    // optional bytes Content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->content());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBByteMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBByteMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBByteMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBByteMsg::MergeFrom(const PBByteMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBByteMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBByteMsg::CopyFrom(const PBByteMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBByteMsg::Swap(PBByteMsg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBByteMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* PBByteMsg::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBByteMsg::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBByteMsg_reflection_;
}

// ===================================================================

const ::std::string PBValue::_default_stringvalue_;
#ifndef _MSC_VER
const int PBValue::kValueTypeFieldNumber;
const int PBValue::kUInt32ValueFieldNumber;
const int PBValue::kUInt64ValueFieldNumber;
const int PBValue::kInt32ValueFieldNumber;
const int PBValue::kInt64ValueFieldNumber;
const int PBValue::kFloatValueFieldNumber;
const int PBValue::kDoubleValueFieldNumber;
const int PBValue::kStringValueFieldNumber;
const int PBValue::kMsgValueFieldNumber;
#endif  // !_MSC_VER

PBValue::PBValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBValue::InitAsDefaultInstance() {  msgvalue_ = const_cast< ::PBByteMsg*>(&::PBByteMsg::default_instance());
}

PBValue::PBValue(const PBValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBValue::SharedCtor() {
  _cached_size_ = 0;
  valuetype_ = 0u;
  uint32value_ = 0u;
  uint64value_ = GOOGLE_ULONGLONG(0);
  int32value_ = 0;
  int64value_ = GOOGLE_LONGLONG(0);
  floatvalue_ = 0;
  doublevalue_ = 0;
  stringvalue_ = const_cast< ::std::string*>(&_default_stringvalue_);
  msgvalue_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBValue::~PBValue() {
  SharedDtor();
}

void PBValue::SharedDtor() {
  if (stringvalue_ != &_default_stringvalue_) {
    delete stringvalue_;
  }
  if (this != default_instance_) {
    delete msgvalue_;
  }
}

const ::google::protobuf::Descriptor* PBValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBValue_descriptor_;
}

const PBValue& PBValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_privilege_5fpb_2ehxx();  return *default_instance_;
}

PBValue* PBValue::default_instance_ = NULL;

PBValue* PBValue::New() const {
  return new PBValue;
}

void PBValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    valuetype_ = 0u;
    uint32value_ = 0u;
    uint64value_ = GOOGLE_ULONGLONG(0);
    int32value_ = 0;
    int64value_ = GOOGLE_LONGLONG(0);
    floatvalue_ = 0;
    doublevalue_ = 0;
    if (_has_bit(7)) {
      if (stringvalue_ != &_default_stringvalue_) {
        stringvalue_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (msgvalue_ != NULL) msgvalue_->::PBByteMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint32 ValueType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &valuetype_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_UInt32Value;
        break;
      }
      
      // optional uint32 UInt32Value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UInt32Value:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &uint32value_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_UInt64Value;
        break;
      }
      
      // optional uint64 UInt64Value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UInt64Value:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &uint64value_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Int32Value;
        break;
      }
      
      // optional int32 Int32Value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Int32Value:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &int32value_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Int64Value;
        break;
      }
      
      // optional int64 Int64Value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Int64Value:
        DO_(::google::protobuf::internal::WireFormat::ReadInt64(
              input, &int64value_));
        _set_bit(4);
        if (input->ExpectTag(53)) goto parse_FloatValue;
        break;
      }
      
      // optional float FloatValue = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_FloatValue:
        DO_(::google::protobuf::internal::WireFormat::ReadFloat(
              input, &floatvalue_));
        _set_bit(5);
        if (input->ExpectTag(57)) goto parse_DoubleValue;
        break;
      }
      
      // optional double DoubleValue = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_DoubleValue:
        DO_(::google::protobuf::internal::WireFormat::ReadDouble(
              input, &doublevalue_));
        _set_bit(6);
        if (input->ExpectTag(66)) goto parse_StringValue;
        break;
      }
      
      // optional string StringValue = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_StringValue:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_stringvalue()));
        if (input->ExpectTag(74)) goto parse_MsgValue;
        break;
      }
      
      // optional .PBByteMsg MsgValue = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MsgValue:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_msgvalue()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBValue::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 ValueType = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->valuetype(), output);
  }
  
  // optional uint32 UInt32Value = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->uint32value(), output);
  }
  
  // optional uint64 UInt64Value = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(3, this->uint64value(), output);
  }
  
  // optional int32 Int32Value = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->int32value(), output);
  }
  
  // optional int64 Int64Value = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteInt64(5, this->int64value(), output);
  }
  
  // optional float FloatValue = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteFloat(6, this->floatvalue(), output);
  }
  
  // optional double DoubleValue = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteDouble(7, this->doublevalue(), output);
  }
  
  // optional string StringValue = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteString(8, this->stringvalue(), output);
  }
  
  // optional .PBByteMsg MsgValue = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(9, this->msgvalue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ValueType = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->valuetype(), target);
  }
  
  // optional uint32 UInt32Value = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->uint32value(), target);
  }
  
  // optional uint64 UInt64Value = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(3, this->uint64value(), target);
  }
  
  // optional int32 Int32Value = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->int32value(), target);
  }
  
  // optional int64 Int64Value = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt64ToArray(5, this->int64value(), target);
  }
  
  // optional float FloatValue = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteFloatToArray(6, this->floatvalue(), target);
  }
  
  // optional double DoubleValue = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteDoubleToArray(7, this->doublevalue(), target);
  }
  
  // optional string StringValue = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(8, this->stringvalue(), target);
  }
  
  // optional .PBByteMsg MsgValue = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(9, this->msgvalue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBValue::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ValueType = 1;
    if (has_valuetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->valuetype());
    }
    
    // optional uint32 UInt32Value = 2;
    if (has_uint32value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->uint32value());
    }
    
    // optional uint64 UInt64Value = 3;
    if (has_uint64value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->uint64value());
    }
    
    // optional int32 Int32Value = 4;
    if (has_int32value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->int32value());
    }
    
    // optional int64 Int64Value = 5;
    if (has_int64value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int64Size(
          this->int64value());
    }
    
    // optional float FloatValue = 6;
    if (has_floatvalue()) {
      total_size += 1 + 4;
    }
    
    // optional double DoubleValue = 7;
    if (has_doublevalue()) {
      total_size += 1 + 8;
    }
    
    // optional string StringValue = 8;
    if (has_stringvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->stringvalue());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .PBByteMsg MsgValue = 9;
    if (has_msgvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->msgvalue());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBValue::MergeFrom(const PBValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_valuetype(from.valuetype());
    }
    if (from._has_bit(1)) {
      set_uint32value(from.uint32value());
    }
    if (from._has_bit(2)) {
      set_uint64value(from.uint64value());
    }
    if (from._has_bit(3)) {
      set_int32value(from.int32value());
    }
    if (from._has_bit(4)) {
      set_int64value(from.int64value());
    }
    if (from._has_bit(5)) {
      set_floatvalue(from.floatvalue());
    }
    if (from._has_bit(6)) {
      set_doublevalue(from.doublevalue());
    }
    if (from._has_bit(7)) {
      set_stringvalue(from.stringvalue());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      mutable_msgvalue()->::PBByteMsg::MergeFrom(from.msgvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBValue::CopyFrom(const PBValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBValue::Swap(PBValue* other) {
  if (other != this) {
    std::swap(valuetype_, other->valuetype_);
    std::swap(uint32value_, other->uint32value_);
    std::swap(uint64value_, other->uint64value_);
    std::swap(int32value_, other->int32value_);
    std::swap(int64value_, other->int64value_);
    std::swap(floatvalue_, other->floatvalue_);
    std::swap(doublevalue_, other->doublevalue_);
    std::swap(stringvalue_, other->stringvalue_);
    std::swap(msgvalue_, other->msgvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_msgvalue()) {
    if (!this->msgvalue().IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* PBValue::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBValue::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBValue_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBAttrValue::kIDFieldNumber;
const int PBAttrValue::kValueFieldNumber;
#endif  // !_MSC_VER

PBAttrValue::PBAttrValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBAttrValue::InitAsDefaultInstance() {  value_ = const_cast< ::PBValue*>(&::PBValue::default_instance());
}

PBAttrValue::PBAttrValue(const PBAttrValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBAttrValue::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBAttrValue::~PBAttrValue() {
  SharedDtor();
}

void PBAttrValue::SharedDtor() {
  if (this != default_instance_) {
    delete value_;
  }
}

const ::google::protobuf::Descriptor* PBAttrValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBAttrValue_descriptor_;
}

const PBAttrValue& PBAttrValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_privilege_5fpb_2ehxx();  return *default_instance_;
}

PBAttrValue* PBAttrValue::default_instance_ = NULL;

PBAttrValue* PBAttrValue::New() const {
  return new PBAttrValue;
}

void PBAttrValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (_has_bit(1)) {
      if (value_ != NULL) value_->::PBValue::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBAttrValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Value;
        break;
      }
      
      // required .PBValue Value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Value:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_value()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBAttrValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBAttrValue::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 ID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->id(), output);
  }
  
  // required .PBValue Value = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBAttrValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required .PBValue Value = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBAttrValue::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->id());
    }
    
    // required .PBValue Value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBAttrValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBAttrValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBAttrValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBAttrValue::MergeFrom(const PBAttrValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      mutable_value()->::PBValue::MergeFrom(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBAttrValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAttrValue::CopyFrom(const PBAttrValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAttrValue::Swap(PBAttrValue* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBAttrValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_value()) {
    if (!this->value().IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* PBAttrValue::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBAttrValue::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBAttrValue_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageUserPrivilegeNotify::kUserIDFieldNumber;
const int CMessageUserPrivilegeNotify::kPrivilegesFieldNumber;
#endif  // !_MSC_VER

CMessageUserPrivilegeNotify::CMessageUserPrivilegeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUserPrivilegeNotify::InitAsDefaultInstance() {}

CMessageUserPrivilegeNotify::CMessageUserPrivilegeNotify(const CMessageUserPrivilegeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUserPrivilegeNotify::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUserPrivilegeNotify::~CMessageUserPrivilegeNotify() {
  SharedDtor();
}

void CMessageUserPrivilegeNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageUserPrivilegeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUserPrivilegeNotify_descriptor_;
}

const CMessageUserPrivilegeNotify& CMessageUserPrivilegeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_privilege_5fpb_2ehxx();  return *default_instance_;
}

CMessageUserPrivilegeNotify* CMessageUserPrivilegeNotify::default_instance_ = NULL;

CMessageUserPrivilegeNotify* CMessageUserPrivilegeNotify::New() const {
  return new CMessageUserPrivilegeNotify;
}

void CMessageUserPrivilegeNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
  }
  privileges_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUserPrivilegeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint32 UserID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &userid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Privileges;
        break;
      }
      
      // repeated uint32 Privileges = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Privileges:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_privileges(value);
        if (input->ExpectTag(16)) goto parse_Privileges;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUserPrivilegeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUserPrivilegeNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 UserID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->userid(), output);
  }
  
  // repeated uint32 Privileges = 2;
  for (int i = 0; i < this->privileges_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->privileges(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUserPrivilegeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 UserID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->userid(), target);
  }
  
  // repeated uint32 Privileges = 2;
  for (int i = 0; i < this->privileges_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->privileges(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUserPrivilegeNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 UserID = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->userid());
    }
    
  }
  // repeated uint32 Privileges = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->privileges_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->privileges(i));
    }
    total_size += 1 * this->privileges_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUserPrivilegeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUserPrivilegeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUserPrivilegeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUserPrivilegeNotify::MergeFrom(const CMessageUserPrivilegeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  privileges_.MergeFrom(from.privileges_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUserPrivilegeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUserPrivilegeNotify::CopyFrom(const CMessageUserPrivilegeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUserPrivilegeNotify::Swap(CMessageUserPrivilegeNotify* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    privileges_.Swap(&other->privileges_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUserPrivilegeNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUserPrivilegeNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUserPrivilegeNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUserPrivilegeNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageExecPrivilegeRequest::kPrivIDFieldNumber;
const int CMessageExecPrivilegeRequest::kInputParamFieldNumber;
#endif  // !_MSC_VER

CMessageExecPrivilegeRequest::CMessageExecPrivilegeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageExecPrivilegeRequest::InitAsDefaultInstance() {}

CMessageExecPrivilegeRequest::CMessageExecPrivilegeRequest(const CMessageExecPrivilegeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageExecPrivilegeRequest::SharedCtor() {
  _cached_size_ = 0;
  privid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageExecPrivilegeRequest::~CMessageExecPrivilegeRequest() {
  SharedDtor();
}

void CMessageExecPrivilegeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageExecPrivilegeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageExecPrivilegeRequest_descriptor_;
}

const CMessageExecPrivilegeRequest& CMessageExecPrivilegeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_privilege_5fpb_2ehxx();  return *default_instance_;
}

CMessageExecPrivilegeRequest* CMessageExecPrivilegeRequest::default_instance_ = NULL;

CMessageExecPrivilegeRequest* CMessageExecPrivilegeRequest::New() const {
  return new CMessageExecPrivilegeRequest;
}

void CMessageExecPrivilegeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    privid_ = 0u;
  }
  inputparam_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageExecPrivilegeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint32 PrivID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &privid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_InputParam;
        break;
      }
      
      // repeated .PBAttrValue InputParam = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_InputParam:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_inputparam()));
        if (input->ExpectTag(18)) goto parse_InputParam;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageExecPrivilegeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageExecPrivilegeRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 PrivID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->privid(), output);
  }
  
  // repeated .PBAttrValue InputParam = 2;
  for (int i = 0; i < this->inputparam_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->inputparam(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageExecPrivilegeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 PrivID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->privid(), target);
  }
  
  // repeated .PBAttrValue InputParam = 2;
  for (int i = 0; i < this->inputparam_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->inputparam(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageExecPrivilegeRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 PrivID = 1;
    if (has_privid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->privid());
    }
    
  }
  // repeated .PBAttrValue InputParam = 2;
  total_size += 1 * this->inputparam_size();
  for (int i = 0; i < this->inputparam_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->inputparam(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageExecPrivilegeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageExecPrivilegeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageExecPrivilegeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageExecPrivilegeRequest::MergeFrom(const CMessageExecPrivilegeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  inputparam_.MergeFrom(from.inputparam_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_privid(from.privid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageExecPrivilegeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageExecPrivilegeRequest::CopyFrom(const CMessageExecPrivilegeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageExecPrivilegeRequest::Swap(CMessageExecPrivilegeRequest* other) {
  if (other != this) {
    std::swap(privid_, other->privid_);
    inputparam_.Swap(&other->inputparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageExecPrivilegeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < inputparam_size(); i++) {
    if (!this->inputparam(i).IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* CMessageExecPrivilegeRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageExecPrivilegeRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageExecPrivilegeRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageExecPrivilegeResponse::_default_rolename_;
#ifndef _MSC_VER
const int CMessageExecPrivilegeResponse::kErrorFieldNumber;
const int CMessageExecPrivilegeResponse::kPrivIDFieldNumber;
const int CMessageExecPrivilegeResponse::kProtoFieldNumber;
const int CMessageExecPrivilegeResponse::kRoleNameFieldNumber;
#endif  // !_MSC_VER

CMessageExecPrivilegeResponse::CMessageExecPrivilegeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageExecPrivilegeResponse::InitAsDefaultInstance() {  proto_ = const_cast< ::PBByteMsg*>(&::PBByteMsg::default_instance());
}

CMessageExecPrivilegeResponse::CMessageExecPrivilegeResponse(const CMessageExecPrivilegeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageExecPrivilegeResponse::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  privid_ = 0u;
  proto_ = NULL;
  rolename_ = const_cast< ::std::string*>(&_default_rolename_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageExecPrivilegeResponse::~CMessageExecPrivilegeResponse() {
  SharedDtor();
}

void CMessageExecPrivilegeResponse::SharedDtor() {
  if (rolename_ != &_default_rolename_) {
    delete rolename_;
  }
  if (this != default_instance_) {
    delete proto_;
  }
}

const ::google::protobuf::Descriptor* CMessageExecPrivilegeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageExecPrivilegeResponse_descriptor_;
}

const CMessageExecPrivilegeResponse& CMessageExecPrivilegeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_privilege_5fpb_2ehxx();  return *default_instance_;
}

CMessageExecPrivilegeResponse* CMessageExecPrivilegeResponse::default_instance_ = NULL;

CMessageExecPrivilegeResponse* CMessageExecPrivilegeResponse::New() const {
  return new CMessageExecPrivilegeResponse;
}

void CMessageExecPrivilegeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
    privid_ = 0u;
    if (_has_bit(2)) {
      if (proto_ != NULL) proto_->::PBByteMsg::Clear();
    }
    if (_has_bit(3)) {
      if (rolename_ != &_default_rolename_) {
        rolename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageExecPrivilegeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required int32 Error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &error_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_PrivID;
        break;
      }
      
      // required uint32 PrivID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PrivID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &privid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_Proto;
        break;
      }
      
      // optional .PBByteMsg Proto = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Proto:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_proto()));
        if (input->ExpectTag(34)) goto parse_RoleName;
        break;
      }
      
      // optional string RoleName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RoleName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_rolename()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageExecPrivilegeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageExecPrivilegeResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 Error = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(1, this->error(), output);
  }
  
  // required uint32 PrivID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->privid(), output);
  }
  
  // optional .PBByteMsg Proto = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->proto(), output);
  }
  
  // optional string RoleName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->rolename(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageExecPrivilegeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Error = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(1, this->error(), target);
  }
  
  // required uint32 PrivID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->privid(), target);
  }
  
  // optional .PBByteMsg Proto = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->proto(), target);
  }
  
  // optional string RoleName = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->rolename(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageExecPrivilegeResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->error());
    }
    
    // required uint32 PrivID = 2;
    if (has_privid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->privid());
    }
    
    // optional .PBByteMsg Proto = 3;
    if (has_proto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->proto());
    }
    
    // optional string RoleName = 4;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->rolename());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageExecPrivilegeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageExecPrivilegeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageExecPrivilegeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageExecPrivilegeResponse::MergeFrom(const CMessageExecPrivilegeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_error(from.error());
    }
    if (from._has_bit(1)) {
      set_privid(from.privid());
    }
    if (from._has_bit(2)) {
      mutable_proto()->::PBByteMsg::MergeFrom(from.proto());
    }
    if (from._has_bit(3)) {
      set_rolename(from.rolename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageExecPrivilegeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageExecPrivilegeResponse::CopyFrom(const CMessageExecPrivilegeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageExecPrivilegeResponse::Swap(CMessageExecPrivilegeResponse* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(privid_, other->privid_);
    std::swap(proto_, other->proto_);
    std::swap(rolename_, other->rolename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageExecPrivilegeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_proto()) {
    if (!this->proto().IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* CMessageExecPrivilegeResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageExecPrivilegeResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageExecPrivilegeResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageResultSetResponse::kRowCountFieldNumber;
const int CMessageResultSetResponse::kColCountFieldNumber;
const int CMessageResultSetResponse::kFieldValueFieldNumber;
const int CMessageResultSetResponse::kFieldValueLenFieldNumber;
#endif  // !_MSC_VER

CMessageResultSetResponse::CMessageResultSetResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageResultSetResponse::InitAsDefaultInstance() {}

CMessageResultSetResponse::CMessageResultSetResponse(const CMessageResultSetResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageResultSetResponse::SharedCtor() {
  _cached_size_ = 0;
  rowcount_ = 0u;
  colcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageResultSetResponse::~CMessageResultSetResponse() {
  SharedDtor();
}

void CMessageResultSetResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageResultSetResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageResultSetResponse_descriptor_;
}

const CMessageResultSetResponse& CMessageResultSetResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_privilege_5fpb_2ehxx();  return *default_instance_;
}

CMessageResultSetResponse* CMessageResultSetResponse::default_instance_ = NULL;

CMessageResultSetResponse* CMessageResultSetResponse::New() const {
  return new CMessageResultSetResponse;
}

void CMessageResultSetResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rowcount_ = 0u;
    colcount_ = 0u;
  }
  fieldvalue_.Clear();
  fieldvaluelen_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageResultSetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RowCount = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rowcount_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ColCount;
        break;
      }
      
      // optional uint32 ColCount = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ColCount:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &colcount_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_FieldValue;
        break;
      }
      
      // repeated bytes FieldValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FieldValue:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(
             input, add_fieldvalue()));
        if (input->ExpectTag(26)) goto parse_FieldValue;
        if (input->ExpectTag(32)) goto parse_FieldValueLen;
        break;
      }
      
      // repeated uint32 FieldValueLen = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FieldValueLen:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_fieldvaluelen(value);
        if (input->ExpectTag(32)) goto parse_FieldValueLen;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageResultSetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageResultSetResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RowCount = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->rowcount(), output);
  }
  
  // optional uint32 ColCount = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->colcount(), output);
  }
  
  // repeated bytes FieldValue = 3;
  for (int i = 0; i < this->fieldvalue_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->fieldvalue(i), output);
  }
  
  // repeated uint32 FieldValueLen = 4;
  for (int i = 0; i < this->fieldvaluelen_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->fieldvaluelen(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageResultSetResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RowCount = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->rowcount(), target);
  }
  
  // optional uint32 ColCount = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->colcount(), target);
  }
  
  // repeated bytes FieldValue = 3;
  for (int i = 0; i < this->fieldvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->fieldvalue(i), target);
  }
  
  // repeated uint32 FieldValueLen = 4;
  for (int i = 0; i < this->fieldvaluelen_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->fieldvaluelen(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageResultSetResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RowCount = 1 [default = 0];
    if (has_rowcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rowcount());
    }
    
    // optional uint32 ColCount = 2 [default = 0];
    if (has_colcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->colcount());
    }
    
  }
  // repeated bytes FieldValue = 3;
  total_size += 1 * this->fieldvalue_size();
  for (int i = 0; i < this->fieldvalue_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormat::BytesSize(
      this->fieldvalue(i));
  }
  
  // repeated uint32 FieldValueLen = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->fieldvaluelen_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->fieldvaluelen(i));
    }
    total_size += 1 * this->fieldvaluelen_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageResultSetResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageResultSetResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageResultSetResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageResultSetResponse::MergeFrom(const CMessageResultSetResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  fieldvalue_.MergeFrom(from.fieldvalue_);
  fieldvaluelen_.MergeFrom(from.fieldvaluelen_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_rowcount(from.rowcount());
    }
    if (from._has_bit(1)) {
      set_colcount(from.colcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageResultSetResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageResultSetResponse::CopyFrom(const CMessageResultSetResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageResultSetResponse::Swap(CMessageResultSetResponse* other) {
  if (other != this) {
    std::swap(rowcount_, other->rowcount_);
    std::swap(colcount_, other->colcount_);
    fieldvalue_.Swap(&other->fieldvalue_);
    fieldvaluelen_.Swap(&other->fieldvaluelen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageResultSetResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageResultSetResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageResultSetResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageResultSetResponse_reflection_;
}
