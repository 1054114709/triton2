// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "corpsmessage_pb.hxx.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>
#ifdef LEAK_CHK_DEBUG_NEW
#include "debug_new.h"
#endif

namespace {

const ::google::protobuf::Descriptor* CorpsHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CorpsHead_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCreatCorpsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCreatCorpsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCreatCorpsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCreatCorpsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageApplyCorpsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageApplyCorpsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageApplyCorpsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageApplyCorpsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsMemberApplyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsMemberApplyNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageReplyCorpsMemberApplyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageReplyCorpsMemberApplyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageReplyCorpsMemberApplyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageReplyCorpsMemberApplyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageApplyCorpsResultNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageApplyCorpsResultNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageInviteCorpsMemberRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageInviteCorpsMemberRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageInviteCorpsMemberResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageInviteCorpsMemberResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsInviteNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsInviteNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageReplyCorpsInviteRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageReplyCorpsInviteRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageReplyCorpsInviteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageReplyCorpsInviteResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsInviteResultNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsInviteResultNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFamilyJoinCorpsNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFamilyJoinCorpsNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFamilyLeaveCorpsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFamilyLeaveCorpsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFamilyLeaveCorpsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFamilyLeaveCorpsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFamilyLeaveCorpsNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFamilyLeaveCorpsNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageKickFamilyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageKickFamilyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageKickFamilyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageKickFamilyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageKickFamilyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageKickFamilyNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetCorpsFamilyInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetCorpsFamilyInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetCorpsFamilyInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetCorpsFamilyInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetCorpsPropertyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetCorpsPropertyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetCorpsPropertyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetCorpsPropertyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetCorpsFamilyMemberRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetCorpsFamilyMemberRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetCorpsFamilyMemberResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetCorpsFamilyMemberResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeCorpsBulletinRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeCorpsBulletinRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeCorpsBulletinResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeCorpsBulletinResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeCorpsBulletinNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeCorpsBulletinNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeCorpsHeaderRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeCorpsHeaderRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeCorpsHeaderResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeCorpsHeaderResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeCorpsHeaderNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeCorpsHeaderNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetCorpsApplyListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetCorpsApplyListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetCorpsApplyListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetCorpsApplyListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageDisbandCorpsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageDisbandCorpsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageDisbandCorpsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageDisbandCorpsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageDisbandCorpsNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageDisbandCorpsNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCancelCorpsDisbandRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCancelCorpsDisbandRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCancelCorpsDisbandResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCancelCorpsDisbandResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageClearCorpsApplyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageClearCorpsApplyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageClearCorpsApplyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageClearCorpsApplyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRefreshCorpsInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRefreshCorpsInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRefreshCorpsInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRefreshCorpsInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetCorpsListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetCorpsListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetCorpsListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetCorpsListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageSetCorpsPostRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageSetCorpsPostRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageSetCorpsPostResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageSetCorpsPostResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLevelUPCorpsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLevelUPCorpsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLevelUPCorpsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLevelUPCorpsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageContributeCorpsMoneyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageContributeCorpsMoneyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageContributeCorpsMoneyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageContributeCorpsMoneyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFamilyContributeMoneyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFamilyContributeMoneyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFamilyContributeMoneyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFamilyContributeMoneyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageSetMemberNameRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageSetMemberNameRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageSetMemberNameResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageSetMemberNameResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageSetCorpsPostNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageSetCorpsPostNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsLevelUPNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsLevelUPNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsBattleBidRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsBattleBidRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsBattleBidResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsBattleBidResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsQueryBidRankRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsQueryBidRankRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBBidRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBBidRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsQueryBidRankResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsQueryBidRankResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsSelectFamilyBattleRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsSelectFamilyBattleRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsSelectFamilyBattleResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsSelectFamilyBattleResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsPvPStarLevelUpNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsPvPStarLevelUpNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsBattleRightsNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsBattleRightsNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsRecBattleRightsNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsRecBattleRightsNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsSelectMemberBattleRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsSelectMemberBattleRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsSelectMemberBattleResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsSelectMemberBattleResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsMemberBattleRightsNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsMemberBattleRightsNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsMoneyChangedNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsMoneyChangedNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsGloryChangedNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsGloryChangedNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsContributeChangedNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsContributeChangedNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsBossTimesChangedNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsBossTimesChangedNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsBossRefineValueNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsBossRefineValueNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsCollectActiveChangeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsCollectActiveChangeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageMendShengHuoTaiRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageMendShengHuoTaiRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsPropertyNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsPropertyNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsOperateRoomRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsOperateRoomRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsOperateRoomResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsOperateRoomResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsRoomNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsRoomNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsChallegeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsChallegeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsChallegeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsChallegeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsChallegeNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsChallegeNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsReplyChallegeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsReplyChallegeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsReplyChallegeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsReplyChallegeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsQueryChallegeListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsQueryChallegeListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsQueryChallegeListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsQueryChallegeListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBChallege_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBChallege_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsQueryRecChallegeListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsQueryRecChallegeListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsQueryRecChallegeListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsQueryRecChallegeListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsQueryRoomListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsQueryRoomListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCorpsRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCorpsRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsQueryRoomListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsQueryRoomListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageQueryCorpsWelfareRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageQueryCorpsWelfareRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageQueryCorpsWelfareResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageQueryCorpsWelfareResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageObtainCorpsWelfareRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageObtainCorpsWelfareRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageObtainCorpsWelfareResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageObtainCorpsWelfareResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetCorpsMoneyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetCorpsMoneyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetCorpsMoneyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetCorpsMoneyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsAbortBattleCityRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsAbortBattleCityRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsAbortBattleCityResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsAbortBattleCityResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsAbortBattleCityNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsAbortBattleCityNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsCanLevelUPNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsCanLevelUPNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsPublishTaskNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsPublishTaskNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsBattleResultNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsBattleResultNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsNpcOwnerNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsNpcOwnerNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsNameChangedNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsNameChangedNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCreateUnionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCreateUnionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCreateUnionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCreateUnionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCreateUnionNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCreateUnionNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageApplyUnionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageApplyUnionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageApplyUnionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageApplyUnionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUnionMemberApplyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUnionMemberApplyNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageReplyUnionMemberApplyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageReplyUnionMemberApplyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageReplyUnionMemberApplyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageReplyUnionMemberApplyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageApplyUnionResultNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageApplyUnionResultNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageInviteUnionMemberRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageInviteUnionMemberRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageInviteUnionMemberResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageInviteUnionMemberResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUnionInviteNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUnionInviteNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageReplyUnionInviteRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageReplyUnionInviteRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageReplyUnionInviteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageReplyUnionInviteResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUnionInviteResultNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUnionInviteResultNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsJoinUnionNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsJoinUnionNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsLeaveUnionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsLeaveUnionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsLeaveUnionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsLeaveUnionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsLeaveUnionNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsLeaveUnionNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageKickCorpsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageKickCorpsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageKickCorpsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageKickCorpsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageKickCorpsNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageKickCorpsNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageMakeUnionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageMakeUnionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageMakeUnionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageMakeUnionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageMakeUnionNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageMakeUnionNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetUnionInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetUnionInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetUnionInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetUnionInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageDismissUnionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageDismissUnionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageDismissUnionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageDismissUnionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageDismissUnionNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageDismissUnionNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUnionApplyListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUnionApplyListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUnionApplyListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUnionApplyListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageAllUnionListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageAllUnionListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageAllUnionListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageAllUnionListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsGetOtherMemberRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsGetOtherMemberRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBBattleMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBBattleMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsGetOtherMemberResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsGetOtherMemberResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUnionJoinBattleListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUnionJoinBattleListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUnionJoinBattleListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUnionJoinBattleListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsGetAllMapRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsGetAllMapRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMapOwner_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMapOwner_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsGetAllMapResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsGetAllMapResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsAppointPrinceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsAppointPrinceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorspAppointPrinceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorspAppointPrinceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsAppointPrinceNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsAppointPrinceNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsMoveCapitalRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsMoveCapitalRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMesssageCorpsMoveCapitalResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMesssageCorpsMoveCapitalResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsSelectColorRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsSelectColorRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsSelectColorResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsSelectColorResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CorpsGoodItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CorpsGoodItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetCorpsGoodsListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetCorpsGoodsListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetCorpsGoodsListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetCorpsGoodsListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetCorpsExchangeGoodsListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetCorpsExchangeGoodsListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetCorpsExchangeGoodsListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetCorpsExchangeGoodsListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeUnionNameRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeUnionNameRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeUnionNameResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeUnionNameResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeUnionNameNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeUnionNameNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeCorpsGoodsListNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeCorpsGoodsListNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeCorpsExchangeGoodsListNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeCorpsExchangeGoodsListNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUseCorpsLeagueItemNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUseCorpsLeagueItemNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsLoginBattleRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsLoginBattleRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsLoginBattleResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsLoginBattleResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageSummonCorpsBossRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageSummonCorpsBossRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageSummonCorpsBossResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageSummonCorpsBossResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsBossRepetionOpenNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsBossRepetionOpenNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageIntoCorpsBossRepetionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageIntoCorpsBossRepetionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsBossRepetionEndNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsBossRepetionEndNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CorpsMessageID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_corpsmessage_5fpb_2ehxx() {
  protobuf_AddDesc_corpsmessage_5fpb_2ehxx();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "corpsmessage_pb.hxx");
  GOOGLE_CHECK(file != NULL);
  CorpsHead_descriptor_ = file->message_type(0);
  static const int CorpsHead_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsHead, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsHead, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsHead, entityid_),
  };
  CorpsHead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CorpsHead_descriptor_,
      CorpsHead::default_instance_,
      CorpsHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsHead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsHead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CorpsHead));
  CMessageCreatCorpsRequest_descriptor_ = file->message_type(1);
  static const int CMessageCreatCorpsRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreatCorpsRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreatCorpsRequest, corpsname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreatCorpsRequest, npcentityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreatCorpsRequest, corpscolor_),
  };
  CMessageCreatCorpsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCreatCorpsRequest_descriptor_,
      CMessageCreatCorpsRequest::default_instance_,
      CMessageCreatCorpsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreatCorpsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreatCorpsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCreatCorpsRequest));
  CMessageCreatCorpsResponse_descriptor_ = file->message_type(2);
  static const int CMessageCreatCorpsResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreatCorpsResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreatCorpsResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreatCorpsResponse, corpsname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreatCorpsResponse, corpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreatCorpsResponse, corpscolor_),
  };
  CMessageCreatCorpsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCreatCorpsResponse_descriptor_,
      CMessageCreatCorpsResponse::default_instance_,
      CMessageCreatCorpsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreatCorpsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreatCorpsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCreatCorpsResponse));
  CMessageApplyCorpsRequest_descriptor_ = file->message_type(3);
  static const int CMessageApplyCorpsRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyCorpsRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyCorpsRequest, corpsname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyCorpsRequest, corpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyCorpsRequest, roleid_),
  };
  CMessageApplyCorpsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageApplyCorpsRequest_descriptor_,
      CMessageApplyCorpsRequest::default_instance_,
      CMessageApplyCorpsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyCorpsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyCorpsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageApplyCorpsRequest));
  CMessageApplyCorpsResponse_descriptor_ = file->message_type(4);
  static const int CMessageApplyCorpsResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyCorpsResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyCorpsResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyCorpsResponse, corpsname_),
  };
  CMessageApplyCorpsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageApplyCorpsResponse_descriptor_,
      CMessageApplyCorpsResponse::default_instance_,
      CMessageApplyCorpsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyCorpsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyCorpsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageApplyCorpsResponse));
  CMessageCorpsMemberApplyNotify_descriptor_ = file->message_type(5);
  static const int CMessageCorpsMemberApplyNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsMemberApplyNotify, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsMemberApplyNotify, familyinfo_),
  };
  CMessageCorpsMemberApplyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsMemberApplyNotify_descriptor_,
      CMessageCorpsMemberApplyNotify::default_instance_,
      CMessageCorpsMemberApplyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsMemberApplyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsMemberApplyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsMemberApplyNotify));
  CMessageReplyCorpsMemberApplyRequest_descriptor_ = file->message_type(6);
  static const int CMessageReplyCorpsMemberApplyRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyCorpsMemberApplyRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyCorpsMemberApplyRequest, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyCorpsMemberApplyRequest, familyid_),
  };
  CMessageReplyCorpsMemberApplyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageReplyCorpsMemberApplyRequest_descriptor_,
      CMessageReplyCorpsMemberApplyRequest::default_instance_,
      CMessageReplyCorpsMemberApplyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyCorpsMemberApplyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyCorpsMemberApplyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageReplyCorpsMemberApplyRequest));
  CMessageReplyCorpsMemberApplyResponse_descriptor_ = file->message_type(7);
  static const int CMessageReplyCorpsMemberApplyResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyCorpsMemberApplyResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyCorpsMemberApplyResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyCorpsMemberApplyResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyCorpsMemberApplyResponse, familyid_),
  };
  CMessageReplyCorpsMemberApplyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageReplyCorpsMemberApplyResponse_descriptor_,
      CMessageReplyCorpsMemberApplyResponse::default_instance_,
      CMessageReplyCorpsMemberApplyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyCorpsMemberApplyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyCorpsMemberApplyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageReplyCorpsMemberApplyResponse));
  CMessageApplyCorpsResultNotify_descriptor_ = file->message_type(8);
  static const int CMessageApplyCorpsResultNotify_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyCorpsResultNotify, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyCorpsResultNotify, resultcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyCorpsResultNotify, corpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyCorpsResultNotify, corpsname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyCorpsResultNotify, unionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyCorpsResultNotify, unionname_),
  };
  CMessageApplyCorpsResultNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageApplyCorpsResultNotify_descriptor_,
      CMessageApplyCorpsResultNotify::default_instance_,
      CMessageApplyCorpsResultNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyCorpsResultNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyCorpsResultNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageApplyCorpsResultNotify));
  CMessageInviteCorpsMemberRequest_descriptor_ = file->message_type(9);
  static const int CMessageInviteCorpsMemberRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteCorpsMemberRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteCorpsMemberRequest, familyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteCorpsMemberRequest, familyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteCorpsMemberRequest, memberid_),
  };
  CMessageInviteCorpsMemberRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageInviteCorpsMemberRequest_descriptor_,
      CMessageInviteCorpsMemberRequest::default_instance_,
      CMessageInviteCorpsMemberRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteCorpsMemberRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteCorpsMemberRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageInviteCorpsMemberRequest));
  CMessageInviteCorpsMemberResponse_descriptor_ = file->message_type(10);
  static const int CMessageInviteCorpsMemberResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteCorpsMemberResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteCorpsMemberResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteCorpsMemberResponse, familyname_),
  };
  CMessageInviteCorpsMemberResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageInviteCorpsMemberResponse_descriptor_,
      CMessageInviteCorpsMemberResponse::default_instance_,
      CMessageInviteCorpsMemberResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteCorpsMemberResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteCorpsMemberResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageInviteCorpsMemberResponse));
  CMessageCorpsInviteNotify_descriptor_ = file->message_type(11);
  static const int CMessageCorpsInviteNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsInviteNotify, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsInviteNotify, invitingname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsInviteNotify, invitingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsInviteNotify, corpsinfo_),
  };
  CMessageCorpsInviteNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsInviteNotify_descriptor_,
      CMessageCorpsInviteNotify::default_instance_,
      CMessageCorpsInviteNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsInviteNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsInviteNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsInviteNotify));
  CMessageReplyCorpsInviteRequest_descriptor_ = file->message_type(12);
  static const int CMessageReplyCorpsInviteRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyCorpsInviteRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyCorpsInviteRequest, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyCorpsInviteRequest, corpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyCorpsInviteRequest, invitingid_),
  };
  CMessageReplyCorpsInviteRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageReplyCorpsInviteRequest_descriptor_,
      CMessageReplyCorpsInviteRequest::default_instance_,
      CMessageReplyCorpsInviteRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyCorpsInviteRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyCorpsInviteRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageReplyCorpsInviteRequest));
  CMessageReplyCorpsInviteResponse_descriptor_ = file->message_type(13);
  static const int CMessageReplyCorpsInviteResponse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyCorpsInviteResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyCorpsInviteResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyCorpsInviteResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyCorpsInviteResponse, corpsname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyCorpsInviteResponse, corpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyCorpsInviteResponse, unionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyCorpsInviteResponse, unionname_),
  };
  CMessageReplyCorpsInviteResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageReplyCorpsInviteResponse_descriptor_,
      CMessageReplyCorpsInviteResponse::default_instance_,
      CMessageReplyCorpsInviteResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyCorpsInviteResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyCorpsInviteResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageReplyCorpsInviteResponse));
  CMessageCorpsInviteResultNotify_descriptor_ = file->message_type(14);
  static const int CMessageCorpsInviteResultNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsInviteResultNotify, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsInviteResultNotify, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsInviteResultNotify, familyname_),
  };
  CMessageCorpsInviteResultNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsInviteResultNotify_descriptor_,
      CMessageCorpsInviteResultNotify::default_instance_,
      CMessageCorpsInviteResultNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsInviteResultNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsInviteResultNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsInviteResultNotify));
  CMessageFamilyJoinCorpsNotify_descriptor_ = file->message_type(15);
  static const int CMessageFamilyJoinCorpsNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyJoinCorpsNotify, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyJoinCorpsNotify, familyinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyJoinCorpsNotify, unionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyJoinCorpsNotify, unionname_),
  };
  CMessageFamilyJoinCorpsNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFamilyJoinCorpsNotify_descriptor_,
      CMessageFamilyJoinCorpsNotify::default_instance_,
      CMessageFamilyJoinCorpsNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyJoinCorpsNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyJoinCorpsNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFamilyJoinCorpsNotify));
  CMessageFamilyLeaveCorpsRequest_descriptor_ = file->message_type(16);
  static const int CMessageFamilyLeaveCorpsRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyLeaveCorpsRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyLeaveCorpsRequest, msgcode_),
  };
  CMessageFamilyLeaveCorpsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFamilyLeaveCorpsRequest_descriptor_,
      CMessageFamilyLeaveCorpsRequest::default_instance_,
      CMessageFamilyLeaveCorpsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyLeaveCorpsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyLeaveCorpsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFamilyLeaveCorpsRequest));
  CMessageFamilyLeaveCorpsResponse_descriptor_ = file->message_type(17);
  static const int CMessageFamilyLeaveCorpsResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyLeaveCorpsResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyLeaveCorpsResponse, errcode_),
  };
  CMessageFamilyLeaveCorpsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFamilyLeaveCorpsResponse_descriptor_,
      CMessageFamilyLeaveCorpsResponse::default_instance_,
      CMessageFamilyLeaveCorpsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyLeaveCorpsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyLeaveCorpsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFamilyLeaveCorpsResponse));
  CMessageFamilyLeaveCorpsNotify_descriptor_ = file->message_type(18);
  static const int CMessageFamilyLeaveCorpsNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyLeaveCorpsNotify, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyLeaveCorpsNotify, familyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyLeaveCorpsNotify, familyname_),
  };
  CMessageFamilyLeaveCorpsNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFamilyLeaveCorpsNotify_descriptor_,
      CMessageFamilyLeaveCorpsNotify::default_instance_,
      CMessageFamilyLeaveCorpsNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyLeaveCorpsNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyLeaveCorpsNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFamilyLeaveCorpsNotify));
  CMessageKickFamilyRequest_descriptor_ = file->message_type(19);
  static const int CMessageKickFamilyRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickFamilyRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickFamilyRequest, familyid_),
  };
  CMessageKickFamilyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageKickFamilyRequest_descriptor_,
      CMessageKickFamilyRequest::default_instance_,
      CMessageKickFamilyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickFamilyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickFamilyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageKickFamilyRequest));
  CMessageKickFamilyResponse_descriptor_ = file->message_type(20);
  static const int CMessageKickFamilyResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickFamilyResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickFamilyResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickFamilyResponse, familyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickFamilyResponse, familyid_),
  };
  CMessageKickFamilyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageKickFamilyResponse_descriptor_,
      CMessageKickFamilyResponse::default_instance_,
      CMessageKickFamilyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickFamilyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickFamilyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageKickFamilyResponse));
  CMessageKickFamilyNotify_descriptor_ = file->message_type(21);
  static const int CMessageKickFamilyNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickFamilyNotify, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickFamilyNotify, familyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickFamilyNotify, familyname_),
  };
  CMessageKickFamilyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageKickFamilyNotify_descriptor_,
      CMessageKickFamilyNotify::default_instance_,
      CMessageKickFamilyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickFamilyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickFamilyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageKickFamilyNotify));
  CMessageGetCorpsFamilyInfoRequest_descriptor_ = file->message_type(22);
  static const int CMessageGetCorpsFamilyInfoRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsFamilyInfoRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsFamilyInfoRequest, msgcode_),
  };
  CMessageGetCorpsFamilyInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetCorpsFamilyInfoRequest_descriptor_,
      CMessageGetCorpsFamilyInfoRequest::default_instance_,
      CMessageGetCorpsFamilyInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsFamilyInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsFamilyInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetCorpsFamilyInfoRequest));
  CMessageGetCorpsFamilyInfoResponse_descriptor_ = file->message_type(23);
  static const int CMessageGetCorpsFamilyInfoResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsFamilyInfoResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsFamilyInfoResponse, corpsmemberinfo_),
  };
  CMessageGetCorpsFamilyInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetCorpsFamilyInfoResponse_descriptor_,
      CMessageGetCorpsFamilyInfoResponse::default_instance_,
      CMessageGetCorpsFamilyInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsFamilyInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsFamilyInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetCorpsFamilyInfoResponse));
  CMessageGetCorpsPropertyRequest_descriptor_ = file->message_type(24);
  static const int CMessageGetCorpsPropertyRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsPropertyRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsPropertyRequest, msgcode_),
  };
  CMessageGetCorpsPropertyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetCorpsPropertyRequest_descriptor_,
      CMessageGetCorpsPropertyRequest::default_instance_,
      CMessageGetCorpsPropertyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsPropertyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsPropertyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetCorpsPropertyRequest));
  CMessageGetCorpsPropertyResponse_descriptor_ = file->message_type(25);
  static const int CMessageGetCorpsPropertyResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsPropertyResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsPropertyResponse, corpproperty_),
  };
  CMessageGetCorpsPropertyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetCorpsPropertyResponse_descriptor_,
      CMessageGetCorpsPropertyResponse::default_instance_,
      CMessageGetCorpsPropertyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsPropertyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsPropertyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetCorpsPropertyResponse));
  CMessageGetCorpsFamilyMemberRequest_descriptor_ = file->message_type(26);
  static const int CMessageGetCorpsFamilyMemberRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsFamilyMemberRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsFamilyMemberRequest, familyid_),
  };
  CMessageGetCorpsFamilyMemberRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetCorpsFamilyMemberRequest_descriptor_,
      CMessageGetCorpsFamilyMemberRequest::default_instance_,
      CMessageGetCorpsFamilyMemberRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsFamilyMemberRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsFamilyMemberRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetCorpsFamilyMemberRequest));
  CMessageGetCorpsFamilyMemberResponse_descriptor_ = file->message_type(27);
  static const int CMessageGetCorpsFamilyMemberResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsFamilyMemberResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsFamilyMemberResponse, familyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsFamilyMemberResponse, familyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsFamilyMemberResponse, memberlist_),
  };
  CMessageGetCorpsFamilyMemberResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetCorpsFamilyMemberResponse_descriptor_,
      CMessageGetCorpsFamilyMemberResponse::default_instance_,
      CMessageGetCorpsFamilyMemberResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsFamilyMemberResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsFamilyMemberResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetCorpsFamilyMemberResponse));
  CMessageChangeCorpsBulletinRequest_descriptor_ = file->message_type(28);
  static const int CMessageChangeCorpsBulletinRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsBulletinRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsBulletinRequest, bulletin_),
  };
  CMessageChangeCorpsBulletinRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeCorpsBulletinRequest_descriptor_,
      CMessageChangeCorpsBulletinRequest::default_instance_,
      CMessageChangeCorpsBulletinRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsBulletinRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsBulletinRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeCorpsBulletinRequest));
  CMessageChangeCorpsBulletinResponse_descriptor_ = file->message_type(29);
  static const int CMessageChangeCorpsBulletinResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsBulletinResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsBulletinResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsBulletinResponse, bulletin_),
  };
  CMessageChangeCorpsBulletinResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeCorpsBulletinResponse_descriptor_,
      CMessageChangeCorpsBulletinResponse::default_instance_,
      CMessageChangeCorpsBulletinResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsBulletinResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsBulletinResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeCorpsBulletinResponse));
  CMessageChangeCorpsBulletinNotify_descriptor_ = file->message_type(30);
  static const int CMessageChangeCorpsBulletinNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsBulletinNotify, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsBulletinNotify, bulletin_),
  };
  CMessageChangeCorpsBulletinNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeCorpsBulletinNotify_descriptor_,
      CMessageChangeCorpsBulletinNotify::default_instance_,
      CMessageChangeCorpsBulletinNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsBulletinNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsBulletinNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeCorpsBulletinNotify));
  CMessageChangeCorpsHeaderRequest_descriptor_ = file->message_type(31);
  static const int CMessageChangeCorpsHeaderRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsHeaderRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsHeaderRequest, memberid_),
  };
  CMessageChangeCorpsHeaderRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeCorpsHeaderRequest_descriptor_,
      CMessageChangeCorpsHeaderRequest::default_instance_,
      CMessageChangeCorpsHeaderRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsHeaderRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsHeaderRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeCorpsHeaderRequest));
  CMessageChangeCorpsHeaderResponse_descriptor_ = file->message_type(32);
  static const int CMessageChangeCorpsHeaderResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsHeaderResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsHeaderResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsHeaderResponse, memberid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsHeaderResponse, membername_),
  };
  CMessageChangeCorpsHeaderResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeCorpsHeaderResponse_descriptor_,
      CMessageChangeCorpsHeaderResponse::default_instance_,
      CMessageChangeCorpsHeaderResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsHeaderResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsHeaderResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeCorpsHeaderResponse));
  CMessageChangeCorpsHeaderNotify_descriptor_ = file->message_type(33);
  static const int CMessageChangeCorpsHeaderNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsHeaderNotify, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsHeaderNotify, headerroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsHeaderNotify, headerrolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsHeaderNotify, memberroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsHeaderNotify, memberrolename_),
  };
  CMessageChangeCorpsHeaderNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeCorpsHeaderNotify_descriptor_,
      CMessageChangeCorpsHeaderNotify::default_instance_,
      CMessageChangeCorpsHeaderNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsHeaderNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsHeaderNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeCorpsHeaderNotify));
  CMessageGetCorpsApplyListRequest_descriptor_ = file->message_type(34);
  static const int CMessageGetCorpsApplyListRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsApplyListRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsApplyListRequest, msgcode_),
  };
  CMessageGetCorpsApplyListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetCorpsApplyListRequest_descriptor_,
      CMessageGetCorpsApplyListRequest::default_instance_,
      CMessageGetCorpsApplyListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsApplyListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsApplyListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetCorpsApplyListRequest));
  CMessageGetCorpsApplyListResponse_descriptor_ = file->message_type(35);
  static const int CMessageGetCorpsApplyListResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsApplyListResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsApplyListResponse, msgcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsApplyListResponse, corpsapply_),
  };
  CMessageGetCorpsApplyListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetCorpsApplyListResponse_descriptor_,
      CMessageGetCorpsApplyListResponse::default_instance_,
      CMessageGetCorpsApplyListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsApplyListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsApplyListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetCorpsApplyListResponse));
  CMessageDisbandCorpsRequest_descriptor_ = file->message_type(36);
  static const int CMessageDisbandCorpsRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDisbandCorpsRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDisbandCorpsRequest, npcentityid_),
  };
  CMessageDisbandCorpsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageDisbandCorpsRequest_descriptor_,
      CMessageDisbandCorpsRequest::default_instance_,
      CMessageDisbandCorpsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDisbandCorpsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDisbandCorpsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageDisbandCorpsRequest));
  CMessageDisbandCorpsResponse_descriptor_ = file->message_type(37);
  static const int CMessageDisbandCorpsResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDisbandCorpsResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDisbandCorpsResponse, errcode_),
  };
  CMessageDisbandCorpsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageDisbandCorpsResponse_descriptor_,
      CMessageDisbandCorpsResponse::default_instance_,
      CMessageDisbandCorpsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDisbandCorpsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDisbandCorpsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageDisbandCorpsResponse));
  CMessageDisbandCorpsNotify_descriptor_ = file->message_type(38);
  static const int CMessageDisbandCorpsNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDisbandCorpsNotify, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDisbandCorpsNotify, msgcode_),
  };
  CMessageDisbandCorpsNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageDisbandCorpsNotify_descriptor_,
      CMessageDisbandCorpsNotify::default_instance_,
      CMessageDisbandCorpsNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDisbandCorpsNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDisbandCorpsNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageDisbandCorpsNotify));
  CMessageCancelCorpsDisbandRequest_descriptor_ = file->message_type(39);
  static const int CMessageCancelCorpsDisbandRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCancelCorpsDisbandRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCancelCorpsDisbandRequest, msgcode_),
  };
  CMessageCancelCorpsDisbandRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCancelCorpsDisbandRequest_descriptor_,
      CMessageCancelCorpsDisbandRequest::default_instance_,
      CMessageCancelCorpsDisbandRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCancelCorpsDisbandRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCancelCorpsDisbandRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCancelCorpsDisbandRequest));
  CMessageCancelCorpsDisbandResponse_descriptor_ = file->message_type(40);
  static const int CMessageCancelCorpsDisbandResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCancelCorpsDisbandResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCancelCorpsDisbandResponse, errcode_),
  };
  CMessageCancelCorpsDisbandResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCancelCorpsDisbandResponse_descriptor_,
      CMessageCancelCorpsDisbandResponse::default_instance_,
      CMessageCancelCorpsDisbandResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCancelCorpsDisbandResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCancelCorpsDisbandResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCancelCorpsDisbandResponse));
  CMessageClearCorpsApplyRequest_descriptor_ = file->message_type(41);
  static const int CMessageClearCorpsApplyRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageClearCorpsApplyRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageClearCorpsApplyRequest, msgcode_),
  };
  CMessageClearCorpsApplyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageClearCorpsApplyRequest_descriptor_,
      CMessageClearCorpsApplyRequest::default_instance_,
      CMessageClearCorpsApplyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageClearCorpsApplyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageClearCorpsApplyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageClearCorpsApplyRequest));
  CMessageClearCorpsApplyResponse_descriptor_ = file->message_type(42);
  static const int CMessageClearCorpsApplyResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageClearCorpsApplyResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageClearCorpsApplyResponse, errcode_),
  };
  CMessageClearCorpsApplyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageClearCorpsApplyResponse_descriptor_,
      CMessageClearCorpsApplyResponse::default_instance_,
      CMessageClearCorpsApplyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageClearCorpsApplyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageClearCorpsApplyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageClearCorpsApplyResponse));
  CMessageRefreshCorpsInfoRequest_descriptor_ = file->message_type(43);
  static const int CMessageRefreshCorpsInfoRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRefreshCorpsInfoRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRefreshCorpsInfoRequest, msgcode_),
  };
  CMessageRefreshCorpsInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRefreshCorpsInfoRequest_descriptor_,
      CMessageRefreshCorpsInfoRequest::default_instance_,
      CMessageRefreshCorpsInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRefreshCorpsInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRefreshCorpsInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRefreshCorpsInfoRequest));
  CMessageRefreshCorpsInfoResponse_descriptor_ = file->message_type(44);
  static const int CMessageRefreshCorpsInfoResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRefreshCorpsInfoResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRefreshCorpsInfoResponse, corpsmember_),
  };
  CMessageRefreshCorpsInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRefreshCorpsInfoResponse_descriptor_,
      CMessageRefreshCorpsInfoResponse::default_instance_,
      CMessageRefreshCorpsInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRefreshCorpsInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRefreshCorpsInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRefreshCorpsInfoResponse));
  CMessageGetCorpsListRequest_descriptor_ = file->message_type(45);
  static const int CMessageGetCorpsListRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsListRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsListRequest, curpage_),
  };
  CMessageGetCorpsListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetCorpsListRequest_descriptor_,
      CMessageGetCorpsListRequest::default_instance_,
      CMessageGetCorpsListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetCorpsListRequest));
  CMessageGetCorpsListResponse_descriptor_ = file->message_type(46);
  static const int CMessageGetCorpsListResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsListResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsListResponse, corpslist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsListResponse, curpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsListResponse, totalpage_),
  };
  CMessageGetCorpsListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetCorpsListResponse_descriptor_,
      CMessageGetCorpsListResponse::default_instance_,
      CMessageGetCorpsListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetCorpsListResponse));
  CMessageSetCorpsPostRequest_descriptor_ = file->message_type(47);
  static const int CMessageSetCorpsPostRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetCorpsPostRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetCorpsPostRequest, memberid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetCorpsPostRequest, post_),
  };
  CMessageSetCorpsPostRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageSetCorpsPostRequest_descriptor_,
      CMessageSetCorpsPostRequest::default_instance_,
      CMessageSetCorpsPostRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetCorpsPostRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetCorpsPostRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageSetCorpsPostRequest));
  CMessageSetCorpsPostResponse_descriptor_ = file->message_type(48);
  static const int CMessageSetCorpsPostResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetCorpsPostResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetCorpsPostResponse, memberid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetCorpsPostResponse, post_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetCorpsPostResponse, errcode_),
  };
  CMessageSetCorpsPostResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageSetCorpsPostResponse_descriptor_,
      CMessageSetCorpsPostResponse::default_instance_,
      CMessageSetCorpsPostResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetCorpsPostResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetCorpsPostResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageSetCorpsPostResponse));
  CMessageLevelUPCorpsRequest_descriptor_ = file->message_type(49);
  static const int CMessageLevelUPCorpsRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLevelUPCorpsRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLevelUPCorpsRequest, msgcode_),
  };
  CMessageLevelUPCorpsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLevelUPCorpsRequest_descriptor_,
      CMessageLevelUPCorpsRequest::default_instance_,
      CMessageLevelUPCorpsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLevelUPCorpsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLevelUPCorpsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLevelUPCorpsRequest));
  CMessageLevelUPCorpsResponse_descriptor_ = file->message_type(50);
  static const int CMessageLevelUPCorpsResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLevelUPCorpsResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLevelUPCorpsResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLevelUPCorpsResponse, level_),
  };
  CMessageLevelUPCorpsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLevelUPCorpsResponse_descriptor_,
      CMessageLevelUPCorpsResponse::default_instance_,
      CMessageLevelUPCorpsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLevelUPCorpsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLevelUPCorpsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLevelUPCorpsResponse));
  CMessageContributeCorpsMoneyRequest_descriptor_ = file->message_type(51);
  static const int CMessageContributeCorpsMoneyRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageContributeCorpsMoneyRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageContributeCorpsMoneyRequest, money_),
  };
  CMessageContributeCorpsMoneyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageContributeCorpsMoneyRequest_descriptor_,
      CMessageContributeCorpsMoneyRequest::default_instance_,
      CMessageContributeCorpsMoneyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageContributeCorpsMoneyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageContributeCorpsMoneyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageContributeCorpsMoneyRequest));
  CMessageContributeCorpsMoneyResponse_descriptor_ = file->message_type(52);
  static const int CMessageContributeCorpsMoneyResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageContributeCorpsMoneyResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageContributeCorpsMoneyResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageContributeCorpsMoneyResponse, money_),
  };
  CMessageContributeCorpsMoneyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageContributeCorpsMoneyResponse_descriptor_,
      CMessageContributeCorpsMoneyResponse::default_instance_,
      CMessageContributeCorpsMoneyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageContributeCorpsMoneyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageContributeCorpsMoneyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageContributeCorpsMoneyResponse));
  CMessageFamilyContributeMoneyRequest_descriptor_ = file->message_type(53);
  static const int CMessageFamilyContributeMoneyRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyContributeMoneyRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyContributeMoneyRequest, money_),
  };
  CMessageFamilyContributeMoneyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFamilyContributeMoneyRequest_descriptor_,
      CMessageFamilyContributeMoneyRequest::default_instance_,
      CMessageFamilyContributeMoneyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyContributeMoneyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyContributeMoneyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFamilyContributeMoneyRequest));
  CMessageFamilyContributeMoneyResponse_descriptor_ = file->message_type(54);
  static const int CMessageFamilyContributeMoneyResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyContributeMoneyResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyContributeMoneyResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyContributeMoneyResponse, money_),
  };
  CMessageFamilyContributeMoneyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFamilyContributeMoneyResponse_descriptor_,
      CMessageFamilyContributeMoneyResponse::default_instance_,
      CMessageFamilyContributeMoneyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyContributeMoneyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyContributeMoneyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFamilyContributeMoneyResponse));
  CMessageSetMemberNameRequest_descriptor_ = file->message_type(55);
  static const int CMessageSetMemberNameRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetMemberNameRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetMemberNameRequest, memberid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetMemberNameRequest, name_),
  };
  CMessageSetMemberNameRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageSetMemberNameRequest_descriptor_,
      CMessageSetMemberNameRequest::default_instance_,
      CMessageSetMemberNameRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetMemberNameRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetMemberNameRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageSetMemberNameRequest));
  CMessageSetMemberNameResponse_descriptor_ = file->message_type(56);
  static const int CMessageSetMemberNameResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetMemberNameResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetMemberNameResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetMemberNameResponse, memberid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetMemberNameResponse, name_),
  };
  CMessageSetMemberNameResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageSetMemberNameResponse_descriptor_,
      CMessageSetMemberNameResponse::default_instance_,
      CMessageSetMemberNameResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetMemberNameResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetMemberNameResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageSetMemberNameResponse));
  CMessageSetCorpsPostNotify_descriptor_ = file->message_type(57);
  static const int CMessageSetCorpsPostNotify_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetCorpsPostNotify, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetCorpsPostNotify, managerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetCorpsPostNotify, managername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetCorpsPostNotify, memberid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetCorpsPostNotify, membername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetCorpsPostNotify, originalpost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetCorpsPostNotify, newpost_),
  };
  CMessageSetCorpsPostNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageSetCorpsPostNotify_descriptor_,
      CMessageSetCorpsPostNotify::default_instance_,
      CMessageSetCorpsPostNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetCorpsPostNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetCorpsPostNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageSetCorpsPostNotify));
  CMessageCorpsLevelUPNotify_descriptor_ = file->message_type(58);
  static const int CMessageCorpsLevelUPNotify_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsLevelUPNotify, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsLevelUPNotify, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsLevelUPNotify, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsLevelUPNotify, glory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsLevelUPNotify, maxfamilynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsLevelUPNotify, maxgeneralnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsLevelUPNotify, maxcounsellornum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsLevelUPNotify, levelmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsLevelUPNotify, levelglory_),
  };
  CMessageCorpsLevelUPNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsLevelUPNotify_descriptor_,
      CMessageCorpsLevelUPNotify::default_instance_,
      CMessageCorpsLevelUPNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsLevelUPNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsLevelUPNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsLevelUPNotify));
  CMessageCorpsBattleBidRequest_descriptor_ = file->message_type(59);
  static const int CMessageCorpsBattleBidRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBattleBidRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBattleBidRequest, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBattleBidRequest, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBattleBidRequest, minincmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBattleBidRequest, mapid_),
  };
  CMessageCorpsBattleBidRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsBattleBidRequest_descriptor_,
      CMessageCorpsBattleBidRequest::default_instance_,
      CMessageCorpsBattleBidRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBattleBidRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBattleBidRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsBattleBidRequest));
  CMessageCorpsBattleBidResponse_descriptor_ = file->message_type(60);
  static const int CMessageCorpsBattleBidResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBattleBidResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBattleBidResponse, rtncode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBattleBidResponse, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBattleBidResponse, money_),
  };
  CMessageCorpsBattleBidResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsBattleBidResponse_descriptor_,
      CMessageCorpsBattleBidResponse::default_instance_,
      CMessageCorpsBattleBidResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBattleBidResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBattleBidResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsBattleBidResponse));
  CMessageCorpsQueryBidRankRequest_descriptor_ = file->message_type(61);
  static const int CMessageCorpsQueryBidRankRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsQueryBidRankRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsQueryBidRankRequest, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsQueryBidRankRequest, battlecity_),
  };
  CMessageCorpsQueryBidRankRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsQueryBidRankRequest_descriptor_,
      CMessageCorpsQueryBidRankRequest::default_instance_,
      CMessageCorpsQueryBidRankRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsQueryBidRankRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsQueryBidRankRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsQueryBidRankRequest));
  PBBidRank_descriptor_ = file->message_type(62);
  static const int PBBidRank_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBidRank, corpsname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBidRank, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBidRank, nationality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBidRank, victory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBidRank, loser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBidRank, starlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBidRank, corpsid_),
  };
  PBBidRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBBidRank_descriptor_,
      PBBidRank::default_instance_,
      PBBidRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBidRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBidRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBBidRank));
  CMessageCorpsQueryBidRankResponse_descriptor_ = file->message_type(63);
  static const int CMessageCorpsQueryBidRankResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsQueryBidRankResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsQueryBidRankResponse, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsQueryBidRankResponse, cityowner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsQueryBidRankResponse, rankinfo_),
  };
  CMessageCorpsQueryBidRankResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsQueryBidRankResponse_descriptor_,
      CMessageCorpsQueryBidRankResponse::default_instance_,
      CMessageCorpsQueryBidRankResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsQueryBidRankResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsQueryBidRankResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsQueryBidRankResponse));
  CMessageCorpsSelectFamilyBattleRequest_descriptor_ = file->message_type(64);
  static const int CMessageCorpsSelectFamilyBattleRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsSelectFamilyBattleRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsSelectFamilyBattleRequest, familyid_),
  };
  CMessageCorpsSelectFamilyBattleRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsSelectFamilyBattleRequest_descriptor_,
      CMessageCorpsSelectFamilyBattleRequest::default_instance_,
      CMessageCorpsSelectFamilyBattleRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsSelectFamilyBattleRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsSelectFamilyBattleRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsSelectFamilyBattleRequest));
  CMessageCorpsSelectFamilyBattleResponse_descriptor_ = file->message_type(65);
  static const int CMessageCorpsSelectFamilyBattleResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsSelectFamilyBattleResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsSelectFamilyBattleResponse, rtncode_),
  };
  CMessageCorpsSelectFamilyBattleResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsSelectFamilyBattleResponse_descriptor_,
      CMessageCorpsSelectFamilyBattleResponse::default_instance_,
      CMessageCorpsSelectFamilyBattleResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsSelectFamilyBattleResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsSelectFamilyBattleResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsSelectFamilyBattleResponse));
  CMessageCorpsPvPStarLevelUpNotify_descriptor_ = file->message_type(66);
  static const int CMessageCorpsPvPStarLevelUpNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsPvPStarLevelUpNotify, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsPvPStarLevelUpNotify, pvplevel_),
  };
  CMessageCorpsPvPStarLevelUpNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsPvPStarLevelUpNotify_descriptor_,
      CMessageCorpsPvPStarLevelUpNotify::default_instance_,
      CMessageCorpsPvPStarLevelUpNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsPvPStarLevelUpNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsPvPStarLevelUpNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsPvPStarLevelUpNotify));
  CMessageCorpsBattleRightsNotify_descriptor_ = file->message_type(67);
  static const int CMessageCorpsBattleRightsNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBattleRightsNotify, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBattleRightsNotify, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBattleRightsNotify, descorpsname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBattleRightsNotify, type_),
  };
  CMessageCorpsBattleRightsNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsBattleRightsNotify_descriptor_,
      CMessageCorpsBattleRightsNotify::default_instance_,
      CMessageCorpsBattleRightsNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBattleRightsNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBattleRightsNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsBattleRightsNotify));
  CMessageCorpsRecBattleRightsNotify_descriptor_ = file->message_type(68);
  static const int CMessageCorpsRecBattleRightsNotify_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsRecBattleRightsNotify, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsRecBattleRightsNotify, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsRecBattleRightsNotify, srccorpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsRecBattleRightsNotify, srccorpsname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsRecBattleRightsNotify, descorpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsRecBattleRightsNotify, descorpsname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsRecBattleRightsNotify, money_),
  };
  CMessageCorpsRecBattleRightsNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsRecBattleRightsNotify_descriptor_,
      CMessageCorpsRecBattleRightsNotify::default_instance_,
      CMessageCorpsRecBattleRightsNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsRecBattleRightsNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsRecBattleRightsNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsRecBattleRightsNotify));
  CMessageCorpsSelectMemberBattleRequest_descriptor_ = file->message_type(69);
  static const int CMessageCorpsSelectMemberBattleRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsSelectMemberBattleRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsSelectMemberBattleRequest, memberlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsSelectMemberBattleRequest, battlecity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsSelectMemberBattleRequest, type_),
  };
  CMessageCorpsSelectMemberBattleRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsSelectMemberBattleRequest_descriptor_,
      CMessageCorpsSelectMemberBattleRequest::default_instance_,
      CMessageCorpsSelectMemberBattleRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsSelectMemberBattleRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsSelectMemberBattleRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsSelectMemberBattleRequest));
  CMessageCorpsSelectMemberBattleResponse_descriptor_ = file->message_type(70);
  static const int CMessageCorpsSelectMemberBattleResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsSelectMemberBattleResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsSelectMemberBattleResponse, rtncode_),
  };
  CMessageCorpsSelectMemberBattleResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsSelectMemberBattleResponse_descriptor_,
      CMessageCorpsSelectMemberBattleResponse::default_instance_,
      CMessageCorpsSelectMemberBattleResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsSelectMemberBattleResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsSelectMemberBattleResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsSelectMemberBattleResponse));
  CMessageCorpsMemberBattleRightsNotify_descriptor_ = file->message_type(71);
  static const int CMessageCorpsMemberBattleRightsNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsMemberBattleRightsNotify, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsMemberBattleRightsNotify, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsMemberBattleRightsNotify, memberlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsMemberBattleRightsNotify, descorpsname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsMemberBattleRightsNotify, type_),
  };
  CMessageCorpsMemberBattleRightsNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsMemberBattleRightsNotify_descriptor_,
      CMessageCorpsMemberBattleRightsNotify::default_instance_,
      CMessageCorpsMemberBattleRightsNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsMemberBattleRightsNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsMemberBattleRightsNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsMemberBattleRightsNotify));
  CMessageCorpsMoneyChangedNotify_descriptor_ = file->message_type(72);
  static const int CMessageCorpsMoneyChangedNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsMoneyChangedNotify, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsMoneyChangedNotify, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsMoneyChangedNotify, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsMoneyChangedNotify, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsMoneyChangedNotify, valeu_),
  };
  CMessageCorpsMoneyChangedNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsMoneyChangedNotify_descriptor_,
      CMessageCorpsMoneyChangedNotify::default_instance_,
      CMessageCorpsMoneyChangedNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsMoneyChangedNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsMoneyChangedNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsMoneyChangedNotify));
  CMessageCorpsGloryChangedNotify_descriptor_ = file->message_type(73);
  static const int CMessageCorpsGloryChangedNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsGloryChangedNotify, glory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsGloryChangedNotify, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsGloryChangedNotify, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsGloryChangedNotify, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsGloryChangedNotify, value_),
  };
  CMessageCorpsGloryChangedNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsGloryChangedNotify_descriptor_,
      CMessageCorpsGloryChangedNotify::default_instance_,
      CMessageCorpsGloryChangedNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsGloryChangedNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsGloryChangedNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsGloryChangedNotify));
  CMessageCorpsContributeChangedNotify_descriptor_ = file->message_type(74);
  static const int CMessageCorpsContributeChangedNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsContributeChangedNotify, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsContributeChangedNotify, contribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsContributeChangedNotify, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsContributeChangedNotify, value_),
  };
  CMessageCorpsContributeChangedNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsContributeChangedNotify_descriptor_,
      CMessageCorpsContributeChangedNotify::default_instance_,
      CMessageCorpsContributeChangedNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsContributeChangedNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsContributeChangedNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsContributeChangedNotify));
  CMessageCorpsBossTimesChangedNotify_descriptor_ = file->message_type(75);
  static const int CMessageCorpsBossTimesChangedNotify_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBossTimesChangedNotify, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBossTimesChangedNotify, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBossTimesChangedNotify, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBossTimesChangedNotify, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBossTimesChangedNotify, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBossTimesChangedNotify, value_),
  };
  CMessageCorpsBossTimesChangedNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsBossTimesChangedNotify_descriptor_,
      CMessageCorpsBossTimesChangedNotify::default_instance_,
      CMessageCorpsBossTimesChangedNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBossTimesChangedNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBossTimesChangedNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsBossTimesChangedNotify));
  CMessageCorpsBossRefineValueNotify_descriptor_ = file->message_type(76);
  static const int CMessageCorpsBossRefineValueNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBossRefineValueNotify, refinevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBossRefineValueNotify, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBossRefineValueNotify, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBossRefineValueNotify, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBossRefineValueNotify, rolename_),
  };
  CMessageCorpsBossRefineValueNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsBossRefineValueNotify_descriptor_,
      CMessageCorpsBossRefineValueNotify::default_instance_,
      CMessageCorpsBossRefineValueNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBossRefineValueNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBossRefineValueNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsBossRefineValueNotify));
  CMessageCorpsCollectActiveChangeNotify_descriptor_ = file->message_type(77);
  static const int CMessageCorpsCollectActiveChangeNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsCollectActiveChangeNotify, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsCollectActiveChangeNotify, activevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsCollectActiveChangeNotify, vaule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsCollectActiveChangeNotify, changetype_),
  };
  CMessageCorpsCollectActiveChangeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsCollectActiveChangeNotify_descriptor_,
      CMessageCorpsCollectActiveChangeNotify::default_instance_,
      CMessageCorpsCollectActiveChangeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsCollectActiveChangeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsCollectActiveChangeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsCollectActiveChangeNotify));
  CMessageMendShengHuoTaiRequest_descriptor_ = file->message_type(78);
  static const int CMessageMendShengHuoTaiRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMendShengHuoTaiRequest, npcentityid_),
  };
  CMessageMendShengHuoTaiRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageMendShengHuoTaiRequest_descriptor_,
      CMessageMendShengHuoTaiRequest::default_instance_,
      CMessageMendShengHuoTaiRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMendShengHuoTaiRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMendShengHuoTaiRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageMendShengHuoTaiRequest));
  CMessageCorpsPropertyNotice_descriptor_ = file->message_type(79);
  static const int CMessageCorpsPropertyNotice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsPropertyNotice, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsPropertyNotice, property_),
  };
  CMessageCorpsPropertyNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsPropertyNotice_descriptor_,
      CMessageCorpsPropertyNotice::default_instance_,
      CMessageCorpsPropertyNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsPropertyNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsPropertyNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsPropertyNotice));
  CMessageCorpsOperateRoomRequest_descriptor_ = file->message_type(80);
  static const int CMessageCorpsOperateRoomRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsOperateRoomRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsOperateRoomRequest, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsOperateRoomRequest, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsOperateRoomRequest, name_),
  };
  CMessageCorpsOperateRoomRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsOperateRoomRequest_descriptor_,
      CMessageCorpsOperateRoomRequest::default_instance_,
      CMessageCorpsOperateRoomRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsOperateRoomRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsOperateRoomRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsOperateRoomRequest));
  CMessageCorpsOperateRoomResponse_descriptor_ = file->message_type(81);
  static const int CMessageCorpsOperateRoomResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsOperateRoomResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsOperateRoomResponse, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsOperateRoomResponse, rtncode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsOperateRoomResponse, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsOperateRoomResponse, name_),
  };
  CMessageCorpsOperateRoomResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsOperateRoomResponse_descriptor_,
      CMessageCorpsOperateRoomResponse::default_instance_,
      CMessageCorpsOperateRoomResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsOperateRoomResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsOperateRoomResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsOperateRoomResponse));
  CMessageCorpsRoomNotice_descriptor_ = file->message_type(82);
  static const int CMessageCorpsRoomNotice_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsRoomNotice, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsRoomNotice, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsRoomNotice, rootername_),
  };
  CMessageCorpsRoomNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsRoomNotice_descriptor_,
      CMessageCorpsRoomNotice::default_instance_,
      CMessageCorpsRoomNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsRoomNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsRoomNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsRoomNotice));
  CMessageCorpsChallegeRequest_descriptor_ = file->message_type(83);
  static const int CMessageCorpsChallegeRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsChallegeRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsChallegeRequest, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsChallegeRequest, descropsid_),
  };
  CMessageCorpsChallegeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsChallegeRequest_descriptor_,
      CMessageCorpsChallegeRequest::default_instance_,
      CMessageCorpsChallegeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsChallegeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsChallegeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsChallegeRequest));
  CMessageCorpsChallegeResponse_descriptor_ = file->message_type(84);
  static const int CMessageCorpsChallegeResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsChallegeResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsChallegeResponse, rtncode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsChallegeResponse, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsChallegeResponse, descropsid_),
  };
  CMessageCorpsChallegeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsChallegeResponse_descriptor_,
      CMessageCorpsChallegeResponse::default_instance_,
      CMessageCorpsChallegeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsChallegeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsChallegeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsChallegeResponse));
  CMessageCorpsChallegeNotice_descriptor_ = file->message_type(85);
  static const int CMessageCorpsChallegeNotice_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsChallegeNotice, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsChallegeNotice, srccorpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsChallegeNotice, srccorpsname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsChallegeNotice, descropsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsChallegeNotice, descorpsname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsChallegeNotice, wintimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsChallegeNotice, losttimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsChallegeNotice, srcrootername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsChallegeNotice, desrootername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsChallegeNotice, action_),
  };
  CMessageCorpsChallegeNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsChallegeNotice_descriptor_,
      CMessageCorpsChallegeNotice::default_instance_,
      CMessageCorpsChallegeNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsChallegeNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsChallegeNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsChallegeNotice));
  CMessageCorpsReplyChallegeRequest_descriptor_ = file->message_type(86);
  static const int CMessageCorpsReplyChallegeRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsReplyChallegeRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsReplyChallegeRequest, descorpsid_),
  };
  CMessageCorpsReplyChallegeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsReplyChallegeRequest_descriptor_,
      CMessageCorpsReplyChallegeRequest::default_instance_,
      CMessageCorpsReplyChallegeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsReplyChallegeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsReplyChallegeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsReplyChallegeRequest));
  CMessageCorpsReplyChallegeResponse_descriptor_ = file->message_type(87);
  static const int CMessageCorpsReplyChallegeResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsReplyChallegeResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsReplyChallegeResponse, descorpsname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsReplyChallegeResponse, rtncode_),
  };
  CMessageCorpsReplyChallegeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsReplyChallegeResponse_descriptor_,
      CMessageCorpsReplyChallegeResponse::default_instance_,
      CMessageCorpsReplyChallegeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsReplyChallegeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsReplyChallegeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsReplyChallegeResponse));
  CMessageCorpsQueryChallegeListRequest_descriptor_ = file->message_type(88);
  static const int CMessageCorpsQueryChallegeListRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsQueryChallegeListRequest, corphead_),
  };
  CMessageCorpsQueryChallegeListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsQueryChallegeListRequest_descriptor_,
      CMessageCorpsQueryChallegeListRequest::default_instance_,
      CMessageCorpsQueryChallegeListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsQueryChallegeListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsQueryChallegeListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsQueryChallegeListRequest));
  CMessageCorpsQueryChallegeListResponse_descriptor_ = file->message_type(89);
  static const int CMessageCorpsQueryChallegeListResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsQueryChallegeListResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsQueryChallegeListResponse, corpsidlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsQueryChallegeListResponse, rtncode_),
  };
  CMessageCorpsQueryChallegeListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsQueryChallegeListResponse_descriptor_,
      CMessageCorpsQueryChallegeListResponse::default_instance_,
      CMessageCorpsQueryChallegeListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsQueryChallegeListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsQueryChallegeListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsQueryChallegeListResponse));
  PBChallege_descriptor_ = file->message_type(90);
  static const int PBChallege_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBChallege, corpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBChallege, corpsname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBChallege, wintimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBChallege, losttimes_),
  };
  PBChallege_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBChallege_descriptor_,
      PBChallege::default_instance_,
      PBChallege_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBChallege, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBChallege, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBChallege));
  CMessageCorpsQueryRecChallegeListRequest_descriptor_ = file->message_type(91);
  static const int CMessageCorpsQueryRecChallegeListRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsQueryRecChallegeListRequest, corphead_),
  };
  CMessageCorpsQueryRecChallegeListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsQueryRecChallegeListRequest_descriptor_,
      CMessageCorpsQueryRecChallegeListRequest::default_instance_,
      CMessageCorpsQueryRecChallegeListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsQueryRecChallegeListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsQueryRecChallegeListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsQueryRecChallegeListRequest));
  CMessageCorpsQueryRecChallegeListResponse_descriptor_ = file->message_type(92);
  static const int CMessageCorpsQueryRecChallegeListResponse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsQueryRecChallegeListResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsQueryRecChallegeListResponse, roomname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsQueryRecChallegeListResponse, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsQueryRecChallegeListResponse, wintimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsQueryRecChallegeListResponse, losttimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsQueryRecChallegeListResponse, challegelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsQueryRecChallegeListResponse, rtncode_),
  };
  CMessageCorpsQueryRecChallegeListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsQueryRecChallegeListResponse_descriptor_,
      CMessageCorpsQueryRecChallegeListResponse::default_instance_,
      CMessageCorpsQueryRecChallegeListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsQueryRecChallegeListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsQueryRecChallegeListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsQueryRecChallegeListResponse));
  CMessageCorpsQueryRoomListRequest_descriptor_ = file->message_type(93);
  static const int CMessageCorpsQueryRoomListRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsQueryRoomListRequest, corphead_),
  };
  CMessageCorpsQueryRoomListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsQueryRoomListRequest_descriptor_,
      CMessageCorpsQueryRoomListRequest::default_instance_,
      CMessageCorpsQueryRoomListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsQueryRoomListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsQueryRoomListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsQueryRoomListRequest));
  PBCorpsRoom_descriptor_ = file->message_type(94);
  static const int PBCorpsRoom_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsRoom, corpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsRoom, corpsname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsRoom, roomname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsRoom, roomstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsRoom, descorpsname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsRoom, wintimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsRoom, losttimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsRoom, money_),
  };
  PBCorpsRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCorpsRoom_descriptor_,
      PBCorpsRoom::default_instance_,
      PBCorpsRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCorpsRoom));
  CMessageCorpsQueryRoomListResponse_descriptor_ = file->message_type(95);
  static const int CMessageCorpsQueryRoomListResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsQueryRoomListResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsQueryRoomListResponse, roomlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsQueryRoomListResponse, rtncode_),
  };
  CMessageCorpsQueryRoomListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsQueryRoomListResponse_descriptor_,
      CMessageCorpsQueryRoomListResponse::default_instance_,
      CMessageCorpsQueryRoomListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsQueryRoomListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsQueryRoomListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsQueryRoomListResponse));
  CMessageQueryCorpsWelfareRequest_descriptor_ = file->message_type(96);
  static const int CMessageQueryCorpsWelfareRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryCorpsWelfareRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryCorpsWelfareRequest, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryCorpsWelfareRequest, npcid_),
  };
  CMessageQueryCorpsWelfareRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageQueryCorpsWelfareRequest_descriptor_,
      CMessageQueryCorpsWelfareRequest::default_instance_,
      CMessageQueryCorpsWelfareRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryCorpsWelfareRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryCorpsWelfareRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageQueryCorpsWelfareRequest));
  CMessageQueryCorpsWelfareResponse_descriptor_ = file->message_type(97);
  static const int CMessageQueryCorpsWelfareResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryCorpsWelfareResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryCorpsWelfareResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryCorpsWelfareResponse, npcglory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryCorpsWelfareResponse, npcmoney_),
  };
  CMessageQueryCorpsWelfareResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageQueryCorpsWelfareResponse_descriptor_,
      CMessageQueryCorpsWelfareResponse::default_instance_,
      CMessageQueryCorpsWelfareResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryCorpsWelfareResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryCorpsWelfareResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageQueryCorpsWelfareResponse));
  CMessageObtainCorpsWelfareRequest_descriptor_ = file->message_type(98);
  static const int CMessageObtainCorpsWelfareRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainCorpsWelfareRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainCorpsWelfareRequest, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainCorpsWelfareRequest, npcid_),
  };
  CMessageObtainCorpsWelfareRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageObtainCorpsWelfareRequest_descriptor_,
      CMessageObtainCorpsWelfareRequest::default_instance_,
      CMessageObtainCorpsWelfareRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainCorpsWelfareRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainCorpsWelfareRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageObtainCorpsWelfareRequest));
  CMessageObtainCorpsWelfareResponse_descriptor_ = file->message_type(99);
  static const int CMessageObtainCorpsWelfareResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainCorpsWelfareResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainCorpsWelfareResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainCorpsWelfareResponse, npcglory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainCorpsWelfareResponse, npcmoney_),
  };
  CMessageObtainCorpsWelfareResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageObtainCorpsWelfareResponse_descriptor_,
      CMessageObtainCorpsWelfareResponse::default_instance_,
      CMessageObtainCorpsWelfareResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainCorpsWelfareResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainCorpsWelfareResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageObtainCorpsWelfareResponse));
  CMessageGetCorpsMoneyRequest_descriptor_ = file->message_type(100);
  static const int CMessageGetCorpsMoneyRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsMoneyRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsMoneyRequest, corpsmoney_),
  };
  CMessageGetCorpsMoneyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetCorpsMoneyRequest_descriptor_,
      CMessageGetCorpsMoneyRequest::default_instance_,
      CMessageGetCorpsMoneyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsMoneyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsMoneyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetCorpsMoneyRequest));
  CMessageGetCorpsMoneyResponse_descriptor_ = file->message_type(101);
  static const int CMessageGetCorpsMoneyResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsMoneyResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsMoneyResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsMoneyResponse, corpsmoney_),
  };
  CMessageGetCorpsMoneyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetCorpsMoneyResponse_descriptor_,
      CMessageGetCorpsMoneyResponse::default_instance_,
      CMessageGetCorpsMoneyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsMoneyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsMoneyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetCorpsMoneyResponse));
  CMessageCorpsAbortBattleCityRequest_descriptor_ = file->message_type(102);
  static const int CMessageCorpsAbortBattleCityRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsAbortBattleCityRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsAbortBattleCityRequest, npcentityid_),
  };
  CMessageCorpsAbortBattleCityRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsAbortBattleCityRequest_descriptor_,
      CMessageCorpsAbortBattleCityRequest::default_instance_,
      CMessageCorpsAbortBattleCityRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsAbortBattleCityRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsAbortBattleCityRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsAbortBattleCityRequest));
  CMessageCorpsAbortBattleCityResponse_descriptor_ = file->message_type(103);
  static const int CMessageCorpsAbortBattleCityResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsAbortBattleCityResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsAbortBattleCityResponse, rtncode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsAbortBattleCityResponse, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsAbortBattleCityResponse, rootername_),
  };
  CMessageCorpsAbortBattleCityResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsAbortBattleCityResponse_descriptor_,
      CMessageCorpsAbortBattleCityResponse::default_instance_,
      CMessageCorpsAbortBattleCityResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsAbortBattleCityResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsAbortBattleCityResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsAbortBattleCityResponse));
  CMessageCorpsAbortBattleCityNotice_descriptor_ = file->message_type(104);
  static const int CMessageCorpsAbortBattleCityNotice_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsAbortBattleCityNotice, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsAbortBattleCityNotice, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsAbortBattleCityNotice, rootername_),
  };
  CMessageCorpsAbortBattleCityNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsAbortBattleCityNotice_descriptor_,
      CMessageCorpsAbortBattleCityNotice::default_instance_,
      CMessageCorpsAbortBattleCityNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsAbortBattleCityNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsAbortBattleCityNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsAbortBattleCityNotice));
  CMessageCorpsCanLevelUPNotify_descriptor_ = file->message_type(105);
  static const int CMessageCorpsCanLevelUPNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsCanLevelUPNotify, corphead_),
  };
  CMessageCorpsCanLevelUPNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsCanLevelUPNotify_descriptor_,
      CMessageCorpsCanLevelUPNotify::default_instance_,
      CMessageCorpsCanLevelUPNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsCanLevelUPNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsCanLevelUPNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsCanLevelUPNotify));
  CMessageCorpsPublishTaskNotify_descriptor_ = file->message_type(106);
  static const int CMessageCorpsPublishTaskNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsPublishTaskNotify, notifyhead_),
  };
  CMessageCorpsPublishTaskNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsPublishTaskNotify_descriptor_,
      CMessageCorpsPublishTaskNotify::default_instance_,
      CMessageCorpsPublishTaskNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsPublishTaskNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsPublishTaskNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsPublishTaskNotify));
  CMessageCorpsBattleResultNotice_descriptor_ = file->message_type(107);
  static const int CMessageCorpsBattleResultNotice_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBattleResultNotice, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBattleResultNotice, wincorpsname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBattleResultNotice, lostcorpsname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBattleResultNotice, wincampid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBattleResultNotice, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBattleResultNotice, battletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBattleResultNotice, wincorpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBattleResultNotice, lostcorpsid_),
  };
  CMessageCorpsBattleResultNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsBattleResultNotice_descriptor_,
      CMessageCorpsBattleResultNotice::default_instance_,
      CMessageCorpsBattleResultNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBattleResultNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBattleResultNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsBattleResultNotice));
  CMessageCorpsNpcOwnerNotice_descriptor_ = file->message_type(108);
  static const int CMessageCorpsNpcOwnerNotice_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsNpcOwnerNotice, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsNpcOwnerNotice, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsNpcOwnerNotice, corpsname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsNpcOwnerNotice, corpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsNpcOwnerNotice, familyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsNpcOwnerNotice, familyid_),
  };
  CMessageCorpsNpcOwnerNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsNpcOwnerNotice_descriptor_,
      CMessageCorpsNpcOwnerNotice::default_instance_,
      CMessageCorpsNpcOwnerNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsNpcOwnerNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsNpcOwnerNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsNpcOwnerNotice));
  CMessageCorpsNameChangedNotify_descriptor_ = file->message_type(109);
  static const int CMessageCorpsNameChangedNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsNameChangedNotify, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsNameChangedNotify, managerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsNameChangedNotify, managername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsNameChangedNotify, memberid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsNameChangedNotify, corpsname_),
  };
  CMessageCorpsNameChangedNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsNameChangedNotify_descriptor_,
      CMessageCorpsNameChangedNotify::default_instance_,
      CMessageCorpsNameChangedNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsNameChangedNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsNameChangedNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsNameChangedNotify));
  CMessageCreateUnionRequest_descriptor_ = file->message_type(110);
  static const int CMessageCreateUnionRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateUnionRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateUnionRequest, otherid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateUnionRequest, unionname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateUnionRequest, unionnotice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateUnionRequest, npcentityid_),
  };
  CMessageCreateUnionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCreateUnionRequest_descriptor_,
      CMessageCreateUnionRequest::default_instance_,
      CMessageCreateUnionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateUnionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateUnionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCreateUnionRequest));
  CMessageCreateUnionResponse_descriptor_ = file->message_type(111);
  static const int CMessageCreateUnionResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateUnionResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateUnionResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateUnionResponse, otherid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateUnionResponse, unionid_),
  };
  CMessageCreateUnionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCreateUnionResponse_descriptor_,
      CMessageCreateUnionResponse::default_instance_,
      CMessageCreateUnionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateUnionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateUnionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCreateUnionResponse));
  CMessageCreateUnionNotify_descriptor_ = file->message_type(112);
  static const int CMessageCreateUnionNotify_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateUnionNotify, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateUnionNotify, headid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateUnionNotify, headname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateUnionNotify, otherid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateUnionNotify, othername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateUnionNotify, unionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateUnionNotify, unionname_),
  };
  CMessageCreateUnionNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCreateUnionNotify_descriptor_,
      CMessageCreateUnionNotify::default_instance_,
      CMessageCreateUnionNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateUnionNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateUnionNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCreateUnionNotify));
  CMessageApplyUnionRequest_descriptor_ = file->message_type(113);
  static const int CMessageApplyUnionRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyUnionRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyUnionRequest, unionname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyUnionRequest, unionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyUnionRequest, roleid_),
  };
  CMessageApplyUnionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageApplyUnionRequest_descriptor_,
      CMessageApplyUnionRequest::default_instance_,
      CMessageApplyUnionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyUnionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyUnionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageApplyUnionRequest));
  CMessageApplyUnionResponse_descriptor_ = file->message_type(114);
  static const int CMessageApplyUnionResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyUnionResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyUnionResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyUnionResponse, unionname_),
  };
  CMessageApplyUnionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageApplyUnionResponse_descriptor_,
      CMessageApplyUnionResponse::default_instance_,
      CMessageApplyUnionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyUnionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyUnionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageApplyUnionResponse));
  CMessageUnionMemberApplyNotify_descriptor_ = file->message_type(115);
  static const int CMessageUnionMemberApplyNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnionMemberApplyNotify, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnionMemberApplyNotify, corpsinfo_),
  };
  CMessageUnionMemberApplyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUnionMemberApplyNotify_descriptor_,
      CMessageUnionMemberApplyNotify::default_instance_,
      CMessageUnionMemberApplyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnionMemberApplyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnionMemberApplyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUnionMemberApplyNotify));
  CMessageReplyUnionMemberApplyRequest_descriptor_ = file->message_type(116);
  static const int CMessageReplyUnionMemberApplyRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyUnionMemberApplyRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyUnionMemberApplyRequest, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyUnionMemberApplyRequest, corpsid_),
  };
  CMessageReplyUnionMemberApplyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageReplyUnionMemberApplyRequest_descriptor_,
      CMessageReplyUnionMemberApplyRequest::default_instance_,
      CMessageReplyUnionMemberApplyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyUnionMemberApplyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyUnionMemberApplyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageReplyUnionMemberApplyRequest));
  CMessageReplyUnionMemberApplyResponse_descriptor_ = file->message_type(117);
  static const int CMessageReplyUnionMemberApplyResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyUnionMemberApplyResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyUnionMemberApplyResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyUnionMemberApplyResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyUnionMemberApplyResponse, corpsid_),
  };
  CMessageReplyUnionMemberApplyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageReplyUnionMemberApplyResponse_descriptor_,
      CMessageReplyUnionMemberApplyResponse::default_instance_,
      CMessageReplyUnionMemberApplyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyUnionMemberApplyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyUnionMemberApplyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageReplyUnionMemberApplyResponse));
  CMessageApplyUnionResultNotify_descriptor_ = file->message_type(118);
  static const int CMessageApplyUnionResultNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyUnionResultNotify, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyUnionResultNotify, resultcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyUnionResultNotify, unionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyUnionResultNotify, unionname_),
  };
  CMessageApplyUnionResultNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageApplyUnionResultNotify_descriptor_,
      CMessageApplyUnionResultNotify::default_instance_,
      CMessageApplyUnionResultNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyUnionResultNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyUnionResultNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageApplyUnionResultNotify));
  CMessageInviteUnionMemberRequest_descriptor_ = file->message_type(119);
  static const int CMessageInviteUnionMemberRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteUnionMemberRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteUnionMemberRequest, corpsname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteUnionMemberRequest, memberid_),
  };
  CMessageInviteUnionMemberRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageInviteUnionMemberRequest_descriptor_,
      CMessageInviteUnionMemberRequest::default_instance_,
      CMessageInviteUnionMemberRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteUnionMemberRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteUnionMemberRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageInviteUnionMemberRequest));
  CMessageInviteUnionMemberResponse_descriptor_ = file->message_type(120);
  static const int CMessageInviteUnionMemberResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteUnionMemberResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteUnionMemberResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteUnionMemberResponse, corpsname_),
  };
  CMessageInviteUnionMemberResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageInviteUnionMemberResponse_descriptor_,
      CMessageInviteUnionMemberResponse::default_instance_,
      CMessageInviteUnionMemberResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteUnionMemberResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteUnionMemberResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageInviteUnionMemberResponse));
  CMessageUnionInviteNotify_descriptor_ = file->message_type(121);
  static const int CMessageUnionInviteNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnionInviteNotify, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnionInviteNotify, invitingname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnionInviteNotify, invitingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnionInviteNotify, unioninfo_),
  };
  CMessageUnionInviteNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUnionInviteNotify_descriptor_,
      CMessageUnionInviteNotify::default_instance_,
      CMessageUnionInviteNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnionInviteNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnionInviteNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUnionInviteNotify));
  CMessageReplyUnionInviteRequest_descriptor_ = file->message_type(122);
  static const int CMessageReplyUnionInviteRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyUnionInviteRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyUnionInviteRequest, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyUnionInviteRequest, unionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyUnionInviteRequest, invitingid_),
  };
  CMessageReplyUnionInviteRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageReplyUnionInviteRequest_descriptor_,
      CMessageReplyUnionInviteRequest::default_instance_,
      CMessageReplyUnionInviteRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyUnionInviteRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyUnionInviteRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageReplyUnionInviteRequest));
  CMessageReplyUnionInviteResponse_descriptor_ = file->message_type(123);
  static const int CMessageReplyUnionInviteResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyUnionInviteResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyUnionInviteResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyUnionInviteResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyUnionInviteResponse, unionname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyUnionInviteResponse, unionid_),
  };
  CMessageReplyUnionInviteResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageReplyUnionInviteResponse_descriptor_,
      CMessageReplyUnionInviteResponse::default_instance_,
      CMessageReplyUnionInviteResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyUnionInviteResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyUnionInviteResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageReplyUnionInviteResponse));
  CMessageUnionInviteResultNotify_descriptor_ = file->message_type(124);
  static const int CMessageUnionInviteResultNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnionInviteResultNotify, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnionInviteResultNotify, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnionInviteResultNotify, corpsname_),
  };
  CMessageUnionInviteResultNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUnionInviteResultNotify_descriptor_,
      CMessageUnionInviteResultNotify::default_instance_,
      CMessageUnionInviteResultNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnionInviteResultNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnionInviteResultNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUnionInviteResultNotify));
  CMessageCorpsJoinUnionNotify_descriptor_ = file->message_type(125);
  static const int CMessageCorpsJoinUnionNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsJoinUnionNotify, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsJoinUnionNotify, corpsinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsJoinUnionNotify, unionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsJoinUnionNotify, unionname_),
  };
  CMessageCorpsJoinUnionNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsJoinUnionNotify_descriptor_,
      CMessageCorpsJoinUnionNotify::default_instance_,
      CMessageCorpsJoinUnionNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsJoinUnionNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsJoinUnionNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsJoinUnionNotify));
  CMessageCorpsLeaveUnionRequest_descriptor_ = file->message_type(126);
  static const int CMessageCorpsLeaveUnionRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsLeaveUnionRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsLeaveUnionRequest, msgcode_),
  };
  CMessageCorpsLeaveUnionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsLeaveUnionRequest_descriptor_,
      CMessageCorpsLeaveUnionRequest::default_instance_,
      CMessageCorpsLeaveUnionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsLeaveUnionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsLeaveUnionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsLeaveUnionRequest));
  CMessageCorpsLeaveUnionResponse_descriptor_ = file->message_type(127);
  static const int CMessageCorpsLeaveUnionResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsLeaveUnionResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsLeaveUnionResponse, errcode_),
  };
  CMessageCorpsLeaveUnionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsLeaveUnionResponse_descriptor_,
      CMessageCorpsLeaveUnionResponse::default_instance_,
      CMessageCorpsLeaveUnionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsLeaveUnionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsLeaveUnionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsLeaveUnionResponse));
  CMessageCorpsLeaveUnionNotify_descriptor_ = file->message_type(128);
  static const int CMessageCorpsLeaveUnionNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsLeaveUnionNotify, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsLeaveUnionNotify, corpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsLeaveUnionNotify, corpsname_),
  };
  CMessageCorpsLeaveUnionNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsLeaveUnionNotify_descriptor_,
      CMessageCorpsLeaveUnionNotify::default_instance_,
      CMessageCorpsLeaveUnionNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsLeaveUnionNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsLeaveUnionNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsLeaveUnionNotify));
  CMessageKickCorpsRequest_descriptor_ = file->message_type(129);
  static const int CMessageKickCorpsRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickCorpsRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickCorpsRequest, corpsid_),
  };
  CMessageKickCorpsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageKickCorpsRequest_descriptor_,
      CMessageKickCorpsRequest::default_instance_,
      CMessageKickCorpsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickCorpsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickCorpsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageKickCorpsRequest));
  CMessageKickCorpsResponse_descriptor_ = file->message_type(130);
  static const int CMessageKickCorpsResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickCorpsResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickCorpsResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickCorpsResponse, corpsname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickCorpsResponse, corpsid_),
  };
  CMessageKickCorpsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageKickCorpsResponse_descriptor_,
      CMessageKickCorpsResponse::default_instance_,
      CMessageKickCorpsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickCorpsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickCorpsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageKickCorpsResponse));
  CMessageKickCorpsNotify_descriptor_ = file->message_type(131);
  static const int CMessageKickCorpsNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickCorpsNotify, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickCorpsNotify, corpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickCorpsNotify, corpsname_),
  };
  CMessageKickCorpsNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageKickCorpsNotify_descriptor_,
      CMessageKickCorpsNotify::default_instance_,
      CMessageKickCorpsNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickCorpsNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickCorpsNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageKickCorpsNotify));
  CMessageMakeUnionRequest_descriptor_ = file->message_type(132);
  static const int CMessageMakeUnionRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeUnionRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeUnionRequest, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeUnionRequest, unionname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeUnionRequest, unionnotice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeUnionRequest, corpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeUnionRequest, targetid_),
  };
  CMessageMakeUnionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageMakeUnionRequest_descriptor_,
      CMessageMakeUnionRequest::default_instance_,
      CMessageMakeUnionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeUnionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeUnionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageMakeUnionRequest));
  CMessageMakeUnionResponse_descriptor_ = file->message_type(133);
  static const int CMessageMakeUnionResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeUnionResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeUnionResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeUnionResponse, optype_),
  };
  CMessageMakeUnionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageMakeUnionResponse_descriptor_,
      CMessageMakeUnionResponse::default_instance_,
      CMessageMakeUnionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeUnionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeUnionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageMakeUnionResponse));
  CMessageMakeUnionNotify_descriptor_ = file->message_type(134);
  static const int CMessageMakeUnionNotify_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeUnionNotify, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeUnionNotify, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeUnionNotify, unionname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeUnionNotify, unionnotice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeUnionNotify, corpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeUnionNotify, corpsname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeUnionNotify, headcorpsname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeUnionNotify, headcharid_),
  };
  CMessageMakeUnionNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageMakeUnionNotify_descriptor_,
      CMessageMakeUnionNotify::default_instance_,
      CMessageMakeUnionNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeUnionNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMakeUnionNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageMakeUnionNotify));
  CMessageGetUnionInfoRequest_descriptor_ = file->message_type(135);
  static const int CMessageGetUnionInfoRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetUnionInfoRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetUnionInfoRequest, unionid_),
  };
  CMessageGetUnionInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetUnionInfoRequest_descriptor_,
      CMessageGetUnionInfoRequest::default_instance_,
      CMessageGetUnionInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetUnionInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetUnionInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetUnionInfoRequest));
  CMessageGetUnionInfoResponse_descriptor_ = file->message_type(136);
  static const int CMessageGetUnionInfoResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetUnionInfoResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetUnionInfoResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetUnionInfoResponse, unioninfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetUnionInfoResponse, corpsinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetUnionInfoResponse, battleinfo_),
  };
  CMessageGetUnionInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetUnionInfoResponse_descriptor_,
      CMessageGetUnionInfoResponse::default_instance_,
      CMessageGetUnionInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetUnionInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetUnionInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetUnionInfoResponse));
  CMessageDismissUnionRequest_descriptor_ = file->message_type(137);
  static const int CMessageDismissUnionRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDismissUnionRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDismissUnionRequest, npcentityid_),
  };
  CMessageDismissUnionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageDismissUnionRequest_descriptor_,
      CMessageDismissUnionRequest::default_instance_,
      CMessageDismissUnionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDismissUnionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDismissUnionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageDismissUnionRequest));
  CMessageDismissUnionResponse_descriptor_ = file->message_type(138);
  static const int CMessageDismissUnionResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDismissUnionResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDismissUnionResponse, errcode_),
  };
  CMessageDismissUnionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageDismissUnionResponse_descriptor_,
      CMessageDismissUnionResponse::default_instance_,
      CMessageDismissUnionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDismissUnionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDismissUnionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageDismissUnionResponse));
  CMessageDismissUnionNotify_descriptor_ = file->message_type(139);
  static const int CMessageDismissUnionNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDismissUnionNotify, corphead_),
  };
  CMessageDismissUnionNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageDismissUnionNotify_descriptor_,
      CMessageDismissUnionNotify::default_instance_,
      CMessageDismissUnionNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDismissUnionNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDismissUnionNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageDismissUnionNotify));
  CMessageUnionApplyListRequest_descriptor_ = file->message_type(140);
  static const int CMessageUnionApplyListRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnionApplyListRequest, corphead_),
  };
  CMessageUnionApplyListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUnionApplyListRequest_descriptor_,
      CMessageUnionApplyListRequest::default_instance_,
      CMessageUnionApplyListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnionApplyListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnionApplyListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUnionApplyListRequest));
  CMessageUnionApplyListResponse_descriptor_ = file->message_type(141);
  static const int CMessageUnionApplyListResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnionApplyListResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnionApplyListResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnionApplyListResponse, corpsinfo_),
  };
  CMessageUnionApplyListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUnionApplyListResponse_descriptor_,
      CMessageUnionApplyListResponse::default_instance_,
      CMessageUnionApplyListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnionApplyListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnionApplyListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUnionApplyListResponse));
  CMessageAllUnionListRequest_descriptor_ = file->message_type(142);
  static const int CMessageAllUnionListRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAllUnionListRequest, corphead_),
  };
  CMessageAllUnionListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageAllUnionListRequest_descriptor_,
      CMessageAllUnionListRequest::default_instance_,
      CMessageAllUnionListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAllUnionListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAllUnionListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageAllUnionListRequest));
  CMessageAllUnionListResponse_descriptor_ = file->message_type(143);
  static const int CMessageAllUnionListResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAllUnionListResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAllUnionListResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAllUnionListResponse, unioninfo_),
  };
  CMessageAllUnionListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageAllUnionListResponse_descriptor_,
      CMessageAllUnionListResponse::default_instance_,
      CMessageAllUnionListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAllUnionListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAllUnionListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageAllUnionListResponse));
  CMessageCorpsGetOtherMemberRequest_descriptor_ = file->message_type(144);
  static const int CMessageCorpsGetOtherMemberRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsGetOtherMemberRequest, corphead_),
  };
  CMessageCorpsGetOtherMemberRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsGetOtherMemberRequest_descriptor_,
      CMessageCorpsGetOtherMemberRequest::default_instance_,
      CMessageCorpsGetOtherMemberRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsGetOtherMemberRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsGetOtherMemberRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsGetOtherMemberRequest));
  PBBattleMember_descriptor_ = file->message_type(145);
  static const int PBBattleMember_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleMember, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleMember, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleMember, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleMember, metier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleMember, corpsname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleMember, isjoinunion_),
  };
  PBBattleMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBBattleMember_descriptor_,
      PBBattleMember::default_instance_,
      PBBattleMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBBattleMember));
  CMessageCorpsGetOtherMemberResponse_descriptor_ = file->message_type(146);
  static const int CMessageCorpsGetOtherMemberResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsGetOtherMemberResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsGetOtherMemberResponse, memberlist_),
  };
  CMessageCorpsGetOtherMemberResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsGetOtherMemberResponse_descriptor_,
      CMessageCorpsGetOtherMemberResponse::default_instance_,
      CMessageCorpsGetOtherMemberResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsGetOtherMemberResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsGetOtherMemberResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsGetOtherMemberResponse));
  CMessageUnionJoinBattleListRequest_descriptor_ = file->message_type(147);
  static const int CMessageUnionJoinBattleListRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnionJoinBattleListRequest, corphead_),
  };
  CMessageUnionJoinBattleListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUnionJoinBattleListRequest_descriptor_,
      CMessageUnionJoinBattleListRequest::default_instance_,
      CMessageUnionJoinBattleListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnionJoinBattleListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnionJoinBattleListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUnionJoinBattleListRequest));
  CMessageUnionJoinBattleListResponse_descriptor_ = file->message_type(148);
  static const int CMessageUnionJoinBattleListResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnionJoinBattleListResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnionJoinBattleListResponse, rtncode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnionJoinBattleListResponse, memberlist_),
  };
  CMessageUnionJoinBattleListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUnionJoinBattleListResponse_descriptor_,
      CMessageUnionJoinBattleListResponse::default_instance_,
      CMessageUnionJoinBattleListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnionJoinBattleListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnionJoinBattleListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUnionJoinBattleListResponse));
  CMessageCorpsGetAllMapRequest_descriptor_ = file->message_type(149);
  static const int CMessageCorpsGetAllMapRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsGetAllMapRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsGetAllMapRequest, serverid_),
  };
  CMessageCorpsGetAllMapRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsGetAllMapRequest_descriptor_,
      CMessageCorpsGetAllMapRequest::default_instance_,
      CMessageCorpsGetAllMapRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsGetAllMapRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsGetAllMapRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsGetAllMapRequest));
  PBMapOwner_descriptor_ = file->message_type(150);
  static const int PBMapOwner_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMapOwner, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMapOwner, corpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMapOwner, corpsname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMapOwner, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMapOwner, rootername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMapOwner, corpspower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMapOwner, unionname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMapOwner, unionpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMapOwner, peoplenum_),
  };
  PBMapOwner_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMapOwner_descriptor_,
      PBMapOwner::default_instance_,
      PBMapOwner_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMapOwner, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMapOwner, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMapOwner));
  CMessageCorpsGetAllMapResponse_descriptor_ = file->message_type(151);
  static const int CMessageCorpsGetAllMapResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsGetAllMapResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsGetAllMapResponse, maplist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsGetAllMapResponse, serverid_),
  };
  CMessageCorpsGetAllMapResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsGetAllMapResponse_descriptor_,
      CMessageCorpsGetAllMapResponse::default_instance_,
      CMessageCorpsGetAllMapResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsGetAllMapResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsGetAllMapResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsGetAllMapResponse));
  CMessageCorpsAppointPrinceRequest_descriptor_ = file->message_type(152);
  static const int CMessageCorpsAppointPrinceRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsAppointPrinceRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsAppointPrinceRequest, corpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsAppointPrinceRequest, mapid_),
  };
  CMessageCorpsAppointPrinceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsAppointPrinceRequest_descriptor_,
      CMessageCorpsAppointPrinceRequest::default_instance_,
      CMessageCorpsAppointPrinceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsAppointPrinceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsAppointPrinceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsAppointPrinceRequest));
  CMessageCorspAppointPrinceResponse_descriptor_ = file->message_type(153);
  static const int CMessageCorspAppointPrinceResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorspAppointPrinceResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorspAppointPrinceResponse, rtncode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorspAppointPrinceResponse, corpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorspAppointPrinceResponse, mapid_),
  };
  CMessageCorspAppointPrinceResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorspAppointPrinceResponse_descriptor_,
      CMessageCorspAppointPrinceResponse::default_instance_,
      CMessageCorspAppointPrinceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorspAppointPrinceResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorspAppointPrinceResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorspAppointPrinceResponse));
  CMessageCorpsAppointPrinceNotice_descriptor_ = file->message_type(154);
  static const int CMessageCorpsAppointPrinceNotice_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsAppointPrinceNotice, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsAppointPrinceNotice, corpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsAppointPrinceNotice, mapid_),
  };
  CMessageCorpsAppointPrinceNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsAppointPrinceNotice_descriptor_,
      CMessageCorpsAppointPrinceNotice::default_instance_,
      CMessageCorpsAppointPrinceNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsAppointPrinceNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsAppointPrinceNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsAppointPrinceNotice));
  CMessageCorpsMoveCapitalRequest_descriptor_ = file->message_type(155);
  static const int CMessageCorpsMoveCapitalRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsMoveCapitalRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsMoveCapitalRequest, mapid_),
  };
  CMessageCorpsMoveCapitalRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsMoveCapitalRequest_descriptor_,
      CMessageCorpsMoveCapitalRequest::default_instance_,
      CMessageCorpsMoveCapitalRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsMoveCapitalRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsMoveCapitalRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsMoveCapitalRequest));
  CMesssageCorpsMoveCapitalResponse_descriptor_ = file->message_type(156);
  static const int CMesssageCorpsMoveCapitalResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMesssageCorpsMoveCapitalResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMesssageCorpsMoveCapitalResponse, rtncode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMesssageCorpsMoveCapitalResponse, mapid_),
  };
  CMesssageCorpsMoveCapitalResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMesssageCorpsMoveCapitalResponse_descriptor_,
      CMesssageCorpsMoveCapitalResponse::default_instance_,
      CMesssageCorpsMoveCapitalResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMesssageCorpsMoveCapitalResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMesssageCorpsMoveCapitalResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMesssageCorpsMoveCapitalResponse));
  CMessageCorpsSelectColorRequest_descriptor_ = file->message_type(157);
  static const int CMessageCorpsSelectColorRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsSelectColorRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsSelectColorRequest, color_),
  };
  CMessageCorpsSelectColorRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsSelectColorRequest_descriptor_,
      CMessageCorpsSelectColorRequest::default_instance_,
      CMessageCorpsSelectColorRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsSelectColorRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsSelectColorRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsSelectColorRequest));
  CMessageCorpsSelectColorResponse_descriptor_ = file->message_type(158);
  static const int CMessageCorpsSelectColorResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsSelectColorResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsSelectColorResponse, rtncode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsSelectColorResponse, color_),
  };
  CMessageCorpsSelectColorResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsSelectColorResponse_descriptor_,
      CMessageCorpsSelectColorResponse::default_instance_,
      CMessageCorpsSelectColorResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsSelectColorResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsSelectColorResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsSelectColorResponse));
  CorpsGoodItem_descriptor_ = file->message_type(159);
  static const int CorpsGoodItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsGoodItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsGoodItem, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsGoodItem, composeid_),
  };
  CorpsGoodItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CorpsGoodItem_descriptor_,
      CorpsGoodItem::default_instance_,
      CorpsGoodItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsGoodItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsGoodItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CorpsGoodItem));
  CMessageGetCorpsGoodsListRequest_descriptor_ = file->message_type(160);
  static const int CMessageGetCorpsGoodsListRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsGoodsListRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsGoodsListRequest, corpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsGoodsListRequest, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsGoodsListRequest, npctmpid_),
  };
  CMessageGetCorpsGoodsListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetCorpsGoodsListRequest_descriptor_,
      CMessageGetCorpsGoodsListRequest::default_instance_,
      CMessageGetCorpsGoodsListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsGoodsListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsGoodsListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetCorpsGoodsListRequest));
  CMessageGetCorpsGoodsListResponse_descriptor_ = file->message_type(161);
  static const int CMessageGetCorpsGoodsListResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsGoodsListResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsGoodsListResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsGoodsListResponse, goodslist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsGoodsListResponse, npctmpid_),
  };
  CMessageGetCorpsGoodsListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetCorpsGoodsListResponse_descriptor_,
      CMessageGetCorpsGoodsListResponse::default_instance_,
      CMessageGetCorpsGoodsListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsGoodsListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsGoodsListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetCorpsGoodsListResponse));
  CMessageGetCorpsExchangeGoodsListRequest_descriptor_ = file->message_type(162);
  static const int CMessageGetCorpsExchangeGoodsListRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsExchangeGoodsListRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsExchangeGoodsListRequest, corpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsExchangeGoodsListRequest, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsExchangeGoodsListRequest, npctmpid_),
  };
  CMessageGetCorpsExchangeGoodsListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetCorpsExchangeGoodsListRequest_descriptor_,
      CMessageGetCorpsExchangeGoodsListRequest::default_instance_,
      CMessageGetCorpsExchangeGoodsListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsExchangeGoodsListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsExchangeGoodsListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetCorpsExchangeGoodsListRequest));
  CMessageGetCorpsExchangeGoodsListResponse_descriptor_ = file->message_type(163);
  static const int CMessageGetCorpsExchangeGoodsListResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsExchangeGoodsListResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsExchangeGoodsListResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsExchangeGoodsListResponse, goodslist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsExchangeGoodsListResponse, npctmpid_),
  };
  CMessageGetCorpsExchangeGoodsListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetCorpsExchangeGoodsListResponse_descriptor_,
      CMessageGetCorpsExchangeGoodsListResponse::default_instance_,
      CMessageGetCorpsExchangeGoodsListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsExchangeGoodsListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsExchangeGoodsListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetCorpsExchangeGoodsListResponse));
  CMessageChangeUnionNameRequest_descriptor_ = file->message_type(164);
  static const int CMessageChangeUnionNameRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeUnionNameRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeUnionNameRequest, unionname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeUnionNameRequest, unionnotice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeUnionNameRequest, corpsid_),
  };
  CMessageChangeUnionNameRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeUnionNameRequest_descriptor_,
      CMessageChangeUnionNameRequest::default_instance_,
      CMessageChangeUnionNameRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeUnionNameRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeUnionNameRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeUnionNameRequest));
  CMessageChangeUnionNameResponse_descriptor_ = file->message_type(165);
  static const int CMessageChangeUnionNameResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeUnionNameResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeUnionNameResponse, result_),
  };
  CMessageChangeUnionNameResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeUnionNameResponse_descriptor_,
      CMessageChangeUnionNameResponse::default_instance_,
      CMessageChangeUnionNameResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeUnionNameResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeUnionNameResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeUnionNameResponse));
  CMessageChangeUnionNameNotify_descriptor_ = file->message_type(166);
  static const int CMessageChangeUnionNameNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeUnionNameNotify, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeUnionNameNotify, unionname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeUnionNameNotify, unionnotice_),
  };
  CMessageChangeUnionNameNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeUnionNameNotify_descriptor_,
      CMessageChangeUnionNameNotify::default_instance_,
      CMessageChangeUnionNameNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeUnionNameNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeUnionNameNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeUnionNameNotify));
  CMessageChangeCorpsGoodsListNotify_descriptor_ = file->message_type(167);
  static const int CMessageChangeCorpsGoodsListNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsGoodsListNotify, goodslist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsGoodsListNotify, npctmpid_),
  };
  CMessageChangeCorpsGoodsListNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeCorpsGoodsListNotify_descriptor_,
      CMessageChangeCorpsGoodsListNotify::default_instance_,
      CMessageChangeCorpsGoodsListNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsGoodsListNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsGoodsListNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeCorpsGoodsListNotify));
  CMessageChangeCorpsExchangeGoodsListNotify_descriptor_ = file->message_type(168);
  static const int CMessageChangeCorpsExchangeGoodsListNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsExchangeGoodsListNotify, goodslist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsExchangeGoodsListNotify, npctmpid_),
  };
  CMessageChangeCorpsExchangeGoodsListNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeCorpsExchangeGoodsListNotify_descriptor_,
      CMessageChangeCorpsExchangeGoodsListNotify::default_instance_,
      CMessageChangeCorpsExchangeGoodsListNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsExchangeGoodsListNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsExchangeGoodsListNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeCorpsExchangeGoodsListNotify));
  CMessageUseCorpsLeagueItemNotify_descriptor_ = file->message_type(169);
  static const int CMessageUseCorpsLeagueItemNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseCorpsLeagueItemNotify, goodslist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseCorpsLeagueItemNotify, managerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseCorpsLeagueItemNotify, managername_),
  };
  CMessageUseCorpsLeagueItemNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUseCorpsLeagueItemNotify_descriptor_,
      CMessageUseCorpsLeagueItemNotify::default_instance_,
      CMessageUseCorpsLeagueItemNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseCorpsLeagueItemNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseCorpsLeagueItemNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUseCorpsLeagueItemNotify));
  CMessageCorpsLoginBattleRequest_descriptor_ = file->message_type(170);
  static const int CMessageCorpsLoginBattleRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsLoginBattleRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsLoginBattleRequest, npcid_),
  };
  CMessageCorpsLoginBattleRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsLoginBattleRequest_descriptor_,
      CMessageCorpsLoginBattleRequest::default_instance_,
      CMessageCorpsLoginBattleRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsLoginBattleRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsLoginBattleRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsLoginBattleRequest));
  CMessageCorpsLoginBattleResponse_descriptor_ = file->message_type(171);
  static const int CMessageCorpsLoginBattleResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsLoginBattleResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsLoginBattleResponse, rtncode_),
  };
  CMessageCorpsLoginBattleResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsLoginBattleResponse_descriptor_,
      CMessageCorpsLoginBattleResponse::default_instance_,
      CMessageCorpsLoginBattleResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsLoginBattleResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsLoginBattleResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsLoginBattleResponse));
  CMessageSummonCorpsBossRequest_descriptor_ = file->message_type(172);
  static const int CMessageSummonCorpsBossRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSummonCorpsBossRequest, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSummonCorpsBossRequest, bossid_),
  };
  CMessageSummonCorpsBossRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageSummonCorpsBossRequest_descriptor_,
      CMessageSummonCorpsBossRequest::default_instance_,
      CMessageSummonCorpsBossRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSummonCorpsBossRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSummonCorpsBossRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageSummonCorpsBossRequest));
  CMessageSummonCorpsBossResponse_descriptor_ = file->message_type(173);
  static const int CMessageSummonCorpsBossResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSummonCorpsBossResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSummonCorpsBossResponse, errorcode_),
  };
  CMessageSummonCorpsBossResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageSummonCorpsBossResponse_descriptor_,
      CMessageSummonCorpsBossResponse::default_instance_,
      CMessageSummonCorpsBossResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSummonCorpsBossResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSummonCorpsBossResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageSummonCorpsBossResponse));
  CMessageCorpsBossRepetionOpenNotify_descriptor_ = file->message_type(174);
  static const int CMessageCorpsBossRepetionOpenNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBossRepetionOpenNotify, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBossRepetionOpenNotify, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBossRepetionOpenNotify, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBossRepetionOpenNotify, bosscdcool_),
  };
  CMessageCorpsBossRepetionOpenNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsBossRepetionOpenNotify_descriptor_,
      CMessageCorpsBossRepetionOpenNotify::default_instance_,
      CMessageCorpsBossRepetionOpenNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBossRepetionOpenNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBossRepetionOpenNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsBossRepetionOpenNotify));
  CMessageIntoCorpsBossRepetionResponse_descriptor_ = file->message_type(175);
  static const int CMessageIntoCorpsBossRepetionResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageIntoCorpsBossRepetionResponse, corphead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageIntoCorpsBossRepetionResponse, errorcode_),
  };
  CMessageIntoCorpsBossRepetionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageIntoCorpsBossRepetionResponse_descriptor_,
      CMessageIntoCorpsBossRepetionResponse::default_instance_,
      CMessageIntoCorpsBossRepetionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageIntoCorpsBossRepetionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageIntoCorpsBossRepetionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageIntoCorpsBossRepetionResponse));
  CMessageCorpsBossRepetionEndNotify_descriptor_ = file->message_type(176);
  static const int CMessageCorpsBossRepetionEndNotify_offsets_[1] = {
  };
  CMessageCorpsBossRepetionEndNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsBossRepetionEndNotify_descriptor_,
      CMessageCorpsBossRepetionEndNotify::default_instance_,
      CMessageCorpsBossRepetionEndNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBossRepetionEndNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBossRepetionEndNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsBossRepetionEndNotify));
  CorpsMessageID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_corpsmessage_5fpb_2ehxx);
}

void protobuf_RegisterTypes() {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CorpsHead_descriptor_, &CorpsHead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCreatCorpsRequest_descriptor_, &CMessageCreatCorpsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCreatCorpsResponse_descriptor_, &CMessageCreatCorpsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageApplyCorpsRequest_descriptor_, &CMessageApplyCorpsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageApplyCorpsResponse_descriptor_, &CMessageApplyCorpsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsMemberApplyNotify_descriptor_, &CMessageCorpsMemberApplyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageReplyCorpsMemberApplyRequest_descriptor_, &CMessageReplyCorpsMemberApplyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageReplyCorpsMemberApplyResponse_descriptor_, &CMessageReplyCorpsMemberApplyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageApplyCorpsResultNotify_descriptor_, &CMessageApplyCorpsResultNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageInviteCorpsMemberRequest_descriptor_, &CMessageInviteCorpsMemberRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageInviteCorpsMemberResponse_descriptor_, &CMessageInviteCorpsMemberResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsInviteNotify_descriptor_, &CMessageCorpsInviteNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageReplyCorpsInviteRequest_descriptor_, &CMessageReplyCorpsInviteRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageReplyCorpsInviteResponse_descriptor_, &CMessageReplyCorpsInviteResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsInviteResultNotify_descriptor_, &CMessageCorpsInviteResultNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFamilyJoinCorpsNotify_descriptor_, &CMessageFamilyJoinCorpsNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFamilyLeaveCorpsRequest_descriptor_, &CMessageFamilyLeaveCorpsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFamilyLeaveCorpsResponse_descriptor_, &CMessageFamilyLeaveCorpsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFamilyLeaveCorpsNotify_descriptor_, &CMessageFamilyLeaveCorpsNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageKickFamilyRequest_descriptor_, &CMessageKickFamilyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageKickFamilyResponse_descriptor_, &CMessageKickFamilyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageKickFamilyNotify_descriptor_, &CMessageKickFamilyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetCorpsFamilyInfoRequest_descriptor_, &CMessageGetCorpsFamilyInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetCorpsFamilyInfoResponse_descriptor_, &CMessageGetCorpsFamilyInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetCorpsPropertyRequest_descriptor_, &CMessageGetCorpsPropertyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetCorpsPropertyResponse_descriptor_, &CMessageGetCorpsPropertyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetCorpsFamilyMemberRequest_descriptor_, &CMessageGetCorpsFamilyMemberRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetCorpsFamilyMemberResponse_descriptor_, &CMessageGetCorpsFamilyMemberResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeCorpsBulletinRequest_descriptor_, &CMessageChangeCorpsBulletinRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeCorpsBulletinResponse_descriptor_, &CMessageChangeCorpsBulletinResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeCorpsBulletinNotify_descriptor_, &CMessageChangeCorpsBulletinNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeCorpsHeaderRequest_descriptor_, &CMessageChangeCorpsHeaderRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeCorpsHeaderResponse_descriptor_, &CMessageChangeCorpsHeaderResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeCorpsHeaderNotify_descriptor_, &CMessageChangeCorpsHeaderNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetCorpsApplyListRequest_descriptor_, &CMessageGetCorpsApplyListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetCorpsApplyListResponse_descriptor_, &CMessageGetCorpsApplyListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageDisbandCorpsRequest_descriptor_, &CMessageDisbandCorpsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageDisbandCorpsResponse_descriptor_, &CMessageDisbandCorpsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageDisbandCorpsNotify_descriptor_, &CMessageDisbandCorpsNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCancelCorpsDisbandRequest_descriptor_, &CMessageCancelCorpsDisbandRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCancelCorpsDisbandResponse_descriptor_, &CMessageCancelCorpsDisbandResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageClearCorpsApplyRequest_descriptor_, &CMessageClearCorpsApplyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageClearCorpsApplyResponse_descriptor_, &CMessageClearCorpsApplyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRefreshCorpsInfoRequest_descriptor_, &CMessageRefreshCorpsInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRefreshCorpsInfoResponse_descriptor_, &CMessageRefreshCorpsInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetCorpsListRequest_descriptor_, &CMessageGetCorpsListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetCorpsListResponse_descriptor_, &CMessageGetCorpsListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageSetCorpsPostRequest_descriptor_, &CMessageSetCorpsPostRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageSetCorpsPostResponse_descriptor_, &CMessageSetCorpsPostResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLevelUPCorpsRequest_descriptor_, &CMessageLevelUPCorpsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLevelUPCorpsResponse_descriptor_, &CMessageLevelUPCorpsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageContributeCorpsMoneyRequest_descriptor_, &CMessageContributeCorpsMoneyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageContributeCorpsMoneyResponse_descriptor_, &CMessageContributeCorpsMoneyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFamilyContributeMoneyRequest_descriptor_, &CMessageFamilyContributeMoneyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFamilyContributeMoneyResponse_descriptor_, &CMessageFamilyContributeMoneyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageSetMemberNameRequest_descriptor_, &CMessageSetMemberNameRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageSetMemberNameResponse_descriptor_, &CMessageSetMemberNameResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageSetCorpsPostNotify_descriptor_, &CMessageSetCorpsPostNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsLevelUPNotify_descriptor_, &CMessageCorpsLevelUPNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsBattleBidRequest_descriptor_, &CMessageCorpsBattleBidRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsBattleBidResponse_descriptor_, &CMessageCorpsBattleBidResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsQueryBidRankRequest_descriptor_, &CMessageCorpsQueryBidRankRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBBidRank_descriptor_, &PBBidRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsQueryBidRankResponse_descriptor_, &CMessageCorpsQueryBidRankResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsSelectFamilyBattleRequest_descriptor_, &CMessageCorpsSelectFamilyBattleRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsSelectFamilyBattleResponse_descriptor_, &CMessageCorpsSelectFamilyBattleResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsPvPStarLevelUpNotify_descriptor_, &CMessageCorpsPvPStarLevelUpNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsBattleRightsNotify_descriptor_, &CMessageCorpsBattleRightsNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsRecBattleRightsNotify_descriptor_, &CMessageCorpsRecBattleRightsNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsSelectMemberBattleRequest_descriptor_, &CMessageCorpsSelectMemberBattleRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsSelectMemberBattleResponse_descriptor_, &CMessageCorpsSelectMemberBattleResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsMemberBattleRightsNotify_descriptor_, &CMessageCorpsMemberBattleRightsNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsMoneyChangedNotify_descriptor_, &CMessageCorpsMoneyChangedNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsGloryChangedNotify_descriptor_, &CMessageCorpsGloryChangedNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsContributeChangedNotify_descriptor_, &CMessageCorpsContributeChangedNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsBossTimesChangedNotify_descriptor_, &CMessageCorpsBossTimesChangedNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsBossRefineValueNotify_descriptor_, &CMessageCorpsBossRefineValueNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsCollectActiveChangeNotify_descriptor_, &CMessageCorpsCollectActiveChangeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageMendShengHuoTaiRequest_descriptor_, &CMessageMendShengHuoTaiRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsPropertyNotice_descriptor_, &CMessageCorpsPropertyNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsOperateRoomRequest_descriptor_, &CMessageCorpsOperateRoomRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsOperateRoomResponse_descriptor_, &CMessageCorpsOperateRoomResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsRoomNotice_descriptor_, &CMessageCorpsRoomNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsChallegeRequest_descriptor_, &CMessageCorpsChallegeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsChallegeResponse_descriptor_, &CMessageCorpsChallegeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsChallegeNotice_descriptor_, &CMessageCorpsChallegeNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsReplyChallegeRequest_descriptor_, &CMessageCorpsReplyChallegeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsReplyChallegeResponse_descriptor_, &CMessageCorpsReplyChallegeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsQueryChallegeListRequest_descriptor_, &CMessageCorpsQueryChallegeListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsQueryChallegeListResponse_descriptor_, &CMessageCorpsQueryChallegeListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBChallege_descriptor_, &PBChallege::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsQueryRecChallegeListRequest_descriptor_, &CMessageCorpsQueryRecChallegeListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsQueryRecChallegeListResponse_descriptor_, &CMessageCorpsQueryRecChallegeListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsQueryRoomListRequest_descriptor_, &CMessageCorpsQueryRoomListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCorpsRoom_descriptor_, &PBCorpsRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsQueryRoomListResponse_descriptor_, &CMessageCorpsQueryRoomListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageQueryCorpsWelfareRequest_descriptor_, &CMessageQueryCorpsWelfareRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageQueryCorpsWelfareResponse_descriptor_, &CMessageQueryCorpsWelfareResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageObtainCorpsWelfareRequest_descriptor_, &CMessageObtainCorpsWelfareRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageObtainCorpsWelfareResponse_descriptor_, &CMessageObtainCorpsWelfareResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetCorpsMoneyRequest_descriptor_, &CMessageGetCorpsMoneyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetCorpsMoneyResponse_descriptor_, &CMessageGetCorpsMoneyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsAbortBattleCityRequest_descriptor_, &CMessageCorpsAbortBattleCityRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsAbortBattleCityResponse_descriptor_, &CMessageCorpsAbortBattleCityResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsAbortBattleCityNotice_descriptor_, &CMessageCorpsAbortBattleCityNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsCanLevelUPNotify_descriptor_, &CMessageCorpsCanLevelUPNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsPublishTaskNotify_descriptor_, &CMessageCorpsPublishTaskNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsBattleResultNotice_descriptor_, &CMessageCorpsBattleResultNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsNpcOwnerNotice_descriptor_, &CMessageCorpsNpcOwnerNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsNameChangedNotify_descriptor_, &CMessageCorpsNameChangedNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCreateUnionRequest_descriptor_, &CMessageCreateUnionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCreateUnionResponse_descriptor_, &CMessageCreateUnionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCreateUnionNotify_descriptor_, &CMessageCreateUnionNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageApplyUnionRequest_descriptor_, &CMessageApplyUnionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageApplyUnionResponse_descriptor_, &CMessageApplyUnionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUnionMemberApplyNotify_descriptor_, &CMessageUnionMemberApplyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageReplyUnionMemberApplyRequest_descriptor_, &CMessageReplyUnionMemberApplyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageReplyUnionMemberApplyResponse_descriptor_, &CMessageReplyUnionMemberApplyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageApplyUnionResultNotify_descriptor_, &CMessageApplyUnionResultNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageInviteUnionMemberRequest_descriptor_, &CMessageInviteUnionMemberRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageInviteUnionMemberResponse_descriptor_, &CMessageInviteUnionMemberResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUnionInviteNotify_descriptor_, &CMessageUnionInviteNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageReplyUnionInviteRequest_descriptor_, &CMessageReplyUnionInviteRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageReplyUnionInviteResponse_descriptor_, &CMessageReplyUnionInviteResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUnionInviteResultNotify_descriptor_, &CMessageUnionInviteResultNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsJoinUnionNotify_descriptor_, &CMessageCorpsJoinUnionNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsLeaveUnionRequest_descriptor_, &CMessageCorpsLeaveUnionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsLeaveUnionResponse_descriptor_, &CMessageCorpsLeaveUnionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsLeaveUnionNotify_descriptor_, &CMessageCorpsLeaveUnionNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageKickCorpsRequest_descriptor_, &CMessageKickCorpsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageKickCorpsResponse_descriptor_, &CMessageKickCorpsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageKickCorpsNotify_descriptor_, &CMessageKickCorpsNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageMakeUnionRequest_descriptor_, &CMessageMakeUnionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageMakeUnionResponse_descriptor_, &CMessageMakeUnionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageMakeUnionNotify_descriptor_, &CMessageMakeUnionNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetUnionInfoRequest_descriptor_, &CMessageGetUnionInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetUnionInfoResponse_descriptor_, &CMessageGetUnionInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageDismissUnionRequest_descriptor_, &CMessageDismissUnionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageDismissUnionResponse_descriptor_, &CMessageDismissUnionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageDismissUnionNotify_descriptor_, &CMessageDismissUnionNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUnionApplyListRequest_descriptor_, &CMessageUnionApplyListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUnionApplyListResponse_descriptor_, &CMessageUnionApplyListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageAllUnionListRequest_descriptor_, &CMessageAllUnionListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageAllUnionListResponse_descriptor_, &CMessageAllUnionListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsGetOtherMemberRequest_descriptor_, &CMessageCorpsGetOtherMemberRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBBattleMember_descriptor_, &PBBattleMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsGetOtherMemberResponse_descriptor_, &CMessageCorpsGetOtherMemberResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUnionJoinBattleListRequest_descriptor_, &CMessageUnionJoinBattleListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUnionJoinBattleListResponse_descriptor_, &CMessageUnionJoinBattleListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsGetAllMapRequest_descriptor_, &CMessageCorpsGetAllMapRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMapOwner_descriptor_, &PBMapOwner::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsGetAllMapResponse_descriptor_, &CMessageCorpsGetAllMapResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsAppointPrinceRequest_descriptor_, &CMessageCorpsAppointPrinceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorspAppointPrinceResponse_descriptor_, &CMessageCorspAppointPrinceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsAppointPrinceNotice_descriptor_, &CMessageCorpsAppointPrinceNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsMoveCapitalRequest_descriptor_, &CMessageCorpsMoveCapitalRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMesssageCorpsMoveCapitalResponse_descriptor_, &CMesssageCorpsMoveCapitalResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsSelectColorRequest_descriptor_, &CMessageCorpsSelectColorRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsSelectColorResponse_descriptor_, &CMessageCorpsSelectColorResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CorpsGoodItem_descriptor_, &CorpsGoodItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetCorpsGoodsListRequest_descriptor_, &CMessageGetCorpsGoodsListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetCorpsGoodsListResponse_descriptor_, &CMessageGetCorpsGoodsListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetCorpsExchangeGoodsListRequest_descriptor_, &CMessageGetCorpsExchangeGoodsListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetCorpsExchangeGoodsListResponse_descriptor_, &CMessageGetCorpsExchangeGoodsListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeUnionNameRequest_descriptor_, &CMessageChangeUnionNameRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeUnionNameResponse_descriptor_, &CMessageChangeUnionNameResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeUnionNameNotify_descriptor_, &CMessageChangeUnionNameNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeCorpsGoodsListNotify_descriptor_, &CMessageChangeCorpsGoodsListNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeCorpsExchangeGoodsListNotify_descriptor_, &CMessageChangeCorpsExchangeGoodsListNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUseCorpsLeagueItemNotify_descriptor_, &CMessageUseCorpsLeagueItemNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsLoginBattleRequest_descriptor_, &CMessageCorpsLoginBattleRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsLoginBattleResponse_descriptor_, &CMessageCorpsLoginBattleResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageSummonCorpsBossRequest_descriptor_, &CMessageSummonCorpsBossRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageSummonCorpsBossResponse_descriptor_, &CMessageSummonCorpsBossResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsBossRepetionOpenNotify_descriptor_, &CMessageCorpsBossRepetionOpenNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageIntoCorpsBossRepetionResponse_descriptor_, &CMessageIntoCorpsBossRepetionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsBossRepetionEndNotify_descriptor_, &CMessageCorpsBossRepetionEndNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_corpsmessage_5fpb_2ehxx() {
  delete CorpsHead::default_instance_;
  delete CorpsHead_reflection_;
  delete CMessageCreatCorpsRequest::default_instance_;
  delete CMessageCreatCorpsRequest_reflection_;
  delete CMessageCreatCorpsResponse::default_instance_;
  delete CMessageCreatCorpsResponse_reflection_;
  delete CMessageApplyCorpsRequest::default_instance_;
  delete CMessageApplyCorpsRequest_reflection_;
  delete CMessageApplyCorpsResponse::default_instance_;
  delete CMessageApplyCorpsResponse_reflection_;
  delete CMessageCorpsMemberApplyNotify::default_instance_;
  delete CMessageCorpsMemberApplyNotify_reflection_;
  delete CMessageReplyCorpsMemberApplyRequest::default_instance_;
  delete CMessageReplyCorpsMemberApplyRequest_reflection_;
  delete CMessageReplyCorpsMemberApplyResponse::default_instance_;
  delete CMessageReplyCorpsMemberApplyResponse_reflection_;
  delete CMessageApplyCorpsResultNotify::default_instance_;
  delete CMessageApplyCorpsResultNotify_reflection_;
  delete CMessageInviteCorpsMemberRequest::default_instance_;
  delete CMessageInviteCorpsMemberRequest_reflection_;
  delete CMessageInviteCorpsMemberResponse::default_instance_;
  delete CMessageInviteCorpsMemberResponse_reflection_;
  delete CMessageCorpsInviteNotify::default_instance_;
  delete CMessageCorpsInviteNotify_reflection_;
  delete CMessageReplyCorpsInviteRequest::default_instance_;
  delete CMessageReplyCorpsInviteRequest_reflection_;
  delete CMessageReplyCorpsInviteResponse::default_instance_;
  delete CMessageReplyCorpsInviteResponse_reflection_;
  delete CMessageCorpsInviteResultNotify::default_instance_;
  delete CMessageCorpsInviteResultNotify_reflection_;
  delete CMessageFamilyJoinCorpsNotify::default_instance_;
  delete CMessageFamilyJoinCorpsNotify_reflection_;
  delete CMessageFamilyLeaveCorpsRequest::default_instance_;
  delete CMessageFamilyLeaveCorpsRequest_reflection_;
  delete CMessageFamilyLeaveCorpsResponse::default_instance_;
  delete CMessageFamilyLeaveCorpsResponse_reflection_;
  delete CMessageFamilyLeaveCorpsNotify::default_instance_;
  delete CMessageFamilyLeaveCorpsNotify_reflection_;
  delete CMessageKickFamilyRequest::default_instance_;
  delete CMessageKickFamilyRequest_reflection_;
  delete CMessageKickFamilyResponse::default_instance_;
  delete CMessageKickFamilyResponse_reflection_;
  delete CMessageKickFamilyNotify::default_instance_;
  delete CMessageKickFamilyNotify_reflection_;
  delete CMessageGetCorpsFamilyInfoRequest::default_instance_;
  delete CMessageGetCorpsFamilyInfoRequest_reflection_;
  delete CMessageGetCorpsFamilyInfoResponse::default_instance_;
  delete CMessageGetCorpsFamilyInfoResponse_reflection_;
  delete CMessageGetCorpsPropertyRequest::default_instance_;
  delete CMessageGetCorpsPropertyRequest_reflection_;
  delete CMessageGetCorpsPropertyResponse::default_instance_;
  delete CMessageGetCorpsPropertyResponse_reflection_;
  delete CMessageGetCorpsFamilyMemberRequest::default_instance_;
  delete CMessageGetCorpsFamilyMemberRequest_reflection_;
  delete CMessageGetCorpsFamilyMemberResponse::default_instance_;
  delete CMessageGetCorpsFamilyMemberResponse_reflection_;
  delete CMessageChangeCorpsBulletinRequest::default_instance_;
  delete CMessageChangeCorpsBulletinRequest_reflection_;
  delete CMessageChangeCorpsBulletinResponse::default_instance_;
  delete CMessageChangeCorpsBulletinResponse_reflection_;
  delete CMessageChangeCorpsBulletinNotify::default_instance_;
  delete CMessageChangeCorpsBulletinNotify_reflection_;
  delete CMessageChangeCorpsHeaderRequest::default_instance_;
  delete CMessageChangeCorpsHeaderRequest_reflection_;
  delete CMessageChangeCorpsHeaderResponse::default_instance_;
  delete CMessageChangeCorpsHeaderResponse_reflection_;
  delete CMessageChangeCorpsHeaderNotify::default_instance_;
  delete CMessageChangeCorpsHeaderNotify_reflection_;
  delete CMessageGetCorpsApplyListRequest::default_instance_;
  delete CMessageGetCorpsApplyListRequest_reflection_;
  delete CMessageGetCorpsApplyListResponse::default_instance_;
  delete CMessageGetCorpsApplyListResponse_reflection_;
  delete CMessageDisbandCorpsRequest::default_instance_;
  delete CMessageDisbandCorpsRequest_reflection_;
  delete CMessageDisbandCorpsResponse::default_instance_;
  delete CMessageDisbandCorpsResponse_reflection_;
  delete CMessageDisbandCorpsNotify::default_instance_;
  delete CMessageDisbandCorpsNotify_reflection_;
  delete CMessageCancelCorpsDisbandRequest::default_instance_;
  delete CMessageCancelCorpsDisbandRequest_reflection_;
  delete CMessageCancelCorpsDisbandResponse::default_instance_;
  delete CMessageCancelCorpsDisbandResponse_reflection_;
  delete CMessageClearCorpsApplyRequest::default_instance_;
  delete CMessageClearCorpsApplyRequest_reflection_;
  delete CMessageClearCorpsApplyResponse::default_instance_;
  delete CMessageClearCorpsApplyResponse_reflection_;
  delete CMessageRefreshCorpsInfoRequest::default_instance_;
  delete CMessageRefreshCorpsInfoRequest_reflection_;
  delete CMessageRefreshCorpsInfoResponse::default_instance_;
  delete CMessageRefreshCorpsInfoResponse_reflection_;
  delete CMessageGetCorpsListRequest::default_instance_;
  delete CMessageGetCorpsListRequest_reflection_;
  delete CMessageGetCorpsListResponse::default_instance_;
  delete CMessageGetCorpsListResponse_reflection_;
  delete CMessageSetCorpsPostRequest::default_instance_;
  delete CMessageSetCorpsPostRequest_reflection_;
  delete CMessageSetCorpsPostResponse::default_instance_;
  delete CMessageSetCorpsPostResponse_reflection_;
  delete CMessageLevelUPCorpsRequest::default_instance_;
  delete CMessageLevelUPCorpsRequest_reflection_;
  delete CMessageLevelUPCorpsResponse::default_instance_;
  delete CMessageLevelUPCorpsResponse_reflection_;
  delete CMessageContributeCorpsMoneyRequest::default_instance_;
  delete CMessageContributeCorpsMoneyRequest_reflection_;
  delete CMessageContributeCorpsMoneyResponse::default_instance_;
  delete CMessageContributeCorpsMoneyResponse_reflection_;
  delete CMessageFamilyContributeMoneyRequest::default_instance_;
  delete CMessageFamilyContributeMoneyRequest_reflection_;
  delete CMessageFamilyContributeMoneyResponse::default_instance_;
  delete CMessageFamilyContributeMoneyResponse_reflection_;
  delete CMessageSetMemberNameRequest::default_instance_;
  delete CMessageSetMemberNameRequest_reflection_;
  delete CMessageSetMemberNameResponse::default_instance_;
  delete CMessageSetMemberNameResponse_reflection_;
  delete CMessageSetCorpsPostNotify::default_instance_;
  delete CMessageSetCorpsPostNotify_reflection_;
  delete CMessageCorpsLevelUPNotify::default_instance_;
  delete CMessageCorpsLevelUPNotify_reflection_;
  delete CMessageCorpsBattleBidRequest::default_instance_;
  delete CMessageCorpsBattleBidRequest_reflection_;
  delete CMessageCorpsBattleBidResponse::default_instance_;
  delete CMessageCorpsBattleBidResponse_reflection_;
  delete CMessageCorpsQueryBidRankRequest::default_instance_;
  delete CMessageCorpsQueryBidRankRequest_reflection_;
  delete PBBidRank::default_instance_;
  delete PBBidRank_reflection_;
  delete CMessageCorpsQueryBidRankResponse::default_instance_;
  delete CMessageCorpsQueryBidRankResponse_reflection_;
  delete CMessageCorpsSelectFamilyBattleRequest::default_instance_;
  delete CMessageCorpsSelectFamilyBattleRequest_reflection_;
  delete CMessageCorpsSelectFamilyBattleResponse::default_instance_;
  delete CMessageCorpsSelectFamilyBattleResponse_reflection_;
  delete CMessageCorpsPvPStarLevelUpNotify::default_instance_;
  delete CMessageCorpsPvPStarLevelUpNotify_reflection_;
  delete CMessageCorpsBattleRightsNotify::default_instance_;
  delete CMessageCorpsBattleRightsNotify_reflection_;
  delete CMessageCorpsRecBattleRightsNotify::default_instance_;
  delete CMessageCorpsRecBattleRightsNotify_reflection_;
  delete CMessageCorpsSelectMemberBattleRequest::default_instance_;
  delete CMessageCorpsSelectMemberBattleRequest_reflection_;
  delete CMessageCorpsSelectMemberBattleResponse::default_instance_;
  delete CMessageCorpsSelectMemberBattleResponse_reflection_;
  delete CMessageCorpsMemberBattleRightsNotify::default_instance_;
  delete CMessageCorpsMemberBattleRightsNotify_reflection_;
  delete CMessageCorpsMoneyChangedNotify::default_instance_;
  delete CMessageCorpsMoneyChangedNotify_reflection_;
  delete CMessageCorpsGloryChangedNotify::default_instance_;
  delete CMessageCorpsGloryChangedNotify_reflection_;
  delete CMessageCorpsContributeChangedNotify::default_instance_;
  delete CMessageCorpsContributeChangedNotify_reflection_;
  delete CMessageCorpsBossTimesChangedNotify::default_instance_;
  delete CMessageCorpsBossTimesChangedNotify_reflection_;
  delete CMessageCorpsBossRefineValueNotify::default_instance_;
  delete CMessageCorpsBossRefineValueNotify_reflection_;
  delete CMessageCorpsCollectActiveChangeNotify::default_instance_;
  delete CMessageCorpsCollectActiveChangeNotify_reflection_;
  delete CMessageMendShengHuoTaiRequest::default_instance_;
  delete CMessageMendShengHuoTaiRequest_reflection_;
  delete CMessageCorpsPropertyNotice::default_instance_;
  delete CMessageCorpsPropertyNotice_reflection_;
  delete CMessageCorpsOperateRoomRequest::default_instance_;
  delete CMessageCorpsOperateRoomRequest_reflection_;
  delete CMessageCorpsOperateRoomResponse::default_instance_;
  delete CMessageCorpsOperateRoomResponse_reflection_;
  delete CMessageCorpsRoomNotice::default_instance_;
  delete CMessageCorpsRoomNotice_reflection_;
  delete CMessageCorpsChallegeRequest::default_instance_;
  delete CMessageCorpsChallegeRequest_reflection_;
  delete CMessageCorpsChallegeResponse::default_instance_;
  delete CMessageCorpsChallegeResponse_reflection_;
  delete CMessageCorpsChallegeNotice::default_instance_;
  delete CMessageCorpsChallegeNotice_reflection_;
  delete CMessageCorpsReplyChallegeRequest::default_instance_;
  delete CMessageCorpsReplyChallegeRequest_reflection_;
  delete CMessageCorpsReplyChallegeResponse::default_instance_;
  delete CMessageCorpsReplyChallegeResponse_reflection_;
  delete CMessageCorpsQueryChallegeListRequest::default_instance_;
  delete CMessageCorpsQueryChallegeListRequest_reflection_;
  delete CMessageCorpsQueryChallegeListResponse::default_instance_;
  delete CMessageCorpsQueryChallegeListResponse_reflection_;
  delete PBChallege::default_instance_;
  delete PBChallege_reflection_;
  delete CMessageCorpsQueryRecChallegeListRequest::default_instance_;
  delete CMessageCorpsQueryRecChallegeListRequest_reflection_;
  delete CMessageCorpsQueryRecChallegeListResponse::default_instance_;
  delete CMessageCorpsQueryRecChallegeListResponse_reflection_;
  delete CMessageCorpsQueryRoomListRequest::default_instance_;
  delete CMessageCorpsQueryRoomListRequest_reflection_;
  delete PBCorpsRoom::default_instance_;
  delete PBCorpsRoom_reflection_;
  delete CMessageCorpsQueryRoomListResponse::default_instance_;
  delete CMessageCorpsQueryRoomListResponse_reflection_;
  delete CMessageQueryCorpsWelfareRequest::default_instance_;
  delete CMessageQueryCorpsWelfareRequest_reflection_;
  delete CMessageQueryCorpsWelfareResponse::default_instance_;
  delete CMessageQueryCorpsWelfareResponse_reflection_;
  delete CMessageObtainCorpsWelfareRequest::default_instance_;
  delete CMessageObtainCorpsWelfareRequest_reflection_;
  delete CMessageObtainCorpsWelfareResponse::default_instance_;
  delete CMessageObtainCorpsWelfareResponse_reflection_;
  delete CMessageGetCorpsMoneyRequest::default_instance_;
  delete CMessageGetCorpsMoneyRequest_reflection_;
  delete CMessageGetCorpsMoneyResponse::default_instance_;
  delete CMessageGetCorpsMoneyResponse_reflection_;
  delete CMessageCorpsAbortBattleCityRequest::default_instance_;
  delete CMessageCorpsAbortBattleCityRequest_reflection_;
  delete CMessageCorpsAbortBattleCityResponse::default_instance_;
  delete CMessageCorpsAbortBattleCityResponse_reflection_;
  delete CMessageCorpsAbortBattleCityNotice::default_instance_;
  delete CMessageCorpsAbortBattleCityNotice_reflection_;
  delete CMessageCorpsCanLevelUPNotify::default_instance_;
  delete CMessageCorpsCanLevelUPNotify_reflection_;
  delete CMessageCorpsPublishTaskNotify::default_instance_;
  delete CMessageCorpsPublishTaskNotify_reflection_;
  delete CMessageCorpsBattleResultNotice::default_instance_;
  delete CMessageCorpsBattleResultNotice_reflection_;
  delete CMessageCorpsNpcOwnerNotice::default_instance_;
  delete CMessageCorpsNpcOwnerNotice_reflection_;
  delete CMessageCorpsNameChangedNotify::default_instance_;
  delete CMessageCorpsNameChangedNotify_reflection_;
  delete CMessageCreateUnionRequest::default_instance_;
  delete CMessageCreateUnionRequest_reflection_;
  delete CMessageCreateUnionResponse::default_instance_;
  delete CMessageCreateUnionResponse_reflection_;
  delete CMessageCreateUnionNotify::default_instance_;
  delete CMessageCreateUnionNotify_reflection_;
  delete CMessageApplyUnionRequest::default_instance_;
  delete CMessageApplyUnionRequest_reflection_;
  delete CMessageApplyUnionResponse::default_instance_;
  delete CMessageApplyUnionResponse_reflection_;
  delete CMessageUnionMemberApplyNotify::default_instance_;
  delete CMessageUnionMemberApplyNotify_reflection_;
  delete CMessageReplyUnionMemberApplyRequest::default_instance_;
  delete CMessageReplyUnionMemberApplyRequest_reflection_;
  delete CMessageReplyUnionMemberApplyResponse::default_instance_;
  delete CMessageReplyUnionMemberApplyResponse_reflection_;
  delete CMessageApplyUnionResultNotify::default_instance_;
  delete CMessageApplyUnionResultNotify_reflection_;
  delete CMessageInviteUnionMemberRequest::default_instance_;
  delete CMessageInviteUnionMemberRequest_reflection_;
  delete CMessageInviteUnionMemberResponse::default_instance_;
  delete CMessageInviteUnionMemberResponse_reflection_;
  delete CMessageUnionInviteNotify::default_instance_;
  delete CMessageUnionInviteNotify_reflection_;
  delete CMessageReplyUnionInviteRequest::default_instance_;
  delete CMessageReplyUnionInviteRequest_reflection_;
  delete CMessageReplyUnionInviteResponse::default_instance_;
  delete CMessageReplyUnionInviteResponse_reflection_;
  delete CMessageUnionInviteResultNotify::default_instance_;
  delete CMessageUnionInviteResultNotify_reflection_;
  delete CMessageCorpsJoinUnionNotify::default_instance_;
  delete CMessageCorpsJoinUnionNotify_reflection_;
  delete CMessageCorpsLeaveUnionRequest::default_instance_;
  delete CMessageCorpsLeaveUnionRequest_reflection_;
  delete CMessageCorpsLeaveUnionResponse::default_instance_;
  delete CMessageCorpsLeaveUnionResponse_reflection_;
  delete CMessageCorpsLeaveUnionNotify::default_instance_;
  delete CMessageCorpsLeaveUnionNotify_reflection_;
  delete CMessageKickCorpsRequest::default_instance_;
  delete CMessageKickCorpsRequest_reflection_;
  delete CMessageKickCorpsResponse::default_instance_;
  delete CMessageKickCorpsResponse_reflection_;
  delete CMessageKickCorpsNotify::default_instance_;
  delete CMessageKickCorpsNotify_reflection_;
  delete CMessageMakeUnionRequest::default_instance_;
  delete CMessageMakeUnionRequest_reflection_;
  delete CMessageMakeUnionResponse::default_instance_;
  delete CMessageMakeUnionResponse_reflection_;
  delete CMessageMakeUnionNotify::default_instance_;
  delete CMessageMakeUnionNotify_reflection_;
  delete CMessageGetUnionInfoRequest::default_instance_;
  delete CMessageGetUnionInfoRequest_reflection_;
  delete CMessageGetUnionInfoResponse::default_instance_;
  delete CMessageGetUnionInfoResponse_reflection_;
  delete CMessageDismissUnionRequest::default_instance_;
  delete CMessageDismissUnionRequest_reflection_;
  delete CMessageDismissUnionResponse::default_instance_;
  delete CMessageDismissUnionResponse_reflection_;
  delete CMessageDismissUnionNotify::default_instance_;
  delete CMessageDismissUnionNotify_reflection_;
  delete CMessageUnionApplyListRequest::default_instance_;
  delete CMessageUnionApplyListRequest_reflection_;
  delete CMessageUnionApplyListResponse::default_instance_;
  delete CMessageUnionApplyListResponse_reflection_;
  delete CMessageAllUnionListRequest::default_instance_;
  delete CMessageAllUnionListRequest_reflection_;
  delete CMessageAllUnionListResponse::default_instance_;
  delete CMessageAllUnionListResponse_reflection_;
  delete CMessageCorpsGetOtherMemberRequest::default_instance_;
  delete CMessageCorpsGetOtherMemberRequest_reflection_;
  delete PBBattleMember::default_instance_;
  delete PBBattleMember_reflection_;
  delete CMessageCorpsGetOtherMemberResponse::default_instance_;
  delete CMessageCorpsGetOtherMemberResponse_reflection_;
  delete CMessageUnionJoinBattleListRequest::default_instance_;
  delete CMessageUnionJoinBattleListRequest_reflection_;
  delete CMessageUnionJoinBattleListResponse::default_instance_;
  delete CMessageUnionJoinBattleListResponse_reflection_;
  delete CMessageCorpsGetAllMapRequest::default_instance_;
  delete CMessageCorpsGetAllMapRequest_reflection_;
  delete PBMapOwner::default_instance_;
  delete PBMapOwner_reflection_;
  delete CMessageCorpsGetAllMapResponse::default_instance_;
  delete CMessageCorpsGetAllMapResponse_reflection_;
  delete CMessageCorpsAppointPrinceRequest::default_instance_;
  delete CMessageCorpsAppointPrinceRequest_reflection_;
  delete CMessageCorspAppointPrinceResponse::default_instance_;
  delete CMessageCorspAppointPrinceResponse_reflection_;
  delete CMessageCorpsAppointPrinceNotice::default_instance_;
  delete CMessageCorpsAppointPrinceNotice_reflection_;
  delete CMessageCorpsMoveCapitalRequest::default_instance_;
  delete CMessageCorpsMoveCapitalRequest_reflection_;
  delete CMesssageCorpsMoveCapitalResponse::default_instance_;
  delete CMesssageCorpsMoveCapitalResponse_reflection_;
  delete CMessageCorpsSelectColorRequest::default_instance_;
  delete CMessageCorpsSelectColorRequest_reflection_;
  delete CMessageCorpsSelectColorResponse::default_instance_;
  delete CMessageCorpsSelectColorResponse_reflection_;
  delete CorpsGoodItem::default_instance_;
  delete CorpsGoodItem_reflection_;
  delete CMessageGetCorpsGoodsListRequest::default_instance_;
  delete CMessageGetCorpsGoodsListRequest_reflection_;
  delete CMessageGetCorpsGoodsListResponse::default_instance_;
  delete CMessageGetCorpsGoodsListResponse_reflection_;
  delete CMessageGetCorpsExchangeGoodsListRequest::default_instance_;
  delete CMessageGetCorpsExchangeGoodsListRequest_reflection_;
  delete CMessageGetCorpsExchangeGoodsListResponse::default_instance_;
  delete CMessageGetCorpsExchangeGoodsListResponse_reflection_;
  delete CMessageChangeUnionNameRequest::default_instance_;
  delete CMessageChangeUnionNameRequest_reflection_;
  delete CMessageChangeUnionNameResponse::default_instance_;
  delete CMessageChangeUnionNameResponse_reflection_;
  delete CMessageChangeUnionNameNotify::default_instance_;
  delete CMessageChangeUnionNameNotify_reflection_;
  delete CMessageChangeCorpsGoodsListNotify::default_instance_;
  delete CMessageChangeCorpsGoodsListNotify_reflection_;
  delete CMessageChangeCorpsExchangeGoodsListNotify::default_instance_;
  delete CMessageChangeCorpsExchangeGoodsListNotify_reflection_;
  delete CMessageUseCorpsLeagueItemNotify::default_instance_;
  delete CMessageUseCorpsLeagueItemNotify_reflection_;
  delete CMessageCorpsLoginBattleRequest::default_instance_;
  delete CMessageCorpsLoginBattleRequest_reflection_;
  delete CMessageCorpsLoginBattleResponse::default_instance_;
  delete CMessageCorpsLoginBattleResponse_reflection_;
  delete CMessageSummonCorpsBossRequest::default_instance_;
  delete CMessageSummonCorpsBossRequest_reflection_;
  delete CMessageSummonCorpsBossResponse::default_instance_;
  delete CMessageSummonCorpsBossResponse_reflection_;
  delete CMessageCorpsBossRepetionOpenNotify::default_instance_;
  delete CMessageCorpsBossRepetionOpenNotify_reflection_;
  delete CMessageIntoCorpsBossRepetionResponse::default_instance_;
  delete CMessageIntoCorpsBossRepetionResponse_reflection_;
  delete CMessageCorpsBossRepetionEndNotify::default_instance_;
  delete CMessageCorpsBossRepetionEndNotify_reflection_;
}

void protobuf_AddDesc_corpsmessage_5fpb_2ehxx() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_familydbinfo_5fpb_2ehxx();
  ::protobuf_AddDesc_corpsinfo_5fpb_2ehxx();
  #ifndef _NO_PROTOBUF_STR_
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023corpsmessage_pb.hxx\032\023familydbinfo_pb.h"
    "xx\032\020corpsinfo_pb.hxx\"<\n\tCorpsHead\022\016\n\006Rol"
    "eID\030\001 \001(\r\022\r\n\005MsgID\030\002 \001(\r\022\020\n\010EntityID\030\003 \001"
    "(\r\"u\n\031CMessageCreatCorpsRequest\022\034\n\010CorpH"
    "ead\030\001 \001(\0132\n.CorpsHead\022\021\n\tCorpsName\030\002 \001(\t"
    "\022\023\n\013NpcEntityID\030\003 \001(\r\022\022\n\nCorpsColor\030\004 \001("
    "\r\"\203\001\n\032CMessageCreatCorpsResponse\022\034\n\010Corp"
    "Head\030\001 \001(\0132\n.CorpsHead\022\017\n\007Errcode\030\002 \001(\r\022"
    "\021\n\tCorpsName\030\003 \001(\t\022\017\n\007CorpsID\030\004 \001(\r\022\022\n\nC"
    "orpsColor\030\005 \001(\r\"m\n\031CMessageApplyCorpsReq"
    "uest\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\021\n\tCo"
    "rpsName\030\002 \001(\t\022\017\n\007CorpsID\030\003 \001(\r\022\016\n\006RoleID"
    "\030\004 \001(\r\"^\n\032CMessageApplyCorpsResponse\022\034\n\010"
    "CorpHead\030\001 \001(\0132\n.CorpsHead\022\017\n\007Errcode\030\002 "
    "\001(\r\022\021\n\tCorpsName\030\003 \001(\t\"_\n\036CMessageCorpsM"
    "emberApplyNotify\022\034\n\010CorpHead\030\001 \001(\0132\n.Cor"
    "psHead\022\037\n\nFamilyInfo\030\002 \001(\0132\013.FamilyData\""
    "f\n$CMessageReplyCorpsMemberApplyRequest\022"
    "\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\016\n\006Result\030"
    "\002 \001(\r\022\020\n\010FamilyID\030\003 \001(\r\"x\n%CMessageReply"
    "CorpsMemberApplyResponse\022\034\n\010CorpHead\030\001 \001"
    "(\0132\n.CorpsHead\022\017\n\007Errcode\030\002 \001(\r\022\016\n\006Resul"
    "t\030\003 \001(\r\022\020\n\010FamilyID\030\004 \001(\r\"\232\001\n\036CMessageAp"
    "plyCorpsResultNotify\022\034\n\010CorpHead\030\001 \001(\0132\n"
    ".CorpsHead\022\022\n\nResultCode\030\002 \001(\r\022\017\n\007CorpsI"
    "D\030\003 \001(\r\022\021\n\tCorpsName\030\004 \001(\t\022\017\n\007UnionID\030\005 "
    "\001(\r\022\021\n\tUnionName\030\006 \001(\t\"x\n CMessageInvite"
    "CorpsMemberRequest\022\034\n\010CorpHead\030\001 \001(\0132\n.C"
    "orpsHead\022\022\n\nFamilyName\030\002 \001(\t\022\020\n\010FamilyID"
    "\030\003 \001(\r\022\020\n\010MemberID\030\004 \001(\r\"f\n!CMessageInvi"
    "teCorpsMemberResponse\022\034\n\010CorpHead\030\001 \001(\0132"
    "\n.CorpsHead\022\017\n\007Errcode\030\002 \001(\r\022\022\n\nFamilyNa"
    "me\030\003 \001(\t\"\211\001\n\031CMessageCorpsInviteNotify\022\034"
    "\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\024\n\014Inviting"
    "Name\030\002 \001(\t\022\022\n\nInvitingID\030\003 \001(\r\022$\n\tCorpsI"
    "nfo\030\004 \001(\0132\021.PBCorpsBasicInfo\"t\n\037CMessage"
    "ReplyCorpsInviteRequest\022\034\n\010CorpHead\030\001 \001("
    "\0132\n.CorpsHead\022\016\n\006Result\030\002 \001(\r\022\017\n\007CorpsID"
    "\030\003 \001(\r\022\022\n\nInvitingID\030\004 \001(\r\"\251\001\n CMessageR"
    "eplyCorpsInviteResponse\022\034\n\010CorpHead\030\001 \001("
    "\0132\n.CorpsHead\022\017\n\007Errcode\030\002 \001(\r\022\016\n\006Result"
    "\030\003 \001(\r\022\021\n\tCorpsName\030\004 \001(\t\022\017\n\007CorpsID\030\005 \001"
    "(\r\022\017\n\007UnionID\030\006 \001(\r\022\021\n\tUnionName\030\007 \001(\t\"c"
    "\n\037CMessageCorpsInviteResultNotify\022\034\n\010Cor"
    "pHead\030\001 \001(\0132\n.CorpsHead\022\016\n\006Result\030\002 \001(\r\022"
    "\022\n\nFamilyName\030\003 \001(\t\"\205\001\n\035CMessageFamilyJo"
    "inCorpsNotify\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsH"
    "ead\022\"\n\nFamilyInfo\030\002 \001(\0132\016.PBCorpsMember\022"
    "\017\n\007UnionID\030\003 \001(\r\022\021\n\tUnionName\030\004 \001(\t\"P\n\037C"
    "MessageFamilyLeaveCorpsRequest\022\034\n\010CorpHe"
    "ad\030\001 \001(\0132\n.CorpsHead\022\017\n\007Msgcode\030\002 \001(\r\"Q\n"
    " CMessageFamilyLeaveCorpsResponse\022\034\n\010Cor"
    "pHead\030\001 \001(\0132\n.CorpsHead\022\017\n\007Errcode\030\002 \001(\r"
    "\"d\n\036CMessageFamilyLeaveCorpsNotify\022\034\n\010Co"
    "rpHead\030\001 \001(\0132\n.CorpsHead\022\020\n\010FamilyID\030\002 \001"
    "(\r\022\022\n\nFamilyName\030\003 \001(\t\"K\n\031CMessageKickFa"
    "milyRequest\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHea"
    "d\022\020\n\010FamilyID\030\002 \001(\r\"q\n\032CMessageKickFamil"
    "yResponse\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022"
    "\017\n\007Errcode\030\002 \001(\r\022\022\n\nFamilyName\030\003 \001(\t\022\020\n\010"
    "FamilyID\030\004 \001(\r\"^\n\030CMessageKickFamilyNoti"
    "fy\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\020\n\010Fami"
    "lyID\030\002 \001(\r\022\022\n\nFamilyName\030\003 \001(\t\"R\n!CMessa"
    "geGetCorpsFamilyInfoRequest\022\034\n\010CorpHead\030"
    "\001 \001(\0132\n.CorpsHead\022\017\n\007MsgCode\030\002 \001(\r\"k\n\"CM"
    "essageGetCorpsFamilyInfoResponse\022\034\n\010Corp"
    "Head\030\001 \001(\0132\n.CorpsHead\022\'\n\017CorpsMemberInf"
    "o\030\002 \003(\0132\016.PBCorpsMember\"P\n\037CMessageGetCo"
    "rpsPropertyRequest\022\034\n\010CorpHead\030\001 \001(\0132\n.C"
    "orpsHead\022\017\n\007MsgCode\030\002 \001(\r\"f\n CMessageGet"
    "CorpsPropertyResponse\022\034\n\010CorpHead\030\001 \001(\0132"
    "\n.CorpsHead\022$\n\014CorpProperty\030\002 \001(\0132\016.Corp"
    "sProperty\"U\n#CMessageGetCorpsFamilyMembe"
    "rRequest\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\020"
    "\n\010FamilyID\030\002 \001(\r\"\223\001\n$CMessageGetCorpsFam"
    "ilyMemberResponse\022\034\n\010CorpHead\030\001 \001(\0132\n.Co"
    "rpsHead\022\020\n\010FamilyID\030\002 \001(\r\022\022\n\nFamilyName\030"
    "\003 \001(\t\022\'\n\nMemberList\030\004 \001(\0132\023.PBFamilyMemb"
    "erList\"T\n\"CMessageChangeCorpsBulletinReq"
    "uest\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\020\n\010Bu"
    "lletin\030\002 \001(\t\"f\n#CMessageChangeCorpsBulle"
    "tinResponse\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHea"
    "d\022\017\n\007Errcode\030\002 \001(\r\022\020\n\010Bulletin\030\003 \001(\t\"S\n!"
    "CMessageChangeCorpsBulletinNotify\022\034\n\010Cor"
    "pHead\030\001 \001(\0132\n.CorpsHead\022\020\n\010Bulletin\030\002 \001("
    "\t\"R\n CMessageChangeCorpsHeaderRequest\022\034\n"
    "\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\020\n\010MemberID\030"
    "\002 \001(\r\"x\n!CMessageChangeCorpsHeaderRespon"
    "se\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\017\n\007Errc"
    "ode\030\002 \001(\r\022\020\n\010MemberID\030\003 \001(\r\022\022\n\nMemberNam"
    "e\030\004 \001(\t\"\233\001\n\037CMessageChangeCorpsHeaderNot"
    "ify\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\024\n\014Hea"
    "derRoleID\030\002 \001(\r\022\026\n\016HeaderRoleName\030\003 \001(\t\022"
    "\024\n\014MemberRoleID\030\004 \001(\r\022\026\n\016MemberRoleName\030"
    "\005 \001(\t\"Q\n CMessageGetCorpsApplyListReques"
    "t\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\017\n\007MsgCo"
    "de\030\002 \001(\r\"y\n!CMessageGetCorpsApplyListRes"
    "ponse\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\017\n\007M"
    "sgCode\030\002 \001(\r\022%\n\nCorpsApply\030\003 \001(\0132\021.PBCor"
    "psApplyList\"P\n\033CMessageDisbandCorpsReque"
    "st\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\023\n\013NpcE"
    "ntityID\030\002 \001(\r\"M\n\034CMessageDisbandCorpsRes"
    "ponse\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\017\n\007E"
    "rrcode\030\002 \001(\r\"K\n\032CMessageDisbandCorpsNoti"
    "fy\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\017\n\007MsgC"
    "ode\030\002 \001(\r\"R\n!CMessageCancelCorpsDisbandR"
    "equest\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\017\n\007"
    "MsgCode\030\002 \001(\r\"S\n\"CMessageCancelCorpsDisb"
    "andResponse\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHea"
    "d\022\017\n\007ErrCode\030\002 \001(\r\"O\n\036CMessageClearCorps"
    "ApplyRequest\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHe"
    "ad\022\017\n\007MsgCode\030\002 \001(\r\"P\n\037CMessageClearCorp"
    "sApplyResponse\022\034\n\010CorpHead\030\001 \001(\0132\n.Corps"
    "Head\022\017\n\007ErrCode\030\002 \001(\r\"P\n\037CMessageRefresh"
    "CorpsInfoRequest\022\034\n\010CorpHead\030\001 \001(\0132\n.Cor"
    "psHead\022\017\n\007MsgCode\030\002 \001(\r\"e\n CMessageRefre"
    "shCorpsInfoResponse\022\034\n\010CorpHead\030\001 \001(\0132\n."
    "CorpsHead\022#\n\013CorpsMember\030\002 \003(\0132\016.PBCorps"
    "Member\"L\n\033CMessageGetCorpsListRequest\022\034\n"
    "\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\017\n\007CurPage\030\002"
    " \001(\r\"\203\001\n\034CMessageGetCorpsListResponse\022\034\n"
    "\010CorpHead\030\001 \001(\0132\n.CorpsHead\022!\n\tCorpsList"
    "\030\002 \001(\0132\016.CorpsInfoList\022\017\n\007CurPage\030\003 \001(\r\022"
    "\021\n\tTotalPage\030\004 \001(\r\"[\n\033CMessageSetCorpsPo"
    "stRequest\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022"
    "\020\n\010MemberID\030\002 \001(\r\022\014\n\004Post\030\003 \001(\r\"m\n\034CMess"
    "ageSetCorpsPostResponse\022\034\n\010CorpHead\030\001 \001("
    "\0132\n.CorpsHead\022\020\n\010MemberID\030\002 \001(\r\022\014\n\004Post\030"
    "\003 \001(\r\022\017\n\007Errcode\030\004 \001(\r\"L\n\033CMessageLevelU"
    "PCorpsRequest\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsH"
    "ead\022\017\n\007MsgCode\030\002 \001(\r\"\\\n\034CMessageLevelUPC"
    "orpsResponse\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHe"
    "ad\022\017\n\007Errcode\030\002 \001(\r\022\r\n\005Level\030\003 \001(\r\"R\n#CM"
    "essageContributeCorpsMoneyRequest\022\034\n\010Cor"
    "pHead\030\001 \001(\0132\n.CorpsHead\022\r\n\005Money\030\002 \001(\r\"d"
    "\n$CMessageContributeCorpsMoneyResponse\022\034"
    "\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\017\n\007Errcode\030"
    "\002 \001(\r\022\r\n\005Money\030\003 \001(\r\"S\n$CMessageFamilyCo"
    "ntributeMoneyRequest\022\034\n\010CorpHead\030\001 \001(\0132\n"
    ".CorpsHead\022\r\n\005Money\030\002 \001(\r\"e\n%CMessageFam"
    "ilyContributeMoneyResponse\022\034\n\010CorpHead\030\001"
    " \001(\0132\n.CorpsHead\022\017\n\007Errcode\030\002 \001(\r\022\r\n\005Mon"
    "ey\030\003 \001(\r\"\\\n\034CMessageSetMemberNameRequest"
    "\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\020\n\010Member"
    "ID\030\002 \001(\r\022\014\n\004Name\030\003 \001(\t\"n\n\035CMessageSetMem"
    "berNameResponse\022\034\n\010CorpHead\030\001 \001(\0132\n.Corp"
    "sHead\022\017\n\007Errcode\030\002 \001(\r\022\020\n\010MemberID\030\003 \001(\r"
    "\022\014\n\004Name\030\004 \001(\t\"\257\001\n\032CMessageSetCorpsPostN"
    "otify\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\021\n\tM"
    "anagerID\030\002 \001(\r\022\023\n\013ManagerName\030\003 \001(\t\022\020\n\010M"
    "emberID\030\004 \001(\r\022\022\n\nMemberName\030\005 \001(\t\022\024\n\014Ori"
    "ginalPost\030\006 \001(\r\022\017\n\007NewPost\030\007 \001(\r\"\326\001\n\032CMe"
    "ssageCorpsLevelUPNotify\022\034\n\010CorpHead\030\001 \001("
    "\0132\n.CorpsHead\022\r\n\005Level\030\002 \001(\r\022\r\n\005Money\030\003 "
    "\001(\r\022\r\n\005Glory\030\004 \001(\r\022\024\n\014MaxFamilyNum\030\005 \001(\r"
    "\022\025\n\rMaxGeneralNum\030\006 \001(\r\022\030\n\020MaxCounsellor"
    "Num\030\007 \001(\r\022\022\n\nLevelMoney\030\010 \001(\r\022\022\n\nLevelGl"
    "ory\030\t \001(\r\"\177\n\035CMessageCorpsBattleBidReque"
    "st\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\r\n\005NpcI"
    "D\030\002 \001(\r\022\r\n\005Money\030\003 \001(\r\022\023\n\013MinIncMoney\030\004 "
    "\001(\r\022\r\n\005MapID\030\005 \001(\r\"m\n\036CMessageCorpsBattl"
    "eBidResponse\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHe"
    "ad\022\017\n\007RtnCode\030\002 \001(\r\022\r\n\005NpcID\030\003 \001(\r\022\r\n\005Mo"
    "ney\030\004 \001(\r\"c\n CMessageCorpsQueryBidRankRe"
    "quest\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\r\n\005N"
    "pcID\030\002 \001(\r\022\022\n\nBattleCity\030\003 \001(\r\"\206\001\n\tPBBid"
    "Rank\022\021\n\tCorpsName\030\001 \001(\t\022\r\n\005Money\030\002 \001(\r\022\023"
    "\n\013Nationality\030\003 \001(\r\022\017\n\007Victory\030\004 \001(\r\022\r\n\005"
    "Loser\030\005 \001(\r\022\021\n\tStarLevel\030\006 \001(\r\022\017\n\007CorpsI"
    "D\030\007 \001(\r\"\201\001\n!CMessageCorpsQueryBidRankRes"
    "ponse\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\r\n\005N"
    "pcID\030\002 \001(\r\022\021\n\tCityOwner\030\003 \001(\t\022\034\n\010RankInf"
    "o\030\004 \003(\0132\n.PBBidRank\"X\n&CMessageCorpsSele"
    "ctFamilyBattleRequest\022\034\n\010CorpHead\030\001 \001(\0132"
    "\n.CorpsHead\022\020\n\010FamilyID\030\002 \003(\r\"X\n\'CMessag"
    "eCorpsSelectFamilyBattleResponse\022\034\n\010Corp"
    "Head\030\001 \001(\0132\n.CorpsHead\022\017\n\007RtnCode\030\002 \001(\r\""
    "S\n!CMessageCorpsPvPStarLevelUpNotify\022\034\n\010"
    "CorpHead\030\001 \001(\0132\n.CorpsHead\022\020\n\010PvPLevel\030\002"
    " \001(\r\"r\n\037CMessageCorpsBattleRightsNotify\022"
    "\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\r\n\005NpcID\030\002"
    " \001(\r\022\024\n\014DesCorpsName\030\003 \001(\t\022\014\n\004Type\030\004 \001(\r"
    "\"\264\001\n\"CMessageCorpsRecBattleRightsNotify\022"
    "\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\r\n\005NpcID\030\002"
    " \001(\r\022\022\n\nSrcCorpsID\030\003 \001(\r\022\024\n\014SrcCorpsName"
    "\030\004 \001(\t\022\022\n\nDesCorpsID\030\005 \001(\r\022\024\n\014DesCorpsNa"
    "me\030\006 \001(\t\022\r\n\005Money\030\007 \001(\r\"|\n&CMessageCorps"
    "SelectMemberBattleRequest\022\034\n\010CorpHead\030\001 "
    "\001(\0132\n.CorpsHead\022\022\n\nMemberList\030\002 \003(\r\022\022\n\nB"
    "attleCity\030\003 \001(\r\022\014\n\004Type\030\004 \001(\r\"X\n\'CMessag"
    "eCorpsSelectMemberBattleResponse\022\034\n\010Corp"
    "Head\030\001 \001(\0132\n.CorpsHead\022\017\n\007RtnCode\030\002 \001(\r\""
    "\214\001\n%CMessageCorpsMemberBattleRightsNotif"
    "y\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\r\n\005NpcID"
    "\030\002 \001(\r\022\022\n\nMemberList\030\003 \003(\r\022\024\n\014DesCorpsNa"
    "me\030\004 \001(\t\022\014\n\004Type\030\005 \001(\r\"q\n\037CMessageCorpsM"
    "oneyChangedNotify\022\r\n\005Money\030\001 \001(\r\022\016\n\006Role"
    "ID\030\002 \001(\r\022\016\n\006Reason\030\003 \001(\r\022\020\n\010RoleName\030\004 \001"
    "(\t\022\r\n\005Valeu\030\005 \001(\005\"q\n\037CMessageCorpsGloryC"
    "hangedNotify\022\r\n\005Glory\030\001 \001(\r\022\016\n\006RoleID\030\002 "
    "\001(\r\022\016\n\006Reason\030\003 \001(\r\022\020\n\010RoleName\030\004 \001(\t\022\r\n"
    "\005Value\030\005 \001(\005\"w\n$CMessageCorpsContributeC"
    "hangedNotify\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHe"
    "ad\022\022\n\nContribute\030\002 \001(\r\022\016\n\006RoleID\030\003 \001(\r\022\r"
    "\n\005Value\030\004 \001(\005\"\205\001\n#CMessageCorpsBossTimes"
    "ChangedNotify\022\016\n\006BossID\030\001 \001(\r\022\016\n\006RoleID\030"
    "\002 \001(\r\022\016\n\006Reason\030\003 \001(\r\022\020\n\010RoleName\030\004 \001(\t\022"
    "\r\n\005Times\030\005 \001(\r\022\r\n\005Value\030\006 \001(\r\"z\n\"CMessag"
    "eCorpsBossRefineValueNotify\022\023\n\013RefineVal"
    "ue\030\001 \001(\r\022\016\n\006RoleID\030\002 \001(\r\022\r\n\005Value\030\003 \001(\r\022"
    "\016\n\006Reason\030\004 \001(\r\022\020\n\010RoleName\030\005 \001(\t\"~\n&CMe"
    "ssageCorpsCollectActiveChangeNotify\022\034\n\010C"
    "orpHead\030\001 \001(\0132\n.CorpsHead\022\023\n\013ActiveValue"
    "\030\002 \001(\r\022\r\n\005Vaule\030\003 \001(\r\022\022\n\nChangeType\030\004 \001("
    "\r\"5\n\036CMessageMendShengHuoTaiRequest\022\023\n\013N"
    "pcEntityID\030\001 \001(\r\"]\n\033CMessageCorpsPropert"
    "yNotice\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022 \n"
    "\010Property\030\002 \001(\0132\016.CorpsProperty\"l\n\037CMess"
    "ageCorpsOperateRoomRequest\022\034\n\010CorpHead\030\001"
    " \001(\0132\n.CorpsHead\022\016\n\006Action\030\002 \001(\r\022\r\n\005Mone"
    "y\030\003 \001(\r\022\014\n\004Name\030\004 \001(\t\"~\n CMessageCorpsOp"
    "erateRoomResponse\022\034\n\010CorpHead\030\001 \001(\0132\n.Co"
    "rpsHead\022\016\n\006Action\030\002 \001(\r\022\017\n\007RtnCode\030\003 \001(\r"
    "\022\r\n\005Money\030\004 \001(\r\022\014\n\004Name\030\005 \001(\t\"[\n\027CMessag"
    "eCorpsRoomNotice\022\034\n\010CorpHead\030\001 \001(\0132\n.Cor"
    "psHead\022\016\n\006Action\030\002 \001(\r\022\022\n\nRooterName\030\003 \001"
    "(\t\"`\n\034CMessageCorpsChallegeRequest\022\034\n\010Co"
    "rpHead\030\001 \001(\0132\n.CorpsHead\022\016\n\006Action\030\002 \001(\r"
    "\022\022\n\nDesCropsID\030\003 \001(\r\"r\n\035CMessageCorpsCha"
    "llegeResponse\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsH"
    "ead\022\017\n\007RtnCode\030\002 \001(\r\022\016\n\006Action\030\003 \001(\r\022\022\n\n"
    "DesCropsID\030\004 \001(\r\"\362\001\n\033CMessageCorpsChalle"
    "geNotice\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\022"
    "\n\nSrcCorpsID\030\002 \001(\r\022\024\n\014SrcCorpsName\030\003 \001(\t"
    "\022\022\n\nDesCropsID\030\004 \001(\r\022\024\n\014DesCorpsName\030\005 \001"
    "(\t\022\020\n\010WinTimes\030\006 \001(\r\022\021\n\tLostTimes\030\007 \001(\r\022"
    "\025\n\rSrcRooterName\030\010 \001(\t\022\025\n\rDesRooterName\030"
    "\t \001(\t\022\016\n\006Action\030\n \001(\r\"U\n!CMessageCorpsRe"
    "plyChallegeRequest\022\034\n\010CorpHead\030\001 \001(\0132\n.C"
    "orpsHead\022\022\n\nDesCorpsID\030\002 \001(\r\"i\n\"CMessage"
    "CorpsReplyChallegeResponse\022\034\n\010CorpHead\030\001"
    " \001(\0132\n.CorpsHead\022\024\n\014DesCorpsName\030\002 \001(\t\022\017"
    "\n\007RtnCode\030\003 \001(\r\"E\n%CMessageCorpsQueryCha"
    "llegeListRequest\022\034\n\010CorpHead\030\001 \001(\0132\n.Cor"
    "psHead\"l\n&CMessageCorpsQueryChallegeList"
    "Response\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\023"
    "\n\013CorpsIDList\030\002 \003(\r\022\017\n\007RtnCode\030\003 \001(\r\"U\n\n"
    "PBChallege\022\017\n\007CorpsID\030\001 \001(\r\022\021\n\tCorpsName"
    "\030\002 \001(\t\022\020\n\010WinTimes\030\003 \001(\r\022\021\n\tLostTimes\030\004 "
    "\001(\r\"H\n(CMessageCorpsQueryRecChallegeList"
    "Request\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\"\303\001"
    "\n)CMessageCorpsQueryRecChallegeListRespo"
    "nse\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\020\n\010Roo"
    "mName\030\002 \001(\t\022\r\n\005Money\030\003 \001(\r\022\020\n\010WinTimes\030\004"
    " \001(\r\022\021\n\tLostTimes\030\005 \001(\r\022!\n\014ChallegeList\030"
    "\006 \003(\0132\013.PBChallege\022\017\n\007RtnCode\030\007 \001(\r\"A\n!C"
    "MessageCorpsQueryRoomListRequest\022\034\n\010Corp"
    "Head\030\001 \001(\0132\n.CorpsHead\"\240\001\n\013PBCorpsRoom\022\017"
    "\n\007CorpsID\030\001 \001(\r\022\021\n\tCorpsName\030\002 \001(\t\022\020\n\010Ro"
    "omName\030\003 \001(\t\022\021\n\tRoomState\030\004 \001(\r\022\024\n\014DesCo"
    "rpsName\030\005 \001(\t\022\020\n\010WinTimes\030\006 \001(\r\022\021\n\tLostT"
    "imes\030\007 \001(\r\022\r\n\005Money\030\010 \001(\r\"s\n\"CMessageCor"
    "psQueryRoomListResponse\022\034\n\010CorpHead\030\001 \001("
    "\0132\n.CorpsHead\022\036\n\010RoomList\030\002 \003(\0132\014.PBCorp"
    "sRoom\022\017\n\007RtnCode\030\003 \001(\r\"a\n CMessageQueryC"
    "orpsWelfareRequest\022\034\n\010CorpHead\030\001 \001(\0132\n.C"
    "orpsHead\022\020\n\010EntityID\030\002 \001(\r\022\r\n\005NpcID\030\003 \001("
    "\r\"v\n!CMessageQueryCorpsWelfareResponse\022\034"
    "\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\017\n\007Errcode\030"
    "\002 \001(\r\022\020\n\010NpcGlory\030\003 \001(\r\022\020\n\010NpcMoney\030\004 \001("
    "\r\"b\n!CMessageObtainCorpsWelfareRequest\022\034"
    "\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\020\n\010EntityID"
    "\030\002 \001(\r\022\r\n\005NpcID\030\003 \001(\r\"w\n\"CMessageObtainC"
    "orpsWelfareResponse\022\034\n\010CorpHead\030\001 \001(\0132\n."
    "CorpsHead\022\017\n\007Errcode\030\002 \001(\r\022\020\n\010NpcGlory\030\003"
    " \001(\r\022\020\n\010NpcMoney\030\004 \001(\r\"P\n\034CMessageGetCor"
    "psMoneyRequest\022\034\n\010CorpHead\030\001 \001(\0132\n.Corps"
    "Head\022\022\n\nCorpsMoney\030\002 \001(\r\"b\n\035CMessageGetC"
    "orpsMoneyResponse\022\034\n\010CorpHead\030\001 \001(\0132\n.Co"
    "rpsHead\022\017\n\007Errcode\030\002 \001(\r\022\022\n\nCorpsMoney\030\003"
    " \001(\r\"X\n#CMessageCorpsAbortBattleCityRequ"
    "est\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\023\n\013Npc"
    "EntityID\030\002 \001(\r\"x\n$CMessageCorpsAbortBatt"
    "leCityResponse\022\034\n\010CorpHead\030\001 \001(\0132\n.Corps"
    "Head\022\017\n\007RtnCode\030\002 \001(\r\022\r\n\005NpcID\030\003 \001(\r\022\022\n\n"
    "RooterName\030\004 \001(\t\"e\n\"CMessageCorpsAbortBa"
    "ttleCityNotice\022\034\n\010CorpHead\030\001 \001(\0132\n.Corps"
    "Head\022\r\n\005NpcID\030\002 \001(\r\022\022\n\nRooterName\030\003 \001(\t\""
    "=\n\035CMessageCorpsCanLevelUPNotify\022\034\n\010Corp"
    "Head\030\001 \001(\0132\n.CorpsHead\"@\n\036CMessageCorpsP"
    "ublishTaskNotify\022\036\n\nNotifyHead\030\001 \001(\0132\n.C"
    "orpsHead\"\313\001\n\037CMessageCorpsBattleResultNo"
    "tice\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\024\n\014Wi"
    "nCorpsName\030\002 \001(\t\022\025\n\rLostCorpsName\030\003 \001(\t\022"
    "\021\n\tWinCampID\030\004 \001(\r\022\r\n\005NpcID\030\005 \001(\r\022\022\n\nBat"
    "tleType\030\006 \001(\r\022\022\n\nWinCorpsID\030\007 \001(\r\022\023\n\013Los"
    "tCorpsID\030\010 \001(\r\"\204\001\n\033CMessageCorpsNpcOwner"
    "Notice\022\014\n\004Type\030\001 \001(\r\022\r\n\005NpcID\030\002 \001(\r\022\021\n\tC"
    "orpsName\030\003 \001(\t\022\017\n\007CorpsID\030\004 \001(\r\022\022\n\nFamil"
    "yName\030\005 \001(\t\022\020\n\010FamilyID\030\006 \001(\r\"\213\001\n\036CMessa"
    "geCorpsNameChangedNotify\022\034\n\010CorpHead\030\001 \001"
    "(\0132\n.CorpsHead\022\021\n\tManagerID\030\002 \001(\r\022\023\n\013Man"
    "agerName\030\003 \001(\t\022\020\n\010MemberID\030\004 \001(\r\022\021\n\tCorp"
    "sName\030\005 \001(\t\"\210\001\n\032CMessageCreateUnionReque"
    "st\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\017\n\007Othe"
    "rID\030\002 \003(\r\022\021\n\tUnionName\030\003 \001(\t\022\023\n\013UnionNot"
    "ice\030\004 \001(\t\022\023\n\013NPCEntityID\030\005 \001(\r\"m\n\033CMessa"
    "geCreateUnionResponse\022\034\n\010CorpHead\030\001 \001(\0132"
    "\n.CorpsHead\022\016\n\006Result\030\002 \001(\r\022\017\n\007OtherID\030\003"
    " \003(\r\022\017\n\007UnionID\030\004 \001(\r\"\243\001\n\031CMessageCreate"
    "UnionNotify\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHea"
    "d\022\016\n\006HeadID\030\002 \001(\r\022\020\n\010HeadName\030\003 \001(\t\022\017\n\007O"
    "therID\030\004 \003(\r\022\021\n\tOtherName\030\005 \003(\t\022\017\n\007Union"
    "ID\030\006 \001(\r\022\021\n\tUnionName\030\007 \001(\t\"m\n\031CMessageA"
    "pplyUnionRequest\022\034\n\010CorpHead\030\001 \001(\0132\n.Cor"
    "psHead\022\021\n\tUnionName\030\002 \001(\t\022\017\n\007UnionID\030\003 \001"
    "(\r\022\016\n\006RoleID\030\004 \001(\r\"^\n\032CMessageApplyUnion"
    "Response\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\017"
    "\n\007Errcode\030\002 \001(\r\022\021\n\tUnionName\030\003 \001(\t\"d\n\036CM"
    "essageUnionMemberApplyNotify\022\034\n\010CorpHead"
    "\030\001 \001(\0132\n.CorpsHead\022$\n\tCorpsInfo\030\002 \001(\0132\021."
    "PBCorpsBasicInfo\"e\n$CMessageReplyUnionMe"
    "mberApplyRequest\022\034\n\010CorpHead\030\001 \001(\0132\n.Cor"
    "psHead\022\016\n\006Result\030\002 \001(\r\022\017\n\007CorpsID\030\003 \001(\r\""
    "w\n%CMessageReplyUnionMemberApplyResponse"
    "\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\017\n\007Errcod"
    "e\030\002 \001(\r\022\016\n\006Result\030\003 \001(\r\022\017\n\007CorpsID\030\004 \001(\r"
    "\"v\n\036CMessageApplyUnionResultNotify\022\034\n\010Co"
    "rpHead\030\001 \001(\0132\n.CorpsHead\022\022\n\nResultCode\030\002"
    " \001(\r\022\017\n\007UnionID\030\003 \001(\r\022\021\n\tUnionName\030\004 \001(\t"
    "\"e\n CMessageInviteUnionMemberRequest\022\034\n\010"
    "CorpHead\030\001 \001(\0132\n.CorpsHead\022\021\n\tCorpsName\030"
    "\002 \001(\t\022\020\n\010MemberID\030\003 \001(\r\"e\n!CMessageInvit"
    "eUnionMemberResponse\022\034\n\010CorpHead\030\001 \001(\0132\n"
    ".CorpsHead\022\017\n\007Errcode\030\002 \001(\r\022\021\n\tCorpsName"
    "\030\003 \001(\t\"\211\001\n\031CMessageUnionInviteNotify\022\034\n\010"
    "CorpHead\030\001 \001(\0132\n.CorpsHead\022\024\n\014InvitingNa"
    "me\030\002 \001(\t\022\022\n\nInvitingID\030\003 \001(\r\022$\n\tUnionInf"
    "o\030\004 \001(\0132\021.PBUnionBasicInfo\"t\n\037CMessageRe"
    "plyUnionInviteRequest\022\034\n\010CorpHead\030\001 \001(\0132"
    "\n.CorpsHead\022\016\n\006Result\030\002 \001(\r\022\017\n\007UnionID\030\003"
    " \001(\r\022\022\n\nInvitingID\030\004 \001(\r\"\205\001\n CMessageRep"
    "lyUnionInviteResponse\022\034\n\010CorpHead\030\001 \001(\0132"
    "\n.CorpsHead\022\017\n\007Errcode\030\002 \001(\r\022\016\n\006Result\030\003"
    " \001(\r\022\021\n\tUnionName\030\004 \001(\t\022\017\n\007UnionID\030\005 \001(\r"
    "\"b\n\037CMessageUnionInviteResultNotify\022\034\n\010C"
    "orpHead\030\001 \001(\0132\n.CorpsHead\022\016\n\006Result\030\002 \001("
    "\r\022\021\n\tCorpsName\030\003 \001(\t\"\206\001\n\034CMessageCorpsJo"
    "inUnionNotify\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsH"
    "ead\022$\n\tCorpsInfo\030\002 \001(\0132\021.PBCorpsBasicInf"
    "o\022\017\n\007UnionID\030\003 \001(\r\022\021\n\tUnionName\030\004 \001(\t\"O\n"
    "\036CMessageCorpsLeaveUnionRequest\022\034\n\010CorpH"
    "ead\030\001 \001(\0132\n.CorpsHead\022\017\n\007Msgcode\030\002 \001(\r\"P"
    "\n\037CMessageCorpsLeaveUnionResponse\022\034\n\010Cor"
    "pHead\030\001 \001(\0132\n.CorpsHead\022\017\n\007Errcode\030\002 \001(\r"
    "\"a\n\035CMessageCorpsLeaveUnionNotify\022\034\n\010Cor"
    "pHead\030\001 \001(\0132\n.CorpsHead\022\017\n\007CorpsID\030\002 \001(\r"
    "\022\021\n\tCorpsName\030\003 \001(\t\"I\n\030CMessageKickCorps"
    "Request\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\017\n"
    "\007CorpsID\030\002 \001(\r\"n\n\031CMessageKickCorpsRespo"
    "nse\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\017\n\007Err"
    "code\030\002 \001(\r\022\021\n\tCorpsName\030\003 \001(\t\022\017\n\007CorpsID"
    "\030\004 \001(\r\"[\n\027CMessageKickCorpsNotify\022\034\n\010Cor"
    "pHead\030\001 \001(\0132\n.CorpsHead\022\017\n\007CorpsID\030\002 \001(\r"
    "\022\021\n\tCorpsName\030\003 \001(\t\"\223\001\n\030CMessageMakeUnio"
    "nRequest\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\016"
    "\n\006OpType\030\002 \001(\r\022\021\n\tUnionName\030\003 \001(\t\022\023\n\013Uni"
    "onNotice\030\004 \001(\t\022\017\n\007CorpsID\030\005 \001(\r\022\020\n\010Targe"
    "tID\030\006 \001(\r\"Z\n\031CMessageMakeUnionResponse\022\034"
    "\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\017\n\007Errcode\030"
    "\002 \001(\r\022\016\n\006OpType\030\003 \001(\r\"\276\001\n\027CMessageMakeUn"
    "ionNotify\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022"
    "\016\n\006OpType\030\002 \001(\r\022\021\n\tUnionName\030\003 \001(\t\022\023\n\013Un"
    "ionNotice\030\004 \001(\t\022\017\n\007CorpsID\030\005 \003(\r\022\021\n\tCorp"
    "sName\030\006 \003(\t\022\025\n\rHeadCorpsName\030\007 \001(\t\022\022\n\nHe"
    "adCharID\030\010 \001(\r\"L\n\033CMessageGetUnionInfoRe"
    "quest\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\017\n\007U"
    "nionID\030\002 \001(\r\"\301\001\n\034CMessageGetUnionInfoRes"
    "ponse\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\017\n\007E"
    "rrcode\030\002 \001(\r\022$\n\tUnionInfo\030\003 \001(\0132\021.PBUnio"
    "nBasicInfo\022$\n\tCorpsInfo\030\004 \003(\0132\021.PBCorpsB"
    "asicInfo\022&\n\nBattleInfo\030\005 \001(\0132\022.PBCorpsBa"
    "ttleList\"P\n\033CMessageDismissUnionRequest\022"
    "\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\023\n\013NPCEnti"
    "tyID\030\002 \001(\r\"M\n\034CMessageDismissUnionRespon"
    "se\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\017\n\007Errc"
    "ode\030\002 \001(\r\":\n\032CMessageDismissUnionNotify\022"
    "\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\"=\n\035CMessag"
    "eUnionApplyListRequest\022\034\n\010CorpHead\030\001 \001(\013"
    "2\n.CorpsHead\"u\n\036CMessageUnionApplyListRe"
    "sponse\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\017\n\007"
    "Errcode\030\002 \001(\r\022$\n\tCorpsInfo\030\003 \003(\0132\021.PBCor"
    "psBasicInfo\";\n\033CMessageAllUnionListReque"
    "st\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\"s\n\034CMes"
    "sageAllUnionListResponse\022\034\n\010CorpHead\030\001 \001"
    "(\0132\n.CorpsHead\022\017\n\007Errcode\030\002 \001(\r\022$\n\tUnion"
    "Info\030\003 \003(\0132\021.PBUnionBasicInfo\"B\n\"CMessag"
    "eCorpsGetOtherMemberRequest\022\034\n\010CorpHead\030"
    "\001 \001(\0132\n.CorpsHead\"u\n\016PBBattleMember\022\016\n\006C"
    "harID\030\001 \001(\r\022\014\n\004Name\030\002 \001(\t\022\r\n\005Level\030\003 \001(\r"
    "\022\016\n\006Metier\030\004 \001(\r\022\021\n\tCorpsName\030\005 \001(\t\022\023\n\013I"
    "sJoinUnion\030\006 \001(\r\"h\n#CMessageCorpsGetOthe"
    "rMemberResponse\022\034\n\010CorpHead\030\001 \001(\0132\n.Corp"
    "sHead\022#\n\nMemberList\030\002 \003(\0132\017.PBBattleMemb"
    "er\"B\n\"CMessageUnionJoinBattleListRequest"
    "\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\"y\n#CMessa"
    "geUnionJoinBattleListResponse\022\034\n\010CorpHea"
    "d\030\001 \001(\0132\n.CorpsHead\022\017\n\007RtnCode\030\002 \001(\r\022#\n\n"
    "MemberList\030\003 \003(\0132\017.PBBattleMember\"O\n\035CMe"
    "ssageCorpsGetAllMapRequest\022\034\n\010CorpHead\030\001"
    " \001(\0132\n.CorpsHead\022\020\n\010ServerID\030\002 \001(\r\"\260\001\n\nP"
    "BMapOwner\022\r\n\005MapID\030\001 \001(\r\022\017\n\007CorpsID\030\002 \001("
    "\r\022\021\n\tCorpsName\030\003 \001(\t\022\r\n\005Color\030\004 \001(\r\022\022\n\nR"
    "ooterName\030\005 \001(\t\022\022\n\nCorpsPower\030\006 \001(\r\022\021\n\tU"
    "nionName\030\007 \001(\t\022\022\n\nUnionPower\030\010 \001(\r\022\021\n\tPe"
    "opleNum\030\t \001(\r\"n\n\036CMessageCorpsGetAllMapR"
    "esponse\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\034\n"
    "\007MapList\030\002 \003(\0132\013.PBMapOwner\022\020\n\010ServerID\030"
    "\003 \001(\r\"a\n!CMessageCorpsAppointPrinceReque"
    "st\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\017\n\007Corp"
    "sID\030\002 \001(\r\022\r\n\005MapID\030\003 \001(\r\"s\n\"CMessageCors"
    "pAppointPrinceResponse\022\034\n\010CorpHead\030\001 \001(\013"
    "2\n.CorpsHead\022\017\n\007RtnCode\030\002 \001(\r\022\017\n\007CorpsID"
    "\030\003 \001(\r\022\r\n\005MapID\030\004 \001(\r\"`\n CMessageCorpsAp"
    "pointPrinceNotice\022\034\n\010CorpHead\030\001 \001(\0132\n.Co"
    "rpsHead\022\017\n\007CorpsID\030\002 \001(\r\022\r\n\005MapID\030\003 \001(\r\""
    "N\n\037CMessageCorpsMoveCapitalRequest\022\034\n\010Co"
    "rpHead\030\001 \001(\0132\n.CorpsHead\022\r\n\005MapID\030\002 \001(\r\""
    "a\n!CMesssageCorpsMoveCapitalResponse\022\034\n\010"
    "CorpHead\030\001 \001(\0132\n.CorpsHead\022\017\n\007RtnCode\030\002 "
    "\001(\r\022\r\n\005MapID\030\003 \001(\r\"N\n\037CMessageCorpsSelec"
    "tColorRequest\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsH"
    "ead\022\r\n\005Color\030\002 \001(\r\"`\n CMessageCorpsSelec"
    "tColorResponse\022\034\n\010CorpHead\030\001 \001(\0132\n.Corps"
    "Head\022\017\n\007RtnCode\030\002 \001(\r\022\r\n\005Color\030\003 \001(\r\"C\n\r"
    "CorpsGoodItem\022\016\n\006ItemID\030\001 \001(\r\022\017\n\007ItemNum"
    "\030\002 \001(\r\022\021\n\tComposeID\030\003 \001(\r\"u\n CMessageGet"
    "CorpsGoodsListRequest\022\034\n\010CorpHead\030\001 \001(\0132"
    "\n.CorpsHead\022\017\n\007CorpsID\030\002 \001(\r\022\020\n\010EntityID"
    "\030\003 \001(\r\022\020\n\010NpcTmpID\030\004 \001(\r\"\207\001\n!CMessageGet"
    "CorpsGoodsListResponse\022\034\n\010CorpHead\030\001 \001(\013"
    "2\n.CorpsHead\022\017\n\007Errcode\030\002 \001(\r\022!\n\tGoodsLi"
    "st\030\003 \003(\0132\016.CorpsGoodItem\022\020\n\010NpcTmpID\030\004 \001"
    "(\r\"}\n(CMessageGetCorpsExchangeGoodsListR"
    "equest\022\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\017\n\007"
    "CorpsID\030\002 \001(\r\022\020\n\010EntityID\030\003 \001(\r\022\020\n\010NpcTm"
    "pID\030\004 \001(\r\"\217\001\n)CMessageGetCorpsExchangeGo"
    "odsListResponse\022\034\n\010CorpHead\030\001 \001(\0132\n.Corp"
    "sHead\022\017\n\007Errcode\030\002 \001(\r\022!\n\tGoodsList\030\003 \003("
    "\0132\016.CorpsGoodItem\022\020\n\010NpcTmpID\030\004 \001(\r\"w\n\036C"
    "MessageChangeUnionNameRequest\022\034\n\010CorpHea"
    "d\030\001 \001(\0132\n.CorpsHead\022\021\n\tUnionName\030\002 \001(\t\022\023"
    "\n\013UnionNotice\030\003 \001(\t\022\017\n\007CorpsID\030\004 \001(\r\"O\n\037"
    "CMessageChangeUnionNameResponse\022\034\n\010CorpH"
    "ead\030\001 \001(\0132\n.CorpsHead\022\016\n\006Result\030\002 \001(\r\"e\n"
    "\035CMessageChangeUnionNameNotify\022\034\n\010CorpHe"
    "ad\030\001 \001(\0132\n.CorpsHead\022\021\n\tUnionName\030\002 \001(\t\022"
    "\023\n\013UnionNotice\030\003 \001(\t\"Y\n\"CMessageChangeCo"
    "rpsGoodsListNotify\022!\n\tGoodsList\030\001 \003(\0132\016."
    "CorpsGoodItem\022\020\n\010NpcTmpID\030\002 \001(\r\"a\n*CMess"
    "ageChangeCorpsExchangeGoodsListNotify\022!\n"
    "\tGoodsList\030\001 \003(\0132\016.CorpsGoodItem\022\020\n\010NpcT"
    "mpID\030\002 \001(\r\"m\n CMessageUseCorpsLeagueItem"
    "Notify\022!\n\tGoodsList\030\001 \003(\0132\016.CorpsGoodIte"
    "m\022\021\n\tManagerID\030\002 \001(\r\022\023\n\013ManagerName\030\003 \001("
    "\t\"N\n\037CMessageCorpsLoginBattleRequest\022\034\n\010"
    "CorpHead\030\001 \001(\0132\n.CorpsHead\022\r\n\005NpcID\030\002 \001("
    "\r\"Q\n CMessageCorpsLoginBattleResponse\022\034\n"
    "\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\017\n\007RtnCode\030\002"
    " \001(\r\"N\n\036CMessageSummonCorpsBossRequest\022\034"
    "\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\016\n\006BossID\030\002"
    " \001(\r\"R\n\037CMessageSummonCorpsBossResponse\022"
    "\034\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\021\n\tErrorCo"
    "de\030\002 \001(\r\"k\n#CMessageCorpsBossRepetionOpe"
    "nNotify\022\016\n\006BossID\030\001 \001(\r\022\016\n\006RoleID\030\002 \001(\r\022"
    "\020\n\010RoleName\030\003 \001(\t\022\022\n\nBossCDCool\030\004 \001(\r\"X\n"
    "%CMessageIntoCorpsBossRepetionResponse\022\034"
    "\n\010CorpHead\030\001 \001(\0132\n.CorpsHead\022\021\n\tErrorCod"
    "e\030\002 \001(\r\"$\n\"CMessageCorpsBossRepetionEndN"
    "otify*\3460\n\016CorpsMessageID\022\036\n\031ID_C2S_REQUE"
    "ST_CREATCORPS\020\200p\022\037\n\032ID_S2C_RESPONSE_CREA"
    "TCORPS\020\201p\022\036\n\031ID_C2S_REQUEST_APPLYCORPS\020\202"
    "p\022\037\n\032ID_S2C_RESPONSE_APPLYCORPS\020\203p\022#\n\036ID"
    "_S2C_NOTIFY_CORPSMEMBERAPPLY\020\204p\022)\n$ID_C2"
    "S_REQUEST_REPLYCORPSMEMBERAPPLY\020\205p\022*\n%ID"
    "_S2C_RESPONSE_REPLYCORPSMEMBERAPPLY\020\206p\022#"
    "\n\036ID_S2C_NOTIFY_APPLYCORPSRESULT\020\207p\022%\n I"
    "D_C2S_REQUEST_INVITECORPSMEMBER\020\210p\022&\n!ID"
    "_S2C_RESPONSE_INVITECORPSMEMBER\020\211p\022\036\n\031ID"
    "_S2C_NOTIFY_CORPSINVITE\020\212p\022$\n\037ID_C2S_REQ"
    "UEST_REPLYCORPSINVITE\020\213p\022%\n ID_S2C_RESPO"
    "NSE_REPLYCORPSINVITE\020\214p\022$\n\037ID_S2C_NOTIFY"
    "_CORPSINVITERESULT\020\215p\022\"\n\035ID_S2C_NOTIFY_F"
    "AMILYJOINCORPS\020\216p\022\036\n\031ID_C2S_REQUEST_LEAV"
    "ECORPS\020\217p\022\037\n\032ID_S2C_RESPONSE_LEAVECORPS\020"
    "\220p\022\037\n\032ID_S2C_NOTIFY_FAMILYLEAVED\020\221p\022\036\n\031I"
    "D_C2S_REQUEST_KICKFAMILY\020\222p\022\037\n\032ID_S2C_RE"
    "SPONSE_KICKFAMILY\020\223p\022\037\n\032ID_S2C_NOTIFY_FA"
    "MILYKICKED\020\224p\022&\n!ID_C2S_REQUEST_GETCORPS"
    "FAMILYINFO\020\225p\022\'\n\"ID_S2C_RESPONSE_GETCORP"
    "SFAMILYINFO\020\226p\022(\n#ID_C2S_REQUEST_GETCORP"
    "SPROPERTYINFO\020\227p\022)\n$ID_S2C_RESPONSE_GETC"
    "ORPSPROPERTYINFO\020\230p\022(\n#ID_C2S_REQUEST_GE"
    "TCOPRSFAMILYMEMBER\020\231p\022(\n#ID_S2C_RESPONE_"
    "GETCOPRSFAMILYMEMBER\020\232p\022\'\n\"ID_C2S_REQUES"
    "T_CHANGECORPSBULLETIN\020\233p\022(\n#ID_S2C_RESPO"
    "NSE_CHANGECORPSBULLETIN\020\234p\022&\n!ID_S2C_NOT"
    "IFY_CHANGECORPSBULLETIN\020\235p\022%\n ID_C2S_REQ"
    "UEST_CHANGECORPSHEADER\020\236p\022&\n!ID_S2C_RESP"
    "ONSE_CHANGECORPSHEADER\020\237p\022$\n\037ID_S2C_NOTI"
    "FY_CHANGECORPSHEADER\020\240p\022%\n ID_C2S_REQUES"
    "T_GETCORPSAPPLYLIST\020\241p\022&\n!ID_S2C_RESPONS"
    "E_GETCORPSAPPLYLIST\020\242p\022 \n\033ID_C2S_REQUEST"
    "_DISBANDCORPS\020\243p\022!\n\034ID_S2C_RESPONSE_DISB"
    "ANDCORPS\020\244p\022\037\n\032ID_S2C_NOTIFY_DISBANDCORP"
    "S\020\245p\022&\n!ID_C2S_REQUEST_CANCELCORPSDISBAN"
    "D\020\246p\022\'\n\"ID_S2C_RESPONSE_CANCELCORPSDISBA"
    "ND\020\247p\022#\n\036ID_C2S_REQUEST_CLEARCORPSAPPLY\020"
    "\250p\022$\n\037ID_S2C_RESPONSE_CLEARCORPSAPPLY\020\251p"
    "\022$\n\037ID_C2S_REQUEST_REFRESHCORPSINFO\020\252p\022%"
    "\n ID_S2C_RESPONSE_REFRESHCORPSINFO\020\253p\022 \n"
    "\033ID_C2S_REQUEST_GETCOPRSLIST\020\254p\022!\n\034ID_S2"
    "C_RESPONSE_GETCORPSLIST\020\255p\022\035\n\030ID_C2S_REQ"
    "UEST_BATTLEBID\020\256p\022\036\n\031ID_S2C_RESPONSE_BAT"
    "TLEBID\020\257p\022 \n\033ID_C2S_REQUEST_QUERYBIDRANK"
    "\020\260p\022!\n\034ID_S2C_RESPONSE_QUERYBIDRANK\020\261p\022 "
    "\n\033ID_C2S_REQUEST_SELECTFAMILY\020\262p\022!\n\034ID_S"
    "2C_RESPONSE_SELECTFAMILY\020\263p\022 \n\033ID_C2S_RE"
    "QUEST_SETCORPSPOST\020\264p\022!\n\034ID_S2C_RESPONSE"
    "_SETCORPSPOST\020\265p\022 \n\033ID_C2S_REQUEST_LEVEL"
    "UPCORPS\020\266p\022!\n\034ID_S2C_RESPONSE_LEVELUPCOR"
    "PS\020\267p\022(\n#ID_C2S_REQUEST_CONTRIBUTECORPSM"
    "ONEY\020\270p\022)\n$ID_S2C_RESPONSE_CONTRIBUTECOR"
    "PSMONEY\020\271p\022)\n$ID_C2S_REQUEST_FAMILYCONTR"
    "IBUTEMONEY\020\272p\022*\n%ID_S2C_RESPONSE_FAMILYC"
    "ONTRIBUTEMONEY\020\273p\022!\n\034ID_C2S_REQUEST_SETM"
    "EMBERNAME\020\274p\022\"\n\035ID_S2C_RESPONSE_SETMEMBE"
    "RNAME\020\275p\022\037\n\032ID_S2C_NOTIFY_SETCORPSPOST\020\276"
    "p\022\037\n\032ID_S2C_NOTIFY_CORPSLEVELUP\020\277p\022&\n!ID"
    "_S2C_NOTIFY_CORPSPVPSTARLEVELUP\020\300p\022$\n\037ID"
    "_S2C_NOTIFY_CORPSBATTLERIGHTS\020\301p\022\"\n\035ID_S"
    "2C_NOTIFY_RECBATTLERIGHTS\020\302p\022 \n\033ID_C2S_R"
    "EQUEST_SELECTBATTLE\020\303p\022!\n\034ID_S2C_RESPONS"
    "E_SELECTBATTLE\020\304p\022%\n ID_S2C_NOTIFY_MEMBE"
    "RBATTLERIGHTS\020\305p\022$\n\037ID_S2C_NOTIFY_CORPSM"
    "ONEYCHANGED\020\306p\022$\n\037ID_S2C_NOTIFY_CORPSGLO"
    "RYCHANGED\020\307p\022)\n$ID_S2C_NOTIFY_CORPSCONTR"
    "IBUTECHANGED\020\310p\022#\n\036ID_C2S_REQUEST_MENDSH"
    "ENGHUOTAI\020\311p\022 \n\033ID_S2C_NOTIFY_CORPSPROPE"
    "RTY\020\312p\022\034\n\027ID_C2S_REQUEST_CHALLEGE\020\313p\022\035\n\030"
    "ID_S2C_RESPONSE_CHALLEGE\020\314p\022\033\n\026ID_S2C_NO"
    "TIFY_CHALLEGE\020\315p\022!\n\034ID_C2S_REQUEST_ROOMO"
    "PERATION\020\316p\022\"\n\035ID_S2C_RESPONSE_ROOMOPERA"
    "TION\020\317p\022\027\n\022ID_S2C_NOTIFY_ROOM\020\320p\022!\n\034ID_C"
    "2S_REQUEST_REPLYCHALLEGE\020\321p\022\"\n\035ID_S2C_RE"
    "SPONSE_REPLYCHALLEGE\020\322p\022\035\n\030ID_C2S_REQUES"
    "T_QUERYROOM\020\323p\022\036\n\031ID_S2C_RESPONSE_QUERYR"
    "OOM\020\324p\022%\n ID_C2S_REQUEST_QUERYCHALLEGELI"
    "ST\020\325p\022&\n!ID_S2C_RESPONSE_QUERYCHALLEGELI"
    "ST\020\326p\022$\n\037ID_C2S_REQUEST_QUERYRECCHALLEGE"
    "\020\327p\022%\n ID_S2C_RESPONSE_QUERYRECCHALLEGE\020"
    "\330p\022%\n ID_C2S_REQUEST_QUERYCORPSWELFARE\020\331"
    "p\022&\n!ID_S2C_RESPONSE_QUERYCORPSWELFARE\020\332"
    "p\022&\n!ID_C2S_REQUEST_OBTAINCORPSWELFARE\020\333"
    "p\022\'\n\"ID_S2C_RESPONSE_OBTAINCORPSWELFARE\020"
    "\334p\022!\n\034ID_C2S_REQUEST_GETCORPSMONEY\020\335p\022\"\n"
    "\035ID_S2C_RESPONSE_GETCORPSMONEY\020\336p\022#\n\036ID_"
    "C2S_REQUEST_ABORTBATTLECITY\020\337p\022$\n\037ID_S2C"
    "_RESPONSE_ABORTBATTLECITY\020\340p\022\"\n\035ID_S2C_N"
    "OTIFY_ABORTBATTLECITY\020\341p\022\"\n\035ID_S2C_NOTIF"
    "Y_CORPSCANLEVELUP\020\342p\022$\n\037ID_S2C_NOTIFY_CO"
    "RPSBATTLERESULT\020\343p\022!\n\034ID_S2C_NOTIFY_NPCO"
    "WNERUPDATE\020\344p\022#\n\036ID_S2C_NOTIFY_CORPSNAME"
    "CHANGED\020\345p\022\037\n\032ID_C2S_REQUEST_CREATEUNION"
    "\020\356p\022 \n\033ID_S2C_RESPONSE_CREATEUNION\020\357p\022\036\n"
    "\031ID_S2C_NOTIFY_CREATEUNION\020\360p\022\036\n\031ID_C2S_"
    "REQUEST_APPLYUNION\020\361p\022\037\n\032ID_S2C_RESPONSE"
    "_APPLYUNION\020\362p\022#\n\036ID_S2C_NOTIFY_UNIONMEM"
    "BERAPPLY\020\363p\022)\n$ID_C2S_REQUEST_REPLYUNION"
    "MEMBERAPPLY\020\364p\022*\n%ID_S2C_RESPONSE_REPLYU"
    "NIONMEMBERAPPLY\020\365p\022#\n\036ID_S2C_NOTIFY_APPL"
    "YUNIONRESULT\020\366p\022%\n ID_C2S_REQUEST_INVITE"
    "UNIONMEMBER\020\367p\022&\n!ID_S2C_RESPONSE_INVITE"
    "UNIONMEMBER\020\370p\022\036\n\031ID_S2C_NOTIFY_UNIONINV"
    "ITE\020\371p\022$\n\037ID_C2S_REQUEST_REPLYUNIONINVIT"
    "E\020\372p\022%\n ID_S2C_RESPONSE_REPLYUNIONINVITE"
    "\020\373p\022$\n\037ID_S2C_NOTIFY_UNIONINVITERESULT\020\374"
    "p\022!\n\034ID_S2C_NOTIFY_CORPSJOINUNION\020\375p\022\036\n\031"
    "ID_C2S_REQUEST_LEAVEUNION\020\376p\022\037\n\032ID_S2C_R"
    "ESPONSE_LEAVEUNION\020\377p\022\036\n\031ID_S2C_NOTIFY_C"
    "ORPSLEAVED\020\200q\022\035\n\030ID_C2S_REQUEST_KICKCORP"
    "S\020\201q\022\036\n\031ID_S2C_RESPONSE_KICKCORPS\020\202q\022\036\n\031"
    "ID_S2C_NOTIFY_CORPSKICKED\020\203q\022\035\n\030ID_C2S_R"
    "EQUEST_MAKEUNION\020\204q\022\036\n\031ID_S2C_RESPONSE_M"
    "AKEUNION\020\205q\022\034\n\027ID_S2C_NOTIFY_MAKEUNION\020\206"
    "q\022\035\n\030ID_C2S_REQUEST_UNIONINFO\020\207q\022\036\n\031ID_S"
    "2C_RESPONSE_UNIONINFO\020\210q\022 \n\033ID_C2S_REQUE"
    "ST_DISMISSUNION\020\211q\022!\n\034ID_S2C_RESPONSE_DI"
    "SMISSUNION\020\212q\022\037\n\032ID_S2C_NOTIFY_DISMISSUN"
    "ION\020\213q\022\"\n\035ID_C2S_REQUEST_UNIONAPPLYLIST\020"
    "\214q\022#\n\036ID_S2C_RESPONSE_UNIONAPPLYLIST\020\215q\022"
    " \n\033ID_C2S_REQUEST_ALLUNIONLIST\020\216q\022!\n\034ID_"
    "S2C_RESPONSE_ALLUNIONLIST\020\217q\022\"\n\035ID_C2S_R"
    "EQUEST_GETOTHERMEMBER\020\220q\022#\n\036ID_S2C_RESPO"
    "NSE_GETOTHERMEMBER\020\221q\022\037\n\032ID_C2S_REQUEST_"
    "UNIONSUBMIT\020\222q\022 \n\033ID_S2C_RESPONSE_UNIONS"
    "UBMIT\020\223q\022\035\n\030ID_C2S_REQUEST_GETALLMAP\020\224q\022"
    "\036\n\031ID_S2C_RESPONSE_GETALLMAP\020\225q\022!\n\034ID_C2"
    "S_REQUEST_APPOINTPRINCE\020\226q\022\"\n\035ID_S2C_RES"
    "PONSE_APPOINTPRINCE\020\227q\022 \n\033ID_S2C_NOTIFY_"
    "APPOINTPRINCE\020\230q\022\037\n\032ID_C2S_REQUEST_MOVEC"
    "APITAL\020\231q\022 \n\033ID_S2C_RESPONSE_MOVECAPITAL"
    "\020\232q\022\037\n\032ID_C2S_REQUEST_SELECTCOLOR\020\233q\022 \n\033"
    "ID_S2C_RESPONSE_SELECTCOLOR\020\234q\022%\n ID_C2S"
    "_REQUEST_GETCORPSGOODSLIST\020\237q\022&\n!ID_S2C_"
    "RESPONSE_GETCORPSGOODSLIST\020\240q\022-\n(ID_C2S_"
    "REQUEST_GETCORPSEXCHANGEGOODSLIST\020\241q\022.\n)"
    "ID_S2C_RESPONSE_GETCORPSEXCHANGEGOODSLIS"
    "T\020\242q\022\'\n\"ID_S2C_NOTIFY_CHANGECORPSGOODSLI"
    "ST\020\243q\022/\n*ID_S2C_NOTIFY_CHANGEXCHANGEECOR"
    "PSGOODSLIST\020\244q\022#\n\036ID_C2S_REQUEST_CHANGEU"
    "NIONNAME\020\245q\022$\n\037ID_S2C_RESPONSE_CHANGEUNI"
    "ONNAME\020\246q\022\"\n\035ID_S2C_NOTIFY_CHANGEUNIONNA"
    "ME\020\247q\022%\n ID_S2C_NOTIFY_USECORPSLEAGUEITE"
    "M\020\250q\022\037\n\032ID_C2S_REQUEST_LOGINBATTLE\020\251q\022 \n"
    "\033ID_S2C_RESPONSE_LOGINBATTLE\020\252q\022)\n$ID_S2"
    "C_CORPSBOSSTIMES_CHANGED_NOTIFY\020\253q\022/\n*ID"
    "_S2C_CORPSBOSSREFINEVALUE_CHANGED_NOTIFY"
    "\020\254q\022$\n\037ID_C2S_SUMMON_CORPSBOSS_REQUEST\020\255"
    "q\022%\n ID_S2C_SUMMON_CORPSBOSS_RESPONSE\020\256q"
    "\022)\n$ID_S2C_CORPSBOSSREPETION_OPEN_NOTIFY"
    "\020\257q\022,\n\'ID_S2C_INTO_CORPSBOSS_REPETION_RE"
    "SPONSE\020\260q\022(\n#ID_S2C_CORPSBOSSREPETION_EN"
    "D_NOTIFY\020\261q\022,\n\'ID_S2C_NOTIFY_CORPSCOLLEC"
    "TACTIVECHANGED\020\262q\022#\n\036ID_S2C_NOTIFY_CORPS"
    "PUBLISHTASK\020\263qB\002H\001", 25418);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "corpsmessage_pb.hxx", &protobuf_RegisterTypes);
  #endif
  CorpsHead::default_instance_ = new CorpsHead();
  CMessageCreatCorpsRequest::default_instance_ = new CMessageCreatCorpsRequest();
  CMessageCreatCorpsResponse::default_instance_ = new CMessageCreatCorpsResponse();
  CMessageApplyCorpsRequest::default_instance_ = new CMessageApplyCorpsRequest();
  CMessageApplyCorpsResponse::default_instance_ = new CMessageApplyCorpsResponse();
  CMessageCorpsMemberApplyNotify::default_instance_ = new CMessageCorpsMemberApplyNotify();
  CMessageReplyCorpsMemberApplyRequest::default_instance_ = new CMessageReplyCorpsMemberApplyRequest();
  CMessageReplyCorpsMemberApplyResponse::default_instance_ = new CMessageReplyCorpsMemberApplyResponse();
  CMessageApplyCorpsResultNotify::default_instance_ = new CMessageApplyCorpsResultNotify();
  CMessageInviteCorpsMemberRequest::default_instance_ = new CMessageInviteCorpsMemberRequest();
  CMessageInviteCorpsMemberResponse::default_instance_ = new CMessageInviteCorpsMemberResponse();
  CMessageCorpsInviteNotify::default_instance_ = new CMessageCorpsInviteNotify();
  CMessageReplyCorpsInviteRequest::default_instance_ = new CMessageReplyCorpsInviteRequest();
  CMessageReplyCorpsInviteResponse::default_instance_ = new CMessageReplyCorpsInviteResponse();
  CMessageCorpsInviteResultNotify::default_instance_ = new CMessageCorpsInviteResultNotify();
  CMessageFamilyJoinCorpsNotify::default_instance_ = new CMessageFamilyJoinCorpsNotify();
  CMessageFamilyLeaveCorpsRequest::default_instance_ = new CMessageFamilyLeaveCorpsRequest();
  CMessageFamilyLeaveCorpsResponse::default_instance_ = new CMessageFamilyLeaveCorpsResponse();
  CMessageFamilyLeaveCorpsNotify::default_instance_ = new CMessageFamilyLeaveCorpsNotify();
  CMessageKickFamilyRequest::default_instance_ = new CMessageKickFamilyRequest();
  CMessageKickFamilyResponse::default_instance_ = new CMessageKickFamilyResponse();
  CMessageKickFamilyNotify::default_instance_ = new CMessageKickFamilyNotify();
  CMessageGetCorpsFamilyInfoRequest::default_instance_ = new CMessageGetCorpsFamilyInfoRequest();
  CMessageGetCorpsFamilyInfoResponse::default_instance_ = new CMessageGetCorpsFamilyInfoResponse();
  CMessageGetCorpsPropertyRequest::default_instance_ = new CMessageGetCorpsPropertyRequest();
  CMessageGetCorpsPropertyResponse::default_instance_ = new CMessageGetCorpsPropertyResponse();
  CMessageGetCorpsFamilyMemberRequest::default_instance_ = new CMessageGetCorpsFamilyMemberRequest();
  CMessageGetCorpsFamilyMemberResponse::default_instance_ = new CMessageGetCorpsFamilyMemberResponse();
  CMessageChangeCorpsBulletinRequest::default_instance_ = new CMessageChangeCorpsBulletinRequest();
  CMessageChangeCorpsBulletinResponse::default_instance_ = new CMessageChangeCorpsBulletinResponse();
  CMessageChangeCorpsBulletinNotify::default_instance_ = new CMessageChangeCorpsBulletinNotify();
  CMessageChangeCorpsHeaderRequest::default_instance_ = new CMessageChangeCorpsHeaderRequest();
  CMessageChangeCorpsHeaderResponse::default_instance_ = new CMessageChangeCorpsHeaderResponse();
  CMessageChangeCorpsHeaderNotify::default_instance_ = new CMessageChangeCorpsHeaderNotify();
  CMessageGetCorpsApplyListRequest::default_instance_ = new CMessageGetCorpsApplyListRequest();
  CMessageGetCorpsApplyListResponse::default_instance_ = new CMessageGetCorpsApplyListResponse();
  CMessageDisbandCorpsRequest::default_instance_ = new CMessageDisbandCorpsRequest();
  CMessageDisbandCorpsResponse::default_instance_ = new CMessageDisbandCorpsResponse();
  CMessageDisbandCorpsNotify::default_instance_ = new CMessageDisbandCorpsNotify();
  CMessageCancelCorpsDisbandRequest::default_instance_ = new CMessageCancelCorpsDisbandRequest();
  CMessageCancelCorpsDisbandResponse::default_instance_ = new CMessageCancelCorpsDisbandResponse();
  CMessageClearCorpsApplyRequest::default_instance_ = new CMessageClearCorpsApplyRequest();
  CMessageClearCorpsApplyResponse::default_instance_ = new CMessageClearCorpsApplyResponse();
  CMessageRefreshCorpsInfoRequest::default_instance_ = new CMessageRefreshCorpsInfoRequest();
  CMessageRefreshCorpsInfoResponse::default_instance_ = new CMessageRefreshCorpsInfoResponse();
  CMessageGetCorpsListRequest::default_instance_ = new CMessageGetCorpsListRequest();
  CMessageGetCorpsListResponse::default_instance_ = new CMessageGetCorpsListResponse();
  CMessageSetCorpsPostRequest::default_instance_ = new CMessageSetCorpsPostRequest();
  CMessageSetCorpsPostResponse::default_instance_ = new CMessageSetCorpsPostResponse();
  CMessageLevelUPCorpsRequest::default_instance_ = new CMessageLevelUPCorpsRequest();
  CMessageLevelUPCorpsResponse::default_instance_ = new CMessageLevelUPCorpsResponse();
  CMessageContributeCorpsMoneyRequest::default_instance_ = new CMessageContributeCorpsMoneyRequest();
  CMessageContributeCorpsMoneyResponse::default_instance_ = new CMessageContributeCorpsMoneyResponse();
  CMessageFamilyContributeMoneyRequest::default_instance_ = new CMessageFamilyContributeMoneyRequest();
  CMessageFamilyContributeMoneyResponse::default_instance_ = new CMessageFamilyContributeMoneyResponse();
  CMessageSetMemberNameRequest::default_instance_ = new CMessageSetMemberNameRequest();
  CMessageSetMemberNameResponse::default_instance_ = new CMessageSetMemberNameResponse();
  CMessageSetCorpsPostNotify::default_instance_ = new CMessageSetCorpsPostNotify();
  CMessageCorpsLevelUPNotify::default_instance_ = new CMessageCorpsLevelUPNotify();
  CMessageCorpsBattleBidRequest::default_instance_ = new CMessageCorpsBattleBidRequest();
  CMessageCorpsBattleBidResponse::default_instance_ = new CMessageCorpsBattleBidResponse();
  CMessageCorpsQueryBidRankRequest::default_instance_ = new CMessageCorpsQueryBidRankRequest();
  PBBidRank::default_instance_ = new PBBidRank();
  CMessageCorpsQueryBidRankResponse::default_instance_ = new CMessageCorpsQueryBidRankResponse();
  CMessageCorpsSelectFamilyBattleRequest::default_instance_ = new CMessageCorpsSelectFamilyBattleRequest();
  CMessageCorpsSelectFamilyBattleResponse::default_instance_ = new CMessageCorpsSelectFamilyBattleResponse();
  CMessageCorpsPvPStarLevelUpNotify::default_instance_ = new CMessageCorpsPvPStarLevelUpNotify();
  CMessageCorpsBattleRightsNotify::default_instance_ = new CMessageCorpsBattleRightsNotify();
  CMessageCorpsRecBattleRightsNotify::default_instance_ = new CMessageCorpsRecBattleRightsNotify();
  CMessageCorpsSelectMemberBattleRequest::default_instance_ = new CMessageCorpsSelectMemberBattleRequest();
  CMessageCorpsSelectMemberBattleResponse::default_instance_ = new CMessageCorpsSelectMemberBattleResponse();
  CMessageCorpsMemberBattleRightsNotify::default_instance_ = new CMessageCorpsMemberBattleRightsNotify();
  CMessageCorpsMoneyChangedNotify::default_instance_ = new CMessageCorpsMoneyChangedNotify();
  CMessageCorpsGloryChangedNotify::default_instance_ = new CMessageCorpsGloryChangedNotify();
  CMessageCorpsContributeChangedNotify::default_instance_ = new CMessageCorpsContributeChangedNotify();
  CMessageCorpsBossTimesChangedNotify::default_instance_ = new CMessageCorpsBossTimesChangedNotify();
  CMessageCorpsBossRefineValueNotify::default_instance_ = new CMessageCorpsBossRefineValueNotify();
  CMessageCorpsCollectActiveChangeNotify::default_instance_ = new CMessageCorpsCollectActiveChangeNotify();
  CMessageMendShengHuoTaiRequest::default_instance_ = new CMessageMendShengHuoTaiRequest();
  CMessageCorpsPropertyNotice::default_instance_ = new CMessageCorpsPropertyNotice();
  CMessageCorpsOperateRoomRequest::default_instance_ = new CMessageCorpsOperateRoomRequest();
  CMessageCorpsOperateRoomResponse::default_instance_ = new CMessageCorpsOperateRoomResponse();
  CMessageCorpsRoomNotice::default_instance_ = new CMessageCorpsRoomNotice();
  CMessageCorpsChallegeRequest::default_instance_ = new CMessageCorpsChallegeRequest();
  CMessageCorpsChallegeResponse::default_instance_ = new CMessageCorpsChallegeResponse();
  CMessageCorpsChallegeNotice::default_instance_ = new CMessageCorpsChallegeNotice();
  CMessageCorpsReplyChallegeRequest::default_instance_ = new CMessageCorpsReplyChallegeRequest();
  CMessageCorpsReplyChallegeResponse::default_instance_ = new CMessageCorpsReplyChallegeResponse();
  CMessageCorpsQueryChallegeListRequest::default_instance_ = new CMessageCorpsQueryChallegeListRequest();
  CMessageCorpsQueryChallegeListResponse::default_instance_ = new CMessageCorpsQueryChallegeListResponse();
  PBChallege::default_instance_ = new PBChallege();
  CMessageCorpsQueryRecChallegeListRequest::default_instance_ = new CMessageCorpsQueryRecChallegeListRequest();
  CMessageCorpsQueryRecChallegeListResponse::default_instance_ = new CMessageCorpsQueryRecChallegeListResponse();
  CMessageCorpsQueryRoomListRequest::default_instance_ = new CMessageCorpsQueryRoomListRequest();
  PBCorpsRoom::default_instance_ = new PBCorpsRoom();
  CMessageCorpsQueryRoomListResponse::default_instance_ = new CMessageCorpsQueryRoomListResponse();
  CMessageQueryCorpsWelfareRequest::default_instance_ = new CMessageQueryCorpsWelfareRequest();
  CMessageQueryCorpsWelfareResponse::default_instance_ = new CMessageQueryCorpsWelfareResponse();
  CMessageObtainCorpsWelfareRequest::default_instance_ = new CMessageObtainCorpsWelfareRequest();
  CMessageObtainCorpsWelfareResponse::default_instance_ = new CMessageObtainCorpsWelfareResponse();
  CMessageGetCorpsMoneyRequest::default_instance_ = new CMessageGetCorpsMoneyRequest();
  CMessageGetCorpsMoneyResponse::default_instance_ = new CMessageGetCorpsMoneyResponse();
  CMessageCorpsAbortBattleCityRequest::default_instance_ = new CMessageCorpsAbortBattleCityRequest();
  CMessageCorpsAbortBattleCityResponse::default_instance_ = new CMessageCorpsAbortBattleCityResponse();
  CMessageCorpsAbortBattleCityNotice::default_instance_ = new CMessageCorpsAbortBattleCityNotice();
  CMessageCorpsCanLevelUPNotify::default_instance_ = new CMessageCorpsCanLevelUPNotify();
  CMessageCorpsPublishTaskNotify::default_instance_ = new CMessageCorpsPublishTaskNotify();
  CMessageCorpsBattleResultNotice::default_instance_ = new CMessageCorpsBattleResultNotice();
  CMessageCorpsNpcOwnerNotice::default_instance_ = new CMessageCorpsNpcOwnerNotice();
  CMessageCorpsNameChangedNotify::default_instance_ = new CMessageCorpsNameChangedNotify();
  CMessageCreateUnionRequest::default_instance_ = new CMessageCreateUnionRequest();
  CMessageCreateUnionResponse::default_instance_ = new CMessageCreateUnionResponse();
  CMessageCreateUnionNotify::default_instance_ = new CMessageCreateUnionNotify();
  CMessageApplyUnionRequest::default_instance_ = new CMessageApplyUnionRequest();
  CMessageApplyUnionResponse::default_instance_ = new CMessageApplyUnionResponse();
  CMessageUnionMemberApplyNotify::default_instance_ = new CMessageUnionMemberApplyNotify();
  CMessageReplyUnionMemberApplyRequest::default_instance_ = new CMessageReplyUnionMemberApplyRequest();
  CMessageReplyUnionMemberApplyResponse::default_instance_ = new CMessageReplyUnionMemberApplyResponse();
  CMessageApplyUnionResultNotify::default_instance_ = new CMessageApplyUnionResultNotify();
  CMessageInviteUnionMemberRequest::default_instance_ = new CMessageInviteUnionMemberRequest();
  CMessageInviteUnionMemberResponse::default_instance_ = new CMessageInviteUnionMemberResponse();
  CMessageUnionInviteNotify::default_instance_ = new CMessageUnionInviteNotify();
  CMessageReplyUnionInviteRequest::default_instance_ = new CMessageReplyUnionInviteRequest();
  CMessageReplyUnionInviteResponse::default_instance_ = new CMessageReplyUnionInviteResponse();
  CMessageUnionInviteResultNotify::default_instance_ = new CMessageUnionInviteResultNotify();
  CMessageCorpsJoinUnionNotify::default_instance_ = new CMessageCorpsJoinUnionNotify();
  CMessageCorpsLeaveUnionRequest::default_instance_ = new CMessageCorpsLeaveUnionRequest();
  CMessageCorpsLeaveUnionResponse::default_instance_ = new CMessageCorpsLeaveUnionResponse();
  CMessageCorpsLeaveUnionNotify::default_instance_ = new CMessageCorpsLeaveUnionNotify();
  CMessageKickCorpsRequest::default_instance_ = new CMessageKickCorpsRequest();
  CMessageKickCorpsResponse::default_instance_ = new CMessageKickCorpsResponse();
  CMessageKickCorpsNotify::default_instance_ = new CMessageKickCorpsNotify();
  CMessageMakeUnionRequest::default_instance_ = new CMessageMakeUnionRequest();
  CMessageMakeUnionResponse::default_instance_ = new CMessageMakeUnionResponse();
  CMessageMakeUnionNotify::default_instance_ = new CMessageMakeUnionNotify();
  CMessageGetUnionInfoRequest::default_instance_ = new CMessageGetUnionInfoRequest();
  CMessageGetUnionInfoResponse::default_instance_ = new CMessageGetUnionInfoResponse();
  CMessageDismissUnionRequest::default_instance_ = new CMessageDismissUnionRequest();
  CMessageDismissUnionResponse::default_instance_ = new CMessageDismissUnionResponse();
  CMessageDismissUnionNotify::default_instance_ = new CMessageDismissUnionNotify();
  CMessageUnionApplyListRequest::default_instance_ = new CMessageUnionApplyListRequest();
  CMessageUnionApplyListResponse::default_instance_ = new CMessageUnionApplyListResponse();
  CMessageAllUnionListRequest::default_instance_ = new CMessageAllUnionListRequest();
  CMessageAllUnionListResponse::default_instance_ = new CMessageAllUnionListResponse();
  CMessageCorpsGetOtherMemberRequest::default_instance_ = new CMessageCorpsGetOtherMemberRequest();
  PBBattleMember::default_instance_ = new PBBattleMember();
  CMessageCorpsGetOtherMemberResponse::default_instance_ = new CMessageCorpsGetOtherMemberResponse();
  CMessageUnionJoinBattleListRequest::default_instance_ = new CMessageUnionJoinBattleListRequest();
  CMessageUnionJoinBattleListResponse::default_instance_ = new CMessageUnionJoinBattleListResponse();
  CMessageCorpsGetAllMapRequest::default_instance_ = new CMessageCorpsGetAllMapRequest();
  PBMapOwner::default_instance_ = new PBMapOwner();
  CMessageCorpsGetAllMapResponse::default_instance_ = new CMessageCorpsGetAllMapResponse();
  CMessageCorpsAppointPrinceRequest::default_instance_ = new CMessageCorpsAppointPrinceRequest();
  CMessageCorspAppointPrinceResponse::default_instance_ = new CMessageCorspAppointPrinceResponse();
  CMessageCorpsAppointPrinceNotice::default_instance_ = new CMessageCorpsAppointPrinceNotice();
  CMessageCorpsMoveCapitalRequest::default_instance_ = new CMessageCorpsMoveCapitalRequest();
  CMesssageCorpsMoveCapitalResponse::default_instance_ = new CMesssageCorpsMoveCapitalResponse();
  CMessageCorpsSelectColorRequest::default_instance_ = new CMessageCorpsSelectColorRequest();
  CMessageCorpsSelectColorResponse::default_instance_ = new CMessageCorpsSelectColorResponse();
  CorpsGoodItem::default_instance_ = new CorpsGoodItem();
  CMessageGetCorpsGoodsListRequest::default_instance_ = new CMessageGetCorpsGoodsListRequest();
  CMessageGetCorpsGoodsListResponse::default_instance_ = new CMessageGetCorpsGoodsListResponse();
  CMessageGetCorpsExchangeGoodsListRequest::default_instance_ = new CMessageGetCorpsExchangeGoodsListRequest();
  CMessageGetCorpsExchangeGoodsListResponse::default_instance_ = new CMessageGetCorpsExchangeGoodsListResponse();
  CMessageChangeUnionNameRequest::default_instance_ = new CMessageChangeUnionNameRequest();
  CMessageChangeUnionNameResponse::default_instance_ = new CMessageChangeUnionNameResponse();
  CMessageChangeUnionNameNotify::default_instance_ = new CMessageChangeUnionNameNotify();
  CMessageChangeCorpsGoodsListNotify::default_instance_ = new CMessageChangeCorpsGoodsListNotify();
  CMessageChangeCorpsExchangeGoodsListNotify::default_instance_ = new CMessageChangeCorpsExchangeGoodsListNotify();
  CMessageUseCorpsLeagueItemNotify::default_instance_ = new CMessageUseCorpsLeagueItemNotify();
  CMessageCorpsLoginBattleRequest::default_instance_ = new CMessageCorpsLoginBattleRequest();
  CMessageCorpsLoginBattleResponse::default_instance_ = new CMessageCorpsLoginBattleResponse();
  CMessageSummonCorpsBossRequest::default_instance_ = new CMessageSummonCorpsBossRequest();
  CMessageSummonCorpsBossResponse::default_instance_ = new CMessageSummonCorpsBossResponse();
  CMessageCorpsBossRepetionOpenNotify::default_instance_ = new CMessageCorpsBossRepetionOpenNotify();
  CMessageIntoCorpsBossRepetionResponse::default_instance_ = new CMessageIntoCorpsBossRepetionResponse();
  CMessageCorpsBossRepetionEndNotify::default_instance_ = new CMessageCorpsBossRepetionEndNotify();
  CorpsHead::default_instance_->InitAsDefaultInstance();
  CMessageCreatCorpsRequest::default_instance_->InitAsDefaultInstance();
  CMessageCreatCorpsResponse::default_instance_->InitAsDefaultInstance();
  CMessageApplyCorpsRequest::default_instance_->InitAsDefaultInstance();
  CMessageApplyCorpsResponse::default_instance_->InitAsDefaultInstance();
  CMessageCorpsMemberApplyNotify::default_instance_->InitAsDefaultInstance();
  CMessageReplyCorpsMemberApplyRequest::default_instance_->InitAsDefaultInstance();
  CMessageReplyCorpsMemberApplyResponse::default_instance_->InitAsDefaultInstance();
  CMessageApplyCorpsResultNotify::default_instance_->InitAsDefaultInstance();
  CMessageInviteCorpsMemberRequest::default_instance_->InitAsDefaultInstance();
  CMessageInviteCorpsMemberResponse::default_instance_->InitAsDefaultInstance();
  CMessageCorpsInviteNotify::default_instance_->InitAsDefaultInstance();
  CMessageReplyCorpsInviteRequest::default_instance_->InitAsDefaultInstance();
  CMessageReplyCorpsInviteResponse::default_instance_->InitAsDefaultInstance();
  CMessageCorpsInviteResultNotify::default_instance_->InitAsDefaultInstance();
  CMessageFamilyJoinCorpsNotify::default_instance_->InitAsDefaultInstance();
  CMessageFamilyLeaveCorpsRequest::default_instance_->InitAsDefaultInstance();
  CMessageFamilyLeaveCorpsResponse::default_instance_->InitAsDefaultInstance();
  CMessageFamilyLeaveCorpsNotify::default_instance_->InitAsDefaultInstance();
  CMessageKickFamilyRequest::default_instance_->InitAsDefaultInstance();
  CMessageKickFamilyResponse::default_instance_->InitAsDefaultInstance();
  CMessageKickFamilyNotify::default_instance_->InitAsDefaultInstance();
  CMessageGetCorpsFamilyInfoRequest::default_instance_->InitAsDefaultInstance();
  CMessageGetCorpsFamilyInfoResponse::default_instance_->InitAsDefaultInstance();
  CMessageGetCorpsPropertyRequest::default_instance_->InitAsDefaultInstance();
  CMessageGetCorpsPropertyResponse::default_instance_->InitAsDefaultInstance();
  CMessageGetCorpsFamilyMemberRequest::default_instance_->InitAsDefaultInstance();
  CMessageGetCorpsFamilyMemberResponse::default_instance_->InitAsDefaultInstance();
  CMessageChangeCorpsBulletinRequest::default_instance_->InitAsDefaultInstance();
  CMessageChangeCorpsBulletinResponse::default_instance_->InitAsDefaultInstance();
  CMessageChangeCorpsBulletinNotify::default_instance_->InitAsDefaultInstance();
  CMessageChangeCorpsHeaderRequest::default_instance_->InitAsDefaultInstance();
  CMessageChangeCorpsHeaderResponse::default_instance_->InitAsDefaultInstance();
  CMessageChangeCorpsHeaderNotify::default_instance_->InitAsDefaultInstance();
  CMessageGetCorpsApplyListRequest::default_instance_->InitAsDefaultInstance();
  CMessageGetCorpsApplyListResponse::default_instance_->InitAsDefaultInstance();
  CMessageDisbandCorpsRequest::default_instance_->InitAsDefaultInstance();
  CMessageDisbandCorpsResponse::default_instance_->InitAsDefaultInstance();
  CMessageDisbandCorpsNotify::default_instance_->InitAsDefaultInstance();
  CMessageCancelCorpsDisbandRequest::default_instance_->InitAsDefaultInstance();
  CMessageCancelCorpsDisbandResponse::default_instance_->InitAsDefaultInstance();
  CMessageClearCorpsApplyRequest::default_instance_->InitAsDefaultInstance();
  CMessageClearCorpsApplyResponse::default_instance_->InitAsDefaultInstance();
  CMessageRefreshCorpsInfoRequest::default_instance_->InitAsDefaultInstance();
  CMessageRefreshCorpsInfoResponse::default_instance_->InitAsDefaultInstance();
  CMessageGetCorpsListRequest::default_instance_->InitAsDefaultInstance();
  CMessageGetCorpsListResponse::default_instance_->InitAsDefaultInstance();
  CMessageSetCorpsPostRequest::default_instance_->InitAsDefaultInstance();
  CMessageSetCorpsPostResponse::default_instance_->InitAsDefaultInstance();
  CMessageLevelUPCorpsRequest::default_instance_->InitAsDefaultInstance();
  CMessageLevelUPCorpsResponse::default_instance_->InitAsDefaultInstance();
  CMessageContributeCorpsMoneyRequest::default_instance_->InitAsDefaultInstance();
  CMessageContributeCorpsMoneyResponse::default_instance_->InitAsDefaultInstance();
  CMessageFamilyContributeMoneyRequest::default_instance_->InitAsDefaultInstance();
  CMessageFamilyContributeMoneyResponse::default_instance_->InitAsDefaultInstance();
  CMessageSetMemberNameRequest::default_instance_->InitAsDefaultInstance();
  CMessageSetMemberNameResponse::default_instance_->InitAsDefaultInstance();
  CMessageSetCorpsPostNotify::default_instance_->InitAsDefaultInstance();
  CMessageCorpsLevelUPNotify::default_instance_->InitAsDefaultInstance();
  CMessageCorpsBattleBidRequest::default_instance_->InitAsDefaultInstance();
  CMessageCorpsBattleBidResponse::default_instance_->InitAsDefaultInstance();
  CMessageCorpsQueryBidRankRequest::default_instance_->InitAsDefaultInstance();
  PBBidRank::default_instance_->InitAsDefaultInstance();
  CMessageCorpsQueryBidRankResponse::default_instance_->InitAsDefaultInstance();
  CMessageCorpsSelectFamilyBattleRequest::default_instance_->InitAsDefaultInstance();
  CMessageCorpsSelectFamilyBattleResponse::default_instance_->InitAsDefaultInstance();
  CMessageCorpsPvPStarLevelUpNotify::default_instance_->InitAsDefaultInstance();
  CMessageCorpsBattleRightsNotify::default_instance_->InitAsDefaultInstance();
  CMessageCorpsRecBattleRightsNotify::default_instance_->InitAsDefaultInstance();
  CMessageCorpsSelectMemberBattleRequest::default_instance_->InitAsDefaultInstance();
  CMessageCorpsSelectMemberBattleResponse::default_instance_->InitAsDefaultInstance();
  CMessageCorpsMemberBattleRightsNotify::default_instance_->InitAsDefaultInstance();
  CMessageCorpsMoneyChangedNotify::default_instance_->InitAsDefaultInstance();
  CMessageCorpsGloryChangedNotify::default_instance_->InitAsDefaultInstance();
  CMessageCorpsContributeChangedNotify::default_instance_->InitAsDefaultInstance();
  CMessageCorpsBossTimesChangedNotify::default_instance_->InitAsDefaultInstance();
  CMessageCorpsBossRefineValueNotify::default_instance_->InitAsDefaultInstance();
  CMessageCorpsCollectActiveChangeNotify::default_instance_->InitAsDefaultInstance();
  CMessageMendShengHuoTaiRequest::default_instance_->InitAsDefaultInstance();
  CMessageCorpsPropertyNotice::default_instance_->InitAsDefaultInstance();
  CMessageCorpsOperateRoomRequest::default_instance_->InitAsDefaultInstance();
  CMessageCorpsOperateRoomResponse::default_instance_->InitAsDefaultInstance();
  CMessageCorpsRoomNotice::default_instance_->InitAsDefaultInstance();
  CMessageCorpsChallegeRequest::default_instance_->InitAsDefaultInstance();
  CMessageCorpsChallegeResponse::default_instance_->InitAsDefaultInstance();
  CMessageCorpsChallegeNotice::default_instance_->InitAsDefaultInstance();
  CMessageCorpsReplyChallegeRequest::default_instance_->InitAsDefaultInstance();
  CMessageCorpsReplyChallegeResponse::default_instance_->InitAsDefaultInstance();
  CMessageCorpsQueryChallegeListRequest::default_instance_->InitAsDefaultInstance();
  CMessageCorpsQueryChallegeListResponse::default_instance_->InitAsDefaultInstance();
  PBChallege::default_instance_->InitAsDefaultInstance();
  CMessageCorpsQueryRecChallegeListRequest::default_instance_->InitAsDefaultInstance();
  CMessageCorpsQueryRecChallegeListResponse::default_instance_->InitAsDefaultInstance();
  CMessageCorpsQueryRoomListRequest::default_instance_->InitAsDefaultInstance();
  PBCorpsRoom::default_instance_->InitAsDefaultInstance();
  CMessageCorpsQueryRoomListResponse::default_instance_->InitAsDefaultInstance();
  CMessageQueryCorpsWelfareRequest::default_instance_->InitAsDefaultInstance();
  CMessageQueryCorpsWelfareResponse::default_instance_->InitAsDefaultInstance();
  CMessageObtainCorpsWelfareRequest::default_instance_->InitAsDefaultInstance();
  CMessageObtainCorpsWelfareResponse::default_instance_->InitAsDefaultInstance();
  CMessageGetCorpsMoneyRequest::default_instance_->InitAsDefaultInstance();
  CMessageGetCorpsMoneyResponse::default_instance_->InitAsDefaultInstance();
  CMessageCorpsAbortBattleCityRequest::default_instance_->InitAsDefaultInstance();
  CMessageCorpsAbortBattleCityResponse::default_instance_->InitAsDefaultInstance();
  CMessageCorpsAbortBattleCityNotice::default_instance_->InitAsDefaultInstance();
  CMessageCorpsCanLevelUPNotify::default_instance_->InitAsDefaultInstance();
  CMessageCorpsPublishTaskNotify::default_instance_->InitAsDefaultInstance();
  CMessageCorpsBattleResultNotice::default_instance_->InitAsDefaultInstance();
  CMessageCorpsNpcOwnerNotice::default_instance_->InitAsDefaultInstance();
  CMessageCorpsNameChangedNotify::default_instance_->InitAsDefaultInstance();
  CMessageCreateUnionRequest::default_instance_->InitAsDefaultInstance();
  CMessageCreateUnionResponse::default_instance_->InitAsDefaultInstance();
  CMessageCreateUnionNotify::default_instance_->InitAsDefaultInstance();
  CMessageApplyUnionRequest::default_instance_->InitAsDefaultInstance();
  CMessageApplyUnionResponse::default_instance_->InitAsDefaultInstance();
  CMessageUnionMemberApplyNotify::default_instance_->InitAsDefaultInstance();
  CMessageReplyUnionMemberApplyRequest::default_instance_->InitAsDefaultInstance();
  CMessageReplyUnionMemberApplyResponse::default_instance_->InitAsDefaultInstance();
  CMessageApplyUnionResultNotify::default_instance_->InitAsDefaultInstance();
  CMessageInviteUnionMemberRequest::default_instance_->InitAsDefaultInstance();
  CMessageInviteUnionMemberResponse::default_instance_->InitAsDefaultInstance();
  CMessageUnionInviteNotify::default_instance_->InitAsDefaultInstance();
  CMessageReplyUnionInviteRequest::default_instance_->InitAsDefaultInstance();
  CMessageReplyUnionInviteResponse::default_instance_->InitAsDefaultInstance();
  CMessageUnionInviteResultNotify::default_instance_->InitAsDefaultInstance();
  CMessageCorpsJoinUnionNotify::default_instance_->InitAsDefaultInstance();
  CMessageCorpsLeaveUnionRequest::default_instance_->InitAsDefaultInstance();
  CMessageCorpsLeaveUnionResponse::default_instance_->InitAsDefaultInstance();
  CMessageCorpsLeaveUnionNotify::default_instance_->InitAsDefaultInstance();
  CMessageKickCorpsRequest::default_instance_->InitAsDefaultInstance();
  CMessageKickCorpsResponse::default_instance_->InitAsDefaultInstance();
  CMessageKickCorpsNotify::default_instance_->InitAsDefaultInstance();
  CMessageMakeUnionRequest::default_instance_->InitAsDefaultInstance();
  CMessageMakeUnionResponse::default_instance_->InitAsDefaultInstance();
  CMessageMakeUnionNotify::default_instance_->InitAsDefaultInstance();
  CMessageGetUnionInfoRequest::default_instance_->InitAsDefaultInstance();
  CMessageGetUnionInfoResponse::default_instance_->InitAsDefaultInstance();
  CMessageDismissUnionRequest::default_instance_->InitAsDefaultInstance();
  CMessageDismissUnionResponse::default_instance_->InitAsDefaultInstance();
  CMessageDismissUnionNotify::default_instance_->InitAsDefaultInstance();
  CMessageUnionApplyListRequest::default_instance_->InitAsDefaultInstance();
  CMessageUnionApplyListResponse::default_instance_->InitAsDefaultInstance();
  CMessageAllUnionListRequest::default_instance_->InitAsDefaultInstance();
  CMessageAllUnionListResponse::default_instance_->InitAsDefaultInstance();
  CMessageCorpsGetOtherMemberRequest::default_instance_->InitAsDefaultInstance();
  PBBattleMember::default_instance_->InitAsDefaultInstance();
  CMessageCorpsGetOtherMemberResponse::default_instance_->InitAsDefaultInstance();
  CMessageUnionJoinBattleListRequest::default_instance_->InitAsDefaultInstance();
  CMessageUnionJoinBattleListResponse::default_instance_->InitAsDefaultInstance();
  CMessageCorpsGetAllMapRequest::default_instance_->InitAsDefaultInstance();
  PBMapOwner::default_instance_->InitAsDefaultInstance();
  CMessageCorpsGetAllMapResponse::default_instance_->InitAsDefaultInstance();
  CMessageCorpsAppointPrinceRequest::default_instance_->InitAsDefaultInstance();
  CMessageCorspAppointPrinceResponse::default_instance_->InitAsDefaultInstance();
  CMessageCorpsAppointPrinceNotice::default_instance_->InitAsDefaultInstance();
  CMessageCorpsMoveCapitalRequest::default_instance_->InitAsDefaultInstance();
  CMesssageCorpsMoveCapitalResponse::default_instance_->InitAsDefaultInstance();
  CMessageCorpsSelectColorRequest::default_instance_->InitAsDefaultInstance();
  CMessageCorpsSelectColorResponse::default_instance_->InitAsDefaultInstance();
  CorpsGoodItem::default_instance_->InitAsDefaultInstance();
  CMessageGetCorpsGoodsListRequest::default_instance_->InitAsDefaultInstance();
  CMessageGetCorpsGoodsListResponse::default_instance_->InitAsDefaultInstance();
  CMessageGetCorpsExchangeGoodsListRequest::default_instance_->InitAsDefaultInstance();
  CMessageGetCorpsExchangeGoodsListResponse::default_instance_->InitAsDefaultInstance();
  CMessageChangeUnionNameRequest::default_instance_->InitAsDefaultInstance();
  CMessageChangeUnionNameResponse::default_instance_->InitAsDefaultInstance();
  CMessageChangeUnionNameNotify::default_instance_->InitAsDefaultInstance();
  CMessageChangeCorpsGoodsListNotify::default_instance_->InitAsDefaultInstance();
  CMessageChangeCorpsExchangeGoodsListNotify::default_instance_->InitAsDefaultInstance();
  CMessageUseCorpsLeagueItemNotify::default_instance_->InitAsDefaultInstance();
  CMessageCorpsLoginBattleRequest::default_instance_->InitAsDefaultInstance();
  CMessageCorpsLoginBattleResponse::default_instance_->InitAsDefaultInstance();
  CMessageSummonCorpsBossRequest::default_instance_->InitAsDefaultInstance();
  CMessageSummonCorpsBossResponse::default_instance_->InitAsDefaultInstance();
  CMessageCorpsBossRepetionOpenNotify::default_instance_->InitAsDefaultInstance();
  CMessageIntoCorpsBossRepetionResponse::default_instance_->InitAsDefaultInstance();
  CMessageCorpsBossRepetionEndNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_corpsmessage_5fpb_2ehxx);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_corpsmessage_5fpb_2ehxx {
  StaticDescriptorInitializer_corpsmessage_5fpb_2ehxx() {
    protobuf_AddDesc_corpsmessage_5fpb_2ehxx();
  }
} static_descriptor_initializer_corpsmessage_5fpb_2ehxx_;

const ::google::protobuf::EnumDescriptor* CorpsMessageID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CorpsMessageID_descriptor_;
}
bool CorpsMessageID_IsValid(int value) {
  switch(value) {
    case 14336:
    case 14337:
    case 14338:
    case 14339:
    case 14340:
    case 14341:
    case 14342:
    case 14343:
    case 14344:
    case 14345:
    case 14346:
    case 14347:
    case 14348:
    case 14349:
    case 14350:
    case 14351:
    case 14352:
    case 14353:
    case 14354:
    case 14355:
    case 14356:
    case 14357:
    case 14358:
    case 14359:
    case 14360:
    case 14361:
    case 14362:
    case 14363:
    case 14364:
    case 14365:
    case 14366:
    case 14367:
    case 14368:
    case 14369:
    case 14370:
    case 14371:
    case 14372:
    case 14373:
    case 14374:
    case 14375:
    case 14376:
    case 14377:
    case 14378:
    case 14379:
    case 14380:
    case 14381:
    case 14382:
    case 14383:
    case 14384:
    case 14385:
    case 14386:
    case 14387:
    case 14388:
    case 14389:
    case 14390:
    case 14391:
    case 14392:
    case 14393:
    case 14394:
    case 14395:
    case 14396:
    case 14397:
    case 14398:
    case 14399:
    case 14400:
    case 14401:
    case 14402:
    case 14403:
    case 14404:
    case 14405:
    case 14406:
    case 14407:
    case 14408:
    case 14409:
    case 14410:
    case 14411:
    case 14412:
    case 14413:
    case 14414:
    case 14415:
    case 14416:
    case 14417:
    case 14418:
    case 14419:
    case 14420:
    case 14421:
    case 14422:
    case 14423:
    case 14424:
    case 14425:
    case 14426:
    case 14427:
    case 14428:
    case 14429:
    case 14430:
    case 14431:
    case 14432:
    case 14433:
    case 14434:
    case 14435:
    case 14436:
    case 14437:
    case 14446:
    case 14447:
    case 14448:
    case 14449:
    case 14450:
    case 14451:
    case 14452:
    case 14453:
    case 14454:
    case 14455:
    case 14456:
    case 14457:
    case 14458:
    case 14459:
    case 14460:
    case 14461:
    case 14462:
    case 14463:
    case 14464:
    case 14465:
    case 14466:
    case 14467:
    case 14468:
    case 14469:
    case 14470:
    case 14471:
    case 14472:
    case 14473:
    case 14474:
    case 14475:
    case 14476:
    case 14477:
    case 14478:
    case 14479:
    case 14480:
    case 14481:
    case 14482:
    case 14483:
    case 14484:
    case 14485:
    case 14486:
    case 14487:
    case 14488:
    case 14489:
    case 14490:
    case 14491:
    case 14492:
    case 14495:
    case 14496:
    case 14497:
    case 14498:
    case 14499:
    case 14500:
    case 14501:
    case 14502:
    case 14503:
    case 14504:
    case 14505:
    case 14506:
    case 14507:
    case 14508:
    case 14509:
    case 14510:
    case 14511:
    case 14512:
    case 14513:
    case 14514:
    case 14515:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CorpsHead::kRoleIDFieldNumber;
const int CorpsHead::kMsgIDFieldNumber;
const int CorpsHead::kEntityIDFieldNumber;
#endif  // !_MSC_VER

CorpsHead::CorpsHead()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CorpsHead::InitAsDefaultInstance() {}

CorpsHead::CorpsHead(const CorpsHead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CorpsHead::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  msgid_ = 0u;
  entityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CorpsHead::~CorpsHead() {
  SharedDtor();
}

void CorpsHead::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CorpsHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CorpsHead_descriptor_;
}

const CorpsHead& CorpsHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CorpsHead* CorpsHead::default_instance_ = NULL;

CorpsHead* CorpsHead::New() const {
  return new CorpsHead;
}

void CorpsHead::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    msgid_ = 0u;
    entityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CorpsHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_MsgID;
        break;
      }
      
      // optional uint32 MsgID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MsgID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &msgid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_EntityID;
        break;
      }
      
      // optional uint32 EntityID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CorpsHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CorpsHead::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional uint32 MsgID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->msgid(), output);
  }
  
  // optional uint32 EntityID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->entityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CorpsHead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional uint32 MsgID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->msgid(), target);
  }
  
  // optional uint32 EntityID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->entityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CorpsHead::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 MsgID = 2;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->msgid());
    }
    
    // optional uint32 EntityID = 3;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CorpsHead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CorpsHead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CorpsHead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CorpsHead::MergeFrom(const CorpsHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_msgid(from.msgid());
    }
    if (from._has_bit(2)) {
      set_entityid(from.entityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CorpsHead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CorpsHead::CopyFrom(const CorpsHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CorpsHead::Swap(CorpsHead* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(msgid_, other->msgid_);
    std::swap(entityid_, other->entityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CorpsHead::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CorpsHead::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CorpsHead::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CorpsHead_reflection_;
}

// ===================================================================

const ::std::string CMessageCreatCorpsRequest::_default_corpsname_;
#ifndef _MSC_VER
const int CMessageCreatCorpsRequest::kCorpHeadFieldNumber;
const int CMessageCreatCorpsRequest::kCorpsNameFieldNumber;
const int CMessageCreatCorpsRequest::kNpcEntityIDFieldNumber;
const int CMessageCreatCorpsRequest::kCorpsColorFieldNumber;
#endif  // !_MSC_VER

CMessageCreatCorpsRequest::CMessageCreatCorpsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCreatCorpsRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCreatCorpsRequest::CMessageCreatCorpsRequest(const CMessageCreatCorpsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCreatCorpsRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  corpsname_ = const_cast< ::std::string*>(&_default_corpsname_);
  npcentityid_ = 0u;
  corpscolor_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCreatCorpsRequest::~CMessageCreatCorpsRequest() {
  SharedDtor();
}

void CMessageCreatCorpsRequest::SharedDtor() {
  if (corpsname_ != &_default_corpsname_) {
    delete corpsname_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCreatCorpsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCreatCorpsRequest_descriptor_;
}

const CMessageCreatCorpsRequest& CMessageCreatCorpsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCreatCorpsRequest* CMessageCreatCorpsRequest::default_instance_ = NULL;

CMessageCreatCorpsRequest* CMessageCreatCorpsRequest::New() const {
  return new CMessageCreatCorpsRequest;
}

void CMessageCreatCorpsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    if (_has_bit(1)) {
      if (corpsname_ != &_default_corpsname_) {
        corpsname_->clear();
      }
    }
    npcentityid_ = 0u;
    corpscolor_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCreatCorpsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(18)) goto parse_CorpsName;
        break;
      }
      
      // optional string CorpsName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_corpsname()));
        if (input->ExpectTag(24)) goto parse_NpcEntityID;
        break;
      }
      
      // optional uint32 NpcEntityID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcEntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcentityid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_CorpsColor;
        break;
      }
      
      // optional uint32 CorpsColor = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsColor:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpscolor_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCreatCorpsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCreatCorpsRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional string CorpsName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->corpsname(), output);
  }
  
  // optional uint32 NpcEntityID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->npcentityid(), output);
  }
  
  // optional uint32 CorpsColor = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->corpscolor(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCreatCorpsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional string CorpsName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->corpsname(), target);
  }
  
  // optional uint32 NpcEntityID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->npcentityid(), target);
  }
  
  // optional uint32 CorpsColor = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->corpscolor(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCreatCorpsRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional string CorpsName = 2;
    if (has_corpsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->corpsname());
    }
    
    // optional uint32 NpcEntityID = 3;
    if (has_npcentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcentityid());
    }
    
    // optional uint32 CorpsColor = 4;
    if (has_corpscolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpscolor());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCreatCorpsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCreatCorpsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCreatCorpsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCreatCorpsRequest::MergeFrom(const CMessageCreatCorpsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_corpsname(from.corpsname());
    }
    if (from._has_bit(2)) {
      set_npcentityid(from.npcentityid());
    }
    if (from._has_bit(3)) {
      set_corpscolor(from.corpscolor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCreatCorpsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCreatCorpsRequest::CopyFrom(const CMessageCreatCorpsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCreatCorpsRequest::Swap(CMessageCreatCorpsRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(corpsname_, other->corpsname_);
    std::swap(npcentityid_, other->npcentityid_);
    std::swap(corpscolor_, other->corpscolor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCreatCorpsRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCreatCorpsRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCreatCorpsRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCreatCorpsRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageCreatCorpsResponse::_default_corpsname_;
#ifndef _MSC_VER
const int CMessageCreatCorpsResponse::kCorpHeadFieldNumber;
const int CMessageCreatCorpsResponse::kErrcodeFieldNumber;
const int CMessageCreatCorpsResponse::kCorpsNameFieldNumber;
const int CMessageCreatCorpsResponse::kCorpsIDFieldNumber;
const int CMessageCreatCorpsResponse::kCorpsColorFieldNumber;
#endif  // !_MSC_VER

CMessageCreatCorpsResponse::CMessageCreatCorpsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCreatCorpsResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCreatCorpsResponse::CMessageCreatCorpsResponse(const CMessageCreatCorpsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCreatCorpsResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  errcode_ = 0u;
  corpsname_ = const_cast< ::std::string*>(&_default_corpsname_);
  corpsid_ = 0u;
  corpscolor_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCreatCorpsResponse::~CMessageCreatCorpsResponse() {
  SharedDtor();
}

void CMessageCreatCorpsResponse::SharedDtor() {
  if (corpsname_ != &_default_corpsname_) {
    delete corpsname_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCreatCorpsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCreatCorpsResponse_descriptor_;
}

const CMessageCreatCorpsResponse& CMessageCreatCorpsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCreatCorpsResponse* CMessageCreatCorpsResponse::default_instance_ = NULL;

CMessageCreatCorpsResponse* CMessageCreatCorpsResponse::New() const {
  return new CMessageCreatCorpsResponse;
}

void CMessageCreatCorpsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    errcode_ = 0u;
    if (_has_bit(2)) {
      if (corpsname_ != &_default_corpsname_) {
        corpsname_->clear();
      }
    }
    corpsid_ = 0u;
    corpscolor_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCreatCorpsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_CorpsName;
        break;
      }
      
      // optional string CorpsName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_corpsname()));
        if (input->ExpectTag(32)) goto parse_CorpsID;
        break;
      }
      
      // optional uint32 CorpsID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_CorpsColor;
        break;
      }
      
      // optional uint32 CorpsColor = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsColor:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpscolor_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCreatCorpsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCreatCorpsResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  // optional string CorpsName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->corpsname(), output);
  }
  
  // optional uint32 CorpsID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->corpsid(), output);
  }
  
  // optional uint32 CorpsColor = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->corpscolor(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCreatCorpsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  // optional string CorpsName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->corpsname(), target);
  }
  
  // optional uint32 CorpsID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->corpsid(), target);
  }
  
  // optional uint32 CorpsColor = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->corpscolor(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCreatCorpsResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional string CorpsName = 3;
    if (has_corpsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->corpsname());
    }
    
    // optional uint32 CorpsID = 4;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
    // optional uint32 CorpsColor = 5;
    if (has_corpscolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpscolor());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCreatCorpsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCreatCorpsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCreatCorpsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCreatCorpsResponse::MergeFrom(const CMessageCreatCorpsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(2)) {
      set_corpsname(from.corpsname());
    }
    if (from._has_bit(3)) {
      set_corpsid(from.corpsid());
    }
    if (from._has_bit(4)) {
      set_corpscolor(from.corpscolor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCreatCorpsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCreatCorpsResponse::CopyFrom(const CMessageCreatCorpsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCreatCorpsResponse::Swap(CMessageCreatCorpsResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(errcode_, other->errcode_);
    std::swap(corpsname_, other->corpsname_);
    std::swap(corpsid_, other->corpsid_);
    std::swap(corpscolor_, other->corpscolor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCreatCorpsResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCreatCorpsResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCreatCorpsResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCreatCorpsResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageApplyCorpsRequest::_default_corpsname_;
#ifndef _MSC_VER
const int CMessageApplyCorpsRequest::kCorpHeadFieldNumber;
const int CMessageApplyCorpsRequest::kCorpsNameFieldNumber;
const int CMessageApplyCorpsRequest::kCorpsIDFieldNumber;
const int CMessageApplyCorpsRequest::kRoleIDFieldNumber;
#endif  // !_MSC_VER

CMessageApplyCorpsRequest::CMessageApplyCorpsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageApplyCorpsRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageApplyCorpsRequest::CMessageApplyCorpsRequest(const CMessageApplyCorpsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageApplyCorpsRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  corpsname_ = const_cast< ::std::string*>(&_default_corpsname_);
  corpsid_ = 0u;
  roleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageApplyCorpsRequest::~CMessageApplyCorpsRequest() {
  SharedDtor();
}

void CMessageApplyCorpsRequest::SharedDtor() {
  if (corpsname_ != &_default_corpsname_) {
    delete corpsname_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageApplyCorpsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageApplyCorpsRequest_descriptor_;
}

const CMessageApplyCorpsRequest& CMessageApplyCorpsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageApplyCorpsRequest* CMessageApplyCorpsRequest::default_instance_ = NULL;

CMessageApplyCorpsRequest* CMessageApplyCorpsRequest::New() const {
  return new CMessageApplyCorpsRequest;
}

void CMessageApplyCorpsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    if (_has_bit(1)) {
      if (corpsname_ != &_default_corpsname_) {
        corpsname_->clear();
      }
    }
    corpsid_ = 0u;
    roleid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageApplyCorpsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(18)) goto parse_CorpsName;
        break;
      }
      
      // optional string CorpsName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_corpsname()));
        if (input->ExpectTag(24)) goto parse_CorpsID;
        break;
      }
      
      // optional uint32 CorpsID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageApplyCorpsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageApplyCorpsRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional string CorpsName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->corpsname(), output);
  }
  
  // optional uint32 CorpsID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->corpsid(), output);
  }
  
  // optional uint32 RoleID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->roleid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageApplyCorpsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional string CorpsName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->corpsname(), target);
  }
  
  // optional uint32 CorpsID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->corpsid(), target);
  }
  
  // optional uint32 RoleID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->roleid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageApplyCorpsRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional string CorpsName = 2;
    if (has_corpsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->corpsname());
    }
    
    // optional uint32 CorpsID = 3;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
    // optional uint32 RoleID = 4;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageApplyCorpsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageApplyCorpsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageApplyCorpsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageApplyCorpsRequest::MergeFrom(const CMessageApplyCorpsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_corpsname(from.corpsname());
    }
    if (from._has_bit(2)) {
      set_corpsid(from.corpsid());
    }
    if (from._has_bit(3)) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageApplyCorpsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageApplyCorpsRequest::CopyFrom(const CMessageApplyCorpsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageApplyCorpsRequest::Swap(CMessageApplyCorpsRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(corpsname_, other->corpsname_);
    std::swap(corpsid_, other->corpsid_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageApplyCorpsRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageApplyCorpsRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageApplyCorpsRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageApplyCorpsRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageApplyCorpsResponse::_default_corpsname_;
#ifndef _MSC_VER
const int CMessageApplyCorpsResponse::kCorpHeadFieldNumber;
const int CMessageApplyCorpsResponse::kErrcodeFieldNumber;
const int CMessageApplyCorpsResponse::kCorpsNameFieldNumber;
#endif  // !_MSC_VER

CMessageApplyCorpsResponse::CMessageApplyCorpsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageApplyCorpsResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageApplyCorpsResponse::CMessageApplyCorpsResponse(const CMessageApplyCorpsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageApplyCorpsResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  errcode_ = 0u;
  corpsname_ = const_cast< ::std::string*>(&_default_corpsname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageApplyCorpsResponse::~CMessageApplyCorpsResponse() {
  SharedDtor();
}

void CMessageApplyCorpsResponse::SharedDtor() {
  if (corpsname_ != &_default_corpsname_) {
    delete corpsname_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageApplyCorpsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageApplyCorpsResponse_descriptor_;
}

const CMessageApplyCorpsResponse& CMessageApplyCorpsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageApplyCorpsResponse* CMessageApplyCorpsResponse::default_instance_ = NULL;

CMessageApplyCorpsResponse* CMessageApplyCorpsResponse::New() const {
  return new CMessageApplyCorpsResponse;
}

void CMessageApplyCorpsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    errcode_ = 0u;
    if (_has_bit(2)) {
      if (corpsname_ != &_default_corpsname_) {
        corpsname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageApplyCorpsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_CorpsName;
        break;
      }
      
      // optional string CorpsName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_corpsname()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageApplyCorpsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageApplyCorpsResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  // optional string CorpsName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->corpsname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageApplyCorpsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  // optional string CorpsName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->corpsname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageApplyCorpsResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional string CorpsName = 3;
    if (has_corpsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->corpsname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageApplyCorpsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageApplyCorpsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageApplyCorpsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageApplyCorpsResponse::MergeFrom(const CMessageApplyCorpsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(2)) {
      set_corpsname(from.corpsname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageApplyCorpsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageApplyCorpsResponse::CopyFrom(const CMessageApplyCorpsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageApplyCorpsResponse::Swap(CMessageApplyCorpsResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(errcode_, other->errcode_);
    std::swap(corpsname_, other->corpsname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageApplyCorpsResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageApplyCorpsResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageApplyCorpsResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageApplyCorpsResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCorpsMemberApplyNotify::kCorpHeadFieldNumber;
const int CMessageCorpsMemberApplyNotify::kFamilyInfoFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsMemberApplyNotify::CMessageCorpsMemberApplyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsMemberApplyNotify::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
  familyinfo_ = const_cast< ::FamilyData*>(&::FamilyData::default_instance());
}

CMessageCorpsMemberApplyNotify::CMessageCorpsMemberApplyNotify(const CMessageCorpsMemberApplyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsMemberApplyNotify::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  familyinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsMemberApplyNotify::~CMessageCorpsMemberApplyNotify() {
  SharedDtor();
}

void CMessageCorpsMemberApplyNotify::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
    delete familyinfo_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsMemberApplyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsMemberApplyNotify_descriptor_;
}

const CMessageCorpsMemberApplyNotify& CMessageCorpsMemberApplyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsMemberApplyNotify* CMessageCorpsMemberApplyNotify::default_instance_ = NULL;

CMessageCorpsMemberApplyNotify* CMessageCorpsMemberApplyNotify::New() const {
  return new CMessageCorpsMemberApplyNotify;
}

void CMessageCorpsMemberApplyNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    if (_has_bit(1)) {
      if (familyinfo_ != NULL) familyinfo_->::FamilyData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsMemberApplyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(18)) goto parse_FamilyInfo;
        break;
      }
      
      // optional .FamilyData FamilyInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FamilyInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_familyinfo()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsMemberApplyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsMemberApplyNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional .FamilyData FamilyInfo = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->familyinfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsMemberApplyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional .FamilyData FamilyInfo = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->familyinfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsMemberApplyNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional .FamilyData FamilyInfo = 2;
    if (has_familyinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->familyinfo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsMemberApplyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsMemberApplyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsMemberApplyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsMemberApplyNotify::MergeFrom(const CMessageCorpsMemberApplyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      mutable_familyinfo()->::FamilyData::MergeFrom(from.familyinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsMemberApplyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsMemberApplyNotify::CopyFrom(const CMessageCorpsMemberApplyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsMemberApplyNotify::Swap(CMessageCorpsMemberApplyNotify* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(familyinfo_, other->familyinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsMemberApplyNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsMemberApplyNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsMemberApplyNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsMemberApplyNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageReplyCorpsMemberApplyRequest::kCorpHeadFieldNumber;
const int CMessageReplyCorpsMemberApplyRequest::kResultFieldNumber;
const int CMessageReplyCorpsMemberApplyRequest::kFamilyIDFieldNumber;
#endif  // !_MSC_VER

CMessageReplyCorpsMemberApplyRequest::CMessageReplyCorpsMemberApplyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageReplyCorpsMemberApplyRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageReplyCorpsMemberApplyRequest::CMessageReplyCorpsMemberApplyRequest(const CMessageReplyCorpsMemberApplyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageReplyCorpsMemberApplyRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  result_ = 0u;
  familyid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageReplyCorpsMemberApplyRequest::~CMessageReplyCorpsMemberApplyRequest() {
  SharedDtor();
}

void CMessageReplyCorpsMemberApplyRequest::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageReplyCorpsMemberApplyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageReplyCorpsMemberApplyRequest_descriptor_;
}

const CMessageReplyCorpsMemberApplyRequest& CMessageReplyCorpsMemberApplyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageReplyCorpsMemberApplyRequest* CMessageReplyCorpsMemberApplyRequest::default_instance_ = NULL;

CMessageReplyCorpsMemberApplyRequest* CMessageReplyCorpsMemberApplyRequest::New() const {
  return new CMessageReplyCorpsMemberApplyRequest;
}

void CMessageReplyCorpsMemberApplyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    result_ = 0u;
    familyid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageReplyCorpsMemberApplyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_FamilyID;
        break;
      }
      
      // optional uint32 FamilyID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageReplyCorpsMemberApplyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageReplyCorpsMemberApplyRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  // optional uint32 FamilyID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->familyid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageReplyCorpsMemberApplyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  // optional uint32 FamilyID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->familyid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageReplyCorpsMemberApplyRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 FamilyID = 3;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageReplyCorpsMemberApplyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageReplyCorpsMemberApplyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageReplyCorpsMemberApplyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageReplyCorpsMemberApplyRequest::MergeFrom(const CMessageReplyCorpsMemberApplyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_familyid(from.familyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageReplyCorpsMemberApplyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReplyCorpsMemberApplyRequest::CopyFrom(const CMessageReplyCorpsMemberApplyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReplyCorpsMemberApplyRequest::Swap(CMessageReplyCorpsMemberApplyRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(result_, other->result_);
    std::swap(familyid_, other->familyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageReplyCorpsMemberApplyRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageReplyCorpsMemberApplyRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageReplyCorpsMemberApplyRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageReplyCorpsMemberApplyRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageReplyCorpsMemberApplyResponse::kCorpHeadFieldNumber;
const int CMessageReplyCorpsMemberApplyResponse::kErrcodeFieldNumber;
const int CMessageReplyCorpsMemberApplyResponse::kResultFieldNumber;
const int CMessageReplyCorpsMemberApplyResponse::kFamilyIDFieldNumber;
#endif  // !_MSC_VER

CMessageReplyCorpsMemberApplyResponse::CMessageReplyCorpsMemberApplyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageReplyCorpsMemberApplyResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageReplyCorpsMemberApplyResponse::CMessageReplyCorpsMemberApplyResponse(const CMessageReplyCorpsMemberApplyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageReplyCorpsMemberApplyResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  errcode_ = 0u;
  result_ = 0u;
  familyid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageReplyCorpsMemberApplyResponse::~CMessageReplyCorpsMemberApplyResponse() {
  SharedDtor();
}

void CMessageReplyCorpsMemberApplyResponse::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageReplyCorpsMemberApplyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageReplyCorpsMemberApplyResponse_descriptor_;
}

const CMessageReplyCorpsMemberApplyResponse& CMessageReplyCorpsMemberApplyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageReplyCorpsMemberApplyResponse* CMessageReplyCorpsMemberApplyResponse::default_instance_ = NULL;

CMessageReplyCorpsMemberApplyResponse* CMessageReplyCorpsMemberApplyResponse::New() const {
  return new CMessageReplyCorpsMemberApplyResponse;
}

void CMessageReplyCorpsMemberApplyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    errcode_ = 0u;
    result_ = 0u;
    familyid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageReplyCorpsMemberApplyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_FamilyID;
        break;
      }
      
      // optional uint32 FamilyID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageReplyCorpsMemberApplyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageReplyCorpsMemberApplyResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  // optional uint32 Result = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->result(), output);
  }
  
  // optional uint32 FamilyID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->familyid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageReplyCorpsMemberApplyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  // optional uint32 Result = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->result(), target);
  }
  
  // optional uint32 FamilyID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->familyid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageReplyCorpsMemberApplyResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional uint32 Result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 FamilyID = 4;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageReplyCorpsMemberApplyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageReplyCorpsMemberApplyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageReplyCorpsMemberApplyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageReplyCorpsMemberApplyResponse::MergeFrom(const CMessageReplyCorpsMemberApplyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(2)) {
      set_result(from.result());
    }
    if (from._has_bit(3)) {
      set_familyid(from.familyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageReplyCorpsMemberApplyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReplyCorpsMemberApplyResponse::CopyFrom(const CMessageReplyCorpsMemberApplyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReplyCorpsMemberApplyResponse::Swap(CMessageReplyCorpsMemberApplyResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(errcode_, other->errcode_);
    std::swap(result_, other->result_);
    std::swap(familyid_, other->familyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageReplyCorpsMemberApplyResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageReplyCorpsMemberApplyResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageReplyCorpsMemberApplyResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageReplyCorpsMemberApplyResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageApplyCorpsResultNotify::_default_corpsname_;
const ::std::string CMessageApplyCorpsResultNotify::_default_unionname_;
#ifndef _MSC_VER
const int CMessageApplyCorpsResultNotify::kCorpHeadFieldNumber;
const int CMessageApplyCorpsResultNotify::kResultCodeFieldNumber;
const int CMessageApplyCorpsResultNotify::kCorpsIDFieldNumber;
const int CMessageApplyCorpsResultNotify::kCorpsNameFieldNumber;
const int CMessageApplyCorpsResultNotify::kUnionIDFieldNumber;
const int CMessageApplyCorpsResultNotify::kUnionNameFieldNumber;
#endif  // !_MSC_VER

CMessageApplyCorpsResultNotify::CMessageApplyCorpsResultNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageApplyCorpsResultNotify::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageApplyCorpsResultNotify::CMessageApplyCorpsResultNotify(const CMessageApplyCorpsResultNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageApplyCorpsResultNotify::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  resultcode_ = 0u;
  corpsid_ = 0u;
  corpsname_ = const_cast< ::std::string*>(&_default_corpsname_);
  unionid_ = 0u;
  unionname_ = const_cast< ::std::string*>(&_default_unionname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageApplyCorpsResultNotify::~CMessageApplyCorpsResultNotify() {
  SharedDtor();
}

void CMessageApplyCorpsResultNotify::SharedDtor() {
  if (corpsname_ != &_default_corpsname_) {
    delete corpsname_;
  }
  if (unionname_ != &_default_unionname_) {
    delete unionname_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageApplyCorpsResultNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageApplyCorpsResultNotify_descriptor_;
}

const CMessageApplyCorpsResultNotify& CMessageApplyCorpsResultNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageApplyCorpsResultNotify* CMessageApplyCorpsResultNotify::default_instance_ = NULL;

CMessageApplyCorpsResultNotify* CMessageApplyCorpsResultNotify::New() const {
  return new CMessageApplyCorpsResultNotify;
}

void CMessageApplyCorpsResultNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    resultcode_ = 0u;
    corpsid_ = 0u;
    if (_has_bit(3)) {
      if (corpsname_ != &_default_corpsname_) {
        corpsname_->clear();
      }
    }
    unionid_ = 0u;
    if (_has_bit(5)) {
      if (unionname_ != &_default_unionname_) {
        unionname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageApplyCorpsResultNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_ResultCode;
        break;
      }
      
      // optional uint32 ResultCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ResultCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &resultcode_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_CorpsID;
        break;
      }
      
      // optional uint32 CorpsID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_CorpsName;
        break;
      }
      
      // optional string CorpsName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_corpsname()));
        if (input->ExpectTag(40)) goto parse_UnionID;
        break;
      }
      
      // optional uint32 UnionID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UnionID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &unionid_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_UnionName;
        break;
      }
      
      // optional string UnionName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_UnionName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_unionname()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageApplyCorpsResultNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageApplyCorpsResultNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 ResultCode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->resultcode(), output);
  }
  
  // optional uint32 CorpsID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->corpsid(), output);
  }
  
  // optional string CorpsName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->corpsname(), output);
  }
  
  // optional uint32 UnionID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->unionid(), output);
  }
  
  // optional string UnionName = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteString(6, this->unionname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageApplyCorpsResultNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 ResultCode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->resultcode(), target);
  }
  
  // optional uint32 CorpsID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->corpsid(), target);
  }
  
  // optional string CorpsName = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->corpsname(), target);
  }
  
  // optional uint32 UnionID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->unionid(), target);
  }
  
  // optional string UnionName = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(6, this->unionname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageApplyCorpsResultNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 ResultCode = 2;
    if (has_resultcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->resultcode());
    }
    
    // optional uint32 CorpsID = 3;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
    // optional string CorpsName = 4;
    if (has_corpsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->corpsname());
    }
    
    // optional uint32 UnionID = 5;
    if (has_unionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->unionid());
    }
    
    // optional string UnionName = 6;
    if (has_unionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->unionname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageApplyCorpsResultNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageApplyCorpsResultNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageApplyCorpsResultNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageApplyCorpsResultNotify::MergeFrom(const CMessageApplyCorpsResultNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_resultcode(from.resultcode());
    }
    if (from._has_bit(2)) {
      set_corpsid(from.corpsid());
    }
    if (from._has_bit(3)) {
      set_corpsname(from.corpsname());
    }
    if (from._has_bit(4)) {
      set_unionid(from.unionid());
    }
    if (from._has_bit(5)) {
      set_unionname(from.unionname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageApplyCorpsResultNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageApplyCorpsResultNotify::CopyFrom(const CMessageApplyCorpsResultNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageApplyCorpsResultNotify::Swap(CMessageApplyCorpsResultNotify* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(resultcode_, other->resultcode_);
    std::swap(corpsid_, other->corpsid_);
    std::swap(corpsname_, other->corpsname_);
    std::swap(unionid_, other->unionid_);
    std::swap(unionname_, other->unionname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageApplyCorpsResultNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageApplyCorpsResultNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageApplyCorpsResultNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageApplyCorpsResultNotify_reflection_;
}

// ===================================================================

const ::std::string CMessageInviteCorpsMemberRequest::_default_familyname_;
#ifndef _MSC_VER
const int CMessageInviteCorpsMemberRequest::kCorpHeadFieldNumber;
const int CMessageInviteCorpsMemberRequest::kFamilyNameFieldNumber;
const int CMessageInviteCorpsMemberRequest::kFamilyIDFieldNumber;
const int CMessageInviteCorpsMemberRequest::kMemberIDFieldNumber;
#endif  // !_MSC_VER

CMessageInviteCorpsMemberRequest::CMessageInviteCorpsMemberRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageInviteCorpsMemberRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageInviteCorpsMemberRequest::CMessageInviteCorpsMemberRequest(const CMessageInviteCorpsMemberRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageInviteCorpsMemberRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  familyname_ = const_cast< ::std::string*>(&_default_familyname_);
  familyid_ = 0u;
  memberid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageInviteCorpsMemberRequest::~CMessageInviteCorpsMemberRequest() {
  SharedDtor();
}

void CMessageInviteCorpsMemberRequest::SharedDtor() {
  if (familyname_ != &_default_familyname_) {
    delete familyname_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageInviteCorpsMemberRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageInviteCorpsMemberRequest_descriptor_;
}

const CMessageInviteCorpsMemberRequest& CMessageInviteCorpsMemberRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageInviteCorpsMemberRequest* CMessageInviteCorpsMemberRequest::default_instance_ = NULL;

CMessageInviteCorpsMemberRequest* CMessageInviteCorpsMemberRequest::New() const {
  return new CMessageInviteCorpsMemberRequest;
}

void CMessageInviteCorpsMemberRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    if (_has_bit(1)) {
      if (familyname_ != &_default_familyname_) {
        familyname_->clear();
      }
    }
    familyid_ = 0u;
    memberid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageInviteCorpsMemberRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(18)) goto parse_FamilyName;
        break;
      }
      
      // optional string FamilyName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FamilyName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_familyname()));
        if (input->ExpectTag(24)) goto parse_FamilyID;
        break;
      }
      
      // optional uint32 FamilyID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_MemberID;
        break;
      }
      
      // optional uint32 MemberID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MemberID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &memberid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageInviteCorpsMemberRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageInviteCorpsMemberRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional string FamilyName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->familyname(), output);
  }
  
  // optional uint32 FamilyID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->familyid(), output);
  }
  
  // optional uint32 MemberID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->memberid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageInviteCorpsMemberRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional string FamilyName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->familyname(), target);
  }
  
  // optional uint32 FamilyID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->familyid(), target);
  }
  
  // optional uint32 MemberID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->memberid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageInviteCorpsMemberRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional string FamilyName = 2;
    if (has_familyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->familyname());
    }
    
    // optional uint32 FamilyID = 3;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
    // optional uint32 MemberID = 4;
    if (has_memberid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->memberid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageInviteCorpsMemberRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageInviteCorpsMemberRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageInviteCorpsMemberRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageInviteCorpsMemberRequest::MergeFrom(const CMessageInviteCorpsMemberRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_familyname(from.familyname());
    }
    if (from._has_bit(2)) {
      set_familyid(from.familyid());
    }
    if (from._has_bit(3)) {
      set_memberid(from.memberid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageInviteCorpsMemberRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageInviteCorpsMemberRequest::CopyFrom(const CMessageInviteCorpsMemberRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageInviteCorpsMemberRequest::Swap(CMessageInviteCorpsMemberRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(familyname_, other->familyname_);
    std::swap(familyid_, other->familyid_);
    std::swap(memberid_, other->memberid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageInviteCorpsMemberRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageInviteCorpsMemberRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageInviteCorpsMemberRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageInviteCorpsMemberRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageInviteCorpsMemberResponse::_default_familyname_;
#ifndef _MSC_VER
const int CMessageInviteCorpsMemberResponse::kCorpHeadFieldNumber;
const int CMessageInviteCorpsMemberResponse::kErrcodeFieldNumber;
const int CMessageInviteCorpsMemberResponse::kFamilyNameFieldNumber;
#endif  // !_MSC_VER

CMessageInviteCorpsMemberResponse::CMessageInviteCorpsMemberResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageInviteCorpsMemberResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageInviteCorpsMemberResponse::CMessageInviteCorpsMemberResponse(const CMessageInviteCorpsMemberResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageInviteCorpsMemberResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  errcode_ = 0u;
  familyname_ = const_cast< ::std::string*>(&_default_familyname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageInviteCorpsMemberResponse::~CMessageInviteCorpsMemberResponse() {
  SharedDtor();
}

void CMessageInviteCorpsMemberResponse::SharedDtor() {
  if (familyname_ != &_default_familyname_) {
    delete familyname_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageInviteCorpsMemberResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageInviteCorpsMemberResponse_descriptor_;
}

const CMessageInviteCorpsMemberResponse& CMessageInviteCorpsMemberResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageInviteCorpsMemberResponse* CMessageInviteCorpsMemberResponse::default_instance_ = NULL;

CMessageInviteCorpsMemberResponse* CMessageInviteCorpsMemberResponse::New() const {
  return new CMessageInviteCorpsMemberResponse;
}

void CMessageInviteCorpsMemberResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    errcode_ = 0u;
    if (_has_bit(2)) {
      if (familyname_ != &_default_familyname_) {
        familyname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageInviteCorpsMemberResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_FamilyName;
        break;
      }
      
      // optional string FamilyName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FamilyName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_familyname()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageInviteCorpsMemberResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageInviteCorpsMemberResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  // optional string FamilyName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->familyname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageInviteCorpsMemberResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  // optional string FamilyName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->familyname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageInviteCorpsMemberResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional string FamilyName = 3;
    if (has_familyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->familyname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageInviteCorpsMemberResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageInviteCorpsMemberResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageInviteCorpsMemberResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageInviteCorpsMemberResponse::MergeFrom(const CMessageInviteCorpsMemberResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(2)) {
      set_familyname(from.familyname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageInviteCorpsMemberResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageInviteCorpsMemberResponse::CopyFrom(const CMessageInviteCorpsMemberResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageInviteCorpsMemberResponse::Swap(CMessageInviteCorpsMemberResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(errcode_, other->errcode_);
    std::swap(familyname_, other->familyname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageInviteCorpsMemberResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageInviteCorpsMemberResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageInviteCorpsMemberResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageInviteCorpsMemberResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageCorpsInviteNotify::_default_invitingname_;
#ifndef _MSC_VER
const int CMessageCorpsInviteNotify::kCorpHeadFieldNumber;
const int CMessageCorpsInviteNotify::kInvitingNameFieldNumber;
const int CMessageCorpsInviteNotify::kInvitingIDFieldNumber;
const int CMessageCorpsInviteNotify::kCorpsInfoFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsInviteNotify::CMessageCorpsInviteNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsInviteNotify::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
  corpsinfo_ = const_cast< ::PBCorpsBasicInfo*>(&::PBCorpsBasicInfo::default_instance());
}

CMessageCorpsInviteNotify::CMessageCorpsInviteNotify(const CMessageCorpsInviteNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsInviteNotify::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  invitingname_ = const_cast< ::std::string*>(&_default_invitingname_);
  invitingid_ = 0u;
  corpsinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsInviteNotify::~CMessageCorpsInviteNotify() {
  SharedDtor();
}

void CMessageCorpsInviteNotify::SharedDtor() {
  if (invitingname_ != &_default_invitingname_) {
    delete invitingname_;
  }
  if (this != default_instance_) {
    delete corphead_;
    delete corpsinfo_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsInviteNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsInviteNotify_descriptor_;
}

const CMessageCorpsInviteNotify& CMessageCorpsInviteNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsInviteNotify* CMessageCorpsInviteNotify::default_instance_ = NULL;

CMessageCorpsInviteNotify* CMessageCorpsInviteNotify::New() const {
  return new CMessageCorpsInviteNotify;
}

void CMessageCorpsInviteNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    if (_has_bit(1)) {
      if (invitingname_ != &_default_invitingname_) {
        invitingname_->clear();
      }
    }
    invitingid_ = 0u;
    if (_has_bit(3)) {
      if (corpsinfo_ != NULL) corpsinfo_->::PBCorpsBasicInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsInviteNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(18)) goto parse_InvitingName;
        break;
      }
      
      // optional string InvitingName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_InvitingName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_invitingname()));
        if (input->ExpectTag(24)) goto parse_InvitingID;
        break;
      }
      
      // optional uint32 InvitingID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InvitingID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &invitingid_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_CorpsInfo;
        break;
      }
      
      // optional .PBCorpsBasicInfo CorpsInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corpsinfo()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsInviteNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsInviteNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional string InvitingName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->invitingname(), output);
  }
  
  // optional uint32 InvitingID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->invitingid(), output);
  }
  
  // optional .PBCorpsBasicInfo CorpsInfo = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->corpsinfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsInviteNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional string InvitingName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->invitingname(), target);
  }
  
  // optional uint32 InvitingID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->invitingid(), target);
  }
  
  // optional .PBCorpsBasicInfo CorpsInfo = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(4, this->corpsinfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsInviteNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional string InvitingName = 2;
    if (has_invitingname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->invitingname());
    }
    
    // optional uint32 InvitingID = 3;
    if (has_invitingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->invitingid());
    }
    
    // optional .PBCorpsBasicInfo CorpsInfo = 4;
    if (has_corpsinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corpsinfo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsInviteNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsInviteNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsInviteNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsInviteNotify::MergeFrom(const CMessageCorpsInviteNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_invitingname(from.invitingname());
    }
    if (from._has_bit(2)) {
      set_invitingid(from.invitingid());
    }
    if (from._has_bit(3)) {
      mutable_corpsinfo()->::PBCorpsBasicInfo::MergeFrom(from.corpsinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsInviteNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsInviteNotify::CopyFrom(const CMessageCorpsInviteNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsInviteNotify::Swap(CMessageCorpsInviteNotify* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(invitingname_, other->invitingname_);
    std::swap(invitingid_, other->invitingid_);
    std::swap(corpsinfo_, other->corpsinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsInviteNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsInviteNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsInviteNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsInviteNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageReplyCorpsInviteRequest::kCorpHeadFieldNumber;
const int CMessageReplyCorpsInviteRequest::kResultFieldNumber;
const int CMessageReplyCorpsInviteRequest::kCorpsIDFieldNumber;
const int CMessageReplyCorpsInviteRequest::kInvitingIDFieldNumber;
#endif  // !_MSC_VER

CMessageReplyCorpsInviteRequest::CMessageReplyCorpsInviteRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageReplyCorpsInviteRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageReplyCorpsInviteRequest::CMessageReplyCorpsInviteRequest(const CMessageReplyCorpsInviteRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageReplyCorpsInviteRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  result_ = 0u;
  corpsid_ = 0u;
  invitingid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageReplyCorpsInviteRequest::~CMessageReplyCorpsInviteRequest() {
  SharedDtor();
}

void CMessageReplyCorpsInviteRequest::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageReplyCorpsInviteRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageReplyCorpsInviteRequest_descriptor_;
}

const CMessageReplyCorpsInviteRequest& CMessageReplyCorpsInviteRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageReplyCorpsInviteRequest* CMessageReplyCorpsInviteRequest::default_instance_ = NULL;

CMessageReplyCorpsInviteRequest* CMessageReplyCorpsInviteRequest::New() const {
  return new CMessageReplyCorpsInviteRequest;
}

void CMessageReplyCorpsInviteRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    result_ = 0u;
    corpsid_ = 0u;
    invitingid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageReplyCorpsInviteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_CorpsID;
        break;
      }
      
      // optional uint32 CorpsID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_InvitingID;
        break;
      }
      
      // optional uint32 InvitingID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InvitingID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &invitingid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageReplyCorpsInviteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageReplyCorpsInviteRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  // optional uint32 CorpsID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->corpsid(), output);
  }
  
  // optional uint32 InvitingID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->invitingid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageReplyCorpsInviteRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  // optional uint32 CorpsID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->corpsid(), target);
  }
  
  // optional uint32 InvitingID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->invitingid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageReplyCorpsInviteRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 CorpsID = 3;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
    // optional uint32 InvitingID = 4;
    if (has_invitingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->invitingid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageReplyCorpsInviteRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageReplyCorpsInviteRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageReplyCorpsInviteRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageReplyCorpsInviteRequest::MergeFrom(const CMessageReplyCorpsInviteRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_corpsid(from.corpsid());
    }
    if (from._has_bit(3)) {
      set_invitingid(from.invitingid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageReplyCorpsInviteRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReplyCorpsInviteRequest::CopyFrom(const CMessageReplyCorpsInviteRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReplyCorpsInviteRequest::Swap(CMessageReplyCorpsInviteRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(result_, other->result_);
    std::swap(corpsid_, other->corpsid_);
    std::swap(invitingid_, other->invitingid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageReplyCorpsInviteRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageReplyCorpsInviteRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageReplyCorpsInviteRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageReplyCorpsInviteRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageReplyCorpsInviteResponse::_default_corpsname_;
const ::std::string CMessageReplyCorpsInviteResponse::_default_unionname_;
#ifndef _MSC_VER
const int CMessageReplyCorpsInviteResponse::kCorpHeadFieldNumber;
const int CMessageReplyCorpsInviteResponse::kErrcodeFieldNumber;
const int CMessageReplyCorpsInviteResponse::kResultFieldNumber;
const int CMessageReplyCorpsInviteResponse::kCorpsNameFieldNumber;
const int CMessageReplyCorpsInviteResponse::kCorpsIDFieldNumber;
const int CMessageReplyCorpsInviteResponse::kUnionIDFieldNumber;
const int CMessageReplyCorpsInviteResponse::kUnionNameFieldNumber;
#endif  // !_MSC_VER

CMessageReplyCorpsInviteResponse::CMessageReplyCorpsInviteResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageReplyCorpsInviteResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageReplyCorpsInviteResponse::CMessageReplyCorpsInviteResponse(const CMessageReplyCorpsInviteResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageReplyCorpsInviteResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  errcode_ = 0u;
  result_ = 0u;
  corpsname_ = const_cast< ::std::string*>(&_default_corpsname_);
  corpsid_ = 0u;
  unionid_ = 0u;
  unionname_ = const_cast< ::std::string*>(&_default_unionname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageReplyCorpsInviteResponse::~CMessageReplyCorpsInviteResponse() {
  SharedDtor();
}

void CMessageReplyCorpsInviteResponse::SharedDtor() {
  if (corpsname_ != &_default_corpsname_) {
    delete corpsname_;
  }
  if (unionname_ != &_default_unionname_) {
    delete unionname_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageReplyCorpsInviteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageReplyCorpsInviteResponse_descriptor_;
}

const CMessageReplyCorpsInviteResponse& CMessageReplyCorpsInviteResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageReplyCorpsInviteResponse* CMessageReplyCorpsInviteResponse::default_instance_ = NULL;

CMessageReplyCorpsInviteResponse* CMessageReplyCorpsInviteResponse::New() const {
  return new CMessageReplyCorpsInviteResponse;
}

void CMessageReplyCorpsInviteResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    errcode_ = 0u;
    result_ = 0u;
    if (_has_bit(3)) {
      if (corpsname_ != &_default_corpsname_) {
        corpsname_->clear();
      }
    }
    corpsid_ = 0u;
    unionid_ = 0u;
    if (_has_bit(6)) {
      if (unionname_ != &_default_unionname_) {
        unionname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageReplyCorpsInviteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_CorpsName;
        break;
      }
      
      // optional string CorpsName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_corpsname()));
        if (input->ExpectTag(40)) goto parse_CorpsID;
        break;
      }
      
      // optional uint32 CorpsID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_UnionID;
        break;
      }
      
      // optional uint32 UnionID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UnionID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &unionid_));
        _set_bit(5);
        if (input->ExpectTag(58)) goto parse_UnionName;
        break;
      }
      
      // optional string UnionName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_UnionName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_unionname()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageReplyCorpsInviteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageReplyCorpsInviteResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  // optional uint32 Result = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->result(), output);
  }
  
  // optional string CorpsName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->corpsname(), output);
  }
  
  // optional uint32 CorpsID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->corpsid(), output);
  }
  
  // optional uint32 UnionID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->unionid(), output);
  }
  
  // optional string UnionName = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteString(7, this->unionname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageReplyCorpsInviteResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  // optional uint32 Result = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->result(), target);
  }
  
  // optional string CorpsName = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->corpsname(), target);
  }
  
  // optional uint32 CorpsID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->corpsid(), target);
  }
  
  // optional uint32 UnionID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->unionid(), target);
  }
  
  // optional string UnionName = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(7, this->unionname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageReplyCorpsInviteResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional uint32 Result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional string CorpsName = 4;
    if (has_corpsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->corpsname());
    }
    
    // optional uint32 CorpsID = 5;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
    // optional uint32 UnionID = 6;
    if (has_unionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->unionid());
    }
    
    // optional string UnionName = 7;
    if (has_unionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->unionname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageReplyCorpsInviteResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageReplyCorpsInviteResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageReplyCorpsInviteResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageReplyCorpsInviteResponse::MergeFrom(const CMessageReplyCorpsInviteResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(2)) {
      set_result(from.result());
    }
    if (from._has_bit(3)) {
      set_corpsname(from.corpsname());
    }
    if (from._has_bit(4)) {
      set_corpsid(from.corpsid());
    }
    if (from._has_bit(5)) {
      set_unionid(from.unionid());
    }
    if (from._has_bit(6)) {
      set_unionname(from.unionname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageReplyCorpsInviteResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReplyCorpsInviteResponse::CopyFrom(const CMessageReplyCorpsInviteResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReplyCorpsInviteResponse::Swap(CMessageReplyCorpsInviteResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(errcode_, other->errcode_);
    std::swap(result_, other->result_);
    std::swap(corpsname_, other->corpsname_);
    std::swap(corpsid_, other->corpsid_);
    std::swap(unionid_, other->unionid_);
    std::swap(unionname_, other->unionname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageReplyCorpsInviteResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageReplyCorpsInviteResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageReplyCorpsInviteResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageReplyCorpsInviteResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageCorpsInviteResultNotify::_default_familyname_;
#ifndef _MSC_VER
const int CMessageCorpsInviteResultNotify::kCorpHeadFieldNumber;
const int CMessageCorpsInviteResultNotify::kResultFieldNumber;
const int CMessageCorpsInviteResultNotify::kFamilyNameFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsInviteResultNotify::CMessageCorpsInviteResultNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsInviteResultNotify::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsInviteResultNotify::CMessageCorpsInviteResultNotify(const CMessageCorpsInviteResultNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsInviteResultNotify::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  result_ = 0u;
  familyname_ = const_cast< ::std::string*>(&_default_familyname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsInviteResultNotify::~CMessageCorpsInviteResultNotify() {
  SharedDtor();
}

void CMessageCorpsInviteResultNotify::SharedDtor() {
  if (familyname_ != &_default_familyname_) {
    delete familyname_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsInviteResultNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsInviteResultNotify_descriptor_;
}

const CMessageCorpsInviteResultNotify& CMessageCorpsInviteResultNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsInviteResultNotify* CMessageCorpsInviteResultNotify::default_instance_ = NULL;

CMessageCorpsInviteResultNotify* CMessageCorpsInviteResultNotify::New() const {
  return new CMessageCorpsInviteResultNotify;
}

void CMessageCorpsInviteResultNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    result_ = 0u;
    if (_has_bit(2)) {
      if (familyname_ != &_default_familyname_) {
        familyname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsInviteResultNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_FamilyName;
        break;
      }
      
      // optional string FamilyName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FamilyName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_familyname()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsInviteResultNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsInviteResultNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  // optional string FamilyName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->familyname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsInviteResultNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  // optional string FamilyName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->familyname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsInviteResultNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional string FamilyName = 3;
    if (has_familyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->familyname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsInviteResultNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsInviteResultNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsInviteResultNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsInviteResultNotify::MergeFrom(const CMessageCorpsInviteResultNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_familyname(from.familyname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsInviteResultNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsInviteResultNotify::CopyFrom(const CMessageCorpsInviteResultNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsInviteResultNotify::Swap(CMessageCorpsInviteResultNotify* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(result_, other->result_);
    std::swap(familyname_, other->familyname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsInviteResultNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsInviteResultNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsInviteResultNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsInviteResultNotify_reflection_;
}

// ===================================================================

const ::std::string CMessageFamilyJoinCorpsNotify::_default_unionname_;
#ifndef _MSC_VER
const int CMessageFamilyJoinCorpsNotify::kCorpHeadFieldNumber;
const int CMessageFamilyJoinCorpsNotify::kFamilyInfoFieldNumber;
const int CMessageFamilyJoinCorpsNotify::kUnionIDFieldNumber;
const int CMessageFamilyJoinCorpsNotify::kUnionNameFieldNumber;
#endif  // !_MSC_VER

CMessageFamilyJoinCorpsNotify::CMessageFamilyJoinCorpsNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFamilyJoinCorpsNotify::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
  familyinfo_ = const_cast< ::PBCorpsMember*>(&::PBCorpsMember::default_instance());
}

CMessageFamilyJoinCorpsNotify::CMessageFamilyJoinCorpsNotify(const CMessageFamilyJoinCorpsNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFamilyJoinCorpsNotify::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  familyinfo_ = NULL;
  unionid_ = 0u;
  unionname_ = const_cast< ::std::string*>(&_default_unionname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFamilyJoinCorpsNotify::~CMessageFamilyJoinCorpsNotify() {
  SharedDtor();
}

void CMessageFamilyJoinCorpsNotify::SharedDtor() {
  if (unionname_ != &_default_unionname_) {
    delete unionname_;
  }
  if (this != default_instance_) {
    delete corphead_;
    delete familyinfo_;
  }
}

const ::google::protobuf::Descriptor* CMessageFamilyJoinCorpsNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFamilyJoinCorpsNotify_descriptor_;
}

const CMessageFamilyJoinCorpsNotify& CMessageFamilyJoinCorpsNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFamilyJoinCorpsNotify* CMessageFamilyJoinCorpsNotify::default_instance_ = NULL;

CMessageFamilyJoinCorpsNotify* CMessageFamilyJoinCorpsNotify::New() const {
  return new CMessageFamilyJoinCorpsNotify;
}

void CMessageFamilyJoinCorpsNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    if (_has_bit(1)) {
      if (familyinfo_ != NULL) familyinfo_->::PBCorpsMember::Clear();
    }
    unionid_ = 0u;
    if (_has_bit(3)) {
      if (unionname_ != &_default_unionname_) {
        unionname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFamilyJoinCorpsNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(18)) goto parse_FamilyInfo;
        break;
      }
      
      // optional .PBCorpsMember FamilyInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FamilyInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_familyinfo()));
        if (input->ExpectTag(24)) goto parse_UnionID;
        break;
      }
      
      // optional uint32 UnionID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UnionID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &unionid_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_UnionName;
        break;
      }
      
      // optional string UnionName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_UnionName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_unionname()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageFamilyJoinCorpsNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFamilyJoinCorpsNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional .PBCorpsMember FamilyInfo = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->familyinfo(), output);
  }
  
  // optional uint32 UnionID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->unionid(), output);
  }
  
  // optional string UnionName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->unionname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFamilyJoinCorpsNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional .PBCorpsMember FamilyInfo = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->familyinfo(), target);
  }
  
  // optional uint32 UnionID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->unionid(), target);
  }
  
  // optional string UnionName = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->unionname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFamilyJoinCorpsNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional .PBCorpsMember FamilyInfo = 2;
    if (has_familyinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->familyinfo());
    }
    
    // optional uint32 UnionID = 3;
    if (has_unionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->unionid());
    }
    
    // optional string UnionName = 4;
    if (has_unionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->unionname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFamilyJoinCorpsNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFamilyJoinCorpsNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFamilyJoinCorpsNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFamilyJoinCorpsNotify::MergeFrom(const CMessageFamilyJoinCorpsNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      mutable_familyinfo()->::PBCorpsMember::MergeFrom(from.familyinfo());
    }
    if (from._has_bit(2)) {
      set_unionid(from.unionid());
    }
    if (from._has_bit(3)) {
      set_unionname(from.unionname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFamilyJoinCorpsNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFamilyJoinCorpsNotify::CopyFrom(const CMessageFamilyJoinCorpsNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFamilyJoinCorpsNotify::Swap(CMessageFamilyJoinCorpsNotify* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(familyinfo_, other->familyinfo_);
    std::swap(unionid_, other->unionid_);
    std::swap(unionname_, other->unionname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFamilyJoinCorpsNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFamilyJoinCorpsNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFamilyJoinCorpsNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFamilyJoinCorpsNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageFamilyLeaveCorpsRequest::kCorpHeadFieldNumber;
const int CMessageFamilyLeaveCorpsRequest::kMsgcodeFieldNumber;
#endif  // !_MSC_VER

CMessageFamilyLeaveCorpsRequest::CMessageFamilyLeaveCorpsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFamilyLeaveCorpsRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageFamilyLeaveCorpsRequest::CMessageFamilyLeaveCorpsRequest(const CMessageFamilyLeaveCorpsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFamilyLeaveCorpsRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  msgcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFamilyLeaveCorpsRequest::~CMessageFamilyLeaveCorpsRequest() {
  SharedDtor();
}

void CMessageFamilyLeaveCorpsRequest::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageFamilyLeaveCorpsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFamilyLeaveCorpsRequest_descriptor_;
}

const CMessageFamilyLeaveCorpsRequest& CMessageFamilyLeaveCorpsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFamilyLeaveCorpsRequest* CMessageFamilyLeaveCorpsRequest::default_instance_ = NULL;

CMessageFamilyLeaveCorpsRequest* CMessageFamilyLeaveCorpsRequest::New() const {
  return new CMessageFamilyLeaveCorpsRequest;
}

void CMessageFamilyLeaveCorpsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    msgcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFamilyLeaveCorpsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_Msgcode;
        break;
      }
      
      // optional uint32 Msgcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Msgcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &msgcode_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageFamilyLeaveCorpsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFamilyLeaveCorpsRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 Msgcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->msgcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFamilyLeaveCorpsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 Msgcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->msgcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFamilyLeaveCorpsRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 Msgcode = 2;
    if (has_msgcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->msgcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFamilyLeaveCorpsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFamilyLeaveCorpsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFamilyLeaveCorpsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFamilyLeaveCorpsRequest::MergeFrom(const CMessageFamilyLeaveCorpsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_msgcode(from.msgcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFamilyLeaveCorpsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFamilyLeaveCorpsRequest::CopyFrom(const CMessageFamilyLeaveCorpsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFamilyLeaveCorpsRequest::Swap(CMessageFamilyLeaveCorpsRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(msgcode_, other->msgcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFamilyLeaveCorpsRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFamilyLeaveCorpsRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFamilyLeaveCorpsRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFamilyLeaveCorpsRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageFamilyLeaveCorpsResponse::kCorpHeadFieldNumber;
const int CMessageFamilyLeaveCorpsResponse::kErrcodeFieldNumber;
#endif  // !_MSC_VER

CMessageFamilyLeaveCorpsResponse::CMessageFamilyLeaveCorpsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFamilyLeaveCorpsResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageFamilyLeaveCorpsResponse::CMessageFamilyLeaveCorpsResponse(const CMessageFamilyLeaveCorpsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFamilyLeaveCorpsResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFamilyLeaveCorpsResponse::~CMessageFamilyLeaveCorpsResponse() {
  SharedDtor();
}

void CMessageFamilyLeaveCorpsResponse::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageFamilyLeaveCorpsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFamilyLeaveCorpsResponse_descriptor_;
}

const CMessageFamilyLeaveCorpsResponse& CMessageFamilyLeaveCorpsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFamilyLeaveCorpsResponse* CMessageFamilyLeaveCorpsResponse::default_instance_ = NULL;

CMessageFamilyLeaveCorpsResponse* CMessageFamilyLeaveCorpsResponse::New() const {
  return new CMessageFamilyLeaveCorpsResponse;
}

void CMessageFamilyLeaveCorpsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFamilyLeaveCorpsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageFamilyLeaveCorpsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFamilyLeaveCorpsResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFamilyLeaveCorpsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFamilyLeaveCorpsResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFamilyLeaveCorpsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFamilyLeaveCorpsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFamilyLeaveCorpsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFamilyLeaveCorpsResponse::MergeFrom(const CMessageFamilyLeaveCorpsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFamilyLeaveCorpsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFamilyLeaveCorpsResponse::CopyFrom(const CMessageFamilyLeaveCorpsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFamilyLeaveCorpsResponse::Swap(CMessageFamilyLeaveCorpsResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFamilyLeaveCorpsResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFamilyLeaveCorpsResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFamilyLeaveCorpsResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFamilyLeaveCorpsResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageFamilyLeaveCorpsNotify::_default_familyname_;
#ifndef _MSC_VER
const int CMessageFamilyLeaveCorpsNotify::kCorpHeadFieldNumber;
const int CMessageFamilyLeaveCorpsNotify::kFamilyIDFieldNumber;
const int CMessageFamilyLeaveCorpsNotify::kFamilyNameFieldNumber;
#endif  // !_MSC_VER

CMessageFamilyLeaveCorpsNotify::CMessageFamilyLeaveCorpsNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFamilyLeaveCorpsNotify::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageFamilyLeaveCorpsNotify::CMessageFamilyLeaveCorpsNotify(const CMessageFamilyLeaveCorpsNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFamilyLeaveCorpsNotify::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  familyid_ = 0u;
  familyname_ = const_cast< ::std::string*>(&_default_familyname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFamilyLeaveCorpsNotify::~CMessageFamilyLeaveCorpsNotify() {
  SharedDtor();
}

void CMessageFamilyLeaveCorpsNotify::SharedDtor() {
  if (familyname_ != &_default_familyname_) {
    delete familyname_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageFamilyLeaveCorpsNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFamilyLeaveCorpsNotify_descriptor_;
}

const CMessageFamilyLeaveCorpsNotify& CMessageFamilyLeaveCorpsNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFamilyLeaveCorpsNotify* CMessageFamilyLeaveCorpsNotify::default_instance_ = NULL;

CMessageFamilyLeaveCorpsNotify* CMessageFamilyLeaveCorpsNotify::New() const {
  return new CMessageFamilyLeaveCorpsNotify;
}

void CMessageFamilyLeaveCorpsNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    familyid_ = 0u;
    if (_has_bit(2)) {
      if (familyname_ != &_default_familyname_) {
        familyname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFamilyLeaveCorpsNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_FamilyID;
        break;
      }
      
      // optional uint32 FamilyID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_FamilyName;
        break;
      }
      
      // optional string FamilyName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FamilyName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_familyname()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageFamilyLeaveCorpsNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFamilyLeaveCorpsNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 FamilyID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->familyid(), output);
  }
  
  // optional string FamilyName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->familyname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFamilyLeaveCorpsNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 FamilyID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->familyid(), target);
  }
  
  // optional string FamilyName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->familyname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFamilyLeaveCorpsNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 FamilyID = 2;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
    // optional string FamilyName = 3;
    if (has_familyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->familyname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFamilyLeaveCorpsNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFamilyLeaveCorpsNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFamilyLeaveCorpsNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFamilyLeaveCorpsNotify::MergeFrom(const CMessageFamilyLeaveCorpsNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_familyid(from.familyid());
    }
    if (from._has_bit(2)) {
      set_familyname(from.familyname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFamilyLeaveCorpsNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFamilyLeaveCorpsNotify::CopyFrom(const CMessageFamilyLeaveCorpsNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFamilyLeaveCorpsNotify::Swap(CMessageFamilyLeaveCorpsNotify* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(familyid_, other->familyid_);
    std::swap(familyname_, other->familyname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFamilyLeaveCorpsNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFamilyLeaveCorpsNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFamilyLeaveCorpsNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFamilyLeaveCorpsNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageKickFamilyRequest::kCorpHeadFieldNumber;
const int CMessageKickFamilyRequest::kFamilyIDFieldNumber;
#endif  // !_MSC_VER

CMessageKickFamilyRequest::CMessageKickFamilyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageKickFamilyRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageKickFamilyRequest::CMessageKickFamilyRequest(const CMessageKickFamilyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageKickFamilyRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  familyid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageKickFamilyRequest::~CMessageKickFamilyRequest() {
  SharedDtor();
}

void CMessageKickFamilyRequest::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageKickFamilyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageKickFamilyRequest_descriptor_;
}

const CMessageKickFamilyRequest& CMessageKickFamilyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageKickFamilyRequest* CMessageKickFamilyRequest::default_instance_ = NULL;

CMessageKickFamilyRequest* CMessageKickFamilyRequest::New() const {
  return new CMessageKickFamilyRequest;
}

void CMessageKickFamilyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    familyid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageKickFamilyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_FamilyID;
        break;
      }
      
      // optional uint32 FamilyID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageKickFamilyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageKickFamilyRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 FamilyID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->familyid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageKickFamilyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 FamilyID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->familyid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageKickFamilyRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 FamilyID = 2;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageKickFamilyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageKickFamilyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageKickFamilyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageKickFamilyRequest::MergeFrom(const CMessageKickFamilyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_familyid(from.familyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageKickFamilyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageKickFamilyRequest::CopyFrom(const CMessageKickFamilyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageKickFamilyRequest::Swap(CMessageKickFamilyRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(familyid_, other->familyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageKickFamilyRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageKickFamilyRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageKickFamilyRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageKickFamilyRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageKickFamilyResponse::_default_familyname_;
#ifndef _MSC_VER
const int CMessageKickFamilyResponse::kCorpHeadFieldNumber;
const int CMessageKickFamilyResponse::kErrcodeFieldNumber;
const int CMessageKickFamilyResponse::kFamilyNameFieldNumber;
const int CMessageKickFamilyResponse::kFamilyIDFieldNumber;
#endif  // !_MSC_VER

CMessageKickFamilyResponse::CMessageKickFamilyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageKickFamilyResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageKickFamilyResponse::CMessageKickFamilyResponse(const CMessageKickFamilyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageKickFamilyResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  errcode_ = 0u;
  familyname_ = const_cast< ::std::string*>(&_default_familyname_);
  familyid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageKickFamilyResponse::~CMessageKickFamilyResponse() {
  SharedDtor();
}

void CMessageKickFamilyResponse::SharedDtor() {
  if (familyname_ != &_default_familyname_) {
    delete familyname_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageKickFamilyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageKickFamilyResponse_descriptor_;
}

const CMessageKickFamilyResponse& CMessageKickFamilyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageKickFamilyResponse* CMessageKickFamilyResponse::default_instance_ = NULL;

CMessageKickFamilyResponse* CMessageKickFamilyResponse::New() const {
  return new CMessageKickFamilyResponse;
}

void CMessageKickFamilyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    errcode_ = 0u;
    if (_has_bit(2)) {
      if (familyname_ != &_default_familyname_) {
        familyname_->clear();
      }
    }
    familyid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageKickFamilyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_FamilyName;
        break;
      }
      
      // optional string FamilyName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FamilyName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_familyname()));
        if (input->ExpectTag(32)) goto parse_FamilyID;
        break;
      }
      
      // optional uint32 FamilyID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageKickFamilyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageKickFamilyResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  // optional string FamilyName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->familyname(), output);
  }
  
  // optional uint32 FamilyID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->familyid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageKickFamilyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  // optional string FamilyName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->familyname(), target);
  }
  
  // optional uint32 FamilyID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->familyid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageKickFamilyResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional string FamilyName = 3;
    if (has_familyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->familyname());
    }
    
    // optional uint32 FamilyID = 4;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageKickFamilyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageKickFamilyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageKickFamilyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageKickFamilyResponse::MergeFrom(const CMessageKickFamilyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(2)) {
      set_familyname(from.familyname());
    }
    if (from._has_bit(3)) {
      set_familyid(from.familyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageKickFamilyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageKickFamilyResponse::CopyFrom(const CMessageKickFamilyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageKickFamilyResponse::Swap(CMessageKickFamilyResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(errcode_, other->errcode_);
    std::swap(familyname_, other->familyname_);
    std::swap(familyid_, other->familyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageKickFamilyResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageKickFamilyResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageKickFamilyResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageKickFamilyResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageKickFamilyNotify::_default_familyname_;
#ifndef _MSC_VER
const int CMessageKickFamilyNotify::kCorpHeadFieldNumber;
const int CMessageKickFamilyNotify::kFamilyIDFieldNumber;
const int CMessageKickFamilyNotify::kFamilyNameFieldNumber;
#endif  // !_MSC_VER

CMessageKickFamilyNotify::CMessageKickFamilyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageKickFamilyNotify::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageKickFamilyNotify::CMessageKickFamilyNotify(const CMessageKickFamilyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageKickFamilyNotify::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  familyid_ = 0u;
  familyname_ = const_cast< ::std::string*>(&_default_familyname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageKickFamilyNotify::~CMessageKickFamilyNotify() {
  SharedDtor();
}

void CMessageKickFamilyNotify::SharedDtor() {
  if (familyname_ != &_default_familyname_) {
    delete familyname_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageKickFamilyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageKickFamilyNotify_descriptor_;
}

const CMessageKickFamilyNotify& CMessageKickFamilyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageKickFamilyNotify* CMessageKickFamilyNotify::default_instance_ = NULL;

CMessageKickFamilyNotify* CMessageKickFamilyNotify::New() const {
  return new CMessageKickFamilyNotify;
}

void CMessageKickFamilyNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    familyid_ = 0u;
    if (_has_bit(2)) {
      if (familyname_ != &_default_familyname_) {
        familyname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageKickFamilyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_FamilyID;
        break;
      }
      
      // optional uint32 FamilyID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_FamilyName;
        break;
      }
      
      // optional string FamilyName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FamilyName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_familyname()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageKickFamilyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageKickFamilyNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 FamilyID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->familyid(), output);
  }
  
  // optional string FamilyName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->familyname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageKickFamilyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 FamilyID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->familyid(), target);
  }
  
  // optional string FamilyName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->familyname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageKickFamilyNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 FamilyID = 2;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
    // optional string FamilyName = 3;
    if (has_familyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->familyname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageKickFamilyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageKickFamilyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageKickFamilyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageKickFamilyNotify::MergeFrom(const CMessageKickFamilyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_familyid(from.familyid());
    }
    if (from._has_bit(2)) {
      set_familyname(from.familyname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageKickFamilyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageKickFamilyNotify::CopyFrom(const CMessageKickFamilyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageKickFamilyNotify::Swap(CMessageKickFamilyNotify* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(familyid_, other->familyid_);
    std::swap(familyname_, other->familyname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageKickFamilyNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageKickFamilyNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageKickFamilyNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageKickFamilyNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetCorpsFamilyInfoRequest::kCorpHeadFieldNumber;
const int CMessageGetCorpsFamilyInfoRequest::kMsgCodeFieldNumber;
#endif  // !_MSC_VER

CMessageGetCorpsFamilyInfoRequest::CMessageGetCorpsFamilyInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetCorpsFamilyInfoRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageGetCorpsFamilyInfoRequest::CMessageGetCorpsFamilyInfoRequest(const CMessageGetCorpsFamilyInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetCorpsFamilyInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  msgcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetCorpsFamilyInfoRequest::~CMessageGetCorpsFamilyInfoRequest() {
  SharedDtor();
}

void CMessageGetCorpsFamilyInfoRequest::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageGetCorpsFamilyInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCorpsFamilyInfoRequest_descriptor_;
}

const CMessageGetCorpsFamilyInfoRequest& CMessageGetCorpsFamilyInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetCorpsFamilyInfoRequest* CMessageGetCorpsFamilyInfoRequest::default_instance_ = NULL;

CMessageGetCorpsFamilyInfoRequest* CMessageGetCorpsFamilyInfoRequest::New() const {
  return new CMessageGetCorpsFamilyInfoRequest;
}

void CMessageGetCorpsFamilyInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    msgcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetCorpsFamilyInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_MsgCode;
        break;
      }
      
      // optional uint32 MsgCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MsgCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &msgcode_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetCorpsFamilyInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetCorpsFamilyInfoRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 MsgCode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->msgcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetCorpsFamilyInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 MsgCode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->msgcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetCorpsFamilyInfoRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 MsgCode = 2;
    if (has_msgcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->msgcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetCorpsFamilyInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetCorpsFamilyInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetCorpsFamilyInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetCorpsFamilyInfoRequest::MergeFrom(const CMessageGetCorpsFamilyInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_msgcode(from.msgcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetCorpsFamilyInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCorpsFamilyInfoRequest::CopyFrom(const CMessageGetCorpsFamilyInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCorpsFamilyInfoRequest::Swap(CMessageGetCorpsFamilyInfoRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(msgcode_, other->msgcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetCorpsFamilyInfoRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetCorpsFamilyInfoRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetCorpsFamilyInfoRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCorpsFamilyInfoRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetCorpsFamilyInfoResponse::kCorpHeadFieldNumber;
const int CMessageGetCorpsFamilyInfoResponse::kCorpsMemberInfoFieldNumber;
#endif  // !_MSC_VER

CMessageGetCorpsFamilyInfoResponse::CMessageGetCorpsFamilyInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetCorpsFamilyInfoResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageGetCorpsFamilyInfoResponse::CMessageGetCorpsFamilyInfoResponse(const CMessageGetCorpsFamilyInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetCorpsFamilyInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetCorpsFamilyInfoResponse::~CMessageGetCorpsFamilyInfoResponse() {
  SharedDtor();
}

void CMessageGetCorpsFamilyInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageGetCorpsFamilyInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCorpsFamilyInfoResponse_descriptor_;
}

const CMessageGetCorpsFamilyInfoResponse& CMessageGetCorpsFamilyInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetCorpsFamilyInfoResponse* CMessageGetCorpsFamilyInfoResponse::default_instance_ = NULL;

CMessageGetCorpsFamilyInfoResponse* CMessageGetCorpsFamilyInfoResponse::New() const {
  return new CMessageGetCorpsFamilyInfoResponse;
}

void CMessageGetCorpsFamilyInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
  }
  corpsmemberinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetCorpsFamilyInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(18)) goto parse_CorpsMemberInfo;
        break;
      }
      
      // repeated .PBCorpsMember CorpsMemberInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsMemberInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_corpsmemberinfo()));
        if (input->ExpectTag(18)) goto parse_CorpsMemberInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetCorpsFamilyInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetCorpsFamilyInfoResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // repeated .PBCorpsMember CorpsMemberInfo = 2;
  for (int i = 0; i < this->corpsmemberinfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->corpsmemberinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetCorpsFamilyInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // repeated .PBCorpsMember CorpsMemberInfo = 2;
  for (int i = 0; i < this->corpsmemberinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->corpsmemberinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetCorpsFamilyInfoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
  }
  // repeated .PBCorpsMember CorpsMemberInfo = 2;
  total_size += 1 * this->corpsmemberinfo_size();
  for (int i = 0; i < this->corpsmemberinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->corpsmemberinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetCorpsFamilyInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetCorpsFamilyInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetCorpsFamilyInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetCorpsFamilyInfoResponse::MergeFrom(const CMessageGetCorpsFamilyInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  corpsmemberinfo_.MergeFrom(from.corpsmemberinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetCorpsFamilyInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCorpsFamilyInfoResponse::CopyFrom(const CMessageGetCorpsFamilyInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCorpsFamilyInfoResponse::Swap(CMessageGetCorpsFamilyInfoResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    corpsmemberinfo_.Swap(&other->corpsmemberinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetCorpsFamilyInfoResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetCorpsFamilyInfoResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetCorpsFamilyInfoResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCorpsFamilyInfoResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetCorpsPropertyRequest::kCorpHeadFieldNumber;
const int CMessageGetCorpsPropertyRequest::kMsgCodeFieldNumber;
#endif  // !_MSC_VER

CMessageGetCorpsPropertyRequest::CMessageGetCorpsPropertyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetCorpsPropertyRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageGetCorpsPropertyRequest::CMessageGetCorpsPropertyRequest(const CMessageGetCorpsPropertyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetCorpsPropertyRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  msgcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetCorpsPropertyRequest::~CMessageGetCorpsPropertyRequest() {
  SharedDtor();
}

void CMessageGetCorpsPropertyRequest::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageGetCorpsPropertyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCorpsPropertyRequest_descriptor_;
}

const CMessageGetCorpsPropertyRequest& CMessageGetCorpsPropertyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetCorpsPropertyRequest* CMessageGetCorpsPropertyRequest::default_instance_ = NULL;

CMessageGetCorpsPropertyRequest* CMessageGetCorpsPropertyRequest::New() const {
  return new CMessageGetCorpsPropertyRequest;
}

void CMessageGetCorpsPropertyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    msgcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetCorpsPropertyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_MsgCode;
        break;
      }
      
      // optional uint32 MsgCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MsgCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &msgcode_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetCorpsPropertyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetCorpsPropertyRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 MsgCode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->msgcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetCorpsPropertyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 MsgCode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->msgcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetCorpsPropertyRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 MsgCode = 2;
    if (has_msgcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->msgcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetCorpsPropertyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetCorpsPropertyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetCorpsPropertyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetCorpsPropertyRequest::MergeFrom(const CMessageGetCorpsPropertyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_msgcode(from.msgcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetCorpsPropertyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCorpsPropertyRequest::CopyFrom(const CMessageGetCorpsPropertyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCorpsPropertyRequest::Swap(CMessageGetCorpsPropertyRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(msgcode_, other->msgcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetCorpsPropertyRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetCorpsPropertyRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetCorpsPropertyRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCorpsPropertyRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetCorpsPropertyResponse::kCorpHeadFieldNumber;
const int CMessageGetCorpsPropertyResponse::kCorpPropertyFieldNumber;
#endif  // !_MSC_VER

CMessageGetCorpsPropertyResponse::CMessageGetCorpsPropertyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetCorpsPropertyResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
  corpproperty_ = const_cast< ::CorpsProperty*>(&::CorpsProperty::default_instance());
}

CMessageGetCorpsPropertyResponse::CMessageGetCorpsPropertyResponse(const CMessageGetCorpsPropertyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetCorpsPropertyResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  corpproperty_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetCorpsPropertyResponse::~CMessageGetCorpsPropertyResponse() {
  SharedDtor();
}

void CMessageGetCorpsPropertyResponse::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
    delete corpproperty_;
  }
}

const ::google::protobuf::Descriptor* CMessageGetCorpsPropertyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCorpsPropertyResponse_descriptor_;
}

const CMessageGetCorpsPropertyResponse& CMessageGetCorpsPropertyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetCorpsPropertyResponse* CMessageGetCorpsPropertyResponse::default_instance_ = NULL;

CMessageGetCorpsPropertyResponse* CMessageGetCorpsPropertyResponse::New() const {
  return new CMessageGetCorpsPropertyResponse;
}

void CMessageGetCorpsPropertyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    if (_has_bit(1)) {
      if (corpproperty_ != NULL) corpproperty_->::CorpsProperty::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetCorpsPropertyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(18)) goto parse_CorpProperty;
        break;
      }
      
      // optional .CorpsProperty CorpProperty = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpProperty:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corpproperty()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetCorpsPropertyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetCorpsPropertyResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional .CorpsProperty CorpProperty = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->corpproperty(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetCorpsPropertyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional .CorpsProperty CorpProperty = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->corpproperty(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetCorpsPropertyResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional .CorpsProperty CorpProperty = 2;
    if (has_corpproperty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corpproperty());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetCorpsPropertyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetCorpsPropertyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetCorpsPropertyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetCorpsPropertyResponse::MergeFrom(const CMessageGetCorpsPropertyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      mutable_corpproperty()->::CorpsProperty::MergeFrom(from.corpproperty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetCorpsPropertyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCorpsPropertyResponse::CopyFrom(const CMessageGetCorpsPropertyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCorpsPropertyResponse::Swap(CMessageGetCorpsPropertyResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(corpproperty_, other->corpproperty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetCorpsPropertyResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetCorpsPropertyResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetCorpsPropertyResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCorpsPropertyResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetCorpsFamilyMemberRequest::kCorpHeadFieldNumber;
const int CMessageGetCorpsFamilyMemberRequest::kFamilyIDFieldNumber;
#endif  // !_MSC_VER

CMessageGetCorpsFamilyMemberRequest::CMessageGetCorpsFamilyMemberRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetCorpsFamilyMemberRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageGetCorpsFamilyMemberRequest::CMessageGetCorpsFamilyMemberRequest(const CMessageGetCorpsFamilyMemberRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetCorpsFamilyMemberRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  familyid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetCorpsFamilyMemberRequest::~CMessageGetCorpsFamilyMemberRequest() {
  SharedDtor();
}

void CMessageGetCorpsFamilyMemberRequest::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageGetCorpsFamilyMemberRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCorpsFamilyMemberRequest_descriptor_;
}

const CMessageGetCorpsFamilyMemberRequest& CMessageGetCorpsFamilyMemberRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetCorpsFamilyMemberRequest* CMessageGetCorpsFamilyMemberRequest::default_instance_ = NULL;

CMessageGetCorpsFamilyMemberRequest* CMessageGetCorpsFamilyMemberRequest::New() const {
  return new CMessageGetCorpsFamilyMemberRequest;
}

void CMessageGetCorpsFamilyMemberRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    familyid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetCorpsFamilyMemberRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_FamilyID;
        break;
      }
      
      // optional uint32 FamilyID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetCorpsFamilyMemberRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetCorpsFamilyMemberRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 FamilyID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->familyid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetCorpsFamilyMemberRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 FamilyID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->familyid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetCorpsFamilyMemberRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 FamilyID = 2;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetCorpsFamilyMemberRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetCorpsFamilyMemberRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetCorpsFamilyMemberRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetCorpsFamilyMemberRequest::MergeFrom(const CMessageGetCorpsFamilyMemberRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_familyid(from.familyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetCorpsFamilyMemberRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCorpsFamilyMemberRequest::CopyFrom(const CMessageGetCorpsFamilyMemberRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCorpsFamilyMemberRequest::Swap(CMessageGetCorpsFamilyMemberRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(familyid_, other->familyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetCorpsFamilyMemberRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetCorpsFamilyMemberRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetCorpsFamilyMemberRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCorpsFamilyMemberRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageGetCorpsFamilyMemberResponse::_default_familyname_;
#ifndef _MSC_VER
const int CMessageGetCorpsFamilyMemberResponse::kCorpHeadFieldNumber;
const int CMessageGetCorpsFamilyMemberResponse::kFamilyIDFieldNumber;
const int CMessageGetCorpsFamilyMemberResponse::kFamilyNameFieldNumber;
const int CMessageGetCorpsFamilyMemberResponse::kMemberListFieldNumber;
#endif  // !_MSC_VER

CMessageGetCorpsFamilyMemberResponse::CMessageGetCorpsFamilyMemberResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetCorpsFamilyMemberResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
  memberlist_ = const_cast< ::PBFamilyMemberList*>(&::PBFamilyMemberList::default_instance());
}

CMessageGetCorpsFamilyMemberResponse::CMessageGetCorpsFamilyMemberResponse(const CMessageGetCorpsFamilyMemberResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetCorpsFamilyMemberResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  familyid_ = 0u;
  familyname_ = const_cast< ::std::string*>(&_default_familyname_);
  memberlist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetCorpsFamilyMemberResponse::~CMessageGetCorpsFamilyMemberResponse() {
  SharedDtor();
}

void CMessageGetCorpsFamilyMemberResponse::SharedDtor() {
  if (familyname_ != &_default_familyname_) {
    delete familyname_;
  }
  if (this != default_instance_) {
    delete corphead_;
    delete memberlist_;
  }
}

const ::google::protobuf::Descriptor* CMessageGetCorpsFamilyMemberResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCorpsFamilyMemberResponse_descriptor_;
}

const CMessageGetCorpsFamilyMemberResponse& CMessageGetCorpsFamilyMemberResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetCorpsFamilyMemberResponse* CMessageGetCorpsFamilyMemberResponse::default_instance_ = NULL;

CMessageGetCorpsFamilyMemberResponse* CMessageGetCorpsFamilyMemberResponse::New() const {
  return new CMessageGetCorpsFamilyMemberResponse;
}

void CMessageGetCorpsFamilyMemberResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    familyid_ = 0u;
    if (_has_bit(2)) {
      if (familyname_ != &_default_familyname_) {
        familyname_->clear();
      }
    }
    if (_has_bit(3)) {
      if (memberlist_ != NULL) memberlist_->::PBFamilyMemberList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetCorpsFamilyMemberResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_FamilyID;
        break;
      }
      
      // optional uint32 FamilyID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_FamilyName;
        break;
      }
      
      // optional string FamilyName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FamilyName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_familyname()));
        if (input->ExpectTag(34)) goto parse_MemberList;
        break;
      }
      
      // optional .PBFamilyMemberList MemberList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MemberList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_memberlist()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetCorpsFamilyMemberResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetCorpsFamilyMemberResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 FamilyID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->familyid(), output);
  }
  
  // optional string FamilyName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->familyname(), output);
  }
  
  // optional .PBFamilyMemberList MemberList = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->memberlist(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetCorpsFamilyMemberResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 FamilyID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->familyid(), target);
  }
  
  // optional string FamilyName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->familyname(), target);
  }
  
  // optional .PBFamilyMemberList MemberList = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(4, this->memberlist(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetCorpsFamilyMemberResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 FamilyID = 2;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
    // optional string FamilyName = 3;
    if (has_familyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->familyname());
    }
    
    // optional .PBFamilyMemberList MemberList = 4;
    if (has_memberlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->memberlist());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetCorpsFamilyMemberResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetCorpsFamilyMemberResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetCorpsFamilyMemberResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetCorpsFamilyMemberResponse::MergeFrom(const CMessageGetCorpsFamilyMemberResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_familyid(from.familyid());
    }
    if (from._has_bit(2)) {
      set_familyname(from.familyname());
    }
    if (from._has_bit(3)) {
      mutable_memberlist()->::PBFamilyMemberList::MergeFrom(from.memberlist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetCorpsFamilyMemberResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCorpsFamilyMemberResponse::CopyFrom(const CMessageGetCorpsFamilyMemberResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCorpsFamilyMemberResponse::Swap(CMessageGetCorpsFamilyMemberResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(familyid_, other->familyid_);
    std::swap(familyname_, other->familyname_);
    std::swap(memberlist_, other->memberlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetCorpsFamilyMemberResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetCorpsFamilyMemberResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetCorpsFamilyMemberResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCorpsFamilyMemberResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageChangeCorpsBulletinRequest::_default_bulletin_;
#ifndef _MSC_VER
const int CMessageChangeCorpsBulletinRequest::kCorpHeadFieldNumber;
const int CMessageChangeCorpsBulletinRequest::kBulletinFieldNumber;
#endif  // !_MSC_VER

CMessageChangeCorpsBulletinRequest::CMessageChangeCorpsBulletinRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeCorpsBulletinRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageChangeCorpsBulletinRequest::CMessageChangeCorpsBulletinRequest(const CMessageChangeCorpsBulletinRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeCorpsBulletinRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  bulletin_ = const_cast< ::std::string*>(&_default_bulletin_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeCorpsBulletinRequest::~CMessageChangeCorpsBulletinRequest() {
  SharedDtor();
}

void CMessageChangeCorpsBulletinRequest::SharedDtor() {
  if (bulletin_ != &_default_bulletin_) {
    delete bulletin_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageChangeCorpsBulletinRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeCorpsBulletinRequest_descriptor_;
}

const CMessageChangeCorpsBulletinRequest& CMessageChangeCorpsBulletinRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeCorpsBulletinRequest* CMessageChangeCorpsBulletinRequest::default_instance_ = NULL;

CMessageChangeCorpsBulletinRequest* CMessageChangeCorpsBulletinRequest::New() const {
  return new CMessageChangeCorpsBulletinRequest;
}

void CMessageChangeCorpsBulletinRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    if (_has_bit(1)) {
      if (bulletin_ != &_default_bulletin_) {
        bulletin_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeCorpsBulletinRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(18)) goto parse_Bulletin;
        break;
      }
      
      // optional string Bulletin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Bulletin:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_bulletin()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeCorpsBulletinRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeCorpsBulletinRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional string Bulletin = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->bulletin(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeCorpsBulletinRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional string Bulletin = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->bulletin(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeCorpsBulletinRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional string Bulletin = 2;
    if (has_bulletin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->bulletin());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeCorpsBulletinRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeCorpsBulletinRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeCorpsBulletinRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeCorpsBulletinRequest::MergeFrom(const CMessageChangeCorpsBulletinRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_bulletin(from.bulletin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeCorpsBulletinRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeCorpsBulletinRequest::CopyFrom(const CMessageChangeCorpsBulletinRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeCorpsBulletinRequest::Swap(CMessageChangeCorpsBulletinRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(bulletin_, other->bulletin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeCorpsBulletinRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeCorpsBulletinRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeCorpsBulletinRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeCorpsBulletinRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageChangeCorpsBulletinResponse::_default_bulletin_;
#ifndef _MSC_VER
const int CMessageChangeCorpsBulletinResponse::kCorpHeadFieldNumber;
const int CMessageChangeCorpsBulletinResponse::kErrcodeFieldNumber;
const int CMessageChangeCorpsBulletinResponse::kBulletinFieldNumber;
#endif  // !_MSC_VER

CMessageChangeCorpsBulletinResponse::CMessageChangeCorpsBulletinResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeCorpsBulletinResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageChangeCorpsBulletinResponse::CMessageChangeCorpsBulletinResponse(const CMessageChangeCorpsBulletinResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeCorpsBulletinResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  errcode_ = 0u;
  bulletin_ = const_cast< ::std::string*>(&_default_bulletin_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeCorpsBulletinResponse::~CMessageChangeCorpsBulletinResponse() {
  SharedDtor();
}

void CMessageChangeCorpsBulletinResponse::SharedDtor() {
  if (bulletin_ != &_default_bulletin_) {
    delete bulletin_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageChangeCorpsBulletinResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeCorpsBulletinResponse_descriptor_;
}

const CMessageChangeCorpsBulletinResponse& CMessageChangeCorpsBulletinResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeCorpsBulletinResponse* CMessageChangeCorpsBulletinResponse::default_instance_ = NULL;

CMessageChangeCorpsBulletinResponse* CMessageChangeCorpsBulletinResponse::New() const {
  return new CMessageChangeCorpsBulletinResponse;
}

void CMessageChangeCorpsBulletinResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    errcode_ = 0u;
    if (_has_bit(2)) {
      if (bulletin_ != &_default_bulletin_) {
        bulletin_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeCorpsBulletinResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_Bulletin;
        break;
      }
      
      // optional string Bulletin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Bulletin:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_bulletin()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeCorpsBulletinResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeCorpsBulletinResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  // optional string Bulletin = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->bulletin(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeCorpsBulletinResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  // optional string Bulletin = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->bulletin(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeCorpsBulletinResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional string Bulletin = 3;
    if (has_bulletin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->bulletin());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeCorpsBulletinResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeCorpsBulletinResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeCorpsBulletinResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeCorpsBulletinResponse::MergeFrom(const CMessageChangeCorpsBulletinResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(2)) {
      set_bulletin(from.bulletin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeCorpsBulletinResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeCorpsBulletinResponse::CopyFrom(const CMessageChangeCorpsBulletinResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeCorpsBulletinResponse::Swap(CMessageChangeCorpsBulletinResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(errcode_, other->errcode_);
    std::swap(bulletin_, other->bulletin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeCorpsBulletinResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeCorpsBulletinResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeCorpsBulletinResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeCorpsBulletinResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageChangeCorpsBulletinNotify::_default_bulletin_;
#ifndef _MSC_VER
const int CMessageChangeCorpsBulletinNotify::kCorpHeadFieldNumber;
const int CMessageChangeCorpsBulletinNotify::kBulletinFieldNumber;
#endif  // !_MSC_VER

CMessageChangeCorpsBulletinNotify::CMessageChangeCorpsBulletinNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeCorpsBulletinNotify::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageChangeCorpsBulletinNotify::CMessageChangeCorpsBulletinNotify(const CMessageChangeCorpsBulletinNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeCorpsBulletinNotify::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  bulletin_ = const_cast< ::std::string*>(&_default_bulletin_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeCorpsBulletinNotify::~CMessageChangeCorpsBulletinNotify() {
  SharedDtor();
}

void CMessageChangeCorpsBulletinNotify::SharedDtor() {
  if (bulletin_ != &_default_bulletin_) {
    delete bulletin_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageChangeCorpsBulletinNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeCorpsBulletinNotify_descriptor_;
}

const CMessageChangeCorpsBulletinNotify& CMessageChangeCorpsBulletinNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeCorpsBulletinNotify* CMessageChangeCorpsBulletinNotify::default_instance_ = NULL;

CMessageChangeCorpsBulletinNotify* CMessageChangeCorpsBulletinNotify::New() const {
  return new CMessageChangeCorpsBulletinNotify;
}

void CMessageChangeCorpsBulletinNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    if (_has_bit(1)) {
      if (bulletin_ != &_default_bulletin_) {
        bulletin_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeCorpsBulletinNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(18)) goto parse_Bulletin;
        break;
      }
      
      // optional string Bulletin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Bulletin:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_bulletin()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeCorpsBulletinNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeCorpsBulletinNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional string Bulletin = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->bulletin(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeCorpsBulletinNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional string Bulletin = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->bulletin(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeCorpsBulletinNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional string Bulletin = 2;
    if (has_bulletin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->bulletin());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeCorpsBulletinNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeCorpsBulletinNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeCorpsBulletinNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeCorpsBulletinNotify::MergeFrom(const CMessageChangeCorpsBulletinNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_bulletin(from.bulletin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeCorpsBulletinNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeCorpsBulletinNotify::CopyFrom(const CMessageChangeCorpsBulletinNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeCorpsBulletinNotify::Swap(CMessageChangeCorpsBulletinNotify* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(bulletin_, other->bulletin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeCorpsBulletinNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeCorpsBulletinNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeCorpsBulletinNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeCorpsBulletinNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageChangeCorpsHeaderRequest::kCorpHeadFieldNumber;
const int CMessageChangeCorpsHeaderRequest::kMemberIDFieldNumber;
#endif  // !_MSC_VER

CMessageChangeCorpsHeaderRequest::CMessageChangeCorpsHeaderRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeCorpsHeaderRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageChangeCorpsHeaderRequest::CMessageChangeCorpsHeaderRequest(const CMessageChangeCorpsHeaderRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeCorpsHeaderRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  memberid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeCorpsHeaderRequest::~CMessageChangeCorpsHeaderRequest() {
  SharedDtor();
}

void CMessageChangeCorpsHeaderRequest::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageChangeCorpsHeaderRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeCorpsHeaderRequest_descriptor_;
}

const CMessageChangeCorpsHeaderRequest& CMessageChangeCorpsHeaderRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeCorpsHeaderRequest* CMessageChangeCorpsHeaderRequest::default_instance_ = NULL;

CMessageChangeCorpsHeaderRequest* CMessageChangeCorpsHeaderRequest::New() const {
  return new CMessageChangeCorpsHeaderRequest;
}

void CMessageChangeCorpsHeaderRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    memberid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeCorpsHeaderRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_MemberID;
        break;
      }
      
      // optional uint32 MemberID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MemberID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &memberid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeCorpsHeaderRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeCorpsHeaderRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 MemberID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->memberid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeCorpsHeaderRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 MemberID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->memberid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeCorpsHeaderRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 MemberID = 2;
    if (has_memberid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->memberid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeCorpsHeaderRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeCorpsHeaderRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeCorpsHeaderRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeCorpsHeaderRequest::MergeFrom(const CMessageChangeCorpsHeaderRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_memberid(from.memberid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeCorpsHeaderRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeCorpsHeaderRequest::CopyFrom(const CMessageChangeCorpsHeaderRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeCorpsHeaderRequest::Swap(CMessageChangeCorpsHeaderRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(memberid_, other->memberid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeCorpsHeaderRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeCorpsHeaderRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeCorpsHeaderRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeCorpsHeaderRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageChangeCorpsHeaderResponse::_default_membername_;
#ifndef _MSC_VER
const int CMessageChangeCorpsHeaderResponse::kCorpHeadFieldNumber;
const int CMessageChangeCorpsHeaderResponse::kErrcodeFieldNumber;
const int CMessageChangeCorpsHeaderResponse::kMemberIDFieldNumber;
const int CMessageChangeCorpsHeaderResponse::kMemberNameFieldNumber;
#endif  // !_MSC_VER

CMessageChangeCorpsHeaderResponse::CMessageChangeCorpsHeaderResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeCorpsHeaderResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageChangeCorpsHeaderResponse::CMessageChangeCorpsHeaderResponse(const CMessageChangeCorpsHeaderResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeCorpsHeaderResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  errcode_ = 0u;
  memberid_ = 0u;
  membername_ = const_cast< ::std::string*>(&_default_membername_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeCorpsHeaderResponse::~CMessageChangeCorpsHeaderResponse() {
  SharedDtor();
}

void CMessageChangeCorpsHeaderResponse::SharedDtor() {
  if (membername_ != &_default_membername_) {
    delete membername_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageChangeCorpsHeaderResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeCorpsHeaderResponse_descriptor_;
}

const CMessageChangeCorpsHeaderResponse& CMessageChangeCorpsHeaderResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeCorpsHeaderResponse* CMessageChangeCorpsHeaderResponse::default_instance_ = NULL;

CMessageChangeCorpsHeaderResponse* CMessageChangeCorpsHeaderResponse::New() const {
  return new CMessageChangeCorpsHeaderResponse;
}

void CMessageChangeCorpsHeaderResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    errcode_ = 0u;
    memberid_ = 0u;
    if (_has_bit(3)) {
      if (membername_ != &_default_membername_) {
        membername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeCorpsHeaderResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_MemberID;
        break;
      }
      
      // optional uint32 MemberID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MemberID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &memberid_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_MemberName;
        break;
      }
      
      // optional string MemberName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MemberName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_membername()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeCorpsHeaderResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeCorpsHeaderResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  // optional uint32 MemberID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->memberid(), output);
  }
  
  // optional string MemberName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->membername(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeCorpsHeaderResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  // optional uint32 MemberID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->memberid(), target);
  }
  
  // optional string MemberName = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->membername(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeCorpsHeaderResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional uint32 MemberID = 3;
    if (has_memberid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->memberid());
    }
    
    // optional string MemberName = 4;
    if (has_membername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->membername());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeCorpsHeaderResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeCorpsHeaderResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeCorpsHeaderResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeCorpsHeaderResponse::MergeFrom(const CMessageChangeCorpsHeaderResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(2)) {
      set_memberid(from.memberid());
    }
    if (from._has_bit(3)) {
      set_membername(from.membername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeCorpsHeaderResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeCorpsHeaderResponse::CopyFrom(const CMessageChangeCorpsHeaderResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeCorpsHeaderResponse::Swap(CMessageChangeCorpsHeaderResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(errcode_, other->errcode_);
    std::swap(memberid_, other->memberid_);
    std::swap(membername_, other->membername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeCorpsHeaderResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeCorpsHeaderResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeCorpsHeaderResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeCorpsHeaderResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageChangeCorpsHeaderNotify::_default_headerrolename_;
const ::std::string CMessageChangeCorpsHeaderNotify::_default_memberrolename_;
#ifndef _MSC_VER
const int CMessageChangeCorpsHeaderNotify::kCorpHeadFieldNumber;
const int CMessageChangeCorpsHeaderNotify::kHeaderRoleIDFieldNumber;
const int CMessageChangeCorpsHeaderNotify::kHeaderRoleNameFieldNumber;
const int CMessageChangeCorpsHeaderNotify::kMemberRoleIDFieldNumber;
const int CMessageChangeCorpsHeaderNotify::kMemberRoleNameFieldNumber;
#endif  // !_MSC_VER

CMessageChangeCorpsHeaderNotify::CMessageChangeCorpsHeaderNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeCorpsHeaderNotify::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageChangeCorpsHeaderNotify::CMessageChangeCorpsHeaderNotify(const CMessageChangeCorpsHeaderNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeCorpsHeaderNotify::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  headerroleid_ = 0u;
  headerrolename_ = const_cast< ::std::string*>(&_default_headerrolename_);
  memberroleid_ = 0u;
  memberrolename_ = const_cast< ::std::string*>(&_default_memberrolename_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeCorpsHeaderNotify::~CMessageChangeCorpsHeaderNotify() {
  SharedDtor();
}

void CMessageChangeCorpsHeaderNotify::SharedDtor() {
  if (headerrolename_ != &_default_headerrolename_) {
    delete headerrolename_;
  }
  if (memberrolename_ != &_default_memberrolename_) {
    delete memberrolename_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageChangeCorpsHeaderNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeCorpsHeaderNotify_descriptor_;
}

const CMessageChangeCorpsHeaderNotify& CMessageChangeCorpsHeaderNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeCorpsHeaderNotify* CMessageChangeCorpsHeaderNotify::default_instance_ = NULL;

CMessageChangeCorpsHeaderNotify* CMessageChangeCorpsHeaderNotify::New() const {
  return new CMessageChangeCorpsHeaderNotify;
}

void CMessageChangeCorpsHeaderNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    headerroleid_ = 0u;
    if (_has_bit(2)) {
      if (headerrolename_ != &_default_headerrolename_) {
        headerrolename_->clear();
      }
    }
    memberroleid_ = 0u;
    if (_has_bit(4)) {
      if (memberrolename_ != &_default_memberrolename_) {
        memberrolename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeCorpsHeaderNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_HeaderRoleID;
        break;
      }
      
      // optional uint32 HeaderRoleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HeaderRoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &headerroleid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_HeaderRoleName;
        break;
      }
      
      // optional string HeaderRoleName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_HeaderRoleName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_headerrolename()));
        if (input->ExpectTag(32)) goto parse_MemberRoleID;
        break;
      }
      
      // optional uint32 MemberRoleID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MemberRoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &memberroleid_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_MemberRoleName;
        break;
      }
      
      // optional string MemberRoleName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MemberRoleName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_memberrolename()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeCorpsHeaderNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeCorpsHeaderNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 HeaderRoleID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->headerroleid(), output);
  }
  
  // optional string HeaderRoleName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->headerrolename(), output);
  }
  
  // optional uint32 MemberRoleID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->memberroleid(), output);
  }
  
  // optional string MemberRoleName = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->memberrolename(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeCorpsHeaderNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 HeaderRoleID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->headerroleid(), target);
  }
  
  // optional string HeaderRoleName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->headerrolename(), target);
  }
  
  // optional uint32 MemberRoleID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->memberroleid(), target);
  }
  
  // optional string MemberRoleName = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->memberrolename(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeCorpsHeaderNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 HeaderRoleID = 2;
    if (has_headerroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->headerroleid());
    }
    
    // optional string HeaderRoleName = 3;
    if (has_headerrolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->headerrolename());
    }
    
    // optional uint32 MemberRoleID = 4;
    if (has_memberroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->memberroleid());
    }
    
    // optional string MemberRoleName = 5;
    if (has_memberrolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->memberrolename());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeCorpsHeaderNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeCorpsHeaderNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeCorpsHeaderNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeCorpsHeaderNotify::MergeFrom(const CMessageChangeCorpsHeaderNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_headerroleid(from.headerroleid());
    }
    if (from._has_bit(2)) {
      set_headerrolename(from.headerrolename());
    }
    if (from._has_bit(3)) {
      set_memberroleid(from.memberroleid());
    }
    if (from._has_bit(4)) {
      set_memberrolename(from.memberrolename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeCorpsHeaderNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeCorpsHeaderNotify::CopyFrom(const CMessageChangeCorpsHeaderNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeCorpsHeaderNotify::Swap(CMessageChangeCorpsHeaderNotify* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(headerroleid_, other->headerroleid_);
    std::swap(headerrolename_, other->headerrolename_);
    std::swap(memberroleid_, other->memberroleid_);
    std::swap(memberrolename_, other->memberrolename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeCorpsHeaderNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeCorpsHeaderNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeCorpsHeaderNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeCorpsHeaderNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetCorpsApplyListRequest::kCorpHeadFieldNumber;
const int CMessageGetCorpsApplyListRequest::kMsgCodeFieldNumber;
#endif  // !_MSC_VER

CMessageGetCorpsApplyListRequest::CMessageGetCorpsApplyListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetCorpsApplyListRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageGetCorpsApplyListRequest::CMessageGetCorpsApplyListRequest(const CMessageGetCorpsApplyListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetCorpsApplyListRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  msgcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetCorpsApplyListRequest::~CMessageGetCorpsApplyListRequest() {
  SharedDtor();
}

void CMessageGetCorpsApplyListRequest::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageGetCorpsApplyListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCorpsApplyListRequest_descriptor_;
}

const CMessageGetCorpsApplyListRequest& CMessageGetCorpsApplyListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetCorpsApplyListRequest* CMessageGetCorpsApplyListRequest::default_instance_ = NULL;

CMessageGetCorpsApplyListRequest* CMessageGetCorpsApplyListRequest::New() const {
  return new CMessageGetCorpsApplyListRequest;
}

void CMessageGetCorpsApplyListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    msgcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetCorpsApplyListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_MsgCode;
        break;
      }
      
      // optional uint32 MsgCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MsgCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &msgcode_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetCorpsApplyListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetCorpsApplyListRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 MsgCode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->msgcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetCorpsApplyListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 MsgCode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->msgcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetCorpsApplyListRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 MsgCode = 2;
    if (has_msgcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->msgcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetCorpsApplyListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetCorpsApplyListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetCorpsApplyListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetCorpsApplyListRequest::MergeFrom(const CMessageGetCorpsApplyListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_msgcode(from.msgcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetCorpsApplyListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCorpsApplyListRequest::CopyFrom(const CMessageGetCorpsApplyListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCorpsApplyListRequest::Swap(CMessageGetCorpsApplyListRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(msgcode_, other->msgcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetCorpsApplyListRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetCorpsApplyListRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetCorpsApplyListRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCorpsApplyListRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetCorpsApplyListResponse::kCorpHeadFieldNumber;
const int CMessageGetCorpsApplyListResponse::kMsgCodeFieldNumber;
const int CMessageGetCorpsApplyListResponse::kCorpsApplyFieldNumber;
#endif  // !_MSC_VER

CMessageGetCorpsApplyListResponse::CMessageGetCorpsApplyListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetCorpsApplyListResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
  corpsapply_ = const_cast< ::PBCorpsApplyList*>(&::PBCorpsApplyList::default_instance());
}

CMessageGetCorpsApplyListResponse::CMessageGetCorpsApplyListResponse(const CMessageGetCorpsApplyListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetCorpsApplyListResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  msgcode_ = 0u;
  corpsapply_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetCorpsApplyListResponse::~CMessageGetCorpsApplyListResponse() {
  SharedDtor();
}

void CMessageGetCorpsApplyListResponse::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
    delete corpsapply_;
  }
}

const ::google::protobuf::Descriptor* CMessageGetCorpsApplyListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCorpsApplyListResponse_descriptor_;
}

const CMessageGetCorpsApplyListResponse& CMessageGetCorpsApplyListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetCorpsApplyListResponse* CMessageGetCorpsApplyListResponse::default_instance_ = NULL;

CMessageGetCorpsApplyListResponse* CMessageGetCorpsApplyListResponse::New() const {
  return new CMessageGetCorpsApplyListResponse;
}

void CMessageGetCorpsApplyListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    msgcode_ = 0u;
    if (_has_bit(2)) {
      if (corpsapply_ != NULL) corpsapply_->::PBCorpsApplyList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetCorpsApplyListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_MsgCode;
        break;
      }
      
      // optional uint32 MsgCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MsgCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &msgcode_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_CorpsApply;
        break;
      }
      
      // optional .PBCorpsApplyList CorpsApply = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsApply:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corpsapply()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetCorpsApplyListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetCorpsApplyListResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 MsgCode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->msgcode(), output);
  }
  
  // optional .PBCorpsApplyList CorpsApply = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->corpsapply(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetCorpsApplyListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 MsgCode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->msgcode(), target);
  }
  
  // optional .PBCorpsApplyList CorpsApply = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->corpsapply(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetCorpsApplyListResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 MsgCode = 2;
    if (has_msgcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->msgcode());
    }
    
    // optional .PBCorpsApplyList CorpsApply = 3;
    if (has_corpsapply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corpsapply());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetCorpsApplyListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetCorpsApplyListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetCorpsApplyListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetCorpsApplyListResponse::MergeFrom(const CMessageGetCorpsApplyListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_msgcode(from.msgcode());
    }
    if (from._has_bit(2)) {
      mutable_corpsapply()->::PBCorpsApplyList::MergeFrom(from.corpsapply());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetCorpsApplyListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCorpsApplyListResponse::CopyFrom(const CMessageGetCorpsApplyListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCorpsApplyListResponse::Swap(CMessageGetCorpsApplyListResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(msgcode_, other->msgcode_);
    std::swap(corpsapply_, other->corpsapply_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetCorpsApplyListResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetCorpsApplyListResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetCorpsApplyListResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCorpsApplyListResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageDisbandCorpsRequest::kCorpHeadFieldNumber;
const int CMessageDisbandCorpsRequest::kNpcEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageDisbandCorpsRequest::CMessageDisbandCorpsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageDisbandCorpsRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageDisbandCorpsRequest::CMessageDisbandCorpsRequest(const CMessageDisbandCorpsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageDisbandCorpsRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  npcentityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageDisbandCorpsRequest::~CMessageDisbandCorpsRequest() {
  SharedDtor();
}

void CMessageDisbandCorpsRequest::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageDisbandCorpsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageDisbandCorpsRequest_descriptor_;
}

const CMessageDisbandCorpsRequest& CMessageDisbandCorpsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageDisbandCorpsRequest* CMessageDisbandCorpsRequest::default_instance_ = NULL;

CMessageDisbandCorpsRequest* CMessageDisbandCorpsRequest::New() const {
  return new CMessageDisbandCorpsRequest;
}

void CMessageDisbandCorpsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    npcentityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageDisbandCorpsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_NpcEntityID;
        break;
      }
      
      // optional uint32 NpcEntityID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcEntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcentityid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageDisbandCorpsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageDisbandCorpsRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 NpcEntityID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->npcentityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageDisbandCorpsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 NpcEntityID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->npcentityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageDisbandCorpsRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 NpcEntityID = 2;
    if (has_npcentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcentityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageDisbandCorpsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageDisbandCorpsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageDisbandCorpsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageDisbandCorpsRequest::MergeFrom(const CMessageDisbandCorpsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_npcentityid(from.npcentityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageDisbandCorpsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDisbandCorpsRequest::CopyFrom(const CMessageDisbandCorpsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDisbandCorpsRequest::Swap(CMessageDisbandCorpsRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(npcentityid_, other->npcentityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageDisbandCorpsRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageDisbandCorpsRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageDisbandCorpsRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageDisbandCorpsRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageDisbandCorpsResponse::kCorpHeadFieldNumber;
const int CMessageDisbandCorpsResponse::kErrcodeFieldNumber;
#endif  // !_MSC_VER

CMessageDisbandCorpsResponse::CMessageDisbandCorpsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageDisbandCorpsResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageDisbandCorpsResponse::CMessageDisbandCorpsResponse(const CMessageDisbandCorpsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageDisbandCorpsResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageDisbandCorpsResponse::~CMessageDisbandCorpsResponse() {
  SharedDtor();
}

void CMessageDisbandCorpsResponse::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageDisbandCorpsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageDisbandCorpsResponse_descriptor_;
}

const CMessageDisbandCorpsResponse& CMessageDisbandCorpsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageDisbandCorpsResponse* CMessageDisbandCorpsResponse::default_instance_ = NULL;

CMessageDisbandCorpsResponse* CMessageDisbandCorpsResponse::New() const {
  return new CMessageDisbandCorpsResponse;
}

void CMessageDisbandCorpsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageDisbandCorpsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageDisbandCorpsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageDisbandCorpsResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageDisbandCorpsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageDisbandCorpsResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageDisbandCorpsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageDisbandCorpsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageDisbandCorpsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageDisbandCorpsResponse::MergeFrom(const CMessageDisbandCorpsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageDisbandCorpsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDisbandCorpsResponse::CopyFrom(const CMessageDisbandCorpsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDisbandCorpsResponse::Swap(CMessageDisbandCorpsResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageDisbandCorpsResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageDisbandCorpsResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageDisbandCorpsResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageDisbandCorpsResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageDisbandCorpsNotify::kCorpHeadFieldNumber;
const int CMessageDisbandCorpsNotify::kMsgCodeFieldNumber;
#endif  // !_MSC_VER

CMessageDisbandCorpsNotify::CMessageDisbandCorpsNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageDisbandCorpsNotify::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageDisbandCorpsNotify::CMessageDisbandCorpsNotify(const CMessageDisbandCorpsNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageDisbandCorpsNotify::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  msgcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageDisbandCorpsNotify::~CMessageDisbandCorpsNotify() {
  SharedDtor();
}

void CMessageDisbandCorpsNotify::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageDisbandCorpsNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageDisbandCorpsNotify_descriptor_;
}

const CMessageDisbandCorpsNotify& CMessageDisbandCorpsNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageDisbandCorpsNotify* CMessageDisbandCorpsNotify::default_instance_ = NULL;

CMessageDisbandCorpsNotify* CMessageDisbandCorpsNotify::New() const {
  return new CMessageDisbandCorpsNotify;
}

void CMessageDisbandCorpsNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    msgcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageDisbandCorpsNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_MsgCode;
        break;
      }
      
      // optional uint32 MsgCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MsgCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &msgcode_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageDisbandCorpsNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageDisbandCorpsNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 MsgCode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->msgcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageDisbandCorpsNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 MsgCode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->msgcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageDisbandCorpsNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 MsgCode = 2;
    if (has_msgcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->msgcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageDisbandCorpsNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageDisbandCorpsNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageDisbandCorpsNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageDisbandCorpsNotify::MergeFrom(const CMessageDisbandCorpsNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_msgcode(from.msgcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageDisbandCorpsNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDisbandCorpsNotify::CopyFrom(const CMessageDisbandCorpsNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDisbandCorpsNotify::Swap(CMessageDisbandCorpsNotify* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(msgcode_, other->msgcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageDisbandCorpsNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageDisbandCorpsNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageDisbandCorpsNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageDisbandCorpsNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCancelCorpsDisbandRequest::kCorpHeadFieldNumber;
const int CMessageCancelCorpsDisbandRequest::kMsgCodeFieldNumber;
#endif  // !_MSC_VER

CMessageCancelCorpsDisbandRequest::CMessageCancelCorpsDisbandRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCancelCorpsDisbandRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCancelCorpsDisbandRequest::CMessageCancelCorpsDisbandRequest(const CMessageCancelCorpsDisbandRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCancelCorpsDisbandRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  msgcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCancelCorpsDisbandRequest::~CMessageCancelCorpsDisbandRequest() {
  SharedDtor();
}

void CMessageCancelCorpsDisbandRequest::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCancelCorpsDisbandRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCancelCorpsDisbandRequest_descriptor_;
}

const CMessageCancelCorpsDisbandRequest& CMessageCancelCorpsDisbandRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCancelCorpsDisbandRequest* CMessageCancelCorpsDisbandRequest::default_instance_ = NULL;

CMessageCancelCorpsDisbandRequest* CMessageCancelCorpsDisbandRequest::New() const {
  return new CMessageCancelCorpsDisbandRequest;
}

void CMessageCancelCorpsDisbandRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    msgcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCancelCorpsDisbandRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_MsgCode;
        break;
      }
      
      // optional uint32 MsgCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MsgCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &msgcode_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCancelCorpsDisbandRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCancelCorpsDisbandRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 MsgCode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->msgcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCancelCorpsDisbandRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 MsgCode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->msgcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCancelCorpsDisbandRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 MsgCode = 2;
    if (has_msgcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->msgcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCancelCorpsDisbandRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCancelCorpsDisbandRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCancelCorpsDisbandRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCancelCorpsDisbandRequest::MergeFrom(const CMessageCancelCorpsDisbandRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_msgcode(from.msgcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCancelCorpsDisbandRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCancelCorpsDisbandRequest::CopyFrom(const CMessageCancelCorpsDisbandRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCancelCorpsDisbandRequest::Swap(CMessageCancelCorpsDisbandRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(msgcode_, other->msgcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCancelCorpsDisbandRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCancelCorpsDisbandRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCancelCorpsDisbandRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCancelCorpsDisbandRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCancelCorpsDisbandResponse::kCorpHeadFieldNumber;
const int CMessageCancelCorpsDisbandResponse::kErrCodeFieldNumber;
#endif  // !_MSC_VER

CMessageCancelCorpsDisbandResponse::CMessageCancelCorpsDisbandResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCancelCorpsDisbandResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCancelCorpsDisbandResponse::CMessageCancelCorpsDisbandResponse(const CMessageCancelCorpsDisbandResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCancelCorpsDisbandResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCancelCorpsDisbandResponse::~CMessageCancelCorpsDisbandResponse() {
  SharedDtor();
}

void CMessageCancelCorpsDisbandResponse::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCancelCorpsDisbandResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCancelCorpsDisbandResponse_descriptor_;
}

const CMessageCancelCorpsDisbandResponse& CMessageCancelCorpsDisbandResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCancelCorpsDisbandResponse* CMessageCancelCorpsDisbandResponse::default_instance_ = NULL;

CMessageCancelCorpsDisbandResponse* CMessageCancelCorpsDisbandResponse::New() const {
  return new CMessageCancelCorpsDisbandResponse;
}

void CMessageCancelCorpsDisbandResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCancelCorpsDisbandResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_ErrCode;
        break;
      }
      
      // optional uint32 ErrCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ErrCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCancelCorpsDisbandResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCancelCorpsDisbandResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 ErrCode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCancelCorpsDisbandResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 ErrCode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCancelCorpsDisbandResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 ErrCode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCancelCorpsDisbandResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCancelCorpsDisbandResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCancelCorpsDisbandResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCancelCorpsDisbandResponse::MergeFrom(const CMessageCancelCorpsDisbandResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCancelCorpsDisbandResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCancelCorpsDisbandResponse::CopyFrom(const CMessageCancelCorpsDisbandResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCancelCorpsDisbandResponse::Swap(CMessageCancelCorpsDisbandResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCancelCorpsDisbandResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCancelCorpsDisbandResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCancelCorpsDisbandResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCancelCorpsDisbandResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageClearCorpsApplyRequest::kCorpHeadFieldNumber;
const int CMessageClearCorpsApplyRequest::kMsgCodeFieldNumber;
#endif  // !_MSC_VER

CMessageClearCorpsApplyRequest::CMessageClearCorpsApplyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageClearCorpsApplyRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageClearCorpsApplyRequest::CMessageClearCorpsApplyRequest(const CMessageClearCorpsApplyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageClearCorpsApplyRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  msgcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageClearCorpsApplyRequest::~CMessageClearCorpsApplyRequest() {
  SharedDtor();
}

void CMessageClearCorpsApplyRequest::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageClearCorpsApplyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageClearCorpsApplyRequest_descriptor_;
}

const CMessageClearCorpsApplyRequest& CMessageClearCorpsApplyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageClearCorpsApplyRequest* CMessageClearCorpsApplyRequest::default_instance_ = NULL;

CMessageClearCorpsApplyRequest* CMessageClearCorpsApplyRequest::New() const {
  return new CMessageClearCorpsApplyRequest;
}

void CMessageClearCorpsApplyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    msgcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageClearCorpsApplyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_MsgCode;
        break;
      }
      
      // optional uint32 MsgCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MsgCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &msgcode_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageClearCorpsApplyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageClearCorpsApplyRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 MsgCode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->msgcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageClearCorpsApplyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 MsgCode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->msgcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageClearCorpsApplyRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 MsgCode = 2;
    if (has_msgcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->msgcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageClearCorpsApplyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageClearCorpsApplyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageClearCorpsApplyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageClearCorpsApplyRequest::MergeFrom(const CMessageClearCorpsApplyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_msgcode(from.msgcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageClearCorpsApplyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageClearCorpsApplyRequest::CopyFrom(const CMessageClearCorpsApplyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageClearCorpsApplyRequest::Swap(CMessageClearCorpsApplyRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(msgcode_, other->msgcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageClearCorpsApplyRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageClearCorpsApplyRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageClearCorpsApplyRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageClearCorpsApplyRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageClearCorpsApplyResponse::kCorpHeadFieldNumber;
const int CMessageClearCorpsApplyResponse::kErrCodeFieldNumber;
#endif  // !_MSC_VER

CMessageClearCorpsApplyResponse::CMessageClearCorpsApplyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageClearCorpsApplyResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageClearCorpsApplyResponse::CMessageClearCorpsApplyResponse(const CMessageClearCorpsApplyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageClearCorpsApplyResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageClearCorpsApplyResponse::~CMessageClearCorpsApplyResponse() {
  SharedDtor();
}

void CMessageClearCorpsApplyResponse::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageClearCorpsApplyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageClearCorpsApplyResponse_descriptor_;
}

const CMessageClearCorpsApplyResponse& CMessageClearCorpsApplyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageClearCorpsApplyResponse* CMessageClearCorpsApplyResponse::default_instance_ = NULL;

CMessageClearCorpsApplyResponse* CMessageClearCorpsApplyResponse::New() const {
  return new CMessageClearCorpsApplyResponse;
}

void CMessageClearCorpsApplyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageClearCorpsApplyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_ErrCode;
        break;
      }
      
      // optional uint32 ErrCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ErrCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageClearCorpsApplyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageClearCorpsApplyResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 ErrCode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageClearCorpsApplyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 ErrCode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageClearCorpsApplyResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 ErrCode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageClearCorpsApplyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageClearCorpsApplyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageClearCorpsApplyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageClearCorpsApplyResponse::MergeFrom(const CMessageClearCorpsApplyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageClearCorpsApplyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageClearCorpsApplyResponse::CopyFrom(const CMessageClearCorpsApplyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageClearCorpsApplyResponse::Swap(CMessageClearCorpsApplyResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageClearCorpsApplyResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageClearCorpsApplyResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageClearCorpsApplyResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageClearCorpsApplyResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageRefreshCorpsInfoRequest::kCorpHeadFieldNumber;
const int CMessageRefreshCorpsInfoRequest::kMsgCodeFieldNumber;
#endif  // !_MSC_VER

CMessageRefreshCorpsInfoRequest::CMessageRefreshCorpsInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRefreshCorpsInfoRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageRefreshCorpsInfoRequest::CMessageRefreshCorpsInfoRequest(const CMessageRefreshCorpsInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRefreshCorpsInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  msgcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRefreshCorpsInfoRequest::~CMessageRefreshCorpsInfoRequest() {
  SharedDtor();
}

void CMessageRefreshCorpsInfoRequest::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageRefreshCorpsInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRefreshCorpsInfoRequest_descriptor_;
}

const CMessageRefreshCorpsInfoRequest& CMessageRefreshCorpsInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRefreshCorpsInfoRequest* CMessageRefreshCorpsInfoRequest::default_instance_ = NULL;

CMessageRefreshCorpsInfoRequest* CMessageRefreshCorpsInfoRequest::New() const {
  return new CMessageRefreshCorpsInfoRequest;
}

void CMessageRefreshCorpsInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    msgcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRefreshCorpsInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_MsgCode;
        break;
      }
      
      // optional uint32 MsgCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MsgCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &msgcode_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageRefreshCorpsInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRefreshCorpsInfoRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 MsgCode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->msgcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRefreshCorpsInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 MsgCode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->msgcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRefreshCorpsInfoRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 MsgCode = 2;
    if (has_msgcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->msgcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRefreshCorpsInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRefreshCorpsInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRefreshCorpsInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRefreshCorpsInfoRequest::MergeFrom(const CMessageRefreshCorpsInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_msgcode(from.msgcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRefreshCorpsInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRefreshCorpsInfoRequest::CopyFrom(const CMessageRefreshCorpsInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRefreshCorpsInfoRequest::Swap(CMessageRefreshCorpsInfoRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(msgcode_, other->msgcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRefreshCorpsInfoRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRefreshCorpsInfoRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRefreshCorpsInfoRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRefreshCorpsInfoRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageRefreshCorpsInfoResponse::kCorpHeadFieldNumber;
const int CMessageRefreshCorpsInfoResponse::kCorpsMemberFieldNumber;
#endif  // !_MSC_VER

CMessageRefreshCorpsInfoResponse::CMessageRefreshCorpsInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRefreshCorpsInfoResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageRefreshCorpsInfoResponse::CMessageRefreshCorpsInfoResponse(const CMessageRefreshCorpsInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRefreshCorpsInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRefreshCorpsInfoResponse::~CMessageRefreshCorpsInfoResponse() {
  SharedDtor();
}

void CMessageRefreshCorpsInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageRefreshCorpsInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRefreshCorpsInfoResponse_descriptor_;
}

const CMessageRefreshCorpsInfoResponse& CMessageRefreshCorpsInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRefreshCorpsInfoResponse* CMessageRefreshCorpsInfoResponse::default_instance_ = NULL;

CMessageRefreshCorpsInfoResponse* CMessageRefreshCorpsInfoResponse::New() const {
  return new CMessageRefreshCorpsInfoResponse;
}

void CMessageRefreshCorpsInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
  }
  corpsmember_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRefreshCorpsInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(18)) goto parse_CorpsMember;
        break;
      }
      
      // repeated .PBCorpsMember CorpsMember = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsMember:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_corpsmember()));
        if (input->ExpectTag(18)) goto parse_CorpsMember;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageRefreshCorpsInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRefreshCorpsInfoResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // repeated .PBCorpsMember CorpsMember = 2;
  for (int i = 0; i < this->corpsmember_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->corpsmember(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRefreshCorpsInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // repeated .PBCorpsMember CorpsMember = 2;
  for (int i = 0; i < this->corpsmember_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->corpsmember(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRefreshCorpsInfoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
  }
  // repeated .PBCorpsMember CorpsMember = 2;
  total_size += 1 * this->corpsmember_size();
  for (int i = 0; i < this->corpsmember_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->corpsmember(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRefreshCorpsInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRefreshCorpsInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRefreshCorpsInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRefreshCorpsInfoResponse::MergeFrom(const CMessageRefreshCorpsInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  corpsmember_.MergeFrom(from.corpsmember_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRefreshCorpsInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRefreshCorpsInfoResponse::CopyFrom(const CMessageRefreshCorpsInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRefreshCorpsInfoResponse::Swap(CMessageRefreshCorpsInfoResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    corpsmember_.Swap(&other->corpsmember_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRefreshCorpsInfoResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRefreshCorpsInfoResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRefreshCorpsInfoResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRefreshCorpsInfoResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetCorpsListRequest::kCorpHeadFieldNumber;
const int CMessageGetCorpsListRequest::kCurPageFieldNumber;
#endif  // !_MSC_VER

CMessageGetCorpsListRequest::CMessageGetCorpsListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetCorpsListRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageGetCorpsListRequest::CMessageGetCorpsListRequest(const CMessageGetCorpsListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetCorpsListRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  curpage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetCorpsListRequest::~CMessageGetCorpsListRequest() {
  SharedDtor();
}

void CMessageGetCorpsListRequest::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageGetCorpsListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCorpsListRequest_descriptor_;
}

const CMessageGetCorpsListRequest& CMessageGetCorpsListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetCorpsListRequest* CMessageGetCorpsListRequest::default_instance_ = NULL;

CMessageGetCorpsListRequest* CMessageGetCorpsListRequest::New() const {
  return new CMessageGetCorpsListRequest;
}

void CMessageGetCorpsListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    curpage_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetCorpsListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_CurPage;
        break;
      }
      
      // optional uint32 CurPage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CurPage:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &curpage_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetCorpsListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetCorpsListRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 CurPage = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->curpage(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetCorpsListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 CurPage = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->curpage(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetCorpsListRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 CurPage = 2;
    if (has_curpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->curpage());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetCorpsListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetCorpsListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetCorpsListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetCorpsListRequest::MergeFrom(const CMessageGetCorpsListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_curpage(from.curpage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetCorpsListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCorpsListRequest::CopyFrom(const CMessageGetCorpsListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCorpsListRequest::Swap(CMessageGetCorpsListRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(curpage_, other->curpage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetCorpsListRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetCorpsListRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetCorpsListRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCorpsListRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetCorpsListResponse::kCorpHeadFieldNumber;
const int CMessageGetCorpsListResponse::kCorpsListFieldNumber;
const int CMessageGetCorpsListResponse::kCurPageFieldNumber;
const int CMessageGetCorpsListResponse::kTotalPageFieldNumber;
#endif  // !_MSC_VER

CMessageGetCorpsListResponse::CMessageGetCorpsListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetCorpsListResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
  corpslist_ = const_cast< ::CorpsInfoList*>(&::CorpsInfoList::default_instance());
}

CMessageGetCorpsListResponse::CMessageGetCorpsListResponse(const CMessageGetCorpsListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetCorpsListResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  corpslist_ = NULL;
  curpage_ = 0u;
  totalpage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetCorpsListResponse::~CMessageGetCorpsListResponse() {
  SharedDtor();
}

void CMessageGetCorpsListResponse::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
    delete corpslist_;
  }
}

const ::google::protobuf::Descriptor* CMessageGetCorpsListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCorpsListResponse_descriptor_;
}

const CMessageGetCorpsListResponse& CMessageGetCorpsListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetCorpsListResponse* CMessageGetCorpsListResponse::default_instance_ = NULL;

CMessageGetCorpsListResponse* CMessageGetCorpsListResponse::New() const {
  return new CMessageGetCorpsListResponse;
}

void CMessageGetCorpsListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    if (_has_bit(1)) {
      if (corpslist_ != NULL) corpslist_->::CorpsInfoList::Clear();
    }
    curpage_ = 0u;
    totalpage_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetCorpsListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(18)) goto parse_CorpsList;
        break;
      }
      
      // optional .CorpsInfoList CorpsList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corpslist()));
        if (input->ExpectTag(24)) goto parse_CurPage;
        break;
      }
      
      // optional uint32 CurPage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CurPage:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &curpage_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_TotalPage;
        break;
      }
      
      // optional uint32 TotalPage = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TotalPage:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &totalpage_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetCorpsListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetCorpsListResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional .CorpsInfoList CorpsList = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->corpslist(), output);
  }
  
  // optional uint32 CurPage = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->curpage(), output);
  }
  
  // optional uint32 TotalPage = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->totalpage(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetCorpsListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional .CorpsInfoList CorpsList = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->corpslist(), target);
  }
  
  // optional uint32 CurPage = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->curpage(), target);
  }
  
  // optional uint32 TotalPage = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->totalpage(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetCorpsListResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional .CorpsInfoList CorpsList = 2;
    if (has_corpslist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corpslist());
    }
    
    // optional uint32 CurPage = 3;
    if (has_curpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->curpage());
    }
    
    // optional uint32 TotalPage = 4;
    if (has_totalpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->totalpage());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetCorpsListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetCorpsListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetCorpsListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetCorpsListResponse::MergeFrom(const CMessageGetCorpsListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      mutable_corpslist()->::CorpsInfoList::MergeFrom(from.corpslist());
    }
    if (from._has_bit(2)) {
      set_curpage(from.curpage());
    }
    if (from._has_bit(3)) {
      set_totalpage(from.totalpage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetCorpsListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCorpsListResponse::CopyFrom(const CMessageGetCorpsListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCorpsListResponse::Swap(CMessageGetCorpsListResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(corpslist_, other->corpslist_);
    std::swap(curpage_, other->curpage_);
    std::swap(totalpage_, other->totalpage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetCorpsListResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetCorpsListResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetCorpsListResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCorpsListResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageSetCorpsPostRequest::kCorpHeadFieldNumber;
const int CMessageSetCorpsPostRequest::kMemberIDFieldNumber;
const int CMessageSetCorpsPostRequest::kPostFieldNumber;
#endif  // !_MSC_VER

CMessageSetCorpsPostRequest::CMessageSetCorpsPostRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageSetCorpsPostRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageSetCorpsPostRequest::CMessageSetCorpsPostRequest(const CMessageSetCorpsPostRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageSetCorpsPostRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  memberid_ = 0u;
  post_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageSetCorpsPostRequest::~CMessageSetCorpsPostRequest() {
  SharedDtor();
}

void CMessageSetCorpsPostRequest::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageSetCorpsPostRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageSetCorpsPostRequest_descriptor_;
}

const CMessageSetCorpsPostRequest& CMessageSetCorpsPostRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageSetCorpsPostRequest* CMessageSetCorpsPostRequest::default_instance_ = NULL;

CMessageSetCorpsPostRequest* CMessageSetCorpsPostRequest::New() const {
  return new CMessageSetCorpsPostRequest;
}

void CMessageSetCorpsPostRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    memberid_ = 0u;
    post_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageSetCorpsPostRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_MemberID;
        break;
      }
      
      // optional uint32 MemberID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MemberID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &memberid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Post;
        break;
      }
      
      // optional uint32 Post = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Post:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &post_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageSetCorpsPostRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageSetCorpsPostRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 MemberID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->memberid(), output);
  }
  
  // optional uint32 Post = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->post(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageSetCorpsPostRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 MemberID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->memberid(), target);
  }
  
  // optional uint32 Post = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->post(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageSetCorpsPostRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 MemberID = 2;
    if (has_memberid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->memberid());
    }
    
    // optional uint32 Post = 3;
    if (has_post()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->post());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageSetCorpsPostRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageSetCorpsPostRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageSetCorpsPostRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageSetCorpsPostRequest::MergeFrom(const CMessageSetCorpsPostRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_memberid(from.memberid());
    }
    if (from._has_bit(2)) {
      set_post(from.post());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageSetCorpsPostRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSetCorpsPostRequest::CopyFrom(const CMessageSetCorpsPostRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSetCorpsPostRequest::Swap(CMessageSetCorpsPostRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(memberid_, other->memberid_);
    std::swap(post_, other->post_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageSetCorpsPostRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageSetCorpsPostRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageSetCorpsPostRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageSetCorpsPostRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageSetCorpsPostResponse::kCorpHeadFieldNumber;
const int CMessageSetCorpsPostResponse::kMemberIDFieldNumber;
const int CMessageSetCorpsPostResponse::kPostFieldNumber;
const int CMessageSetCorpsPostResponse::kErrcodeFieldNumber;
#endif  // !_MSC_VER

CMessageSetCorpsPostResponse::CMessageSetCorpsPostResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageSetCorpsPostResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageSetCorpsPostResponse::CMessageSetCorpsPostResponse(const CMessageSetCorpsPostResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageSetCorpsPostResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  memberid_ = 0u;
  post_ = 0u;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageSetCorpsPostResponse::~CMessageSetCorpsPostResponse() {
  SharedDtor();
}

void CMessageSetCorpsPostResponse::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageSetCorpsPostResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageSetCorpsPostResponse_descriptor_;
}

const CMessageSetCorpsPostResponse& CMessageSetCorpsPostResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageSetCorpsPostResponse* CMessageSetCorpsPostResponse::default_instance_ = NULL;

CMessageSetCorpsPostResponse* CMessageSetCorpsPostResponse::New() const {
  return new CMessageSetCorpsPostResponse;
}

void CMessageSetCorpsPostResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    memberid_ = 0u;
    post_ = 0u;
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageSetCorpsPostResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_MemberID;
        break;
      }
      
      // optional uint32 MemberID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MemberID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &memberid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Post;
        break;
      }
      
      // optional uint32 Post = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Post:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &post_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageSetCorpsPostResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageSetCorpsPostResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 MemberID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->memberid(), output);
  }
  
  // optional uint32 Post = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->post(), output);
  }
  
  // optional uint32 Errcode = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageSetCorpsPostResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 MemberID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->memberid(), target);
  }
  
  // optional uint32 Post = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->post(), target);
  }
  
  // optional uint32 Errcode = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageSetCorpsPostResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 MemberID = 2;
    if (has_memberid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->memberid());
    }
    
    // optional uint32 Post = 3;
    if (has_post()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->post());
    }
    
    // optional uint32 Errcode = 4;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageSetCorpsPostResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageSetCorpsPostResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageSetCorpsPostResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageSetCorpsPostResponse::MergeFrom(const CMessageSetCorpsPostResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_memberid(from.memberid());
    }
    if (from._has_bit(2)) {
      set_post(from.post());
    }
    if (from._has_bit(3)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageSetCorpsPostResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSetCorpsPostResponse::CopyFrom(const CMessageSetCorpsPostResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSetCorpsPostResponse::Swap(CMessageSetCorpsPostResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(memberid_, other->memberid_);
    std::swap(post_, other->post_);
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageSetCorpsPostResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageSetCorpsPostResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageSetCorpsPostResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageSetCorpsPostResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLevelUPCorpsRequest::kCorpHeadFieldNumber;
const int CMessageLevelUPCorpsRequest::kMsgCodeFieldNumber;
#endif  // !_MSC_VER

CMessageLevelUPCorpsRequest::CMessageLevelUPCorpsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLevelUPCorpsRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageLevelUPCorpsRequest::CMessageLevelUPCorpsRequest(const CMessageLevelUPCorpsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLevelUPCorpsRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  msgcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLevelUPCorpsRequest::~CMessageLevelUPCorpsRequest() {
  SharedDtor();
}

void CMessageLevelUPCorpsRequest::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageLevelUPCorpsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLevelUPCorpsRequest_descriptor_;
}

const CMessageLevelUPCorpsRequest& CMessageLevelUPCorpsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageLevelUPCorpsRequest* CMessageLevelUPCorpsRequest::default_instance_ = NULL;

CMessageLevelUPCorpsRequest* CMessageLevelUPCorpsRequest::New() const {
  return new CMessageLevelUPCorpsRequest;
}

void CMessageLevelUPCorpsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    msgcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLevelUPCorpsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_MsgCode;
        break;
      }
      
      // optional uint32 MsgCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MsgCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &msgcode_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLevelUPCorpsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLevelUPCorpsRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 MsgCode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->msgcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLevelUPCorpsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 MsgCode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->msgcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLevelUPCorpsRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 MsgCode = 2;
    if (has_msgcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->msgcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLevelUPCorpsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLevelUPCorpsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLevelUPCorpsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLevelUPCorpsRequest::MergeFrom(const CMessageLevelUPCorpsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_msgcode(from.msgcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLevelUPCorpsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLevelUPCorpsRequest::CopyFrom(const CMessageLevelUPCorpsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLevelUPCorpsRequest::Swap(CMessageLevelUPCorpsRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(msgcode_, other->msgcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLevelUPCorpsRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLevelUPCorpsRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLevelUPCorpsRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLevelUPCorpsRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLevelUPCorpsResponse::kCorpHeadFieldNumber;
const int CMessageLevelUPCorpsResponse::kErrcodeFieldNumber;
const int CMessageLevelUPCorpsResponse::kLevelFieldNumber;
#endif  // !_MSC_VER

CMessageLevelUPCorpsResponse::CMessageLevelUPCorpsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLevelUPCorpsResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageLevelUPCorpsResponse::CMessageLevelUPCorpsResponse(const CMessageLevelUPCorpsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLevelUPCorpsResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  errcode_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLevelUPCorpsResponse::~CMessageLevelUPCorpsResponse() {
  SharedDtor();
}

void CMessageLevelUPCorpsResponse::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageLevelUPCorpsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLevelUPCorpsResponse_descriptor_;
}

const CMessageLevelUPCorpsResponse& CMessageLevelUPCorpsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageLevelUPCorpsResponse* CMessageLevelUPCorpsResponse::default_instance_ = NULL;

CMessageLevelUPCorpsResponse* CMessageLevelUPCorpsResponse::New() const {
  return new CMessageLevelUPCorpsResponse;
}

void CMessageLevelUPCorpsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    errcode_ = 0u;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLevelUPCorpsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLevelUPCorpsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLevelUPCorpsResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  // optional uint32 Level = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLevelUPCorpsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  // optional uint32 Level = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLevelUPCorpsResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional uint32 Level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLevelUPCorpsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLevelUPCorpsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLevelUPCorpsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLevelUPCorpsResponse::MergeFrom(const CMessageLevelUPCorpsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(2)) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLevelUPCorpsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLevelUPCorpsResponse::CopyFrom(const CMessageLevelUPCorpsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLevelUPCorpsResponse::Swap(CMessageLevelUPCorpsResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(errcode_, other->errcode_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLevelUPCorpsResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLevelUPCorpsResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLevelUPCorpsResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLevelUPCorpsResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageContributeCorpsMoneyRequest::kCorpHeadFieldNumber;
const int CMessageContributeCorpsMoneyRequest::kMoneyFieldNumber;
#endif  // !_MSC_VER

CMessageContributeCorpsMoneyRequest::CMessageContributeCorpsMoneyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageContributeCorpsMoneyRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageContributeCorpsMoneyRequest::CMessageContributeCorpsMoneyRequest(const CMessageContributeCorpsMoneyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageContributeCorpsMoneyRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  money_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageContributeCorpsMoneyRequest::~CMessageContributeCorpsMoneyRequest() {
  SharedDtor();
}

void CMessageContributeCorpsMoneyRequest::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageContributeCorpsMoneyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageContributeCorpsMoneyRequest_descriptor_;
}

const CMessageContributeCorpsMoneyRequest& CMessageContributeCorpsMoneyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageContributeCorpsMoneyRequest* CMessageContributeCorpsMoneyRequest::default_instance_ = NULL;

CMessageContributeCorpsMoneyRequest* CMessageContributeCorpsMoneyRequest::New() const {
  return new CMessageContributeCorpsMoneyRequest;
}

void CMessageContributeCorpsMoneyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    money_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageContributeCorpsMoneyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_Money;
        break;
      }
      
      // optional uint32 Money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageContributeCorpsMoneyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageContributeCorpsMoneyRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 Money = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->money(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageContributeCorpsMoneyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 Money = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->money(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageContributeCorpsMoneyRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 Money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageContributeCorpsMoneyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageContributeCorpsMoneyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageContributeCorpsMoneyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageContributeCorpsMoneyRequest::MergeFrom(const CMessageContributeCorpsMoneyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageContributeCorpsMoneyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageContributeCorpsMoneyRequest::CopyFrom(const CMessageContributeCorpsMoneyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageContributeCorpsMoneyRequest::Swap(CMessageContributeCorpsMoneyRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageContributeCorpsMoneyRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageContributeCorpsMoneyRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageContributeCorpsMoneyRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageContributeCorpsMoneyRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageContributeCorpsMoneyResponse::kCorpHeadFieldNumber;
const int CMessageContributeCorpsMoneyResponse::kErrcodeFieldNumber;
const int CMessageContributeCorpsMoneyResponse::kMoneyFieldNumber;
#endif  // !_MSC_VER

CMessageContributeCorpsMoneyResponse::CMessageContributeCorpsMoneyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageContributeCorpsMoneyResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageContributeCorpsMoneyResponse::CMessageContributeCorpsMoneyResponse(const CMessageContributeCorpsMoneyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageContributeCorpsMoneyResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  errcode_ = 0u;
  money_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageContributeCorpsMoneyResponse::~CMessageContributeCorpsMoneyResponse() {
  SharedDtor();
}

void CMessageContributeCorpsMoneyResponse::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageContributeCorpsMoneyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageContributeCorpsMoneyResponse_descriptor_;
}

const CMessageContributeCorpsMoneyResponse& CMessageContributeCorpsMoneyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageContributeCorpsMoneyResponse* CMessageContributeCorpsMoneyResponse::default_instance_ = NULL;

CMessageContributeCorpsMoneyResponse* CMessageContributeCorpsMoneyResponse::New() const {
  return new CMessageContributeCorpsMoneyResponse;
}

void CMessageContributeCorpsMoneyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    errcode_ = 0u;
    money_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageContributeCorpsMoneyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Money;
        break;
      }
      
      // optional uint32 Money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageContributeCorpsMoneyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageContributeCorpsMoneyResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  // optional uint32 Money = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->money(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageContributeCorpsMoneyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  // optional uint32 Money = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->money(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageContributeCorpsMoneyResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional uint32 Money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageContributeCorpsMoneyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageContributeCorpsMoneyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageContributeCorpsMoneyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageContributeCorpsMoneyResponse::MergeFrom(const CMessageContributeCorpsMoneyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(2)) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageContributeCorpsMoneyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageContributeCorpsMoneyResponse::CopyFrom(const CMessageContributeCorpsMoneyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageContributeCorpsMoneyResponse::Swap(CMessageContributeCorpsMoneyResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(errcode_, other->errcode_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageContributeCorpsMoneyResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageContributeCorpsMoneyResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageContributeCorpsMoneyResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageContributeCorpsMoneyResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageFamilyContributeMoneyRequest::kCorpHeadFieldNumber;
const int CMessageFamilyContributeMoneyRequest::kMoneyFieldNumber;
#endif  // !_MSC_VER

CMessageFamilyContributeMoneyRequest::CMessageFamilyContributeMoneyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFamilyContributeMoneyRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageFamilyContributeMoneyRequest::CMessageFamilyContributeMoneyRequest(const CMessageFamilyContributeMoneyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFamilyContributeMoneyRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  money_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFamilyContributeMoneyRequest::~CMessageFamilyContributeMoneyRequest() {
  SharedDtor();
}

void CMessageFamilyContributeMoneyRequest::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageFamilyContributeMoneyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFamilyContributeMoneyRequest_descriptor_;
}

const CMessageFamilyContributeMoneyRequest& CMessageFamilyContributeMoneyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFamilyContributeMoneyRequest* CMessageFamilyContributeMoneyRequest::default_instance_ = NULL;

CMessageFamilyContributeMoneyRequest* CMessageFamilyContributeMoneyRequest::New() const {
  return new CMessageFamilyContributeMoneyRequest;
}

void CMessageFamilyContributeMoneyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    money_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFamilyContributeMoneyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_Money;
        break;
      }
      
      // optional uint32 Money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageFamilyContributeMoneyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFamilyContributeMoneyRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 Money = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->money(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFamilyContributeMoneyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 Money = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->money(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFamilyContributeMoneyRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 Money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFamilyContributeMoneyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFamilyContributeMoneyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFamilyContributeMoneyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFamilyContributeMoneyRequest::MergeFrom(const CMessageFamilyContributeMoneyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFamilyContributeMoneyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFamilyContributeMoneyRequest::CopyFrom(const CMessageFamilyContributeMoneyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFamilyContributeMoneyRequest::Swap(CMessageFamilyContributeMoneyRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFamilyContributeMoneyRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFamilyContributeMoneyRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFamilyContributeMoneyRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFamilyContributeMoneyRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageFamilyContributeMoneyResponse::kCorpHeadFieldNumber;
const int CMessageFamilyContributeMoneyResponse::kErrcodeFieldNumber;
const int CMessageFamilyContributeMoneyResponse::kMoneyFieldNumber;
#endif  // !_MSC_VER

CMessageFamilyContributeMoneyResponse::CMessageFamilyContributeMoneyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFamilyContributeMoneyResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageFamilyContributeMoneyResponse::CMessageFamilyContributeMoneyResponse(const CMessageFamilyContributeMoneyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFamilyContributeMoneyResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  errcode_ = 0u;
  money_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFamilyContributeMoneyResponse::~CMessageFamilyContributeMoneyResponse() {
  SharedDtor();
}

void CMessageFamilyContributeMoneyResponse::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageFamilyContributeMoneyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFamilyContributeMoneyResponse_descriptor_;
}

const CMessageFamilyContributeMoneyResponse& CMessageFamilyContributeMoneyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFamilyContributeMoneyResponse* CMessageFamilyContributeMoneyResponse::default_instance_ = NULL;

CMessageFamilyContributeMoneyResponse* CMessageFamilyContributeMoneyResponse::New() const {
  return new CMessageFamilyContributeMoneyResponse;
}

void CMessageFamilyContributeMoneyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    errcode_ = 0u;
    money_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFamilyContributeMoneyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Money;
        break;
      }
      
      // optional uint32 Money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageFamilyContributeMoneyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFamilyContributeMoneyResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  // optional uint32 Money = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->money(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFamilyContributeMoneyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  // optional uint32 Money = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->money(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFamilyContributeMoneyResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional uint32 Money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFamilyContributeMoneyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFamilyContributeMoneyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFamilyContributeMoneyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFamilyContributeMoneyResponse::MergeFrom(const CMessageFamilyContributeMoneyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(2)) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFamilyContributeMoneyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFamilyContributeMoneyResponse::CopyFrom(const CMessageFamilyContributeMoneyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFamilyContributeMoneyResponse::Swap(CMessageFamilyContributeMoneyResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(errcode_, other->errcode_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFamilyContributeMoneyResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFamilyContributeMoneyResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFamilyContributeMoneyResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFamilyContributeMoneyResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageSetMemberNameRequest::_default_name_;
#ifndef _MSC_VER
const int CMessageSetMemberNameRequest::kCorpHeadFieldNumber;
const int CMessageSetMemberNameRequest::kMemberIDFieldNumber;
const int CMessageSetMemberNameRequest::kNameFieldNumber;
#endif  // !_MSC_VER

CMessageSetMemberNameRequest::CMessageSetMemberNameRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageSetMemberNameRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageSetMemberNameRequest::CMessageSetMemberNameRequest(const CMessageSetMemberNameRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageSetMemberNameRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  memberid_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageSetMemberNameRequest::~CMessageSetMemberNameRequest() {
  SharedDtor();
}

void CMessageSetMemberNameRequest::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageSetMemberNameRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageSetMemberNameRequest_descriptor_;
}

const CMessageSetMemberNameRequest& CMessageSetMemberNameRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageSetMemberNameRequest* CMessageSetMemberNameRequest::default_instance_ = NULL;

CMessageSetMemberNameRequest* CMessageSetMemberNameRequest::New() const {
  return new CMessageSetMemberNameRequest;
}

void CMessageSetMemberNameRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    memberid_ = 0u;
    if (_has_bit(2)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageSetMemberNameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_MemberID;
        break;
      }
      
      // optional uint32 MemberID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MemberID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &memberid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_Name;
        break;
      }
      
      // optional string Name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageSetMemberNameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageSetMemberNameRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 MemberID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->memberid(), output);
  }
  
  // optional string Name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageSetMemberNameRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 MemberID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->memberid(), target);
  }
  
  // optional string Name = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageSetMemberNameRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 MemberID = 2;
    if (has_memberid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->memberid());
    }
    
    // optional string Name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageSetMemberNameRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageSetMemberNameRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageSetMemberNameRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageSetMemberNameRequest::MergeFrom(const CMessageSetMemberNameRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_memberid(from.memberid());
    }
    if (from._has_bit(2)) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageSetMemberNameRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSetMemberNameRequest::CopyFrom(const CMessageSetMemberNameRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSetMemberNameRequest::Swap(CMessageSetMemberNameRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(memberid_, other->memberid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageSetMemberNameRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageSetMemberNameRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageSetMemberNameRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageSetMemberNameRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageSetMemberNameResponse::_default_name_;
#ifndef _MSC_VER
const int CMessageSetMemberNameResponse::kCorpHeadFieldNumber;
const int CMessageSetMemberNameResponse::kErrcodeFieldNumber;
const int CMessageSetMemberNameResponse::kMemberIDFieldNumber;
const int CMessageSetMemberNameResponse::kNameFieldNumber;
#endif  // !_MSC_VER

CMessageSetMemberNameResponse::CMessageSetMemberNameResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageSetMemberNameResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageSetMemberNameResponse::CMessageSetMemberNameResponse(const CMessageSetMemberNameResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageSetMemberNameResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  errcode_ = 0u;
  memberid_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageSetMemberNameResponse::~CMessageSetMemberNameResponse() {
  SharedDtor();
}

void CMessageSetMemberNameResponse::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageSetMemberNameResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageSetMemberNameResponse_descriptor_;
}

const CMessageSetMemberNameResponse& CMessageSetMemberNameResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageSetMemberNameResponse* CMessageSetMemberNameResponse::default_instance_ = NULL;

CMessageSetMemberNameResponse* CMessageSetMemberNameResponse::New() const {
  return new CMessageSetMemberNameResponse;
}

void CMessageSetMemberNameResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    errcode_ = 0u;
    memberid_ = 0u;
    if (_has_bit(3)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageSetMemberNameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_MemberID;
        break;
      }
      
      // optional uint32 MemberID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MemberID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &memberid_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_Name;
        break;
      }
      
      // optional string Name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageSetMemberNameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageSetMemberNameResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  // optional uint32 MemberID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->memberid(), output);
  }
  
  // optional string Name = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageSetMemberNameResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  // optional uint32 MemberID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->memberid(), target);
  }
  
  // optional string Name = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageSetMemberNameResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional uint32 MemberID = 3;
    if (has_memberid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->memberid());
    }
    
    // optional string Name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageSetMemberNameResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageSetMemberNameResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageSetMemberNameResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageSetMemberNameResponse::MergeFrom(const CMessageSetMemberNameResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(2)) {
      set_memberid(from.memberid());
    }
    if (from._has_bit(3)) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageSetMemberNameResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSetMemberNameResponse::CopyFrom(const CMessageSetMemberNameResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSetMemberNameResponse::Swap(CMessageSetMemberNameResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(errcode_, other->errcode_);
    std::swap(memberid_, other->memberid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageSetMemberNameResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageSetMemberNameResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageSetMemberNameResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageSetMemberNameResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageSetCorpsPostNotify::_default_managername_;
const ::std::string CMessageSetCorpsPostNotify::_default_membername_;
#ifndef _MSC_VER
const int CMessageSetCorpsPostNotify::kCorpHeadFieldNumber;
const int CMessageSetCorpsPostNotify::kManagerIDFieldNumber;
const int CMessageSetCorpsPostNotify::kManagerNameFieldNumber;
const int CMessageSetCorpsPostNotify::kMemberIDFieldNumber;
const int CMessageSetCorpsPostNotify::kMemberNameFieldNumber;
const int CMessageSetCorpsPostNotify::kOriginalPostFieldNumber;
const int CMessageSetCorpsPostNotify::kNewPostFieldNumber;
#endif  // !_MSC_VER

CMessageSetCorpsPostNotify::CMessageSetCorpsPostNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageSetCorpsPostNotify::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageSetCorpsPostNotify::CMessageSetCorpsPostNotify(const CMessageSetCorpsPostNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageSetCorpsPostNotify::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  managerid_ = 0u;
  managername_ = const_cast< ::std::string*>(&_default_managername_);
  memberid_ = 0u;
  membername_ = const_cast< ::std::string*>(&_default_membername_);
  originalpost_ = 0u;
  newpost_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageSetCorpsPostNotify::~CMessageSetCorpsPostNotify() {
  SharedDtor();
}

void CMessageSetCorpsPostNotify::SharedDtor() {
  if (managername_ != &_default_managername_) {
    delete managername_;
  }
  if (membername_ != &_default_membername_) {
    delete membername_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageSetCorpsPostNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageSetCorpsPostNotify_descriptor_;
}

const CMessageSetCorpsPostNotify& CMessageSetCorpsPostNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageSetCorpsPostNotify* CMessageSetCorpsPostNotify::default_instance_ = NULL;

CMessageSetCorpsPostNotify* CMessageSetCorpsPostNotify::New() const {
  return new CMessageSetCorpsPostNotify;
}

void CMessageSetCorpsPostNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    managerid_ = 0u;
    if (_has_bit(2)) {
      if (managername_ != &_default_managername_) {
        managername_->clear();
      }
    }
    memberid_ = 0u;
    if (_has_bit(4)) {
      if (membername_ != &_default_membername_) {
        membername_->clear();
      }
    }
    originalpost_ = 0u;
    newpost_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageSetCorpsPostNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_ManagerID;
        break;
      }
      
      // optional uint32 ManagerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ManagerID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &managerid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_ManagerName;
        break;
      }
      
      // optional string ManagerName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ManagerName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_managername()));
        if (input->ExpectTag(32)) goto parse_MemberID;
        break;
      }
      
      // optional uint32 MemberID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MemberID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &memberid_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_MemberName;
        break;
      }
      
      // optional string MemberName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MemberName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_membername()));
        if (input->ExpectTag(48)) goto parse_OriginalPost;
        break;
      }
      
      // optional uint32 OriginalPost = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OriginalPost:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &originalpost_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_NewPost;
        break;
      }
      
      // optional uint32 NewPost = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NewPost:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &newpost_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageSetCorpsPostNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageSetCorpsPostNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 ManagerID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->managerid(), output);
  }
  
  // optional string ManagerName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->managername(), output);
  }
  
  // optional uint32 MemberID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->memberid(), output);
  }
  
  // optional string MemberName = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->membername(), output);
  }
  
  // optional uint32 OriginalPost = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->originalpost(), output);
  }
  
  // optional uint32 NewPost = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->newpost(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageSetCorpsPostNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 ManagerID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->managerid(), target);
  }
  
  // optional string ManagerName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->managername(), target);
  }
  
  // optional uint32 MemberID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->memberid(), target);
  }
  
  // optional string MemberName = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->membername(), target);
  }
  
  // optional uint32 OriginalPost = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->originalpost(), target);
  }
  
  // optional uint32 NewPost = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->newpost(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageSetCorpsPostNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 ManagerID = 2;
    if (has_managerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->managerid());
    }
    
    // optional string ManagerName = 3;
    if (has_managername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->managername());
    }
    
    // optional uint32 MemberID = 4;
    if (has_memberid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->memberid());
    }
    
    // optional string MemberName = 5;
    if (has_membername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->membername());
    }
    
    // optional uint32 OriginalPost = 6;
    if (has_originalpost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->originalpost());
    }
    
    // optional uint32 NewPost = 7;
    if (has_newpost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->newpost());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageSetCorpsPostNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageSetCorpsPostNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageSetCorpsPostNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageSetCorpsPostNotify::MergeFrom(const CMessageSetCorpsPostNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_managerid(from.managerid());
    }
    if (from._has_bit(2)) {
      set_managername(from.managername());
    }
    if (from._has_bit(3)) {
      set_memberid(from.memberid());
    }
    if (from._has_bit(4)) {
      set_membername(from.membername());
    }
    if (from._has_bit(5)) {
      set_originalpost(from.originalpost());
    }
    if (from._has_bit(6)) {
      set_newpost(from.newpost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageSetCorpsPostNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSetCorpsPostNotify::CopyFrom(const CMessageSetCorpsPostNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSetCorpsPostNotify::Swap(CMessageSetCorpsPostNotify* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(managerid_, other->managerid_);
    std::swap(managername_, other->managername_);
    std::swap(memberid_, other->memberid_);
    std::swap(membername_, other->membername_);
    std::swap(originalpost_, other->originalpost_);
    std::swap(newpost_, other->newpost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageSetCorpsPostNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageSetCorpsPostNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageSetCorpsPostNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageSetCorpsPostNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCorpsLevelUPNotify::kCorpHeadFieldNumber;
const int CMessageCorpsLevelUPNotify::kLevelFieldNumber;
const int CMessageCorpsLevelUPNotify::kMoneyFieldNumber;
const int CMessageCorpsLevelUPNotify::kGloryFieldNumber;
const int CMessageCorpsLevelUPNotify::kMaxFamilyNumFieldNumber;
const int CMessageCorpsLevelUPNotify::kMaxGeneralNumFieldNumber;
const int CMessageCorpsLevelUPNotify::kMaxCounsellorNumFieldNumber;
const int CMessageCorpsLevelUPNotify::kLevelMoneyFieldNumber;
const int CMessageCorpsLevelUPNotify::kLevelGloryFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsLevelUPNotify::CMessageCorpsLevelUPNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsLevelUPNotify::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsLevelUPNotify::CMessageCorpsLevelUPNotify(const CMessageCorpsLevelUPNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsLevelUPNotify::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  level_ = 0u;
  money_ = 0u;
  glory_ = 0u;
  maxfamilynum_ = 0u;
  maxgeneralnum_ = 0u;
  maxcounsellornum_ = 0u;
  levelmoney_ = 0u;
  levelglory_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsLevelUPNotify::~CMessageCorpsLevelUPNotify() {
  SharedDtor();
}

void CMessageCorpsLevelUPNotify::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsLevelUPNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsLevelUPNotify_descriptor_;
}

const CMessageCorpsLevelUPNotify& CMessageCorpsLevelUPNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsLevelUPNotify* CMessageCorpsLevelUPNotify::default_instance_ = NULL;

CMessageCorpsLevelUPNotify* CMessageCorpsLevelUPNotify::New() const {
  return new CMessageCorpsLevelUPNotify;
}

void CMessageCorpsLevelUPNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    level_ = 0u;
    money_ = 0u;
    glory_ = 0u;
    maxfamilynum_ = 0u;
    maxgeneralnum_ = 0u;
    maxcounsellornum_ = 0u;
    levelmoney_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    levelglory_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsLevelUPNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Money;
        break;
      }
      
      // optional uint32 Money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Glory;
        break;
      }
      
      // optional uint32 Glory = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Glory:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &glory_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_MaxFamilyNum;
        break;
      }
      
      // optional uint32 MaxFamilyNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxFamilyNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxfamilynum_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_MaxGeneralNum;
        break;
      }
      
      // optional uint32 MaxGeneralNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxGeneralNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxgeneralnum_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_MaxCounsellorNum;
        break;
      }
      
      // optional uint32 MaxCounsellorNum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxCounsellorNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxcounsellornum_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_LevelMoney;
        break;
      }
      
      // optional uint32 LevelMoney = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LevelMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &levelmoney_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_LevelGlory;
        break;
      }
      
      // optional uint32 LevelGlory = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LevelGlory:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &levelglory_));
        _set_bit(8);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsLevelUPNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsLevelUPNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 Level = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->level(), output);
  }
  
  // optional uint32 Money = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->money(), output);
  }
  
  // optional uint32 Glory = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->glory(), output);
  }
  
  // optional uint32 MaxFamilyNum = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->maxfamilynum(), output);
  }
  
  // optional uint32 MaxGeneralNum = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->maxgeneralnum(), output);
  }
  
  // optional uint32 MaxCounsellorNum = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->maxcounsellornum(), output);
  }
  
  // optional uint32 LevelMoney = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->levelmoney(), output);
  }
  
  // optional uint32 LevelGlory = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->levelglory(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsLevelUPNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 Level = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->level(), target);
  }
  
  // optional uint32 Money = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->money(), target);
  }
  
  // optional uint32 Glory = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->glory(), target);
  }
  
  // optional uint32 MaxFamilyNum = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->maxfamilynum(), target);
  }
  
  // optional uint32 MaxGeneralNum = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->maxgeneralnum(), target);
  }
  
  // optional uint32 MaxCounsellorNum = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->maxcounsellornum(), target);
  }
  
  // optional uint32 LevelMoney = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->levelmoney(), target);
  }
  
  // optional uint32 LevelGlory = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->levelglory(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsLevelUPNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 Level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
    // optional uint32 Money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
    // optional uint32 Glory = 4;
    if (has_glory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->glory());
    }
    
    // optional uint32 MaxFamilyNum = 5;
    if (has_maxfamilynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxfamilynum());
    }
    
    // optional uint32 MaxGeneralNum = 6;
    if (has_maxgeneralnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxgeneralnum());
    }
    
    // optional uint32 MaxCounsellorNum = 7;
    if (has_maxcounsellornum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxcounsellornum());
    }
    
    // optional uint32 LevelMoney = 8;
    if (has_levelmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->levelmoney());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 LevelGlory = 9;
    if (has_levelglory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->levelglory());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsLevelUPNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsLevelUPNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsLevelUPNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsLevelUPNotify::MergeFrom(const CMessageCorpsLevelUPNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_level(from.level());
    }
    if (from._has_bit(2)) {
      set_money(from.money());
    }
    if (from._has_bit(3)) {
      set_glory(from.glory());
    }
    if (from._has_bit(4)) {
      set_maxfamilynum(from.maxfamilynum());
    }
    if (from._has_bit(5)) {
      set_maxgeneralnum(from.maxgeneralnum());
    }
    if (from._has_bit(6)) {
      set_maxcounsellornum(from.maxcounsellornum());
    }
    if (from._has_bit(7)) {
      set_levelmoney(from.levelmoney());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_levelglory(from.levelglory());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsLevelUPNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsLevelUPNotify::CopyFrom(const CMessageCorpsLevelUPNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsLevelUPNotify::Swap(CMessageCorpsLevelUPNotify* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(level_, other->level_);
    std::swap(money_, other->money_);
    std::swap(glory_, other->glory_);
    std::swap(maxfamilynum_, other->maxfamilynum_);
    std::swap(maxgeneralnum_, other->maxgeneralnum_);
    std::swap(maxcounsellornum_, other->maxcounsellornum_);
    std::swap(levelmoney_, other->levelmoney_);
    std::swap(levelglory_, other->levelglory_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsLevelUPNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsLevelUPNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsLevelUPNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsLevelUPNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCorpsBattleBidRequest::kCorpHeadFieldNumber;
const int CMessageCorpsBattleBidRequest::kNpcIDFieldNumber;
const int CMessageCorpsBattleBidRequest::kMoneyFieldNumber;
const int CMessageCorpsBattleBidRequest::kMinIncMoneyFieldNumber;
const int CMessageCorpsBattleBidRequest::kMapIDFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsBattleBidRequest::CMessageCorpsBattleBidRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsBattleBidRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsBattleBidRequest::CMessageCorpsBattleBidRequest(const CMessageCorpsBattleBidRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsBattleBidRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  npcid_ = 0u;
  money_ = 0u;
  minincmoney_ = 0u;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsBattleBidRequest::~CMessageCorpsBattleBidRequest() {
  SharedDtor();
}

void CMessageCorpsBattleBidRequest::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsBattleBidRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsBattleBidRequest_descriptor_;
}

const CMessageCorpsBattleBidRequest& CMessageCorpsBattleBidRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsBattleBidRequest* CMessageCorpsBattleBidRequest::default_instance_ = NULL;

CMessageCorpsBattleBidRequest* CMessageCorpsBattleBidRequest::New() const {
  return new CMessageCorpsBattleBidRequest;
}

void CMessageCorpsBattleBidRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    npcid_ = 0u;
    money_ = 0u;
    minincmoney_ = 0u;
    mapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsBattleBidRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_NpcID;
        break;
      }
      
      // optional uint32 NpcID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Money;
        break;
      }
      
      // optional uint32 Money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_MinIncMoney;
        break;
      }
      
      // optional uint32 MinIncMoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MinIncMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &minincmoney_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsBattleBidRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsBattleBidRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 NpcID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->npcid(), output);
  }
  
  // optional uint32 Money = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->money(), output);
  }
  
  // optional uint32 MinIncMoney = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->minincmoney(), output);
  }
  
  // optional uint32 MapID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->mapid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsBattleBidRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 NpcID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->npcid(), target);
  }
  
  // optional uint32 Money = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->money(), target);
  }
  
  // optional uint32 MinIncMoney = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->minincmoney(), target);
  }
  
  // optional uint32 MapID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->mapid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsBattleBidRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 NpcID = 2;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
    // optional uint32 Money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
    // optional uint32 MinIncMoney = 4;
    if (has_minincmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->minincmoney());
    }
    
    // optional uint32 MapID = 5;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsBattleBidRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsBattleBidRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsBattleBidRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsBattleBidRequest::MergeFrom(const CMessageCorpsBattleBidRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_npcid(from.npcid());
    }
    if (from._has_bit(2)) {
      set_money(from.money());
    }
    if (from._has_bit(3)) {
      set_minincmoney(from.minincmoney());
    }
    if (from._has_bit(4)) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsBattleBidRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsBattleBidRequest::CopyFrom(const CMessageCorpsBattleBidRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsBattleBidRequest::Swap(CMessageCorpsBattleBidRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(npcid_, other->npcid_);
    std::swap(money_, other->money_);
    std::swap(minincmoney_, other->minincmoney_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsBattleBidRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsBattleBidRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsBattleBidRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsBattleBidRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCorpsBattleBidResponse::kCorpHeadFieldNumber;
const int CMessageCorpsBattleBidResponse::kRtnCodeFieldNumber;
const int CMessageCorpsBattleBidResponse::kNpcIDFieldNumber;
const int CMessageCorpsBattleBidResponse::kMoneyFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsBattleBidResponse::CMessageCorpsBattleBidResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsBattleBidResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsBattleBidResponse::CMessageCorpsBattleBidResponse(const CMessageCorpsBattleBidResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsBattleBidResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  rtncode_ = 0u;
  npcid_ = 0u;
  money_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsBattleBidResponse::~CMessageCorpsBattleBidResponse() {
  SharedDtor();
}

void CMessageCorpsBattleBidResponse::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsBattleBidResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsBattleBidResponse_descriptor_;
}

const CMessageCorpsBattleBidResponse& CMessageCorpsBattleBidResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsBattleBidResponse* CMessageCorpsBattleBidResponse::default_instance_ = NULL;

CMessageCorpsBattleBidResponse* CMessageCorpsBattleBidResponse::New() const {
  return new CMessageCorpsBattleBidResponse;
}

void CMessageCorpsBattleBidResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    rtncode_ = 0u;
    npcid_ = 0u;
    money_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsBattleBidResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_RtnCode;
        break;
      }
      
      // optional uint32 RtnCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RtnCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rtncode_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_NpcID;
        break;
      }
      
      // optional uint32 NpcID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Money;
        break;
      }
      
      // optional uint32 Money = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsBattleBidResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsBattleBidResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 RtnCode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->rtncode(), output);
  }
  
  // optional uint32 NpcID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->npcid(), output);
  }
  
  // optional uint32 Money = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->money(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsBattleBidResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 RtnCode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->rtncode(), target);
  }
  
  // optional uint32 NpcID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->npcid(), target);
  }
  
  // optional uint32 Money = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->money(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsBattleBidResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 RtnCode = 2;
    if (has_rtncode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rtncode());
    }
    
    // optional uint32 NpcID = 3;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
    // optional uint32 Money = 4;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsBattleBidResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsBattleBidResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsBattleBidResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsBattleBidResponse::MergeFrom(const CMessageCorpsBattleBidResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_rtncode(from.rtncode());
    }
    if (from._has_bit(2)) {
      set_npcid(from.npcid());
    }
    if (from._has_bit(3)) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsBattleBidResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsBattleBidResponse::CopyFrom(const CMessageCorpsBattleBidResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsBattleBidResponse::Swap(CMessageCorpsBattleBidResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(rtncode_, other->rtncode_);
    std::swap(npcid_, other->npcid_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsBattleBidResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsBattleBidResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsBattleBidResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsBattleBidResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCorpsQueryBidRankRequest::kCorpHeadFieldNumber;
const int CMessageCorpsQueryBidRankRequest::kNpcIDFieldNumber;
const int CMessageCorpsQueryBidRankRequest::kBattleCityFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsQueryBidRankRequest::CMessageCorpsQueryBidRankRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsQueryBidRankRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsQueryBidRankRequest::CMessageCorpsQueryBidRankRequest(const CMessageCorpsQueryBidRankRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsQueryBidRankRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  npcid_ = 0u;
  battlecity_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsQueryBidRankRequest::~CMessageCorpsQueryBidRankRequest() {
  SharedDtor();
}

void CMessageCorpsQueryBidRankRequest::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsQueryBidRankRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsQueryBidRankRequest_descriptor_;
}

const CMessageCorpsQueryBidRankRequest& CMessageCorpsQueryBidRankRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsQueryBidRankRequest* CMessageCorpsQueryBidRankRequest::default_instance_ = NULL;

CMessageCorpsQueryBidRankRequest* CMessageCorpsQueryBidRankRequest::New() const {
  return new CMessageCorpsQueryBidRankRequest;
}

void CMessageCorpsQueryBidRankRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    npcid_ = 0u;
    battlecity_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsQueryBidRankRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_NpcID;
        break;
      }
      
      // optional uint32 NpcID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_BattleCity;
        break;
      }
      
      // optional uint32 BattleCity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BattleCity:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &battlecity_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsQueryBidRankRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsQueryBidRankRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 NpcID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->npcid(), output);
  }
  
  // optional uint32 BattleCity = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->battlecity(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsQueryBidRankRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 NpcID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->npcid(), target);
  }
  
  // optional uint32 BattleCity = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->battlecity(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsQueryBidRankRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 NpcID = 2;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
    // optional uint32 BattleCity = 3;
    if (has_battlecity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->battlecity());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsQueryBidRankRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsQueryBidRankRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsQueryBidRankRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsQueryBidRankRequest::MergeFrom(const CMessageCorpsQueryBidRankRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_npcid(from.npcid());
    }
    if (from._has_bit(2)) {
      set_battlecity(from.battlecity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsQueryBidRankRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsQueryBidRankRequest::CopyFrom(const CMessageCorpsQueryBidRankRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsQueryBidRankRequest::Swap(CMessageCorpsQueryBidRankRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(npcid_, other->npcid_);
    std::swap(battlecity_, other->battlecity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsQueryBidRankRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsQueryBidRankRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsQueryBidRankRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsQueryBidRankRequest_reflection_;
}

// ===================================================================

const ::std::string PBBidRank::_default_corpsname_;
#ifndef _MSC_VER
const int PBBidRank::kCorpsNameFieldNumber;
const int PBBidRank::kMoneyFieldNumber;
const int PBBidRank::kNationalityFieldNumber;
const int PBBidRank::kVictoryFieldNumber;
const int PBBidRank::kLoserFieldNumber;
const int PBBidRank::kStarLevelFieldNumber;
const int PBBidRank::kCorpsIDFieldNumber;
#endif  // !_MSC_VER

PBBidRank::PBBidRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBBidRank::InitAsDefaultInstance() {}

PBBidRank::PBBidRank(const PBBidRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBBidRank::SharedCtor() {
  _cached_size_ = 0;
  corpsname_ = const_cast< ::std::string*>(&_default_corpsname_);
  money_ = 0u;
  nationality_ = 0u;
  victory_ = 0u;
  loser_ = 0u;
  starlevel_ = 0u;
  corpsid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBBidRank::~PBBidRank() {
  SharedDtor();
}

void PBBidRank::SharedDtor() {
  if (corpsname_ != &_default_corpsname_) {
    delete corpsname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBBidRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBBidRank_descriptor_;
}

const PBBidRank& PBBidRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

PBBidRank* PBBidRank::default_instance_ = NULL;

PBBidRank* PBBidRank::New() const {
  return new PBBidRank;
}

void PBBidRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corpsname_ != &_default_corpsname_) {
        corpsname_->clear();
      }
    }
    money_ = 0u;
    nationality_ = 0u;
    victory_ = 0u;
    loser_ = 0u;
    starlevel_ = 0u;
    corpsid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBBidRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string CorpsName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_corpsname()));
        if (input->ExpectTag(16)) goto parse_Money;
        break;
      }
      
      // optional uint32 Money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Nationality;
        break;
      }
      
      // optional uint32 Nationality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Nationality:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &nationality_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Victory;
        break;
      }
      
      // optional uint32 Victory = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Victory:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &victory_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Loser;
        break;
      }
      
      // optional uint32 Loser = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Loser:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &loser_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_StarLevel;
        break;
      }
      
      // optional uint32 StarLevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_StarLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &starlevel_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_CorpsID;
        break;
      }
      
      // optional uint32 CorpsID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBBidRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBBidRank::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string CorpsName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->corpsname(), output);
  }
  
  // optional uint32 Money = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->money(), output);
  }
  
  // optional uint32 Nationality = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->nationality(), output);
  }
  
  // optional uint32 Victory = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->victory(), output);
  }
  
  // optional uint32 Loser = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->loser(), output);
  }
  
  // optional uint32 StarLevel = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->starlevel(), output);
  }
  
  // optional uint32 CorpsID = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->corpsid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBBidRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string CorpsName = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->corpsname(), target);
  }
  
  // optional uint32 Money = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->money(), target);
  }
  
  // optional uint32 Nationality = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->nationality(), target);
  }
  
  // optional uint32 Victory = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->victory(), target);
  }
  
  // optional uint32 Loser = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->loser(), target);
  }
  
  // optional uint32 StarLevel = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->starlevel(), target);
  }
  
  // optional uint32 CorpsID = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->corpsid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBBidRank::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string CorpsName = 1;
    if (has_corpsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->corpsname());
    }
    
    // optional uint32 Money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
    // optional uint32 Nationality = 3;
    if (has_nationality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->nationality());
    }
    
    // optional uint32 Victory = 4;
    if (has_victory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->victory());
    }
    
    // optional uint32 Loser = 5;
    if (has_loser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->loser());
    }
    
    // optional uint32 StarLevel = 6;
    if (has_starlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->starlevel());
    }
    
    // optional uint32 CorpsID = 7;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBBidRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBBidRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBBidRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBBidRank::MergeFrom(const PBBidRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_corpsname(from.corpsname());
    }
    if (from._has_bit(1)) {
      set_money(from.money());
    }
    if (from._has_bit(2)) {
      set_nationality(from.nationality());
    }
    if (from._has_bit(3)) {
      set_victory(from.victory());
    }
    if (from._has_bit(4)) {
      set_loser(from.loser());
    }
    if (from._has_bit(5)) {
      set_starlevel(from.starlevel());
    }
    if (from._has_bit(6)) {
      set_corpsid(from.corpsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBBidRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBidRank::CopyFrom(const PBBidRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBidRank::Swap(PBBidRank* other) {
  if (other != this) {
    std::swap(corpsname_, other->corpsname_);
    std::swap(money_, other->money_);
    std::swap(nationality_, other->nationality_);
    std::swap(victory_, other->victory_);
    std::swap(loser_, other->loser_);
    std::swap(starlevel_, other->starlevel_);
    std::swap(corpsid_, other->corpsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBBidRank::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBBidRank::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBBidRank::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBBidRank_reflection_;
}

// ===================================================================

const ::std::string CMessageCorpsQueryBidRankResponse::_default_cityowner_;
#ifndef _MSC_VER
const int CMessageCorpsQueryBidRankResponse::kCorpHeadFieldNumber;
const int CMessageCorpsQueryBidRankResponse::kNpcIDFieldNumber;
const int CMessageCorpsQueryBidRankResponse::kCityOwnerFieldNumber;
const int CMessageCorpsQueryBidRankResponse::kRankInfoFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsQueryBidRankResponse::CMessageCorpsQueryBidRankResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsQueryBidRankResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsQueryBidRankResponse::CMessageCorpsQueryBidRankResponse(const CMessageCorpsQueryBidRankResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsQueryBidRankResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  npcid_ = 0u;
  cityowner_ = const_cast< ::std::string*>(&_default_cityowner_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsQueryBidRankResponse::~CMessageCorpsQueryBidRankResponse() {
  SharedDtor();
}

void CMessageCorpsQueryBidRankResponse::SharedDtor() {
  if (cityowner_ != &_default_cityowner_) {
    delete cityowner_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsQueryBidRankResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsQueryBidRankResponse_descriptor_;
}

const CMessageCorpsQueryBidRankResponse& CMessageCorpsQueryBidRankResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsQueryBidRankResponse* CMessageCorpsQueryBidRankResponse::default_instance_ = NULL;

CMessageCorpsQueryBidRankResponse* CMessageCorpsQueryBidRankResponse::New() const {
  return new CMessageCorpsQueryBidRankResponse;
}

void CMessageCorpsQueryBidRankResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    npcid_ = 0u;
    if (_has_bit(2)) {
      if (cityowner_ != &_default_cityowner_) {
        cityowner_->clear();
      }
    }
  }
  rankinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsQueryBidRankResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_NpcID;
        break;
      }
      
      // optional uint32 NpcID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_CityOwner;
        break;
      }
      
      // optional string CityOwner = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CityOwner:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_cityowner()));
        if (input->ExpectTag(34)) goto parse_RankInfo;
        break;
      }
      
      // repeated .PBBidRank RankInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RankInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_rankinfo()));
        if (input->ExpectTag(34)) goto parse_RankInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsQueryBidRankResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsQueryBidRankResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 NpcID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->npcid(), output);
  }
  
  // optional string CityOwner = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->cityowner(), output);
  }
  
  // repeated .PBBidRank RankInfo = 4;
  for (int i = 0; i < this->rankinfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->rankinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsQueryBidRankResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 NpcID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->npcid(), target);
  }
  
  // optional string CityOwner = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->cityowner(), target);
  }
  
  // repeated .PBBidRank RankInfo = 4;
  for (int i = 0; i < this->rankinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(4, this->rankinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsQueryBidRankResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 NpcID = 2;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
    // optional string CityOwner = 3;
    if (has_cityowner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->cityowner());
    }
    
  }
  // repeated .PBBidRank RankInfo = 4;
  total_size += 1 * this->rankinfo_size();
  for (int i = 0; i < this->rankinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->rankinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsQueryBidRankResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsQueryBidRankResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsQueryBidRankResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsQueryBidRankResponse::MergeFrom(const CMessageCorpsQueryBidRankResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankinfo_.MergeFrom(from.rankinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_npcid(from.npcid());
    }
    if (from._has_bit(2)) {
      set_cityowner(from.cityowner());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsQueryBidRankResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsQueryBidRankResponse::CopyFrom(const CMessageCorpsQueryBidRankResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsQueryBidRankResponse::Swap(CMessageCorpsQueryBidRankResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(npcid_, other->npcid_);
    std::swap(cityowner_, other->cityowner_);
    rankinfo_.Swap(&other->rankinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsQueryBidRankResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsQueryBidRankResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsQueryBidRankResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsQueryBidRankResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCorpsSelectFamilyBattleRequest::kCorpHeadFieldNumber;
const int CMessageCorpsSelectFamilyBattleRequest::kFamilyIDFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsSelectFamilyBattleRequest::CMessageCorpsSelectFamilyBattleRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsSelectFamilyBattleRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsSelectFamilyBattleRequest::CMessageCorpsSelectFamilyBattleRequest(const CMessageCorpsSelectFamilyBattleRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsSelectFamilyBattleRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsSelectFamilyBattleRequest::~CMessageCorpsSelectFamilyBattleRequest() {
  SharedDtor();
}

void CMessageCorpsSelectFamilyBattleRequest::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsSelectFamilyBattleRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsSelectFamilyBattleRequest_descriptor_;
}

const CMessageCorpsSelectFamilyBattleRequest& CMessageCorpsSelectFamilyBattleRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsSelectFamilyBattleRequest* CMessageCorpsSelectFamilyBattleRequest::default_instance_ = NULL;

CMessageCorpsSelectFamilyBattleRequest* CMessageCorpsSelectFamilyBattleRequest::New() const {
  return new CMessageCorpsSelectFamilyBattleRequest;
}

void CMessageCorpsSelectFamilyBattleRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
  }
  familyid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsSelectFamilyBattleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_FamilyID;
        break;
      }
      
      // repeated uint32 FamilyID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_familyid(value);
        if (input->ExpectTag(16)) goto parse_FamilyID;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsSelectFamilyBattleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsSelectFamilyBattleRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // repeated uint32 FamilyID = 2;
  for (int i = 0; i < this->familyid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->familyid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsSelectFamilyBattleRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // repeated uint32 FamilyID = 2;
  for (int i = 0; i < this->familyid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->familyid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsSelectFamilyBattleRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
  }
  // repeated uint32 FamilyID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->familyid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->familyid(i));
    }
    total_size += 1 * this->familyid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsSelectFamilyBattleRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsSelectFamilyBattleRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsSelectFamilyBattleRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsSelectFamilyBattleRequest::MergeFrom(const CMessageCorpsSelectFamilyBattleRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  familyid_.MergeFrom(from.familyid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsSelectFamilyBattleRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsSelectFamilyBattleRequest::CopyFrom(const CMessageCorpsSelectFamilyBattleRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsSelectFamilyBattleRequest::Swap(CMessageCorpsSelectFamilyBattleRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    familyid_.Swap(&other->familyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsSelectFamilyBattleRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsSelectFamilyBattleRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsSelectFamilyBattleRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsSelectFamilyBattleRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCorpsSelectFamilyBattleResponse::kCorpHeadFieldNumber;
const int CMessageCorpsSelectFamilyBattleResponse::kRtnCodeFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsSelectFamilyBattleResponse::CMessageCorpsSelectFamilyBattleResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsSelectFamilyBattleResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsSelectFamilyBattleResponse::CMessageCorpsSelectFamilyBattleResponse(const CMessageCorpsSelectFamilyBattleResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsSelectFamilyBattleResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  rtncode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsSelectFamilyBattleResponse::~CMessageCorpsSelectFamilyBattleResponse() {
  SharedDtor();
}

void CMessageCorpsSelectFamilyBattleResponse::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsSelectFamilyBattleResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsSelectFamilyBattleResponse_descriptor_;
}

const CMessageCorpsSelectFamilyBattleResponse& CMessageCorpsSelectFamilyBattleResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsSelectFamilyBattleResponse* CMessageCorpsSelectFamilyBattleResponse::default_instance_ = NULL;

CMessageCorpsSelectFamilyBattleResponse* CMessageCorpsSelectFamilyBattleResponse::New() const {
  return new CMessageCorpsSelectFamilyBattleResponse;
}

void CMessageCorpsSelectFamilyBattleResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    rtncode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsSelectFamilyBattleResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_RtnCode;
        break;
      }
      
      // optional uint32 RtnCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RtnCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rtncode_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsSelectFamilyBattleResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsSelectFamilyBattleResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 RtnCode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->rtncode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsSelectFamilyBattleResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 RtnCode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->rtncode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsSelectFamilyBattleResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 RtnCode = 2;
    if (has_rtncode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rtncode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsSelectFamilyBattleResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsSelectFamilyBattleResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsSelectFamilyBattleResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsSelectFamilyBattleResponse::MergeFrom(const CMessageCorpsSelectFamilyBattleResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_rtncode(from.rtncode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsSelectFamilyBattleResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsSelectFamilyBattleResponse::CopyFrom(const CMessageCorpsSelectFamilyBattleResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsSelectFamilyBattleResponse::Swap(CMessageCorpsSelectFamilyBattleResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(rtncode_, other->rtncode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsSelectFamilyBattleResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsSelectFamilyBattleResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsSelectFamilyBattleResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsSelectFamilyBattleResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCorpsPvPStarLevelUpNotify::kCorpHeadFieldNumber;
const int CMessageCorpsPvPStarLevelUpNotify::kPvPLevelFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsPvPStarLevelUpNotify::CMessageCorpsPvPStarLevelUpNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsPvPStarLevelUpNotify::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsPvPStarLevelUpNotify::CMessageCorpsPvPStarLevelUpNotify(const CMessageCorpsPvPStarLevelUpNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsPvPStarLevelUpNotify::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  pvplevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsPvPStarLevelUpNotify::~CMessageCorpsPvPStarLevelUpNotify() {
  SharedDtor();
}

void CMessageCorpsPvPStarLevelUpNotify::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsPvPStarLevelUpNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsPvPStarLevelUpNotify_descriptor_;
}

const CMessageCorpsPvPStarLevelUpNotify& CMessageCorpsPvPStarLevelUpNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsPvPStarLevelUpNotify* CMessageCorpsPvPStarLevelUpNotify::default_instance_ = NULL;

CMessageCorpsPvPStarLevelUpNotify* CMessageCorpsPvPStarLevelUpNotify::New() const {
  return new CMessageCorpsPvPStarLevelUpNotify;
}

void CMessageCorpsPvPStarLevelUpNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    pvplevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsPvPStarLevelUpNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_PvPLevel;
        break;
      }
      
      // optional uint32 PvPLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PvPLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pvplevel_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsPvPStarLevelUpNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsPvPStarLevelUpNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 PvPLevel = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->pvplevel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsPvPStarLevelUpNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 PvPLevel = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->pvplevel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsPvPStarLevelUpNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 PvPLevel = 2;
    if (has_pvplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pvplevel());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsPvPStarLevelUpNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsPvPStarLevelUpNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsPvPStarLevelUpNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsPvPStarLevelUpNotify::MergeFrom(const CMessageCorpsPvPStarLevelUpNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_pvplevel(from.pvplevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsPvPStarLevelUpNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsPvPStarLevelUpNotify::CopyFrom(const CMessageCorpsPvPStarLevelUpNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsPvPStarLevelUpNotify::Swap(CMessageCorpsPvPStarLevelUpNotify* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(pvplevel_, other->pvplevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsPvPStarLevelUpNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsPvPStarLevelUpNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsPvPStarLevelUpNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsPvPStarLevelUpNotify_reflection_;
}

// ===================================================================

const ::std::string CMessageCorpsBattleRightsNotify::_default_descorpsname_;
#ifndef _MSC_VER
const int CMessageCorpsBattleRightsNotify::kCorpHeadFieldNumber;
const int CMessageCorpsBattleRightsNotify::kNpcIDFieldNumber;
const int CMessageCorpsBattleRightsNotify::kDesCorpsNameFieldNumber;
const int CMessageCorpsBattleRightsNotify::kTypeFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsBattleRightsNotify::CMessageCorpsBattleRightsNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsBattleRightsNotify::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsBattleRightsNotify::CMessageCorpsBattleRightsNotify(const CMessageCorpsBattleRightsNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsBattleRightsNotify::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  npcid_ = 0u;
  descorpsname_ = const_cast< ::std::string*>(&_default_descorpsname_);
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsBattleRightsNotify::~CMessageCorpsBattleRightsNotify() {
  SharedDtor();
}

void CMessageCorpsBattleRightsNotify::SharedDtor() {
  if (descorpsname_ != &_default_descorpsname_) {
    delete descorpsname_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsBattleRightsNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsBattleRightsNotify_descriptor_;
}

const CMessageCorpsBattleRightsNotify& CMessageCorpsBattleRightsNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsBattleRightsNotify* CMessageCorpsBattleRightsNotify::default_instance_ = NULL;

CMessageCorpsBattleRightsNotify* CMessageCorpsBattleRightsNotify::New() const {
  return new CMessageCorpsBattleRightsNotify;
}

void CMessageCorpsBattleRightsNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    npcid_ = 0u;
    if (_has_bit(2)) {
      if (descorpsname_ != &_default_descorpsname_) {
        descorpsname_->clear();
      }
    }
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsBattleRightsNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_NpcID;
        break;
      }
      
      // optional uint32 NpcID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_DesCorpsName;
        break;
      }
      
      // optional string DesCorpsName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_DesCorpsName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_descorpsname()));
        if (input->ExpectTag(32)) goto parse_Type;
        break;
      }
      
      // optional uint32 Type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Type:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsBattleRightsNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsBattleRightsNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 NpcID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->npcid(), output);
  }
  
  // optional string DesCorpsName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->descorpsname(), output);
  }
  
  // optional uint32 Type = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsBattleRightsNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 NpcID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->npcid(), target);
  }
  
  // optional string DesCorpsName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->descorpsname(), target);
  }
  
  // optional uint32 Type = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsBattleRightsNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 NpcID = 2;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
    // optional string DesCorpsName = 3;
    if (has_descorpsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->descorpsname());
    }
    
    // optional uint32 Type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsBattleRightsNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsBattleRightsNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsBattleRightsNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsBattleRightsNotify::MergeFrom(const CMessageCorpsBattleRightsNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_npcid(from.npcid());
    }
    if (from._has_bit(2)) {
      set_descorpsname(from.descorpsname());
    }
    if (from._has_bit(3)) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsBattleRightsNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsBattleRightsNotify::CopyFrom(const CMessageCorpsBattleRightsNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsBattleRightsNotify::Swap(CMessageCorpsBattleRightsNotify* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(npcid_, other->npcid_);
    std::swap(descorpsname_, other->descorpsname_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsBattleRightsNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsBattleRightsNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsBattleRightsNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsBattleRightsNotify_reflection_;
}

// ===================================================================

const ::std::string CMessageCorpsRecBattleRightsNotify::_default_srccorpsname_;
const ::std::string CMessageCorpsRecBattleRightsNotify::_default_descorpsname_;
#ifndef _MSC_VER
const int CMessageCorpsRecBattleRightsNotify::kCorpHeadFieldNumber;
const int CMessageCorpsRecBattleRightsNotify::kNpcIDFieldNumber;
const int CMessageCorpsRecBattleRightsNotify::kSrcCorpsIDFieldNumber;
const int CMessageCorpsRecBattleRightsNotify::kSrcCorpsNameFieldNumber;
const int CMessageCorpsRecBattleRightsNotify::kDesCorpsIDFieldNumber;
const int CMessageCorpsRecBattleRightsNotify::kDesCorpsNameFieldNumber;
const int CMessageCorpsRecBattleRightsNotify::kMoneyFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsRecBattleRightsNotify::CMessageCorpsRecBattleRightsNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsRecBattleRightsNotify::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsRecBattleRightsNotify::CMessageCorpsRecBattleRightsNotify(const CMessageCorpsRecBattleRightsNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsRecBattleRightsNotify::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  npcid_ = 0u;
  srccorpsid_ = 0u;
  srccorpsname_ = const_cast< ::std::string*>(&_default_srccorpsname_);
  descorpsid_ = 0u;
  descorpsname_ = const_cast< ::std::string*>(&_default_descorpsname_);
  money_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsRecBattleRightsNotify::~CMessageCorpsRecBattleRightsNotify() {
  SharedDtor();
}

void CMessageCorpsRecBattleRightsNotify::SharedDtor() {
  if (srccorpsname_ != &_default_srccorpsname_) {
    delete srccorpsname_;
  }
  if (descorpsname_ != &_default_descorpsname_) {
    delete descorpsname_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsRecBattleRightsNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsRecBattleRightsNotify_descriptor_;
}

const CMessageCorpsRecBattleRightsNotify& CMessageCorpsRecBattleRightsNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsRecBattleRightsNotify* CMessageCorpsRecBattleRightsNotify::default_instance_ = NULL;

CMessageCorpsRecBattleRightsNotify* CMessageCorpsRecBattleRightsNotify::New() const {
  return new CMessageCorpsRecBattleRightsNotify;
}

void CMessageCorpsRecBattleRightsNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    npcid_ = 0u;
    srccorpsid_ = 0u;
    if (_has_bit(3)) {
      if (srccorpsname_ != &_default_srccorpsname_) {
        srccorpsname_->clear();
      }
    }
    descorpsid_ = 0u;
    if (_has_bit(5)) {
      if (descorpsname_ != &_default_descorpsname_) {
        descorpsname_->clear();
      }
    }
    money_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsRecBattleRightsNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_NpcID;
        break;
      }
      
      // optional uint32 NpcID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_SrcCorpsID;
        break;
      }
      
      // optional uint32 SrcCorpsID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SrcCorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srccorpsid_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_SrcCorpsName;
        break;
      }
      
      // optional string SrcCorpsName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SrcCorpsName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_srccorpsname()));
        if (input->ExpectTag(40)) goto parse_DesCorpsID;
        break;
      }
      
      // optional uint32 DesCorpsID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DesCorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &descorpsid_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_DesCorpsName;
        break;
      }
      
      // optional string DesCorpsName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_DesCorpsName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_descorpsname()));
        if (input->ExpectTag(56)) goto parse_Money;
        break;
      }
      
      // optional uint32 Money = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsRecBattleRightsNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsRecBattleRightsNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 NpcID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->npcid(), output);
  }
  
  // optional uint32 SrcCorpsID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->srccorpsid(), output);
  }
  
  // optional string SrcCorpsName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->srccorpsname(), output);
  }
  
  // optional uint32 DesCorpsID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->descorpsid(), output);
  }
  
  // optional string DesCorpsName = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteString(6, this->descorpsname(), output);
  }
  
  // optional uint32 Money = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->money(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsRecBattleRightsNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 NpcID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->npcid(), target);
  }
  
  // optional uint32 SrcCorpsID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->srccorpsid(), target);
  }
  
  // optional string SrcCorpsName = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->srccorpsname(), target);
  }
  
  // optional uint32 DesCorpsID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->descorpsid(), target);
  }
  
  // optional string DesCorpsName = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(6, this->descorpsname(), target);
  }
  
  // optional uint32 Money = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->money(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsRecBattleRightsNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 NpcID = 2;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
    // optional uint32 SrcCorpsID = 3;
    if (has_srccorpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srccorpsid());
    }
    
    // optional string SrcCorpsName = 4;
    if (has_srccorpsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->srccorpsname());
    }
    
    // optional uint32 DesCorpsID = 5;
    if (has_descorpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->descorpsid());
    }
    
    // optional string DesCorpsName = 6;
    if (has_descorpsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->descorpsname());
    }
    
    // optional uint32 Money = 7;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsRecBattleRightsNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsRecBattleRightsNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsRecBattleRightsNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsRecBattleRightsNotify::MergeFrom(const CMessageCorpsRecBattleRightsNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_npcid(from.npcid());
    }
    if (from._has_bit(2)) {
      set_srccorpsid(from.srccorpsid());
    }
    if (from._has_bit(3)) {
      set_srccorpsname(from.srccorpsname());
    }
    if (from._has_bit(4)) {
      set_descorpsid(from.descorpsid());
    }
    if (from._has_bit(5)) {
      set_descorpsname(from.descorpsname());
    }
    if (from._has_bit(6)) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsRecBattleRightsNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsRecBattleRightsNotify::CopyFrom(const CMessageCorpsRecBattleRightsNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsRecBattleRightsNotify::Swap(CMessageCorpsRecBattleRightsNotify* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(npcid_, other->npcid_);
    std::swap(srccorpsid_, other->srccorpsid_);
    std::swap(srccorpsname_, other->srccorpsname_);
    std::swap(descorpsid_, other->descorpsid_);
    std::swap(descorpsname_, other->descorpsname_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsRecBattleRightsNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsRecBattleRightsNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsRecBattleRightsNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsRecBattleRightsNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCorpsSelectMemberBattleRequest::kCorpHeadFieldNumber;
const int CMessageCorpsSelectMemberBattleRequest::kMemberListFieldNumber;
const int CMessageCorpsSelectMemberBattleRequest::kBattleCityFieldNumber;
const int CMessageCorpsSelectMemberBattleRequest::kTypeFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsSelectMemberBattleRequest::CMessageCorpsSelectMemberBattleRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsSelectMemberBattleRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsSelectMemberBattleRequest::CMessageCorpsSelectMemberBattleRequest(const CMessageCorpsSelectMemberBattleRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsSelectMemberBattleRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  battlecity_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsSelectMemberBattleRequest::~CMessageCorpsSelectMemberBattleRequest() {
  SharedDtor();
}

void CMessageCorpsSelectMemberBattleRequest::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsSelectMemberBattleRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsSelectMemberBattleRequest_descriptor_;
}

const CMessageCorpsSelectMemberBattleRequest& CMessageCorpsSelectMemberBattleRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsSelectMemberBattleRequest* CMessageCorpsSelectMemberBattleRequest::default_instance_ = NULL;

CMessageCorpsSelectMemberBattleRequest* CMessageCorpsSelectMemberBattleRequest::New() const {
  return new CMessageCorpsSelectMemberBattleRequest;
}

void CMessageCorpsSelectMemberBattleRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    battlecity_ = 0u;
    type_ = 0u;
  }
  memberlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsSelectMemberBattleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_MemberList;
        break;
      }
      
      // repeated uint32 MemberList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MemberList:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_memberlist(value);
        if (input->ExpectTag(16)) goto parse_MemberList;
        if (input->ExpectTag(24)) goto parse_BattleCity;
        break;
      }
      
      // optional uint32 BattleCity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BattleCity:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &battlecity_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Type;
        break;
      }
      
      // optional uint32 Type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Type:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsSelectMemberBattleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsSelectMemberBattleRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // repeated uint32 MemberList = 2;
  for (int i = 0; i < this->memberlist_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->memberlist(i), output);
  }
  
  // optional uint32 BattleCity = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->battlecity(), output);
  }
  
  // optional uint32 Type = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsSelectMemberBattleRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // repeated uint32 MemberList = 2;
  for (int i = 0; i < this->memberlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->memberlist(i), target);
  }
  
  // optional uint32 BattleCity = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->battlecity(), target);
  }
  
  // optional uint32 Type = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsSelectMemberBattleRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 BattleCity = 3;
    if (has_battlecity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->battlecity());
    }
    
    // optional uint32 Type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
  }
  // repeated uint32 MemberList = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->memberlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->memberlist(i));
    }
    total_size += 1 * this->memberlist_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsSelectMemberBattleRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsSelectMemberBattleRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsSelectMemberBattleRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsSelectMemberBattleRequest::MergeFrom(const CMessageCorpsSelectMemberBattleRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  memberlist_.MergeFrom(from.memberlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(2)) {
      set_battlecity(from.battlecity());
    }
    if (from._has_bit(3)) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsSelectMemberBattleRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsSelectMemberBattleRequest::CopyFrom(const CMessageCorpsSelectMemberBattleRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsSelectMemberBattleRequest::Swap(CMessageCorpsSelectMemberBattleRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    memberlist_.Swap(&other->memberlist_);
    std::swap(battlecity_, other->battlecity_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsSelectMemberBattleRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsSelectMemberBattleRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsSelectMemberBattleRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsSelectMemberBattleRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCorpsSelectMemberBattleResponse::kCorpHeadFieldNumber;
const int CMessageCorpsSelectMemberBattleResponse::kRtnCodeFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsSelectMemberBattleResponse::CMessageCorpsSelectMemberBattleResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsSelectMemberBattleResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsSelectMemberBattleResponse::CMessageCorpsSelectMemberBattleResponse(const CMessageCorpsSelectMemberBattleResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsSelectMemberBattleResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  rtncode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsSelectMemberBattleResponse::~CMessageCorpsSelectMemberBattleResponse() {
  SharedDtor();
}

void CMessageCorpsSelectMemberBattleResponse::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsSelectMemberBattleResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsSelectMemberBattleResponse_descriptor_;
}

const CMessageCorpsSelectMemberBattleResponse& CMessageCorpsSelectMemberBattleResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsSelectMemberBattleResponse* CMessageCorpsSelectMemberBattleResponse::default_instance_ = NULL;

CMessageCorpsSelectMemberBattleResponse* CMessageCorpsSelectMemberBattleResponse::New() const {
  return new CMessageCorpsSelectMemberBattleResponse;
}

void CMessageCorpsSelectMemberBattleResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    rtncode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsSelectMemberBattleResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_RtnCode;
        break;
      }
      
      // optional uint32 RtnCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RtnCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rtncode_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsSelectMemberBattleResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsSelectMemberBattleResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 RtnCode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->rtncode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsSelectMemberBattleResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 RtnCode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->rtncode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsSelectMemberBattleResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 RtnCode = 2;
    if (has_rtncode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rtncode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsSelectMemberBattleResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsSelectMemberBattleResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsSelectMemberBattleResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsSelectMemberBattleResponse::MergeFrom(const CMessageCorpsSelectMemberBattleResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_rtncode(from.rtncode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsSelectMemberBattleResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsSelectMemberBattleResponse::CopyFrom(const CMessageCorpsSelectMemberBattleResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsSelectMemberBattleResponse::Swap(CMessageCorpsSelectMemberBattleResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(rtncode_, other->rtncode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsSelectMemberBattleResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsSelectMemberBattleResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsSelectMemberBattleResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsSelectMemberBattleResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageCorpsMemberBattleRightsNotify::_default_descorpsname_;
#ifndef _MSC_VER
const int CMessageCorpsMemberBattleRightsNotify::kCorpHeadFieldNumber;
const int CMessageCorpsMemberBattleRightsNotify::kNpcIDFieldNumber;
const int CMessageCorpsMemberBattleRightsNotify::kMemberListFieldNumber;
const int CMessageCorpsMemberBattleRightsNotify::kDesCorpsNameFieldNumber;
const int CMessageCorpsMemberBattleRightsNotify::kTypeFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsMemberBattleRightsNotify::CMessageCorpsMemberBattleRightsNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsMemberBattleRightsNotify::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsMemberBattleRightsNotify::CMessageCorpsMemberBattleRightsNotify(const CMessageCorpsMemberBattleRightsNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsMemberBattleRightsNotify::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  npcid_ = 0u;
  descorpsname_ = const_cast< ::std::string*>(&_default_descorpsname_);
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsMemberBattleRightsNotify::~CMessageCorpsMemberBattleRightsNotify() {
  SharedDtor();
}

void CMessageCorpsMemberBattleRightsNotify::SharedDtor() {
  if (descorpsname_ != &_default_descorpsname_) {
    delete descorpsname_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsMemberBattleRightsNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsMemberBattleRightsNotify_descriptor_;
}

const CMessageCorpsMemberBattleRightsNotify& CMessageCorpsMemberBattleRightsNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsMemberBattleRightsNotify* CMessageCorpsMemberBattleRightsNotify::default_instance_ = NULL;

CMessageCorpsMemberBattleRightsNotify* CMessageCorpsMemberBattleRightsNotify::New() const {
  return new CMessageCorpsMemberBattleRightsNotify;
}

void CMessageCorpsMemberBattleRightsNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    npcid_ = 0u;
    if (_has_bit(3)) {
      if (descorpsname_ != &_default_descorpsname_) {
        descorpsname_->clear();
      }
    }
    type_ = 0u;
  }
  memberlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsMemberBattleRightsNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_NpcID;
        break;
      }
      
      // optional uint32 NpcID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_MemberList;
        break;
      }
      
      // repeated uint32 MemberList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MemberList:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_memberlist(value);
        if (input->ExpectTag(24)) goto parse_MemberList;
        if (input->ExpectTag(34)) goto parse_DesCorpsName;
        break;
      }
      
      // optional string DesCorpsName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_DesCorpsName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_descorpsname()));
        if (input->ExpectTag(40)) goto parse_Type;
        break;
      }
      
      // optional uint32 Type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Type:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsMemberBattleRightsNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsMemberBattleRightsNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 NpcID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->npcid(), output);
  }
  
  // repeated uint32 MemberList = 3;
  for (int i = 0; i < this->memberlist_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->memberlist(i), output);
  }
  
  // optional string DesCorpsName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->descorpsname(), output);
  }
  
  // optional uint32 Type = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsMemberBattleRightsNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 NpcID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->npcid(), target);
  }
  
  // repeated uint32 MemberList = 3;
  for (int i = 0; i < this->memberlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->memberlist(i), target);
  }
  
  // optional string DesCorpsName = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->descorpsname(), target);
  }
  
  // optional uint32 Type = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsMemberBattleRightsNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 NpcID = 2;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
    // optional string DesCorpsName = 4;
    if (has_descorpsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->descorpsname());
    }
    
    // optional uint32 Type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
  }
  // repeated uint32 MemberList = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->memberlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->memberlist(i));
    }
    total_size += 1 * this->memberlist_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsMemberBattleRightsNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsMemberBattleRightsNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsMemberBattleRightsNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsMemberBattleRightsNotify::MergeFrom(const CMessageCorpsMemberBattleRightsNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  memberlist_.MergeFrom(from.memberlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_npcid(from.npcid());
    }
    if (from._has_bit(3)) {
      set_descorpsname(from.descorpsname());
    }
    if (from._has_bit(4)) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsMemberBattleRightsNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsMemberBattleRightsNotify::CopyFrom(const CMessageCorpsMemberBattleRightsNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsMemberBattleRightsNotify::Swap(CMessageCorpsMemberBattleRightsNotify* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(npcid_, other->npcid_);
    memberlist_.Swap(&other->memberlist_);
    std::swap(descorpsname_, other->descorpsname_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsMemberBattleRightsNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsMemberBattleRightsNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsMemberBattleRightsNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsMemberBattleRightsNotify_reflection_;
}

// ===================================================================

const ::std::string CMessageCorpsMoneyChangedNotify::_default_rolename_;
#ifndef _MSC_VER
const int CMessageCorpsMoneyChangedNotify::kMoneyFieldNumber;
const int CMessageCorpsMoneyChangedNotify::kRoleIDFieldNumber;
const int CMessageCorpsMoneyChangedNotify::kReasonFieldNumber;
const int CMessageCorpsMoneyChangedNotify::kRoleNameFieldNumber;
const int CMessageCorpsMoneyChangedNotify::kValeuFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsMoneyChangedNotify::CMessageCorpsMoneyChangedNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsMoneyChangedNotify::InitAsDefaultInstance() {}

CMessageCorpsMoneyChangedNotify::CMessageCorpsMoneyChangedNotify(const CMessageCorpsMoneyChangedNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsMoneyChangedNotify::SharedCtor() {
  _cached_size_ = 0;
  money_ = 0u;
  roleid_ = 0u;
  reason_ = 0u;
  rolename_ = const_cast< ::std::string*>(&_default_rolename_);
  valeu_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsMoneyChangedNotify::~CMessageCorpsMoneyChangedNotify() {
  SharedDtor();
}

void CMessageCorpsMoneyChangedNotify::SharedDtor() {
  if (rolename_ != &_default_rolename_) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsMoneyChangedNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsMoneyChangedNotify_descriptor_;
}

const CMessageCorpsMoneyChangedNotify& CMessageCorpsMoneyChangedNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsMoneyChangedNotify* CMessageCorpsMoneyChangedNotify::default_instance_ = NULL;

CMessageCorpsMoneyChangedNotify* CMessageCorpsMoneyChangedNotify::New() const {
  return new CMessageCorpsMoneyChangedNotify;
}

void CMessageCorpsMoneyChangedNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    money_ = 0u;
    roleid_ = 0u;
    reason_ = 0u;
    if (_has_bit(3)) {
      if (rolename_ != &_default_rolename_) {
        rolename_->clear();
      }
    }
    valeu_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsMoneyChangedNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Money = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Reason;
        break;
      }
      
      // optional uint32 Reason = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Reason:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &reason_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_RoleName;
        break;
      }
      
      // optional string RoleName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RoleName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_rolename()));
        if (input->ExpectTag(40)) goto parse_Valeu;
        break;
      }
      
      // optional int32 Valeu = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Valeu:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &valeu_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsMoneyChangedNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsMoneyChangedNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Money = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->money(), output);
  }
  
  // optional uint32 RoleID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->roleid(), output);
  }
  
  // optional uint32 Reason = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->reason(), output);
  }
  
  // optional string RoleName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->rolename(), output);
  }
  
  // optional int32 Valeu = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(5, this->valeu(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsMoneyChangedNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Money = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->money(), target);
  }
  
  // optional uint32 RoleID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->roleid(), target);
  }
  
  // optional uint32 Reason = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->reason(), target);
  }
  
  // optional string RoleName = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->rolename(), target);
  }
  
  // optional int32 Valeu = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(5, this->valeu(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsMoneyChangedNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Money = 1;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
    // optional uint32 RoleID = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 Reason = 3;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->reason());
    }
    
    // optional string RoleName = 4;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->rolename());
    }
    
    // optional int32 Valeu = 5;
    if (has_valeu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->valeu());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsMoneyChangedNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsMoneyChangedNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsMoneyChangedNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsMoneyChangedNotify::MergeFrom(const CMessageCorpsMoneyChangedNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_money(from.money());
    }
    if (from._has_bit(1)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(2)) {
      set_reason(from.reason());
    }
    if (from._has_bit(3)) {
      set_rolename(from.rolename());
    }
    if (from._has_bit(4)) {
      set_valeu(from.valeu());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsMoneyChangedNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsMoneyChangedNotify::CopyFrom(const CMessageCorpsMoneyChangedNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsMoneyChangedNotify::Swap(CMessageCorpsMoneyChangedNotify* other) {
  if (other != this) {
    std::swap(money_, other->money_);
    std::swap(roleid_, other->roleid_);
    std::swap(reason_, other->reason_);
    std::swap(rolename_, other->rolename_);
    std::swap(valeu_, other->valeu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsMoneyChangedNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsMoneyChangedNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsMoneyChangedNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsMoneyChangedNotify_reflection_;
}

// ===================================================================

const ::std::string CMessageCorpsGloryChangedNotify::_default_rolename_;
#ifndef _MSC_VER
const int CMessageCorpsGloryChangedNotify::kGloryFieldNumber;
const int CMessageCorpsGloryChangedNotify::kRoleIDFieldNumber;
const int CMessageCorpsGloryChangedNotify::kReasonFieldNumber;
const int CMessageCorpsGloryChangedNotify::kRoleNameFieldNumber;
const int CMessageCorpsGloryChangedNotify::kValueFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsGloryChangedNotify::CMessageCorpsGloryChangedNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsGloryChangedNotify::InitAsDefaultInstance() {}

CMessageCorpsGloryChangedNotify::CMessageCorpsGloryChangedNotify(const CMessageCorpsGloryChangedNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsGloryChangedNotify::SharedCtor() {
  _cached_size_ = 0;
  glory_ = 0u;
  roleid_ = 0u;
  reason_ = 0u;
  rolename_ = const_cast< ::std::string*>(&_default_rolename_);
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsGloryChangedNotify::~CMessageCorpsGloryChangedNotify() {
  SharedDtor();
}

void CMessageCorpsGloryChangedNotify::SharedDtor() {
  if (rolename_ != &_default_rolename_) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsGloryChangedNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsGloryChangedNotify_descriptor_;
}

const CMessageCorpsGloryChangedNotify& CMessageCorpsGloryChangedNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsGloryChangedNotify* CMessageCorpsGloryChangedNotify::default_instance_ = NULL;

CMessageCorpsGloryChangedNotify* CMessageCorpsGloryChangedNotify::New() const {
  return new CMessageCorpsGloryChangedNotify;
}

void CMessageCorpsGloryChangedNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    glory_ = 0u;
    roleid_ = 0u;
    reason_ = 0u;
    if (_has_bit(3)) {
      if (rolename_ != &_default_rolename_) {
        rolename_->clear();
      }
    }
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsGloryChangedNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Glory = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &glory_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Reason;
        break;
      }
      
      // optional uint32 Reason = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Reason:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &reason_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_RoleName;
        break;
      }
      
      // optional string RoleName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RoleName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_rolename()));
        if (input->ExpectTag(40)) goto parse_Value;
        break;
      }
      
      // optional int32 Value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Value:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &value_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsGloryChangedNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsGloryChangedNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Glory = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->glory(), output);
  }
  
  // optional uint32 RoleID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->roleid(), output);
  }
  
  // optional uint32 Reason = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->reason(), output);
  }
  
  // optional string RoleName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->rolename(), output);
  }
  
  // optional int32 Value = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(5, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsGloryChangedNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Glory = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->glory(), target);
  }
  
  // optional uint32 RoleID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->roleid(), target);
  }
  
  // optional uint32 Reason = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->reason(), target);
  }
  
  // optional string RoleName = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->rolename(), target);
  }
  
  // optional int32 Value = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(5, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsGloryChangedNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Glory = 1;
    if (has_glory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->glory());
    }
    
    // optional uint32 RoleID = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 Reason = 3;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->reason());
    }
    
    // optional string RoleName = 4;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->rolename());
    }
    
    // optional int32 Value = 5;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsGloryChangedNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsGloryChangedNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsGloryChangedNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsGloryChangedNotify::MergeFrom(const CMessageCorpsGloryChangedNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_glory(from.glory());
    }
    if (from._has_bit(1)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(2)) {
      set_reason(from.reason());
    }
    if (from._has_bit(3)) {
      set_rolename(from.rolename());
    }
    if (from._has_bit(4)) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsGloryChangedNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsGloryChangedNotify::CopyFrom(const CMessageCorpsGloryChangedNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsGloryChangedNotify::Swap(CMessageCorpsGloryChangedNotify* other) {
  if (other != this) {
    std::swap(glory_, other->glory_);
    std::swap(roleid_, other->roleid_);
    std::swap(reason_, other->reason_);
    std::swap(rolename_, other->rolename_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsGloryChangedNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsGloryChangedNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsGloryChangedNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsGloryChangedNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCorpsContributeChangedNotify::kCorpHeadFieldNumber;
const int CMessageCorpsContributeChangedNotify::kContributeFieldNumber;
const int CMessageCorpsContributeChangedNotify::kRoleIDFieldNumber;
const int CMessageCorpsContributeChangedNotify::kValueFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsContributeChangedNotify::CMessageCorpsContributeChangedNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsContributeChangedNotify::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsContributeChangedNotify::CMessageCorpsContributeChangedNotify(const CMessageCorpsContributeChangedNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsContributeChangedNotify::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  contribute_ = 0u;
  roleid_ = 0u;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsContributeChangedNotify::~CMessageCorpsContributeChangedNotify() {
  SharedDtor();
}

void CMessageCorpsContributeChangedNotify::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsContributeChangedNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsContributeChangedNotify_descriptor_;
}

const CMessageCorpsContributeChangedNotify& CMessageCorpsContributeChangedNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsContributeChangedNotify* CMessageCorpsContributeChangedNotify::default_instance_ = NULL;

CMessageCorpsContributeChangedNotify* CMessageCorpsContributeChangedNotify::New() const {
  return new CMessageCorpsContributeChangedNotify;
}

void CMessageCorpsContributeChangedNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    contribute_ = 0u;
    roleid_ = 0u;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsContributeChangedNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_Contribute;
        break;
      }
      
      // optional uint32 Contribute = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Contribute:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &contribute_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Value;
        break;
      }
      
      // optional int32 Value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Value:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &value_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsContributeChangedNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsContributeChangedNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 Contribute = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->contribute(), output);
  }
  
  // optional uint32 RoleID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->roleid(), output);
  }
  
  // optional int32 Value = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsContributeChangedNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 Contribute = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->contribute(), target);
  }
  
  // optional uint32 RoleID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->roleid(), target);
  }
  
  // optional int32 Value = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsContributeChangedNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 Contribute = 2;
    if (has_contribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->contribute());
    }
    
    // optional uint32 RoleID = 3;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional int32 Value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsContributeChangedNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsContributeChangedNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsContributeChangedNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsContributeChangedNotify::MergeFrom(const CMessageCorpsContributeChangedNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_contribute(from.contribute());
    }
    if (from._has_bit(2)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(3)) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsContributeChangedNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsContributeChangedNotify::CopyFrom(const CMessageCorpsContributeChangedNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsContributeChangedNotify::Swap(CMessageCorpsContributeChangedNotify* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(contribute_, other->contribute_);
    std::swap(roleid_, other->roleid_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsContributeChangedNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsContributeChangedNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsContributeChangedNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsContributeChangedNotify_reflection_;
}

// ===================================================================

const ::std::string CMessageCorpsBossTimesChangedNotify::_default_rolename_;
#ifndef _MSC_VER
const int CMessageCorpsBossTimesChangedNotify::kBossIDFieldNumber;
const int CMessageCorpsBossTimesChangedNotify::kRoleIDFieldNumber;
const int CMessageCorpsBossTimesChangedNotify::kReasonFieldNumber;
const int CMessageCorpsBossTimesChangedNotify::kRoleNameFieldNumber;
const int CMessageCorpsBossTimesChangedNotify::kTimesFieldNumber;
const int CMessageCorpsBossTimesChangedNotify::kValueFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsBossTimesChangedNotify::CMessageCorpsBossTimesChangedNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsBossTimesChangedNotify::InitAsDefaultInstance() {}

CMessageCorpsBossTimesChangedNotify::CMessageCorpsBossTimesChangedNotify(const CMessageCorpsBossTimesChangedNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsBossTimesChangedNotify::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = 0u;
  roleid_ = 0u;
  reason_ = 0u;
  rolename_ = const_cast< ::std::string*>(&_default_rolename_);
  times_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsBossTimesChangedNotify::~CMessageCorpsBossTimesChangedNotify() {
  SharedDtor();
}

void CMessageCorpsBossTimesChangedNotify::SharedDtor() {
  if (rolename_ != &_default_rolename_) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsBossTimesChangedNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsBossTimesChangedNotify_descriptor_;
}

const CMessageCorpsBossTimesChangedNotify& CMessageCorpsBossTimesChangedNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsBossTimesChangedNotify* CMessageCorpsBossTimesChangedNotify::default_instance_ = NULL;

CMessageCorpsBossTimesChangedNotify* CMessageCorpsBossTimesChangedNotify::New() const {
  return new CMessageCorpsBossTimesChangedNotify;
}

void CMessageCorpsBossTimesChangedNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bossid_ = 0u;
    roleid_ = 0u;
    reason_ = 0u;
    if (_has_bit(3)) {
      if (rolename_ != &_default_rolename_) {
        rolename_->clear();
      }
    }
    times_ = 0u;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsBossTimesChangedNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 BossID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &bossid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Reason;
        break;
      }
      
      // optional uint32 Reason = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Reason:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &reason_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_RoleName;
        break;
      }
      
      // optional string RoleName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RoleName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_rolename()));
        if (input->ExpectTag(40)) goto parse_Times;
        break;
      }
      
      // optional uint32 Times = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Times:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &times_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Value;
        break;
      }
      
      // optional uint32 Value = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Value:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &value_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsBossTimesChangedNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsBossTimesChangedNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 BossID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->bossid(), output);
  }
  
  // optional uint32 RoleID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->roleid(), output);
  }
  
  // optional uint32 Reason = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->reason(), output);
  }
  
  // optional string RoleName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->rolename(), output);
  }
  
  // optional uint32 Times = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->times(), output);
  }
  
  // optional uint32 Value = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsBossTimesChangedNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 BossID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->bossid(), target);
  }
  
  // optional uint32 RoleID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->roleid(), target);
  }
  
  // optional uint32 Reason = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->reason(), target);
  }
  
  // optional string RoleName = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->rolename(), target);
  }
  
  // optional uint32 Times = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->times(), target);
  }
  
  // optional uint32 Value = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsBossTimesChangedNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BossID = 1;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->bossid());
    }
    
    // optional uint32 RoleID = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 Reason = 3;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->reason());
    }
    
    // optional string RoleName = 4;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->rolename());
    }
    
    // optional uint32 Times = 5;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->times());
    }
    
    // optional uint32 Value = 6;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsBossTimesChangedNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsBossTimesChangedNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsBossTimesChangedNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsBossTimesChangedNotify::MergeFrom(const CMessageCorpsBossTimesChangedNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_bossid(from.bossid());
    }
    if (from._has_bit(1)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(2)) {
      set_reason(from.reason());
    }
    if (from._has_bit(3)) {
      set_rolename(from.rolename());
    }
    if (from._has_bit(4)) {
      set_times(from.times());
    }
    if (from._has_bit(5)) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsBossTimesChangedNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsBossTimesChangedNotify::CopyFrom(const CMessageCorpsBossTimesChangedNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsBossTimesChangedNotify::Swap(CMessageCorpsBossTimesChangedNotify* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    std::swap(roleid_, other->roleid_);
    std::swap(reason_, other->reason_);
    std::swap(rolename_, other->rolename_);
    std::swap(times_, other->times_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsBossTimesChangedNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsBossTimesChangedNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsBossTimesChangedNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsBossTimesChangedNotify_reflection_;
}

// ===================================================================

const ::std::string CMessageCorpsBossRefineValueNotify::_default_rolename_;
#ifndef _MSC_VER
const int CMessageCorpsBossRefineValueNotify::kRefineValueFieldNumber;
const int CMessageCorpsBossRefineValueNotify::kRoleIDFieldNumber;
const int CMessageCorpsBossRefineValueNotify::kValueFieldNumber;
const int CMessageCorpsBossRefineValueNotify::kReasonFieldNumber;
const int CMessageCorpsBossRefineValueNotify::kRoleNameFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsBossRefineValueNotify::CMessageCorpsBossRefineValueNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsBossRefineValueNotify::InitAsDefaultInstance() {}

CMessageCorpsBossRefineValueNotify::CMessageCorpsBossRefineValueNotify(const CMessageCorpsBossRefineValueNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsBossRefineValueNotify::SharedCtor() {
  _cached_size_ = 0;
  refinevalue_ = 0u;
  roleid_ = 0u;
  value_ = 0u;
  reason_ = 0u;
  rolename_ = const_cast< ::std::string*>(&_default_rolename_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsBossRefineValueNotify::~CMessageCorpsBossRefineValueNotify() {
  SharedDtor();
}

void CMessageCorpsBossRefineValueNotify::SharedDtor() {
  if (rolename_ != &_default_rolename_) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsBossRefineValueNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsBossRefineValueNotify_descriptor_;
}

const CMessageCorpsBossRefineValueNotify& CMessageCorpsBossRefineValueNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsBossRefineValueNotify* CMessageCorpsBossRefineValueNotify::default_instance_ = NULL;

CMessageCorpsBossRefineValueNotify* CMessageCorpsBossRefineValueNotify::New() const {
  return new CMessageCorpsBossRefineValueNotify;
}

void CMessageCorpsBossRefineValueNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    refinevalue_ = 0u;
    roleid_ = 0u;
    value_ = 0u;
    reason_ = 0u;
    if (_has_bit(4)) {
      if (rolename_ != &_default_rolename_) {
        rolename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsBossRefineValueNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RefineValue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &refinevalue_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Value;
        break;
      }
      
      // optional uint32 Value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Value:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &value_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Reason;
        break;
      }
      
      // optional uint32 Reason = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Reason:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &reason_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_RoleName;
        break;
      }
      
      // optional string RoleName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RoleName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_rolename()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsBossRefineValueNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsBossRefineValueNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RefineValue = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->refinevalue(), output);
  }
  
  // optional uint32 RoleID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->roleid(), output);
  }
  
  // optional uint32 Value = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->value(), output);
  }
  
  // optional uint32 Reason = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->reason(), output);
  }
  
  // optional string RoleName = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->rolename(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsBossRefineValueNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RefineValue = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->refinevalue(), target);
  }
  
  // optional uint32 RoleID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->roleid(), target);
  }
  
  // optional uint32 Value = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->value(), target);
  }
  
  // optional uint32 Reason = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->reason(), target);
  }
  
  // optional string RoleName = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->rolename(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsBossRefineValueNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RefineValue = 1;
    if (has_refinevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->refinevalue());
    }
    
    // optional uint32 RoleID = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 Value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->value());
    }
    
    // optional uint32 Reason = 4;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->reason());
    }
    
    // optional string RoleName = 5;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->rolename());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsBossRefineValueNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsBossRefineValueNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsBossRefineValueNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsBossRefineValueNotify::MergeFrom(const CMessageCorpsBossRefineValueNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_refinevalue(from.refinevalue());
    }
    if (from._has_bit(1)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(2)) {
      set_value(from.value());
    }
    if (from._has_bit(3)) {
      set_reason(from.reason());
    }
    if (from._has_bit(4)) {
      set_rolename(from.rolename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsBossRefineValueNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsBossRefineValueNotify::CopyFrom(const CMessageCorpsBossRefineValueNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsBossRefineValueNotify::Swap(CMessageCorpsBossRefineValueNotify* other) {
  if (other != this) {
    std::swap(refinevalue_, other->refinevalue_);
    std::swap(roleid_, other->roleid_);
    std::swap(value_, other->value_);
    std::swap(reason_, other->reason_);
    std::swap(rolename_, other->rolename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsBossRefineValueNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsBossRefineValueNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsBossRefineValueNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsBossRefineValueNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCorpsCollectActiveChangeNotify::kCorpHeadFieldNumber;
const int CMessageCorpsCollectActiveChangeNotify::kActiveValueFieldNumber;
const int CMessageCorpsCollectActiveChangeNotify::kVauleFieldNumber;
const int CMessageCorpsCollectActiveChangeNotify::kChangeTypeFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsCollectActiveChangeNotify::CMessageCorpsCollectActiveChangeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsCollectActiveChangeNotify::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsCollectActiveChangeNotify::CMessageCorpsCollectActiveChangeNotify(const CMessageCorpsCollectActiveChangeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsCollectActiveChangeNotify::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  activevalue_ = 0u;
  vaule_ = 0u;
  changetype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsCollectActiveChangeNotify::~CMessageCorpsCollectActiveChangeNotify() {
  SharedDtor();
}

void CMessageCorpsCollectActiveChangeNotify::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsCollectActiveChangeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsCollectActiveChangeNotify_descriptor_;
}

const CMessageCorpsCollectActiveChangeNotify& CMessageCorpsCollectActiveChangeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsCollectActiveChangeNotify* CMessageCorpsCollectActiveChangeNotify::default_instance_ = NULL;

CMessageCorpsCollectActiveChangeNotify* CMessageCorpsCollectActiveChangeNotify::New() const {
  return new CMessageCorpsCollectActiveChangeNotify;
}

void CMessageCorpsCollectActiveChangeNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    activevalue_ = 0u;
    vaule_ = 0u;
    changetype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsCollectActiveChangeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_ActiveValue;
        break;
      }
      
      // optional uint32 ActiveValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ActiveValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &activevalue_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Vaule;
        break;
      }
      
      // optional uint32 Vaule = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Vaule:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &vaule_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_ChangeType;
        break;
      }
      
      // optional uint32 ChangeType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ChangeType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &changetype_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsCollectActiveChangeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsCollectActiveChangeNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 ActiveValue = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->activevalue(), output);
  }
  
  // optional uint32 Vaule = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->vaule(), output);
  }
  
  // optional uint32 ChangeType = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->changetype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsCollectActiveChangeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 ActiveValue = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->activevalue(), target);
  }
  
  // optional uint32 Vaule = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->vaule(), target);
  }
  
  // optional uint32 ChangeType = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->changetype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsCollectActiveChangeNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 ActiveValue = 2;
    if (has_activevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->activevalue());
    }
    
    // optional uint32 Vaule = 3;
    if (has_vaule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->vaule());
    }
    
    // optional uint32 ChangeType = 4;
    if (has_changetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->changetype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsCollectActiveChangeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsCollectActiveChangeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsCollectActiveChangeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsCollectActiveChangeNotify::MergeFrom(const CMessageCorpsCollectActiveChangeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_activevalue(from.activevalue());
    }
    if (from._has_bit(2)) {
      set_vaule(from.vaule());
    }
    if (from._has_bit(3)) {
      set_changetype(from.changetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsCollectActiveChangeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsCollectActiveChangeNotify::CopyFrom(const CMessageCorpsCollectActiveChangeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsCollectActiveChangeNotify::Swap(CMessageCorpsCollectActiveChangeNotify* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(activevalue_, other->activevalue_);
    std::swap(vaule_, other->vaule_);
    std::swap(changetype_, other->changetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsCollectActiveChangeNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsCollectActiveChangeNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsCollectActiveChangeNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsCollectActiveChangeNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageMendShengHuoTaiRequest::kNpcEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageMendShengHuoTaiRequest::CMessageMendShengHuoTaiRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageMendShengHuoTaiRequest::InitAsDefaultInstance() {}

CMessageMendShengHuoTaiRequest::CMessageMendShengHuoTaiRequest(const CMessageMendShengHuoTaiRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageMendShengHuoTaiRequest::SharedCtor() {
  _cached_size_ = 0;
  npcentityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageMendShengHuoTaiRequest::~CMessageMendShengHuoTaiRequest() {
  SharedDtor();
}

void CMessageMendShengHuoTaiRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageMendShengHuoTaiRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageMendShengHuoTaiRequest_descriptor_;
}

const CMessageMendShengHuoTaiRequest& CMessageMendShengHuoTaiRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageMendShengHuoTaiRequest* CMessageMendShengHuoTaiRequest::default_instance_ = NULL;

CMessageMendShengHuoTaiRequest* CMessageMendShengHuoTaiRequest::New() const {
  return new CMessageMendShengHuoTaiRequest;
}

void CMessageMendShengHuoTaiRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npcentityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageMendShengHuoTaiRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 NpcEntityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcentityid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageMendShengHuoTaiRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageMendShengHuoTaiRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 NpcEntityID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->npcentityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageMendShengHuoTaiRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 NpcEntityID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->npcentityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageMendShengHuoTaiRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 NpcEntityID = 1;
    if (has_npcentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcentityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageMendShengHuoTaiRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageMendShengHuoTaiRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageMendShengHuoTaiRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageMendShengHuoTaiRequest::MergeFrom(const CMessageMendShengHuoTaiRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_npcentityid(from.npcentityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageMendShengHuoTaiRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMendShengHuoTaiRequest::CopyFrom(const CMessageMendShengHuoTaiRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMendShengHuoTaiRequest::Swap(CMessageMendShengHuoTaiRequest* other) {
  if (other != this) {
    std::swap(npcentityid_, other->npcentityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageMendShengHuoTaiRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageMendShengHuoTaiRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageMendShengHuoTaiRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageMendShengHuoTaiRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCorpsPropertyNotice::kCorpHeadFieldNumber;
const int CMessageCorpsPropertyNotice::kPropertyFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsPropertyNotice::CMessageCorpsPropertyNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsPropertyNotice::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
  property_ = const_cast< ::CorpsProperty*>(&::CorpsProperty::default_instance());
}

CMessageCorpsPropertyNotice::CMessageCorpsPropertyNotice(const CMessageCorpsPropertyNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsPropertyNotice::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  property_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsPropertyNotice::~CMessageCorpsPropertyNotice() {
  SharedDtor();
}

void CMessageCorpsPropertyNotice::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
    delete property_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsPropertyNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsPropertyNotice_descriptor_;
}

const CMessageCorpsPropertyNotice& CMessageCorpsPropertyNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsPropertyNotice* CMessageCorpsPropertyNotice::default_instance_ = NULL;

CMessageCorpsPropertyNotice* CMessageCorpsPropertyNotice::New() const {
  return new CMessageCorpsPropertyNotice;
}

void CMessageCorpsPropertyNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    if (_has_bit(1)) {
      if (property_ != NULL) property_->::CorpsProperty::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsPropertyNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(18)) goto parse_Property;
        break;
      }
      
      // optional .CorpsProperty Property = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Property:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_property()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsPropertyNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsPropertyNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional .CorpsProperty Property = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->property(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsPropertyNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional .CorpsProperty Property = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->property(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsPropertyNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional .CorpsProperty Property = 2;
    if (has_property()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->property());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsPropertyNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsPropertyNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsPropertyNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsPropertyNotice::MergeFrom(const CMessageCorpsPropertyNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      mutable_property()->::CorpsProperty::MergeFrom(from.property());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsPropertyNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsPropertyNotice::CopyFrom(const CMessageCorpsPropertyNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsPropertyNotice::Swap(CMessageCorpsPropertyNotice* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(property_, other->property_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsPropertyNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsPropertyNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsPropertyNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsPropertyNotice_reflection_;
}

// ===================================================================

const ::std::string CMessageCorpsOperateRoomRequest::_default_name_;
#ifndef _MSC_VER
const int CMessageCorpsOperateRoomRequest::kCorpHeadFieldNumber;
const int CMessageCorpsOperateRoomRequest::kActionFieldNumber;
const int CMessageCorpsOperateRoomRequest::kMoneyFieldNumber;
const int CMessageCorpsOperateRoomRequest::kNameFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsOperateRoomRequest::CMessageCorpsOperateRoomRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsOperateRoomRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsOperateRoomRequest::CMessageCorpsOperateRoomRequest(const CMessageCorpsOperateRoomRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsOperateRoomRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  action_ = 0u;
  money_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsOperateRoomRequest::~CMessageCorpsOperateRoomRequest() {
  SharedDtor();
}

void CMessageCorpsOperateRoomRequest::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsOperateRoomRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsOperateRoomRequest_descriptor_;
}

const CMessageCorpsOperateRoomRequest& CMessageCorpsOperateRoomRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsOperateRoomRequest* CMessageCorpsOperateRoomRequest::default_instance_ = NULL;

CMessageCorpsOperateRoomRequest* CMessageCorpsOperateRoomRequest::New() const {
  return new CMessageCorpsOperateRoomRequest;
}

void CMessageCorpsOperateRoomRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    action_ = 0u;
    money_ = 0u;
    if (_has_bit(3)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsOperateRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_Action;
        break;
      }
      
      // optional uint32 Action = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Action:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &action_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Money;
        break;
      }
      
      // optional uint32 Money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_Name;
        break;
      }
      
      // optional string Name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsOperateRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsOperateRoomRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 Action = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->action(), output);
  }
  
  // optional uint32 Money = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->money(), output);
  }
  
  // optional string Name = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsOperateRoomRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 Action = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->action(), target);
  }
  
  // optional uint32 Money = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->money(), target);
  }
  
  // optional string Name = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsOperateRoomRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 Action = 2;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->action());
    }
    
    // optional uint32 Money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
    // optional string Name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsOperateRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsOperateRoomRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsOperateRoomRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsOperateRoomRequest::MergeFrom(const CMessageCorpsOperateRoomRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_action(from.action());
    }
    if (from._has_bit(2)) {
      set_money(from.money());
    }
    if (from._has_bit(3)) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsOperateRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsOperateRoomRequest::CopyFrom(const CMessageCorpsOperateRoomRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsOperateRoomRequest::Swap(CMessageCorpsOperateRoomRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(action_, other->action_);
    std::swap(money_, other->money_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsOperateRoomRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsOperateRoomRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsOperateRoomRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsOperateRoomRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageCorpsOperateRoomResponse::_default_name_;
#ifndef _MSC_VER
const int CMessageCorpsOperateRoomResponse::kCorpHeadFieldNumber;
const int CMessageCorpsOperateRoomResponse::kActionFieldNumber;
const int CMessageCorpsOperateRoomResponse::kRtnCodeFieldNumber;
const int CMessageCorpsOperateRoomResponse::kMoneyFieldNumber;
const int CMessageCorpsOperateRoomResponse::kNameFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsOperateRoomResponse::CMessageCorpsOperateRoomResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsOperateRoomResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsOperateRoomResponse::CMessageCorpsOperateRoomResponse(const CMessageCorpsOperateRoomResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsOperateRoomResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  action_ = 0u;
  rtncode_ = 0u;
  money_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsOperateRoomResponse::~CMessageCorpsOperateRoomResponse() {
  SharedDtor();
}

void CMessageCorpsOperateRoomResponse::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsOperateRoomResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsOperateRoomResponse_descriptor_;
}

const CMessageCorpsOperateRoomResponse& CMessageCorpsOperateRoomResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsOperateRoomResponse* CMessageCorpsOperateRoomResponse::default_instance_ = NULL;

CMessageCorpsOperateRoomResponse* CMessageCorpsOperateRoomResponse::New() const {
  return new CMessageCorpsOperateRoomResponse;
}

void CMessageCorpsOperateRoomResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    action_ = 0u;
    rtncode_ = 0u;
    money_ = 0u;
    if (_has_bit(4)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsOperateRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_Action;
        break;
      }
      
      // optional uint32 Action = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Action:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &action_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_RtnCode;
        break;
      }
      
      // optional uint32 RtnCode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RtnCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rtncode_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Money;
        break;
      }
      
      // optional uint32 Money = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_Name;
        break;
      }
      
      // optional string Name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsOperateRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsOperateRoomResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 Action = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->action(), output);
  }
  
  // optional uint32 RtnCode = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->rtncode(), output);
  }
  
  // optional uint32 Money = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->money(), output);
  }
  
  // optional string Name = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsOperateRoomResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 Action = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->action(), target);
  }
  
  // optional uint32 RtnCode = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->rtncode(), target);
  }
  
  // optional uint32 Money = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->money(), target);
  }
  
  // optional string Name = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsOperateRoomResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 Action = 2;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->action());
    }
    
    // optional uint32 RtnCode = 3;
    if (has_rtncode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rtncode());
    }
    
    // optional uint32 Money = 4;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
    // optional string Name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsOperateRoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsOperateRoomResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsOperateRoomResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsOperateRoomResponse::MergeFrom(const CMessageCorpsOperateRoomResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_action(from.action());
    }
    if (from._has_bit(2)) {
      set_rtncode(from.rtncode());
    }
    if (from._has_bit(3)) {
      set_money(from.money());
    }
    if (from._has_bit(4)) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsOperateRoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsOperateRoomResponse::CopyFrom(const CMessageCorpsOperateRoomResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsOperateRoomResponse::Swap(CMessageCorpsOperateRoomResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(action_, other->action_);
    std::swap(rtncode_, other->rtncode_);
    std::swap(money_, other->money_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsOperateRoomResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsOperateRoomResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsOperateRoomResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsOperateRoomResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageCorpsRoomNotice::_default_rootername_;
#ifndef _MSC_VER
const int CMessageCorpsRoomNotice::kCorpHeadFieldNumber;
const int CMessageCorpsRoomNotice::kActionFieldNumber;
const int CMessageCorpsRoomNotice::kRooterNameFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsRoomNotice::CMessageCorpsRoomNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsRoomNotice::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsRoomNotice::CMessageCorpsRoomNotice(const CMessageCorpsRoomNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsRoomNotice::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  action_ = 0u;
  rootername_ = const_cast< ::std::string*>(&_default_rootername_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsRoomNotice::~CMessageCorpsRoomNotice() {
  SharedDtor();
}

void CMessageCorpsRoomNotice::SharedDtor() {
  if (rootername_ != &_default_rootername_) {
    delete rootername_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsRoomNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsRoomNotice_descriptor_;
}

const CMessageCorpsRoomNotice& CMessageCorpsRoomNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsRoomNotice* CMessageCorpsRoomNotice::default_instance_ = NULL;

CMessageCorpsRoomNotice* CMessageCorpsRoomNotice::New() const {
  return new CMessageCorpsRoomNotice;
}

void CMessageCorpsRoomNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    action_ = 0u;
    if (_has_bit(2)) {
      if (rootername_ != &_default_rootername_) {
        rootername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsRoomNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_Action;
        break;
      }
      
      // optional uint32 Action = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Action:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &action_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_RooterName;
        break;
      }
      
      // optional string RooterName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RooterName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_rootername()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsRoomNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsRoomNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 Action = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->action(), output);
  }
  
  // optional string RooterName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->rootername(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsRoomNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 Action = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->action(), target);
  }
  
  // optional string RooterName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->rootername(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsRoomNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 Action = 2;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->action());
    }
    
    // optional string RooterName = 3;
    if (has_rootername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->rootername());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsRoomNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsRoomNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsRoomNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsRoomNotice::MergeFrom(const CMessageCorpsRoomNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_action(from.action());
    }
    if (from._has_bit(2)) {
      set_rootername(from.rootername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsRoomNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsRoomNotice::CopyFrom(const CMessageCorpsRoomNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsRoomNotice::Swap(CMessageCorpsRoomNotice* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(action_, other->action_);
    std::swap(rootername_, other->rootername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsRoomNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsRoomNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsRoomNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsRoomNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCorpsChallegeRequest::kCorpHeadFieldNumber;
const int CMessageCorpsChallegeRequest::kActionFieldNumber;
const int CMessageCorpsChallegeRequest::kDesCropsIDFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsChallegeRequest::CMessageCorpsChallegeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsChallegeRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsChallegeRequest::CMessageCorpsChallegeRequest(const CMessageCorpsChallegeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsChallegeRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  action_ = 0u;
  descropsid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsChallegeRequest::~CMessageCorpsChallegeRequest() {
  SharedDtor();
}

void CMessageCorpsChallegeRequest::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsChallegeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsChallegeRequest_descriptor_;
}

const CMessageCorpsChallegeRequest& CMessageCorpsChallegeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsChallegeRequest* CMessageCorpsChallegeRequest::default_instance_ = NULL;

CMessageCorpsChallegeRequest* CMessageCorpsChallegeRequest::New() const {
  return new CMessageCorpsChallegeRequest;
}

void CMessageCorpsChallegeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    action_ = 0u;
    descropsid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsChallegeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_Action;
        break;
      }
      
      // optional uint32 Action = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Action:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &action_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_DesCropsID;
        break;
      }
      
      // optional uint32 DesCropsID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DesCropsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &descropsid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsChallegeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsChallegeRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 Action = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->action(), output);
  }
  
  // optional uint32 DesCropsID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->descropsid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsChallegeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 Action = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->action(), target);
  }
  
  // optional uint32 DesCropsID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->descropsid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsChallegeRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 Action = 2;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->action());
    }
    
    // optional uint32 DesCropsID = 3;
    if (has_descropsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->descropsid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsChallegeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsChallegeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsChallegeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsChallegeRequest::MergeFrom(const CMessageCorpsChallegeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_action(from.action());
    }
    if (from._has_bit(2)) {
      set_descropsid(from.descropsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsChallegeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsChallegeRequest::CopyFrom(const CMessageCorpsChallegeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsChallegeRequest::Swap(CMessageCorpsChallegeRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(action_, other->action_);
    std::swap(descropsid_, other->descropsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsChallegeRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsChallegeRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsChallegeRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsChallegeRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCorpsChallegeResponse::kCorpHeadFieldNumber;
const int CMessageCorpsChallegeResponse::kRtnCodeFieldNumber;
const int CMessageCorpsChallegeResponse::kActionFieldNumber;
const int CMessageCorpsChallegeResponse::kDesCropsIDFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsChallegeResponse::CMessageCorpsChallegeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsChallegeResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsChallegeResponse::CMessageCorpsChallegeResponse(const CMessageCorpsChallegeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsChallegeResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  rtncode_ = 0u;
  action_ = 0u;
  descropsid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsChallegeResponse::~CMessageCorpsChallegeResponse() {
  SharedDtor();
}

void CMessageCorpsChallegeResponse::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsChallegeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsChallegeResponse_descriptor_;
}

const CMessageCorpsChallegeResponse& CMessageCorpsChallegeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsChallegeResponse* CMessageCorpsChallegeResponse::default_instance_ = NULL;

CMessageCorpsChallegeResponse* CMessageCorpsChallegeResponse::New() const {
  return new CMessageCorpsChallegeResponse;
}

void CMessageCorpsChallegeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    rtncode_ = 0u;
    action_ = 0u;
    descropsid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsChallegeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_RtnCode;
        break;
      }
      
      // optional uint32 RtnCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RtnCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rtncode_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Action;
        break;
      }
      
      // optional uint32 Action = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Action:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &action_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_DesCropsID;
        break;
      }
      
      // optional uint32 DesCropsID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DesCropsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &descropsid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsChallegeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsChallegeResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 RtnCode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->rtncode(), output);
  }
  
  // optional uint32 Action = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->action(), output);
  }
  
  // optional uint32 DesCropsID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->descropsid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsChallegeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 RtnCode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->rtncode(), target);
  }
  
  // optional uint32 Action = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->action(), target);
  }
  
  // optional uint32 DesCropsID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->descropsid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsChallegeResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 RtnCode = 2;
    if (has_rtncode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rtncode());
    }
    
    // optional uint32 Action = 3;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->action());
    }
    
    // optional uint32 DesCropsID = 4;
    if (has_descropsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->descropsid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsChallegeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsChallegeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsChallegeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsChallegeResponse::MergeFrom(const CMessageCorpsChallegeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_rtncode(from.rtncode());
    }
    if (from._has_bit(2)) {
      set_action(from.action());
    }
    if (from._has_bit(3)) {
      set_descropsid(from.descropsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsChallegeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsChallegeResponse::CopyFrom(const CMessageCorpsChallegeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsChallegeResponse::Swap(CMessageCorpsChallegeResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(rtncode_, other->rtncode_);
    std::swap(action_, other->action_);
    std::swap(descropsid_, other->descropsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsChallegeResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsChallegeResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsChallegeResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsChallegeResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageCorpsChallegeNotice::_default_srccorpsname_;
const ::std::string CMessageCorpsChallegeNotice::_default_descorpsname_;
const ::std::string CMessageCorpsChallegeNotice::_default_srcrootername_;
const ::std::string CMessageCorpsChallegeNotice::_default_desrootername_;
#ifndef _MSC_VER
const int CMessageCorpsChallegeNotice::kCorpHeadFieldNumber;
const int CMessageCorpsChallegeNotice::kSrcCorpsIDFieldNumber;
const int CMessageCorpsChallegeNotice::kSrcCorpsNameFieldNumber;
const int CMessageCorpsChallegeNotice::kDesCropsIDFieldNumber;
const int CMessageCorpsChallegeNotice::kDesCorpsNameFieldNumber;
const int CMessageCorpsChallegeNotice::kWinTimesFieldNumber;
const int CMessageCorpsChallegeNotice::kLostTimesFieldNumber;
const int CMessageCorpsChallegeNotice::kSrcRooterNameFieldNumber;
const int CMessageCorpsChallegeNotice::kDesRooterNameFieldNumber;
const int CMessageCorpsChallegeNotice::kActionFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsChallegeNotice::CMessageCorpsChallegeNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsChallegeNotice::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsChallegeNotice::CMessageCorpsChallegeNotice(const CMessageCorpsChallegeNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsChallegeNotice::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  srccorpsid_ = 0u;
  srccorpsname_ = const_cast< ::std::string*>(&_default_srccorpsname_);
  descropsid_ = 0u;
  descorpsname_ = const_cast< ::std::string*>(&_default_descorpsname_);
  wintimes_ = 0u;
  losttimes_ = 0u;
  srcrootername_ = const_cast< ::std::string*>(&_default_srcrootername_);
  desrootername_ = const_cast< ::std::string*>(&_default_desrootername_);
  action_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsChallegeNotice::~CMessageCorpsChallegeNotice() {
  SharedDtor();
}

void CMessageCorpsChallegeNotice::SharedDtor() {
  if (srccorpsname_ != &_default_srccorpsname_) {
    delete srccorpsname_;
  }
  if (descorpsname_ != &_default_descorpsname_) {
    delete descorpsname_;
  }
  if (srcrootername_ != &_default_srcrootername_) {
    delete srcrootername_;
  }
  if (desrootername_ != &_default_desrootername_) {
    delete desrootername_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsChallegeNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsChallegeNotice_descriptor_;
}

const CMessageCorpsChallegeNotice& CMessageCorpsChallegeNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsChallegeNotice* CMessageCorpsChallegeNotice::default_instance_ = NULL;

CMessageCorpsChallegeNotice* CMessageCorpsChallegeNotice::New() const {
  return new CMessageCorpsChallegeNotice;
}

void CMessageCorpsChallegeNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    srccorpsid_ = 0u;
    if (_has_bit(2)) {
      if (srccorpsname_ != &_default_srccorpsname_) {
        srccorpsname_->clear();
      }
    }
    descropsid_ = 0u;
    if (_has_bit(4)) {
      if (descorpsname_ != &_default_descorpsname_) {
        descorpsname_->clear();
      }
    }
    wintimes_ = 0u;
    losttimes_ = 0u;
    if (_has_bit(7)) {
      if (srcrootername_ != &_default_srcrootername_) {
        srcrootername_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (desrootername_ != &_default_desrootername_) {
        desrootername_->clear();
      }
    }
    action_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsChallegeNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_SrcCorpsID;
        break;
      }
      
      // optional uint32 SrcCorpsID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SrcCorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srccorpsid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_SrcCorpsName;
        break;
      }
      
      // optional string SrcCorpsName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SrcCorpsName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_srccorpsname()));
        if (input->ExpectTag(32)) goto parse_DesCropsID;
        break;
      }
      
      // optional uint32 DesCropsID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DesCropsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &descropsid_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_DesCorpsName;
        break;
      }
      
      // optional string DesCorpsName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_DesCorpsName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_descorpsname()));
        if (input->ExpectTag(48)) goto parse_WinTimes;
        break;
      }
      
      // optional uint32 WinTimes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WinTimes:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &wintimes_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_LostTimes;
        break;
      }
      
      // optional uint32 LostTimes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LostTimes:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &losttimes_));
        _set_bit(6);
        if (input->ExpectTag(66)) goto parse_SrcRooterName;
        break;
      }
      
      // optional string SrcRooterName = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SrcRooterName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_srcrootername()));
        if (input->ExpectTag(74)) goto parse_DesRooterName;
        break;
      }
      
      // optional string DesRooterName = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_DesRooterName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_desrootername()));
        if (input->ExpectTag(80)) goto parse_Action;
        break;
      }
      
      // optional uint32 Action = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Action:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &action_));
        _set_bit(9);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsChallegeNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsChallegeNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 SrcCorpsID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->srccorpsid(), output);
  }
  
  // optional string SrcCorpsName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->srccorpsname(), output);
  }
  
  // optional uint32 DesCropsID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->descropsid(), output);
  }
  
  // optional string DesCorpsName = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->descorpsname(), output);
  }
  
  // optional uint32 WinTimes = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->wintimes(), output);
  }
  
  // optional uint32 LostTimes = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->losttimes(), output);
  }
  
  // optional string SrcRooterName = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteString(8, this->srcrootername(), output);
  }
  
  // optional string DesRooterName = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteString(9, this->desrootername(), output);
  }
  
  // optional uint32 Action = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->action(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsChallegeNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 SrcCorpsID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->srccorpsid(), target);
  }
  
  // optional string SrcCorpsName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->srccorpsname(), target);
  }
  
  // optional uint32 DesCropsID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->descropsid(), target);
  }
  
  // optional string DesCorpsName = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->descorpsname(), target);
  }
  
  // optional uint32 WinTimes = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->wintimes(), target);
  }
  
  // optional uint32 LostTimes = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->losttimes(), target);
  }
  
  // optional string SrcRooterName = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(8, this->srcrootername(), target);
  }
  
  // optional string DesRooterName = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(9, this->desrootername(), target);
  }
  
  // optional uint32 Action = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->action(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsChallegeNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 SrcCorpsID = 2;
    if (has_srccorpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srccorpsid());
    }
    
    // optional string SrcCorpsName = 3;
    if (has_srccorpsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->srccorpsname());
    }
    
    // optional uint32 DesCropsID = 4;
    if (has_descropsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->descropsid());
    }
    
    // optional string DesCorpsName = 5;
    if (has_descorpsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->descorpsname());
    }
    
    // optional uint32 WinTimes = 6;
    if (has_wintimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->wintimes());
    }
    
    // optional uint32 LostTimes = 7;
    if (has_losttimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->losttimes());
    }
    
    // optional string SrcRooterName = 8;
    if (has_srcrootername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->srcrootername());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string DesRooterName = 9;
    if (has_desrootername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->desrootername());
    }
    
    // optional uint32 Action = 10;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->action());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsChallegeNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsChallegeNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsChallegeNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsChallegeNotice::MergeFrom(const CMessageCorpsChallegeNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_srccorpsid(from.srccorpsid());
    }
    if (from._has_bit(2)) {
      set_srccorpsname(from.srccorpsname());
    }
    if (from._has_bit(3)) {
      set_descropsid(from.descropsid());
    }
    if (from._has_bit(4)) {
      set_descorpsname(from.descorpsname());
    }
    if (from._has_bit(5)) {
      set_wintimes(from.wintimes());
    }
    if (from._has_bit(6)) {
      set_losttimes(from.losttimes());
    }
    if (from._has_bit(7)) {
      set_srcrootername(from.srcrootername());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_desrootername(from.desrootername());
    }
    if (from._has_bit(9)) {
      set_action(from.action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsChallegeNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsChallegeNotice::CopyFrom(const CMessageCorpsChallegeNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsChallegeNotice::Swap(CMessageCorpsChallegeNotice* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(srccorpsid_, other->srccorpsid_);
    std::swap(srccorpsname_, other->srccorpsname_);
    std::swap(descropsid_, other->descropsid_);
    std::swap(descorpsname_, other->descorpsname_);
    std::swap(wintimes_, other->wintimes_);
    std::swap(losttimes_, other->losttimes_);
    std::swap(srcrootername_, other->srcrootername_);
    std::swap(desrootername_, other->desrootername_);
    std::swap(action_, other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsChallegeNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsChallegeNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsChallegeNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsChallegeNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCorpsReplyChallegeRequest::kCorpHeadFieldNumber;
const int CMessageCorpsReplyChallegeRequest::kDesCorpsIDFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsReplyChallegeRequest::CMessageCorpsReplyChallegeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsReplyChallegeRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsReplyChallegeRequest::CMessageCorpsReplyChallegeRequest(const CMessageCorpsReplyChallegeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsReplyChallegeRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  descorpsid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsReplyChallegeRequest::~CMessageCorpsReplyChallegeRequest() {
  SharedDtor();
}

void CMessageCorpsReplyChallegeRequest::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsReplyChallegeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsReplyChallegeRequest_descriptor_;
}

const CMessageCorpsReplyChallegeRequest& CMessageCorpsReplyChallegeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsReplyChallegeRequest* CMessageCorpsReplyChallegeRequest::default_instance_ = NULL;

CMessageCorpsReplyChallegeRequest* CMessageCorpsReplyChallegeRequest::New() const {
  return new CMessageCorpsReplyChallegeRequest;
}

void CMessageCorpsReplyChallegeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    descorpsid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsReplyChallegeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_DesCorpsID;
        break;
      }
      
      // optional uint32 DesCorpsID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DesCorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &descorpsid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsReplyChallegeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsReplyChallegeRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 DesCorpsID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->descorpsid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsReplyChallegeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 DesCorpsID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->descorpsid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsReplyChallegeRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 DesCorpsID = 2;
    if (has_descorpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->descorpsid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsReplyChallegeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsReplyChallegeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsReplyChallegeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsReplyChallegeRequest::MergeFrom(const CMessageCorpsReplyChallegeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_descorpsid(from.descorpsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsReplyChallegeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsReplyChallegeRequest::CopyFrom(const CMessageCorpsReplyChallegeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsReplyChallegeRequest::Swap(CMessageCorpsReplyChallegeRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(descorpsid_, other->descorpsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsReplyChallegeRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsReplyChallegeRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsReplyChallegeRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsReplyChallegeRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageCorpsReplyChallegeResponse::_default_descorpsname_;
#ifndef _MSC_VER
const int CMessageCorpsReplyChallegeResponse::kCorpHeadFieldNumber;
const int CMessageCorpsReplyChallegeResponse::kDesCorpsNameFieldNumber;
const int CMessageCorpsReplyChallegeResponse::kRtnCodeFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsReplyChallegeResponse::CMessageCorpsReplyChallegeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsReplyChallegeResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsReplyChallegeResponse::CMessageCorpsReplyChallegeResponse(const CMessageCorpsReplyChallegeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsReplyChallegeResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  descorpsname_ = const_cast< ::std::string*>(&_default_descorpsname_);
  rtncode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsReplyChallegeResponse::~CMessageCorpsReplyChallegeResponse() {
  SharedDtor();
}

void CMessageCorpsReplyChallegeResponse::SharedDtor() {
  if (descorpsname_ != &_default_descorpsname_) {
    delete descorpsname_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsReplyChallegeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsReplyChallegeResponse_descriptor_;
}

const CMessageCorpsReplyChallegeResponse& CMessageCorpsReplyChallegeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsReplyChallegeResponse* CMessageCorpsReplyChallegeResponse::default_instance_ = NULL;

CMessageCorpsReplyChallegeResponse* CMessageCorpsReplyChallegeResponse::New() const {
  return new CMessageCorpsReplyChallegeResponse;
}

void CMessageCorpsReplyChallegeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    if (_has_bit(1)) {
      if (descorpsname_ != &_default_descorpsname_) {
        descorpsname_->clear();
      }
    }
    rtncode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsReplyChallegeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(18)) goto parse_DesCorpsName;
        break;
      }
      
      // optional string DesCorpsName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_DesCorpsName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_descorpsname()));
        if (input->ExpectTag(24)) goto parse_RtnCode;
        break;
      }
      
      // optional uint32 RtnCode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RtnCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rtncode_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsReplyChallegeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsReplyChallegeResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional string DesCorpsName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->descorpsname(), output);
  }
  
  // optional uint32 RtnCode = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->rtncode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsReplyChallegeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional string DesCorpsName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->descorpsname(), target);
  }
  
  // optional uint32 RtnCode = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->rtncode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsReplyChallegeResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional string DesCorpsName = 2;
    if (has_descorpsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->descorpsname());
    }
    
    // optional uint32 RtnCode = 3;
    if (has_rtncode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rtncode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsReplyChallegeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsReplyChallegeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsReplyChallegeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsReplyChallegeResponse::MergeFrom(const CMessageCorpsReplyChallegeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_descorpsname(from.descorpsname());
    }
    if (from._has_bit(2)) {
      set_rtncode(from.rtncode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsReplyChallegeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsReplyChallegeResponse::CopyFrom(const CMessageCorpsReplyChallegeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsReplyChallegeResponse::Swap(CMessageCorpsReplyChallegeResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(descorpsname_, other->descorpsname_);
    std::swap(rtncode_, other->rtncode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsReplyChallegeResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsReplyChallegeResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsReplyChallegeResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsReplyChallegeResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCorpsQueryChallegeListRequest::kCorpHeadFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsQueryChallegeListRequest::CMessageCorpsQueryChallegeListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsQueryChallegeListRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsQueryChallegeListRequest::CMessageCorpsQueryChallegeListRequest(const CMessageCorpsQueryChallegeListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsQueryChallegeListRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsQueryChallegeListRequest::~CMessageCorpsQueryChallegeListRequest() {
  SharedDtor();
}

void CMessageCorpsQueryChallegeListRequest::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsQueryChallegeListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsQueryChallegeListRequest_descriptor_;
}

const CMessageCorpsQueryChallegeListRequest& CMessageCorpsQueryChallegeListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsQueryChallegeListRequest* CMessageCorpsQueryChallegeListRequest::default_instance_ = NULL;

CMessageCorpsQueryChallegeListRequest* CMessageCorpsQueryChallegeListRequest::New() const {
  return new CMessageCorpsQueryChallegeListRequest;
}

void CMessageCorpsQueryChallegeListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsQueryChallegeListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsQueryChallegeListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsQueryChallegeListRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsQueryChallegeListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsQueryChallegeListRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsQueryChallegeListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsQueryChallegeListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsQueryChallegeListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsQueryChallegeListRequest::MergeFrom(const CMessageCorpsQueryChallegeListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsQueryChallegeListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsQueryChallegeListRequest::CopyFrom(const CMessageCorpsQueryChallegeListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsQueryChallegeListRequest::Swap(CMessageCorpsQueryChallegeListRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsQueryChallegeListRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsQueryChallegeListRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsQueryChallegeListRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsQueryChallegeListRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCorpsQueryChallegeListResponse::kCorpHeadFieldNumber;
const int CMessageCorpsQueryChallegeListResponse::kCorpsIDListFieldNumber;
const int CMessageCorpsQueryChallegeListResponse::kRtnCodeFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsQueryChallegeListResponse::CMessageCorpsQueryChallegeListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsQueryChallegeListResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsQueryChallegeListResponse::CMessageCorpsQueryChallegeListResponse(const CMessageCorpsQueryChallegeListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsQueryChallegeListResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  rtncode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsQueryChallegeListResponse::~CMessageCorpsQueryChallegeListResponse() {
  SharedDtor();
}

void CMessageCorpsQueryChallegeListResponse::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsQueryChallegeListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsQueryChallegeListResponse_descriptor_;
}

const CMessageCorpsQueryChallegeListResponse& CMessageCorpsQueryChallegeListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsQueryChallegeListResponse* CMessageCorpsQueryChallegeListResponse::default_instance_ = NULL;

CMessageCorpsQueryChallegeListResponse* CMessageCorpsQueryChallegeListResponse::New() const {
  return new CMessageCorpsQueryChallegeListResponse;
}

void CMessageCorpsQueryChallegeListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    rtncode_ = 0u;
  }
  corpsidlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsQueryChallegeListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_CorpsIDList;
        break;
      }
      
      // repeated uint32 CorpsIDList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsIDList:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_corpsidlist(value);
        if (input->ExpectTag(16)) goto parse_CorpsIDList;
        if (input->ExpectTag(24)) goto parse_RtnCode;
        break;
      }
      
      // optional uint32 RtnCode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RtnCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rtncode_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsQueryChallegeListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsQueryChallegeListResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // repeated uint32 CorpsIDList = 2;
  for (int i = 0; i < this->corpsidlist_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->corpsidlist(i), output);
  }
  
  // optional uint32 RtnCode = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->rtncode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsQueryChallegeListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // repeated uint32 CorpsIDList = 2;
  for (int i = 0; i < this->corpsidlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->corpsidlist(i), target);
  }
  
  // optional uint32 RtnCode = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->rtncode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsQueryChallegeListResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 RtnCode = 3;
    if (has_rtncode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rtncode());
    }
    
  }
  // repeated uint32 CorpsIDList = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->corpsidlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->corpsidlist(i));
    }
    total_size += 1 * this->corpsidlist_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsQueryChallegeListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsQueryChallegeListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsQueryChallegeListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsQueryChallegeListResponse::MergeFrom(const CMessageCorpsQueryChallegeListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  corpsidlist_.MergeFrom(from.corpsidlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(2)) {
      set_rtncode(from.rtncode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsQueryChallegeListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsQueryChallegeListResponse::CopyFrom(const CMessageCorpsQueryChallegeListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsQueryChallegeListResponse::Swap(CMessageCorpsQueryChallegeListResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    corpsidlist_.Swap(&other->corpsidlist_);
    std::swap(rtncode_, other->rtncode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsQueryChallegeListResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsQueryChallegeListResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsQueryChallegeListResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsQueryChallegeListResponse_reflection_;
}

// ===================================================================

const ::std::string PBChallege::_default_corpsname_;
#ifndef _MSC_VER
const int PBChallege::kCorpsIDFieldNumber;
const int PBChallege::kCorpsNameFieldNumber;
const int PBChallege::kWinTimesFieldNumber;
const int PBChallege::kLostTimesFieldNumber;
#endif  // !_MSC_VER

PBChallege::PBChallege()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBChallege::InitAsDefaultInstance() {}

PBChallege::PBChallege(const PBChallege& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBChallege::SharedCtor() {
  _cached_size_ = 0;
  corpsid_ = 0u;
  corpsname_ = const_cast< ::std::string*>(&_default_corpsname_);
  wintimes_ = 0u;
  losttimes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBChallege::~PBChallege() {
  SharedDtor();
}

void PBChallege::SharedDtor() {
  if (corpsname_ != &_default_corpsname_) {
    delete corpsname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBChallege::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBChallege_descriptor_;
}

const PBChallege& PBChallege::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

PBChallege* PBChallege::default_instance_ = NULL;

PBChallege* PBChallege::New() const {
  return new PBChallege;
}

void PBChallege::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    corpsid_ = 0u;
    if (_has_bit(1)) {
      if (corpsname_ != &_default_corpsname_) {
        corpsname_->clear();
      }
    }
    wintimes_ = 0u;
    losttimes_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBChallege::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CorpsID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_CorpsName;
        break;
      }
      
      // optional string CorpsName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_corpsname()));
        if (input->ExpectTag(24)) goto parse_WinTimes;
        break;
      }
      
      // optional uint32 WinTimes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WinTimes:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &wintimes_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_LostTimes;
        break;
      }
      
      // optional uint32 LostTimes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LostTimes:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &losttimes_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBChallege::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBChallege::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CorpsID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->corpsid(), output);
  }
  
  // optional string CorpsName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->corpsname(), output);
  }
  
  // optional uint32 WinTimes = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->wintimes(), output);
  }
  
  // optional uint32 LostTimes = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->losttimes(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBChallege::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CorpsID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->corpsid(), target);
  }
  
  // optional string CorpsName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->corpsname(), target);
  }
  
  // optional uint32 WinTimes = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->wintimes(), target);
  }
  
  // optional uint32 LostTimes = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->losttimes(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBChallege::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CorpsID = 1;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
    // optional string CorpsName = 2;
    if (has_corpsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->corpsname());
    }
    
    // optional uint32 WinTimes = 3;
    if (has_wintimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->wintimes());
    }
    
    // optional uint32 LostTimes = 4;
    if (has_losttimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->losttimes());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBChallege::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBChallege* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBChallege*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBChallege::MergeFrom(const PBChallege& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_corpsid(from.corpsid());
    }
    if (from._has_bit(1)) {
      set_corpsname(from.corpsname());
    }
    if (from._has_bit(2)) {
      set_wintimes(from.wintimes());
    }
    if (from._has_bit(3)) {
      set_losttimes(from.losttimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBChallege::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBChallege::CopyFrom(const PBChallege& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBChallege::Swap(PBChallege* other) {
  if (other != this) {
    std::swap(corpsid_, other->corpsid_);
    std::swap(corpsname_, other->corpsname_);
    std::swap(wintimes_, other->wintimes_);
    std::swap(losttimes_, other->losttimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBChallege::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBChallege::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBChallege::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBChallege_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCorpsQueryRecChallegeListRequest::kCorpHeadFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsQueryRecChallegeListRequest::CMessageCorpsQueryRecChallegeListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsQueryRecChallegeListRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsQueryRecChallegeListRequest::CMessageCorpsQueryRecChallegeListRequest(const CMessageCorpsQueryRecChallegeListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsQueryRecChallegeListRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsQueryRecChallegeListRequest::~CMessageCorpsQueryRecChallegeListRequest() {
  SharedDtor();
}

void CMessageCorpsQueryRecChallegeListRequest::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsQueryRecChallegeListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsQueryRecChallegeListRequest_descriptor_;
}

const CMessageCorpsQueryRecChallegeListRequest& CMessageCorpsQueryRecChallegeListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsQueryRecChallegeListRequest* CMessageCorpsQueryRecChallegeListRequest::default_instance_ = NULL;

CMessageCorpsQueryRecChallegeListRequest* CMessageCorpsQueryRecChallegeListRequest::New() const {
  return new CMessageCorpsQueryRecChallegeListRequest;
}

void CMessageCorpsQueryRecChallegeListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsQueryRecChallegeListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsQueryRecChallegeListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsQueryRecChallegeListRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsQueryRecChallegeListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsQueryRecChallegeListRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsQueryRecChallegeListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsQueryRecChallegeListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsQueryRecChallegeListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsQueryRecChallegeListRequest::MergeFrom(const CMessageCorpsQueryRecChallegeListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsQueryRecChallegeListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsQueryRecChallegeListRequest::CopyFrom(const CMessageCorpsQueryRecChallegeListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsQueryRecChallegeListRequest::Swap(CMessageCorpsQueryRecChallegeListRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsQueryRecChallegeListRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsQueryRecChallegeListRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsQueryRecChallegeListRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsQueryRecChallegeListRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageCorpsQueryRecChallegeListResponse::_default_roomname_;
#ifndef _MSC_VER
const int CMessageCorpsQueryRecChallegeListResponse::kCorpHeadFieldNumber;
const int CMessageCorpsQueryRecChallegeListResponse::kRoomNameFieldNumber;
const int CMessageCorpsQueryRecChallegeListResponse::kMoneyFieldNumber;
const int CMessageCorpsQueryRecChallegeListResponse::kWinTimesFieldNumber;
const int CMessageCorpsQueryRecChallegeListResponse::kLostTimesFieldNumber;
const int CMessageCorpsQueryRecChallegeListResponse::kChallegeListFieldNumber;
const int CMessageCorpsQueryRecChallegeListResponse::kRtnCodeFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsQueryRecChallegeListResponse::CMessageCorpsQueryRecChallegeListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsQueryRecChallegeListResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsQueryRecChallegeListResponse::CMessageCorpsQueryRecChallegeListResponse(const CMessageCorpsQueryRecChallegeListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsQueryRecChallegeListResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  roomname_ = const_cast< ::std::string*>(&_default_roomname_);
  money_ = 0u;
  wintimes_ = 0u;
  losttimes_ = 0u;
  rtncode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsQueryRecChallegeListResponse::~CMessageCorpsQueryRecChallegeListResponse() {
  SharedDtor();
}

void CMessageCorpsQueryRecChallegeListResponse::SharedDtor() {
  if (roomname_ != &_default_roomname_) {
    delete roomname_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsQueryRecChallegeListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsQueryRecChallegeListResponse_descriptor_;
}

const CMessageCorpsQueryRecChallegeListResponse& CMessageCorpsQueryRecChallegeListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsQueryRecChallegeListResponse* CMessageCorpsQueryRecChallegeListResponse::default_instance_ = NULL;

CMessageCorpsQueryRecChallegeListResponse* CMessageCorpsQueryRecChallegeListResponse::New() const {
  return new CMessageCorpsQueryRecChallegeListResponse;
}

void CMessageCorpsQueryRecChallegeListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    if (_has_bit(1)) {
      if (roomname_ != &_default_roomname_) {
        roomname_->clear();
      }
    }
    money_ = 0u;
    wintimes_ = 0u;
    losttimes_ = 0u;
    rtncode_ = 0u;
  }
  challegelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsQueryRecChallegeListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(18)) goto parse_RoomName;
        break;
      }
      
      // optional string RoomName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RoomName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_roomname()));
        if (input->ExpectTag(24)) goto parse_Money;
        break;
      }
      
      // optional uint32 Money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_WinTimes;
        break;
      }
      
      // optional uint32 WinTimes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WinTimes:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &wintimes_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_LostTimes;
        break;
      }
      
      // optional uint32 LostTimes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LostTimes:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &losttimes_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_ChallegeList;
        break;
      }
      
      // repeated .PBChallege ChallegeList = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ChallegeList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_challegelist()));
        if (input->ExpectTag(50)) goto parse_ChallegeList;
        if (input->ExpectTag(56)) goto parse_RtnCode;
        break;
      }
      
      // optional uint32 RtnCode = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RtnCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rtncode_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsQueryRecChallegeListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsQueryRecChallegeListResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional string RoomName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->roomname(), output);
  }
  
  // optional uint32 Money = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->money(), output);
  }
  
  // optional uint32 WinTimes = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->wintimes(), output);
  }
  
  // optional uint32 LostTimes = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->losttimes(), output);
  }
  
  // repeated .PBChallege ChallegeList = 6;
  for (int i = 0; i < this->challegelist_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(6, this->challegelist(i), output);
  }
  
  // optional uint32 RtnCode = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->rtncode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsQueryRecChallegeListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional string RoomName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->roomname(), target);
  }
  
  // optional uint32 Money = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->money(), target);
  }
  
  // optional uint32 WinTimes = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->wintimes(), target);
  }
  
  // optional uint32 LostTimes = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->losttimes(), target);
  }
  
  // repeated .PBChallege ChallegeList = 6;
  for (int i = 0; i < this->challegelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(6, this->challegelist(i), target);
  }
  
  // optional uint32 RtnCode = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->rtncode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsQueryRecChallegeListResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional string RoomName = 2;
    if (has_roomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->roomname());
    }
    
    // optional uint32 Money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
    // optional uint32 WinTimes = 4;
    if (has_wintimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->wintimes());
    }
    
    // optional uint32 LostTimes = 5;
    if (has_losttimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->losttimes());
    }
    
    // optional uint32 RtnCode = 7;
    if (has_rtncode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rtncode());
    }
    
  }
  // repeated .PBChallege ChallegeList = 6;
  total_size += 1 * this->challegelist_size();
  for (int i = 0; i < this->challegelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->challegelist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsQueryRecChallegeListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsQueryRecChallegeListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsQueryRecChallegeListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsQueryRecChallegeListResponse::MergeFrom(const CMessageCorpsQueryRecChallegeListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  challegelist_.MergeFrom(from.challegelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_roomname(from.roomname());
    }
    if (from._has_bit(2)) {
      set_money(from.money());
    }
    if (from._has_bit(3)) {
      set_wintimes(from.wintimes());
    }
    if (from._has_bit(4)) {
      set_losttimes(from.losttimes());
    }
    if (from._has_bit(6)) {
      set_rtncode(from.rtncode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsQueryRecChallegeListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsQueryRecChallegeListResponse::CopyFrom(const CMessageCorpsQueryRecChallegeListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsQueryRecChallegeListResponse::Swap(CMessageCorpsQueryRecChallegeListResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(roomname_, other->roomname_);
    std::swap(money_, other->money_);
    std::swap(wintimes_, other->wintimes_);
    std::swap(losttimes_, other->losttimes_);
    challegelist_.Swap(&other->challegelist_);
    std::swap(rtncode_, other->rtncode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsQueryRecChallegeListResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsQueryRecChallegeListResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsQueryRecChallegeListResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsQueryRecChallegeListResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCorpsQueryRoomListRequest::kCorpHeadFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsQueryRoomListRequest::CMessageCorpsQueryRoomListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsQueryRoomListRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsQueryRoomListRequest::CMessageCorpsQueryRoomListRequest(const CMessageCorpsQueryRoomListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsQueryRoomListRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsQueryRoomListRequest::~CMessageCorpsQueryRoomListRequest() {
  SharedDtor();
}

void CMessageCorpsQueryRoomListRequest::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsQueryRoomListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsQueryRoomListRequest_descriptor_;
}

const CMessageCorpsQueryRoomListRequest& CMessageCorpsQueryRoomListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsQueryRoomListRequest* CMessageCorpsQueryRoomListRequest::default_instance_ = NULL;

CMessageCorpsQueryRoomListRequest* CMessageCorpsQueryRoomListRequest::New() const {
  return new CMessageCorpsQueryRoomListRequest;
}

void CMessageCorpsQueryRoomListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsQueryRoomListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsQueryRoomListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsQueryRoomListRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsQueryRoomListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsQueryRoomListRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsQueryRoomListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsQueryRoomListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsQueryRoomListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsQueryRoomListRequest::MergeFrom(const CMessageCorpsQueryRoomListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsQueryRoomListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsQueryRoomListRequest::CopyFrom(const CMessageCorpsQueryRoomListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsQueryRoomListRequest::Swap(CMessageCorpsQueryRoomListRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsQueryRoomListRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsQueryRoomListRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsQueryRoomListRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsQueryRoomListRequest_reflection_;
}

// ===================================================================

const ::std::string PBCorpsRoom::_default_corpsname_;
const ::std::string PBCorpsRoom::_default_roomname_;
const ::std::string PBCorpsRoom::_default_descorpsname_;
#ifndef _MSC_VER
const int PBCorpsRoom::kCorpsIDFieldNumber;
const int PBCorpsRoom::kCorpsNameFieldNumber;
const int PBCorpsRoom::kRoomNameFieldNumber;
const int PBCorpsRoom::kRoomStateFieldNumber;
const int PBCorpsRoom::kDesCorpsNameFieldNumber;
const int PBCorpsRoom::kWinTimesFieldNumber;
const int PBCorpsRoom::kLostTimesFieldNumber;
const int PBCorpsRoom::kMoneyFieldNumber;
#endif  // !_MSC_VER

PBCorpsRoom::PBCorpsRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCorpsRoom::InitAsDefaultInstance() {}

PBCorpsRoom::PBCorpsRoom(const PBCorpsRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCorpsRoom::SharedCtor() {
  _cached_size_ = 0;
  corpsid_ = 0u;
  corpsname_ = const_cast< ::std::string*>(&_default_corpsname_);
  roomname_ = const_cast< ::std::string*>(&_default_roomname_);
  roomstate_ = 0u;
  descorpsname_ = const_cast< ::std::string*>(&_default_descorpsname_);
  wintimes_ = 0u;
  losttimes_ = 0u;
  money_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCorpsRoom::~PBCorpsRoom() {
  SharedDtor();
}

void PBCorpsRoom::SharedDtor() {
  if (corpsname_ != &_default_corpsname_) {
    delete corpsname_;
  }
  if (roomname_ != &_default_roomname_) {
    delete roomname_;
  }
  if (descorpsname_ != &_default_descorpsname_) {
    delete descorpsname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBCorpsRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCorpsRoom_descriptor_;
}

const PBCorpsRoom& PBCorpsRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

PBCorpsRoom* PBCorpsRoom::default_instance_ = NULL;

PBCorpsRoom* PBCorpsRoom::New() const {
  return new PBCorpsRoom;
}

void PBCorpsRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    corpsid_ = 0u;
    if (_has_bit(1)) {
      if (corpsname_ != &_default_corpsname_) {
        corpsname_->clear();
      }
    }
    if (_has_bit(2)) {
      if (roomname_ != &_default_roomname_) {
        roomname_->clear();
      }
    }
    roomstate_ = 0u;
    if (_has_bit(4)) {
      if (descorpsname_ != &_default_descorpsname_) {
        descorpsname_->clear();
      }
    }
    wintimes_ = 0u;
    losttimes_ = 0u;
    money_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCorpsRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CorpsID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_CorpsName;
        break;
      }
      
      // optional string CorpsName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_corpsname()));
        if (input->ExpectTag(26)) goto parse_RoomName;
        break;
      }
      
      // optional string RoomName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RoomName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_roomname()));
        if (input->ExpectTag(32)) goto parse_RoomState;
        break;
      }
      
      // optional uint32 RoomState = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoomState:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roomstate_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_DesCorpsName;
        break;
      }
      
      // optional string DesCorpsName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_DesCorpsName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_descorpsname()));
        if (input->ExpectTag(48)) goto parse_WinTimes;
        break;
      }
      
      // optional uint32 WinTimes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WinTimes:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &wintimes_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_LostTimes;
        break;
      }
      
      // optional uint32 LostTimes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LostTimes:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &losttimes_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_Money;
        break;
      }
      
      // optional uint32 Money = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCorpsRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBCorpsRoom::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CorpsID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->corpsid(), output);
  }
  
  // optional string CorpsName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->corpsname(), output);
  }
  
  // optional string RoomName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->roomname(), output);
  }
  
  // optional uint32 RoomState = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->roomstate(), output);
  }
  
  // optional string DesCorpsName = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->descorpsname(), output);
  }
  
  // optional uint32 WinTimes = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->wintimes(), output);
  }
  
  // optional uint32 LostTimes = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->losttimes(), output);
  }
  
  // optional uint32 Money = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->money(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCorpsRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CorpsID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->corpsid(), target);
  }
  
  // optional string CorpsName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->corpsname(), target);
  }
  
  // optional string RoomName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->roomname(), target);
  }
  
  // optional uint32 RoomState = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->roomstate(), target);
  }
  
  // optional string DesCorpsName = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->descorpsname(), target);
  }
  
  // optional uint32 WinTimes = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->wintimes(), target);
  }
  
  // optional uint32 LostTimes = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->losttimes(), target);
  }
  
  // optional uint32 Money = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->money(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCorpsRoom::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CorpsID = 1;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
    // optional string CorpsName = 2;
    if (has_corpsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->corpsname());
    }
    
    // optional string RoomName = 3;
    if (has_roomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->roomname());
    }
    
    // optional uint32 RoomState = 4;
    if (has_roomstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roomstate());
    }
    
    // optional string DesCorpsName = 5;
    if (has_descorpsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->descorpsname());
    }
    
    // optional uint32 WinTimes = 6;
    if (has_wintimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->wintimes());
    }
    
    // optional uint32 LostTimes = 7;
    if (has_losttimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->losttimes());
    }
    
    // optional uint32 Money = 8;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBCorpsRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCorpsRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCorpsRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCorpsRoom::MergeFrom(const PBCorpsRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_corpsid(from.corpsid());
    }
    if (from._has_bit(1)) {
      set_corpsname(from.corpsname());
    }
    if (from._has_bit(2)) {
      set_roomname(from.roomname());
    }
    if (from._has_bit(3)) {
      set_roomstate(from.roomstate());
    }
    if (from._has_bit(4)) {
      set_descorpsname(from.descorpsname());
    }
    if (from._has_bit(5)) {
      set_wintimes(from.wintimes());
    }
    if (from._has_bit(6)) {
      set_losttimes(from.losttimes());
    }
    if (from._has_bit(7)) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCorpsRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCorpsRoom::CopyFrom(const PBCorpsRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCorpsRoom::Swap(PBCorpsRoom* other) {
  if (other != this) {
    std::swap(corpsid_, other->corpsid_);
    std::swap(corpsname_, other->corpsname_);
    std::swap(roomname_, other->roomname_);
    std::swap(roomstate_, other->roomstate_);
    std::swap(descorpsname_, other->descorpsname_);
    std::swap(wintimes_, other->wintimes_);
    std::swap(losttimes_, other->losttimes_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBCorpsRoom::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBCorpsRoom::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBCorpsRoom::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBCorpsRoom_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCorpsQueryRoomListResponse::kCorpHeadFieldNumber;
const int CMessageCorpsQueryRoomListResponse::kRoomListFieldNumber;
const int CMessageCorpsQueryRoomListResponse::kRtnCodeFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsQueryRoomListResponse::CMessageCorpsQueryRoomListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsQueryRoomListResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsQueryRoomListResponse::CMessageCorpsQueryRoomListResponse(const CMessageCorpsQueryRoomListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsQueryRoomListResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  rtncode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsQueryRoomListResponse::~CMessageCorpsQueryRoomListResponse() {
  SharedDtor();
}

void CMessageCorpsQueryRoomListResponse::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsQueryRoomListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsQueryRoomListResponse_descriptor_;
}

const CMessageCorpsQueryRoomListResponse& CMessageCorpsQueryRoomListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsQueryRoomListResponse* CMessageCorpsQueryRoomListResponse::default_instance_ = NULL;

CMessageCorpsQueryRoomListResponse* CMessageCorpsQueryRoomListResponse::New() const {
  return new CMessageCorpsQueryRoomListResponse;
}

void CMessageCorpsQueryRoomListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    rtncode_ = 0u;
  }
  roomlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsQueryRoomListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(18)) goto parse_RoomList;
        break;
      }
      
      // repeated .PBCorpsRoom RoomList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RoomList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_roomlist()));
        if (input->ExpectTag(18)) goto parse_RoomList;
        if (input->ExpectTag(24)) goto parse_RtnCode;
        break;
      }
      
      // optional uint32 RtnCode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RtnCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rtncode_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsQueryRoomListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsQueryRoomListResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // repeated .PBCorpsRoom RoomList = 2;
  for (int i = 0; i < this->roomlist_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->roomlist(i), output);
  }
  
  // optional uint32 RtnCode = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->rtncode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsQueryRoomListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // repeated .PBCorpsRoom RoomList = 2;
  for (int i = 0; i < this->roomlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->roomlist(i), target);
  }
  
  // optional uint32 RtnCode = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->rtncode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsQueryRoomListResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 RtnCode = 3;
    if (has_rtncode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rtncode());
    }
    
  }
  // repeated .PBCorpsRoom RoomList = 2;
  total_size += 1 * this->roomlist_size();
  for (int i = 0; i < this->roomlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->roomlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsQueryRoomListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsQueryRoomListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsQueryRoomListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsQueryRoomListResponse::MergeFrom(const CMessageCorpsQueryRoomListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  roomlist_.MergeFrom(from.roomlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(2)) {
      set_rtncode(from.rtncode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsQueryRoomListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsQueryRoomListResponse::CopyFrom(const CMessageCorpsQueryRoomListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsQueryRoomListResponse::Swap(CMessageCorpsQueryRoomListResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    roomlist_.Swap(&other->roomlist_);
    std::swap(rtncode_, other->rtncode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsQueryRoomListResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsQueryRoomListResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsQueryRoomListResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsQueryRoomListResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageQueryCorpsWelfareRequest::kCorpHeadFieldNumber;
const int CMessageQueryCorpsWelfareRequest::kEntityIDFieldNumber;
const int CMessageQueryCorpsWelfareRequest::kNpcIDFieldNumber;
#endif  // !_MSC_VER

CMessageQueryCorpsWelfareRequest::CMessageQueryCorpsWelfareRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageQueryCorpsWelfareRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageQueryCorpsWelfareRequest::CMessageQueryCorpsWelfareRequest(const CMessageQueryCorpsWelfareRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageQueryCorpsWelfareRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  entityid_ = 0u;
  npcid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageQueryCorpsWelfareRequest::~CMessageQueryCorpsWelfareRequest() {
  SharedDtor();
}

void CMessageQueryCorpsWelfareRequest::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageQueryCorpsWelfareRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryCorpsWelfareRequest_descriptor_;
}

const CMessageQueryCorpsWelfareRequest& CMessageQueryCorpsWelfareRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageQueryCorpsWelfareRequest* CMessageQueryCorpsWelfareRequest::default_instance_ = NULL;

CMessageQueryCorpsWelfareRequest* CMessageQueryCorpsWelfareRequest::New() const {
  return new CMessageQueryCorpsWelfareRequest;
}

void CMessageQueryCorpsWelfareRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    entityid_ = 0u;
    npcid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageQueryCorpsWelfareRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_EntityID;
        break;
      }
      
      // optional uint32 EntityID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_NpcID;
        break;
      }
      
      // optional uint32 NpcID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageQueryCorpsWelfareRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageQueryCorpsWelfareRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 EntityID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->entityid(), output);
  }
  
  // optional uint32 NpcID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->npcid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageQueryCorpsWelfareRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 EntityID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->entityid(), target);
  }
  
  // optional uint32 NpcID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->npcid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageQueryCorpsWelfareRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 EntityID = 2;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
    // optional uint32 NpcID = 3;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageQueryCorpsWelfareRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageQueryCorpsWelfareRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageQueryCorpsWelfareRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageQueryCorpsWelfareRequest::MergeFrom(const CMessageQueryCorpsWelfareRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_entityid(from.entityid());
    }
    if (from._has_bit(2)) {
      set_npcid(from.npcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageQueryCorpsWelfareRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryCorpsWelfareRequest::CopyFrom(const CMessageQueryCorpsWelfareRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryCorpsWelfareRequest::Swap(CMessageQueryCorpsWelfareRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(entityid_, other->entityid_);
    std::swap(npcid_, other->npcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageQueryCorpsWelfareRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageQueryCorpsWelfareRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageQueryCorpsWelfareRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryCorpsWelfareRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageQueryCorpsWelfareResponse::kCorpHeadFieldNumber;
const int CMessageQueryCorpsWelfareResponse::kErrcodeFieldNumber;
const int CMessageQueryCorpsWelfareResponse::kNpcGloryFieldNumber;
const int CMessageQueryCorpsWelfareResponse::kNpcMoneyFieldNumber;
#endif  // !_MSC_VER

CMessageQueryCorpsWelfareResponse::CMessageQueryCorpsWelfareResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageQueryCorpsWelfareResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageQueryCorpsWelfareResponse::CMessageQueryCorpsWelfareResponse(const CMessageQueryCorpsWelfareResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageQueryCorpsWelfareResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  errcode_ = 0u;
  npcglory_ = 0u;
  npcmoney_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageQueryCorpsWelfareResponse::~CMessageQueryCorpsWelfareResponse() {
  SharedDtor();
}

void CMessageQueryCorpsWelfareResponse::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageQueryCorpsWelfareResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryCorpsWelfareResponse_descriptor_;
}

const CMessageQueryCorpsWelfareResponse& CMessageQueryCorpsWelfareResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageQueryCorpsWelfareResponse* CMessageQueryCorpsWelfareResponse::default_instance_ = NULL;

CMessageQueryCorpsWelfareResponse* CMessageQueryCorpsWelfareResponse::New() const {
  return new CMessageQueryCorpsWelfareResponse;
}

void CMessageQueryCorpsWelfareResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    errcode_ = 0u;
    npcglory_ = 0u;
    npcmoney_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageQueryCorpsWelfareResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_NpcGlory;
        break;
      }
      
      // optional uint32 NpcGlory = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcGlory:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcglory_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_NpcMoney;
        break;
      }
      
      // optional uint32 NpcMoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcmoney_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageQueryCorpsWelfareResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageQueryCorpsWelfareResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  // optional uint32 NpcGlory = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->npcglory(), output);
  }
  
  // optional uint32 NpcMoney = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->npcmoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageQueryCorpsWelfareResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  // optional uint32 NpcGlory = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->npcglory(), target);
  }
  
  // optional uint32 NpcMoney = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->npcmoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageQueryCorpsWelfareResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional uint32 NpcGlory = 3;
    if (has_npcglory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcglory());
    }
    
    // optional uint32 NpcMoney = 4;
    if (has_npcmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcmoney());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageQueryCorpsWelfareResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageQueryCorpsWelfareResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageQueryCorpsWelfareResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageQueryCorpsWelfareResponse::MergeFrom(const CMessageQueryCorpsWelfareResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(2)) {
      set_npcglory(from.npcglory());
    }
    if (from._has_bit(3)) {
      set_npcmoney(from.npcmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageQueryCorpsWelfareResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryCorpsWelfareResponse::CopyFrom(const CMessageQueryCorpsWelfareResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryCorpsWelfareResponse::Swap(CMessageQueryCorpsWelfareResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(errcode_, other->errcode_);
    std::swap(npcglory_, other->npcglory_);
    std::swap(npcmoney_, other->npcmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageQueryCorpsWelfareResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageQueryCorpsWelfareResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageQueryCorpsWelfareResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryCorpsWelfareResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageObtainCorpsWelfareRequest::kCorpHeadFieldNumber;
const int CMessageObtainCorpsWelfareRequest::kEntityIDFieldNumber;
const int CMessageObtainCorpsWelfareRequest::kNpcIDFieldNumber;
#endif  // !_MSC_VER

CMessageObtainCorpsWelfareRequest::CMessageObtainCorpsWelfareRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageObtainCorpsWelfareRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageObtainCorpsWelfareRequest::CMessageObtainCorpsWelfareRequest(const CMessageObtainCorpsWelfareRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageObtainCorpsWelfareRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  entityid_ = 0u;
  npcid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageObtainCorpsWelfareRequest::~CMessageObtainCorpsWelfareRequest() {
  SharedDtor();
}

void CMessageObtainCorpsWelfareRequest::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageObtainCorpsWelfareRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageObtainCorpsWelfareRequest_descriptor_;
}

const CMessageObtainCorpsWelfareRequest& CMessageObtainCorpsWelfareRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageObtainCorpsWelfareRequest* CMessageObtainCorpsWelfareRequest::default_instance_ = NULL;

CMessageObtainCorpsWelfareRequest* CMessageObtainCorpsWelfareRequest::New() const {
  return new CMessageObtainCorpsWelfareRequest;
}

void CMessageObtainCorpsWelfareRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    entityid_ = 0u;
    npcid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageObtainCorpsWelfareRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_EntityID;
        break;
      }
      
      // optional uint32 EntityID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_NpcID;
        break;
      }
      
      // optional uint32 NpcID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageObtainCorpsWelfareRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageObtainCorpsWelfareRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 EntityID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->entityid(), output);
  }
  
  // optional uint32 NpcID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->npcid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageObtainCorpsWelfareRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 EntityID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->entityid(), target);
  }
  
  // optional uint32 NpcID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->npcid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageObtainCorpsWelfareRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 EntityID = 2;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
    // optional uint32 NpcID = 3;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageObtainCorpsWelfareRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageObtainCorpsWelfareRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageObtainCorpsWelfareRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageObtainCorpsWelfareRequest::MergeFrom(const CMessageObtainCorpsWelfareRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_entityid(from.entityid());
    }
    if (from._has_bit(2)) {
      set_npcid(from.npcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageObtainCorpsWelfareRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageObtainCorpsWelfareRequest::CopyFrom(const CMessageObtainCorpsWelfareRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageObtainCorpsWelfareRequest::Swap(CMessageObtainCorpsWelfareRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(entityid_, other->entityid_);
    std::swap(npcid_, other->npcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageObtainCorpsWelfareRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageObtainCorpsWelfareRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageObtainCorpsWelfareRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageObtainCorpsWelfareRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageObtainCorpsWelfareResponse::kCorpHeadFieldNumber;
const int CMessageObtainCorpsWelfareResponse::kErrcodeFieldNumber;
const int CMessageObtainCorpsWelfareResponse::kNpcGloryFieldNumber;
const int CMessageObtainCorpsWelfareResponse::kNpcMoneyFieldNumber;
#endif  // !_MSC_VER

CMessageObtainCorpsWelfareResponse::CMessageObtainCorpsWelfareResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageObtainCorpsWelfareResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageObtainCorpsWelfareResponse::CMessageObtainCorpsWelfareResponse(const CMessageObtainCorpsWelfareResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageObtainCorpsWelfareResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  errcode_ = 0u;
  npcglory_ = 0u;
  npcmoney_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageObtainCorpsWelfareResponse::~CMessageObtainCorpsWelfareResponse() {
  SharedDtor();
}

void CMessageObtainCorpsWelfareResponse::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageObtainCorpsWelfareResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageObtainCorpsWelfareResponse_descriptor_;
}

const CMessageObtainCorpsWelfareResponse& CMessageObtainCorpsWelfareResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageObtainCorpsWelfareResponse* CMessageObtainCorpsWelfareResponse::default_instance_ = NULL;

CMessageObtainCorpsWelfareResponse* CMessageObtainCorpsWelfareResponse::New() const {
  return new CMessageObtainCorpsWelfareResponse;
}

void CMessageObtainCorpsWelfareResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    errcode_ = 0u;
    npcglory_ = 0u;
    npcmoney_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageObtainCorpsWelfareResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_NpcGlory;
        break;
      }
      
      // optional uint32 NpcGlory = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcGlory:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcglory_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_NpcMoney;
        break;
      }
      
      // optional uint32 NpcMoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcmoney_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageObtainCorpsWelfareResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageObtainCorpsWelfareResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  // optional uint32 NpcGlory = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->npcglory(), output);
  }
  
  // optional uint32 NpcMoney = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->npcmoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageObtainCorpsWelfareResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  // optional uint32 NpcGlory = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->npcglory(), target);
  }
  
  // optional uint32 NpcMoney = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->npcmoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageObtainCorpsWelfareResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional uint32 NpcGlory = 3;
    if (has_npcglory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcglory());
    }
    
    // optional uint32 NpcMoney = 4;
    if (has_npcmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcmoney());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageObtainCorpsWelfareResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageObtainCorpsWelfareResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageObtainCorpsWelfareResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageObtainCorpsWelfareResponse::MergeFrom(const CMessageObtainCorpsWelfareResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(2)) {
      set_npcglory(from.npcglory());
    }
    if (from._has_bit(3)) {
      set_npcmoney(from.npcmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageObtainCorpsWelfareResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageObtainCorpsWelfareResponse::CopyFrom(const CMessageObtainCorpsWelfareResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageObtainCorpsWelfareResponse::Swap(CMessageObtainCorpsWelfareResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(errcode_, other->errcode_);
    std::swap(npcglory_, other->npcglory_);
    std::swap(npcmoney_, other->npcmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageObtainCorpsWelfareResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageObtainCorpsWelfareResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageObtainCorpsWelfareResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageObtainCorpsWelfareResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetCorpsMoneyRequest::kCorpHeadFieldNumber;
const int CMessageGetCorpsMoneyRequest::kCorpsMoneyFieldNumber;
#endif  // !_MSC_VER

CMessageGetCorpsMoneyRequest::CMessageGetCorpsMoneyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetCorpsMoneyRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageGetCorpsMoneyRequest::CMessageGetCorpsMoneyRequest(const CMessageGetCorpsMoneyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetCorpsMoneyRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  corpsmoney_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetCorpsMoneyRequest::~CMessageGetCorpsMoneyRequest() {
  SharedDtor();
}

void CMessageGetCorpsMoneyRequest::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageGetCorpsMoneyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCorpsMoneyRequest_descriptor_;
}

const CMessageGetCorpsMoneyRequest& CMessageGetCorpsMoneyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetCorpsMoneyRequest* CMessageGetCorpsMoneyRequest::default_instance_ = NULL;

CMessageGetCorpsMoneyRequest* CMessageGetCorpsMoneyRequest::New() const {
  return new CMessageGetCorpsMoneyRequest;
}

void CMessageGetCorpsMoneyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    corpsmoney_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetCorpsMoneyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_CorpsMoney;
        break;
      }
      
      // optional uint32 CorpsMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsmoney_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetCorpsMoneyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetCorpsMoneyRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 CorpsMoney = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->corpsmoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetCorpsMoneyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 CorpsMoney = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->corpsmoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetCorpsMoneyRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 CorpsMoney = 2;
    if (has_corpsmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsmoney());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetCorpsMoneyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetCorpsMoneyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetCorpsMoneyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetCorpsMoneyRequest::MergeFrom(const CMessageGetCorpsMoneyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_corpsmoney(from.corpsmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetCorpsMoneyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCorpsMoneyRequest::CopyFrom(const CMessageGetCorpsMoneyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCorpsMoneyRequest::Swap(CMessageGetCorpsMoneyRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(corpsmoney_, other->corpsmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetCorpsMoneyRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetCorpsMoneyRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetCorpsMoneyRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCorpsMoneyRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetCorpsMoneyResponse::kCorpHeadFieldNumber;
const int CMessageGetCorpsMoneyResponse::kErrcodeFieldNumber;
const int CMessageGetCorpsMoneyResponse::kCorpsMoneyFieldNumber;
#endif  // !_MSC_VER

CMessageGetCorpsMoneyResponse::CMessageGetCorpsMoneyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetCorpsMoneyResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageGetCorpsMoneyResponse::CMessageGetCorpsMoneyResponse(const CMessageGetCorpsMoneyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetCorpsMoneyResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  errcode_ = 0u;
  corpsmoney_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetCorpsMoneyResponse::~CMessageGetCorpsMoneyResponse() {
  SharedDtor();
}

void CMessageGetCorpsMoneyResponse::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageGetCorpsMoneyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCorpsMoneyResponse_descriptor_;
}

const CMessageGetCorpsMoneyResponse& CMessageGetCorpsMoneyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetCorpsMoneyResponse* CMessageGetCorpsMoneyResponse::default_instance_ = NULL;

CMessageGetCorpsMoneyResponse* CMessageGetCorpsMoneyResponse::New() const {
  return new CMessageGetCorpsMoneyResponse;
}

void CMessageGetCorpsMoneyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    errcode_ = 0u;
    corpsmoney_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetCorpsMoneyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_CorpsMoney;
        break;
      }
      
      // optional uint32 CorpsMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsmoney_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetCorpsMoneyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetCorpsMoneyResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  // optional uint32 CorpsMoney = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->corpsmoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetCorpsMoneyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  // optional uint32 CorpsMoney = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->corpsmoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetCorpsMoneyResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional uint32 CorpsMoney = 3;
    if (has_corpsmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsmoney());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetCorpsMoneyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetCorpsMoneyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetCorpsMoneyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetCorpsMoneyResponse::MergeFrom(const CMessageGetCorpsMoneyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(2)) {
      set_corpsmoney(from.corpsmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetCorpsMoneyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCorpsMoneyResponse::CopyFrom(const CMessageGetCorpsMoneyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCorpsMoneyResponse::Swap(CMessageGetCorpsMoneyResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(errcode_, other->errcode_);
    std::swap(corpsmoney_, other->corpsmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetCorpsMoneyResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetCorpsMoneyResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetCorpsMoneyResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCorpsMoneyResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCorpsAbortBattleCityRequest::kCorpHeadFieldNumber;
const int CMessageCorpsAbortBattleCityRequest::kNpcEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsAbortBattleCityRequest::CMessageCorpsAbortBattleCityRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsAbortBattleCityRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsAbortBattleCityRequest::CMessageCorpsAbortBattleCityRequest(const CMessageCorpsAbortBattleCityRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsAbortBattleCityRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  npcentityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsAbortBattleCityRequest::~CMessageCorpsAbortBattleCityRequest() {
  SharedDtor();
}

void CMessageCorpsAbortBattleCityRequest::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsAbortBattleCityRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsAbortBattleCityRequest_descriptor_;
}

const CMessageCorpsAbortBattleCityRequest& CMessageCorpsAbortBattleCityRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsAbortBattleCityRequest* CMessageCorpsAbortBattleCityRequest::default_instance_ = NULL;

CMessageCorpsAbortBattleCityRequest* CMessageCorpsAbortBattleCityRequest::New() const {
  return new CMessageCorpsAbortBattleCityRequest;
}

void CMessageCorpsAbortBattleCityRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    npcentityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsAbortBattleCityRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_NpcEntityID;
        break;
      }
      
      // optional uint32 NpcEntityID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcEntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcentityid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsAbortBattleCityRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsAbortBattleCityRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 NpcEntityID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->npcentityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsAbortBattleCityRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 NpcEntityID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->npcentityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsAbortBattleCityRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 NpcEntityID = 2;
    if (has_npcentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcentityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsAbortBattleCityRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsAbortBattleCityRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsAbortBattleCityRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsAbortBattleCityRequest::MergeFrom(const CMessageCorpsAbortBattleCityRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_npcentityid(from.npcentityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsAbortBattleCityRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsAbortBattleCityRequest::CopyFrom(const CMessageCorpsAbortBattleCityRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsAbortBattleCityRequest::Swap(CMessageCorpsAbortBattleCityRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(npcentityid_, other->npcentityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsAbortBattleCityRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsAbortBattleCityRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsAbortBattleCityRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsAbortBattleCityRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageCorpsAbortBattleCityResponse::_default_rootername_;
#ifndef _MSC_VER
const int CMessageCorpsAbortBattleCityResponse::kCorpHeadFieldNumber;
const int CMessageCorpsAbortBattleCityResponse::kRtnCodeFieldNumber;
const int CMessageCorpsAbortBattleCityResponse::kNpcIDFieldNumber;
const int CMessageCorpsAbortBattleCityResponse::kRooterNameFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsAbortBattleCityResponse::CMessageCorpsAbortBattleCityResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsAbortBattleCityResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsAbortBattleCityResponse::CMessageCorpsAbortBattleCityResponse(const CMessageCorpsAbortBattleCityResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsAbortBattleCityResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  rtncode_ = 0u;
  npcid_ = 0u;
  rootername_ = const_cast< ::std::string*>(&_default_rootername_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsAbortBattleCityResponse::~CMessageCorpsAbortBattleCityResponse() {
  SharedDtor();
}

void CMessageCorpsAbortBattleCityResponse::SharedDtor() {
  if (rootername_ != &_default_rootername_) {
    delete rootername_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsAbortBattleCityResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsAbortBattleCityResponse_descriptor_;
}

const CMessageCorpsAbortBattleCityResponse& CMessageCorpsAbortBattleCityResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsAbortBattleCityResponse* CMessageCorpsAbortBattleCityResponse::default_instance_ = NULL;

CMessageCorpsAbortBattleCityResponse* CMessageCorpsAbortBattleCityResponse::New() const {
  return new CMessageCorpsAbortBattleCityResponse;
}

void CMessageCorpsAbortBattleCityResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    rtncode_ = 0u;
    npcid_ = 0u;
    if (_has_bit(3)) {
      if (rootername_ != &_default_rootername_) {
        rootername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsAbortBattleCityResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_RtnCode;
        break;
      }
      
      // optional uint32 RtnCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RtnCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rtncode_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_NpcID;
        break;
      }
      
      // optional uint32 NpcID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_RooterName;
        break;
      }
      
      // optional string RooterName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RooterName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_rootername()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsAbortBattleCityResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsAbortBattleCityResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 RtnCode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->rtncode(), output);
  }
  
  // optional uint32 NpcID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->npcid(), output);
  }
  
  // optional string RooterName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->rootername(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsAbortBattleCityResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 RtnCode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->rtncode(), target);
  }
  
  // optional uint32 NpcID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->npcid(), target);
  }
  
  // optional string RooterName = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->rootername(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsAbortBattleCityResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 RtnCode = 2;
    if (has_rtncode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rtncode());
    }
    
    // optional uint32 NpcID = 3;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
    // optional string RooterName = 4;
    if (has_rootername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->rootername());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsAbortBattleCityResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsAbortBattleCityResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsAbortBattleCityResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsAbortBattleCityResponse::MergeFrom(const CMessageCorpsAbortBattleCityResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_rtncode(from.rtncode());
    }
    if (from._has_bit(2)) {
      set_npcid(from.npcid());
    }
    if (from._has_bit(3)) {
      set_rootername(from.rootername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsAbortBattleCityResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsAbortBattleCityResponse::CopyFrom(const CMessageCorpsAbortBattleCityResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsAbortBattleCityResponse::Swap(CMessageCorpsAbortBattleCityResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(rtncode_, other->rtncode_);
    std::swap(npcid_, other->npcid_);
    std::swap(rootername_, other->rootername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsAbortBattleCityResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsAbortBattleCityResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsAbortBattleCityResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsAbortBattleCityResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageCorpsAbortBattleCityNotice::_default_rootername_;
#ifndef _MSC_VER
const int CMessageCorpsAbortBattleCityNotice::kCorpHeadFieldNumber;
const int CMessageCorpsAbortBattleCityNotice::kNpcIDFieldNumber;
const int CMessageCorpsAbortBattleCityNotice::kRooterNameFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsAbortBattleCityNotice::CMessageCorpsAbortBattleCityNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsAbortBattleCityNotice::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsAbortBattleCityNotice::CMessageCorpsAbortBattleCityNotice(const CMessageCorpsAbortBattleCityNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsAbortBattleCityNotice::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  npcid_ = 0u;
  rootername_ = const_cast< ::std::string*>(&_default_rootername_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsAbortBattleCityNotice::~CMessageCorpsAbortBattleCityNotice() {
  SharedDtor();
}

void CMessageCorpsAbortBattleCityNotice::SharedDtor() {
  if (rootername_ != &_default_rootername_) {
    delete rootername_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsAbortBattleCityNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsAbortBattleCityNotice_descriptor_;
}

const CMessageCorpsAbortBattleCityNotice& CMessageCorpsAbortBattleCityNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsAbortBattleCityNotice* CMessageCorpsAbortBattleCityNotice::default_instance_ = NULL;

CMessageCorpsAbortBattleCityNotice* CMessageCorpsAbortBattleCityNotice::New() const {
  return new CMessageCorpsAbortBattleCityNotice;
}

void CMessageCorpsAbortBattleCityNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    npcid_ = 0u;
    if (_has_bit(2)) {
      if (rootername_ != &_default_rootername_) {
        rootername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsAbortBattleCityNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_NpcID;
        break;
      }
      
      // optional uint32 NpcID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_RooterName;
        break;
      }
      
      // optional string RooterName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RooterName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_rootername()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsAbortBattleCityNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsAbortBattleCityNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 NpcID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->npcid(), output);
  }
  
  // optional string RooterName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->rootername(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsAbortBattleCityNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 NpcID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->npcid(), target);
  }
  
  // optional string RooterName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->rootername(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsAbortBattleCityNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 NpcID = 2;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
    // optional string RooterName = 3;
    if (has_rootername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->rootername());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsAbortBattleCityNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsAbortBattleCityNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsAbortBattleCityNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsAbortBattleCityNotice::MergeFrom(const CMessageCorpsAbortBattleCityNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_npcid(from.npcid());
    }
    if (from._has_bit(2)) {
      set_rootername(from.rootername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsAbortBattleCityNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsAbortBattleCityNotice::CopyFrom(const CMessageCorpsAbortBattleCityNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsAbortBattleCityNotice::Swap(CMessageCorpsAbortBattleCityNotice* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(npcid_, other->npcid_);
    std::swap(rootername_, other->rootername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsAbortBattleCityNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsAbortBattleCityNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsAbortBattleCityNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsAbortBattleCityNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCorpsCanLevelUPNotify::kCorpHeadFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsCanLevelUPNotify::CMessageCorpsCanLevelUPNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsCanLevelUPNotify::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsCanLevelUPNotify::CMessageCorpsCanLevelUPNotify(const CMessageCorpsCanLevelUPNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsCanLevelUPNotify::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsCanLevelUPNotify::~CMessageCorpsCanLevelUPNotify() {
  SharedDtor();
}

void CMessageCorpsCanLevelUPNotify::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsCanLevelUPNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsCanLevelUPNotify_descriptor_;
}

const CMessageCorpsCanLevelUPNotify& CMessageCorpsCanLevelUPNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsCanLevelUPNotify* CMessageCorpsCanLevelUPNotify::default_instance_ = NULL;

CMessageCorpsCanLevelUPNotify* CMessageCorpsCanLevelUPNotify::New() const {
  return new CMessageCorpsCanLevelUPNotify;
}

void CMessageCorpsCanLevelUPNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsCanLevelUPNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsCanLevelUPNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsCanLevelUPNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsCanLevelUPNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsCanLevelUPNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsCanLevelUPNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsCanLevelUPNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsCanLevelUPNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsCanLevelUPNotify::MergeFrom(const CMessageCorpsCanLevelUPNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsCanLevelUPNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsCanLevelUPNotify::CopyFrom(const CMessageCorpsCanLevelUPNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsCanLevelUPNotify::Swap(CMessageCorpsCanLevelUPNotify* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsCanLevelUPNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsCanLevelUPNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsCanLevelUPNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsCanLevelUPNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCorpsPublishTaskNotify::kNotifyHeadFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsPublishTaskNotify::CMessageCorpsPublishTaskNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsPublishTaskNotify::InitAsDefaultInstance() {  notifyhead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsPublishTaskNotify::CMessageCorpsPublishTaskNotify(const CMessageCorpsPublishTaskNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsPublishTaskNotify::SharedCtor() {
  _cached_size_ = 0;
  notifyhead_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsPublishTaskNotify::~CMessageCorpsPublishTaskNotify() {
  SharedDtor();
}

void CMessageCorpsPublishTaskNotify::SharedDtor() {
  if (this != default_instance_) {
    delete notifyhead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsPublishTaskNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsPublishTaskNotify_descriptor_;
}

const CMessageCorpsPublishTaskNotify& CMessageCorpsPublishTaskNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsPublishTaskNotify* CMessageCorpsPublishTaskNotify::default_instance_ = NULL;

CMessageCorpsPublishTaskNotify* CMessageCorpsPublishTaskNotify::New() const {
  return new CMessageCorpsPublishTaskNotify;
}

void CMessageCorpsPublishTaskNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (notifyhead_ != NULL) notifyhead_->::CorpsHead::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsPublishTaskNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead NotifyHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_notifyhead()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsPublishTaskNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsPublishTaskNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead NotifyHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->notifyhead(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsPublishTaskNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead NotifyHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->notifyhead(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsPublishTaskNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead NotifyHead = 1;
    if (has_notifyhead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->notifyhead());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsPublishTaskNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsPublishTaskNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsPublishTaskNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsPublishTaskNotify::MergeFrom(const CMessageCorpsPublishTaskNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_notifyhead()->::CorpsHead::MergeFrom(from.notifyhead());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsPublishTaskNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsPublishTaskNotify::CopyFrom(const CMessageCorpsPublishTaskNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsPublishTaskNotify::Swap(CMessageCorpsPublishTaskNotify* other) {
  if (other != this) {
    std::swap(notifyhead_, other->notifyhead_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsPublishTaskNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsPublishTaskNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsPublishTaskNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsPublishTaskNotify_reflection_;
}

// ===================================================================

const ::std::string CMessageCorpsBattleResultNotice::_default_wincorpsname_;
const ::std::string CMessageCorpsBattleResultNotice::_default_lostcorpsname_;
#ifndef _MSC_VER
const int CMessageCorpsBattleResultNotice::kCorpHeadFieldNumber;
const int CMessageCorpsBattleResultNotice::kWinCorpsNameFieldNumber;
const int CMessageCorpsBattleResultNotice::kLostCorpsNameFieldNumber;
const int CMessageCorpsBattleResultNotice::kWinCampIDFieldNumber;
const int CMessageCorpsBattleResultNotice::kNpcIDFieldNumber;
const int CMessageCorpsBattleResultNotice::kBattleTypeFieldNumber;
const int CMessageCorpsBattleResultNotice::kWinCorpsIDFieldNumber;
const int CMessageCorpsBattleResultNotice::kLostCorpsIDFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsBattleResultNotice::CMessageCorpsBattleResultNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsBattleResultNotice::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsBattleResultNotice::CMessageCorpsBattleResultNotice(const CMessageCorpsBattleResultNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsBattleResultNotice::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  wincorpsname_ = const_cast< ::std::string*>(&_default_wincorpsname_);
  lostcorpsname_ = const_cast< ::std::string*>(&_default_lostcorpsname_);
  wincampid_ = 0u;
  npcid_ = 0u;
  battletype_ = 0u;
  wincorpsid_ = 0u;
  lostcorpsid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsBattleResultNotice::~CMessageCorpsBattleResultNotice() {
  SharedDtor();
}

void CMessageCorpsBattleResultNotice::SharedDtor() {
  if (wincorpsname_ != &_default_wincorpsname_) {
    delete wincorpsname_;
  }
  if (lostcorpsname_ != &_default_lostcorpsname_) {
    delete lostcorpsname_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsBattleResultNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsBattleResultNotice_descriptor_;
}

const CMessageCorpsBattleResultNotice& CMessageCorpsBattleResultNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsBattleResultNotice* CMessageCorpsBattleResultNotice::default_instance_ = NULL;

CMessageCorpsBattleResultNotice* CMessageCorpsBattleResultNotice::New() const {
  return new CMessageCorpsBattleResultNotice;
}

void CMessageCorpsBattleResultNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    if (_has_bit(1)) {
      if (wincorpsname_ != &_default_wincorpsname_) {
        wincorpsname_->clear();
      }
    }
    if (_has_bit(2)) {
      if (lostcorpsname_ != &_default_lostcorpsname_) {
        lostcorpsname_->clear();
      }
    }
    wincampid_ = 0u;
    npcid_ = 0u;
    battletype_ = 0u;
    wincorpsid_ = 0u;
    lostcorpsid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsBattleResultNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(18)) goto parse_WinCorpsName;
        break;
      }
      
      // optional string WinCorpsName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_WinCorpsName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_wincorpsname()));
        if (input->ExpectTag(26)) goto parse_LostCorpsName;
        break;
      }
      
      // optional string LostCorpsName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_LostCorpsName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_lostcorpsname()));
        if (input->ExpectTag(32)) goto parse_WinCampID;
        break;
      }
      
      // optional uint32 WinCampID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WinCampID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &wincampid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_NpcID;
        break;
      }
      
      // optional uint32 NpcID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_BattleType;
        break;
      }
      
      // optional uint32 BattleType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BattleType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &battletype_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_WinCorpsID;
        break;
      }
      
      // optional uint32 WinCorpsID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WinCorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &wincorpsid_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_LostCorpsID;
        break;
      }
      
      // optional uint32 LostCorpsID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LostCorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lostcorpsid_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsBattleResultNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsBattleResultNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional string WinCorpsName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->wincorpsname(), output);
  }
  
  // optional string LostCorpsName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->lostcorpsname(), output);
  }
  
  // optional uint32 WinCampID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->wincampid(), output);
  }
  
  // optional uint32 NpcID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->npcid(), output);
  }
  
  // optional uint32 BattleType = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->battletype(), output);
  }
  
  // optional uint32 WinCorpsID = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->wincorpsid(), output);
  }
  
  // optional uint32 LostCorpsID = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->lostcorpsid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsBattleResultNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional string WinCorpsName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->wincorpsname(), target);
  }
  
  // optional string LostCorpsName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->lostcorpsname(), target);
  }
  
  // optional uint32 WinCampID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->wincampid(), target);
  }
  
  // optional uint32 NpcID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->npcid(), target);
  }
  
  // optional uint32 BattleType = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->battletype(), target);
  }
  
  // optional uint32 WinCorpsID = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->wincorpsid(), target);
  }
  
  // optional uint32 LostCorpsID = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->lostcorpsid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsBattleResultNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional string WinCorpsName = 2;
    if (has_wincorpsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->wincorpsname());
    }
    
    // optional string LostCorpsName = 3;
    if (has_lostcorpsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->lostcorpsname());
    }
    
    // optional uint32 WinCampID = 4;
    if (has_wincampid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->wincampid());
    }
    
    // optional uint32 NpcID = 5;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
    // optional uint32 BattleType = 6;
    if (has_battletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->battletype());
    }
    
    // optional uint32 WinCorpsID = 7;
    if (has_wincorpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->wincorpsid());
    }
    
    // optional uint32 LostCorpsID = 8;
    if (has_lostcorpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lostcorpsid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsBattleResultNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsBattleResultNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsBattleResultNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsBattleResultNotice::MergeFrom(const CMessageCorpsBattleResultNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_wincorpsname(from.wincorpsname());
    }
    if (from._has_bit(2)) {
      set_lostcorpsname(from.lostcorpsname());
    }
    if (from._has_bit(3)) {
      set_wincampid(from.wincampid());
    }
    if (from._has_bit(4)) {
      set_npcid(from.npcid());
    }
    if (from._has_bit(5)) {
      set_battletype(from.battletype());
    }
    if (from._has_bit(6)) {
      set_wincorpsid(from.wincorpsid());
    }
    if (from._has_bit(7)) {
      set_lostcorpsid(from.lostcorpsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsBattleResultNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsBattleResultNotice::CopyFrom(const CMessageCorpsBattleResultNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsBattleResultNotice::Swap(CMessageCorpsBattleResultNotice* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(wincorpsname_, other->wincorpsname_);
    std::swap(lostcorpsname_, other->lostcorpsname_);
    std::swap(wincampid_, other->wincampid_);
    std::swap(npcid_, other->npcid_);
    std::swap(battletype_, other->battletype_);
    std::swap(wincorpsid_, other->wincorpsid_);
    std::swap(lostcorpsid_, other->lostcorpsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsBattleResultNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsBattleResultNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsBattleResultNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsBattleResultNotice_reflection_;
}

// ===================================================================

const ::std::string CMessageCorpsNpcOwnerNotice::_default_corpsname_;
const ::std::string CMessageCorpsNpcOwnerNotice::_default_familyname_;
#ifndef _MSC_VER
const int CMessageCorpsNpcOwnerNotice::kTypeFieldNumber;
const int CMessageCorpsNpcOwnerNotice::kNpcIDFieldNumber;
const int CMessageCorpsNpcOwnerNotice::kCorpsNameFieldNumber;
const int CMessageCorpsNpcOwnerNotice::kCorpsIDFieldNumber;
const int CMessageCorpsNpcOwnerNotice::kFamilyNameFieldNumber;
const int CMessageCorpsNpcOwnerNotice::kFamilyIDFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsNpcOwnerNotice::CMessageCorpsNpcOwnerNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsNpcOwnerNotice::InitAsDefaultInstance() {}

CMessageCorpsNpcOwnerNotice::CMessageCorpsNpcOwnerNotice(const CMessageCorpsNpcOwnerNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsNpcOwnerNotice::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  npcid_ = 0u;
  corpsname_ = const_cast< ::std::string*>(&_default_corpsname_);
  corpsid_ = 0u;
  familyname_ = const_cast< ::std::string*>(&_default_familyname_);
  familyid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsNpcOwnerNotice::~CMessageCorpsNpcOwnerNotice() {
  SharedDtor();
}

void CMessageCorpsNpcOwnerNotice::SharedDtor() {
  if (corpsname_ != &_default_corpsname_) {
    delete corpsname_;
  }
  if (familyname_ != &_default_familyname_) {
    delete familyname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsNpcOwnerNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsNpcOwnerNotice_descriptor_;
}

const CMessageCorpsNpcOwnerNotice& CMessageCorpsNpcOwnerNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsNpcOwnerNotice* CMessageCorpsNpcOwnerNotice::default_instance_ = NULL;

CMessageCorpsNpcOwnerNotice* CMessageCorpsNpcOwnerNotice::New() const {
  return new CMessageCorpsNpcOwnerNotice;
}

void CMessageCorpsNpcOwnerNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    npcid_ = 0u;
    if (_has_bit(2)) {
      if (corpsname_ != &_default_corpsname_) {
        corpsname_->clear();
      }
    }
    corpsid_ = 0u;
    if (_has_bit(4)) {
      if (familyname_ != &_default_familyname_) {
        familyname_->clear();
      }
    }
    familyid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsNpcOwnerNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_NpcID;
        break;
      }
      
      // optional uint32 NpcID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_CorpsName;
        break;
      }
      
      // optional string CorpsName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_corpsname()));
        if (input->ExpectTag(32)) goto parse_CorpsID;
        break;
      }
      
      // optional uint32 CorpsID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_FamilyName;
        break;
      }
      
      // optional string FamilyName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FamilyName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_familyname()));
        if (input->ExpectTag(48)) goto parse_FamilyID;
        break;
      }
      
      // optional uint32 FamilyID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsNpcOwnerNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsNpcOwnerNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->type(), output);
  }
  
  // optional uint32 NpcID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->npcid(), output);
  }
  
  // optional string CorpsName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->corpsname(), output);
  }
  
  // optional uint32 CorpsID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->corpsid(), output);
  }
  
  // optional string FamilyName = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->familyname(), output);
  }
  
  // optional uint32 FamilyID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->familyid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsNpcOwnerNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Type = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional uint32 NpcID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->npcid(), target);
  }
  
  // optional string CorpsName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->corpsname(), target);
  }
  
  // optional uint32 CorpsID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->corpsid(), target);
  }
  
  // optional string FamilyName = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->familyname(), target);
  }
  
  // optional uint32 FamilyID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->familyid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsNpcOwnerNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
    // optional uint32 NpcID = 2;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
    // optional string CorpsName = 3;
    if (has_corpsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->corpsname());
    }
    
    // optional uint32 CorpsID = 4;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
    // optional string FamilyName = 5;
    if (has_familyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->familyname());
    }
    
    // optional uint32 FamilyID = 6;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsNpcOwnerNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsNpcOwnerNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsNpcOwnerNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsNpcOwnerNotice::MergeFrom(const CMessageCorpsNpcOwnerNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type(from.type());
    }
    if (from._has_bit(1)) {
      set_npcid(from.npcid());
    }
    if (from._has_bit(2)) {
      set_corpsname(from.corpsname());
    }
    if (from._has_bit(3)) {
      set_corpsid(from.corpsid());
    }
    if (from._has_bit(4)) {
      set_familyname(from.familyname());
    }
    if (from._has_bit(5)) {
      set_familyid(from.familyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsNpcOwnerNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsNpcOwnerNotice::CopyFrom(const CMessageCorpsNpcOwnerNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsNpcOwnerNotice::Swap(CMessageCorpsNpcOwnerNotice* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(npcid_, other->npcid_);
    std::swap(corpsname_, other->corpsname_);
    std::swap(corpsid_, other->corpsid_);
    std::swap(familyname_, other->familyname_);
    std::swap(familyid_, other->familyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsNpcOwnerNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsNpcOwnerNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsNpcOwnerNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsNpcOwnerNotice_reflection_;
}

// ===================================================================

const ::std::string CMessageCorpsNameChangedNotify::_default_managername_;
const ::std::string CMessageCorpsNameChangedNotify::_default_corpsname_;
#ifndef _MSC_VER
const int CMessageCorpsNameChangedNotify::kCorpHeadFieldNumber;
const int CMessageCorpsNameChangedNotify::kManagerIDFieldNumber;
const int CMessageCorpsNameChangedNotify::kManagerNameFieldNumber;
const int CMessageCorpsNameChangedNotify::kMemberIDFieldNumber;
const int CMessageCorpsNameChangedNotify::kCorpsNameFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsNameChangedNotify::CMessageCorpsNameChangedNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsNameChangedNotify::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsNameChangedNotify::CMessageCorpsNameChangedNotify(const CMessageCorpsNameChangedNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsNameChangedNotify::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  managerid_ = 0u;
  managername_ = const_cast< ::std::string*>(&_default_managername_);
  memberid_ = 0u;
  corpsname_ = const_cast< ::std::string*>(&_default_corpsname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsNameChangedNotify::~CMessageCorpsNameChangedNotify() {
  SharedDtor();
}

void CMessageCorpsNameChangedNotify::SharedDtor() {
  if (managername_ != &_default_managername_) {
    delete managername_;
  }
  if (corpsname_ != &_default_corpsname_) {
    delete corpsname_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsNameChangedNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsNameChangedNotify_descriptor_;
}

const CMessageCorpsNameChangedNotify& CMessageCorpsNameChangedNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsNameChangedNotify* CMessageCorpsNameChangedNotify::default_instance_ = NULL;

CMessageCorpsNameChangedNotify* CMessageCorpsNameChangedNotify::New() const {
  return new CMessageCorpsNameChangedNotify;
}

void CMessageCorpsNameChangedNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    managerid_ = 0u;
    if (_has_bit(2)) {
      if (managername_ != &_default_managername_) {
        managername_->clear();
      }
    }
    memberid_ = 0u;
    if (_has_bit(4)) {
      if (corpsname_ != &_default_corpsname_) {
        corpsname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsNameChangedNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_ManagerID;
        break;
      }
      
      // optional uint32 ManagerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ManagerID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &managerid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_ManagerName;
        break;
      }
      
      // optional string ManagerName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ManagerName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_managername()));
        if (input->ExpectTag(32)) goto parse_MemberID;
        break;
      }
      
      // optional uint32 MemberID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MemberID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &memberid_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_CorpsName;
        break;
      }
      
      // optional string CorpsName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_corpsname()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsNameChangedNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsNameChangedNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 ManagerID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->managerid(), output);
  }
  
  // optional string ManagerName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->managername(), output);
  }
  
  // optional uint32 MemberID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->memberid(), output);
  }
  
  // optional string CorpsName = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->corpsname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsNameChangedNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 ManagerID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->managerid(), target);
  }
  
  // optional string ManagerName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->managername(), target);
  }
  
  // optional uint32 MemberID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->memberid(), target);
  }
  
  // optional string CorpsName = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->corpsname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsNameChangedNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 ManagerID = 2;
    if (has_managerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->managerid());
    }
    
    // optional string ManagerName = 3;
    if (has_managername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->managername());
    }
    
    // optional uint32 MemberID = 4;
    if (has_memberid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->memberid());
    }
    
    // optional string CorpsName = 5;
    if (has_corpsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->corpsname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsNameChangedNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsNameChangedNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsNameChangedNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsNameChangedNotify::MergeFrom(const CMessageCorpsNameChangedNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_managerid(from.managerid());
    }
    if (from._has_bit(2)) {
      set_managername(from.managername());
    }
    if (from._has_bit(3)) {
      set_memberid(from.memberid());
    }
    if (from._has_bit(4)) {
      set_corpsname(from.corpsname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsNameChangedNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsNameChangedNotify::CopyFrom(const CMessageCorpsNameChangedNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsNameChangedNotify::Swap(CMessageCorpsNameChangedNotify* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(managerid_, other->managerid_);
    std::swap(managername_, other->managername_);
    std::swap(memberid_, other->memberid_);
    std::swap(corpsname_, other->corpsname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsNameChangedNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsNameChangedNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsNameChangedNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsNameChangedNotify_reflection_;
}

// ===================================================================

const ::std::string CMessageCreateUnionRequest::_default_unionname_;
const ::std::string CMessageCreateUnionRequest::_default_unionnotice_;
#ifndef _MSC_VER
const int CMessageCreateUnionRequest::kCorpHeadFieldNumber;
const int CMessageCreateUnionRequest::kOtherIDFieldNumber;
const int CMessageCreateUnionRequest::kUnionNameFieldNumber;
const int CMessageCreateUnionRequest::kUnionNoticeFieldNumber;
const int CMessageCreateUnionRequest::kNPCEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageCreateUnionRequest::CMessageCreateUnionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCreateUnionRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCreateUnionRequest::CMessageCreateUnionRequest(const CMessageCreateUnionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCreateUnionRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  unionname_ = const_cast< ::std::string*>(&_default_unionname_);
  unionnotice_ = const_cast< ::std::string*>(&_default_unionnotice_);
  npcentityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCreateUnionRequest::~CMessageCreateUnionRequest() {
  SharedDtor();
}

void CMessageCreateUnionRequest::SharedDtor() {
  if (unionname_ != &_default_unionname_) {
    delete unionname_;
  }
  if (unionnotice_ != &_default_unionnotice_) {
    delete unionnotice_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCreateUnionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCreateUnionRequest_descriptor_;
}

const CMessageCreateUnionRequest& CMessageCreateUnionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCreateUnionRequest* CMessageCreateUnionRequest::default_instance_ = NULL;

CMessageCreateUnionRequest* CMessageCreateUnionRequest::New() const {
  return new CMessageCreateUnionRequest;
}

void CMessageCreateUnionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    if (_has_bit(2)) {
      if (unionname_ != &_default_unionname_) {
        unionname_->clear();
      }
    }
    if (_has_bit(3)) {
      if (unionnotice_ != &_default_unionnotice_) {
        unionnotice_->clear();
      }
    }
    npcentityid_ = 0u;
  }
  otherid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCreateUnionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_OtherID;
        break;
      }
      
      // repeated uint32 OtherID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OtherID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_otherid(value);
        if (input->ExpectTag(16)) goto parse_OtherID;
        if (input->ExpectTag(26)) goto parse_UnionName;
        break;
      }
      
      // optional string UnionName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_UnionName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_unionname()));
        if (input->ExpectTag(34)) goto parse_UnionNotice;
        break;
      }
      
      // optional string UnionNotice = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_UnionNotice:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_unionnotice()));
        if (input->ExpectTag(40)) goto parse_NPCEntityID;
        break;
      }
      
      // optional uint32 NPCEntityID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NPCEntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcentityid_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCreateUnionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCreateUnionRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // repeated uint32 OtherID = 2;
  for (int i = 0; i < this->otherid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->otherid(i), output);
  }
  
  // optional string UnionName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->unionname(), output);
  }
  
  // optional string UnionNotice = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->unionnotice(), output);
  }
  
  // optional uint32 NPCEntityID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->npcentityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCreateUnionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // repeated uint32 OtherID = 2;
  for (int i = 0; i < this->otherid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->otherid(i), target);
  }
  
  // optional string UnionName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->unionname(), target);
  }
  
  // optional string UnionNotice = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->unionnotice(), target);
  }
  
  // optional uint32 NPCEntityID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->npcentityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCreateUnionRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional string UnionName = 3;
    if (has_unionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->unionname());
    }
    
    // optional string UnionNotice = 4;
    if (has_unionnotice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->unionnotice());
    }
    
    // optional uint32 NPCEntityID = 5;
    if (has_npcentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcentityid());
    }
    
  }
  // repeated uint32 OtherID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->otherid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->otherid(i));
    }
    total_size += 1 * this->otherid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCreateUnionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCreateUnionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCreateUnionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCreateUnionRequest::MergeFrom(const CMessageCreateUnionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  otherid_.MergeFrom(from.otherid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(2)) {
      set_unionname(from.unionname());
    }
    if (from._has_bit(3)) {
      set_unionnotice(from.unionnotice());
    }
    if (from._has_bit(4)) {
      set_npcentityid(from.npcentityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCreateUnionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCreateUnionRequest::CopyFrom(const CMessageCreateUnionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCreateUnionRequest::Swap(CMessageCreateUnionRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    otherid_.Swap(&other->otherid_);
    std::swap(unionname_, other->unionname_);
    std::swap(unionnotice_, other->unionnotice_);
    std::swap(npcentityid_, other->npcentityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCreateUnionRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCreateUnionRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCreateUnionRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCreateUnionRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCreateUnionResponse::kCorpHeadFieldNumber;
const int CMessageCreateUnionResponse::kResultFieldNumber;
const int CMessageCreateUnionResponse::kOtherIDFieldNumber;
const int CMessageCreateUnionResponse::kUnionIDFieldNumber;
#endif  // !_MSC_VER

CMessageCreateUnionResponse::CMessageCreateUnionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCreateUnionResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCreateUnionResponse::CMessageCreateUnionResponse(const CMessageCreateUnionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCreateUnionResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  result_ = 0u;
  unionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCreateUnionResponse::~CMessageCreateUnionResponse() {
  SharedDtor();
}

void CMessageCreateUnionResponse::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCreateUnionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCreateUnionResponse_descriptor_;
}

const CMessageCreateUnionResponse& CMessageCreateUnionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCreateUnionResponse* CMessageCreateUnionResponse::default_instance_ = NULL;

CMessageCreateUnionResponse* CMessageCreateUnionResponse::New() const {
  return new CMessageCreateUnionResponse;
}

void CMessageCreateUnionResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    result_ = 0u;
    unionid_ = 0u;
  }
  otherid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCreateUnionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_OtherID;
        break;
      }
      
      // repeated uint32 OtherID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OtherID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_otherid(value);
        if (input->ExpectTag(24)) goto parse_OtherID;
        if (input->ExpectTag(32)) goto parse_UnionID;
        break;
      }
      
      // optional uint32 UnionID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UnionID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &unionid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCreateUnionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCreateUnionResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  // repeated uint32 OtherID = 3;
  for (int i = 0; i < this->otherid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->otherid(i), output);
  }
  
  // optional uint32 UnionID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->unionid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCreateUnionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  // repeated uint32 OtherID = 3;
  for (int i = 0; i < this->otherid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->otherid(i), target);
  }
  
  // optional uint32 UnionID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->unionid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCreateUnionResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 UnionID = 4;
    if (has_unionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->unionid());
    }
    
  }
  // repeated uint32 OtherID = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->otherid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->otherid(i));
    }
    total_size += 1 * this->otherid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCreateUnionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCreateUnionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCreateUnionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCreateUnionResponse::MergeFrom(const CMessageCreateUnionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  otherid_.MergeFrom(from.otherid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(3)) {
      set_unionid(from.unionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCreateUnionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCreateUnionResponse::CopyFrom(const CMessageCreateUnionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCreateUnionResponse::Swap(CMessageCreateUnionResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(result_, other->result_);
    otherid_.Swap(&other->otherid_);
    std::swap(unionid_, other->unionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCreateUnionResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCreateUnionResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCreateUnionResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCreateUnionResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageCreateUnionNotify::_default_headname_;
const ::std::string CMessageCreateUnionNotify::_default_unionname_;
#ifndef _MSC_VER
const int CMessageCreateUnionNotify::kCorpHeadFieldNumber;
const int CMessageCreateUnionNotify::kHeadIDFieldNumber;
const int CMessageCreateUnionNotify::kHeadNameFieldNumber;
const int CMessageCreateUnionNotify::kOtherIDFieldNumber;
const int CMessageCreateUnionNotify::kOtherNameFieldNumber;
const int CMessageCreateUnionNotify::kUnionIDFieldNumber;
const int CMessageCreateUnionNotify::kUnionNameFieldNumber;
#endif  // !_MSC_VER

CMessageCreateUnionNotify::CMessageCreateUnionNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCreateUnionNotify::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCreateUnionNotify::CMessageCreateUnionNotify(const CMessageCreateUnionNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCreateUnionNotify::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  headid_ = 0u;
  headname_ = const_cast< ::std::string*>(&_default_headname_);
  unionid_ = 0u;
  unionname_ = const_cast< ::std::string*>(&_default_unionname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCreateUnionNotify::~CMessageCreateUnionNotify() {
  SharedDtor();
}

void CMessageCreateUnionNotify::SharedDtor() {
  if (headname_ != &_default_headname_) {
    delete headname_;
  }
  if (unionname_ != &_default_unionname_) {
    delete unionname_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCreateUnionNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCreateUnionNotify_descriptor_;
}

const CMessageCreateUnionNotify& CMessageCreateUnionNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCreateUnionNotify* CMessageCreateUnionNotify::default_instance_ = NULL;

CMessageCreateUnionNotify* CMessageCreateUnionNotify::New() const {
  return new CMessageCreateUnionNotify;
}

void CMessageCreateUnionNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    headid_ = 0u;
    if (_has_bit(2)) {
      if (headname_ != &_default_headname_) {
        headname_->clear();
      }
    }
    unionid_ = 0u;
    if (_has_bit(6)) {
      if (unionname_ != &_default_unionname_) {
        unionname_->clear();
      }
    }
  }
  otherid_.Clear();
  othername_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCreateUnionNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_HeadID;
        break;
      }
      
      // optional uint32 HeadID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HeadID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &headid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_HeadName;
        break;
      }
      
      // optional string HeadName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_HeadName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_headname()));
        if (input->ExpectTag(32)) goto parse_OtherID;
        break;
      }
      
      // repeated uint32 OtherID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OtherID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_otherid(value);
        if (input->ExpectTag(32)) goto parse_OtherID;
        if (input->ExpectTag(42)) goto parse_OtherName;
        break;
      }
      
      // repeated string OtherName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_OtherName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(
             input, add_othername()));
        if (input->ExpectTag(42)) goto parse_OtherName;
        if (input->ExpectTag(48)) goto parse_UnionID;
        break;
      }
      
      // optional uint32 UnionID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UnionID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &unionid_));
        _set_bit(5);
        if (input->ExpectTag(58)) goto parse_UnionName;
        break;
      }
      
      // optional string UnionName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_UnionName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_unionname()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCreateUnionNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCreateUnionNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 HeadID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->headid(), output);
  }
  
  // optional string HeadName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->headname(), output);
  }
  
  // repeated uint32 OtherID = 4;
  for (int i = 0; i < this->otherid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->otherid(i), output);
  }
  
  // repeated string OtherName = 5;
  for (int i = 0; i < this->othername_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->othername(i), output);
  }
  
  // optional uint32 UnionID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->unionid(), output);
  }
  
  // optional string UnionName = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteString(7, this->unionname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCreateUnionNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 HeadID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->headid(), target);
  }
  
  // optional string HeadName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->headname(), target);
  }
  
  // repeated uint32 OtherID = 4;
  for (int i = 0; i < this->otherid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->otherid(i), target);
  }
  
  // repeated string OtherName = 5;
  for (int i = 0; i < this->othername_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->othername(i), target);
  }
  
  // optional uint32 UnionID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->unionid(), target);
  }
  
  // optional string UnionName = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(7, this->unionname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCreateUnionNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 HeadID = 2;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->headid());
    }
    
    // optional string HeadName = 3;
    if (has_headname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->headname());
    }
    
    // optional uint32 UnionID = 6;
    if (has_unionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->unionid());
    }
    
    // optional string UnionName = 7;
    if (has_unionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->unionname());
    }
    
  }
  // repeated uint32 OtherID = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->otherid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->otherid(i));
    }
    total_size += 1 * this->otherid_size() + data_size;
  }
  
  // repeated string OtherName = 5;
  total_size += 1 * this->othername_size();
  for (int i = 0; i < this->othername_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormat::StringSize(
      this->othername(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCreateUnionNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCreateUnionNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCreateUnionNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCreateUnionNotify::MergeFrom(const CMessageCreateUnionNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  otherid_.MergeFrom(from.otherid_);
  othername_.MergeFrom(from.othername_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_headid(from.headid());
    }
    if (from._has_bit(2)) {
      set_headname(from.headname());
    }
    if (from._has_bit(5)) {
      set_unionid(from.unionid());
    }
    if (from._has_bit(6)) {
      set_unionname(from.unionname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCreateUnionNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCreateUnionNotify::CopyFrom(const CMessageCreateUnionNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCreateUnionNotify::Swap(CMessageCreateUnionNotify* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(headid_, other->headid_);
    std::swap(headname_, other->headname_);
    otherid_.Swap(&other->otherid_);
    othername_.Swap(&other->othername_);
    std::swap(unionid_, other->unionid_);
    std::swap(unionname_, other->unionname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCreateUnionNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCreateUnionNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCreateUnionNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCreateUnionNotify_reflection_;
}

// ===================================================================

const ::std::string CMessageApplyUnionRequest::_default_unionname_;
#ifndef _MSC_VER
const int CMessageApplyUnionRequest::kCorpHeadFieldNumber;
const int CMessageApplyUnionRequest::kUnionNameFieldNumber;
const int CMessageApplyUnionRequest::kUnionIDFieldNumber;
const int CMessageApplyUnionRequest::kRoleIDFieldNumber;
#endif  // !_MSC_VER

CMessageApplyUnionRequest::CMessageApplyUnionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageApplyUnionRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageApplyUnionRequest::CMessageApplyUnionRequest(const CMessageApplyUnionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageApplyUnionRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  unionname_ = const_cast< ::std::string*>(&_default_unionname_);
  unionid_ = 0u;
  roleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageApplyUnionRequest::~CMessageApplyUnionRequest() {
  SharedDtor();
}

void CMessageApplyUnionRequest::SharedDtor() {
  if (unionname_ != &_default_unionname_) {
    delete unionname_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageApplyUnionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageApplyUnionRequest_descriptor_;
}

const CMessageApplyUnionRequest& CMessageApplyUnionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageApplyUnionRequest* CMessageApplyUnionRequest::default_instance_ = NULL;

CMessageApplyUnionRequest* CMessageApplyUnionRequest::New() const {
  return new CMessageApplyUnionRequest;
}

void CMessageApplyUnionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    if (_has_bit(1)) {
      if (unionname_ != &_default_unionname_) {
        unionname_->clear();
      }
    }
    unionid_ = 0u;
    roleid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageApplyUnionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(18)) goto parse_UnionName;
        break;
      }
      
      // optional string UnionName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_UnionName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_unionname()));
        if (input->ExpectTag(24)) goto parse_UnionID;
        break;
      }
      
      // optional uint32 UnionID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UnionID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &unionid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageApplyUnionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageApplyUnionRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional string UnionName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->unionname(), output);
  }
  
  // optional uint32 UnionID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->unionid(), output);
  }
  
  // optional uint32 RoleID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->roleid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageApplyUnionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional string UnionName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->unionname(), target);
  }
  
  // optional uint32 UnionID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->unionid(), target);
  }
  
  // optional uint32 RoleID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->roleid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageApplyUnionRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional string UnionName = 2;
    if (has_unionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->unionname());
    }
    
    // optional uint32 UnionID = 3;
    if (has_unionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->unionid());
    }
    
    // optional uint32 RoleID = 4;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageApplyUnionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageApplyUnionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageApplyUnionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageApplyUnionRequest::MergeFrom(const CMessageApplyUnionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_unionname(from.unionname());
    }
    if (from._has_bit(2)) {
      set_unionid(from.unionid());
    }
    if (from._has_bit(3)) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageApplyUnionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageApplyUnionRequest::CopyFrom(const CMessageApplyUnionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageApplyUnionRequest::Swap(CMessageApplyUnionRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(unionname_, other->unionname_);
    std::swap(unionid_, other->unionid_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageApplyUnionRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageApplyUnionRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageApplyUnionRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageApplyUnionRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageApplyUnionResponse::_default_unionname_;
#ifndef _MSC_VER
const int CMessageApplyUnionResponse::kCorpHeadFieldNumber;
const int CMessageApplyUnionResponse::kErrcodeFieldNumber;
const int CMessageApplyUnionResponse::kUnionNameFieldNumber;
#endif  // !_MSC_VER

CMessageApplyUnionResponse::CMessageApplyUnionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageApplyUnionResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageApplyUnionResponse::CMessageApplyUnionResponse(const CMessageApplyUnionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageApplyUnionResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  errcode_ = 0u;
  unionname_ = const_cast< ::std::string*>(&_default_unionname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageApplyUnionResponse::~CMessageApplyUnionResponse() {
  SharedDtor();
}

void CMessageApplyUnionResponse::SharedDtor() {
  if (unionname_ != &_default_unionname_) {
    delete unionname_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageApplyUnionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageApplyUnionResponse_descriptor_;
}

const CMessageApplyUnionResponse& CMessageApplyUnionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageApplyUnionResponse* CMessageApplyUnionResponse::default_instance_ = NULL;

CMessageApplyUnionResponse* CMessageApplyUnionResponse::New() const {
  return new CMessageApplyUnionResponse;
}

void CMessageApplyUnionResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    errcode_ = 0u;
    if (_has_bit(2)) {
      if (unionname_ != &_default_unionname_) {
        unionname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageApplyUnionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_UnionName;
        break;
      }
      
      // optional string UnionName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_UnionName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_unionname()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageApplyUnionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageApplyUnionResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  // optional string UnionName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->unionname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageApplyUnionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  // optional string UnionName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->unionname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageApplyUnionResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional string UnionName = 3;
    if (has_unionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->unionname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageApplyUnionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageApplyUnionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageApplyUnionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageApplyUnionResponse::MergeFrom(const CMessageApplyUnionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(2)) {
      set_unionname(from.unionname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageApplyUnionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageApplyUnionResponse::CopyFrom(const CMessageApplyUnionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageApplyUnionResponse::Swap(CMessageApplyUnionResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(errcode_, other->errcode_);
    std::swap(unionname_, other->unionname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageApplyUnionResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageApplyUnionResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageApplyUnionResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageApplyUnionResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageUnionMemberApplyNotify::kCorpHeadFieldNumber;
const int CMessageUnionMemberApplyNotify::kCorpsInfoFieldNumber;
#endif  // !_MSC_VER

CMessageUnionMemberApplyNotify::CMessageUnionMemberApplyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUnionMemberApplyNotify::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
  corpsinfo_ = const_cast< ::PBCorpsBasicInfo*>(&::PBCorpsBasicInfo::default_instance());
}

CMessageUnionMemberApplyNotify::CMessageUnionMemberApplyNotify(const CMessageUnionMemberApplyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUnionMemberApplyNotify::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  corpsinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUnionMemberApplyNotify::~CMessageUnionMemberApplyNotify() {
  SharedDtor();
}

void CMessageUnionMemberApplyNotify::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
    delete corpsinfo_;
  }
}

const ::google::protobuf::Descriptor* CMessageUnionMemberApplyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUnionMemberApplyNotify_descriptor_;
}

const CMessageUnionMemberApplyNotify& CMessageUnionMemberApplyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageUnionMemberApplyNotify* CMessageUnionMemberApplyNotify::default_instance_ = NULL;

CMessageUnionMemberApplyNotify* CMessageUnionMemberApplyNotify::New() const {
  return new CMessageUnionMemberApplyNotify;
}

void CMessageUnionMemberApplyNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    if (_has_bit(1)) {
      if (corpsinfo_ != NULL) corpsinfo_->::PBCorpsBasicInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUnionMemberApplyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(18)) goto parse_CorpsInfo;
        break;
      }
      
      // optional .PBCorpsBasicInfo CorpsInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corpsinfo()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUnionMemberApplyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUnionMemberApplyNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional .PBCorpsBasicInfo CorpsInfo = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->corpsinfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUnionMemberApplyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional .PBCorpsBasicInfo CorpsInfo = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->corpsinfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUnionMemberApplyNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional .PBCorpsBasicInfo CorpsInfo = 2;
    if (has_corpsinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corpsinfo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUnionMemberApplyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUnionMemberApplyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUnionMemberApplyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUnionMemberApplyNotify::MergeFrom(const CMessageUnionMemberApplyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      mutable_corpsinfo()->::PBCorpsBasicInfo::MergeFrom(from.corpsinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUnionMemberApplyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUnionMemberApplyNotify::CopyFrom(const CMessageUnionMemberApplyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUnionMemberApplyNotify::Swap(CMessageUnionMemberApplyNotify* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(corpsinfo_, other->corpsinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUnionMemberApplyNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUnionMemberApplyNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUnionMemberApplyNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUnionMemberApplyNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageReplyUnionMemberApplyRequest::kCorpHeadFieldNumber;
const int CMessageReplyUnionMemberApplyRequest::kResultFieldNumber;
const int CMessageReplyUnionMemberApplyRequest::kCorpsIDFieldNumber;
#endif  // !_MSC_VER

CMessageReplyUnionMemberApplyRequest::CMessageReplyUnionMemberApplyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageReplyUnionMemberApplyRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageReplyUnionMemberApplyRequest::CMessageReplyUnionMemberApplyRequest(const CMessageReplyUnionMemberApplyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageReplyUnionMemberApplyRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  result_ = 0u;
  corpsid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageReplyUnionMemberApplyRequest::~CMessageReplyUnionMemberApplyRequest() {
  SharedDtor();
}

void CMessageReplyUnionMemberApplyRequest::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageReplyUnionMemberApplyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageReplyUnionMemberApplyRequest_descriptor_;
}

const CMessageReplyUnionMemberApplyRequest& CMessageReplyUnionMemberApplyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageReplyUnionMemberApplyRequest* CMessageReplyUnionMemberApplyRequest::default_instance_ = NULL;

CMessageReplyUnionMemberApplyRequest* CMessageReplyUnionMemberApplyRequest::New() const {
  return new CMessageReplyUnionMemberApplyRequest;
}

void CMessageReplyUnionMemberApplyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    result_ = 0u;
    corpsid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageReplyUnionMemberApplyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_CorpsID;
        break;
      }
      
      // optional uint32 CorpsID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageReplyUnionMemberApplyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageReplyUnionMemberApplyRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  // optional uint32 CorpsID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->corpsid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageReplyUnionMemberApplyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  // optional uint32 CorpsID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->corpsid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageReplyUnionMemberApplyRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 CorpsID = 3;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageReplyUnionMemberApplyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageReplyUnionMemberApplyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageReplyUnionMemberApplyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageReplyUnionMemberApplyRequest::MergeFrom(const CMessageReplyUnionMemberApplyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_corpsid(from.corpsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageReplyUnionMemberApplyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReplyUnionMemberApplyRequest::CopyFrom(const CMessageReplyUnionMemberApplyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReplyUnionMemberApplyRequest::Swap(CMessageReplyUnionMemberApplyRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(result_, other->result_);
    std::swap(corpsid_, other->corpsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageReplyUnionMemberApplyRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageReplyUnionMemberApplyRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageReplyUnionMemberApplyRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageReplyUnionMemberApplyRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageReplyUnionMemberApplyResponse::kCorpHeadFieldNumber;
const int CMessageReplyUnionMemberApplyResponse::kErrcodeFieldNumber;
const int CMessageReplyUnionMemberApplyResponse::kResultFieldNumber;
const int CMessageReplyUnionMemberApplyResponse::kCorpsIDFieldNumber;
#endif  // !_MSC_VER

CMessageReplyUnionMemberApplyResponse::CMessageReplyUnionMemberApplyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageReplyUnionMemberApplyResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageReplyUnionMemberApplyResponse::CMessageReplyUnionMemberApplyResponse(const CMessageReplyUnionMemberApplyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageReplyUnionMemberApplyResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  errcode_ = 0u;
  result_ = 0u;
  corpsid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageReplyUnionMemberApplyResponse::~CMessageReplyUnionMemberApplyResponse() {
  SharedDtor();
}

void CMessageReplyUnionMemberApplyResponse::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageReplyUnionMemberApplyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageReplyUnionMemberApplyResponse_descriptor_;
}

const CMessageReplyUnionMemberApplyResponse& CMessageReplyUnionMemberApplyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageReplyUnionMemberApplyResponse* CMessageReplyUnionMemberApplyResponse::default_instance_ = NULL;

CMessageReplyUnionMemberApplyResponse* CMessageReplyUnionMemberApplyResponse::New() const {
  return new CMessageReplyUnionMemberApplyResponse;
}

void CMessageReplyUnionMemberApplyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    errcode_ = 0u;
    result_ = 0u;
    corpsid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageReplyUnionMemberApplyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_CorpsID;
        break;
      }
      
      // optional uint32 CorpsID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageReplyUnionMemberApplyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageReplyUnionMemberApplyResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  // optional uint32 Result = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->result(), output);
  }
  
  // optional uint32 CorpsID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->corpsid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageReplyUnionMemberApplyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  // optional uint32 Result = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->result(), target);
  }
  
  // optional uint32 CorpsID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->corpsid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageReplyUnionMemberApplyResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional uint32 Result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 CorpsID = 4;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageReplyUnionMemberApplyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageReplyUnionMemberApplyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageReplyUnionMemberApplyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageReplyUnionMemberApplyResponse::MergeFrom(const CMessageReplyUnionMemberApplyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(2)) {
      set_result(from.result());
    }
    if (from._has_bit(3)) {
      set_corpsid(from.corpsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageReplyUnionMemberApplyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReplyUnionMemberApplyResponse::CopyFrom(const CMessageReplyUnionMemberApplyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReplyUnionMemberApplyResponse::Swap(CMessageReplyUnionMemberApplyResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(errcode_, other->errcode_);
    std::swap(result_, other->result_);
    std::swap(corpsid_, other->corpsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageReplyUnionMemberApplyResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageReplyUnionMemberApplyResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageReplyUnionMemberApplyResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageReplyUnionMemberApplyResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageApplyUnionResultNotify::_default_unionname_;
#ifndef _MSC_VER
const int CMessageApplyUnionResultNotify::kCorpHeadFieldNumber;
const int CMessageApplyUnionResultNotify::kResultCodeFieldNumber;
const int CMessageApplyUnionResultNotify::kUnionIDFieldNumber;
const int CMessageApplyUnionResultNotify::kUnionNameFieldNumber;
#endif  // !_MSC_VER

CMessageApplyUnionResultNotify::CMessageApplyUnionResultNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageApplyUnionResultNotify::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageApplyUnionResultNotify::CMessageApplyUnionResultNotify(const CMessageApplyUnionResultNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageApplyUnionResultNotify::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  resultcode_ = 0u;
  unionid_ = 0u;
  unionname_ = const_cast< ::std::string*>(&_default_unionname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageApplyUnionResultNotify::~CMessageApplyUnionResultNotify() {
  SharedDtor();
}

void CMessageApplyUnionResultNotify::SharedDtor() {
  if (unionname_ != &_default_unionname_) {
    delete unionname_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageApplyUnionResultNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageApplyUnionResultNotify_descriptor_;
}

const CMessageApplyUnionResultNotify& CMessageApplyUnionResultNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageApplyUnionResultNotify* CMessageApplyUnionResultNotify::default_instance_ = NULL;

CMessageApplyUnionResultNotify* CMessageApplyUnionResultNotify::New() const {
  return new CMessageApplyUnionResultNotify;
}

void CMessageApplyUnionResultNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    resultcode_ = 0u;
    unionid_ = 0u;
    if (_has_bit(3)) {
      if (unionname_ != &_default_unionname_) {
        unionname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageApplyUnionResultNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_ResultCode;
        break;
      }
      
      // optional uint32 ResultCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ResultCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &resultcode_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_UnionID;
        break;
      }
      
      // optional uint32 UnionID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UnionID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &unionid_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_UnionName;
        break;
      }
      
      // optional string UnionName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_UnionName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_unionname()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageApplyUnionResultNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageApplyUnionResultNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 ResultCode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->resultcode(), output);
  }
  
  // optional uint32 UnionID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->unionid(), output);
  }
  
  // optional string UnionName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->unionname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageApplyUnionResultNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 ResultCode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->resultcode(), target);
  }
  
  // optional uint32 UnionID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->unionid(), target);
  }
  
  // optional string UnionName = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->unionname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageApplyUnionResultNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 ResultCode = 2;
    if (has_resultcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->resultcode());
    }
    
    // optional uint32 UnionID = 3;
    if (has_unionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->unionid());
    }
    
    // optional string UnionName = 4;
    if (has_unionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->unionname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageApplyUnionResultNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageApplyUnionResultNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageApplyUnionResultNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageApplyUnionResultNotify::MergeFrom(const CMessageApplyUnionResultNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_resultcode(from.resultcode());
    }
    if (from._has_bit(2)) {
      set_unionid(from.unionid());
    }
    if (from._has_bit(3)) {
      set_unionname(from.unionname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageApplyUnionResultNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageApplyUnionResultNotify::CopyFrom(const CMessageApplyUnionResultNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageApplyUnionResultNotify::Swap(CMessageApplyUnionResultNotify* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(resultcode_, other->resultcode_);
    std::swap(unionid_, other->unionid_);
    std::swap(unionname_, other->unionname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageApplyUnionResultNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageApplyUnionResultNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageApplyUnionResultNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageApplyUnionResultNotify_reflection_;
}

// ===================================================================

const ::std::string CMessageInviteUnionMemberRequest::_default_corpsname_;
#ifndef _MSC_VER
const int CMessageInviteUnionMemberRequest::kCorpHeadFieldNumber;
const int CMessageInviteUnionMemberRequest::kCorpsNameFieldNumber;
const int CMessageInviteUnionMemberRequest::kMemberIDFieldNumber;
#endif  // !_MSC_VER

CMessageInviteUnionMemberRequest::CMessageInviteUnionMemberRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageInviteUnionMemberRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageInviteUnionMemberRequest::CMessageInviteUnionMemberRequest(const CMessageInviteUnionMemberRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageInviteUnionMemberRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  corpsname_ = const_cast< ::std::string*>(&_default_corpsname_);
  memberid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageInviteUnionMemberRequest::~CMessageInviteUnionMemberRequest() {
  SharedDtor();
}

void CMessageInviteUnionMemberRequest::SharedDtor() {
  if (corpsname_ != &_default_corpsname_) {
    delete corpsname_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageInviteUnionMemberRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageInviteUnionMemberRequest_descriptor_;
}

const CMessageInviteUnionMemberRequest& CMessageInviteUnionMemberRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageInviteUnionMemberRequest* CMessageInviteUnionMemberRequest::default_instance_ = NULL;

CMessageInviteUnionMemberRequest* CMessageInviteUnionMemberRequest::New() const {
  return new CMessageInviteUnionMemberRequest;
}

void CMessageInviteUnionMemberRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    if (_has_bit(1)) {
      if (corpsname_ != &_default_corpsname_) {
        corpsname_->clear();
      }
    }
    memberid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageInviteUnionMemberRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(18)) goto parse_CorpsName;
        break;
      }
      
      // optional string CorpsName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_corpsname()));
        if (input->ExpectTag(24)) goto parse_MemberID;
        break;
      }
      
      // optional uint32 MemberID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MemberID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &memberid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageInviteUnionMemberRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageInviteUnionMemberRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional string CorpsName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->corpsname(), output);
  }
  
  // optional uint32 MemberID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->memberid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageInviteUnionMemberRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional string CorpsName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->corpsname(), target);
  }
  
  // optional uint32 MemberID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->memberid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageInviteUnionMemberRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional string CorpsName = 2;
    if (has_corpsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->corpsname());
    }
    
    // optional uint32 MemberID = 3;
    if (has_memberid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->memberid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageInviteUnionMemberRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageInviteUnionMemberRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageInviteUnionMemberRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageInviteUnionMemberRequest::MergeFrom(const CMessageInviteUnionMemberRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_corpsname(from.corpsname());
    }
    if (from._has_bit(2)) {
      set_memberid(from.memberid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageInviteUnionMemberRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageInviteUnionMemberRequest::CopyFrom(const CMessageInviteUnionMemberRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageInviteUnionMemberRequest::Swap(CMessageInviteUnionMemberRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(corpsname_, other->corpsname_);
    std::swap(memberid_, other->memberid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageInviteUnionMemberRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageInviteUnionMemberRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageInviteUnionMemberRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageInviteUnionMemberRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageInviteUnionMemberResponse::_default_corpsname_;
#ifndef _MSC_VER
const int CMessageInviteUnionMemberResponse::kCorpHeadFieldNumber;
const int CMessageInviteUnionMemberResponse::kErrcodeFieldNumber;
const int CMessageInviteUnionMemberResponse::kCorpsNameFieldNumber;
#endif  // !_MSC_VER

CMessageInviteUnionMemberResponse::CMessageInviteUnionMemberResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageInviteUnionMemberResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageInviteUnionMemberResponse::CMessageInviteUnionMemberResponse(const CMessageInviteUnionMemberResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageInviteUnionMemberResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  errcode_ = 0u;
  corpsname_ = const_cast< ::std::string*>(&_default_corpsname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageInviteUnionMemberResponse::~CMessageInviteUnionMemberResponse() {
  SharedDtor();
}

void CMessageInviteUnionMemberResponse::SharedDtor() {
  if (corpsname_ != &_default_corpsname_) {
    delete corpsname_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageInviteUnionMemberResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageInviteUnionMemberResponse_descriptor_;
}

const CMessageInviteUnionMemberResponse& CMessageInviteUnionMemberResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageInviteUnionMemberResponse* CMessageInviteUnionMemberResponse::default_instance_ = NULL;

CMessageInviteUnionMemberResponse* CMessageInviteUnionMemberResponse::New() const {
  return new CMessageInviteUnionMemberResponse;
}

void CMessageInviteUnionMemberResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    errcode_ = 0u;
    if (_has_bit(2)) {
      if (corpsname_ != &_default_corpsname_) {
        corpsname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageInviteUnionMemberResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_CorpsName;
        break;
      }
      
      // optional string CorpsName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_corpsname()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageInviteUnionMemberResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageInviteUnionMemberResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  // optional string CorpsName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->corpsname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageInviteUnionMemberResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  // optional string CorpsName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->corpsname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageInviteUnionMemberResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional string CorpsName = 3;
    if (has_corpsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->corpsname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageInviteUnionMemberResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageInviteUnionMemberResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageInviteUnionMemberResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageInviteUnionMemberResponse::MergeFrom(const CMessageInviteUnionMemberResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(2)) {
      set_corpsname(from.corpsname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageInviteUnionMemberResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageInviteUnionMemberResponse::CopyFrom(const CMessageInviteUnionMemberResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageInviteUnionMemberResponse::Swap(CMessageInviteUnionMemberResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(errcode_, other->errcode_);
    std::swap(corpsname_, other->corpsname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageInviteUnionMemberResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageInviteUnionMemberResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageInviteUnionMemberResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageInviteUnionMemberResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageUnionInviteNotify::_default_invitingname_;
#ifndef _MSC_VER
const int CMessageUnionInviteNotify::kCorpHeadFieldNumber;
const int CMessageUnionInviteNotify::kInvitingNameFieldNumber;
const int CMessageUnionInviteNotify::kInvitingIDFieldNumber;
const int CMessageUnionInviteNotify::kUnionInfoFieldNumber;
#endif  // !_MSC_VER

CMessageUnionInviteNotify::CMessageUnionInviteNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUnionInviteNotify::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
  unioninfo_ = const_cast< ::PBUnionBasicInfo*>(&::PBUnionBasicInfo::default_instance());
}

CMessageUnionInviteNotify::CMessageUnionInviteNotify(const CMessageUnionInviteNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUnionInviteNotify::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  invitingname_ = const_cast< ::std::string*>(&_default_invitingname_);
  invitingid_ = 0u;
  unioninfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUnionInviteNotify::~CMessageUnionInviteNotify() {
  SharedDtor();
}

void CMessageUnionInviteNotify::SharedDtor() {
  if (invitingname_ != &_default_invitingname_) {
    delete invitingname_;
  }
  if (this != default_instance_) {
    delete corphead_;
    delete unioninfo_;
  }
}

const ::google::protobuf::Descriptor* CMessageUnionInviteNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUnionInviteNotify_descriptor_;
}

const CMessageUnionInviteNotify& CMessageUnionInviteNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageUnionInviteNotify* CMessageUnionInviteNotify::default_instance_ = NULL;

CMessageUnionInviteNotify* CMessageUnionInviteNotify::New() const {
  return new CMessageUnionInviteNotify;
}

void CMessageUnionInviteNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    if (_has_bit(1)) {
      if (invitingname_ != &_default_invitingname_) {
        invitingname_->clear();
      }
    }
    invitingid_ = 0u;
    if (_has_bit(3)) {
      if (unioninfo_ != NULL) unioninfo_->::PBUnionBasicInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUnionInviteNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(18)) goto parse_InvitingName;
        break;
      }
      
      // optional string InvitingName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_InvitingName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_invitingname()));
        if (input->ExpectTag(24)) goto parse_InvitingID;
        break;
      }
      
      // optional uint32 InvitingID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InvitingID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &invitingid_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_UnionInfo;
        break;
      }
      
      // optional .PBUnionBasicInfo UnionInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_UnionInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_unioninfo()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUnionInviteNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUnionInviteNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional string InvitingName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->invitingname(), output);
  }
  
  // optional uint32 InvitingID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->invitingid(), output);
  }
  
  // optional .PBUnionBasicInfo UnionInfo = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->unioninfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUnionInviteNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional string InvitingName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->invitingname(), target);
  }
  
  // optional uint32 InvitingID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->invitingid(), target);
  }
  
  // optional .PBUnionBasicInfo UnionInfo = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(4, this->unioninfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUnionInviteNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional string InvitingName = 2;
    if (has_invitingname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->invitingname());
    }
    
    // optional uint32 InvitingID = 3;
    if (has_invitingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->invitingid());
    }
    
    // optional .PBUnionBasicInfo UnionInfo = 4;
    if (has_unioninfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->unioninfo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUnionInviteNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUnionInviteNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUnionInviteNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUnionInviteNotify::MergeFrom(const CMessageUnionInviteNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_invitingname(from.invitingname());
    }
    if (from._has_bit(2)) {
      set_invitingid(from.invitingid());
    }
    if (from._has_bit(3)) {
      mutable_unioninfo()->::PBUnionBasicInfo::MergeFrom(from.unioninfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUnionInviteNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUnionInviteNotify::CopyFrom(const CMessageUnionInviteNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUnionInviteNotify::Swap(CMessageUnionInviteNotify* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(invitingname_, other->invitingname_);
    std::swap(invitingid_, other->invitingid_);
    std::swap(unioninfo_, other->unioninfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUnionInviteNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUnionInviteNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUnionInviteNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUnionInviteNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageReplyUnionInviteRequest::kCorpHeadFieldNumber;
const int CMessageReplyUnionInviteRequest::kResultFieldNumber;
const int CMessageReplyUnionInviteRequest::kUnionIDFieldNumber;
const int CMessageReplyUnionInviteRequest::kInvitingIDFieldNumber;
#endif  // !_MSC_VER

CMessageReplyUnionInviteRequest::CMessageReplyUnionInviteRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageReplyUnionInviteRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageReplyUnionInviteRequest::CMessageReplyUnionInviteRequest(const CMessageReplyUnionInviteRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageReplyUnionInviteRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  result_ = 0u;
  unionid_ = 0u;
  invitingid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageReplyUnionInviteRequest::~CMessageReplyUnionInviteRequest() {
  SharedDtor();
}

void CMessageReplyUnionInviteRequest::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageReplyUnionInviteRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageReplyUnionInviteRequest_descriptor_;
}

const CMessageReplyUnionInviteRequest& CMessageReplyUnionInviteRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageReplyUnionInviteRequest* CMessageReplyUnionInviteRequest::default_instance_ = NULL;

CMessageReplyUnionInviteRequest* CMessageReplyUnionInviteRequest::New() const {
  return new CMessageReplyUnionInviteRequest;
}

void CMessageReplyUnionInviteRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    result_ = 0u;
    unionid_ = 0u;
    invitingid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageReplyUnionInviteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_UnionID;
        break;
      }
      
      // optional uint32 UnionID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UnionID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &unionid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_InvitingID;
        break;
      }
      
      // optional uint32 InvitingID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InvitingID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &invitingid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageReplyUnionInviteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageReplyUnionInviteRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  // optional uint32 UnionID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->unionid(), output);
  }
  
  // optional uint32 InvitingID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->invitingid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageReplyUnionInviteRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  // optional uint32 UnionID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->unionid(), target);
  }
  
  // optional uint32 InvitingID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->invitingid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageReplyUnionInviteRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 UnionID = 3;
    if (has_unionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->unionid());
    }
    
    // optional uint32 InvitingID = 4;
    if (has_invitingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->invitingid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageReplyUnionInviteRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageReplyUnionInviteRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageReplyUnionInviteRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageReplyUnionInviteRequest::MergeFrom(const CMessageReplyUnionInviteRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_unionid(from.unionid());
    }
    if (from._has_bit(3)) {
      set_invitingid(from.invitingid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageReplyUnionInviteRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReplyUnionInviteRequest::CopyFrom(const CMessageReplyUnionInviteRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReplyUnionInviteRequest::Swap(CMessageReplyUnionInviteRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(result_, other->result_);
    std::swap(unionid_, other->unionid_);
    std::swap(invitingid_, other->invitingid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageReplyUnionInviteRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageReplyUnionInviteRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageReplyUnionInviteRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageReplyUnionInviteRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageReplyUnionInviteResponse::_default_unionname_;
#ifndef _MSC_VER
const int CMessageReplyUnionInviteResponse::kCorpHeadFieldNumber;
const int CMessageReplyUnionInviteResponse::kErrcodeFieldNumber;
const int CMessageReplyUnionInviteResponse::kResultFieldNumber;
const int CMessageReplyUnionInviteResponse::kUnionNameFieldNumber;
const int CMessageReplyUnionInviteResponse::kUnionIDFieldNumber;
#endif  // !_MSC_VER

CMessageReplyUnionInviteResponse::CMessageReplyUnionInviteResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageReplyUnionInviteResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageReplyUnionInviteResponse::CMessageReplyUnionInviteResponse(const CMessageReplyUnionInviteResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageReplyUnionInviteResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  errcode_ = 0u;
  result_ = 0u;
  unionname_ = const_cast< ::std::string*>(&_default_unionname_);
  unionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageReplyUnionInviteResponse::~CMessageReplyUnionInviteResponse() {
  SharedDtor();
}

void CMessageReplyUnionInviteResponse::SharedDtor() {
  if (unionname_ != &_default_unionname_) {
    delete unionname_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageReplyUnionInviteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageReplyUnionInviteResponse_descriptor_;
}

const CMessageReplyUnionInviteResponse& CMessageReplyUnionInviteResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageReplyUnionInviteResponse* CMessageReplyUnionInviteResponse::default_instance_ = NULL;

CMessageReplyUnionInviteResponse* CMessageReplyUnionInviteResponse::New() const {
  return new CMessageReplyUnionInviteResponse;
}

void CMessageReplyUnionInviteResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    errcode_ = 0u;
    result_ = 0u;
    if (_has_bit(3)) {
      if (unionname_ != &_default_unionname_) {
        unionname_->clear();
      }
    }
    unionid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageReplyUnionInviteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_UnionName;
        break;
      }
      
      // optional string UnionName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_UnionName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_unionname()));
        if (input->ExpectTag(40)) goto parse_UnionID;
        break;
      }
      
      // optional uint32 UnionID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UnionID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &unionid_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageReplyUnionInviteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageReplyUnionInviteResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  // optional uint32 Result = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->result(), output);
  }
  
  // optional string UnionName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->unionname(), output);
  }
  
  // optional uint32 UnionID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->unionid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageReplyUnionInviteResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  // optional uint32 Result = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->result(), target);
  }
  
  // optional string UnionName = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->unionname(), target);
  }
  
  // optional uint32 UnionID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->unionid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageReplyUnionInviteResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional uint32 Result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional string UnionName = 4;
    if (has_unionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->unionname());
    }
    
    // optional uint32 UnionID = 5;
    if (has_unionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->unionid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageReplyUnionInviteResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageReplyUnionInviteResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageReplyUnionInviteResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageReplyUnionInviteResponse::MergeFrom(const CMessageReplyUnionInviteResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(2)) {
      set_result(from.result());
    }
    if (from._has_bit(3)) {
      set_unionname(from.unionname());
    }
    if (from._has_bit(4)) {
      set_unionid(from.unionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageReplyUnionInviteResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReplyUnionInviteResponse::CopyFrom(const CMessageReplyUnionInviteResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReplyUnionInviteResponse::Swap(CMessageReplyUnionInviteResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(errcode_, other->errcode_);
    std::swap(result_, other->result_);
    std::swap(unionname_, other->unionname_);
    std::swap(unionid_, other->unionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageReplyUnionInviteResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageReplyUnionInviteResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageReplyUnionInviteResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageReplyUnionInviteResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageUnionInviteResultNotify::_default_corpsname_;
#ifndef _MSC_VER
const int CMessageUnionInviteResultNotify::kCorpHeadFieldNumber;
const int CMessageUnionInviteResultNotify::kResultFieldNumber;
const int CMessageUnionInviteResultNotify::kCorpsNameFieldNumber;
#endif  // !_MSC_VER

CMessageUnionInviteResultNotify::CMessageUnionInviteResultNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUnionInviteResultNotify::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageUnionInviteResultNotify::CMessageUnionInviteResultNotify(const CMessageUnionInviteResultNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUnionInviteResultNotify::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  result_ = 0u;
  corpsname_ = const_cast< ::std::string*>(&_default_corpsname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUnionInviteResultNotify::~CMessageUnionInviteResultNotify() {
  SharedDtor();
}

void CMessageUnionInviteResultNotify::SharedDtor() {
  if (corpsname_ != &_default_corpsname_) {
    delete corpsname_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageUnionInviteResultNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUnionInviteResultNotify_descriptor_;
}

const CMessageUnionInviteResultNotify& CMessageUnionInviteResultNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageUnionInviteResultNotify* CMessageUnionInviteResultNotify::default_instance_ = NULL;

CMessageUnionInviteResultNotify* CMessageUnionInviteResultNotify::New() const {
  return new CMessageUnionInviteResultNotify;
}

void CMessageUnionInviteResultNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    result_ = 0u;
    if (_has_bit(2)) {
      if (corpsname_ != &_default_corpsname_) {
        corpsname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUnionInviteResultNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_CorpsName;
        break;
      }
      
      // optional string CorpsName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_corpsname()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUnionInviteResultNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUnionInviteResultNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  // optional string CorpsName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->corpsname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUnionInviteResultNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  // optional string CorpsName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->corpsname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUnionInviteResultNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional string CorpsName = 3;
    if (has_corpsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->corpsname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUnionInviteResultNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUnionInviteResultNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUnionInviteResultNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUnionInviteResultNotify::MergeFrom(const CMessageUnionInviteResultNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_corpsname(from.corpsname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUnionInviteResultNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUnionInviteResultNotify::CopyFrom(const CMessageUnionInviteResultNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUnionInviteResultNotify::Swap(CMessageUnionInviteResultNotify* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(result_, other->result_);
    std::swap(corpsname_, other->corpsname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUnionInviteResultNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUnionInviteResultNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUnionInviteResultNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUnionInviteResultNotify_reflection_;
}

// ===================================================================

const ::std::string CMessageCorpsJoinUnionNotify::_default_unionname_;
#ifndef _MSC_VER
const int CMessageCorpsJoinUnionNotify::kCorpHeadFieldNumber;
const int CMessageCorpsJoinUnionNotify::kCorpsInfoFieldNumber;
const int CMessageCorpsJoinUnionNotify::kUnionIDFieldNumber;
const int CMessageCorpsJoinUnionNotify::kUnionNameFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsJoinUnionNotify::CMessageCorpsJoinUnionNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsJoinUnionNotify::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
  corpsinfo_ = const_cast< ::PBCorpsBasicInfo*>(&::PBCorpsBasicInfo::default_instance());
}

CMessageCorpsJoinUnionNotify::CMessageCorpsJoinUnionNotify(const CMessageCorpsJoinUnionNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsJoinUnionNotify::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  corpsinfo_ = NULL;
  unionid_ = 0u;
  unionname_ = const_cast< ::std::string*>(&_default_unionname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsJoinUnionNotify::~CMessageCorpsJoinUnionNotify() {
  SharedDtor();
}

void CMessageCorpsJoinUnionNotify::SharedDtor() {
  if (unionname_ != &_default_unionname_) {
    delete unionname_;
  }
  if (this != default_instance_) {
    delete corphead_;
    delete corpsinfo_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsJoinUnionNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsJoinUnionNotify_descriptor_;
}

const CMessageCorpsJoinUnionNotify& CMessageCorpsJoinUnionNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsJoinUnionNotify* CMessageCorpsJoinUnionNotify::default_instance_ = NULL;

CMessageCorpsJoinUnionNotify* CMessageCorpsJoinUnionNotify::New() const {
  return new CMessageCorpsJoinUnionNotify;
}

void CMessageCorpsJoinUnionNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    if (_has_bit(1)) {
      if (corpsinfo_ != NULL) corpsinfo_->::PBCorpsBasicInfo::Clear();
    }
    unionid_ = 0u;
    if (_has_bit(3)) {
      if (unionname_ != &_default_unionname_) {
        unionname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsJoinUnionNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(18)) goto parse_CorpsInfo;
        break;
      }
      
      // optional .PBCorpsBasicInfo CorpsInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corpsinfo()));
        if (input->ExpectTag(24)) goto parse_UnionID;
        break;
      }
      
      // optional uint32 UnionID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UnionID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &unionid_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_UnionName;
        break;
      }
      
      // optional string UnionName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_UnionName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_unionname()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsJoinUnionNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsJoinUnionNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional .PBCorpsBasicInfo CorpsInfo = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->corpsinfo(), output);
  }
  
  // optional uint32 UnionID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->unionid(), output);
  }
  
  // optional string UnionName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->unionname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsJoinUnionNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional .PBCorpsBasicInfo CorpsInfo = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->corpsinfo(), target);
  }
  
  // optional uint32 UnionID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->unionid(), target);
  }
  
  // optional string UnionName = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->unionname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsJoinUnionNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional .PBCorpsBasicInfo CorpsInfo = 2;
    if (has_corpsinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corpsinfo());
    }
    
    // optional uint32 UnionID = 3;
    if (has_unionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->unionid());
    }
    
    // optional string UnionName = 4;
    if (has_unionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->unionname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsJoinUnionNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsJoinUnionNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsJoinUnionNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsJoinUnionNotify::MergeFrom(const CMessageCorpsJoinUnionNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      mutable_corpsinfo()->::PBCorpsBasicInfo::MergeFrom(from.corpsinfo());
    }
    if (from._has_bit(2)) {
      set_unionid(from.unionid());
    }
    if (from._has_bit(3)) {
      set_unionname(from.unionname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsJoinUnionNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsJoinUnionNotify::CopyFrom(const CMessageCorpsJoinUnionNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsJoinUnionNotify::Swap(CMessageCorpsJoinUnionNotify* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(corpsinfo_, other->corpsinfo_);
    std::swap(unionid_, other->unionid_);
    std::swap(unionname_, other->unionname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsJoinUnionNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsJoinUnionNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsJoinUnionNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsJoinUnionNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCorpsLeaveUnionRequest::kCorpHeadFieldNumber;
const int CMessageCorpsLeaveUnionRequest::kMsgcodeFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsLeaveUnionRequest::CMessageCorpsLeaveUnionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsLeaveUnionRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsLeaveUnionRequest::CMessageCorpsLeaveUnionRequest(const CMessageCorpsLeaveUnionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsLeaveUnionRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  msgcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsLeaveUnionRequest::~CMessageCorpsLeaveUnionRequest() {
  SharedDtor();
}

void CMessageCorpsLeaveUnionRequest::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsLeaveUnionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsLeaveUnionRequest_descriptor_;
}

const CMessageCorpsLeaveUnionRequest& CMessageCorpsLeaveUnionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsLeaveUnionRequest* CMessageCorpsLeaveUnionRequest::default_instance_ = NULL;

CMessageCorpsLeaveUnionRequest* CMessageCorpsLeaveUnionRequest::New() const {
  return new CMessageCorpsLeaveUnionRequest;
}

void CMessageCorpsLeaveUnionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    msgcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsLeaveUnionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_Msgcode;
        break;
      }
      
      // optional uint32 Msgcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Msgcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &msgcode_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsLeaveUnionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsLeaveUnionRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 Msgcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->msgcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsLeaveUnionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 Msgcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->msgcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsLeaveUnionRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 Msgcode = 2;
    if (has_msgcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->msgcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsLeaveUnionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsLeaveUnionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsLeaveUnionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsLeaveUnionRequest::MergeFrom(const CMessageCorpsLeaveUnionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_msgcode(from.msgcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsLeaveUnionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsLeaveUnionRequest::CopyFrom(const CMessageCorpsLeaveUnionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsLeaveUnionRequest::Swap(CMessageCorpsLeaveUnionRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(msgcode_, other->msgcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsLeaveUnionRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsLeaveUnionRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsLeaveUnionRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsLeaveUnionRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCorpsLeaveUnionResponse::kCorpHeadFieldNumber;
const int CMessageCorpsLeaveUnionResponse::kErrcodeFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsLeaveUnionResponse::CMessageCorpsLeaveUnionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsLeaveUnionResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsLeaveUnionResponse::CMessageCorpsLeaveUnionResponse(const CMessageCorpsLeaveUnionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsLeaveUnionResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsLeaveUnionResponse::~CMessageCorpsLeaveUnionResponse() {
  SharedDtor();
}

void CMessageCorpsLeaveUnionResponse::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsLeaveUnionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsLeaveUnionResponse_descriptor_;
}

const CMessageCorpsLeaveUnionResponse& CMessageCorpsLeaveUnionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsLeaveUnionResponse* CMessageCorpsLeaveUnionResponse::default_instance_ = NULL;

CMessageCorpsLeaveUnionResponse* CMessageCorpsLeaveUnionResponse::New() const {
  return new CMessageCorpsLeaveUnionResponse;
}

void CMessageCorpsLeaveUnionResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsLeaveUnionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsLeaveUnionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsLeaveUnionResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsLeaveUnionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsLeaveUnionResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsLeaveUnionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsLeaveUnionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsLeaveUnionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsLeaveUnionResponse::MergeFrom(const CMessageCorpsLeaveUnionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsLeaveUnionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsLeaveUnionResponse::CopyFrom(const CMessageCorpsLeaveUnionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsLeaveUnionResponse::Swap(CMessageCorpsLeaveUnionResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsLeaveUnionResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsLeaveUnionResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsLeaveUnionResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsLeaveUnionResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageCorpsLeaveUnionNotify::_default_corpsname_;
#ifndef _MSC_VER
const int CMessageCorpsLeaveUnionNotify::kCorpHeadFieldNumber;
const int CMessageCorpsLeaveUnionNotify::kCorpsIDFieldNumber;
const int CMessageCorpsLeaveUnionNotify::kCorpsNameFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsLeaveUnionNotify::CMessageCorpsLeaveUnionNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsLeaveUnionNotify::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsLeaveUnionNotify::CMessageCorpsLeaveUnionNotify(const CMessageCorpsLeaveUnionNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsLeaveUnionNotify::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  corpsid_ = 0u;
  corpsname_ = const_cast< ::std::string*>(&_default_corpsname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsLeaveUnionNotify::~CMessageCorpsLeaveUnionNotify() {
  SharedDtor();
}

void CMessageCorpsLeaveUnionNotify::SharedDtor() {
  if (corpsname_ != &_default_corpsname_) {
    delete corpsname_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsLeaveUnionNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsLeaveUnionNotify_descriptor_;
}

const CMessageCorpsLeaveUnionNotify& CMessageCorpsLeaveUnionNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsLeaveUnionNotify* CMessageCorpsLeaveUnionNotify::default_instance_ = NULL;

CMessageCorpsLeaveUnionNotify* CMessageCorpsLeaveUnionNotify::New() const {
  return new CMessageCorpsLeaveUnionNotify;
}

void CMessageCorpsLeaveUnionNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    corpsid_ = 0u;
    if (_has_bit(2)) {
      if (corpsname_ != &_default_corpsname_) {
        corpsname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsLeaveUnionNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_CorpsID;
        break;
      }
      
      // optional uint32 CorpsID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_CorpsName;
        break;
      }
      
      // optional string CorpsName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_corpsname()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsLeaveUnionNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsLeaveUnionNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 CorpsID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->corpsid(), output);
  }
  
  // optional string CorpsName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->corpsname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsLeaveUnionNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 CorpsID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->corpsid(), target);
  }
  
  // optional string CorpsName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->corpsname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsLeaveUnionNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 CorpsID = 2;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
    // optional string CorpsName = 3;
    if (has_corpsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->corpsname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsLeaveUnionNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsLeaveUnionNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsLeaveUnionNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsLeaveUnionNotify::MergeFrom(const CMessageCorpsLeaveUnionNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_corpsid(from.corpsid());
    }
    if (from._has_bit(2)) {
      set_corpsname(from.corpsname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsLeaveUnionNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsLeaveUnionNotify::CopyFrom(const CMessageCorpsLeaveUnionNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsLeaveUnionNotify::Swap(CMessageCorpsLeaveUnionNotify* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(corpsid_, other->corpsid_);
    std::swap(corpsname_, other->corpsname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsLeaveUnionNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsLeaveUnionNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsLeaveUnionNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsLeaveUnionNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageKickCorpsRequest::kCorpHeadFieldNumber;
const int CMessageKickCorpsRequest::kCorpsIDFieldNumber;
#endif  // !_MSC_VER

CMessageKickCorpsRequest::CMessageKickCorpsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageKickCorpsRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageKickCorpsRequest::CMessageKickCorpsRequest(const CMessageKickCorpsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageKickCorpsRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  corpsid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageKickCorpsRequest::~CMessageKickCorpsRequest() {
  SharedDtor();
}

void CMessageKickCorpsRequest::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageKickCorpsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageKickCorpsRequest_descriptor_;
}

const CMessageKickCorpsRequest& CMessageKickCorpsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageKickCorpsRequest* CMessageKickCorpsRequest::default_instance_ = NULL;

CMessageKickCorpsRequest* CMessageKickCorpsRequest::New() const {
  return new CMessageKickCorpsRequest;
}

void CMessageKickCorpsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    corpsid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageKickCorpsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_CorpsID;
        break;
      }
      
      // optional uint32 CorpsID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageKickCorpsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageKickCorpsRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 CorpsID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->corpsid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageKickCorpsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 CorpsID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->corpsid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageKickCorpsRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 CorpsID = 2;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageKickCorpsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageKickCorpsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageKickCorpsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageKickCorpsRequest::MergeFrom(const CMessageKickCorpsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_corpsid(from.corpsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageKickCorpsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageKickCorpsRequest::CopyFrom(const CMessageKickCorpsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageKickCorpsRequest::Swap(CMessageKickCorpsRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(corpsid_, other->corpsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageKickCorpsRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageKickCorpsRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageKickCorpsRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageKickCorpsRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageKickCorpsResponse::_default_corpsname_;
#ifndef _MSC_VER
const int CMessageKickCorpsResponse::kCorpHeadFieldNumber;
const int CMessageKickCorpsResponse::kErrcodeFieldNumber;
const int CMessageKickCorpsResponse::kCorpsNameFieldNumber;
const int CMessageKickCorpsResponse::kCorpsIDFieldNumber;
#endif  // !_MSC_VER

CMessageKickCorpsResponse::CMessageKickCorpsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageKickCorpsResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageKickCorpsResponse::CMessageKickCorpsResponse(const CMessageKickCorpsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageKickCorpsResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  errcode_ = 0u;
  corpsname_ = const_cast< ::std::string*>(&_default_corpsname_);
  corpsid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageKickCorpsResponse::~CMessageKickCorpsResponse() {
  SharedDtor();
}

void CMessageKickCorpsResponse::SharedDtor() {
  if (corpsname_ != &_default_corpsname_) {
    delete corpsname_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageKickCorpsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageKickCorpsResponse_descriptor_;
}

const CMessageKickCorpsResponse& CMessageKickCorpsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageKickCorpsResponse* CMessageKickCorpsResponse::default_instance_ = NULL;

CMessageKickCorpsResponse* CMessageKickCorpsResponse::New() const {
  return new CMessageKickCorpsResponse;
}

void CMessageKickCorpsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    errcode_ = 0u;
    if (_has_bit(2)) {
      if (corpsname_ != &_default_corpsname_) {
        corpsname_->clear();
      }
    }
    corpsid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageKickCorpsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_CorpsName;
        break;
      }
      
      // optional string CorpsName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_corpsname()));
        if (input->ExpectTag(32)) goto parse_CorpsID;
        break;
      }
      
      // optional uint32 CorpsID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageKickCorpsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageKickCorpsResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  // optional string CorpsName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->corpsname(), output);
  }
  
  // optional uint32 CorpsID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->corpsid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageKickCorpsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  // optional string CorpsName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->corpsname(), target);
  }
  
  // optional uint32 CorpsID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->corpsid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageKickCorpsResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional string CorpsName = 3;
    if (has_corpsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->corpsname());
    }
    
    // optional uint32 CorpsID = 4;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageKickCorpsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageKickCorpsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageKickCorpsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageKickCorpsResponse::MergeFrom(const CMessageKickCorpsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(2)) {
      set_corpsname(from.corpsname());
    }
    if (from._has_bit(3)) {
      set_corpsid(from.corpsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageKickCorpsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageKickCorpsResponse::CopyFrom(const CMessageKickCorpsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageKickCorpsResponse::Swap(CMessageKickCorpsResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(errcode_, other->errcode_);
    std::swap(corpsname_, other->corpsname_);
    std::swap(corpsid_, other->corpsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageKickCorpsResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageKickCorpsResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageKickCorpsResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageKickCorpsResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageKickCorpsNotify::_default_corpsname_;
#ifndef _MSC_VER
const int CMessageKickCorpsNotify::kCorpHeadFieldNumber;
const int CMessageKickCorpsNotify::kCorpsIDFieldNumber;
const int CMessageKickCorpsNotify::kCorpsNameFieldNumber;
#endif  // !_MSC_VER

CMessageKickCorpsNotify::CMessageKickCorpsNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageKickCorpsNotify::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageKickCorpsNotify::CMessageKickCorpsNotify(const CMessageKickCorpsNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageKickCorpsNotify::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  corpsid_ = 0u;
  corpsname_ = const_cast< ::std::string*>(&_default_corpsname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageKickCorpsNotify::~CMessageKickCorpsNotify() {
  SharedDtor();
}

void CMessageKickCorpsNotify::SharedDtor() {
  if (corpsname_ != &_default_corpsname_) {
    delete corpsname_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageKickCorpsNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageKickCorpsNotify_descriptor_;
}

const CMessageKickCorpsNotify& CMessageKickCorpsNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageKickCorpsNotify* CMessageKickCorpsNotify::default_instance_ = NULL;

CMessageKickCorpsNotify* CMessageKickCorpsNotify::New() const {
  return new CMessageKickCorpsNotify;
}

void CMessageKickCorpsNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    corpsid_ = 0u;
    if (_has_bit(2)) {
      if (corpsname_ != &_default_corpsname_) {
        corpsname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageKickCorpsNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_CorpsID;
        break;
      }
      
      // optional uint32 CorpsID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_CorpsName;
        break;
      }
      
      // optional string CorpsName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_corpsname()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageKickCorpsNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageKickCorpsNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 CorpsID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->corpsid(), output);
  }
  
  // optional string CorpsName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->corpsname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageKickCorpsNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 CorpsID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->corpsid(), target);
  }
  
  // optional string CorpsName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->corpsname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageKickCorpsNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 CorpsID = 2;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
    // optional string CorpsName = 3;
    if (has_corpsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->corpsname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageKickCorpsNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageKickCorpsNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageKickCorpsNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageKickCorpsNotify::MergeFrom(const CMessageKickCorpsNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_corpsid(from.corpsid());
    }
    if (from._has_bit(2)) {
      set_corpsname(from.corpsname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageKickCorpsNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageKickCorpsNotify::CopyFrom(const CMessageKickCorpsNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageKickCorpsNotify::Swap(CMessageKickCorpsNotify* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(corpsid_, other->corpsid_);
    std::swap(corpsname_, other->corpsname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageKickCorpsNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageKickCorpsNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageKickCorpsNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageKickCorpsNotify_reflection_;
}

// ===================================================================

const ::std::string CMessageMakeUnionRequest::_default_unionname_;
const ::std::string CMessageMakeUnionRequest::_default_unionnotice_;
#ifndef _MSC_VER
const int CMessageMakeUnionRequest::kCorpHeadFieldNumber;
const int CMessageMakeUnionRequest::kOpTypeFieldNumber;
const int CMessageMakeUnionRequest::kUnionNameFieldNumber;
const int CMessageMakeUnionRequest::kUnionNoticeFieldNumber;
const int CMessageMakeUnionRequest::kCorpsIDFieldNumber;
const int CMessageMakeUnionRequest::kTargetIDFieldNumber;
#endif  // !_MSC_VER

CMessageMakeUnionRequest::CMessageMakeUnionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageMakeUnionRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageMakeUnionRequest::CMessageMakeUnionRequest(const CMessageMakeUnionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageMakeUnionRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  optype_ = 0u;
  unionname_ = const_cast< ::std::string*>(&_default_unionname_);
  unionnotice_ = const_cast< ::std::string*>(&_default_unionnotice_);
  corpsid_ = 0u;
  targetid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageMakeUnionRequest::~CMessageMakeUnionRequest() {
  SharedDtor();
}

void CMessageMakeUnionRequest::SharedDtor() {
  if (unionname_ != &_default_unionname_) {
    delete unionname_;
  }
  if (unionnotice_ != &_default_unionnotice_) {
    delete unionnotice_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageMakeUnionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageMakeUnionRequest_descriptor_;
}

const CMessageMakeUnionRequest& CMessageMakeUnionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageMakeUnionRequest* CMessageMakeUnionRequest::default_instance_ = NULL;

CMessageMakeUnionRequest* CMessageMakeUnionRequest::New() const {
  return new CMessageMakeUnionRequest;
}

void CMessageMakeUnionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    optype_ = 0u;
    if (_has_bit(2)) {
      if (unionname_ != &_default_unionname_) {
        unionname_->clear();
      }
    }
    if (_has_bit(3)) {
      if (unionnotice_ != &_default_unionnotice_) {
        unionnotice_->clear();
      }
    }
    corpsid_ = 0u;
    targetid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageMakeUnionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_OpType;
        break;
      }
      
      // optional uint32 OpType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &optype_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_UnionName;
        break;
      }
      
      // optional string UnionName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_UnionName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_unionname()));
        if (input->ExpectTag(34)) goto parse_UnionNotice;
        break;
      }
      
      // optional string UnionNotice = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_UnionNotice:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_unionnotice()));
        if (input->ExpectTag(40)) goto parse_CorpsID;
        break;
      }
      
      // optional uint32 CorpsID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_TargetID;
        break;
      }
      
      // optional uint32 TargetID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TargetID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &targetid_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageMakeUnionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageMakeUnionRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 OpType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->optype(), output);
  }
  
  // optional string UnionName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->unionname(), output);
  }
  
  // optional string UnionNotice = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->unionnotice(), output);
  }
  
  // optional uint32 CorpsID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->corpsid(), output);
  }
  
  // optional uint32 TargetID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->targetid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageMakeUnionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 OpType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->optype(), target);
  }
  
  // optional string UnionName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->unionname(), target);
  }
  
  // optional string UnionNotice = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->unionnotice(), target);
  }
  
  // optional uint32 CorpsID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->corpsid(), target);
  }
  
  // optional uint32 TargetID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->targetid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageMakeUnionRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 OpType = 2;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->optype());
    }
    
    // optional string UnionName = 3;
    if (has_unionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->unionname());
    }
    
    // optional string UnionNotice = 4;
    if (has_unionnotice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->unionnotice());
    }
    
    // optional uint32 CorpsID = 5;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
    // optional uint32 TargetID = 6;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->targetid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageMakeUnionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageMakeUnionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageMakeUnionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageMakeUnionRequest::MergeFrom(const CMessageMakeUnionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_optype(from.optype());
    }
    if (from._has_bit(2)) {
      set_unionname(from.unionname());
    }
    if (from._has_bit(3)) {
      set_unionnotice(from.unionnotice());
    }
    if (from._has_bit(4)) {
      set_corpsid(from.corpsid());
    }
    if (from._has_bit(5)) {
      set_targetid(from.targetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageMakeUnionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMakeUnionRequest::CopyFrom(const CMessageMakeUnionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMakeUnionRequest::Swap(CMessageMakeUnionRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(optype_, other->optype_);
    std::swap(unionname_, other->unionname_);
    std::swap(unionnotice_, other->unionnotice_);
    std::swap(corpsid_, other->corpsid_);
    std::swap(targetid_, other->targetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageMakeUnionRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageMakeUnionRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageMakeUnionRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageMakeUnionRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageMakeUnionResponse::kCorpHeadFieldNumber;
const int CMessageMakeUnionResponse::kErrcodeFieldNumber;
const int CMessageMakeUnionResponse::kOpTypeFieldNumber;
#endif  // !_MSC_VER

CMessageMakeUnionResponse::CMessageMakeUnionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageMakeUnionResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageMakeUnionResponse::CMessageMakeUnionResponse(const CMessageMakeUnionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageMakeUnionResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  errcode_ = 0u;
  optype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageMakeUnionResponse::~CMessageMakeUnionResponse() {
  SharedDtor();
}

void CMessageMakeUnionResponse::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageMakeUnionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageMakeUnionResponse_descriptor_;
}

const CMessageMakeUnionResponse& CMessageMakeUnionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageMakeUnionResponse* CMessageMakeUnionResponse::default_instance_ = NULL;

CMessageMakeUnionResponse* CMessageMakeUnionResponse::New() const {
  return new CMessageMakeUnionResponse;
}

void CMessageMakeUnionResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    errcode_ = 0u;
    optype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageMakeUnionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_OpType;
        break;
      }
      
      // optional uint32 OpType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &optype_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageMakeUnionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageMakeUnionResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  // optional uint32 OpType = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->optype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageMakeUnionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  // optional uint32 OpType = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->optype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageMakeUnionResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional uint32 OpType = 3;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->optype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageMakeUnionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageMakeUnionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageMakeUnionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageMakeUnionResponse::MergeFrom(const CMessageMakeUnionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(2)) {
      set_optype(from.optype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageMakeUnionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMakeUnionResponse::CopyFrom(const CMessageMakeUnionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMakeUnionResponse::Swap(CMessageMakeUnionResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(errcode_, other->errcode_);
    std::swap(optype_, other->optype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageMakeUnionResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageMakeUnionResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageMakeUnionResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageMakeUnionResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageMakeUnionNotify::_default_unionname_;
const ::std::string CMessageMakeUnionNotify::_default_unionnotice_;
const ::std::string CMessageMakeUnionNotify::_default_headcorpsname_;
#ifndef _MSC_VER
const int CMessageMakeUnionNotify::kCorpHeadFieldNumber;
const int CMessageMakeUnionNotify::kOpTypeFieldNumber;
const int CMessageMakeUnionNotify::kUnionNameFieldNumber;
const int CMessageMakeUnionNotify::kUnionNoticeFieldNumber;
const int CMessageMakeUnionNotify::kCorpsIDFieldNumber;
const int CMessageMakeUnionNotify::kCorpsNameFieldNumber;
const int CMessageMakeUnionNotify::kHeadCorpsNameFieldNumber;
const int CMessageMakeUnionNotify::kHeadCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageMakeUnionNotify::CMessageMakeUnionNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageMakeUnionNotify::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageMakeUnionNotify::CMessageMakeUnionNotify(const CMessageMakeUnionNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageMakeUnionNotify::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  optype_ = 0u;
  unionname_ = const_cast< ::std::string*>(&_default_unionname_);
  unionnotice_ = const_cast< ::std::string*>(&_default_unionnotice_);
  headcorpsname_ = const_cast< ::std::string*>(&_default_headcorpsname_);
  headcharid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageMakeUnionNotify::~CMessageMakeUnionNotify() {
  SharedDtor();
}

void CMessageMakeUnionNotify::SharedDtor() {
  if (unionname_ != &_default_unionname_) {
    delete unionname_;
  }
  if (unionnotice_ != &_default_unionnotice_) {
    delete unionnotice_;
  }
  if (headcorpsname_ != &_default_headcorpsname_) {
    delete headcorpsname_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageMakeUnionNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageMakeUnionNotify_descriptor_;
}

const CMessageMakeUnionNotify& CMessageMakeUnionNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageMakeUnionNotify* CMessageMakeUnionNotify::default_instance_ = NULL;

CMessageMakeUnionNotify* CMessageMakeUnionNotify::New() const {
  return new CMessageMakeUnionNotify;
}

void CMessageMakeUnionNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    optype_ = 0u;
    if (_has_bit(2)) {
      if (unionname_ != &_default_unionname_) {
        unionname_->clear();
      }
    }
    if (_has_bit(3)) {
      if (unionnotice_ != &_default_unionnotice_) {
        unionnotice_->clear();
      }
    }
    if (_has_bit(6)) {
      if (headcorpsname_ != &_default_headcorpsname_) {
        headcorpsname_->clear();
      }
    }
    headcharid_ = 0u;
  }
  corpsid_.Clear();
  corpsname_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageMakeUnionNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_OpType;
        break;
      }
      
      // optional uint32 OpType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &optype_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_UnionName;
        break;
      }
      
      // optional string UnionName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_UnionName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_unionname()));
        if (input->ExpectTag(34)) goto parse_UnionNotice;
        break;
      }
      
      // optional string UnionNotice = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_UnionNotice:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_unionnotice()));
        if (input->ExpectTag(40)) goto parse_CorpsID;
        break;
      }
      
      // repeated uint32 CorpsID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_corpsid(value);
        if (input->ExpectTag(40)) goto parse_CorpsID;
        if (input->ExpectTag(50)) goto parse_CorpsName;
        break;
      }
      
      // repeated string CorpsName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(
             input, add_corpsname()));
        if (input->ExpectTag(50)) goto parse_CorpsName;
        if (input->ExpectTag(58)) goto parse_HeadCorpsName;
        break;
      }
      
      // optional string HeadCorpsName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_HeadCorpsName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_headcorpsname()));
        if (input->ExpectTag(64)) goto parse_HeadCharID;
        break;
      }
      
      // optional uint32 HeadCharID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HeadCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &headcharid_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageMakeUnionNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageMakeUnionNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 OpType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->optype(), output);
  }
  
  // optional string UnionName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->unionname(), output);
  }
  
  // optional string UnionNotice = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->unionnotice(), output);
  }
  
  // repeated uint32 CorpsID = 5;
  for (int i = 0; i < this->corpsid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->corpsid(i), output);
  }
  
  // repeated string CorpsName = 6;
  for (int i = 0; i < this->corpsname_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteString(6, this->corpsname(i), output);
  }
  
  // optional string HeadCorpsName = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteString(7, this->headcorpsname(), output);
  }
  
  // optional uint32 HeadCharID = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->headcharid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageMakeUnionNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 OpType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->optype(), target);
  }
  
  // optional string UnionName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->unionname(), target);
  }
  
  // optional string UnionNotice = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->unionnotice(), target);
  }
  
  // repeated uint32 CorpsID = 5;
  for (int i = 0; i < this->corpsid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->corpsid(i), target);
  }
  
  // repeated string CorpsName = 6;
  for (int i = 0; i < this->corpsname_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(6, this->corpsname(i), target);
  }
  
  // optional string HeadCorpsName = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(7, this->headcorpsname(), target);
  }
  
  // optional uint32 HeadCharID = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->headcharid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageMakeUnionNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 OpType = 2;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->optype());
    }
    
    // optional string UnionName = 3;
    if (has_unionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->unionname());
    }
    
    // optional string UnionNotice = 4;
    if (has_unionnotice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->unionnotice());
    }
    
    // optional string HeadCorpsName = 7;
    if (has_headcorpsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->headcorpsname());
    }
    
    // optional uint32 HeadCharID = 8;
    if (has_headcharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->headcharid());
    }
    
  }
  // repeated uint32 CorpsID = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->corpsid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->corpsid(i));
    }
    total_size += 1 * this->corpsid_size() + data_size;
  }
  
  // repeated string CorpsName = 6;
  total_size += 1 * this->corpsname_size();
  for (int i = 0; i < this->corpsname_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormat::StringSize(
      this->corpsname(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageMakeUnionNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageMakeUnionNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageMakeUnionNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageMakeUnionNotify::MergeFrom(const CMessageMakeUnionNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  corpsid_.MergeFrom(from.corpsid_);
  corpsname_.MergeFrom(from.corpsname_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_optype(from.optype());
    }
    if (from._has_bit(2)) {
      set_unionname(from.unionname());
    }
    if (from._has_bit(3)) {
      set_unionnotice(from.unionnotice());
    }
    if (from._has_bit(6)) {
      set_headcorpsname(from.headcorpsname());
    }
    if (from._has_bit(7)) {
      set_headcharid(from.headcharid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageMakeUnionNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMakeUnionNotify::CopyFrom(const CMessageMakeUnionNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMakeUnionNotify::Swap(CMessageMakeUnionNotify* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(optype_, other->optype_);
    std::swap(unionname_, other->unionname_);
    std::swap(unionnotice_, other->unionnotice_);
    corpsid_.Swap(&other->corpsid_);
    corpsname_.Swap(&other->corpsname_);
    std::swap(headcorpsname_, other->headcorpsname_);
    std::swap(headcharid_, other->headcharid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageMakeUnionNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageMakeUnionNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageMakeUnionNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageMakeUnionNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetUnionInfoRequest::kCorpHeadFieldNumber;
const int CMessageGetUnionInfoRequest::kUnionIDFieldNumber;
#endif  // !_MSC_VER

CMessageGetUnionInfoRequest::CMessageGetUnionInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetUnionInfoRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageGetUnionInfoRequest::CMessageGetUnionInfoRequest(const CMessageGetUnionInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetUnionInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  unionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetUnionInfoRequest::~CMessageGetUnionInfoRequest() {
  SharedDtor();
}

void CMessageGetUnionInfoRequest::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageGetUnionInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetUnionInfoRequest_descriptor_;
}

const CMessageGetUnionInfoRequest& CMessageGetUnionInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetUnionInfoRequest* CMessageGetUnionInfoRequest::default_instance_ = NULL;

CMessageGetUnionInfoRequest* CMessageGetUnionInfoRequest::New() const {
  return new CMessageGetUnionInfoRequest;
}

void CMessageGetUnionInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    unionid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetUnionInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_UnionID;
        break;
      }
      
      // optional uint32 UnionID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UnionID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &unionid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetUnionInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetUnionInfoRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 UnionID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->unionid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetUnionInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 UnionID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->unionid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetUnionInfoRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 UnionID = 2;
    if (has_unionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->unionid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetUnionInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetUnionInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetUnionInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetUnionInfoRequest::MergeFrom(const CMessageGetUnionInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_unionid(from.unionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetUnionInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetUnionInfoRequest::CopyFrom(const CMessageGetUnionInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetUnionInfoRequest::Swap(CMessageGetUnionInfoRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(unionid_, other->unionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetUnionInfoRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetUnionInfoRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetUnionInfoRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetUnionInfoRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetUnionInfoResponse::kCorpHeadFieldNumber;
const int CMessageGetUnionInfoResponse::kErrcodeFieldNumber;
const int CMessageGetUnionInfoResponse::kUnionInfoFieldNumber;
const int CMessageGetUnionInfoResponse::kCorpsInfoFieldNumber;
const int CMessageGetUnionInfoResponse::kBattleInfoFieldNumber;
#endif  // !_MSC_VER

CMessageGetUnionInfoResponse::CMessageGetUnionInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetUnionInfoResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
  unioninfo_ = const_cast< ::PBUnionBasicInfo*>(&::PBUnionBasicInfo::default_instance());
  battleinfo_ = const_cast< ::PBCorpsBattleList*>(&::PBCorpsBattleList::default_instance());
}

CMessageGetUnionInfoResponse::CMessageGetUnionInfoResponse(const CMessageGetUnionInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetUnionInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  errcode_ = 0u;
  unioninfo_ = NULL;
  battleinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetUnionInfoResponse::~CMessageGetUnionInfoResponse() {
  SharedDtor();
}

void CMessageGetUnionInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
    delete unioninfo_;
    delete battleinfo_;
  }
}

const ::google::protobuf::Descriptor* CMessageGetUnionInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetUnionInfoResponse_descriptor_;
}

const CMessageGetUnionInfoResponse& CMessageGetUnionInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetUnionInfoResponse* CMessageGetUnionInfoResponse::default_instance_ = NULL;

CMessageGetUnionInfoResponse* CMessageGetUnionInfoResponse::New() const {
  return new CMessageGetUnionInfoResponse;
}

void CMessageGetUnionInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    errcode_ = 0u;
    if (_has_bit(2)) {
      if (unioninfo_ != NULL) unioninfo_->::PBUnionBasicInfo::Clear();
    }
    if (_has_bit(4)) {
      if (battleinfo_ != NULL) battleinfo_->::PBCorpsBattleList::Clear();
    }
  }
  corpsinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetUnionInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_UnionInfo;
        break;
      }
      
      // optional .PBUnionBasicInfo UnionInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_UnionInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_unioninfo()));
        if (input->ExpectTag(34)) goto parse_CorpsInfo;
        break;
      }
      
      // repeated .PBCorpsBasicInfo CorpsInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_corpsinfo()));
        if (input->ExpectTag(34)) goto parse_CorpsInfo;
        if (input->ExpectTag(42)) goto parse_BattleInfo;
        break;
      }
      
      // optional .PBCorpsBattleList BattleInfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_BattleInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_battleinfo()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetUnionInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetUnionInfoResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  // optional .PBUnionBasicInfo UnionInfo = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->unioninfo(), output);
  }
  
  // repeated .PBCorpsBasicInfo CorpsInfo = 4;
  for (int i = 0; i < this->corpsinfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->corpsinfo(i), output);
  }
  
  // optional .PBCorpsBattleList BattleInfo = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(5, this->battleinfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetUnionInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  // optional .PBUnionBasicInfo UnionInfo = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->unioninfo(), target);
  }
  
  // repeated .PBCorpsBasicInfo CorpsInfo = 4;
  for (int i = 0; i < this->corpsinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(4, this->corpsinfo(i), target);
  }
  
  // optional .PBCorpsBattleList BattleInfo = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(5, this->battleinfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetUnionInfoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional .PBUnionBasicInfo UnionInfo = 3;
    if (has_unioninfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->unioninfo());
    }
    
    // optional .PBCorpsBattleList BattleInfo = 5;
    if (has_battleinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->battleinfo());
    }
    
  }
  // repeated .PBCorpsBasicInfo CorpsInfo = 4;
  total_size += 1 * this->corpsinfo_size();
  for (int i = 0; i < this->corpsinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->corpsinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetUnionInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetUnionInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetUnionInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetUnionInfoResponse::MergeFrom(const CMessageGetUnionInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  corpsinfo_.MergeFrom(from.corpsinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(2)) {
      mutable_unioninfo()->::PBUnionBasicInfo::MergeFrom(from.unioninfo());
    }
    if (from._has_bit(4)) {
      mutable_battleinfo()->::PBCorpsBattleList::MergeFrom(from.battleinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetUnionInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetUnionInfoResponse::CopyFrom(const CMessageGetUnionInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetUnionInfoResponse::Swap(CMessageGetUnionInfoResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(errcode_, other->errcode_);
    std::swap(unioninfo_, other->unioninfo_);
    corpsinfo_.Swap(&other->corpsinfo_);
    std::swap(battleinfo_, other->battleinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetUnionInfoResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetUnionInfoResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetUnionInfoResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetUnionInfoResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageDismissUnionRequest::kCorpHeadFieldNumber;
const int CMessageDismissUnionRequest::kNPCEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageDismissUnionRequest::CMessageDismissUnionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageDismissUnionRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageDismissUnionRequest::CMessageDismissUnionRequest(const CMessageDismissUnionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageDismissUnionRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  npcentityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageDismissUnionRequest::~CMessageDismissUnionRequest() {
  SharedDtor();
}

void CMessageDismissUnionRequest::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageDismissUnionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageDismissUnionRequest_descriptor_;
}

const CMessageDismissUnionRequest& CMessageDismissUnionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageDismissUnionRequest* CMessageDismissUnionRequest::default_instance_ = NULL;

CMessageDismissUnionRequest* CMessageDismissUnionRequest::New() const {
  return new CMessageDismissUnionRequest;
}

void CMessageDismissUnionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    npcentityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageDismissUnionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_NPCEntityID;
        break;
      }
      
      // optional uint32 NPCEntityID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NPCEntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcentityid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageDismissUnionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageDismissUnionRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 NPCEntityID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->npcentityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageDismissUnionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 NPCEntityID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->npcentityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageDismissUnionRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 NPCEntityID = 2;
    if (has_npcentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcentityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageDismissUnionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageDismissUnionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageDismissUnionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageDismissUnionRequest::MergeFrom(const CMessageDismissUnionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_npcentityid(from.npcentityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageDismissUnionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDismissUnionRequest::CopyFrom(const CMessageDismissUnionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDismissUnionRequest::Swap(CMessageDismissUnionRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(npcentityid_, other->npcentityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageDismissUnionRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageDismissUnionRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageDismissUnionRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageDismissUnionRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageDismissUnionResponse::kCorpHeadFieldNumber;
const int CMessageDismissUnionResponse::kErrcodeFieldNumber;
#endif  // !_MSC_VER

CMessageDismissUnionResponse::CMessageDismissUnionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageDismissUnionResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageDismissUnionResponse::CMessageDismissUnionResponse(const CMessageDismissUnionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageDismissUnionResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageDismissUnionResponse::~CMessageDismissUnionResponse() {
  SharedDtor();
}

void CMessageDismissUnionResponse::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageDismissUnionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageDismissUnionResponse_descriptor_;
}

const CMessageDismissUnionResponse& CMessageDismissUnionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageDismissUnionResponse* CMessageDismissUnionResponse::default_instance_ = NULL;

CMessageDismissUnionResponse* CMessageDismissUnionResponse::New() const {
  return new CMessageDismissUnionResponse;
}

void CMessageDismissUnionResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageDismissUnionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageDismissUnionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageDismissUnionResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageDismissUnionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageDismissUnionResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageDismissUnionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageDismissUnionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageDismissUnionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageDismissUnionResponse::MergeFrom(const CMessageDismissUnionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageDismissUnionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDismissUnionResponse::CopyFrom(const CMessageDismissUnionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDismissUnionResponse::Swap(CMessageDismissUnionResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageDismissUnionResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageDismissUnionResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageDismissUnionResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageDismissUnionResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageDismissUnionNotify::kCorpHeadFieldNumber;
#endif  // !_MSC_VER

CMessageDismissUnionNotify::CMessageDismissUnionNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageDismissUnionNotify::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageDismissUnionNotify::CMessageDismissUnionNotify(const CMessageDismissUnionNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageDismissUnionNotify::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageDismissUnionNotify::~CMessageDismissUnionNotify() {
  SharedDtor();
}

void CMessageDismissUnionNotify::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageDismissUnionNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageDismissUnionNotify_descriptor_;
}

const CMessageDismissUnionNotify& CMessageDismissUnionNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageDismissUnionNotify* CMessageDismissUnionNotify::default_instance_ = NULL;

CMessageDismissUnionNotify* CMessageDismissUnionNotify::New() const {
  return new CMessageDismissUnionNotify;
}

void CMessageDismissUnionNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageDismissUnionNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageDismissUnionNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageDismissUnionNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageDismissUnionNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageDismissUnionNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageDismissUnionNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageDismissUnionNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageDismissUnionNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageDismissUnionNotify::MergeFrom(const CMessageDismissUnionNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageDismissUnionNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDismissUnionNotify::CopyFrom(const CMessageDismissUnionNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDismissUnionNotify::Swap(CMessageDismissUnionNotify* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageDismissUnionNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageDismissUnionNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageDismissUnionNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageDismissUnionNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageUnionApplyListRequest::kCorpHeadFieldNumber;
#endif  // !_MSC_VER

CMessageUnionApplyListRequest::CMessageUnionApplyListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUnionApplyListRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageUnionApplyListRequest::CMessageUnionApplyListRequest(const CMessageUnionApplyListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUnionApplyListRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUnionApplyListRequest::~CMessageUnionApplyListRequest() {
  SharedDtor();
}

void CMessageUnionApplyListRequest::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageUnionApplyListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUnionApplyListRequest_descriptor_;
}

const CMessageUnionApplyListRequest& CMessageUnionApplyListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageUnionApplyListRequest* CMessageUnionApplyListRequest::default_instance_ = NULL;

CMessageUnionApplyListRequest* CMessageUnionApplyListRequest::New() const {
  return new CMessageUnionApplyListRequest;
}

void CMessageUnionApplyListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUnionApplyListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUnionApplyListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUnionApplyListRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUnionApplyListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUnionApplyListRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUnionApplyListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUnionApplyListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUnionApplyListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUnionApplyListRequest::MergeFrom(const CMessageUnionApplyListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUnionApplyListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUnionApplyListRequest::CopyFrom(const CMessageUnionApplyListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUnionApplyListRequest::Swap(CMessageUnionApplyListRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUnionApplyListRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUnionApplyListRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUnionApplyListRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUnionApplyListRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageUnionApplyListResponse::kCorpHeadFieldNumber;
const int CMessageUnionApplyListResponse::kErrcodeFieldNumber;
const int CMessageUnionApplyListResponse::kCorpsInfoFieldNumber;
#endif  // !_MSC_VER

CMessageUnionApplyListResponse::CMessageUnionApplyListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUnionApplyListResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageUnionApplyListResponse::CMessageUnionApplyListResponse(const CMessageUnionApplyListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUnionApplyListResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUnionApplyListResponse::~CMessageUnionApplyListResponse() {
  SharedDtor();
}

void CMessageUnionApplyListResponse::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageUnionApplyListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUnionApplyListResponse_descriptor_;
}

const CMessageUnionApplyListResponse& CMessageUnionApplyListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageUnionApplyListResponse* CMessageUnionApplyListResponse::default_instance_ = NULL;

CMessageUnionApplyListResponse* CMessageUnionApplyListResponse::New() const {
  return new CMessageUnionApplyListResponse;
}

void CMessageUnionApplyListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    errcode_ = 0u;
  }
  corpsinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUnionApplyListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_CorpsInfo;
        break;
      }
      
      // repeated .PBCorpsBasicInfo CorpsInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_corpsinfo()));
        if (input->ExpectTag(26)) goto parse_CorpsInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUnionApplyListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUnionApplyListResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  // repeated .PBCorpsBasicInfo CorpsInfo = 3;
  for (int i = 0; i < this->corpsinfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->corpsinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUnionApplyListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  // repeated .PBCorpsBasicInfo CorpsInfo = 3;
  for (int i = 0; i < this->corpsinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->corpsinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUnionApplyListResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
  }
  // repeated .PBCorpsBasicInfo CorpsInfo = 3;
  total_size += 1 * this->corpsinfo_size();
  for (int i = 0; i < this->corpsinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->corpsinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUnionApplyListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUnionApplyListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUnionApplyListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUnionApplyListResponse::MergeFrom(const CMessageUnionApplyListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  corpsinfo_.MergeFrom(from.corpsinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUnionApplyListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUnionApplyListResponse::CopyFrom(const CMessageUnionApplyListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUnionApplyListResponse::Swap(CMessageUnionApplyListResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(errcode_, other->errcode_);
    corpsinfo_.Swap(&other->corpsinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUnionApplyListResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUnionApplyListResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUnionApplyListResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUnionApplyListResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageAllUnionListRequest::kCorpHeadFieldNumber;
#endif  // !_MSC_VER

CMessageAllUnionListRequest::CMessageAllUnionListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageAllUnionListRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageAllUnionListRequest::CMessageAllUnionListRequest(const CMessageAllUnionListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageAllUnionListRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageAllUnionListRequest::~CMessageAllUnionListRequest() {
  SharedDtor();
}

void CMessageAllUnionListRequest::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageAllUnionListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageAllUnionListRequest_descriptor_;
}

const CMessageAllUnionListRequest& CMessageAllUnionListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageAllUnionListRequest* CMessageAllUnionListRequest::default_instance_ = NULL;

CMessageAllUnionListRequest* CMessageAllUnionListRequest::New() const {
  return new CMessageAllUnionListRequest;
}

void CMessageAllUnionListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageAllUnionListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageAllUnionListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageAllUnionListRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageAllUnionListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageAllUnionListRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageAllUnionListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageAllUnionListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageAllUnionListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageAllUnionListRequest::MergeFrom(const CMessageAllUnionListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageAllUnionListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAllUnionListRequest::CopyFrom(const CMessageAllUnionListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAllUnionListRequest::Swap(CMessageAllUnionListRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageAllUnionListRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageAllUnionListRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageAllUnionListRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageAllUnionListRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageAllUnionListResponse::kCorpHeadFieldNumber;
const int CMessageAllUnionListResponse::kErrcodeFieldNumber;
const int CMessageAllUnionListResponse::kUnionInfoFieldNumber;
#endif  // !_MSC_VER

CMessageAllUnionListResponse::CMessageAllUnionListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageAllUnionListResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageAllUnionListResponse::CMessageAllUnionListResponse(const CMessageAllUnionListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageAllUnionListResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageAllUnionListResponse::~CMessageAllUnionListResponse() {
  SharedDtor();
}

void CMessageAllUnionListResponse::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageAllUnionListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageAllUnionListResponse_descriptor_;
}

const CMessageAllUnionListResponse& CMessageAllUnionListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageAllUnionListResponse* CMessageAllUnionListResponse::default_instance_ = NULL;

CMessageAllUnionListResponse* CMessageAllUnionListResponse::New() const {
  return new CMessageAllUnionListResponse;
}

void CMessageAllUnionListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    errcode_ = 0u;
  }
  unioninfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageAllUnionListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_UnionInfo;
        break;
      }
      
      // repeated .PBUnionBasicInfo UnionInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_UnionInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_unioninfo()));
        if (input->ExpectTag(26)) goto parse_UnionInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageAllUnionListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageAllUnionListResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  // repeated .PBUnionBasicInfo UnionInfo = 3;
  for (int i = 0; i < this->unioninfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->unioninfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageAllUnionListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  // repeated .PBUnionBasicInfo UnionInfo = 3;
  for (int i = 0; i < this->unioninfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->unioninfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageAllUnionListResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
  }
  // repeated .PBUnionBasicInfo UnionInfo = 3;
  total_size += 1 * this->unioninfo_size();
  for (int i = 0; i < this->unioninfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->unioninfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageAllUnionListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageAllUnionListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageAllUnionListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageAllUnionListResponse::MergeFrom(const CMessageAllUnionListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  unioninfo_.MergeFrom(from.unioninfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageAllUnionListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAllUnionListResponse::CopyFrom(const CMessageAllUnionListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAllUnionListResponse::Swap(CMessageAllUnionListResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(errcode_, other->errcode_);
    unioninfo_.Swap(&other->unioninfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageAllUnionListResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageAllUnionListResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageAllUnionListResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageAllUnionListResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCorpsGetOtherMemberRequest::kCorpHeadFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsGetOtherMemberRequest::CMessageCorpsGetOtherMemberRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsGetOtherMemberRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsGetOtherMemberRequest::CMessageCorpsGetOtherMemberRequest(const CMessageCorpsGetOtherMemberRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsGetOtherMemberRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsGetOtherMemberRequest::~CMessageCorpsGetOtherMemberRequest() {
  SharedDtor();
}

void CMessageCorpsGetOtherMemberRequest::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsGetOtherMemberRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsGetOtherMemberRequest_descriptor_;
}

const CMessageCorpsGetOtherMemberRequest& CMessageCorpsGetOtherMemberRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsGetOtherMemberRequest* CMessageCorpsGetOtherMemberRequest::default_instance_ = NULL;

CMessageCorpsGetOtherMemberRequest* CMessageCorpsGetOtherMemberRequest::New() const {
  return new CMessageCorpsGetOtherMemberRequest;
}

void CMessageCorpsGetOtherMemberRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsGetOtherMemberRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsGetOtherMemberRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsGetOtherMemberRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsGetOtherMemberRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsGetOtherMemberRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsGetOtherMemberRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsGetOtherMemberRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsGetOtherMemberRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsGetOtherMemberRequest::MergeFrom(const CMessageCorpsGetOtherMemberRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsGetOtherMemberRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsGetOtherMemberRequest::CopyFrom(const CMessageCorpsGetOtherMemberRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsGetOtherMemberRequest::Swap(CMessageCorpsGetOtherMemberRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsGetOtherMemberRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsGetOtherMemberRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsGetOtherMemberRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsGetOtherMemberRequest_reflection_;
}

// ===================================================================

const ::std::string PBBattleMember::_default_name_;
const ::std::string PBBattleMember::_default_corpsname_;
#ifndef _MSC_VER
const int PBBattleMember::kCharIDFieldNumber;
const int PBBattleMember::kNameFieldNumber;
const int PBBattleMember::kLevelFieldNumber;
const int PBBattleMember::kMetierFieldNumber;
const int PBBattleMember::kCorpsNameFieldNumber;
const int PBBattleMember::kIsJoinUnionFieldNumber;
#endif  // !_MSC_VER

PBBattleMember::PBBattleMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBBattleMember::InitAsDefaultInstance() {}

PBBattleMember::PBBattleMember(const PBBattleMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBBattleMember::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  level_ = 0u;
  metier_ = 0u;
  corpsname_ = const_cast< ::std::string*>(&_default_corpsname_);
  isjoinunion_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBBattleMember::~PBBattleMember() {
  SharedDtor();
}

void PBBattleMember::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (corpsname_ != &_default_corpsname_) {
    delete corpsname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBBattleMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBBattleMember_descriptor_;
}

const PBBattleMember& PBBattleMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

PBBattleMember* PBBattleMember::default_instance_ = NULL;

PBBattleMember* PBBattleMember::New() const {
  return new PBBattleMember;
}

void PBBattleMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    level_ = 0u;
    metier_ = 0u;
    if (_has_bit(4)) {
      if (corpsname_ != &_default_corpsname_) {
        corpsname_->clear();
      }
    }
    isjoinunion_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBBattleMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }
      
      // optional string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(24)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Metier;
        break;
      }
      
      // optional uint32 Metier = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Metier:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &metier_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_CorpsName;
        break;
      }
      
      // optional string CorpsName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_corpsname()));
        if (input->ExpectTag(48)) goto parse_IsJoinUnion;
        break;
      }
      
      // optional uint32 IsJoinUnion = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IsJoinUnion:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &isjoinunion_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBBattleMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBBattleMember::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional string Name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->name(), output);
  }
  
  // optional uint32 Level = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->level(), output);
  }
  
  // optional uint32 Metier = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->metier(), output);
  }
  
  // optional string CorpsName = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->corpsname(), output);
  }
  
  // optional uint32 IsJoinUnion = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->isjoinunion(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBBattleMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional string Name = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->name(), target);
  }
  
  // optional uint32 Level = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->level(), target);
  }
  
  // optional uint32 Metier = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->metier(), target);
  }
  
  // optional string CorpsName = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->corpsname(), target);
  }
  
  // optional uint32 IsJoinUnion = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->isjoinunion(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBBattleMember::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional uint32 Level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
    // optional uint32 Metier = 4;
    if (has_metier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->metier());
    }
    
    // optional string CorpsName = 5;
    if (has_corpsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->corpsname());
    }
    
    // optional uint32 IsJoinUnion = 6;
    if (has_isjoinunion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->isjoinunion());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBBattleMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBBattleMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBBattleMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBBattleMember::MergeFrom(const PBBattleMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      set_level(from.level());
    }
    if (from._has_bit(3)) {
      set_metier(from.metier());
    }
    if (from._has_bit(4)) {
      set_corpsname(from.corpsname());
    }
    if (from._has_bit(5)) {
      set_isjoinunion(from.isjoinunion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBBattleMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBattleMember::CopyFrom(const PBBattleMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBattleMember::Swap(PBBattleMember* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(metier_, other->metier_);
    std::swap(corpsname_, other->corpsname_);
    std::swap(isjoinunion_, other->isjoinunion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBBattleMember::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBBattleMember::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBBattleMember::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBBattleMember_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCorpsGetOtherMemberResponse::kCorpHeadFieldNumber;
const int CMessageCorpsGetOtherMemberResponse::kMemberListFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsGetOtherMemberResponse::CMessageCorpsGetOtherMemberResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsGetOtherMemberResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsGetOtherMemberResponse::CMessageCorpsGetOtherMemberResponse(const CMessageCorpsGetOtherMemberResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsGetOtherMemberResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsGetOtherMemberResponse::~CMessageCorpsGetOtherMemberResponse() {
  SharedDtor();
}

void CMessageCorpsGetOtherMemberResponse::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsGetOtherMemberResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsGetOtherMemberResponse_descriptor_;
}

const CMessageCorpsGetOtherMemberResponse& CMessageCorpsGetOtherMemberResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsGetOtherMemberResponse* CMessageCorpsGetOtherMemberResponse::default_instance_ = NULL;

CMessageCorpsGetOtherMemberResponse* CMessageCorpsGetOtherMemberResponse::New() const {
  return new CMessageCorpsGetOtherMemberResponse;
}

void CMessageCorpsGetOtherMemberResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
  }
  memberlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsGetOtherMemberResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(18)) goto parse_MemberList;
        break;
      }
      
      // repeated .PBBattleMember MemberList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MemberList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_memberlist()));
        if (input->ExpectTag(18)) goto parse_MemberList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsGetOtherMemberResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsGetOtherMemberResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // repeated .PBBattleMember MemberList = 2;
  for (int i = 0; i < this->memberlist_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->memberlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsGetOtherMemberResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // repeated .PBBattleMember MemberList = 2;
  for (int i = 0; i < this->memberlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->memberlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsGetOtherMemberResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
  }
  // repeated .PBBattleMember MemberList = 2;
  total_size += 1 * this->memberlist_size();
  for (int i = 0; i < this->memberlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->memberlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsGetOtherMemberResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsGetOtherMemberResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsGetOtherMemberResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsGetOtherMemberResponse::MergeFrom(const CMessageCorpsGetOtherMemberResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  memberlist_.MergeFrom(from.memberlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsGetOtherMemberResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsGetOtherMemberResponse::CopyFrom(const CMessageCorpsGetOtherMemberResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsGetOtherMemberResponse::Swap(CMessageCorpsGetOtherMemberResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    memberlist_.Swap(&other->memberlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsGetOtherMemberResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsGetOtherMemberResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsGetOtherMemberResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsGetOtherMemberResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageUnionJoinBattleListRequest::kCorpHeadFieldNumber;
#endif  // !_MSC_VER

CMessageUnionJoinBattleListRequest::CMessageUnionJoinBattleListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUnionJoinBattleListRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageUnionJoinBattleListRequest::CMessageUnionJoinBattleListRequest(const CMessageUnionJoinBattleListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUnionJoinBattleListRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUnionJoinBattleListRequest::~CMessageUnionJoinBattleListRequest() {
  SharedDtor();
}

void CMessageUnionJoinBattleListRequest::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageUnionJoinBattleListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUnionJoinBattleListRequest_descriptor_;
}

const CMessageUnionJoinBattleListRequest& CMessageUnionJoinBattleListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageUnionJoinBattleListRequest* CMessageUnionJoinBattleListRequest::default_instance_ = NULL;

CMessageUnionJoinBattleListRequest* CMessageUnionJoinBattleListRequest::New() const {
  return new CMessageUnionJoinBattleListRequest;
}

void CMessageUnionJoinBattleListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUnionJoinBattleListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUnionJoinBattleListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUnionJoinBattleListRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUnionJoinBattleListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUnionJoinBattleListRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUnionJoinBattleListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUnionJoinBattleListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUnionJoinBattleListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUnionJoinBattleListRequest::MergeFrom(const CMessageUnionJoinBattleListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUnionJoinBattleListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUnionJoinBattleListRequest::CopyFrom(const CMessageUnionJoinBattleListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUnionJoinBattleListRequest::Swap(CMessageUnionJoinBattleListRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUnionJoinBattleListRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUnionJoinBattleListRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUnionJoinBattleListRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUnionJoinBattleListRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageUnionJoinBattleListResponse::kCorpHeadFieldNumber;
const int CMessageUnionJoinBattleListResponse::kRtnCodeFieldNumber;
const int CMessageUnionJoinBattleListResponse::kMemberListFieldNumber;
#endif  // !_MSC_VER

CMessageUnionJoinBattleListResponse::CMessageUnionJoinBattleListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUnionJoinBattleListResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageUnionJoinBattleListResponse::CMessageUnionJoinBattleListResponse(const CMessageUnionJoinBattleListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUnionJoinBattleListResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  rtncode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUnionJoinBattleListResponse::~CMessageUnionJoinBattleListResponse() {
  SharedDtor();
}

void CMessageUnionJoinBattleListResponse::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageUnionJoinBattleListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUnionJoinBattleListResponse_descriptor_;
}

const CMessageUnionJoinBattleListResponse& CMessageUnionJoinBattleListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageUnionJoinBattleListResponse* CMessageUnionJoinBattleListResponse::default_instance_ = NULL;

CMessageUnionJoinBattleListResponse* CMessageUnionJoinBattleListResponse::New() const {
  return new CMessageUnionJoinBattleListResponse;
}

void CMessageUnionJoinBattleListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    rtncode_ = 0u;
  }
  memberlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUnionJoinBattleListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_RtnCode;
        break;
      }
      
      // optional uint32 RtnCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RtnCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rtncode_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_MemberList;
        break;
      }
      
      // repeated .PBBattleMember MemberList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MemberList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_memberlist()));
        if (input->ExpectTag(26)) goto parse_MemberList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUnionJoinBattleListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUnionJoinBattleListResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 RtnCode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->rtncode(), output);
  }
  
  // repeated .PBBattleMember MemberList = 3;
  for (int i = 0; i < this->memberlist_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->memberlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUnionJoinBattleListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 RtnCode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->rtncode(), target);
  }
  
  // repeated .PBBattleMember MemberList = 3;
  for (int i = 0; i < this->memberlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->memberlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUnionJoinBattleListResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 RtnCode = 2;
    if (has_rtncode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rtncode());
    }
    
  }
  // repeated .PBBattleMember MemberList = 3;
  total_size += 1 * this->memberlist_size();
  for (int i = 0; i < this->memberlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->memberlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUnionJoinBattleListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUnionJoinBattleListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUnionJoinBattleListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUnionJoinBattleListResponse::MergeFrom(const CMessageUnionJoinBattleListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  memberlist_.MergeFrom(from.memberlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_rtncode(from.rtncode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUnionJoinBattleListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUnionJoinBattleListResponse::CopyFrom(const CMessageUnionJoinBattleListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUnionJoinBattleListResponse::Swap(CMessageUnionJoinBattleListResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(rtncode_, other->rtncode_);
    memberlist_.Swap(&other->memberlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUnionJoinBattleListResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUnionJoinBattleListResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUnionJoinBattleListResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUnionJoinBattleListResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCorpsGetAllMapRequest::kCorpHeadFieldNumber;
const int CMessageCorpsGetAllMapRequest::kServerIDFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsGetAllMapRequest::CMessageCorpsGetAllMapRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsGetAllMapRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsGetAllMapRequest::CMessageCorpsGetAllMapRequest(const CMessageCorpsGetAllMapRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsGetAllMapRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  serverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsGetAllMapRequest::~CMessageCorpsGetAllMapRequest() {
  SharedDtor();
}

void CMessageCorpsGetAllMapRequest::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsGetAllMapRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsGetAllMapRequest_descriptor_;
}

const CMessageCorpsGetAllMapRequest& CMessageCorpsGetAllMapRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsGetAllMapRequest* CMessageCorpsGetAllMapRequest::default_instance_ = NULL;

CMessageCorpsGetAllMapRequest* CMessageCorpsGetAllMapRequest::New() const {
  return new CMessageCorpsGetAllMapRequest;
}

void CMessageCorpsGetAllMapRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    serverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsGetAllMapRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_ServerID;
        break;
      }
      
      // optional uint32 ServerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ServerID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &serverid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsGetAllMapRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsGetAllMapRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 ServerID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->serverid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsGetAllMapRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 ServerID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->serverid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsGetAllMapRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 ServerID = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->serverid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsGetAllMapRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsGetAllMapRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsGetAllMapRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsGetAllMapRequest::MergeFrom(const CMessageCorpsGetAllMapRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsGetAllMapRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsGetAllMapRequest::CopyFrom(const CMessageCorpsGetAllMapRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsGetAllMapRequest::Swap(CMessageCorpsGetAllMapRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsGetAllMapRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsGetAllMapRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsGetAllMapRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsGetAllMapRequest_reflection_;
}

// ===================================================================

const ::std::string PBMapOwner::_default_corpsname_;
const ::std::string PBMapOwner::_default_rootername_;
const ::std::string PBMapOwner::_default_unionname_;
#ifndef _MSC_VER
const int PBMapOwner::kMapIDFieldNumber;
const int PBMapOwner::kCorpsIDFieldNumber;
const int PBMapOwner::kCorpsNameFieldNumber;
const int PBMapOwner::kColorFieldNumber;
const int PBMapOwner::kRooterNameFieldNumber;
const int PBMapOwner::kCorpsPowerFieldNumber;
const int PBMapOwner::kUnionNameFieldNumber;
const int PBMapOwner::kUnionPowerFieldNumber;
const int PBMapOwner::kPeopleNumFieldNumber;
#endif  // !_MSC_VER

PBMapOwner::PBMapOwner()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMapOwner::InitAsDefaultInstance() {}

PBMapOwner::PBMapOwner(const PBMapOwner& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMapOwner::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  corpsid_ = 0u;
  corpsname_ = const_cast< ::std::string*>(&_default_corpsname_);
  color_ = 0u;
  rootername_ = const_cast< ::std::string*>(&_default_rootername_);
  corpspower_ = 0u;
  unionname_ = const_cast< ::std::string*>(&_default_unionname_);
  unionpower_ = 0u;
  peoplenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMapOwner::~PBMapOwner() {
  SharedDtor();
}

void PBMapOwner::SharedDtor() {
  if (corpsname_ != &_default_corpsname_) {
    delete corpsname_;
  }
  if (rootername_ != &_default_rootername_) {
    delete rootername_;
  }
  if (unionname_ != &_default_unionname_) {
    delete unionname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBMapOwner::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMapOwner_descriptor_;
}

const PBMapOwner& PBMapOwner::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

PBMapOwner* PBMapOwner::default_instance_ = NULL;

PBMapOwner* PBMapOwner::New() const {
  return new PBMapOwner;
}

void PBMapOwner::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0u;
    corpsid_ = 0u;
    if (_has_bit(2)) {
      if (corpsname_ != &_default_corpsname_) {
        corpsname_->clear();
      }
    }
    color_ = 0u;
    if (_has_bit(4)) {
      if (rootername_ != &_default_rootername_) {
        rootername_->clear();
      }
    }
    corpspower_ = 0u;
    if (_has_bit(6)) {
      if (unionname_ != &_default_unionname_) {
        unionname_->clear();
      }
    }
    unionpower_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    peoplenum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMapOwner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 MapID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CorpsID;
        break;
      }
      
      // optional uint32 CorpsID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_CorpsName;
        break;
      }
      
      // optional string CorpsName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_corpsname()));
        if (input->ExpectTag(32)) goto parse_Color;
        break;
      }
      
      // optional uint32 Color = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Color:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &color_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_RooterName;
        break;
      }
      
      // optional string RooterName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RooterName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_rootername()));
        if (input->ExpectTag(48)) goto parse_CorpsPower;
        break;
      }
      
      // optional uint32 CorpsPower = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsPower:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpspower_));
        _set_bit(5);
        if (input->ExpectTag(58)) goto parse_UnionName;
        break;
      }
      
      // optional string UnionName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_UnionName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_unionname()));
        if (input->ExpectTag(64)) goto parse_UnionPower;
        break;
      }
      
      // optional uint32 UnionPower = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UnionPower:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &unionpower_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_PeopleNum;
        break;
      }
      
      // optional uint32 PeopleNum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PeopleNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &peoplenum_));
        _set_bit(8);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMapOwner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBMapOwner::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 MapID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->mapid(), output);
  }
  
  // optional uint32 CorpsID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->corpsid(), output);
  }
  
  // optional string CorpsName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->corpsname(), output);
  }
  
  // optional uint32 Color = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->color(), output);
  }
  
  // optional string RooterName = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->rootername(), output);
  }
  
  // optional uint32 CorpsPower = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->corpspower(), output);
  }
  
  // optional string UnionName = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteString(7, this->unionname(), output);
  }
  
  // optional uint32 UnionPower = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->unionpower(), output);
  }
  
  // optional uint32 PeopleNum = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->peoplenum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMapOwner::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 MapID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->mapid(), target);
  }
  
  // optional uint32 CorpsID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->corpsid(), target);
  }
  
  // optional string CorpsName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->corpsname(), target);
  }
  
  // optional uint32 Color = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->color(), target);
  }
  
  // optional string RooterName = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->rootername(), target);
  }
  
  // optional uint32 CorpsPower = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->corpspower(), target);
  }
  
  // optional string UnionName = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(7, this->unionname(), target);
  }
  
  // optional uint32 UnionPower = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->unionpower(), target);
  }
  
  // optional uint32 PeopleNum = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->peoplenum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMapOwner::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MapID = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 CorpsID = 2;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
    // optional string CorpsName = 3;
    if (has_corpsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->corpsname());
    }
    
    // optional uint32 Color = 4;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->color());
    }
    
    // optional string RooterName = 5;
    if (has_rootername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->rootername());
    }
    
    // optional uint32 CorpsPower = 6;
    if (has_corpspower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpspower());
    }
    
    // optional string UnionName = 7;
    if (has_unionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->unionname());
    }
    
    // optional uint32 UnionPower = 8;
    if (has_unionpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->unionpower());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 PeopleNum = 9;
    if (has_peoplenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->peoplenum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBMapOwner::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMapOwner* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMapOwner*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMapOwner::MergeFrom(const PBMapOwner& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(1)) {
      set_corpsid(from.corpsid());
    }
    if (from._has_bit(2)) {
      set_corpsname(from.corpsname());
    }
    if (from._has_bit(3)) {
      set_color(from.color());
    }
    if (from._has_bit(4)) {
      set_rootername(from.rootername());
    }
    if (from._has_bit(5)) {
      set_corpspower(from.corpspower());
    }
    if (from._has_bit(6)) {
      set_unionname(from.unionname());
    }
    if (from._has_bit(7)) {
      set_unionpower(from.unionpower());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_peoplenum(from.peoplenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMapOwner::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMapOwner::CopyFrom(const PBMapOwner& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMapOwner::Swap(PBMapOwner* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(corpsid_, other->corpsid_);
    std::swap(corpsname_, other->corpsname_);
    std::swap(color_, other->color_);
    std::swap(rootername_, other->rootername_);
    std::swap(corpspower_, other->corpspower_);
    std::swap(unionname_, other->unionname_);
    std::swap(unionpower_, other->unionpower_);
    std::swap(peoplenum_, other->peoplenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBMapOwner::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBMapOwner::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBMapOwner::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBMapOwner_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCorpsGetAllMapResponse::kCorpHeadFieldNumber;
const int CMessageCorpsGetAllMapResponse::kMapListFieldNumber;
const int CMessageCorpsGetAllMapResponse::kServerIDFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsGetAllMapResponse::CMessageCorpsGetAllMapResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsGetAllMapResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsGetAllMapResponse::CMessageCorpsGetAllMapResponse(const CMessageCorpsGetAllMapResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsGetAllMapResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  serverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsGetAllMapResponse::~CMessageCorpsGetAllMapResponse() {
  SharedDtor();
}

void CMessageCorpsGetAllMapResponse::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsGetAllMapResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsGetAllMapResponse_descriptor_;
}

const CMessageCorpsGetAllMapResponse& CMessageCorpsGetAllMapResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsGetAllMapResponse* CMessageCorpsGetAllMapResponse::default_instance_ = NULL;

CMessageCorpsGetAllMapResponse* CMessageCorpsGetAllMapResponse::New() const {
  return new CMessageCorpsGetAllMapResponse;
}

void CMessageCorpsGetAllMapResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    serverid_ = 0u;
  }
  maplist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsGetAllMapResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(18)) goto parse_MapList;
        break;
      }
      
      // repeated .PBMapOwner MapList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MapList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_maplist()));
        if (input->ExpectTag(18)) goto parse_MapList;
        if (input->ExpectTag(24)) goto parse_ServerID;
        break;
      }
      
      // optional uint32 ServerID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ServerID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &serverid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsGetAllMapResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsGetAllMapResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // repeated .PBMapOwner MapList = 2;
  for (int i = 0; i < this->maplist_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->maplist(i), output);
  }
  
  // optional uint32 ServerID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->serverid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsGetAllMapResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // repeated .PBMapOwner MapList = 2;
  for (int i = 0; i < this->maplist_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->maplist(i), target);
  }
  
  // optional uint32 ServerID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->serverid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsGetAllMapResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 ServerID = 3;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->serverid());
    }
    
  }
  // repeated .PBMapOwner MapList = 2;
  total_size += 1 * this->maplist_size();
  for (int i = 0; i < this->maplist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->maplist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsGetAllMapResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsGetAllMapResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsGetAllMapResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsGetAllMapResponse::MergeFrom(const CMessageCorpsGetAllMapResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  maplist_.MergeFrom(from.maplist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(2)) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsGetAllMapResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsGetAllMapResponse::CopyFrom(const CMessageCorpsGetAllMapResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsGetAllMapResponse::Swap(CMessageCorpsGetAllMapResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    maplist_.Swap(&other->maplist_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsGetAllMapResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsGetAllMapResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsGetAllMapResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsGetAllMapResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCorpsAppointPrinceRequest::kCorpHeadFieldNumber;
const int CMessageCorpsAppointPrinceRequest::kCorpsIDFieldNumber;
const int CMessageCorpsAppointPrinceRequest::kMapIDFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsAppointPrinceRequest::CMessageCorpsAppointPrinceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsAppointPrinceRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsAppointPrinceRequest::CMessageCorpsAppointPrinceRequest(const CMessageCorpsAppointPrinceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsAppointPrinceRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  corpsid_ = 0u;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsAppointPrinceRequest::~CMessageCorpsAppointPrinceRequest() {
  SharedDtor();
}

void CMessageCorpsAppointPrinceRequest::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsAppointPrinceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsAppointPrinceRequest_descriptor_;
}

const CMessageCorpsAppointPrinceRequest& CMessageCorpsAppointPrinceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsAppointPrinceRequest* CMessageCorpsAppointPrinceRequest::default_instance_ = NULL;

CMessageCorpsAppointPrinceRequest* CMessageCorpsAppointPrinceRequest::New() const {
  return new CMessageCorpsAppointPrinceRequest;
}

void CMessageCorpsAppointPrinceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    corpsid_ = 0u;
    mapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsAppointPrinceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_CorpsID;
        break;
      }
      
      // optional uint32 CorpsID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsAppointPrinceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsAppointPrinceRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 CorpsID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->corpsid(), output);
  }
  
  // optional uint32 MapID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->mapid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsAppointPrinceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 CorpsID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->corpsid(), target);
  }
  
  // optional uint32 MapID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->mapid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsAppointPrinceRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 CorpsID = 2;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
    // optional uint32 MapID = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsAppointPrinceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsAppointPrinceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsAppointPrinceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsAppointPrinceRequest::MergeFrom(const CMessageCorpsAppointPrinceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_corpsid(from.corpsid());
    }
    if (from._has_bit(2)) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsAppointPrinceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsAppointPrinceRequest::CopyFrom(const CMessageCorpsAppointPrinceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsAppointPrinceRequest::Swap(CMessageCorpsAppointPrinceRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(corpsid_, other->corpsid_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsAppointPrinceRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsAppointPrinceRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsAppointPrinceRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsAppointPrinceRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCorspAppointPrinceResponse::kCorpHeadFieldNumber;
const int CMessageCorspAppointPrinceResponse::kRtnCodeFieldNumber;
const int CMessageCorspAppointPrinceResponse::kCorpsIDFieldNumber;
const int CMessageCorspAppointPrinceResponse::kMapIDFieldNumber;
#endif  // !_MSC_VER

CMessageCorspAppointPrinceResponse::CMessageCorspAppointPrinceResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorspAppointPrinceResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorspAppointPrinceResponse::CMessageCorspAppointPrinceResponse(const CMessageCorspAppointPrinceResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorspAppointPrinceResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  rtncode_ = 0u;
  corpsid_ = 0u;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorspAppointPrinceResponse::~CMessageCorspAppointPrinceResponse() {
  SharedDtor();
}

void CMessageCorspAppointPrinceResponse::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorspAppointPrinceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorspAppointPrinceResponse_descriptor_;
}

const CMessageCorspAppointPrinceResponse& CMessageCorspAppointPrinceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorspAppointPrinceResponse* CMessageCorspAppointPrinceResponse::default_instance_ = NULL;

CMessageCorspAppointPrinceResponse* CMessageCorspAppointPrinceResponse::New() const {
  return new CMessageCorspAppointPrinceResponse;
}

void CMessageCorspAppointPrinceResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    rtncode_ = 0u;
    corpsid_ = 0u;
    mapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorspAppointPrinceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_RtnCode;
        break;
      }
      
      // optional uint32 RtnCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RtnCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rtncode_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_CorpsID;
        break;
      }
      
      // optional uint32 CorpsID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorspAppointPrinceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorspAppointPrinceResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 RtnCode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->rtncode(), output);
  }
  
  // optional uint32 CorpsID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->corpsid(), output);
  }
  
  // optional uint32 MapID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->mapid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorspAppointPrinceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 RtnCode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->rtncode(), target);
  }
  
  // optional uint32 CorpsID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->corpsid(), target);
  }
  
  // optional uint32 MapID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->mapid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorspAppointPrinceResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 RtnCode = 2;
    if (has_rtncode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rtncode());
    }
    
    // optional uint32 CorpsID = 3;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
    // optional uint32 MapID = 4;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorspAppointPrinceResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorspAppointPrinceResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorspAppointPrinceResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorspAppointPrinceResponse::MergeFrom(const CMessageCorspAppointPrinceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_rtncode(from.rtncode());
    }
    if (from._has_bit(2)) {
      set_corpsid(from.corpsid());
    }
    if (from._has_bit(3)) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorspAppointPrinceResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorspAppointPrinceResponse::CopyFrom(const CMessageCorspAppointPrinceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorspAppointPrinceResponse::Swap(CMessageCorspAppointPrinceResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(rtncode_, other->rtncode_);
    std::swap(corpsid_, other->corpsid_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorspAppointPrinceResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorspAppointPrinceResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorspAppointPrinceResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorspAppointPrinceResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCorpsAppointPrinceNotice::kCorpHeadFieldNumber;
const int CMessageCorpsAppointPrinceNotice::kCorpsIDFieldNumber;
const int CMessageCorpsAppointPrinceNotice::kMapIDFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsAppointPrinceNotice::CMessageCorpsAppointPrinceNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsAppointPrinceNotice::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsAppointPrinceNotice::CMessageCorpsAppointPrinceNotice(const CMessageCorpsAppointPrinceNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsAppointPrinceNotice::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  corpsid_ = 0u;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsAppointPrinceNotice::~CMessageCorpsAppointPrinceNotice() {
  SharedDtor();
}

void CMessageCorpsAppointPrinceNotice::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsAppointPrinceNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsAppointPrinceNotice_descriptor_;
}

const CMessageCorpsAppointPrinceNotice& CMessageCorpsAppointPrinceNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsAppointPrinceNotice* CMessageCorpsAppointPrinceNotice::default_instance_ = NULL;

CMessageCorpsAppointPrinceNotice* CMessageCorpsAppointPrinceNotice::New() const {
  return new CMessageCorpsAppointPrinceNotice;
}

void CMessageCorpsAppointPrinceNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    corpsid_ = 0u;
    mapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsAppointPrinceNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_CorpsID;
        break;
      }
      
      // optional uint32 CorpsID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsAppointPrinceNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsAppointPrinceNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 CorpsID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->corpsid(), output);
  }
  
  // optional uint32 MapID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->mapid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsAppointPrinceNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 CorpsID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->corpsid(), target);
  }
  
  // optional uint32 MapID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->mapid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsAppointPrinceNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 CorpsID = 2;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
    // optional uint32 MapID = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsAppointPrinceNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsAppointPrinceNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsAppointPrinceNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsAppointPrinceNotice::MergeFrom(const CMessageCorpsAppointPrinceNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_corpsid(from.corpsid());
    }
    if (from._has_bit(2)) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsAppointPrinceNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsAppointPrinceNotice::CopyFrom(const CMessageCorpsAppointPrinceNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsAppointPrinceNotice::Swap(CMessageCorpsAppointPrinceNotice* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(corpsid_, other->corpsid_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsAppointPrinceNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsAppointPrinceNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsAppointPrinceNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsAppointPrinceNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCorpsMoveCapitalRequest::kCorpHeadFieldNumber;
const int CMessageCorpsMoveCapitalRequest::kMapIDFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsMoveCapitalRequest::CMessageCorpsMoveCapitalRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsMoveCapitalRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsMoveCapitalRequest::CMessageCorpsMoveCapitalRequest(const CMessageCorpsMoveCapitalRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsMoveCapitalRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsMoveCapitalRequest::~CMessageCorpsMoveCapitalRequest() {
  SharedDtor();
}

void CMessageCorpsMoveCapitalRequest::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsMoveCapitalRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsMoveCapitalRequest_descriptor_;
}

const CMessageCorpsMoveCapitalRequest& CMessageCorpsMoveCapitalRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsMoveCapitalRequest* CMessageCorpsMoveCapitalRequest::default_instance_ = NULL;

CMessageCorpsMoveCapitalRequest* CMessageCorpsMoveCapitalRequest::New() const {
  return new CMessageCorpsMoveCapitalRequest;
}

void CMessageCorpsMoveCapitalRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    mapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsMoveCapitalRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsMoveCapitalRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsMoveCapitalRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 MapID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->mapid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsMoveCapitalRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 MapID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->mapid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsMoveCapitalRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 MapID = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsMoveCapitalRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsMoveCapitalRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsMoveCapitalRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsMoveCapitalRequest::MergeFrom(const CMessageCorpsMoveCapitalRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsMoveCapitalRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsMoveCapitalRequest::CopyFrom(const CMessageCorpsMoveCapitalRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsMoveCapitalRequest::Swap(CMessageCorpsMoveCapitalRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsMoveCapitalRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsMoveCapitalRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsMoveCapitalRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsMoveCapitalRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMesssageCorpsMoveCapitalResponse::kCorpHeadFieldNumber;
const int CMesssageCorpsMoveCapitalResponse::kRtnCodeFieldNumber;
const int CMesssageCorpsMoveCapitalResponse::kMapIDFieldNumber;
#endif  // !_MSC_VER

CMesssageCorpsMoveCapitalResponse::CMesssageCorpsMoveCapitalResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMesssageCorpsMoveCapitalResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMesssageCorpsMoveCapitalResponse::CMesssageCorpsMoveCapitalResponse(const CMesssageCorpsMoveCapitalResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMesssageCorpsMoveCapitalResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  rtncode_ = 0u;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMesssageCorpsMoveCapitalResponse::~CMesssageCorpsMoveCapitalResponse() {
  SharedDtor();
}

void CMesssageCorpsMoveCapitalResponse::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMesssageCorpsMoveCapitalResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMesssageCorpsMoveCapitalResponse_descriptor_;
}

const CMesssageCorpsMoveCapitalResponse& CMesssageCorpsMoveCapitalResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMesssageCorpsMoveCapitalResponse* CMesssageCorpsMoveCapitalResponse::default_instance_ = NULL;

CMesssageCorpsMoveCapitalResponse* CMesssageCorpsMoveCapitalResponse::New() const {
  return new CMesssageCorpsMoveCapitalResponse;
}

void CMesssageCorpsMoveCapitalResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    rtncode_ = 0u;
    mapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMesssageCorpsMoveCapitalResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_RtnCode;
        break;
      }
      
      // optional uint32 RtnCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RtnCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rtncode_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMesssageCorpsMoveCapitalResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMesssageCorpsMoveCapitalResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 RtnCode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->rtncode(), output);
  }
  
  // optional uint32 MapID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->mapid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMesssageCorpsMoveCapitalResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 RtnCode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->rtncode(), target);
  }
  
  // optional uint32 MapID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->mapid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMesssageCorpsMoveCapitalResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 RtnCode = 2;
    if (has_rtncode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rtncode());
    }
    
    // optional uint32 MapID = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMesssageCorpsMoveCapitalResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMesssageCorpsMoveCapitalResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMesssageCorpsMoveCapitalResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMesssageCorpsMoveCapitalResponse::MergeFrom(const CMesssageCorpsMoveCapitalResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_rtncode(from.rtncode());
    }
    if (from._has_bit(2)) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMesssageCorpsMoveCapitalResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMesssageCorpsMoveCapitalResponse::CopyFrom(const CMesssageCorpsMoveCapitalResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMesssageCorpsMoveCapitalResponse::Swap(CMesssageCorpsMoveCapitalResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(rtncode_, other->rtncode_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMesssageCorpsMoveCapitalResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMesssageCorpsMoveCapitalResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMesssageCorpsMoveCapitalResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMesssageCorpsMoveCapitalResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCorpsSelectColorRequest::kCorpHeadFieldNumber;
const int CMessageCorpsSelectColorRequest::kColorFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsSelectColorRequest::CMessageCorpsSelectColorRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsSelectColorRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsSelectColorRequest::CMessageCorpsSelectColorRequest(const CMessageCorpsSelectColorRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsSelectColorRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  color_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsSelectColorRequest::~CMessageCorpsSelectColorRequest() {
  SharedDtor();
}

void CMessageCorpsSelectColorRequest::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsSelectColorRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsSelectColorRequest_descriptor_;
}

const CMessageCorpsSelectColorRequest& CMessageCorpsSelectColorRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsSelectColorRequest* CMessageCorpsSelectColorRequest::default_instance_ = NULL;

CMessageCorpsSelectColorRequest* CMessageCorpsSelectColorRequest::New() const {
  return new CMessageCorpsSelectColorRequest;
}

void CMessageCorpsSelectColorRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    color_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsSelectColorRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_Color;
        break;
      }
      
      // optional uint32 Color = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Color:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &color_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsSelectColorRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsSelectColorRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 Color = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->color(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsSelectColorRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 Color = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->color(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsSelectColorRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 Color = 2;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->color());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsSelectColorRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsSelectColorRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsSelectColorRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsSelectColorRequest::MergeFrom(const CMessageCorpsSelectColorRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_color(from.color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsSelectColorRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsSelectColorRequest::CopyFrom(const CMessageCorpsSelectColorRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsSelectColorRequest::Swap(CMessageCorpsSelectColorRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(color_, other->color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsSelectColorRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsSelectColorRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsSelectColorRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsSelectColorRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCorpsSelectColorResponse::kCorpHeadFieldNumber;
const int CMessageCorpsSelectColorResponse::kRtnCodeFieldNumber;
const int CMessageCorpsSelectColorResponse::kColorFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsSelectColorResponse::CMessageCorpsSelectColorResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsSelectColorResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsSelectColorResponse::CMessageCorpsSelectColorResponse(const CMessageCorpsSelectColorResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsSelectColorResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  rtncode_ = 0u;
  color_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsSelectColorResponse::~CMessageCorpsSelectColorResponse() {
  SharedDtor();
}

void CMessageCorpsSelectColorResponse::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsSelectColorResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsSelectColorResponse_descriptor_;
}

const CMessageCorpsSelectColorResponse& CMessageCorpsSelectColorResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsSelectColorResponse* CMessageCorpsSelectColorResponse::default_instance_ = NULL;

CMessageCorpsSelectColorResponse* CMessageCorpsSelectColorResponse::New() const {
  return new CMessageCorpsSelectColorResponse;
}

void CMessageCorpsSelectColorResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    rtncode_ = 0u;
    color_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsSelectColorResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_RtnCode;
        break;
      }
      
      // optional uint32 RtnCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RtnCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rtncode_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Color;
        break;
      }
      
      // optional uint32 Color = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Color:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &color_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsSelectColorResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsSelectColorResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 RtnCode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->rtncode(), output);
  }
  
  // optional uint32 Color = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->color(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsSelectColorResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 RtnCode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->rtncode(), target);
  }
  
  // optional uint32 Color = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->color(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsSelectColorResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 RtnCode = 2;
    if (has_rtncode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rtncode());
    }
    
    // optional uint32 Color = 3;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->color());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsSelectColorResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsSelectColorResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsSelectColorResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsSelectColorResponse::MergeFrom(const CMessageCorpsSelectColorResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_rtncode(from.rtncode());
    }
    if (from._has_bit(2)) {
      set_color(from.color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsSelectColorResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsSelectColorResponse::CopyFrom(const CMessageCorpsSelectColorResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsSelectColorResponse::Swap(CMessageCorpsSelectColorResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(rtncode_, other->rtncode_);
    std::swap(color_, other->color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsSelectColorResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsSelectColorResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsSelectColorResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsSelectColorResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CorpsGoodItem::kItemIDFieldNumber;
const int CorpsGoodItem::kItemNumFieldNumber;
const int CorpsGoodItem::kComposeIDFieldNumber;
#endif  // !_MSC_VER

CorpsGoodItem::CorpsGoodItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CorpsGoodItem::InitAsDefaultInstance() {}

CorpsGoodItem::CorpsGoodItem(const CorpsGoodItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CorpsGoodItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  itemnum_ = 0u;
  composeid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CorpsGoodItem::~CorpsGoodItem() {
  SharedDtor();
}

void CorpsGoodItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CorpsGoodItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CorpsGoodItem_descriptor_;
}

const CorpsGoodItem& CorpsGoodItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CorpsGoodItem* CorpsGoodItem::default_instance_ = NULL;

CorpsGoodItem* CorpsGoodItem::New() const {
  return new CorpsGoodItem;
}

void CorpsGoodItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    itemnum_ = 0u;
    composeid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CorpsGoodItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ItemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ItemNum;
        break;
      }
      
      // optional uint32 ItemNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemnum_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_ComposeID;
        break;
      }
      
      // optional uint32 ComposeID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ComposeID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &composeid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CorpsGoodItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CorpsGoodItem::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ItemID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->itemid(), output);
  }
  
  // optional uint32 ItemNum = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->itemnum(), output);
  }
  
  // optional uint32 ComposeID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->composeid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CorpsGoodItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ItemID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->itemid(), target);
  }
  
  // optional uint32 ItemNum = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->itemnum(), target);
  }
  
  // optional uint32 ComposeID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->composeid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CorpsGoodItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ItemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemid());
    }
    
    // optional uint32 ItemNum = 2;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemnum());
    }
    
    // optional uint32 ComposeID = 3;
    if (has_composeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->composeid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CorpsGoodItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CorpsGoodItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CorpsGoodItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CorpsGoodItem::MergeFrom(const CorpsGoodItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_itemid(from.itemid());
    }
    if (from._has_bit(1)) {
      set_itemnum(from.itemnum());
    }
    if (from._has_bit(2)) {
      set_composeid(from.composeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CorpsGoodItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CorpsGoodItem::CopyFrom(const CorpsGoodItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CorpsGoodItem::Swap(CorpsGoodItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(composeid_, other->composeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CorpsGoodItem::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CorpsGoodItem::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CorpsGoodItem::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CorpsGoodItem_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetCorpsGoodsListRequest::kCorpHeadFieldNumber;
const int CMessageGetCorpsGoodsListRequest::kCorpsIDFieldNumber;
const int CMessageGetCorpsGoodsListRequest::kEntityIDFieldNumber;
const int CMessageGetCorpsGoodsListRequest::kNpcTmpIDFieldNumber;
#endif  // !_MSC_VER

CMessageGetCorpsGoodsListRequest::CMessageGetCorpsGoodsListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetCorpsGoodsListRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageGetCorpsGoodsListRequest::CMessageGetCorpsGoodsListRequest(const CMessageGetCorpsGoodsListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetCorpsGoodsListRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  corpsid_ = 0u;
  entityid_ = 0u;
  npctmpid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetCorpsGoodsListRequest::~CMessageGetCorpsGoodsListRequest() {
  SharedDtor();
}

void CMessageGetCorpsGoodsListRequest::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageGetCorpsGoodsListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCorpsGoodsListRequest_descriptor_;
}

const CMessageGetCorpsGoodsListRequest& CMessageGetCorpsGoodsListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetCorpsGoodsListRequest* CMessageGetCorpsGoodsListRequest::default_instance_ = NULL;

CMessageGetCorpsGoodsListRequest* CMessageGetCorpsGoodsListRequest::New() const {
  return new CMessageGetCorpsGoodsListRequest;
}

void CMessageGetCorpsGoodsListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    corpsid_ = 0u;
    entityid_ = 0u;
    npctmpid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetCorpsGoodsListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_CorpsID;
        break;
      }
      
      // optional uint32 CorpsID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_EntityID;
        break;
      }
      
      // optional uint32 EntityID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_NpcTmpID;
        break;
      }
      
      // optional uint32 NpcTmpID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcTmpID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npctmpid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetCorpsGoodsListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetCorpsGoodsListRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 CorpsID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->corpsid(), output);
  }
  
  // optional uint32 EntityID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->entityid(), output);
  }
  
  // optional uint32 NpcTmpID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->npctmpid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetCorpsGoodsListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 CorpsID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->corpsid(), target);
  }
  
  // optional uint32 EntityID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->entityid(), target);
  }
  
  // optional uint32 NpcTmpID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->npctmpid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetCorpsGoodsListRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 CorpsID = 2;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
    // optional uint32 EntityID = 3;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
    // optional uint32 NpcTmpID = 4;
    if (has_npctmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npctmpid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetCorpsGoodsListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetCorpsGoodsListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetCorpsGoodsListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetCorpsGoodsListRequest::MergeFrom(const CMessageGetCorpsGoodsListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_corpsid(from.corpsid());
    }
    if (from._has_bit(2)) {
      set_entityid(from.entityid());
    }
    if (from._has_bit(3)) {
      set_npctmpid(from.npctmpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetCorpsGoodsListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCorpsGoodsListRequest::CopyFrom(const CMessageGetCorpsGoodsListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCorpsGoodsListRequest::Swap(CMessageGetCorpsGoodsListRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(corpsid_, other->corpsid_);
    std::swap(entityid_, other->entityid_);
    std::swap(npctmpid_, other->npctmpid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetCorpsGoodsListRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetCorpsGoodsListRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetCorpsGoodsListRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCorpsGoodsListRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetCorpsGoodsListResponse::kCorpHeadFieldNumber;
const int CMessageGetCorpsGoodsListResponse::kErrcodeFieldNumber;
const int CMessageGetCorpsGoodsListResponse::kGoodsListFieldNumber;
const int CMessageGetCorpsGoodsListResponse::kNpcTmpIDFieldNumber;
#endif  // !_MSC_VER

CMessageGetCorpsGoodsListResponse::CMessageGetCorpsGoodsListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetCorpsGoodsListResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageGetCorpsGoodsListResponse::CMessageGetCorpsGoodsListResponse(const CMessageGetCorpsGoodsListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetCorpsGoodsListResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  errcode_ = 0u;
  npctmpid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetCorpsGoodsListResponse::~CMessageGetCorpsGoodsListResponse() {
  SharedDtor();
}

void CMessageGetCorpsGoodsListResponse::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageGetCorpsGoodsListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCorpsGoodsListResponse_descriptor_;
}

const CMessageGetCorpsGoodsListResponse& CMessageGetCorpsGoodsListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetCorpsGoodsListResponse* CMessageGetCorpsGoodsListResponse::default_instance_ = NULL;

CMessageGetCorpsGoodsListResponse* CMessageGetCorpsGoodsListResponse::New() const {
  return new CMessageGetCorpsGoodsListResponse;
}

void CMessageGetCorpsGoodsListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    errcode_ = 0u;
    npctmpid_ = 0u;
  }
  goodslist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetCorpsGoodsListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_GoodsList;
        break;
      }
      
      // repeated .CorpsGoodItem GoodsList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_GoodsList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_goodslist()));
        if (input->ExpectTag(26)) goto parse_GoodsList;
        if (input->ExpectTag(32)) goto parse_NpcTmpID;
        break;
      }
      
      // optional uint32 NpcTmpID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcTmpID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npctmpid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetCorpsGoodsListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetCorpsGoodsListResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  // repeated .CorpsGoodItem GoodsList = 3;
  for (int i = 0; i < this->goodslist_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->goodslist(i), output);
  }
  
  // optional uint32 NpcTmpID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->npctmpid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetCorpsGoodsListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  // repeated .CorpsGoodItem GoodsList = 3;
  for (int i = 0; i < this->goodslist_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->goodslist(i), target);
  }
  
  // optional uint32 NpcTmpID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->npctmpid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetCorpsGoodsListResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional uint32 NpcTmpID = 4;
    if (has_npctmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npctmpid());
    }
    
  }
  // repeated .CorpsGoodItem GoodsList = 3;
  total_size += 1 * this->goodslist_size();
  for (int i = 0; i < this->goodslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->goodslist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetCorpsGoodsListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetCorpsGoodsListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetCorpsGoodsListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetCorpsGoodsListResponse::MergeFrom(const CMessageGetCorpsGoodsListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  goodslist_.MergeFrom(from.goodslist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(3)) {
      set_npctmpid(from.npctmpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetCorpsGoodsListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCorpsGoodsListResponse::CopyFrom(const CMessageGetCorpsGoodsListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCorpsGoodsListResponse::Swap(CMessageGetCorpsGoodsListResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(errcode_, other->errcode_);
    goodslist_.Swap(&other->goodslist_);
    std::swap(npctmpid_, other->npctmpid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetCorpsGoodsListResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetCorpsGoodsListResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetCorpsGoodsListResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCorpsGoodsListResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetCorpsExchangeGoodsListRequest::kCorpHeadFieldNumber;
const int CMessageGetCorpsExchangeGoodsListRequest::kCorpsIDFieldNumber;
const int CMessageGetCorpsExchangeGoodsListRequest::kEntityIDFieldNumber;
const int CMessageGetCorpsExchangeGoodsListRequest::kNpcTmpIDFieldNumber;
#endif  // !_MSC_VER

CMessageGetCorpsExchangeGoodsListRequest::CMessageGetCorpsExchangeGoodsListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetCorpsExchangeGoodsListRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageGetCorpsExchangeGoodsListRequest::CMessageGetCorpsExchangeGoodsListRequest(const CMessageGetCorpsExchangeGoodsListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetCorpsExchangeGoodsListRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  corpsid_ = 0u;
  entityid_ = 0u;
  npctmpid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetCorpsExchangeGoodsListRequest::~CMessageGetCorpsExchangeGoodsListRequest() {
  SharedDtor();
}

void CMessageGetCorpsExchangeGoodsListRequest::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageGetCorpsExchangeGoodsListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCorpsExchangeGoodsListRequest_descriptor_;
}

const CMessageGetCorpsExchangeGoodsListRequest& CMessageGetCorpsExchangeGoodsListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetCorpsExchangeGoodsListRequest* CMessageGetCorpsExchangeGoodsListRequest::default_instance_ = NULL;

CMessageGetCorpsExchangeGoodsListRequest* CMessageGetCorpsExchangeGoodsListRequest::New() const {
  return new CMessageGetCorpsExchangeGoodsListRequest;
}

void CMessageGetCorpsExchangeGoodsListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    corpsid_ = 0u;
    entityid_ = 0u;
    npctmpid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetCorpsExchangeGoodsListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_CorpsID;
        break;
      }
      
      // optional uint32 CorpsID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_EntityID;
        break;
      }
      
      // optional uint32 EntityID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_NpcTmpID;
        break;
      }
      
      // optional uint32 NpcTmpID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcTmpID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npctmpid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetCorpsExchangeGoodsListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetCorpsExchangeGoodsListRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 CorpsID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->corpsid(), output);
  }
  
  // optional uint32 EntityID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->entityid(), output);
  }
  
  // optional uint32 NpcTmpID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->npctmpid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetCorpsExchangeGoodsListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 CorpsID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->corpsid(), target);
  }
  
  // optional uint32 EntityID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->entityid(), target);
  }
  
  // optional uint32 NpcTmpID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->npctmpid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetCorpsExchangeGoodsListRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 CorpsID = 2;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
    // optional uint32 EntityID = 3;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
    // optional uint32 NpcTmpID = 4;
    if (has_npctmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npctmpid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetCorpsExchangeGoodsListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetCorpsExchangeGoodsListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetCorpsExchangeGoodsListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetCorpsExchangeGoodsListRequest::MergeFrom(const CMessageGetCorpsExchangeGoodsListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_corpsid(from.corpsid());
    }
    if (from._has_bit(2)) {
      set_entityid(from.entityid());
    }
    if (from._has_bit(3)) {
      set_npctmpid(from.npctmpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetCorpsExchangeGoodsListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCorpsExchangeGoodsListRequest::CopyFrom(const CMessageGetCorpsExchangeGoodsListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCorpsExchangeGoodsListRequest::Swap(CMessageGetCorpsExchangeGoodsListRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(corpsid_, other->corpsid_);
    std::swap(entityid_, other->entityid_);
    std::swap(npctmpid_, other->npctmpid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetCorpsExchangeGoodsListRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetCorpsExchangeGoodsListRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetCorpsExchangeGoodsListRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCorpsExchangeGoodsListRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetCorpsExchangeGoodsListResponse::kCorpHeadFieldNumber;
const int CMessageGetCorpsExchangeGoodsListResponse::kErrcodeFieldNumber;
const int CMessageGetCorpsExchangeGoodsListResponse::kGoodsListFieldNumber;
const int CMessageGetCorpsExchangeGoodsListResponse::kNpcTmpIDFieldNumber;
#endif  // !_MSC_VER

CMessageGetCorpsExchangeGoodsListResponse::CMessageGetCorpsExchangeGoodsListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetCorpsExchangeGoodsListResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageGetCorpsExchangeGoodsListResponse::CMessageGetCorpsExchangeGoodsListResponse(const CMessageGetCorpsExchangeGoodsListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetCorpsExchangeGoodsListResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  errcode_ = 0u;
  npctmpid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetCorpsExchangeGoodsListResponse::~CMessageGetCorpsExchangeGoodsListResponse() {
  SharedDtor();
}

void CMessageGetCorpsExchangeGoodsListResponse::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageGetCorpsExchangeGoodsListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCorpsExchangeGoodsListResponse_descriptor_;
}

const CMessageGetCorpsExchangeGoodsListResponse& CMessageGetCorpsExchangeGoodsListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetCorpsExchangeGoodsListResponse* CMessageGetCorpsExchangeGoodsListResponse::default_instance_ = NULL;

CMessageGetCorpsExchangeGoodsListResponse* CMessageGetCorpsExchangeGoodsListResponse::New() const {
  return new CMessageGetCorpsExchangeGoodsListResponse;
}

void CMessageGetCorpsExchangeGoodsListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    errcode_ = 0u;
    npctmpid_ = 0u;
  }
  goodslist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetCorpsExchangeGoodsListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_GoodsList;
        break;
      }
      
      // repeated .CorpsGoodItem GoodsList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_GoodsList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_goodslist()));
        if (input->ExpectTag(26)) goto parse_GoodsList;
        if (input->ExpectTag(32)) goto parse_NpcTmpID;
        break;
      }
      
      // optional uint32 NpcTmpID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcTmpID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npctmpid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetCorpsExchangeGoodsListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetCorpsExchangeGoodsListResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  // repeated .CorpsGoodItem GoodsList = 3;
  for (int i = 0; i < this->goodslist_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->goodslist(i), output);
  }
  
  // optional uint32 NpcTmpID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->npctmpid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetCorpsExchangeGoodsListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  // repeated .CorpsGoodItem GoodsList = 3;
  for (int i = 0; i < this->goodslist_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->goodslist(i), target);
  }
  
  // optional uint32 NpcTmpID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->npctmpid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetCorpsExchangeGoodsListResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional uint32 NpcTmpID = 4;
    if (has_npctmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npctmpid());
    }
    
  }
  // repeated .CorpsGoodItem GoodsList = 3;
  total_size += 1 * this->goodslist_size();
  for (int i = 0; i < this->goodslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->goodslist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetCorpsExchangeGoodsListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetCorpsExchangeGoodsListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetCorpsExchangeGoodsListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetCorpsExchangeGoodsListResponse::MergeFrom(const CMessageGetCorpsExchangeGoodsListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  goodslist_.MergeFrom(from.goodslist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(3)) {
      set_npctmpid(from.npctmpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetCorpsExchangeGoodsListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCorpsExchangeGoodsListResponse::CopyFrom(const CMessageGetCorpsExchangeGoodsListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCorpsExchangeGoodsListResponse::Swap(CMessageGetCorpsExchangeGoodsListResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(errcode_, other->errcode_);
    goodslist_.Swap(&other->goodslist_);
    std::swap(npctmpid_, other->npctmpid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetCorpsExchangeGoodsListResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetCorpsExchangeGoodsListResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetCorpsExchangeGoodsListResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCorpsExchangeGoodsListResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageChangeUnionNameRequest::_default_unionname_;
const ::std::string CMessageChangeUnionNameRequest::_default_unionnotice_;
#ifndef _MSC_VER
const int CMessageChangeUnionNameRequest::kCorpHeadFieldNumber;
const int CMessageChangeUnionNameRequest::kUnionNameFieldNumber;
const int CMessageChangeUnionNameRequest::kUnionNoticeFieldNumber;
const int CMessageChangeUnionNameRequest::kCorpsIDFieldNumber;
#endif  // !_MSC_VER

CMessageChangeUnionNameRequest::CMessageChangeUnionNameRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeUnionNameRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageChangeUnionNameRequest::CMessageChangeUnionNameRequest(const CMessageChangeUnionNameRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeUnionNameRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  unionname_ = const_cast< ::std::string*>(&_default_unionname_);
  unionnotice_ = const_cast< ::std::string*>(&_default_unionnotice_);
  corpsid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeUnionNameRequest::~CMessageChangeUnionNameRequest() {
  SharedDtor();
}

void CMessageChangeUnionNameRequest::SharedDtor() {
  if (unionname_ != &_default_unionname_) {
    delete unionname_;
  }
  if (unionnotice_ != &_default_unionnotice_) {
    delete unionnotice_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageChangeUnionNameRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeUnionNameRequest_descriptor_;
}

const CMessageChangeUnionNameRequest& CMessageChangeUnionNameRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeUnionNameRequest* CMessageChangeUnionNameRequest::default_instance_ = NULL;

CMessageChangeUnionNameRequest* CMessageChangeUnionNameRequest::New() const {
  return new CMessageChangeUnionNameRequest;
}

void CMessageChangeUnionNameRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    if (_has_bit(1)) {
      if (unionname_ != &_default_unionname_) {
        unionname_->clear();
      }
    }
    if (_has_bit(2)) {
      if (unionnotice_ != &_default_unionnotice_) {
        unionnotice_->clear();
      }
    }
    corpsid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeUnionNameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(18)) goto parse_UnionName;
        break;
      }
      
      // optional string UnionName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_UnionName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_unionname()));
        if (input->ExpectTag(26)) goto parse_UnionNotice;
        break;
      }
      
      // optional string UnionNotice = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_UnionNotice:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_unionnotice()));
        if (input->ExpectTag(32)) goto parse_CorpsID;
        break;
      }
      
      // optional uint32 CorpsID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeUnionNameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeUnionNameRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional string UnionName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->unionname(), output);
  }
  
  // optional string UnionNotice = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->unionnotice(), output);
  }
  
  // optional uint32 CorpsID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->corpsid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeUnionNameRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional string UnionName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->unionname(), target);
  }
  
  // optional string UnionNotice = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->unionnotice(), target);
  }
  
  // optional uint32 CorpsID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->corpsid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeUnionNameRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional string UnionName = 2;
    if (has_unionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->unionname());
    }
    
    // optional string UnionNotice = 3;
    if (has_unionnotice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->unionnotice());
    }
    
    // optional uint32 CorpsID = 4;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeUnionNameRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeUnionNameRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeUnionNameRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeUnionNameRequest::MergeFrom(const CMessageChangeUnionNameRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_unionname(from.unionname());
    }
    if (from._has_bit(2)) {
      set_unionnotice(from.unionnotice());
    }
    if (from._has_bit(3)) {
      set_corpsid(from.corpsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeUnionNameRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeUnionNameRequest::CopyFrom(const CMessageChangeUnionNameRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeUnionNameRequest::Swap(CMessageChangeUnionNameRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(unionname_, other->unionname_);
    std::swap(unionnotice_, other->unionnotice_);
    std::swap(corpsid_, other->corpsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeUnionNameRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeUnionNameRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeUnionNameRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeUnionNameRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageChangeUnionNameResponse::kCorpHeadFieldNumber;
const int CMessageChangeUnionNameResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMessageChangeUnionNameResponse::CMessageChangeUnionNameResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeUnionNameResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageChangeUnionNameResponse::CMessageChangeUnionNameResponse(const CMessageChangeUnionNameResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeUnionNameResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeUnionNameResponse::~CMessageChangeUnionNameResponse() {
  SharedDtor();
}

void CMessageChangeUnionNameResponse::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageChangeUnionNameResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeUnionNameResponse_descriptor_;
}

const CMessageChangeUnionNameResponse& CMessageChangeUnionNameResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeUnionNameResponse* CMessageChangeUnionNameResponse::default_instance_ = NULL;

CMessageChangeUnionNameResponse* CMessageChangeUnionNameResponse::New() const {
  return new CMessageChangeUnionNameResponse;
}

void CMessageChangeUnionNameResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeUnionNameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeUnionNameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeUnionNameResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeUnionNameResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeUnionNameResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeUnionNameResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeUnionNameResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeUnionNameResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeUnionNameResponse::MergeFrom(const CMessageChangeUnionNameResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeUnionNameResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeUnionNameResponse::CopyFrom(const CMessageChangeUnionNameResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeUnionNameResponse::Swap(CMessageChangeUnionNameResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeUnionNameResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeUnionNameResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeUnionNameResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeUnionNameResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageChangeUnionNameNotify::_default_unionname_;
const ::std::string CMessageChangeUnionNameNotify::_default_unionnotice_;
#ifndef _MSC_VER
const int CMessageChangeUnionNameNotify::kCorpHeadFieldNumber;
const int CMessageChangeUnionNameNotify::kUnionNameFieldNumber;
const int CMessageChangeUnionNameNotify::kUnionNoticeFieldNumber;
#endif  // !_MSC_VER

CMessageChangeUnionNameNotify::CMessageChangeUnionNameNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeUnionNameNotify::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageChangeUnionNameNotify::CMessageChangeUnionNameNotify(const CMessageChangeUnionNameNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeUnionNameNotify::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  unionname_ = const_cast< ::std::string*>(&_default_unionname_);
  unionnotice_ = const_cast< ::std::string*>(&_default_unionnotice_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeUnionNameNotify::~CMessageChangeUnionNameNotify() {
  SharedDtor();
}

void CMessageChangeUnionNameNotify::SharedDtor() {
  if (unionname_ != &_default_unionname_) {
    delete unionname_;
  }
  if (unionnotice_ != &_default_unionnotice_) {
    delete unionnotice_;
  }
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageChangeUnionNameNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeUnionNameNotify_descriptor_;
}

const CMessageChangeUnionNameNotify& CMessageChangeUnionNameNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeUnionNameNotify* CMessageChangeUnionNameNotify::default_instance_ = NULL;

CMessageChangeUnionNameNotify* CMessageChangeUnionNameNotify::New() const {
  return new CMessageChangeUnionNameNotify;
}

void CMessageChangeUnionNameNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    if (_has_bit(1)) {
      if (unionname_ != &_default_unionname_) {
        unionname_->clear();
      }
    }
    if (_has_bit(2)) {
      if (unionnotice_ != &_default_unionnotice_) {
        unionnotice_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeUnionNameNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(18)) goto parse_UnionName;
        break;
      }
      
      // optional string UnionName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_UnionName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_unionname()));
        if (input->ExpectTag(26)) goto parse_UnionNotice;
        break;
      }
      
      // optional string UnionNotice = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_UnionNotice:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_unionnotice()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeUnionNameNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeUnionNameNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional string UnionName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->unionname(), output);
  }
  
  // optional string UnionNotice = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->unionnotice(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeUnionNameNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional string UnionName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->unionname(), target);
  }
  
  // optional string UnionNotice = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->unionnotice(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeUnionNameNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional string UnionName = 2;
    if (has_unionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->unionname());
    }
    
    // optional string UnionNotice = 3;
    if (has_unionnotice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->unionnotice());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeUnionNameNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeUnionNameNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeUnionNameNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeUnionNameNotify::MergeFrom(const CMessageChangeUnionNameNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_unionname(from.unionname());
    }
    if (from._has_bit(2)) {
      set_unionnotice(from.unionnotice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeUnionNameNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeUnionNameNotify::CopyFrom(const CMessageChangeUnionNameNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeUnionNameNotify::Swap(CMessageChangeUnionNameNotify* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(unionname_, other->unionname_);
    std::swap(unionnotice_, other->unionnotice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeUnionNameNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeUnionNameNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeUnionNameNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeUnionNameNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageChangeCorpsGoodsListNotify::kGoodsListFieldNumber;
const int CMessageChangeCorpsGoodsListNotify::kNpcTmpIDFieldNumber;
#endif  // !_MSC_VER

CMessageChangeCorpsGoodsListNotify::CMessageChangeCorpsGoodsListNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeCorpsGoodsListNotify::InitAsDefaultInstance() {}

CMessageChangeCorpsGoodsListNotify::CMessageChangeCorpsGoodsListNotify(const CMessageChangeCorpsGoodsListNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeCorpsGoodsListNotify::SharedCtor() {
  _cached_size_ = 0;
  npctmpid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeCorpsGoodsListNotify::~CMessageChangeCorpsGoodsListNotify() {
  SharedDtor();
}

void CMessageChangeCorpsGoodsListNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageChangeCorpsGoodsListNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeCorpsGoodsListNotify_descriptor_;
}

const CMessageChangeCorpsGoodsListNotify& CMessageChangeCorpsGoodsListNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeCorpsGoodsListNotify* CMessageChangeCorpsGoodsListNotify::default_instance_ = NULL;

CMessageChangeCorpsGoodsListNotify* CMessageChangeCorpsGoodsListNotify::New() const {
  return new CMessageChangeCorpsGoodsListNotify;
}

void CMessageChangeCorpsGoodsListNotify::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    npctmpid_ = 0u;
  }
  goodslist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeCorpsGoodsListNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .CorpsGoodItem GoodsList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_GoodsList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_goodslist()));
        if (input->ExpectTag(10)) goto parse_GoodsList;
        if (input->ExpectTag(16)) goto parse_NpcTmpID;
        break;
      }
      
      // optional uint32 NpcTmpID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcTmpID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npctmpid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeCorpsGoodsListNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeCorpsGoodsListNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .CorpsGoodItem GoodsList = 1;
  for (int i = 0; i < this->goodslist_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->goodslist(i), output);
  }
  
  // optional uint32 NpcTmpID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->npctmpid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeCorpsGoodsListNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CorpsGoodItem GoodsList = 1;
  for (int i = 0; i < this->goodslist_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->goodslist(i), target);
  }
  
  // optional uint32 NpcTmpID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->npctmpid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeCorpsGoodsListNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 NpcTmpID = 2;
    if (has_npctmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npctmpid());
    }
    
  }
  // repeated .CorpsGoodItem GoodsList = 1;
  total_size += 1 * this->goodslist_size();
  for (int i = 0; i < this->goodslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->goodslist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeCorpsGoodsListNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeCorpsGoodsListNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeCorpsGoodsListNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeCorpsGoodsListNotify::MergeFrom(const CMessageChangeCorpsGoodsListNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  goodslist_.MergeFrom(from.goodslist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_npctmpid(from.npctmpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeCorpsGoodsListNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeCorpsGoodsListNotify::CopyFrom(const CMessageChangeCorpsGoodsListNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeCorpsGoodsListNotify::Swap(CMessageChangeCorpsGoodsListNotify* other) {
  if (other != this) {
    goodslist_.Swap(&other->goodslist_);
    std::swap(npctmpid_, other->npctmpid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeCorpsGoodsListNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeCorpsGoodsListNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeCorpsGoodsListNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeCorpsGoodsListNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageChangeCorpsExchangeGoodsListNotify::kGoodsListFieldNumber;
const int CMessageChangeCorpsExchangeGoodsListNotify::kNpcTmpIDFieldNumber;
#endif  // !_MSC_VER

CMessageChangeCorpsExchangeGoodsListNotify::CMessageChangeCorpsExchangeGoodsListNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeCorpsExchangeGoodsListNotify::InitAsDefaultInstance() {}

CMessageChangeCorpsExchangeGoodsListNotify::CMessageChangeCorpsExchangeGoodsListNotify(const CMessageChangeCorpsExchangeGoodsListNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeCorpsExchangeGoodsListNotify::SharedCtor() {
  _cached_size_ = 0;
  npctmpid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeCorpsExchangeGoodsListNotify::~CMessageChangeCorpsExchangeGoodsListNotify() {
  SharedDtor();
}

void CMessageChangeCorpsExchangeGoodsListNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageChangeCorpsExchangeGoodsListNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeCorpsExchangeGoodsListNotify_descriptor_;
}

const CMessageChangeCorpsExchangeGoodsListNotify& CMessageChangeCorpsExchangeGoodsListNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeCorpsExchangeGoodsListNotify* CMessageChangeCorpsExchangeGoodsListNotify::default_instance_ = NULL;

CMessageChangeCorpsExchangeGoodsListNotify* CMessageChangeCorpsExchangeGoodsListNotify::New() const {
  return new CMessageChangeCorpsExchangeGoodsListNotify;
}

void CMessageChangeCorpsExchangeGoodsListNotify::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    npctmpid_ = 0u;
  }
  goodslist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeCorpsExchangeGoodsListNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .CorpsGoodItem GoodsList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_GoodsList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_goodslist()));
        if (input->ExpectTag(10)) goto parse_GoodsList;
        if (input->ExpectTag(16)) goto parse_NpcTmpID;
        break;
      }
      
      // optional uint32 NpcTmpID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcTmpID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npctmpid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeCorpsExchangeGoodsListNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeCorpsExchangeGoodsListNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .CorpsGoodItem GoodsList = 1;
  for (int i = 0; i < this->goodslist_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->goodslist(i), output);
  }
  
  // optional uint32 NpcTmpID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->npctmpid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeCorpsExchangeGoodsListNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CorpsGoodItem GoodsList = 1;
  for (int i = 0; i < this->goodslist_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->goodslist(i), target);
  }
  
  // optional uint32 NpcTmpID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->npctmpid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeCorpsExchangeGoodsListNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 NpcTmpID = 2;
    if (has_npctmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npctmpid());
    }
    
  }
  // repeated .CorpsGoodItem GoodsList = 1;
  total_size += 1 * this->goodslist_size();
  for (int i = 0; i < this->goodslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->goodslist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeCorpsExchangeGoodsListNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeCorpsExchangeGoodsListNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeCorpsExchangeGoodsListNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeCorpsExchangeGoodsListNotify::MergeFrom(const CMessageChangeCorpsExchangeGoodsListNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  goodslist_.MergeFrom(from.goodslist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_npctmpid(from.npctmpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeCorpsExchangeGoodsListNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeCorpsExchangeGoodsListNotify::CopyFrom(const CMessageChangeCorpsExchangeGoodsListNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeCorpsExchangeGoodsListNotify::Swap(CMessageChangeCorpsExchangeGoodsListNotify* other) {
  if (other != this) {
    goodslist_.Swap(&other->goodslist_);
    std::swap(npctmpid_, other->npctmpid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeCorpsExchangeGoodsListNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeCorpsExchangeGoodsListNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeCorpsExchangeGoodsListNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeCorpsExchangeGoodsListNotify_reflection_;
}

// ===================================================================

const ::std::string CMessageUseCorpsLeagueItemNotify::_default_managername_;
#ifndef _MSC_VER
const int CMessageUseCorpsLeagueItemNotify::kGoodsListFieldNumber;
const int CMessageUseCorpsLeagueItemNotify::kManagerIDFieldNumber;
const int CMessageUseCorpsLeagueItemNotify::kManagerNameFieldNumber;
#endif  // !_MSC_VER

CMessageUseCorpsLeagueItemNotify::CMessageUseCorpsLeagueItemNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUseCorpsLeagueItemNotify::InitAsDefaultInstance() {}

CMessageUseCorpsLeagueItemNotify::CMessageUseCorpsLeagueItemNotify(const CMessageUseCorpsLeagueItemNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUseCorpsLeagueItemNotify::SharedCtor() {
  _cached_size_ = 0;
  managerid_ = 0u;
  managername_ = const_cast< ::std::string*>(&_default_managername_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUseCorpsLeagueItemNotify::~CMessageUseCorpsLeagueItemNotify() {
  SharedDtor();
}

void CMessageUseCorpsLeagueItemNotify::SharedDtor() {
  if (managername_ != &_default_managername_) {
    delete managername_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageUseCorpsLeagueItemNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUseCorpsLeagueItemNotify_descriptor_;
}

const CMessageUseCorpsLeagueItemNotify& CMessageUseCorpsLeagueItemNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageUseCorpsLeagueItemNotify* CMessageUseCorpsLeagueItemNotify::default_instance_ = NULL;

CMessageUseCorpsLeagueItemNotify* CMessageUseCorpsLeagueItemNotify::New() const {
  return new CMessageUseCorpsLeagueItemNotify;
}

void CMessageUseCorpsLeagueItemNotify::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    managerid_ = 0u;
    if (_has_bit(2)) {
      if (managername_ != &_default_managername_) {
        managername_->clear();
      }
    }
  }
  goodslist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUseCorpsLeagueItemNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .CorpsGoodItem GoodsList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_GoodsList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_goodslist()));
        if (input->ExpectTag(10)) goto parse_GoodsList;
        if (input->ExpectTag(16)) goto parse_ManagerID;
        break;
      }
      
      // optional uint32 ManagerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ManagerID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &managerid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_ManagerName;
        break;
      }
      
      // optional string ManagerName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ManagerName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_managername()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUseCorpsLeagueItemNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUseCorpsLeagueItemNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .CorpsGoodItem GoodsList = 1;
  for (int i = 0; i < this->goodslist_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->goodslist(i), output);
  }
  
  // optional uint32 ManagerID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->managerid(), output);
  }
  
  // optional string ManagerName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->managername(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUseCorpsLeagueItemNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CorpsGoodItem GoodsList = 1;
  for (int i = 0; i < this->goodslist_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->goodslist(i), target);
  }
  
  // optional uint32 ManagerID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->managerid(), target);
  }
  
  // optional string ManagerName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->managername(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUseCorpsLeagueItemNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 ManagerID = 2;
    if (has_managerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->managerid());
    }
    
    // optional string ManagerName = 3;
    if (has_managername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->managername());
    }
    
  }
  // repeated .CorpsGoodItem GoodsList = 1;
  total_size += 1 * this->goodslist_size();
  for (int i = 0; i < this->goodslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->goodslist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUseCorpsLeagueItemNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUseCorpsLeagueItemNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUseCorpsLeagueItemNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUseCorpsLeagueItemNotify::MergeFrom(const CMessageUseCorpsLeagueItemNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  goodslist_.MergeFrom(from.goodslist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_managerid(from.managerid());
    }
    if (from._has_bit(2)) {
      set_managername(from.managername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUseCorpsLeagueItemNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUseCorpsLeagueItemNotify::CopyFrom(const CMessageUseCorpsLeagueItemNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUseCorpsLeagueItemNotify::Swap(CMessageUseCorpsLeagueItemNotify* other) {
  if (other != this) {
    goodslist_.Swap(&other->goodslist_);
    std::swap(managerid_, other->managerid_);
    std::swap(managername_, other->managername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUseCorpsLeagueItemNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUseCorpsLeagueItemNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUseCorpsLeagueItemNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUseCorpsLeagueItemNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCorpsLoginBattleRequest::kCorpHeadFieldNumber;
const int CMessageCorpsLoginBattleRequest::kNpcIDFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsLoginBattleRequest::CMessageCorpsLoginBattleRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsLoginBattleRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsLoginBattleRequest::CMessageCorpsLoginBattleRequest(const CMessageCorpsLoginBattleRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsLoginBattleRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  npcid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsLoginBattleRequest::~CMessageCorpsLoginBattleRequest() {
  SharedDtor();
}

void CMessageCorpsLoginBattleRequest::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsLoginBattleRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsLoginBattleRequest_descriptor_;
}

const CMessageCorpsLoginBattleRequest& CMessageCorpsLoginBattleRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsLoginBattleRequest* CMessageCorpsLoginBattleRequest::default_instance_ = NULL;

CMessageCorpsLoginBattleRequest* CMessageCorpsLoginBattleRequest::New() const {
  return new CMessageCorpsLoginBattleRequest;
}

void CMessageCorpsLoginBattleRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    npcid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsLoginBattleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_NpcID;
        break;
      }
      
      // optional uint32 NpcID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsLoginBattleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsLoginBattleRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 NpcID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->npcid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsLoginBattleRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 NpcID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->npcid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsLoginBattleRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 NpcID = 2;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsLoginBattleRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsLoginBattleRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsLoginBattleRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsLoginBattleRequest::MergeFrom(const CMessageCorpsLoginBattleRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_npcid(from.npcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsLoginBattleRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsLoginBattleRequest::CopyFrom(const CMessageCorpsLoginBattleRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsLoginBattleRequest::Swap(CMessageCorpsLoginBattleRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(npcid_, other->npcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsLoginBattleRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsLoginBattleRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsLoginBattleRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsLoginBattleRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCorpsLoginBattleResponse::kCorpHeadFieldNumber;
const int CMessageCorpsLoginBattleResponse::kRtnCodeFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsLoginBattleResponse::CMessageCorpsLoginBattleResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsLoginBattleResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageCorpsLoginBattleResponse::CMessageCorpsLoginBattleResponse(const CMessageCorpsLoginBattleResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsLoginBattleResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  rtncode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsLoginBattleResponse::~CMessageCorpsLoginBattleResponse() {
  SharedDtor();
}

void CMessageCorpsLoginBattleResponse::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsLoginBattleResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsLoginBattleResponse_descriptor_;
}

const CMessageCorpsLoginBattleResponse& CMessageCorpsLoginBattleResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsLoginBattleResponse* CMessageCorpsLoginBattleResponse::default_instance_ = NULL;

CMessageCorpsLoginBattleResponse* CMessageCorpsLoginBattleResponse::New() const {
  return new CMessageCorpsLoginBattleResponse;
}

void CMessageCorpsLoginBattleResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    rtncode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsLoginBattleResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_RtnCode;
        break;
      }
      
      // optional uint32 RtnCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RtnCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rtncode_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsLoginBattleResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsLoginBattleResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 RtnCode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->rtncode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsLoginBattleResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 RtnCode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->rtncode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsLoginBattleResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 RtnCode = 2;
    if (has_rtncode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rtncode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsLoginBattleResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsLoginBattleResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsLoginBattleResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsLoginBattleResponse::MergeFrom(const CMessageCorpsLoginBattleResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_rtncode(from.rtncode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsLoginBattleResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsLoginBattleResponse::CopyFrom(const CMessageCorpsLoginBattleResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsLoginBattleResponse::Swap(CMessageCorpsLoginBattleResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(rtncode_, other->rtncode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsLoginBattleResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsLoginBattleResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsLoginBattleResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsLoginBattleResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageSummonCorpsBossRequest::kCorpHeadFieldNumber;
const int CMessageSummonCorpsBossRequest::kBossIDFieldNumber;
#endif  // !_MSC_VER

CMessageSummonCorpsBossRequest::CMessageSummonCorpsBossRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageSummonCorpsBossRequest::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageSummonCorpsBossRequest::CMessageSummonCorpsBossRequest(const CMessageSummonCorpsBossRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageSummonCorpsBossRequest::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  bossid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageSummonCorpsBossRequest::~CMessageSummonCorpsBossRequest() {
  SharedDtor();
}

void CMessageSummonCorpsBossRequest::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageSummonCorpsBossRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageSummonCorpsBossRequest_descriptor_;
}

const CMessageSummonCorpsBossRequest& CMessageSummonCorpsBossRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageSummonCorpsBossRequest* CMessageSummonCorpsBossRequest::default_instance_ = NULL;

CMessageSummonCorpsBossRequest* CMessageSummonCorpsBossRequest::New() const {
  return new CMessageSummonCorpsBossRequest;
}

void CMessageSummonCorpsBossRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    bossid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageSummonCorpsBossRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_BossID;
        break;
      }
      
      // optional uint32 BossID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BossID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &bossid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageSummonCorpsBossRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageSummonCorpsBossRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 BossID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->bossid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageSummonCorpsBossRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 BossID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->bossid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageSummonCorpsBossRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 BossID = 2;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->bossid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageSummonCorpsBossRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageSummonCorpsBossRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageSummonCorpsBossRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageSummonCorpsBossRequest::MergeFrom(const CMessageSummonCorpsBossRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_bossid(from.bossid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageSummonCorpsBossRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSummonCorpsBossRequest::CopyFrom(const CMessageSummonCorpsBossRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSummonCorpsBossRequest::Swap(CMessageSummonCorpsBossRequest* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(bossid_, other->bossid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageSummonCorpsBossRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageSummonCorpsBossRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageSummonCorpsBossRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageSummonCorpsBossRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageSummonCorpsBossResponse::kCorpHeadFieldNumber;
const int CMessageSummonCorpsBossResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

CMessageSummonCorpsBossResponse::CMessageSummonCorpsBossResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageSummonCorpsBossResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageSummonCorpsBossResponse::CMessageSummonCorpsBossResponse(const CMessageSummonCorpsBossResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageSummonCorpsBossResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  errorcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageSummonCorpsBossResponse::~CMessageSummonCorpsBossResponse() {
  SharedDtor();
}

void CMessageSummonCorpsBossResponse::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageSummonCorpsBossResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageSummonCorpsBossResponse_descriptor_;
}

const CMessageSummonCorpsBossResponse& CMessageSummonCorpsBossResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageSummonCorpsBossResponse* CMessageSummonCorpsBossResponse::default_instance_ = NULL;

CMessageSummonCorpsBossResponse* CMessageSummonCorpsBossResponse::New() const {
  return new CMessageSummonCorpsBossResponse;
}

void CMessageSummonCorpsBossResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    errorcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageSummonCorpsBossResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_ErrorCode;
        break;
      }
      
      // optional uint32 ErrorCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ErrorCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errorcode_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageSummonCorpsBossResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageSummonCorpsBossResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 ErrorCode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errorcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageSummonCorpsBossResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 ErrorCode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errorcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageSummonCorpsBossResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 ErrorCode = 2;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errorcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageSummonCorpsBossResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageSummonCorpsBossResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageSummonCorpsBossResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageSummonCorpsBossResponse::MergeFrom(const CMessageSummonCorpsBossResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageSummonCorpsBossResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSummonCorpsBossResponse::CopyFrom(const CMessageSummonCorpsBossResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSummonCorpsBossResponse::Swap(CMessageSummonCorpsBossResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageSummonCorpsBossResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageSummonCorpsBossResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageSummonCorpsBossResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageSummonCorpsBossResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageCorpsBossRepetionOpenNotify::_default_rolename_;
#ifndef _MSC_VER
const int CMessageCorpsBossRepetionOpenNotify::kBossIDFieldNumber;
const int CMessageCorpsBossRepetionOpenNotify::kRoleIDFieldNumber;
const int CMessageCorpsBossRepetionOpenNotify::kRoleNameFieldNumber;
const int CMessageCorpsBossRepetionOpenNotify::kBossCDCoolFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsBossRepetionOpenNotify::CMessageCorpsBossRepetionOpenNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsBossRepetionOpenNotify::InitAsDefaultInstance() {}

CMessageCorpsBossRepetionOpenNotify::CMessageCorpsBossRepetionOpenNotify(const CMessageCorpsBossRepetionOpenNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsBossRepetionOpenNotify::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = 0u;
  roleid_ = 0u;
  rolename_ = const_cast< ::std::string*>(&_default_rolename_);
  bosscdcool_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsBossRepetionOpenNotify::~CMessageCorpsBossRepetionOpenNotify() {
  SharedDtor();
}

void CMessageCorpsBossRepetionOpenNotify::SharedDtor() {
  if (rolename_ != &_default_rolename_) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsBossRepetionOpenNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsBossRepetionOpenNotify_descriptor_;
}

const CMessageCorpsBossRepetionOpenNotify& CMessageCorpsBossRepetionOpenNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsBossRepetionOpenNotify* CMessageCorpsBossRepetionOpenNotify::default_instance_ = NULL;

CMessageCorpsBossRepetionOpenNotify* CMessageCorpsBossRepetionOpenNotify::New() const {
  return new CMessageCorpsBossRepetionOpenNotify;
}

void CMessageCorpsBossRepetionOpenNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bossid_ = 0u;
    roleid_ = 0u;
    if (_has_bit(2)) {
      if (rolename_ != &_default_rolename_) {
        rolename_->clear();
      }
    }
    bosscdcool_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsBossRepetionOpenNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 BossID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &bossid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_RoleName;
        break;
      }
      
      // optional string RoleName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RoleName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_rolename()));
        if (input->ExpectTag(32)) goto parse_BossCDCool;
        break;
      }
      
      // optional uint32 BossCDCool = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BossCDCool:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &bosscdcool_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsBossRepetionOpenNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsBossRepetionOpenNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 BossID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->bossid(), output);
  }
  
  // optional uint32 RoleID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->roleid(), output);
  }
  
  // optional string RoleName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->rolename(), output);
  }
  
  // optional uint32 BossCDCool = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->bosscdcool(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsBossRepetionOpenNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 BossID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->bossid(), target);
  }
  
  // optional uint32 RoleID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->roleid(), target);
  }
  
  // optional string RoleName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->rolename(), target);
  }
  
  // optional uint32 BossCDCool = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->bosscdcool(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsBossRepetionOpenNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BossID = 1;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->bossid());
    }
    
    // optional uint32 RoleID = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional string RoleName = 3;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->rolename());
    }
    
    // optional uint32 BossCDCool = 4;
    if (has_bosscdcool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->bosscdcool());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsBossRepetionOpenNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsBossRepetionOpenNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsBossRepetionOpenNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsBossRepetionOpenNotify::MergeFrom(const CMessageCorpsBossRepetionOpenNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_bossid(from.bossid());
    }
    if (from._has_bit(1)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(2)) {
      set_rolename(from.rolename());
    }
    if (from._has_bit(3)) {
      set_bosscdcool(from.bosscdcool());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsBossRepetionOpenNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsBossRepetionOpenNotify::CopyFrom(const CMessageCorpsBossRepetionOpenNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsBossRepetionOpenNotify::Swap(CMessageCorpsBossRepetionOpenNotify* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    std::swap(roleid_, other->roleid_);
    std::swap(rolename_, other->rolename_);
    std::swap(bosscdcool_, other->bosscdcool_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsBossRepetionOpenNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsBossRepetionOpenNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsBossRepetionOpenNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsBossRepetionOpenNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageIntoCorpsBossRepetionResponse::kCorpHeadFieldNumber;
const int CMessageIntoCorpsBossRepetionResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

CMessageIntoCorpsBossRepetionResponse::CMessageIntoCorpsBossRepetionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageIntoCorpsBossRepetionResponse::InitAsDefaultInstance() {  corphead_ = const_cast< ::CorpsHead*>(&::CorpsHead::default_instance());
}

CMessageIntoCorpsBossRepetionResponse::CMessageIntoCorpsBossRepetionResponse(const CMessageIntoCorpsBossRepetionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageIntoCorpsBossRepetionResponse::SharedCtor() {
  _cached_size_ = 0;
  corphead_ = NULL;
  errorcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageIntoCorpsBossRepetionResponse::~CMessageIntoCorpsBossRepetionResponse() {
  SharedDtor();
}

void CMessageIntoCorpsBossRepetionResponse::SharedDtor() {
  if (this != default_instance_) {
    delete corphead_;
  }
}

const ::google::protobuf::Descriptor* CMessageIntoCorpsBossRepetionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageIntoCorpsBossRepetionResponse_descriptor_;
}

const CMessageIntoCorpsBossRepetionResponse& CMessageIntoCorpsBossRepetionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageIntoCorpsBossRepetionResponse* CMessageIntoCorpsBossRepetionResponse::default_instance_ = NULL;

CMessageIntoCorpsBossRepetionResponse* CMessageIntoCorpsBossRepetionResponse::New() const {
  return new CMessageIntoCorpsBossRepetionResponse;
}

void CMessageIntoCorpsBossRepetionResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (corphead_ != NULL) corphead_->::CorpsHead::Clear();
    }
    errorcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageIntoCorpsBossRepetionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CorpsHead CorpHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_corphead()));
        if (input->ExpectTag(16)) goto parse_ErrorCode;
        break;
      }
      
      // optional uint32 ErrorCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ErrorCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errorcode_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageIntoCorpsBossRepetionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageIntoCorpsBossRepetionResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corphead(), output);
  }
  
  // optional uint32 ErrorCode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errorcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageIntoCorpsBossRepetionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CorpsHead CorpHead = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corphead(), target);
  }
  
  // optional uint32 ErrorCode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errorcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageIntoCorpsBossRepetionResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CorpsHead CorpHead = 1;
    if (has_corphead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->corphead());
    }
    
    // optional uint32 ErrorCode = 2;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errorcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageIntoCorpsBossRepetionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageIntoCorpsBossRepetionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageIntoCorpsBossRepetionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageIntoCorpsBossRepetionResponse::MergeFrom(const CMessageIntoCorpsBossRepetionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_corphead()->::CorpsHead::MergeFrom(from.corphead());
    }
    if (from._has_bit(1)) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageIntoCorpsBossRepetionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageIntoCorpsBossRepetionResponse::CopyFrom(const CMessageIntoCorpsBossRepetionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageIntoCorpsBossRepetionResponse::Swap(CMessageIntoCorpsBossRepetionResponse* other) {
  if (other != this) {
    std::swap(corphead_, other->corphead_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageIntoCorpsBossRepetionResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageIntoCorpsBossRepetionResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageIntoCorpsBossRepetionResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageIntoCorpsBossRepetionResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMessageCorpsBossRepetionEndNotify::CMessageCorpsBossRepetionEndNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsBossRepetionEndNotify::InitAsDefaultInstance() {}

CMessageCorpsBossRepetionEndNotify::CMessageCorpsBossRepetionEndNotify(const CMessageCorpsBossRepetionEndNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsBossRepetionEndNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsBossRepetionEndNotify::~CMessageCorpsBossRepetionEndNotify() {
  SharedDtor();
}

void CMessageCorpsBossRepetionEndNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsBossRepetionEndNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsBossRepetionEndNotify_descriptor_;
}

const CMessageCorpsBossRepetionEndNotify& CMessageCorpsBossRepetionEndNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsBossRepetionEndNotify* CMessageCorpsBossRepetionEndNotify::default_instance_ = NULL;

CMessageCorpsBossRepetionEndNotify* CMessageCorpsBossRepetionEndNotify::New() const {
  return new CMessageCorpsBossRepetionEndNotify;
}

void CMessageCorpsBossRepetionEndNotify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsBossRepetionEndNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMessageCorpsBossRepetionEndNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsBossRepetionEndNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsBossRepetionEndNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsBossRepetionEndNotify::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsBossRepetionEndNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsBossRepetionEndNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsBossRepetionEndNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsBossRepetionEndNotify::MergeFrom(const CMessageCorpsBossRepetionEndNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsBossRepetionEndNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsBossRepetionEndNotify::CopyFrom(const CMessageCorpsBossRepetionEndNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsBossRepetionEndNotify::Swap(CMessageCorpsBossRepetionEndNotify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsBossRepetionEndNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsBossRepetionEndNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsBossRepetionEndNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsBossRepetionEndNotify_reflection_;
}
