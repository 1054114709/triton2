// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "repetionmessage_pb.hxx.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>
#ifdef LEAK_CHK_DEBUG_NEW
#include "debug_new.h"
#endif

namespace {

const ::google::protobuf::Descriptor* CMessageRepetionTeamIn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRepetionTeamIn_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRepetionErrCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRepetionErrCode_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRepetionNpcAdventNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRepetionNpcAdventNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRepetionEventNotic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRepetionEventNotic_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageS2CBattleJoinNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageS2CBattleJoinNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBattleWaitResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBattleWaitResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageC2SBattleJoin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageC2SBattleJoin_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageC2SBattleJoinRandomPlace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageC2SBattleJoinRandomPlace_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBattleTeamWaitRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBattleTeamWaitRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBattleSingleWaitRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBattleSingleWaitRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageC2SBattleWaitLeaveRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageC2SBattleWaitLeaveRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageS2CBattleWaitLeaveResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageS2CBattleWaitLeaveResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageC2SRepetionLeave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageC2SRepetionLeave_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRepetionIndexNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRepetionIndexNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRepetionUseItemIntoNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRepetionUseItemIntoNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRepetionUseItemIntoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRepetionUseItemIntoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRepetionFuncPlayerClick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRepetionFuncPlayerClick_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBattleTeamFixWaitRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBattleTeamFixWaitRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBattleSingleFixWaitRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBattleSingleFixWaitRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageHaveSignUpBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageHaveSignUpBattle_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBattleOnTimeOpenNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBattleOnTimeOpenNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageC2SJoinOnTimeOpenBattleRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageC2SJoinOnTimeOpenBattleRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageC2SGetRandomTeleChargeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageC2SGetRandomTeleChargeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageS2CGetRandomTeleChargeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageS2CGetRandomTeleChargeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageC2SRrandomTeleRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageC2SRrandomTeleRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageApplyGlobalWarRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageApplyGlobalWarRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageApplyGlobalWarResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageApplyGlobalWarResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageEnterGlobalWarRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageEnterGlobalWarRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageEnterGlobalWarResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageEnterGlobalWarResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCanEnterGlobalWarNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCanEnterGlobalWarNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePlayerLeaveGlobalWarRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePlayerLeaveGlobalWarRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePlayerLeaveGlobalWarResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePlayerLeaveGlobalWarResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageKickCampPlayerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageKickCampPlayerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageKickCampPlayerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageKickCampPlayerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageKickCampPlayerNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageKickCampPlayerNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageVoteToKickPlayerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageVoteToKickPlayerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageVoteToKickPlayerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageVoteToKickPlayerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMesssageKickResultNoitfy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMesssageKickResultNoitfy_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageIntoCorpsBossRepetionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageIntoCorpsBossRepetionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageEnterLastReptionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageEnterLastReptionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageEnterLastReptionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageEnterLastReptionResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RepetionMessageID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_repetionmessage_5fpb_2ehxx() {
  protobuf_AddDesc_repetionmessage_5fpb_2ehxx();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "repetionmessage_pb.hxx");
  GOOGLE_CHECK(file != NULL);
  CMessageRepetionTeamIn_descriptor_ = file->message_type(0);
  static const int CMessageRepetionTeamIn_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRepetionTeamIn, router_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRepetionTeamIn, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRepetionTeamIn, destcharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRepetionTeamIn, srccharid_),
  };
  CMessageRepetionTeamIn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRepetionTeamIn_descriptor_,
      CMessageRepetionTeamIn::default_instance_,
      CMessageRepetionTeamIn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRepetionTeamIn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRepetionTeamIn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRepetionTeamIn));
  CMessageRepetionErrCode_descriptor_ = file->message_type(1);
  static const int CMessageRepetionErrCode_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRepetionErrCode, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRepetionErrCode, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRepetionErrCode, parame1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRepetionErrCode, parame2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRepetionErrCode, charid_),
  };
  CMessageRepetionErrCode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRepetionErrCode_descriptor_,
      CMessageRepetionErrCode::default_instance_,
      CMessageRepetionErrCode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRepetionErrCode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRepetionErrCode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRepetionErrCode));
  CMessageRepetionNpcAdventNotice_descriptor_ = file->message_type(2);
  static const int CMessageRepetionNpcAdventNotice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRepetionNpcAdventNotice, templateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRepetionNpcAdventNotice, time_),
  };
  CMessageRepetionNpcAdventNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRepetionNpcAdventNotice_descriptor_,
      CMessageRepetionNpcAdventNotice::default_instance_,
      CMessageRepetionNpcAdventNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRepetionNpcAdventNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRepetionNpcAdventNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRepetionNpcAdventNotice));
  CMessageRepetionEventNotic_descriptor_ = file->message_type(3);
  static const int CMessageRepetionEventNotic_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRepetionEventNotic, eventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRepetionEventNotic, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRepetionEventNotic, parame1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRepetionEventNotic, parame2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRepetionEventNotic, parame3_),
  };
  CMessageRepetionEventNotic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRepetionEventNotic_descriptor_,
      CMessageRepetionEventNotic::default_instance_,
      CMessageRepetionEventNotic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRepetionEventNotic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRepetionEventNotic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRepetionEventNotic));
  CMessageS2CBattleJoinNotice_descriptor_ = file->message_type(4);
  static const int CMessageS2CBattleJoinNotice_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2CBattleJoinNotice, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2CBattleJoinNotice, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2CBattleJoinNotice, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2CBattleJoinNotice, key_),
  };
  CMessageS2CBattleJoinNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageS2CBattleJoinNotice_descriptor_,
      CMessageS2CBattleJoinNotice::default_instance_,
      CMessageS2CBattleJoinNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2CBattleJoinNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2CBattleJoinNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageS2CBattleJoinNotice));
  CMessageBattleWaitResponse_descriptor_ = file->message_type(5);
  static const int CMessageBattleWaitResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleWaitResponse, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleWaitResponse, mapid_),
  };
  CMessageBattleWaitResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBattleWaitResponse_descriptor_,
      CMessageBattleWaitResponse::default_instance_,
      CMessageBattleWaitResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleWaitResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleWaitResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBattleWaitResponse));
  CMessageC2SBattleJoin_descriptor_ = file->message_type(6);
  static const int CMessageC2SBattleJoin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageC2SBattleJoin, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageC2SBattleJoin, mapid_),
  };
  CMessageC2SBattleJoin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageC2SBattleJoin_descriptor_,
      CMessageC2SBattleJoin::default_instance_,
      CMessageC2SBattleJoin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageC2SBattleJoin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageC2SBattleJoin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageC2SBattleJoin));
  CMessageC2SBattleJoinRandomPlace_descriptor_ = file->message_type(7);
  static const int CMessageC2SBattleJoinRandomPlace_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageC2SBattleJoinRandomPlace, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageC2SBattleJoinRandomPlace, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageC2SBattleJoinRandomPlace, key_),
  };
  CMessageC2SBattleJoinRandomPlace_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageC2SBattleJoinRandomPlace_descriptor_,
      CMessageC2SBattleJoinRandomPlace::default_instance_,
      CMessageC2SBattleJoinRandomPlace_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageC2SBattleJoinRandomPlace, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageC2SBattleJoinRandomPlace, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageC2SBattleJoinRandomPlace));
  CMessageBattleTeamWaitRequest_descriptor_ = file->message_type(8);
  static const int CMessageBattleTeamWaitRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleTeamWaitRequest, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleTeamWaitRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleTeamWaitRequest, mapid_),
  };
  CMessageBattleTeamWaitRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBattleTeamWaitRequest_descriptor_,
      CMessageBattleTeamWaitRequest::default_instance_,
      CMessageBattleTeamWaitRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleTeamWaitRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleTeamWaitRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBattleTeamWaitRequest));
  CMessageBattleSingleWaitRequest_descriptor_ = file->message_type(9);
  static const int CMessageBattleSingleWaitRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleSingleWaitRequest, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleSingleWaitRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleSingleWaitRequest, mapid_),
  };
  CMessageBattleSingleWaitRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBattleSingleWaitRequest_descriptor_,
      CMessageBattleSingleWaitRequest::default_instance_,
      CMessageBattleSingleWaitRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleSingleWaitRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleSingleWaitRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBattleSingleWaitRequest));
  CMessageC2SBattleWaitLeaveRequest_descriptor_ = file->message_type(10);
  static const int CMessageC2SBattleWaitLeaveRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageC2SBattleWaitLeaveRequest, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageC2SBattleWaitLeaveRequest, mapid_),
  };
  CMessageC2SBattleWaitLeaveRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageC2SBattleWaitLeaveRequest_descriptor_,
      CMessageC2SBattleWaitLeaveRequest::default_instance_,
      CMessageC2SBattleWaitLeaveRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageC2SBattleWaitLeaveRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageC2SBattleWaitLeaveRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageC2SBattleWaitLeaveRequest));
  CMessageS2CBattleWaitLeaveResponse_descriptor_ = file->message_type(11);
  static const int CMessageS2CBattleWaitLeaveResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2CBattleWaitLeaveResponse, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2CBattleWaitLeaveResponse, mapid_),
  };
  CMessageS2CBattleWaitLeaveResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageS2CBattleWaitLeaveResponse_descriptor_,
      CMessageS2CBattleWaitLeaveResponse::default_instance_,
      CMessageS2CBattleWaitLeaveResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2CBattleWaitLeaveResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2CBattleWaitLeaveResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageS2CBattleWaitLeaveResponse));
  CMessageC2SRepetionLeave_descriptor_ = file->message_type(12);
  static const int CMessageC2SRepetionLeave_offsets_[1] = {
  };
  CMessageC2SRepetionLeave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageC2SRepetionLeave_descriptor_,
      CMessageC2SRepetionLeave::default_instance_,
      CMessageC2SRepetionLeave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageC2SRepetionLeave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageC2SRepetionLeave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageC2SRepetionLeave));
  CMessageRepetionIndexNotice_descriptor_ = file->message_type(13);
  static const int CMessageRepetionIndexNotice_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRepetionIndexNotice, repetionindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRepetionIndexNotice, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRepetionIndexNotice, roleid_),
  };
  CMessageRepetionIndexNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRepetionIndexNotice_descriptor_,
      CMessageRepetionIndexNotice::default_instance_,
      CMessageRepetionIndexNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRepetionIndexNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRepetionIndexNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRepetionIndexNotice));
  CMessageRepetionUseItemIntoNotice_descriptor_ = file->message_type(14);
  static const int CMessageRepetionUseItemIntoNotice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRepetionUseItemIntoNotice, repetionindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRepetionUseItemIntoNotice, itemid_),
  };
  CMessageRepetionUseItemIntoNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRepetionUseItemIntoNotice_descriptor_,
      CMessageRepetionUseItemIntoNotice::default_instance_,
      CMessageRepetionUseItemIntoNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRepetionUseItemIntoNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRepetionUseItemIntoNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRepetionUseItemIntoNotice));
  CMessageRepetionUseItemIntoResponse_descriptor_ = file->message_type(15);
  static const int CMessageRepetionUseItemIntoResponse_offsets_[1] = {
  };
  CMessageRepetionUseItemIntoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRepetionUseItemIntoResponse_descriptor_,
      CMessageRepetionUseItemIntoResponse::default_instance_,
      CMessageRepetionUseItemIntoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRepetionUseItemIntoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRepetionUseItemIntoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRepetionUseItemIntoResponse));
  CMessageRepetionFuncPlayerClick_descriptor_ = file->message_type(16);
  static const int CMessageRepetionFuncPlayerClick_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRepetionFuncPlayerClick, npcid_),
  };
  CMessageRepetionFuncPlayerClick_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRepetionFuncPlayerClick_descriptor_,
      CMessageRepetionFuncPlayerClick::default_instance_,
      CMessageRepetionFuncPlayerClick_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRepetionFuncPlayerClick, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRepetionFuncPlayerClick, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRepetionFuncPlayerClick));
  CMessageBattleTeamFixWaitRequest_descriptor_ = file->message_type(17);
  static const int CMessageBattleTeamFixWaitRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleTeamFixWaitRequest, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleTeamFixWaitRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleTeamFixWaitRequest, mapid_),
  };
  CMessageBattleTeamFixWaitRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBattleTeamFixWaitRequest_descriptor_,
      CMessageBattleTeamFixWaitRequest::default_instance_,
      CMessageBattleTeamFixWaitRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleTeamFixWaitRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleTeamFixWaitRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBattleTeamFixWaitRequest));
  CMessageBattleSingleFixWaitRequest_descriptor_ = file->message_type(18);
  static const int CMessageBattleSingleFixWaitRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleSingleFixWaitRequest, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleSingleFixWaitRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleSingleFixWaitRequest, mapid_),
  };
  CMessageBattleSingleFixWaitRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBattleSingleFixWaitRequest_descriptor_,
      CMessageBattleSingleFixWaitRequest::default_instance_,
      CMessageBattleSingleFixWaitRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleSingleFixWaitRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleSingleFixWaitRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBattleSingleFixWaitRequest));
  CMessageHaveSignUpBattle_descriptor_ = file->message_type(19);
  static const int CMessageHaveSignUpBattle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageHaveSignUpBattle, battleid_),
  };
  CMessageHaveSignUpBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageHaveSignUpBattle_descriptor_,
      CMessageHaveSignUpBattle::default_instance_,
      CMessageHaveSignUpBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageHaveSignUpBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageHaveSignUpBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageHaveSignUpBattle));
  CMessageBattleOnTimeOpenNotice_descriptor_ = file->message_type(20);
  static const int CMessageBattleOnTimeOpenNotice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleOnTimeOpenNotice, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleOnTimeOpenNotice, mapid_),
  };
  CMessageBattleOnTimeOpenNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBattleOnTimeOpenNotice_descriptor_,
      CMessageBattleOnTimeOpenNotice::default_instance_,
      CMessageBattleOnTimeOpenNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleOnTimeOpenNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleOnTimeOpenNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBattleOnTimeOpenNotice));
  CMessageC2SJoinOnTimeOpenBattleRequest_descriptor_ = file->message_type(21);
  static const int CMessageC2SJoinOnTimeOpenBattleRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageC2SJoinOnTimeOpenBattleRequest, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageC2SJoinOnTimeOpenBattleRequest, mapid_),
  };
  CMessageC2SJoinOnTimeOpenBattleRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageC2SJoinOnTimeOpenBattleRequest_descriptor_,
      CMessageC2SJoinOnTimeOpenBattleRequest::default_instance_,
      CMessageC2SJoinOnTimeOpenBattleRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageC2SJoinOnTimeOpenBattleRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageC2SJoinOnTimeOpenBattleRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageC2SJoinOnTimeOpenBattleRequest));
  CMessageC2SGetRandomTeleChargeRequest_descriptor_ = file->message_type(22);
  static const int CMessageC2SGetRandomTeleChargeRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageC2SGetRandomTeleChargeRequest, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageC2SGetRandomTeleChargeRequest, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageC2SGetRandomTeleChargeRequest, order_),
  };
  CMessageC2SGetRandomTeleChargeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageC2SGetRandomTeleChargeRequest_descriptor_,
      CMessageC2SGetRandomTeleChargeRequest::default_instance_,
      CMessageC2SGetRandomTeleChargeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageC2SGetRandomTeleChargeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageC2SGetRandomTeleChargeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageC2SGetRandomTeleChargeRequest));
  CMessageS2CGetRandomTeleChargeResponse_descriptor_ = file->message_type(23);
  static const int CMessageS2CGetRandomTeleChargeResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2CGetRandomTeleChargeResponse, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2CGetRandomTeleChargeResponse, charge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2CGetRandomTeleChargeResponse, dietimes_),
  };
  CMessageS2CGetRandomTeleChargeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageS2CGetRandomTeleChargeResponse_descriptor_,
      CMessageS2CGetRandomTeleChargeResponse::default_instance_,
      CMessageS2CGetRandomTeleChargeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2CGetRandomTeleChargeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2CGetRandomTeleChargeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageS2CGetRandomTeleChargeResponse));
  CMessageC2SRrandomTeleRequest_descriptor_ = file->message_type(24);
  static const int CMessageC2SRrandomTeleRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageC2SRrandomTeleRequest, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageC2SRrandomTeleRequest, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageC2SRrandomTeleRequest, order_),
  };
  CMessageC2SRrandomTeleRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageC2SRrandomTeleRequest_descriptor_,
      CMessageC2SRrandomTeleRequest::default_instance_,
      CMessageC2SRrandomTeleRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageC2SRrandomTeleRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageC2SRrandomTeleRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageC2SRrandomTeleRequest));
  CMessageApplyGlobalWarRequest_descriptor_ = file->message_type(25);
  static const int CMessageApplyGlobalWarRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyGlobalWarRequest, repetionindex_),
  };
  CMessageApplyGlobalWarRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageApplyGlobalWarRequest_descriptor_,
      CMessageApplyGlobalWarRequest::default_instance_,
      CMessageApplyGlobalWarRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyGlobalWarRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyGlobalWarRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageApplyGlobalWarRequest));
  CMessageApplyGlobalWarResponse_descriptor_ = file->message_type(26);
  static const int CMessageApplyGlobalWarResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyGlobalWarResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyGlobalWarResponse, minlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyGlobalWarResponse, maxlevel_),
  };
  CMessageApplyGlobalWarResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageApplyGlobalWarResponse_descriptor_,
      CMessageApplyGlobalWarResponse::default_instance_,
      CMessageApplyGlobalWarResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyGlobalWarResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyGlobalWarResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageApplyGlobalWarResponse));
  CMessageEnterGlobalWarRequest_descriptor_ = file->message_type(27);
  static const int CMessageEnterGlobalWarRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterGlobalWarRequest, repetionindex_),
  };
  CMessageEnterGlobalWarRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageEnterGlobalWarRequest_descriptor_,
      CMessageEnterGlobalWarRequest::default_instance_,
      CMessageEnterGlobalWarRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterGlobalWarRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterGlobalWarRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageEnterGlobalWarRequest));
  CMessageEnterGlobalWarResponse_descriptor_ = file->message_type(28);
  static const int CMessageEnterGlobalWarResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterGlobalWarResponse, errcode_),
  };
  CMessageEnterGlobalWarResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageEnterGlobalWarResponse_descriptor_,
      CMessageEnterGlobalWarResponse::default_instance_,
      CMessageEnterGlobalWarResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterGlobalWarResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterGlobalWarResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageEnterGlobalWarResponse));
  CMessageCanEnterGlobalWarNotify_descriptor_ = file->message_type(29);
  static const int CMessageCanEnterGlobalWarNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCanEnterGlobalWarNotify, repetionindex_),
  };
  CMessageCanEnterGlobalWarNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCanEnterGlobalWarNotify_descriptor_,
      CMessageCanEnterGlobalWarNotify::default_instance_,
      CMessageCanEnterGlobalWarNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCanEnterGlobalWarNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCanEnterGlobalWarNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCanEnterGlobalWarNotify));
  CMessagePlayerLeaveGlobalWarRequest_descriptor_ = file->message_type(30);
  static const int CMessagePlayerLeaveGlobalWarRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerLeaveGlobalWarRequest, repetionindex_),
  };
  CMessagePlayerLeaveGlobalWarRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePlayerLeaveGlobalWarRequest_descriptor_,
      CMessagePlayerLeaveGlobalWarRequest::default_instance_,
      CMessagePlayerLeaveGlobalWarRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerLeaveGlobalWarRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerLeaveGlobalWarRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePlayerLeaveGlobalWarRequest));
  CMessagePlayerLeaveGlobalWarResponse_descriptor_ = file->message_type(31);
  static const int CMessagePlayerLeaveGlobalWarResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerLeaveGlobalWarResponse, errcode_),
  };
  CMessagePlayerLeaveGlobalWarResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePlayerLeaveGlobalWarResponse_descriptor_,
      CMessagePlayerLeaveGlobalWarResponse::default_instance_,
      CMessagePlayerLeaveGlobalWarResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerLeaveGlobalWarResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerLeaveGlobalWarResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePlayerLeaveGlobalWarResponse));
  CMessageKickCampPlayerRequest_descriptor_ = file->message_type(32);
  static const int CMessageKickCampPlayerRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickCampPlayerRequest, entityid_),
  };
  CMessageKickCampPlayerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageKickCampPlayerRequest_descriptor_,
      CMessageKickCampPlayerRequest::default_instance_,
      CMessageKickCampPlayerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickCampPlayerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickCampPlayerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageKickCampPlayerRequest));
  CMessageKickCampPlayerResponse_descriptor_ = file->message_type(33);
  static const int CMessageKickCampPlayerResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickCampPlayerResponse, errcode_),
  };
  CMessageKickCampPlayerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageKickCampPlayerResponse_descriptor_,
      CMessageKickCampPlayerResponse::default_instance_,
      CMessageKickCampPlayerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickCampPlayerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickCampPlayerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageKickCampPlayerResponse));
  CMessageKickCampPlayerNotify_descriptor_ = file->message_type(34);
  static const int CMessageKickCampPlayerNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickCampPlayerNotify, sponsorrolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickCampPlayerNotify, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickCampPlayerNotify, entityid_),
  };
  CMessageKickCampPlayerNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageKickCampPlayerNotify_descriptor_,
      CMessageKickCampPlayerNotify::default_instance_,
      CMessageKickCampPlayerNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickCampPlayerNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickCampPlayerNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageKickCampPlayerNotify));
  CMessageVoteToKickPlayerRequest_descriptor_ = file->message_type(35);
  static const int CMessageVoteToKickPlayerRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageVoteToKickPlayerRequest, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageVoteToKickPlayerRequest, result_),
  };
  CMessageVoteToKickPlayerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageVoteToKickPlayerRequest_descriptor_,
      CMessageVoteToKickPlayerRequest::default_instance_,
      CMessageVoteToKickPlayerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageVoteToKickPlayerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageVoteToKickPlayerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageVoteToKickPlayerRequest));
  CMessageVoteToKickPlayerResponse_descriptor_ = file->message_type(36);
  static const int CMessageVoteToKickPlayerResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageVoteToKickPlayerResponse, errcode_),
  };
  CMessageVoteToKickPlayerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageVoteToKickPlayerResponse_descriptor_,
      CMessageVoteToKickPlayerResponse::default_instance_,
      CMessageVoteToKickPlayerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageVoteToKickPlayerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageVoteToKickPlayerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageVoteToKickPlayerResponse));
  CMesssageKickResultNoitfy_descriptor_ = file->message_type(37);
  static const int CMesssageKickResultNoitfy_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMesssageKickResultNoitfy, sponsorroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMesssageKickResultNoitfy, kickedroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMesssageKickResultNoitfy, kickedrolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMesssageKickResultNoitfy, result_),
  };
  CMesssageKickResultNoitfy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMesssageKickResultNoitfy_descriptor_,
      CMesssageKickResultNoitfy::default_instance_,
      CMesssageKickResultNoitfy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMesssageKickResultNoitfy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMesssageKickResultNoitfy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMesssageKickResultNoitfy));
  CMessageIntoCorpsBossRepetionRequest_descriptor_ = file->message_type(38);
  static const int CMessageIntoCorpsBossRepetionRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageIntoCorpsBossRepetionRequest, battleid_),
  };
  CMessageIntoCorpsBossRepetionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageIntoCorpsBossRepetionRequest_descriptor_,
      CMessageIntoCorpsBossRepetionRequest::default_instance_,
      CMessageIntoCorpsBossRepetionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageIntoCorpsBossRepetionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageIntoCorpsBossRepetionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageIntoCorpsBossRepetionRequest));
  CMessageEnterLastReptionRequest_descriptor_ = file->message_type(39);
  static const int CMessageEnterLastReptionRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterLastReptionRequest, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterLastReptionRequest, roleid_),
  };
  CMessageEnterLastReptionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageEnterLastReptionRequest_descriptor_,
      CMessageEnterLastReptionRequest::default_instance_,
      CMessageEnterLastReptionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterLastReptionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterLastReptionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageEnterLastReptionRequest));
  CMessageEnterLastReptionResponse_descriptor_ = file->message_type(40);
  static const int CMessageEnterLastReptionResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterLastReptionResponse, errcode_),
  };
  CMessageEnterLastReptionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageEnterLastReptionResponse_descriptor_,
      CMessageEnterLastReptionResponse::default_instance_,
      CMessageEnterLastReptionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterLastReptionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterLastReptionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageEnterLastReptionResponse));
  RepetionMessageID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_repetionmessage_5fpb_2ehxx);
}

void protobuf_RegisterTypes() {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRepetionTeamIn_descriptor_, &CMessageRepetionTeamIn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRepetionErrCode_descriptor_, &CMessageRepetionErrCode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRepetionNpcAdventNotice_descriptor_, &CMessageRepetionNpcAdventNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRepetionEventNotic_descriptor_, &CMessageRepetionEventNotic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageS2CBattleJoinNotice_descriptor_, &CMessageS2CBattleJoinNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBattleWaitResponse_descriptor_, &CMessageBattleWaitResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageC2SBattleJoin_descriptor_, &CMessageC2SBattleJoin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageC2SBattleJoinRandomPlace_descriptor_, &CMessageC2SBattleJoinRandomPlace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBattleTeamWaitRequest_descriptor_, &CMessageBattleTeamWaitRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBattleSingleWaitRequest_descriptor_, &CMessageBattleSingleWaitRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageC2SBattleWaitLeaveRequest_descriptor_, &CMessageC2SBattleWaitLeaveRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageS2CBattleWaitLeaveResponse_descriptor_, &CMessageS2CBattleWaitLeaveResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageC2SRepetionLeave_descriptor_, &CMessageC2SRepetionLeave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRepetionIndexNotice_descriptor_, &CMessageRepetionIndexNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRepetionUseItemIntoNotice_descriptor_, &CMessageRepetionUseItemIntoNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRepetionUseItemIntoResponse_descriptor_, &CMessageRepetionUseItemIntoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRepetionFuncPlayerClick_descriptor_, &CMessageRepetionFuncPlayerClick::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBattleTeamFixWaitRequest_descriptor_, &CMessageBattleTeamFixWaitRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBattleSingleFixWaitRequest_descriptor_, &CMessageBattleSingleFixWaitRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageHaveSignUpBattle_descriptor_, &CMessageHaveSignUpBattle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBattleOnTimeOpenNotice_descriptor_, &CMessageBattleOnTimeOpenNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageC2SJoinOnTimeOpenBattleRequest_descriptor_, &CMessageC2SJoinOnTimeOpenBattleRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageC2SGetRandomTeleChargeRequest_descriptor_, &CMessageC2SGetRandomTeleChargeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageS2CGetRandomTeleChargeResponse_descriptor_, &CMessageS2CGetRandomTeleChargeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageC2SRrandomTeleRequest_descriptor_, &CMessageC2SRrandomTeleRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageApplyGlobalWarRequest_descriptor_, &CMessageApplyGlobalWarRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageApplyGlobalWarResponse_descriptor_, &CMessageApplyGlobalWarResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageEnterGlobalWarRequest_descriptor_, &CMessageEnterGlobalWarRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageEnterGlobalWarResponse_descriptor_, &CMessageEnterGlobalWarResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCanEnterGlobalWarNotify_descriptor_, &CMessageCanEnterGlobalWarNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePlayerLeaveGlobalWarRequest_descriptor_, &CMessagePlayerLeaveGlobalWarRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePlayerLeaveGlobalWarResponse_descriptor_, &CMessagePlayerLeaveGlobalWarResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageKickCampPlayerRequest_descriptor_, &CMessageKickCampPlayerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageKickCampPlayerResponse_descriptor_, &CMessageKickCampPlayerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageKickCampPlayerNotify_descriptor_, &CMessageKickCampPlayerNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageVoteToKickPlayerRequest_descriptor_, &CMessageVoteToKickPlayerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageVoteToKickPlayerResponse_descriptor_, &CMessageVoteToKickPlayerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMesssageKickResultNoitfy_descriptor_, &CMesssageKickResultNoitfy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageIntoCorpsBossRepetionRequest_descriptor_, &CMessageIntoCorpsBossRepetionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageEnterLastReptionRequest_descriptor_, &CMessageEnterLastReptionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageEnterLastReptionResponse_descriptor_, &CMessageEnterLastReptionResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_repetionmessage_5fpb_2ehxx() {
  delete CMessageRepetionTeamIn::default_instance_;
  delete CMessageRepetionTeamIn_reflection_;
  delete CMessageRepetionErrCode::default_instance_;
  delete CMessageRepetionErrCode_reflection_;
  delete CMessageRepetionNpcAdventNotice::default_instance_;
  delete CMessageRepetionNpcAdventNotice_reflection_;
  delete CMessageRepetionEventNotic::default_instance_;
  delete CMessageRepetionEventNotic_reflection_;
  delete CMessageS2CBattleJoinNotice::default_instance_;
  delete CMessageS2CBattleJoinNotice_reflection_;
  delete CMessageBattleWaitResponse::default_instance_;
  delete CMessageBattleWaitResponse_reflection_;
  delete CMessageC2SBattleJoin::default_instance_;
  delete CMessageC2SBattleJoin_reflection_;
  delete CMessageC2SBattleJoinRandomPlace::default_instance_;
  delete CMessageC2SBattleJoinRandomPlace_reflection_;
  delete CMessageBattleTeamWaitRequest::default_instance_;
  delete CMessageBattleTeamWaitRequest_reflection_;
  delete CMessageBattleSingleWaitRequest::default_instance_;
  delete CMessageBattleSingleWaitRequest_reflection_;
  delete CMessageC2SBattleWaitLeaveRequest::default_instance_;
  delete CMessageC2SBattleWaitLeaveRequest_reflection_;
  delete CMessageS2CBattleWaitLeaveResponse::default_instance_;
  delete CMessageS2CBattleWaitLeaveResponse_reflection_;
  delete CMessageC2SRepetionLeave::default_instance_;
  delete CMessageC2SRepetionLeave_reflection_;
  delete CMessageRepetionIndexNotice::default_instance_;
  delete CMessageRepetionIndexNotice_reflection_;
  delete CMessageRepetionUseItemIntoNotice::default_instance_;
  delete CMessageRepetionUseItemIntoNotice_reflection_;
  delete CMessageRepetionUseItemIntoResponse::default_instance_;
  delete CMessageRepetionUseItemIntoResponse_reflection_;
  delete CMessageRepetionFuncPlayerClick::default_instance_;
  delete CMessageRepetionFuncPlayerClick_reflection_;
  delete CMessageBattleTeamFixWaitRequest::default_instance_;
  delete CMessageBattleTeamFixWaitRequest_reflection_;
  delete CMessageBattleSingleFixWaitRequest::default_instance_;
  delete CMessageBattleSingleFixWaitRequest_reflection_;
  delete CMessageHaveSignUpBattle::default_instance_;
  delete CMessageHaveSignUpBattle_reflection_;
  delete CMessageBattleOnTimeOpenNotice::default_instance_;
  delete CMessageBattleOnTimeOpenNotice_reflection_;
  delete CMessageC2SJoinOnTimeOpenBattleRequest::default_instance_;
  delete CMessageC2SJoinOnTimeOpenBattleRequest_reflection_;
  delete CMessageC2SGetRandomTeleChargeRequest::default_instance_;
  delete CMessageC2SGetRandomTeleChargeRequest_reflection_;
  delete CMessageS2CGetRandomTeleChargeResponse::default_instance_;
  delete CMessageS2CGetRandomTeleChargeResponse_reflection_;
  delete CMessageC2SRrandomTeleRequest::default_instance_;
  delete CMessageC2SRrandomTeleRequest_reflection_;
  delete CMessageApplyGlobalWarRequest::default_instance_;
  delete CMessageApplyGlobalWarRequest_reflection_;
  delete CMessageApplyGlobalWarResponse::default_instance_;
  delete CMessageApplyGlobalWarResponse_reflection_;
  delete CMessageEnterGlobalWarRequest::default_instance_;
  delete CMessageEnterGlobalWarRequest_reflection_;
  delete CMessageEnterGlobalWarResponse::default_instance_;
  delete CMessageEnterGlobalWarResponse_reflection_;
  delete CMessageCanEnterGlobalWarNotify::default_instance_;
  delete CMessageCanEnterGlobalWarNotify_reflection_;
  delete CMessagePlayerLeaveGlobalWarRequest::default_instance_;
  delete CMessagePlayerLeaveGlobalWarRequest_reflection_;
  delete CMessagePlayerLeaveGlobalWarResponse::default_instance_;
  delete CMessagePlayerLeaveGlobalWarResponse_reflection_;
  delete CMessageKickCampPlayerRequest::default_instance_;
  delete CMessageKickCampPlayerRequest_reflection_;
  delete CMessageKickCampPlayerResponse::default_instance_;
  delete CMessageKickCampPlayerResponse_reflection_;
  delete CMessageKickCampPlayerNotify::default_instance_;
  delete CMessageKickCampPlayerNotify_reflection_;
  delete CMessageVoteToKickPlayerRequest::default_instance_;
  delete CMessageVoteToKickPlayerRequest_reflection_;
  delete CMessageVoteToKickPlayerResponse::default_instance_;
  delete CMessageVoteToKickPlayerResponse_reflection_;
  delete CMesssageKickResultNoitfy::default_instance_;
  delete CMesssageKickResultNoitfy_reflection_;
  delete CMessageIntoCorpsBossRepetionRequest::default_instance_;
  delete CMessageIntoCorpsBossRepetionRequest_reflection_;
  delete CMessageEnterLastReptionRequest::default_instance_;
  delete CMessageEnterLastReptionRequest_reflection_;
  delete CMessageEnterLastReptionResponse::default_instance_;
  delete CMessageEnterLastReptionResponse_reflection_;
}

void protobuf_AddDesc_repetionmessage_5fpb_2ehxx() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_coremessage_5fpb_2ehxx();
  #ifndef _NO_PROTOBUF_STR_
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026repetionmessage_pb.hxx\032\022coremessage_pb"
    ".hxx\"o\n\026CMessageRepetionTeamIn\022\037\n\006Router"
    "\030\001 \001(\0132\017.CMessageRouter\022\r\n\005mapid\030\002 \001(\r\022\022"
    "\n\ndestcharid\030\003 \001(\r\022\021\n\tsrccharid\030\004 \001(\r\"h\n"
    "\027CMessageRepetionErrCode\022\r\n\005MapID\030\001 \001(\r\022"
    "\014\n\004Code\030\002 \001(\r\022\017\n\007Parame1\030\003 \001(\r\022\017\n\007Parame"
    "2\030\004 \001(\r\022\016\n\006CharID\030\005 \001(\r\"C\n\037CMessageRepet"
    "ionNpcAdventNotice\022\022\n\nTemplateID\030\001 \001(\r\022\014"
    "\n\004Time\030\002 \001(\r\"o\n\032CMessageRepetionEventNot"
    "ic\022\017\n\007EventID\030\001 \001(\r\022\r\n\005MapID\030\002 \001(\r\022\017\n\007Pa"
    "rame1\030\003 \001(\r\022\017\n\007Parame2\030\004 \001(\r\022\017\n\007Parame3\030"
    "\005 \001(\t\"Y\n\033CMessageS2CBattleJoinNotice\022\020\n\010"
    "BattleID\030\001 \001(\r\022\r\n\005MapID\030\002 \001(\r\022\014\n\004Type\030\003 "
    "\001(\r\022\013\n\003Key\030\004 \001(\r\"=\n\032CMessageBattleWaitRe"
    "sponse\022\020\n\010BattleID\030\001 \001(\r\022\r\n\005MapID\030\002 \001(\r\""
    "8\n\025CMessageC2SBattleJoin\022\020\n\010BattleID\030\001 \001"
    "(\r\022\r\n\005MapID\030\002 \001(\r\"P\n CMessageC2SBattleJo"
    "inRandomPlace\022\020\n\010BattleID\030\001 \001(\r\022\r\n\005MapID"
    "\030\002 \001(\r\022\013\n\003Key\030\003 \001(\r\"P\n\035CMessageBattleTea"
    "mWaitRequest\022\020\n\010BattleID\030\001 \001(\r\022\016\n\006CharID"
    "\030\002 \001(\r\022\r\n\005MapID\030\003 \001(\r\"R\n\037CMessageBattleS"
    "ingleWaitRequest\022\020\n\010BattleID\030\001 \001(\r\022\016\n\006Ch"
    "arID\030\002 \001(\r\022\r\n\005MapID\030\003 \001(\r\"D\n!CMessageC2S"
    "BattleWaitLeaveRequest\022\020\n\010BattleID\030\001 \001(\r"
    "\022\r\n\005MapID\030\002 \001(\r\"E\n\"CMessageS2CBattleWait"
    "LeaveResponse\022\020\n\010BattleID\030\001 \001(\r\022\r\n\005MapID"
    "\030\002 \001(\r\"\032\n\030CMessageC2SRepetionLeave\"R\n\033CM"
    "essageRepetionIndexNotice\022\025\n\rRepetionInd"
    "ex\030\001 \001(\r\022\014\n\004Type\030\002 \001(\r\022\016\n\006RoleID\030\003 \001(\r\"J"
    "\n!CMessageRepetionUseItemIntoNotice\022\025\n\rR"
    "epetionIndex\030\001 \001(\r\022\016\n\006ItemID\030\002 \001(\r\"%\n#CM"
    "essageRepetionUseItemIntoResponse\"0\n\037CMe"
    "ssageRepetionFuncPlayerClick\022\r\n\005NpcID\030\001 "
    "\001(\r\"S\n CMessageBattleTeamFixWaitRequest\022"
    "\020\n\010BattleID\030\001 \001(\r\022\016\n\006CharID\030\002 \001(\r\022\r\n\005Map"
    "ID\030\003 \001(\r\"U\n\"CMessageBattleSingleFixWaitR"
    "equest\022\020\n\010BattleID\030\001 \001(\r\022\016\n\006CharID\030\002 \001(\r"
    "\022\r\n\005MapID\030\003 \001(\r\",\n\030CMessageHaveSignUpBat"
    "tle\022\020\n\010BattleID\030\001 \001(\r\"A\n\036CMessageBattleO"
    "nTimeOpenNotice\022\020\n\010BattleID\030\001 \001(\r\022\r\n\005Map"
    "ID\030\002 \001(\r\"I\n&CMessageC2SJoinOnTimeOpenBat"
    "tleRequest\022\020\n\010BattleID\030\001 \001(\r\022\r\n\005MapID\030\002 "
    "\001(\r\"W\n%CMessageC2SGetRandomTeleChargeReq"
    "uest\022\r\n\005NpcID\030\001 \001(\r\022\020\n\010BattleID\030\002 \001(\r\022\r\n"
    "\005Order\030\003 \001(\r\"\\\n&CMessageS2CGetRandomTele"
    "ChargeResponse\022\020\n\010BattleID\030\001 \001(\r\022\016\n\006Char"
    "ge\030\002 \001(\r\022\020\n\010DieTimes\030\003 \001(\r\"O\n\035CMessageC2"
    "SRrandomTeleRequest\022\r\n\005NpcID\030\001 \001(\r\022\020\n\010Ba"
    "ttleID\030\002 \001(\r\022\r\n\005Order\030\003 \001(\r\"6\n\035CMessageA"
    "pplyGlobalWarRequest\022\025\n\rRepetionIndex\030\001 "
    "\001(\r\"U\n\036CMessageApplyGlobalWarResponse\022\017\n"
    "\007Errcode\030\001 \001(\r\022\020\n\010MinLevel\030\002 \001(\r\022\020\n\010MaxL"
    "evel\030\003 \001(\r\"6\n\035CMessageEnterGlobalWarRequ"
    "est\022\025\n\rRepetionIndex\030\001 \001(\r\"1\n\036CMessageEn"
    "terGlobalWarResponse\022\017\n\007Errcode\030\001 \001(\r\"8\n"
    "\037CMessageCanEnterGlobalWarNotify\022\025\n\rRepe"
    "tionIndex\030\001 \001(\r\"<\n#CMessagePlayerLeaveGl"
    "obalWarRequest\022\025\n\rRepetionIndex\030\001 \001(\r\"7\n"
    "$CMessagePlayerLeaveGlobalWarResponse\022\017\n"
    "\007ErrCode\030\001 \001(\r\"1\n\035CMessageKickCampPlayer"
    "Request\022\020\n\010EntityID\030\001 \001(\r\"1\n\036CMessageKic"
    "kCampPlayerResponse\022\017\n\007ErrCode\030\001 \001(\r\"[\n\034"
    "CMessageKickCampPlayerNotify\022\027\n\017SponsorR"
    "oleName\030\001 \001(\t\022\020\n\010RoleName\030\002 \001(\t\022\020\n\010Entit"
    "yID\030\003 \001(\r\"C\n\037CMessageVoteToKickPlayerReq"
    "uest\022\020\n\010EntityID\030\001 \001(\r\022\016\n\006Result\030\002 \001(\r\"3"
    "\n CMessageVoteToKickPlayerResponse\022\017\n\007Er"
    "rcode\030\001 \001(\r\"p\n\031CMesssageKickResultNoitfy"
    "\022\025\n\rSponsorRoleID\030\001 \001(\r\022\024\n\014KickedRoleID\030"
    "\002 \001(\r\022\026\n\016KickedRoleName\030\003 \001(\t\022\016\n\006Result\030"
    "\004 \001(\r\"8\n$CMessageIntoCorpsBossRepetionRe"
    "quest\022\020\n\010BattleID\030\001 \001(\r\"@\n\037CMessageEnter"
    "LastReptionRequest\022\r\n\005Index\030\001 \001(\r\022\016\n\006Rol"
    "eID\030\002 \001(\r\"3\n CMessageEnterLastReptionRes"
    "ponse\022\017\n\007Errcode\030\001 \001(\r*\345\013\n\021RepetionMessa"
    "geID\022\020\n\013REPETIONMSG\020\200X\022\034\n\027ID_S2S_REPETIO"
    "N_TEAM_IN\020\201\\\022\030\n\023ID_S2C_REPETION_ERR\020\202\\\022\033"
    "\n\026ID_S2C_REPETION_ADVENT\020\203X\022\032\n\025ID_S2C_RE"
    "PETION_EVENT\020\204X\022\036\n\031ID_S2C_BATTLE_JOIN_NO"
    "TICE\020\205X\022\027\n\022ID_C2S_BATTLE_JOIN\020\206X\022 \n\033ID_S"
    "2C_BATTLE_WAIT_RESPONSE\020\207X\022$\n\037ID_C2S_BAT"
    "TLE_TEAM_WAIT_REQUEST\020\210X\022&\n!ID_S2C_BATTL"
    "E_WAIT_LEAVE_RESPONSE\020\211X\022%\n ID_C2S_BATTL"
    "E_WAIT_LEAVE_REQUEST\020\212X\022\032\n\025ID_C2S_REPETI"
    "ON_LEAVE\020\213X\022&\n!ID_C2S_BATTLE_SINGLE_WAIT"
    "_REQUEST\020\214X\022 \n\033ID_S2C_REPETIONINDEX_NOTI"
    "CE\020\215X\022\037\n\032ID_S2C_USEITEM_INTO_NOTICE\020\216X\022!"
    "\n\034ID_C2S_USEITEM_INTO_RESPINSE\020\220X\022\031\n\024ID_"
    "C2S_REPETION_FUNC\020\221X\022(\n#ID_C2S_BATTLE_TE"
    "AM_FIX_WAIT_REQUEST\020\222X\022*\n%ID_C2S_BATTLE_"
    "SINGLE_FIX_WAIT_REQUEST\020\223X\022$\n\037ID_C2S_BAT"
    "TLE_JOIN_RANDOM_PLACE\020\224X\022\037\n\032ID_S2C_HAVE_"
    "SIGN_UP_BATTLE\020\225X\022\037\n\032ID_S2C_BATTLE_ON_TI"
    "ME_OPEN\020\226X\022,\n\'ID_C2S_JOIN_ON_TIME_OPEN_B"
    "ATTLE_REQUEST\020\227X\022*\n%ID_C2S_GET_RANDOM_TE"
    "LE_CHARGE_REQUEST\020\230X\022+\n&ID_S2C_GET_RANDO"
    "M_TELE_CHARGE_RESPONSE\020\231X\022\037\n\032ID_C2S_RAND"
    "OM_TELE_REQUEST\020\232X\022\"\n\035ID_C2S_REQUEST_APP"
    "LYGLOBALWAR\020\233X\022#\n\036ID_S2C_RESPONSE_APPLYG"
    "LOBALWAR\020\234X\022\"\n\035ID_C2S_REQUEST_ENTERGLOBA"
    "LWAR\020\235X\022#\n\036ID_S2C_RESPONSE_ENTERGLOBALWA"
    "R\020\236X\022$\n\037ID_S2C_NOTIFY_CANENTERGLOBALWAR\020"
    "\237X\022\"\n\035ID_C2S_REQUEST_LEAVEGLOBALWAR\020\240X\022#"
    "\n\036ID_S2C_RESPONSE_LEAVEGLOBALWAR\020\241X\022\"\n\035I"
    "D_C2S_REQUEST_KICKCAMPPLAYER\020\242X\022#\n\036ID_S2"
    "C_RESPONSE_KICKCAMPPLAYER\020\243X\022!\n\034ID_S2C_N"
    "OTIFY_KICKCAMPPLAYER\020\244X\022$\n\037ID_C2S_REQUES"
    "T_VOTETOKICKPLAYER\020\245X\022%\n ID_S2C_RESPONSE"
    "_VOTETOKICKPLAYER\020\246X\022\035\n\030ID_S2C_NOTIFY_KI"
    "CKRESULT\020\247X\022*\n%ID_C2S_INTO_CORPSBOSSREPE"
    "TION_REQUEST\020\250X\022%\n ID_C2S_REQUEST_ENTERL"
    "ASTREPETION\020\251X\022&\n!ID_S2C_RESPONSE_ENTERL"
    "ASTREPETION\020\252XB\002H\001", 4498);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "repetionmessage_pb.hxx", &protobuf_RegisterTypes);
  #endif
  CMessageRepetionTeamIn::default_instance_ = new CMessageRepetionTeamIn();
  CMessageRepetionErrCode::default_instance_ = new CMessageRepetionErrCode();
  CMessageRepetionNpcAdventNotice::default_instance_ = new CMessageRepetionNpcAdventNotice();
  CMessageRepetionEventNotic::default_instance_ = new CMessageRepetionEventNotic();
  CMessageS2CBattleJoinNotice::default_instance_ = new CMessageS2CBattleJoinNotice();
  CMessageBattleWaitResponse::default_instance_ = new CMessageBattleWaitResponse();
  CMessageC2SBattleJoin::default_instance_ = new CMessageC2SBattleJoin();
  CMessageC2SBattleJoinRandomPlace::default_instance_ = new CMessageC2SBattleJoinRandomPlace();
  CMessageBattleTeamWaitRequest::default_instance_ = new CMessageBattleTeamWaitRequest();
  CMessageBattleSingleWaitRequest::default_instance_ = new CMessageBattleSingleWaitRequest();
  CMessageC2SBattleWaitLeaveRequest::default_instance_ = new CMessageC2SBattleWaitLeaveRequest();
  CMessageS2CBattleWaitLeaveResponse::default_instance_ = new CMessageS2CBattleWaitLeaveResponse();
  CMessageC2SRepetionLeave::default_instance_ = new CMessageC2SRepetionLeave();
  CMessageRepetionIndexNotice::default_instance_ = new CMessageRepetionIndexNotice();
  CMessageRepetionUseItemIntoNotice::default_instance_ = new CMessageRepetionUseItemIntoNotice();
  CMessageRepetionUseItemIntoResponse::default_instance_ = new CMessageRepetionUseItemIntoResponse();
  CMessageRepetionFuncPlayerClick::default_instance_ = new CMessageRepetionFuncPlayerClick();
  CMessageBattleTeamFixWaitRequest::default_instance_ = new CMessageBattleTeamFixWaitRequest();
  CMessageBattleSingleFixWaitRequest::default_instance_ = new CMessageBattleSingleFixWaitRequest();
  CMessageHaveSignUpBattle::default_instance_ = new CMessageHaveSignUpBattle();
  CMessageBattleOnTimeOpenNotice::default_instance_ = new CMessageBattleOnTimeOpenNotice();
  CMessageC2SJoinOnTimeOpenBattleRequest::default_instance_ = new CMessageC2SJoinOnTimeOpenBattleRequest();
  CMessageC2SGetRandomTeleChargeRequest::default_instance_ = new CMessageC2SGetRandomTeleChargeRequest();
  CMessageS2CGetRandomTeleChargeResponse::default_instance_ = new CMessageS2CGetRandomTeleChargeResponse();
  CMessageC2SRrandomTeleRequest::default_instance_ = new CMessageC2SRrandomTeleRequest();
  CMessageApplyGlobalWarRequest::default_instance_ = new CMessageApplyGlobalWarRequest();
  CMessageApplyGlobalWarResponse::default_instance_ = new CMessageApplyGlobalWarResponse();
  CMessageEnterGlobalWarRequest::default_instance_ = new CMessageEnterGlobalWarRequest();
  CMessageEnterGlobalWarResponse::default_instance_ = new CMessageEnterGlobalWarResponse();
  CMessageCanEnterGlobalWarNotify::default_instance_ = new CMessageCanEnterGlobalWarNotify();
  CMessagePlayerLeaveGlobalWarRequest::default_instance_ = new CMessagePlayerLeaveGlobalWarRequest();
  CMessagePlayerLeaveGlobalWarResponse::default_instance_ = new CMessagePlayerLeaveGlobalWarResponse();
  CMessageKickCampPlayerRequest::default_instance_ = new CMessageKickCampPlayerRequest();
  CMessageKickCampPlayerResponse::default_instance_ = new CMessageKickCampPlayerResponse();
  CMessageKickCampPlayerNotify::default_instance_ = new CMessageKickCampPlayerNotify();
  CMessageVoteToKickPlayerRequest::default_instance_ = new CMessageVoteToKickPlayerRequest();
  CMessageVoteToKickPlayerResponse::default_instance_ = new CMessageVoteToKickPlayerResponse();
  CMesssageKickResultNoitfy::default_instance_ = new CMesssageKickResultNoitfy();
  CMessageIntoCorpsBossRepetionRequest::default_instance_ = new CMessageIntoCorpsBossRepetionRequest();
  CMessageEnterLastReptionRequest::default_instance_ = new CMessageEnterLastReptionRequest();
  CMessageEnterLastReptionResponse::default_instance_ = new CMessageEnterLastReptionResponse();
  CMessageRepetionTeamIn::default_instance_->InitAsDefaultInstance();
  CMessageRepetionErrCode::default_instance_->InitAsDefaultInstance();
  CMessageRepetionNpcAdventNotice::default_instance_->InitAsDefaultInstance();
  CMessageRepetionEventNotic::default_instance_->InitAsDefaultInstance();
  CMessageS2CBattleJoinNotice::default_instance_->InitAsDefaultInstance();
  CMessageBattleWaitResponse::default_instance_->InitAsDefaultInstance();
  CMessageC2SBattleJoin::default_instance_->InitAsDefaultInstance();
  CMessageC2SBattleJoinRandomPlace::default_instance_->InitAsDefaultInstance();
  CMessageBattleTeamWaitRequest::default_instance_->InitAsDefaultInstance();
  CMessageBattleSingleWaitRequest::default_instance_->InitAsDefaultInstance();
  CMessageC2SBattleWaitLeaveRequest::default_instance_->InitAsDefaultInstance();
  CMessageS2CBattleWaitLeaveResponse::default_instance_->InitAsDefaultInstance();
  CMessageC2SRepetionLeave::default_instance_->InitAsDefaultInstance();
  CMessageRepetionIndexNotice::default_instance_->InitAsDefaultInstance();
  CMessageRepetionUseItemIntoNotice::default_instance_->InitAsDefaultInstance();
  CMessageRepetionUseItemIntoResponse::default_instance_->InitAsDefaultInstance();
  CMessageRepetionFuncPlayerClick::default_instance_->InitAsDefaultInstance();
  CMessageBattleTeamFixWaitRequest::default_instance_->InitAsDefaultInstance();
  CMessageBattleSingleFixWaitRequest::default_instance_->InitAsDefaultInstance();
  CMessageHaveSignUpBattle::default_instance_->InitAsDefaultInstance();
  CMessageBattleOnTimeOpenNotice::default_instance_->InitAsDefaultInstance();
  CMessageC2SJoinOnTimeOpenBattleRequest::default_instance_->InitAsDefaultInstance();
  CMessageC2SGetRandomTeleChargeRequest::default_instance_->InitAsDefaultInstance();
  CMessageS2CGetRandomTeleChargeResponse::default_instance_->InitAsDefaultInstance();
  CMessageC2SRrandomTeleRequest::default_instance_->InitAsDefaultInstance();
  CMessageApplyGlobalWarRequest::default_instance_->InitAsDefaultInstance();
  CMessageApplyGlobalWarResponse::default_instance_->InitAsDefaultInstance();
  CMessageEnterGlobalWarRequest::default_instance_->InitAsDefaultInstance();
  CMessageEnterGlobalWarResponse::default_instance_->InitAsDefaultInstance();
  CMessageCanEnterGlobalWarNotify::default_instance_->InitAsDefaultInstance();
  CMessagePlayerLeaveGlobalWarRequest::default_instance_->InitAsDefaultInstance();
  CMessagePlayerLeaveGlobalWarResponse::default_instance_->InitAsDefaultInstance();
  CMessageKickCampPlayerRequest::default_instance_->InitAsDefaultInstance();
  CMessageKickCampPlayerResponse::default_instance_->InitAsDefaultInstance();
  CMessageKickCampPlayerNotify::default_instance_->InitAsDefaultInstance();
  CMessageVoteToKickPlayerRequest::default_instance_->InitAsDefaultInstance();
  CMessageVoteToKickPlayerResponse::default_instance_->InitAsDefaultInstance();
  CMesssageKickResultNoitfy::default_instance_->InitAsDefaultInstance();
  CMessageIntoCorpsBossRepetionRequest::default_instance_->InitAsDefaultInstance();
  CMessageEnterLastReptionRequest::default_instance_->InitAsDefaultInstance();
  CMessageEnterLastReptionResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_repetionmessage_5fpb_2ehxx);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_repetionmessage_5fpb_2ehxx {
  StaticDescriptorInitializer_repetionmessage_5fpb_2ehxx() {
    protobuf_AddDesc_repetionmessage_5fpb_2ehxx();
  }
} static_descriptor_initializer_repetionmessage_5fpb_2ehxx_;

const ::google::protobuf::EnumDescriptor* RepetionMessageID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RepetionMessageID_descriptor_;
}
bool RepetionMessageID_IsValid(int value) {
  switch(value) {
    case 11264:
    case 11267:
    case 11268:
    case 11269:
    case 11270:
    case 11271:
    case 11272:
    case 11273:
    case 11274:
    case 11275:
    case 11276:
    case 11277:
    case 11278:
    case 11280:
    case 11281:
    case 11282:
    case 11283:
    case 11284:
    case 11285:
    case 11286:
    case 11287:
    case 11288:
    case 11289:
    case 11290:
    case 11291:
    case 11292:
    case 11293:
    case 11294:
    case 11295:
    case 11296:
    case 11297:
    case 11298:
    case 11299:
    case 11300:
    case 11301:
    case 11302:
    case 11303:
    case 11304:
    case 11305:
    case 11306:
    case 11777:
    case 11778:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CMessageRepetionTeamIn::kRouterFieldNumber;
const int CMessageRepetionTeamIn::kMapidFieldNumber;
const int CMessageRepetionTeamIn::kDestcharidFieldNumber;
const int CMessageRepetionTeamIn::kSrccharidFieldNumber;
#endif  // !_MSC_VER

CMessageRepetionTeamIn::CMessageRepetionTeamIn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRepetionTeamIn::InitAsDefaultInstance() {  router_ = const_cast< ::CMessageRouter*>(&::CMessageRouter::default_instance());
}

CMessageRepetionTeamIn::CMessageRepetionTeamIn(const CMessageRepetionTeamIn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRepetionTeamIn::SharedCtor() {
  _cached_size_ = 0;
  router_ = NULL;
  mapid_ = 0u;
  destcharid_ = 0u;
  srccharid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRepetionTeamIn::~CMessageRepetionTeamIn() {
  SharedDtor();
}

void CMessageRepetionTeamIn::SharedDtor() {
  if (this != default_instance_) {
    delete router_;
  }
}

const ::google::protobuf::Descriptor* CMessageRepetionTeamIn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRepetionTeamIn_descriptor_;
}

const CMessageRepetionTeamIn& CMessageRepetionTeamIn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_repetionmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRepetionTeamIn* CMessageRepetionTeamIn::default_instance_ = NULL;

CMessageRepetionTeamIn* CMessageRepetionTeamIn::New() const {
  return new CMessageRepetionTeamIn;
}

void CMessageRepetionTeamIn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (router_ != NULL) router_->::CMessageRouter::Clear();
    }
    mapid_ = 0u;
    destcharid_ = 0u;
    srccharid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRepetionTeamIn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CMessageRouter Router = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_router()));
        if (input->ExpectTag(16)) goto parse_mapid;
        break;
      }
      
      // optional uint32 mapid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_mapid:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_destcharid;
        break;
      }
      
      // optional uint32 destcharid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_destcharid:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &destcharid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_srccharid;
        break;
      }
      
      // optional uint32 srccharid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_srccharid:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srccharid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageRepetionTeamIn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRepetionTeamIn::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->router(), output);
  }
  
  // optional uint32 mapid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->mapid(), output);
  }
  
  // optional uint32 destcharid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->destcharid(), output);
  }
  
  // optional uint32 srccharid = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->srccharid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRepetionTeamIn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->router(), target);
  }
  
  // optional uint32 mapid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->mapid(), target);
  }
  
  // optional uint32 destcharid = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->destcharid(), target);
  }
  
  // optional uint32 srccharid = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->srccharid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRepetionTeamIn::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMessageRouter Router = 1;
    if (has_router()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->router());
    }
    
    // optional uint32 mapid = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 destcharid = 3;
    if (has_destcharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->destcharid());
    }
    
    // optional uint32 srccharid = 4;
    if (has_srccharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srccharid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRepetionTeamIn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRepetionTeamIn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRepetionTeamIn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRepetionTeamIn::MergeFrom(const CMessageRepetionTeamIn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_router()->::CMessageRouter::MergeFrom(from.router());
    }
    if (from._has_bit(1)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(2)) {
      set_destcharid(from.destcharid());
    }
    if (from._has_bit(3)) {
      set_srccharid(from.srccharid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRepetionTeamIn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRepetionTeamIn::CopyFrom(const CMessageRepetionTeamIn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRepetionTeamIn::Swap(CMessageRepetionTeamIn* other) {
  if (other != this) {
    std::swap(router_, other->router_);
    std::swap(mapid_, other->mapid_);
    std::swap(destcharid_, other->destcharid_);
    std::swap(srccharid_, other->srccharid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRepetionTeamIn::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRepetionTeamIn::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRepetionTeamIn::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRepetionTeamIn_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageRepetionErrCode::kMapIDFieldNumber;
const int CMessageRepetionErrCode::kCodeFieldNumber;
const int CMessageRepetionErrCode::kParame1FieldNumber;
const int CMessageRepetionErrCode::kParame2FieldNumber;
const int CMessageRepetionErrCode::kCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageRepetionErrCode::CMessageRepetionErrCode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRepetionErrCode::InitAsDefaultInstance() {}

CMessageRepetionErrCode::CMessageRepetionErrCode(const CMessageRepetionErrCode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRepetionErrCode::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  code_ = 0u;
  parame1_ = 0u;
  parame2_ = 0u;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRepetionErrCode::~CMessageRepetionErrCode() {
  SharedDtor();
}

void CMessageRepetionErrCode::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageRepetionErrCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRepetionErrCode_descriptor_;
}

const CMessageRepetionErrCode& CMessageRepetionErrCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_repetionmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRepetionErrCode* CMessageRepetionErrCode::default_instance_ = NULL;

CMessageRepetionErrCode* CMessageRepetionErrCode::New() const {
  return new CMessageRepetionErrCode;
}

void CMessageRepetionErrCode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0u;
    code_ = 0u;
    parame1_ = 0u;
    parame2_ = 0u;
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRepetionErrCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 MapID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Code;
        break;
      }
      
      // optional uint32 Code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Code:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &code_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Parame1;
        break;
      }
      
      // optional uint32 Parame1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Parame1:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &parame1_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Parame2;
        break;
      }
      
      // optional uint32 Parame2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Parame2:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &parame2_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageRepetionErrCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRepetionErrCode::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 MapID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->mapid(), output);
  }
  
  // optional uint32 Code = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->code(), output);
  }
  
  // optional uint32 Parame1 = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->parame1(), output);
  }
  
  // optional uint32 Parame2 = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->parame2(), output);
  }
  
  // optional uint32 CharID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->charid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRepetionErrCode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 MapID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->mapid(), target);
  }
  
  // optional uint32 Code = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->code(), target);
  }
  
  // optional uint32 Parame1 = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->parame1(), target);
  }
  
  // optional uint32 Parame2 = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->parame2(), target);
  }
  
  // optional uint32 CharID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->charid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRepetionErrCode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MapID = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 Code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->code());
    }
    
    // optional uint32 Parame1 = 3;
    if (has_parame1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->parame1());
    }
    
    // optional uint32 Parame2 = 4;
    if (has_parame2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->parame2());
    }
    
    // optional uint32 CharID = 5;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRepetionErrCode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRepetionErrCode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRepetionErrCode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRepetionErrCode::MergeFrom(const CMessageRepetionErrCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(1)) {
      set_code(from.code());
    }
    if (from._has_bit(2)) {
      set_parame1(from.parame1());
    }
    if (from._has_bit(3)) {
      set_parame2(from.parame2());
    }
    if (from._has_bit(4)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRepetionErrCode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRepetionErrCode::CopyFrom(const CMessageRepetionErrCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRepetionErrCode::Swap(CMessageRepetionErrCode* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(code_, other->code_);
    std::swap(parame1_, other->parame1_);
    std::swap(parame2_, other->parame2_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRepetionErrCode::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRepetionErrCode::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRepetionErrCode::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRepetionErrCode_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageRepetionNpcAdventNotice::kTemplateIDFieldNumber;
const int CMessageRepetionNpcAdventNotice::kTimeFieldNumber;
#endif  // !_MSC_VER

CMessageRepetionNpcAdventNotice::CMessageRepetionNpcAdventNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRepetionNpcAdventNotice::InitAsDefaultInstance() {}

CMessageRepetionNpcAdventNotice::CMessageRepetionNpcAdventNotice(const CMessageRepetionNpcAdventNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRepetionNpcAdventNotice::SharedCtor() {
  _cached_size_ = 0;
  templateid_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRepetionNpcAdventNotice::~CMessageRepetionNpcAdventNotice() {
  SharedDtor();
}

void CMessageRepetionNpcAdventNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageRepetionNpcAdventNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRepetionNpcAdventNotice_descriptor_;
}

const CMessageRepetionNpcAdventNotice& CMessageRepetionNpcAdventNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_repetionmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRepetionNpcAdventNotice* CMessageRepetionNpcAdventNotice::default_instance_ = NULL;

CMessageRepetionNpcAdventNotice* CMessageRepetionNpcAdventNotice::New() const {
  return new CMessageRepetionNpcAdventNotice;
}

void CMessageRepetionNpcAdventNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    templateid_ = 0u;
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRepetionNpcAdventNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TemplateID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &templateid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Time;
        break;
      }
      
      // optional uint32 Time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Time:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &time_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageRepetionNpcAdventNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRepetionNpcAdventNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TemplateID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->templateid(), output);
  }
  
  // optional uint32 Time = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRepetionNpcAdventNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TemplateID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->templateid(), target);
  }
  
  // optional uint32 Time = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRepetionNpcAdventNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TemplateID = 1;
    if (has_templateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->templateid());
    }
    
    // optional uint32 Time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRepetionNpcAdventNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRepetionNpcAdventNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRepetionNpcAdventNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRepetionNpcAdventNotice::MergeFrom(const CMessageRepetionNpcAdventNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_templateid(from.templateid());
    }
    if (from._has_bit(1)) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRepetionNpcAdventNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRepetionNpcAdventNotice::CopyFrom(const CMessageRepetionNpcAdventNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRepetionNpcAdventNotice::Swap(CMessageRepetionNpcAdventNotice* other) {
  if (other != this) {
    std::swap(templateid_, other->templateid_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRepetionNpcAdventNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRepetionNpcAdventNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRepetionNpcAdventNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRepetionNpcAdventNotice_reflection_;
}

// ===================================================================

const ::std::string CMessageRepetionEventNotic::_default_parame3_;
#ifndef _MSC_VER
const int CMessageRepetionEventNotic::kEventIDFieldNumber;
const int CMessageRepetionEventNotic::kMapIDFieldNumber;
const int CMessageRepetionEventNotic::kParame1FieldNumber;
const int CMessageRepetionEventNotic::kParame2FieldNumber;
const int CMessageRepetionEventNotic::kParame3FieldNumber;
#endif  // !_MSC_VER

CMessageRepetionEventNotic::CMessageRepetionEventNotic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRepetionEventNotic::InitAsDefaultInstance() {}

CMessageRepetionEventNotic::CMessageRepetionEventNotic(const CMessageRepetionEventNotic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRepetionEventNotic::SharedCtor() {
  _cached_size_ = 0;
  eventid_ = 0u;
  mapid_ = 0u;
  parame1_ = 0u;
  parame2_ = 0u;
  parame3_ = const_cast< ::std::string*>(&_default_parame3_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRepetionEventNotic::~CMessageRepetionEventNotic() {
  SharedDtor();
}

void CMessageRepetionEventNotic::SharedDtor() {
  if (parame3_ != &_default_parame3_) {
    delete parame3_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageRepetionEventNotic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRepetionEventNotic_descriptor_;
}

const CMessageRepetionEventNotic& CMessageRepetionEventNotic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_repetionmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRepetionEventNotic* CMessageRepetionEventNotic::default_instance_ = NULL;

CMessageRepetionEventNotic* CMessageRepetionEventNotic::New() const {
  return new CMessageRepetionEventNotic;
}

void CMessageRepetionEventNotic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eventid_ = 0u;
    mapid_ = 0u;
    parame1_ = 0u;
    parame2_ = 0u;
    if (_has_bit(4)) {
      if (parame3_ != &_default_parame3_) {
        parame3_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRepetionEventNotic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 EventID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &eventid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Parame1;
        break;
      }
      
      // optional uint32 Parame1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Parame1:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &parame1_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Parame2;
        break;
      }
      
      // optional uint32 Parame2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Parame2:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &parame2_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_Parame3;
        break;
      }
      
      // optional string Parame3 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Parame3:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_parame3()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageRepetionEventNotic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRepetionEventNotic::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 EventID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->eventid(), output);
  }
  
  // optional uint32 MapID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->mapid(), output);
  }
  
  // optional uint32 Parame1 = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->parame1(), output);
  }
  
  // optional uint32 Parame2 = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->parame2(), output);
  }
  
  // optional string Parame3 = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->parame3(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRepetionEventNotic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 EventID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->eventid(), target);
  }
  
  // optional uint32 MapID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->mapid(), target);
  }
  
  // optional uint32 Parame1 = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->parame1(), target);
  }
  
  // optional uint32 Parame2 = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->parame2(), target);
  }
  
  // optional string Parame3 = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->parame3(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRepetionEventNotic::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 EventID = 1;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->eventid());
    }
    
    // optional uint32 MapID = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 Parame1 = 3;
    if (has_parame1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->parame1());
    }
    
    // optional uint32 Parame2 = 4;
    if (has_parame2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->parame2());
    }
    
    // optional string Parame3 = 5;
    if (has_parame3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->parame3());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRepetionEventNotic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRepetionEventNotic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRepetionEventNotic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRepetionEventNotic::MergeFrom(const CMessageRepetionEventNotic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_eventid(from.eventid());
    }
    if (from._has_bit(1)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(2)) {
      set_parame1(from.parame1());
    }
    if (from._has_bit(3)) {
      set_parame2(from.parame2());
    }
    if (from._has_bit(4)) {
      set_parame3(from.parame3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRepetionEventNotic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRepetionEventNotic::CopyFrom(const CMessageRepetionEventNotic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRepetionEventNotic::Swap(CMessageRepetionEventNotic* other) {
  if (other != this) {
    std::swap(eventid_, other->eventid_);
    std::swap(mapid_, other->mapid_);
    std::swap(parame1_, other->parame1_);
    std::swap(parame2_, other->parame2_);
    std::swap(parame3_, other->parame3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRepetionEventNotic::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRepetionEventNotic::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRepetionEventNotic::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRepetionEventNotic_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageS2CBattleJoinNotice::kBattleIDFieldNumber;
const int CMessageS2CBattleJoinNotice::kMapIDFieldNumber;
const int CMessageS2CBattleJoinNotice::kTypeFieldNumber;
const int CMessageS2CBattleJoinNotice::kKeyFieldNumber;
#endif  // !_MSC_VER

CMessageS2CBattleJoinNotice::CMessageS2CBattleJoinNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageS2CBattleJoinNotice::InitAsDefaultInstance() {}

CMessageS2CBattleJoinNotice::CMessageS2CBattleJoinNotice(const CMessageS2CBattleJoinNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageS2CBattleJoinNotice::SharedCtor() {
  _cached_size_ = 0;
  battleid_ = 0u;
  mapid_ = 0u;
  type_ = 0u;
  key_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageS2CBattleJoinNotice::~CMessageS2CBattleJoinNotice() {
  SharedDtor();
}

void CMessageS2CBattleJoinNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageS2CBattleJoinNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageS2CBattleJoinNotice_descriptor_;
}

const CMessageS2CBattleJoinNotice& CMessageS2CBattleJoinNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_repetionmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageS2CBattleJoinNotice* CMessageS2CBattleJoinNotice::default_instance_ = NULL;

CMessageS2CBattleJoinNotice* CMessageS2CBattleJoinNotice::New() const {
  return new CMessageS2CBattleJoinNotice;
}

void CMessageS2CBattleJoinNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battleid_ = 0u;
    mapid_ = 0u;
    type_ = 0u;
    key_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageS2CBattleJoinNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 BattleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &battleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Type;
        break;
      }
      
      // optional uint32 Type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Type:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Key;
        break;
      }
      
      // optional uint32 Key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Key:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &key_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageS2CBattleJoinNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageS2CBattleJoinNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 BattleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->battleid(), output);
  }
  
  // optional uint32 MapID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->mapid(), output);
  }
  
  // optional uint32 Type = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->type(), output);
  }
  
  // optional uint32 Key = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->key(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageS2CBattleJoinNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 BattleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->battleid(), target);
  }
  
  // optional uint32 MapID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->mapid(), target);
  }
  
  // optional uint32 Type = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->type(), target);
  }
  
  // optional uint32 Key = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->key(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageS2CBattleJoinNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BattleID = 1;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->battleid());
    }
    
    // optional uint32 MapID = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 Type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
    // optional uint32 Key = 4;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->key());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageS2CBattleJoinNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageS2CBattleJoinNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageS2CBattleJoinNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageS2CBattleJoinNotice::MergeFrom(const CMessageS2CBattleJoinNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_battleid(from.battleid());
    }
    if (from._has_bit(1)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(2)) {
      set_type(from.type());
    }
    if (from._has_bit(3)) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageS2CBattleJoinNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageS2CBattleJoinNotice::CopyFrom(const CMessageS2CBattleJoinNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageS2CBattleJoinNotice::Swap(CMessageS2CBattleJoinNotice* other) {
  if (other != this) {
    std::swap(battleid_, other->battleid_);
    std::swap(mapid_, other->mapid_);
    std::swap(type_, other->type_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageS2CBattleJoinNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageS2CBattleJoinNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageS2CBattleJoinNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageS2CBattleJoinNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBattleWaitResponse::kBattleIDFieldNumber;
const int CMessageBattleWaitResponse::kMapIDFieldNumber;
#endif  // !_MSC_VER

CMessageBattleWaitResponse::CMessageBattleWaitResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBattleWaitResponse::InitAsDefaultInstance() {}

CMessageBattleWaitResponse::CMessageBattleWaitResponse(const CMessageBattleWaitResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBattleWaitResponse::SharedCtor() {
  _cached_size_ = 0;
  battleid_ = 0u;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBattleWaitResponse::~CMessageBattleWaitResponse() {
  SharedDtor();
}

void CMessageBattleWaitResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageBattleWaitResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBattleWaitResponse_descriptor_;
}

const CMessageBattleWaitResponse& CMessageBattleWaitResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_repetionmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageBattleWaitResponse* CMessageBattleWaitResponse::default_instance_ = NULL;

CMessageBattleWaitResponse* CMessageBattleWaitResponse::New() const {
  return new CMessageBattleWaitResponse;
}

void CMessageBattleWaitResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battleid_ = 0u;
    mapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBattleWaitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 BattleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &battleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBattleWaitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBattleWaitResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 BattleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->battleid(), output);
  }
  
  // optional uint32 MapID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->mapid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBattleWaitResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 BattleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->battleid(), target);
  }
  
  // optional uint32 MapID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->mapid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBattleWaitResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BattleID = 1;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->battleid());
    }
    
    // optional uint32 MapID = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBattleWaitResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBattleWaitResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBattleWaitResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBattleWaitResponse::MergeFrom(const CMessageBattleWaitResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_battleid(from.battleid());
    }
    if (from._has_bit(1)) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBattleWaitResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBattleWaitResponse::CopyFrom(const CMessageBattleWaitResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBattleWaitResponse::Swap(CMessageBattleWaitResponse* other) {
  if (other != this) {
    std::swap(battleid_, other->battleid_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBattleWaitResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBattleWaitResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBattleWaitResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBattleWaitResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageC2SBattleJoin::kBattleIDFieldNumber;
const int CMessageC2SBattleJoin::kMapIDFieldNumber;
#endif  // !_MSC_VER

CMessageC2SBattleJoin::CMessageC2SBattleJoin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageC2SBattleJoin::InitAsDefaultInstance() {}

CMessageC2SBattleJoin::CMessageC2SBattleJoin(const CMessageC2SBattleJoin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageC2SBattleJoin::SharedCtor() {
  _cached_size_ = 0;
  battleid_ = 0u;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageC2SBattleJoin::~CMessageC2SBattleJoin() {
  SharedDtor();
}

void CMessageC2SBattleJoin::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageC2SBattleJoin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageC2SBattleJoin_descriptor_;
}

const CMessageC2SBattleJoin& CMessageC2SBattleJoin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_repetionmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageC2SBattleJoin* CMessageC2SBattleJoin::default_instance_ = NULL;

CMessageC2SBattleJoin* CMessageC2SBattleJoin::New() const {
  return new CMessageC2SBattleJoin;
}

void CMessageC2SBattleJoin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battleid_ = 0u;
    mapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageC2SBattleJoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 BattleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &battleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageC2SBattleJoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageC2SBattleJoin::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 BattleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->battleid(), output);
  }
  
  // optional uint32 MapID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->mapid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageC2SBattleJoin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 BattleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->battleid(), target);
  }
  
  // optional uint32 MapID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->mapid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageC2SBattleJoin::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BattleID = 1;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->battleid());
    }
    
    // optional uint32 MapID = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageC2SBattleJoin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageC2SBattleJoin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageC2SBattleJoin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageC2SBattleJoin::MergeFrom(const CMessageC2SBattleJoin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_battleid(from.battleid());
    }
    if (from._has_bit(1)) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageC2SBattleJoin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageC2SBattleJoin::CopyFrom(const CMessageC2SBattleJoin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageC2SBattleJoin::Swap(CMessageC2SBattleJoin* other) {
  if (other != this) {
    std::swap(battleid_, other->battleid_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageC2SBattleJoin::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageC2SBattleJoin::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageC2SBattleJoin::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageC2SBattleJoin_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageC2SBattleJoinRandomPlace::kBattleIDFieldNumber;
const int CMessageC2SBattleJoinRandomPlace::kMapIDFieldNumber;
const int CMessageC2SBattleJoinRandomPlace::kKeyFieldNumber;
#endif  // !_MSC_VER

CMessageC2SBattleJoinRandomPlace::CMessageC2SBattleJoinRandomPlace()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageC2SBattleJoinRandomPlace::InitAsDefaultInstance() {}

CMessageC2SBattleJoinRandomPlace::CMessageC2SBattleJoinRandomPlace(const CMessageC2SBattleJoinRandomPlace& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageC2SBattleJoinRandomPlace::SharedCtor() {
  _cached_size_ = 0;
  battleid_ = 0u;
  mapid_ = 0u;
  key_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageC2SBattleJoinRandomPlace::~CMessageC2SBattleJoinRandomPlace() {
  SharedDtor();
}

void CMessageC2SBattleJoinRandomPlace::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageC2SBattleJoinRandomPlace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageC2SBattleJoinRandomPlace_descriptor_;
}

const CMessageC2SBattleJoinRandomPlace& CMessageC2SBattleJoinRandomPlace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_repetionmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageC2SBattleJoinRandomPlace* CMessageC2SBattleJoinRandomPlace::default_instance_ = NULL;

CMessageC2SBattleJoinRandomPlace* CMessageC2SBattleJoinRandomPlace::New() const {
  return new CMessageC2SBattleJoinRandomPlace;
}

void CMessageC2SBattleJoinRandomPlace::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battleid_ = 0u;
    mapid_ = 0u;
    key_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageC2SBattleJoinRandomPlace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 BattleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &battleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Key;
        break;
      }
      
      // optional uint32 Key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Key:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &key_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageC2SBattleJoinRandomPlace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageC2SBattleJoinRandomPlace::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 BattleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->battleid(), output);
  }
  
  // optional uint32 MapID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->mapid(), output);
  }
  
  // optional uint32 Key = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->key(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageC2SBattleJoinRandomPlace::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 BattleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->battleid(), target);
  }
  
  // optional uint32 MapID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->mapid(), target);
  }
  
  // optional uint32 Key = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->key(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageC2SBattleJoinRandomPlace::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BattleID = 1;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->battleid());
    }
    
    // optional uint32 MapID = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 Key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->key());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageC2SBattleJoinRandomPlace::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageC2SBattleJoinRandomPlace* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageC2SBattleJoinRandomPlace*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageC2SBattleJoinRandomPlace::MergeFrom(const CMessageC2SBattleJoinRandomPlace& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_battleid(from.battleid());
    }
    if (from._has_bit(1)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(2)) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageC2SBattleJoinRandomPlace::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageC2SBattleJoinRandomPlace::CopyFrom(const CMessageC2SBattleJoinRandomPlace& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageC2SBattleJoinRandomPlace::Swap(CMessageC2SBattleJoinRandomPlace* other) {
  if (other != this) {
    std::swap(battleid_, other->battleid_);
    std::swap(mapid_, other->mapid_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageC2SBattleJoinRandomPlace::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageC2SBattleJoinRandomPlace::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageC2SBattleJoinRandomPlace::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageC2SBattleJoinRandomPlace_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBattleTeamWaitRequest::kBattleIDFieldNumber;
const int CMessageBattleTeamWaitRequest::kCharIDFieldNumber;
const int CMessageBattleTeamWaitRequest::kMapIDFieldNumber;
#endif  // !_MSC_VER

CMessageBattleTeamWaitRequest::CMessageBattleTeamWaitRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBattleTeamWaitRequest::InitAsDefaultInstance() {}

CMessageBattleTeamWaitRequest::CMessageBattleTeamWaitRequest(const CMessageBattleTeamWaitRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBattleTeamWaitRequest::SharedCtor() {
  _cached_size_ = 0;
  battleid_ = 0u;
  charid_ = 0u;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBattleTeamWaitRequest::~CMessageBattleTeamWaitRequest() {
  SharedDtor();
}

void CMessageBattleTeamWaitRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageBattleTeamWaitRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBattleTeamWaitRequest_descriptor_;
}

const CMessageBattleTeamWaitRequest& CMessageBattleTeamWaitRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_repetionmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageBattleTeamWaitRequest* CMessageBattleTeamWaitRequest::default_instance_ = NULL;

CMessageBattleTeamWaitRequest* CMessageBattleTeamWaitRequest::New() const {
  return new CMessageBattleTeamWaitRequest;
}

void CMessageBattleTeamWaitRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battleid_ = 0u;
    charid_ = 0u;
    mapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBattleTeamWaitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 BattleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &battleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBattleTeamWaitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBattleTeamWaitRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 BattleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->battleid(), output);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charid(), output);
  }
  
  // optional uint32 MapID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->mapid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBattleTeamWaitRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 BattleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->battleid(), target);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charid(), target);
  }
  
  // optional uint32 MapID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->mapid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBattleTeamWaitRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BattleID = 1;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->battleid());
    }
    
    // optional uint32 CharID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 MapID = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBattleTeamWaitRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBattleTeamWaitRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBattleTeamWaitRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBattleTeamWaitRequest::MergeFrom(const CMessageBattleTeamWaitRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_battleid(from.battleid());
    }
    if (from._has_bit(1)) {
      set_charid(from.charid());
    }
    if (from._has_bit(2)) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBattleTeamWaitRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBattleTeamWaitRequest::CopyFrom(const CMessageBattleTeamWaitRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBattleTeamWaitRequest::Swap(CMessageBattleTeamWaitRequest* other) {
  if (other != this) {
    std::swap(battleid_, other->battleid_);
    std::swap(charid_, other->charid_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBattleTeamWaitRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBattleTeamWaitRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBattleTeamWaitRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBattleTeamWaitRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBattleSingleWaitRequest::kBattleIDFieldNumber;
const int CMessageBattleSingleWaitRequest::kCharIDFieldNumber;
const int CMessageBattleSingleWaitRequest::kMapIDFieldNumber;
#endif  // !_MSC_VER

CMessageBattleSingleWaitRequest::CMessageBattleSingleWaitRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBattleSingleWaitRequest::InitAsDefaultInstance() {}

CMessageBattleSingleWaitRequest::CMessageBattleSingleWaitRequest(const CMessageBattleSingleWaitRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBattleSingleWaitRequest::SharedCtor() {
  _cached_size_ = 0;
  battleid_ = 0u;
  charid_ = 0u;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBattleSingleWaitRequest::~CMessageBattleSingleWaitRequest() {
  SharedDtor();
}

void CMessageBattleSingleWaitRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageBattleSingleWaitRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBattleSingleWaitRequest_descriptor_;
}

const CMessageBattleSingleWaitRequest& CMessageBattleSingleWaitRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_repetionmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageBattleSingleWaitRequest* CMessageBattleSingleWaitRequest::default_instance_ = NULL;

CMessageBattleSingleWaitRequest* CMessageBattleSingleWaitRequest::New() const {
  return new CMessageBattleSingleWaitRequest;
}

void CMessageBattleSingleWaitRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battleid_ = 0u;
    charid_ = 0u;
    mapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBattleSingleWaitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 BattleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &battleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBattleSingleWaitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBattleSingleWaitRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 BattleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->battleid(), output);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charid(), output);
  }
  
  // optional uint32 MapID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->mapid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBattleSingleWaitRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 BattleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->battleid(), target);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charid(), target);
  }
  
  // optional uint32 MapID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->mapid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBattleSingleWaitRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BattleID = 1;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->battleid());
    }
    
    // optional uint32 CharID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 MapID = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBattleSingleWaitRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBattleSingleWaitRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBattleSingleWaitRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBattleSingleWaitRequest::MergeFrom(const CMessageBattleSingleWaitRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_battleid(from.battleid());
    }
    if (from._has_bit(1)) {
      set_charid(from.charid());
    }
    if (from._has_bit(2)) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBattleSingleWaitRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBattleSingleWaitRequest::CopyFrom(const CMessageBattleSingleWaitRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBattleSingleWaitRequest::Swap(CMessageBattleSingleWaitRequest* other) {
  if (other != this) {
    std::swap(battleid_, other->battleid_);
    std::swap(charid_, other->charid_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBattleSingleWaitRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBattleSingleWaitRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBattleSingleWaitRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBattleSingleWaitRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageC2SBattleWaitLeaveRequest::kBattleIDFieldNumber;
const int CMessageC2SBattleWaitLeaveRequest::kMapIDFieldNumber;
#endif  // !_MSC_VER

CMessageC2SBattleWaitLeaveRequest::CMessageC2SBattleWaitLeaveRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageC2SBattleWaitLeaveRequest::InitAsDefaultInstance() {}

CMessageC2SBattleWaitLeaveRequest::CMessageC2SBattleWaitLeaveRequest(const CMessageC2SBattleWaitLeaveRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageC2SBattleWaitLeaveRequest::SharedCtor() {
  _cached_size_ = 0;
  battleid_ = 0u;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageC2SBattleWaitLeaveRequest::~CMessageC2SBattleWaitLeaveRequest() {
  SharedDtor();
}

void CMessageC2SBattleWaitLeaveRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageC2SBattleWaitLeaveRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageC2SBattleWaitLeaveRequest_descriptor_;
}

const CMessageC2SBattleWaitLeaveRequest& CMessageC2SBattleWaitLeaveRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_repetionmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageC2SBattleWaitLeaveRequest* CMessageC2SBattleWaitLeaveRequest::default_instance_ = NULL;

CMessageC2SBattleWaitLeaveRequest* CMessageC2SBattleWaitLeaveRequest::New() const {
  return new CMessageC2SBattleWaitLeaveRequest;
}

void CMessageC2SBattleWaitLeaveRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battleid_ = 0u;
    mapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageC2SBattleWaitLeaveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 BattleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &battleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageC2SBattleWaitLeaveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageC2SBattleWaitLeaveRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 BattleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->battleid(), output);
  }
  
  // optional uint32 MapID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->mapid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageC2SBattleWaitLeaveRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 BattleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->battleid(), target);
  }
  
  // optional uint32 MapID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->mapid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageC2SBattleWaitLeaveRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BattleID = 1;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->battleid());
    }
    
    // optional uint32 MapID = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageC2SBattleWaitLeaveRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageC2SBattleWaitLeaveRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageC2SBattleWaitLeaveRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageC2SBattleWaitLeaveRequest::MergeFrom(const CMessageC2SBattleWaitLeaveRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_battleid(from.battleid());
    }
    if (from._has_bit(1)) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageC2SBattleWaitLeaveRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageC2SBattleWaitLeaveRequest::CopyFrom(const CMessageC2SBattleWaitLeaveRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageC2SBattleWaitLeaveRequest::Swap(CMessageC2SBattleWaitLeaveRequest* other) {
  if (other != this) {
    std::swap(battleid_, other->battleid_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageC2SBattleWaitLeaveRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageC2SBattleWaitLeaveRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageC2SBattleWaitLeaveRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageC2SBattleWaitLeaveRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageS2CBattleWaitLeaveResponse::kBattleIDFieldNumber;
const int CMessageS2CBattleWaitLeaveResponse::kMapIDFieldNumber;
#endif  // !_MSC_VER

CMessageS2CBattleWaitLeaveResponse::CMessageS2CBattleWaitLeaveResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageS2CBattleWaitLeaveResponse::InitAsDefaultInstance() {}

CMessageS2CBattleWaitLeaveResponse::CMessageS2CBattleWaitLeaveResponse(const CMessageS2CBattleWaitLeaveResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageS2CBattleWaitLeaveResponse::SharedCtor() {
  _cached_size_ = 0;
  battleid_ = 0u;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageS2CBattleWaitLeaveResponse::~CMessageS2CBattleWaitLeaveResponse() {
  SharedDtor();
}

void CMessageS2CBattleWaitLeaveResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageS2CBattleWaitLeaveResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageS2CBattleWaitLeaveResponse_descriptor_;
}

const CMessageS2CBattleWaitLeaveResponse& CMessageS2CBattleWaitLeaveResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_repetionmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageS2CBattleWaitLeaveResponse* CMessageS2CBattleWaitLeaveResponse::default_instance_ = NULL;

CMessageS2CBattleWaitLeaveResponse* CMessageS2CBattleWaitLeaveResponse::New() const {
  return new CMessageS2CBattleWaitLeaveResponse;
}

void CMessageS2CBattleWaitLeaveResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battleid_ = 0u;
    mapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageS2CBattleWaitLeaveResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 BattleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &battleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageS2CBattleWaitLeaveResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageS2CBattleWaitLeaveResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 BattleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->battleid(), output);
  }
  
  // optional uint32 MapID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->mapid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageS2CBattleWaitLeaveResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 BattleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->battleid(), target);
  }
  
  // optional uint32 MapID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->mapid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageS2CBattleWaitLeaveResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BattleID = 1;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->battleid());
    }
    
    // optional uint32 MapID = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageS2CBattleWaitLeaveResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageS2CBattleWaitLeaveResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageS2CBattleWaitLeaveResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageS2CBattleWaitLeaveResponse::MergeFrom(const CMessageS2CBattleWaitLeaveResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_battleid(from.battleid());
    }
    if (from._has_bit(1)) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageS2CBattleWaitLeaveResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageS2CBattleWaitLeaveResponse::CopyFrom(const CMessageS2CBattleWaitLeaveResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageS2CBattleWaitLeaveResponse::Swap(CMessageS2CBattleWaitLeaveResponse* other) {
  if (other != this) {
    std::swap(battleid_, other->battleid_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageS2CBattleWaitLeaveResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageS2CBattleWaitLeaveResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageS2CBattleWaitLeaveResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageS2CBattleWaitLeaveResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMessageC2SRepetionLeave::CMessageC2SRepetionLeave()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageC2SRepetionLeave::InitAsDefaultInstance() {}

CMessageC2SRepetionLeave::CMessageC2SRepetionLeave(const CMessageC2SRepetionLeave& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageC2SRepetionLeave::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageC2SRepetionLeave::~CMessageC2SRepetionLeave() {
  SharedDtor();
}

void CMessageC2SRepetionLeave::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageC2SRepetionLeave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageC2SRepetionLeave_descriptor_;
}

const CMessageC2SRepetionLeave& CMessageC2SRepetionLeave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_repetionmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageC2SRepetionLeave* CMessageC2SRepetionLeave::default_instance_ = NULL;

CMessageC2SRepetionLeave* CMessageC2SRepetionLeave::New() const {
  return new CMessageC2SRepetionLeave;
}

void CMessageC2SRepetionLeave::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageC2SRepetionLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMessageC2SRepetionLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageC2SRepetionLeave::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageC2SRepetionLeave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageC2SRepetionLeave::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageC2SRepetionLeave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageC2SRepetionLeave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageC2SRepetionLeave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageC2SRepetionLeave::MergeFrom(const CMessageC2SRepetionLeave& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageC2SRepetionLeave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageC2SRepetionLeave::CopyFrom(const CMessageC2SRepetionLeave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageC2SRepetionLeave::Swap(CMessageC2SRepetionLeave* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageC2SRepetionLeave::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageC2SRepetionLeave::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageC2SRepetionLeave::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageC2SRepetionLeave_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageRepetionIndexNotice::kRepetionIndexFieldNumber;
const int CMessageRepetionIndexNotice::kTypeFieldNumber;
const int CMessageRepetionIndexNotice::kRoleIDFieldNumber;
#endif  // !_MSC_VER

CMessageRepetionIndexNotice::CMessageRepetionIndexNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRepetionIndexNotice::InitAsDefaultInstance() {}

CMessageRepetionIndexNotice::CMessageRepetionIndexNotice(const CMessageRepetionIndexNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRepetionIndexNotice::SharedCtor() {
  _cached_size_ = 0;
  repetionindex_ = 0u;
  type_ = 0u;
  roleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRepetionIndexNotice::~CMessageRepetionIndexNotice() {
  SharedDtor();
}

void CMessageRepetionIndexNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageRepetionIndexNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRepetionIndexNotice_descriptor_;
}

const CMessageRepetionIndexNotice& CMessageRepetionIndexNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_repetionmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRepetionIndexNotice* CMessageRepetionIndexNotice::default_instance_ = NULL;

CMessageRepetionIndexNotice* CMessageRepetionIndexNotice::New() const {
  return new CMessageRepetionIndexNotice;
}

void CMessageRepetionIndexNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    repetionindex_ = 0u;
    type_ = 0u;
    roleid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRepetionIndexNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RepetionIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &repetionindex_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }
      
      // optional uint32 Type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Type:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageRepetionIndexNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRepetionIndexNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RepetionIndex = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->repetionindex(), output);
  }
  
  // optional uint32 Type = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->type(), output);
  }
  
  // optional uint32 RoleID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->roleid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRepetionIndexNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RepetionIndex = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->repetionindex(), target);
  }
  
  // optional uint32 Type = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->type(), target);
  }
  
  // optional uint32 RoleID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->roleid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRepetionIndexNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RepetionIndex = 1;
    if (has_repetionindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->repetionindex());
    }
    
    // optional uint32 Type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
    // optional uint32 RoleID = 3;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRepetionIndexNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRepetionIndexNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRepetionIndexNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRepetionIndexNotice::MergeFrom(const CMessageRepetionIndexNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_repetionindex(from.repetionindex());
    }
    if (from._has_bit(1)) {
      set_type(from.type());
    }
    if (from._has_bit(2)) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRepetionIndexNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRepetionIndexNotice::CopyFrom(const CMessageRepetionIndexNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRepetionIndexNotice::Swap(CMessageRepetionIndexNotice* other) {
  if (other != this) {
    std::swap(repetionindex_, other->repetionindex_);
    std::swap(type_, other->type_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRepetionIndexNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRepetionIndexNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRepetionIndexNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRepetionIndexNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageRepetionUseItemIntoNotice::kRepetionIndexFieldNumber;
const int CMessageRepetionUseItemIntoNotice::kItemIDFieldNumber;
#endif  // !_MSC_VER

CMessageRepetionUseItemIntoNotice::CMessageRepetionUseItemIntoNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRepetionUseItemIntoNotice::InitAsDefaultInstance() {}

CMessageRepetionUseItemIntoNotice::CMessageRepetionUseItemIntoNotice(const CMessageRepetionUseItemIntoNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRepetionUseItemIntoNotice::SharedCtor() {
  _cached_size_ = 0;
  repetionindex_ = 0u;
  itemid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRepetionUseItemIntoNotice::~CMessageRepetionUseItemIntoNotice() {
  SharedDtor();
}

void CMessageRepetionUseItemIntoNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageRepetionUseItemIntoNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRepetionUseItemIntoNotice_descriptor_;
}

const CMessageRepetionUseItemIntoNotice& CMessageRepetionUseItemIntoNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_repetionmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRepetionUseItemIntoNotice* CMessageRepetionUseItemIntoNotice::default_instance_ = NULL;

CMessageRepetionUseItemIntoNotice* CMessageRepetionUseItemIntoNotice::New() const {
  return new CMessageRepetionUseItemIntoNotice;
}

void CMessageRepetionUseItemIntoNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    repetionindex_ = 0u;
    itemid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRepetionUseItemIntoNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RepetionIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &repetionindex_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ItemID;
        break;
      }
      
      // optional uint32 ItemID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageRepetionUseItemIntoNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRepetionUseItemIntoNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RepetionIndex = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->repetionindex(), output);
  }
  
  // optional uint32 ItemID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->itemid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRepetionUseItemIntoNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RepetionIndex = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->repetionindex(), target);
  }
  
  // optional uint32 ItemID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->itemid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRepetionUseItemIntoNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RepetionIndex = 1;
    if (has_repetionindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->repetionindex());
    }
    
    // optional uint32 ItemID = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRepetionUseItemIntoNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRepetionUseItemIntoNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRepetionUseItemIntoNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRepetionUseItemIntoNotice::MergeFrom(const CMessageRepetionUseItemIntoNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_repetionindex(from.repetionindex());
    }
    if (from._has_bit(1)) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRepetionUseItemIntoNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRepetionUseItemIntoNotice::CopyFrom(const CMessageRepetionUseItemIntoNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRepetionUseItemIntoNotice::Swap(CMessageRepetionUseItemIntoNotice* other) {
  if (other != this) {
    std::swap(repetionindex_, other->repetionindex_);
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRepetionUseItemIntoNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRepetionUseItemIntoNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRepetionUseItemIntoNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRepetionUseItemIntoNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMessageRepetionUseItemIntoResponse::CMessageRepetionUseItemIntoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRepetionUseItemIntoResponse::InitAsDefaultInstance() {}

CMessageRepetionUseItemIntoResponse::CMessageRepetionUseItemIntoResponse(const CMessageRepetionUseItemIntoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRepetionUseItemIntoResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRepetionUseItemIntoResponse::~CMessageRepetionUseItemIntoResponse() {
  SharedDtor();
}

void CMessageRepetionUseItemIntoResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageRepetionUseItemIntoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRepetionUseItemIntoResponse_descriptor_;
}

const CMessageRepetionUseItemIntoResponse& CMessageRepetionUseItemIntoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_repetionmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRepetionUseItemIntoResponse* CMessageRepetionUseItemIntoResponse::default_instance_ = NULL;

CMessageRepetionUseItemIntoResponse* CMessageRepetionUseItemIntoResponse::New() const {
  return new CMessageRepetionUseItemIntoResponse;
}

void CMessageRepetionUseItemIntoResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRepetionUseItemIntoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMessageRepetionUseItemIntoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRepetionUseItemIntoResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRepetionUseItemIntoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRepetionUseItemIntoResponse::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRepetionUseItemIntoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRepetionUseItemIntoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRepetionUseItemIntoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRepetionUseItemIntoResponse::MergeFrom(const CMessageRepetionUseItemIntoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRepetionUseItemIntoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRepetionUseItemIntoResponse::CopyFrom(const CMessageRepetionUseItemIntoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRepetionUseItemIntoResponse::Swap(CMessageRepetionUseItemIntoResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRepetionUseItemIntoResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRepetionUseItemIntoResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRepetionUseItemIntoResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRepetionUseItemIntoResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageRepetionFuncPlayerClick::kNpcIDFieldNumber;
#endif  // !_MSC_VER

CMessageRepetionFuncPlayerClick::CMessageRepetionFuncPlayerClick()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRepetionFuncPlayerClick::InitAsDefaultInstance() {}

CMessageRepetionFuncPlayerClick::CMessageRepetionFuncPlayerClick(const CMessageRepetionFuncPlayerClick& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRepetionFuncPlayerClick::SharedCtor() {
  _cached_size_ = 0;
  npcid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRepetionFuncPlayerClick::~CMessageRepetionFuncPlayerClick() {
  SharedDtor();
}

void CMessageRepetionFuncPlayerClick::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageRepetionFuncPlayerClick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRepetionFuncPlayerClick_descriptor_;
}

const CMessageRepetionFuncPlayerClick& CMessageRepetionFuncPlayerClick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_repetionmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRepetionFuncPlayerClick* CMessageRepetionFuncPlayerClick::default_instance_ = NULL;

CMessageRepetionFuncPlayerClick* CMessageRepetionFuncPlayerClick::New() const {
  return new CMessageRepetionFuncPlayerClick;
}

void CMessageRepetionFuncPlayerClick::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npcid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRepetionFuncPlayerClick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 NpcID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageRepetionFuncPlayerClick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRepetionFuncPlayerClick::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 NpcID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->npcid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRepetionFuncPlayerClick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 NpcID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->npcid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRepetionFuncPlayerClick::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 NpcID = 1;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRepetionFuncPlayerClick::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRepetionFuncPlayerClick* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRepetionFuncPlayerClick*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRepetionFuncPlayerClick::MergeFrom(const CMessageRepetionFuncPlayerClick& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_npcid(from.npcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRepetionFuncPlayerClick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRepetionFuncPlayerClick::CopyFrom(const CMessageRepetionFuncPlayerClick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRepetionFuncPlayerClick::Swap(CMessageRepetionFuncPlayerClick* other) {
  if (other != this) {
    std::swap(npcid_, other->npcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRepetionFuncPlayerClick::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRepetionFuncPlayerClick::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRepetionFuncPlayerClick::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRepetionFuncPlayerClick_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBattleTeamFixWaitRequest::kBattleIDFieldNumber;
const int CMessageBattleTeamFixWaitRequest::kCharIDFieldNumber;
const int CMessageBattleTeamFixWaitRequest::kMapIDFieldNumber;
#endif  // !_MSC_VER

CMessageBattleTeamFixWaitRequest::CMessageBattleTeamFixWaitRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBattleTeamFixWaitRequest::InitAsDefaultInstance() {}

CMessageBattleTeamFixWaitRequest::CMessageBattleTeamFixWaitRequest(const CMessageBattleTeamFixWaitRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBattleTeamFixWaitRequest::SharedCtor() {
  _cached_size_ = 0;
  battleid_ = 0u;
  charid_ = 0u;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBattleTeamFixWaitRequest::~CMessageBattleTeamFixWaitRequest() {
  SharedDtor();
}

void CMessageBattleTeamFixWaitRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageBattleTeamFixWaitRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBattleTeamFixWaitRequest_descriptor_;
}

const CMessageBattleTeamFixWaitRequest& CMessageBattleTeamFixWaitRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_repetionmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageBattleTeamFixWaitRequest* CMessageBattleTeamFixWaitRequest::default_instance_ = NULL;

CMessageBattleTeamFixWaitRequest* CMessageBattleTeamFixWaitRequest::New() const {
  return new CMessageBattleTeamFixWaitRequest;
}

void CMessageBattleTeamFixWaitRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battleid_ = 0u;
    charid_ = 0u;
    mapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBattleTeamFixWaitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 BattleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &battleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBattleTeamFixWaitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBattleTeamFixWaitRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 BattleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->battleid(), output);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charid(), output);
  }
  
  // optional uint32 MapID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->mapid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBattleTeamFixWaitRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 BattleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->battleid(), target);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charid(), target);
  }
  
  // optional uint32 MapID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->mapid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBattleTeamFixWaitRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BattleID = 1;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->battleid());
    }
    
    // optional uint32 CharID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 MapID = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBattleTeamFixWaitRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBattleTeamFixWaitRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBattleTeamFixWaitRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBattleTeamFixWaitRequest::MergeFrom(const CMessageBattleTeamFixWaitRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_battleid(from.battleid());
    }
    if (from._has_bit(1)) {
      set_charid(from.charid());
    }
    if (from._has_bit(2)) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBattleTeamFixWaitRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBattleTeamFixWaitRequest::CopyFrom(const CMessageBattleTeamFixWaitRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBattleTeamFixWaitRequest::Swap(CMessageBattleTeamFixWaitRequest* other) {
  if (other != this) {
    std::swap(battleid_, other->battleid_);
    std::swap(charid_, other->charid_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBattleTeamFixWaitRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBattleTeamFixWaitRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBattleTeamFixWaitRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBattleTeamFixWaitRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBattleSingleFixWaitRequest::kBattleIDFieldNumber;
const int CMessageBattleSingleFixWaitRequest::kCharIDFieldNumber;
const int CMessageBattleSingleFixWaitRequest::kMapIDFieldNumber;
#endif  // !_MSC_VER

CMessageBattleSingleFixWaitRequest::CMessageBattleSingleFixWaitRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBattleSingleFixWaitRequest::InitAsDefaultInstance() {}

CMessageBattleSingleFixWaitRequest::CMessageBattleSingleFixWaitRequest(const CMessageBattleSingleFixWaitRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBattleSingleFixWaitRequest::SharedCtor() {
  _cached_size_ = 0;
  battleid_ = 0u;
  charid_ = 0u;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBattleSingleFixWaitRequest::~CMessageBattleSingleFixWaitRequest() {
  SharedDtor();
}

void CMessageBattleSingleFixWaitRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageBattleSingleFixWaitRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBattleSingleFixWaitRequest_descriptor_;
}

const CMessageBattleSingleFixWaitRequest& CMessageBattleSingleFixWaitRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_repetionmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageBattleSingleFixWaitRequest* CMessageBattleSingleFixWaitRequest::default_instance_ = NULL;

CMessageBattleSingleFixWaitRequest* CMessageBattleSingleFixWaitRequest::New() const {
  return new CMessageBattleSingleFixWaitRequest;
}

void CMessageBattleSingleFixWaitRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battleid_ = 0u;
    charid_ = 0u;
    mapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBattleSingleFixWaitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 BattleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &battleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBattleSingleFixWaitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBattleSingleFixWaitRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 BattleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->battleid(), output);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charid(), output);
  }
  
  // optional uint32 MapID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->mapid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBattleSingleFixWaitRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 BattleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->battleid(), target);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charid(), target);
  }
  
  // optional uint32 MapID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->mapid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBattleSingleFixWaitRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BattleID = 1;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->battleid());
    }
    
    // optional uint32 CharID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 MapID = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBattleSingleFixWaitRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBattleSingleFixWaitRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBattleSingleFixWaitRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBattleSingleFixWaitRequest::MergeFrom(const CMessageBattleSingleFixWaitRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_battleid(from.battleid());
    }
    if (from._has_bit(1)) {
      set_charid(from.charid());
    }
    if (from._has_bit(2)) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBattleSingleFixWaitRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBattleSingleFixWaitRequest::CopyFrom(const CMessageBattleSingleFixWaitRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBattleSingleFixWaitRequest::Swap(CMessageBattleSingleFixWaitRequest* other) {
  if (other != this) {
    std::swap(battleid_, other->battleid_);
    std::swap(charid_, other->charid_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBattleSingleFixWaitRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBattleSingleFixWaitRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBattleSingleFixWaitRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBattleSingleFixWaitRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageHaveSignUpBattle::kBattleIDFieldNumber;
#endif  // !_MSC_VER

CMessageHaveSignUpBattle::CMessageHaveSignUpBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageHaveSignUpBattle::InitAsDefaultInstance() {}

CMessageHaveSignUpBattle::CMessageHaveSignUpBattle(const CMessageHaveSignUpBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageHaveSignUpBattle::SharedCtor() {
  _cached_size_ = 0;
  battleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageHaveSignUpBattle::~CMessageHaveSignUpBattle() {
  SharedDtor();
}

void CMessageHaveSignUpBattle::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageHaveSignUpBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageHaveSignUpBattle_descriptor_;
}

const CMessageHaveSignUpBattle& CMessageHaveSignUpBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_repetionmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageHaveSignUpBattle* CMessageHaveSignUpBattle::default_instance_ = NULL;

CMessageHaveSignUpBattle* CMessageHaveSignUpBattle::New() const {
  return new CMessageHaveSignUpBattle;
}

void CMessageHaveSignUpBattle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battleid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageHaveSignUpBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 BattleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &battleid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageHaveSignUpBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageHaveSignUpBattle::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 BattleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->battleid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageHaveSignUpBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 BattleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->battleid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageHaveSignUpBattle::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BattleID = 1;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->battleid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageHaveSignUpBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageHaveSignUpBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageHaveSignUpBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageHaveSignUpBattle::MergeFrom(const CMessageHaveSignUpBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_battleid(from.battleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageHaveSignUpBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageHaveSignUpBattle::CopyFrom(const CMessageHaveSignUpBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageHaveSignUpBattle::Swap(CMessageHaveSignUpBattle* other) {
  if (other != this) {
    std::swap(battleid_, other->battleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageHaveSignUpBattle::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageHaveSignUpBattle::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageHaveSignUpBattle::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageHaveSignUpBattle_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBattleOnTimeOpenNotice::kBattleIDFieldNumber;
const int CMessageBattleOnTimeOpenNotice::kMapIDFieldNumber;
#endif  // !_MSC_VER

CMessageBattleOnTimeOpenNotice::CMessageBattleOnTimeOpenNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBattleOnTimeOpenNotice::InitAsDefaultInstance() {}

CMessageBattleOnTimeOpenNotice::CMessageBattleOnTimeOpenNotice(const CMessageBattleOnTimeOpenNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBattleOnTimeOpenNotice::SharedCtor() {
  _cached_size_ = 0;
  battleid_ = 0u;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBattleOnTimeOpenNotice::~CMessageBattleOnTimeOpenNotice() {
  SharedDtor();
}

void CMessageBattleOnTimeOpenNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageBattleOnTimeOpenNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBattleOnTimeOpenNotice_descriptor_;
}

const CMessageBattleOnTimeOpenNotice& CMessageBattleOnTimeOpenNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_repetionmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageBattleOnTimeOpenNotice* CMessageBattleOnTimeOpenNotice::default_instance_ = NULL;

CMessageBattleOnTimeOpenNotice* CMessageBattleOnTimeOpenNotice::New() const {
  return new CMessageBattleOnTimeOpenNotice;
}

void CMessageBattleOnTimeOpenNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battleid_ = 0u;
    mapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBattleOnTimeOpenNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 BattleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &battleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBattleOnTimeOpenNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBattleOnTimeOpenNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 BattleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->battleid(), output);
  }
  
  // optional uint32 MapID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->mapid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBattleOnTimeOpenNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 BattleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->battleid(), target);
  }
  
  // optional uint32 MapID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->mapid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBattleOnTimeOpenNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BattleID = 1;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->battleid());
    }
    
    // optional uint32 MapID = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBattleOnTimeOpenNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBattleOnTimeOpenNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBattleOnTimeOpenNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBattleOnTimeOpenNotice::MergeFrom(const CMessageBattleOnTimeOpenNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_battleid(from.battleid());
    }
    if (from._has_bit(1)) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBattleOnTimeOpenNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBattleOnTimeOpenNotice::CopyFrom(const CMessageBattleOnTimeOpenNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBattleOnTimeOpenNotice::Swap(CMessageBattleOnTimeOpenNotice* other) {
  if (other != this) {
    std::swap(battleid_, other->battleid_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBattleOnTimeOpenNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBattleOnTimeOpenNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBattleOnTimeOpenNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBattleOnTimeOpenNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageC2SJoinOnTimeOpenBattleRequest::kBattleIDFieldNumber;
const int CMessageC2SJoinOnTimeOpenBattleRequest::kMapIDFieldNumber;
#endif  // !_MSC_VER

CMessageC2SJoinOnTimeOpenBattleRequest::CMessageC2SJoinOnTimeOpenBattleRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageC2SJoinOnTimeOpenBattleRequest::InitAsDefaultInstance() {}

CMessageC2SJoinOnTimeOpenBattleRequest::CMessageC2SJoinOnTimeOpenBattleRequest(const CMessageC2SJoinOnTimeOpenBattleRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageC2SJoinOnTimeOpenBattleRequest::SharedCtor() {
  _cached_size_ = 0;
  battleid_ = 0u;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageC2SJoinOnTimeOpenBattleRequest::~CMessageC2SJoinOnTimeOpenBattleRequest() {
  SharedDtor();
}

void CMessageC2SJoinOnTimeOpenBattleRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageC2SJoinOnTimeOpenBattleRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageC2SJoinOnTimeOpenBattleRequest_descriptor_;
}

const CMessageC2SJoinOnTimeOpenBattleRequest& CMessageC2SJoinOnTimeOpenBattleRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_repetionmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageC2SJoinOnTimeOpenBattleRequest* CMessageC2SJoinOnTimeOpenBattleRequest::default_instance_ = NULL;

CMessageC2SJoinOnTimeOpenBattleRequest* CMessageC2SJoinOnTimeOpenBattleRequest::New() const {
  return new CMessageC2SJoinOnTimeOpenBattleRequest;
}

void CMessageC2SJoinOnTimeOpenBattleRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battleid_ = 0u;
    mapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageC2SJoinOnTimeOpenBattleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 BattleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &battleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageC2SJoinOnTimeOpenBattleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageC2SJoinOnTimeOpenBattleRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 BattleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->battleid(), output);
  }
  
  // optional uint32 MapID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->mapid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageC2SJoinOnTimeOpenBattleRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 BattleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->battleid(), target);
  }
  
  // optional uint32 MapID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->mapid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageC2SJoinOnTimeOpenBattleRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BattleID = 1;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->battleid());
    }
    
    // optional uint32 MapID = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageC2SJoinOnTimeOpenBattleRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageC2SJoinOnTimeOpenBattleRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageC2SJoinOnTimeOpenBattleRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageC2SJoinOnTimeOpenBattleRequest::MergeFrom(const CMessageC2SJoinOnTimeOpenBattleRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_battleid(from.battleid());
    }
    if (from._has_bit(1)) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageC2SJoinOnTimeOpenBattleRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageC2SJoinOnTimeOpenBattleRequest::CopyFrom(const CMessageC2SJoinOnTimeOpenBattleRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageC2SJoinOnTimeOpenBattleRequest::Swap(CMessageC2SJoinOnTimeOpenBattleRequest* other) {
  if (other != this) {
    std::swap(battleid_, other->battleid_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageC2SJoinOnTimeOpenBattleRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageC2SJoinOnTimeOpenBattleRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageC2SJoinOnTimeOpenBattleRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageC2SJoinOnTimeOpenBattleRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageC2SGetRandomTeleChargeRequest::kNpcIDFieldNumber;
const int CMessageC2SGetRandomTeleChargeRequest::kBattleIDFieldNumber;
const int CMessageC2SGetRandomTeleChargeRequest::kOrderFieldNumber;
#endif  // !_MSC_VER

CMessageC2SGetRandomTeleChargeRequest::CMessageC2SGetRandomTeleChargeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageC2SGetRandomTeleChargeRequest::InitAsDefaultInstance() {}

CMessageC2SGetRandomTeleChargeRequest::CMessageC2SGetRandomTeleChargeRequest(const CMessageC2SGetRandomTeleChargeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageC2SGetRandomTeleChargeRequest::SharedCtor() {
  _cached_size_ = 0;
  npcid_ = 0u;
  battleid_ = 0u;
  order_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageC2SGetRandomTeleChargeRequest::~CMessageC2SGetRandomTeleChargeRequest() {
  SharedDtor();
}

void CMessageC2SGetRandomTeleChargeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageC2SGetRandomTeleChargeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageC2SGetRandomTeleChargeRequest_descriptor_;
}

const CMessageC2SGetRandomTeleChargeRequest& CMessageC2SGetRandomTeleChargeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_repetionmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageC2SGetRandomTeleChargeRequest* CMessageC2SGetRandomTeleChargeRequest::default_instance_ = NULL;

CMessageC2SGetRandomTeleChargeRequest* CMessageC2SGetRandomTeleChargeRequest::New() const {
  return new CMessageC2SGetRandomTeleChargeRequest;
}

void CMessageC2SGetRandomTeleChargeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npcid_ = 0u;
    battleid_ = 0u;
    order_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageC2SGetRandomTeleChargeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 NpcID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_BattleID;
        break;
      }
      
      // optional uint32 BattleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BattleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &battleid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Order;
        break;
      }
      
      // optional uint32 Order = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Order:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &order_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageC2SGetRandomTeleChargeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageC2SGetRandomTeleChargeRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 NpcID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->npcid(), output);
  }
  
  // optional uint32 BattleID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->battleid(), output);
  }
  
  // optional uint32 Order = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->order(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageC2SGetRandomTeleChargeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 NpcID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->npcid(), target);
  }
  
  // optional uint32 BattleID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->battleid(), target);
  }
  
  // optional uint32 Order = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->order(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageC2SGetRandomTeleChargeRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 NpcID = 1;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
    // optional uint32 BattleID = 2;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->battleid());
    }
    
    // optional uint32 Order = 3;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->order());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageC2SGetRandomTeleChargeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageC2SGetRandomTeleChargeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageC2SGetRandomTeleChargeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageC2SGetRandomTeleChargeRequest::MergeFrom(const CMessageC2SGetRandomTeleChargeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_npcid(from.npcid());
    }
    if (from._has_bit(1)) {
      set_battleid(from.battleid());
    }
    if (from._has_bit(2)) {
      set_order(from.order());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageC2SGetRandomTeleChargeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageC2SGetRandomTeleChargeRequest::CopyFrom(const CMessageC2SGetRandomTeleChargeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageC2SGetRandomTeleChargeRequest::Swap(CMessageC2SGetRandomTeleChargeRequest* other) {
  if (other != this) {
    std::swap(npcid_, other->npcid_);
    std::swap(battleid_, other->battleid_);
    std::swap(order_, other->order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageC2SGetRandomTeleChargeRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageC2SGetRandomTeleChargeRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageC2SGetRandomTeleChargeRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageC2SGetRandomTeleChargeRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageS2CGetRandomTeleChargeResponse::kBattleIDFieldNumber;
const int CMessageS2CGetRandomTeleChargeResponse::kChargeFieldNumber;
const int CMessageS2CGetRandomTeleChargeResponse::kDieTimesFieldNumber;
#endif  // !_MSC_VER

CMessageS2CGetRandomTeleChargeResponse::CMessageS2CGetRandomTeleChargeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageS2CGetRandomTeleChargeResponse::InitAsDefaultInstance() {}

CMessageS2CGetRandomTeleChargeResponse::CMessageS2CGetRandomTeleChargeResponse(const CMessageS2CGetRandomTeleChargeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageS2CGetRandomTeleChargeResponse::SharedCtor() {
  _cached_size_ = 0;
  battleid_ = 0u;
  charge_ = 0u;
  dietimes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageS2CGetRandomTeleChargeResponse::~CMessageS2CGetRandomTeleChargeResponse() {
  SharedDtor();
}

void CMessageS2CGetRandomTeleChargeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageS2CGetRandomTeleChargeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageS2CGetRandomTeleChargeResponse_descriptor_;
}

const CMessageS2CGetRandomTeleChargeResponse& CMessageS2CGetRandomTeleChargeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_repetionmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageS2CGetRandomTeleChargeResponse* CMessageS2CGetRandomTeleChargeResponse::default_instance_ = NULL;

CMessageS2CGetRandomTeleChargeResponse* CMessageS2CGetRandomTeleChargeResponse::New() const {
  return new CMessageS2CGetRandomTeleChargeResponse;
}

void CMessageS2CGetRandomTeleChargeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battleid_ = 0u;
    charge_ = 0u;
    dietimes_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageS2CGetRandomTeleChargeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 BattleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &battleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Charge;
        break;
      }
      
      // optional uint32 Charge = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Charge:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charge_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_DieTimes;
        break;
      }
      
      // optional uint32 DieTimes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DieTimes:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &dietimes_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageS2CGetRandomTeleChargeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageS2CGetRandomTeleChargeResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 BattleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->battleid(), output);
  }
  
  // optional uint32 Charge = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charge(), output);
  }
  
  // optional uint32 DieTimes = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->dietimes(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageS2CGetRandomTeleChargeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 BattleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->battleid(), target);
  }
  
  // optional uint32 Charge = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charge(), target);
  }
  
  // optional uint32 DieTimes = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->dietimes(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageS2CGetRandomTeleChargeResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BattleID = 1;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->battleid());
    }
    
    // optional uint32 Charge = 2;
    if (has_charge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charge());
    }
    
    // optional uint32 DieTimes = 3;
    if (has_dietimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->dietimes());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageS2CGetRandomTeleChargeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageS2CGetRandomTeleChargeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageS2CGetRandomTeleChargeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageS2CGetRandomTeleChargeResponse::MergeFrom(const CMessageS2CGetRandomTeleChargeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_battleid(from.battleid());
    }
    if (from._has_bit(1)) {
      set_charge(from.charge());
    }
    if (from._has_bit(2)) {
      set_dietimes(from.dietimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageS2CGetRandomTeleChargeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageS2CGetRandomTeleChargeResponse::CopyFrom(const CMessageS2CGetRandomTeleChargeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageS2CGetRandomTeleChargeResponse::Swap(CMessageS2CGetRandomTeleChargeResponse* other) {
  if (other != this) {
    std::swap(battleid_, other->battleid_);
    std::swap(charge_, other->charge_);
    std::swap(dietimes_, other->dietimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageS2CGetRandomTeleChargeResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageS2CGetRandomTeleChargeResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageS2CGetRandomTeleChargeResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageS2CGetRandomTeleChargeResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageC2SRrandomTeleRequest::kNpcIDFieldNumber;
const int CMessageC2SRrandomTeleRequest::kBattleIDFieldNumber;
const int CMessageC2SRrandomTeleRequest::kOrderFieldNumber;
#endif  // !_MSC_VER

CMessageC2SRrandomTeleRequest::CMessageC2SRrandomTeleRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageC2SRrandomTeleRequest::InitAsDefaultInstance() {}

CMessageC2SRrandomTeleRequest::CMessageC2SRrandomTeleRequest(const CMessageC2SRrandomTeleRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageC2SRrandomTeleRequest::SharedCtor() {
  _cached_size_ = 0;
  npcid_ = 0u;
  battleid_ = 0u;
  order_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageC2SRrandomTeleRequest::~CMessageC2SRrandomTeleRequest() {
  SharedDtor();
}

void CMessageC2SRrandomTeleRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageC2SRrandomTeleRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageC2SRrandomTeleRequest_descriptor_;
}

const CMessageC2SRrandomTeleRequest& CMessageC2SRrandomTeleRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_repetionmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageC2SRrandomTeleRequest* CMessageC2SRrandomTeleRequest::default_instance_ = NULL;

CMessageC2SRrandomTeleRequest* CMessageC2SRrandomTeleRequest::New() const {
  return new CMessageC2SRrandomTeleRequest;
}

void CMessageC2SRrandomTeleRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npcid_ = 0u;
    battleid_ = 0u;
    order_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageC2SRrandomTeleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 NpcID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_BattleID;
        break;
      }
      
      // optional uint32 BattleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BattleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &battleid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Order;
        break;
      }
      
      // optional uint32 Order = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Order:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &order_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageC2SRrandomTeleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageC2SRrandomTeleRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 NpcID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->npcid(), output);
  }
  
  // optional uint32 BattleID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->battleid(), output);
  }
  
  // optional uint32 Order = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->order(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageC2SRrandomTeleRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 NpcID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->npcid(), target);
  }
  
  // optional uint32 BattleID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->battleid(), target);
  }
  
  // optional uint32 Order = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->order(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageC2SRrandomTeleRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 NpcID = 1;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
    // optional uint32 BattleID = 2;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->battleid());
    }
    
    // optional uint32 Order = 3;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->order());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageC2SRrandomTeleRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageC2SRrandomTeleRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageC2SRrandomTeleRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageC2SRrandomTeleRequest::MergeFrom(const CMessageC2SRrandomTeleRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_npcid(from.npcid());
    }
    if (from._has_bit(1)) {
      set_battleid(from.battleid());
    }
    if (from._has_bit(2)) {
      set_order(from.order());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageC2SRrandomTeleRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageC2SRrandomTeleRequest::CopyFrom(const CMessageC2SRrandomTeleRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageC2SRrandomTeleRequest::Swap(CMessageC2SRrandomTeleRequest* other) {
  if (other != this) {
    std::swap(npcid_, other->npcid_);
    std::swap(battleid_, other->battleid_);
    std::swap(order_, other->order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageC2SRrandomTeleRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageC2SRrandomTeleRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageC2SRrandomTeleRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageC2SRrandomTeleRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageApplyGlobalWarRequest::kRepetionIndexFieldNumber;
#endif  // !_MSC_VER

CMessageApplyGlobalWarRequest::CMessageApplyGlobalWarRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageApplyGlobalWarRequest::InitAsDefaultInstance() {}

CMessageApplyGlobalWarRequest::CMessageApplyGlobalWarRequest(const CMessageApplyGlobalWarRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageApplyGlobalWarRequest::SharedCtor() {
  _cached_size_ = 0;
  repetionindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageApplyGlobalWarRequest::~CMessageApplyGlobalWarRequest() {
  SharedDtor();
}

void CMessageApplyGlobalWarRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageApplyGlobalWarRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageApplyGlobalWarRequest_descriptor_;
}

const CMessageApplyGlobalWarRequest& CMessageApplyGlobalWarRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_repetionmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageApplyGlobalWarRequest* CMessageApplyGlobalWarRequest::default_instance_ = NULL;

CMessageApplyGlobalWarRequest* CMessageApplyGlobalWarRequest::New() const {
  return new CMessageApplyGlobalWarRequest;
}

void CMessageApplyGlobalWarRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    repetionindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageApplyGlobalWarRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RepetionIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &repetionindex_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageApplyGlobalWarRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageApplyGlobalWarRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RepetionIndex = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->repetionindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageApplyGlobalWarRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RepetionIndex = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->repetionindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageApplyGlobalWarRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RepetionIndex = 1;
    if (has_repetionindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->repetionindex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageApplyGlobalWarRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageApplyGlobalWarRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageApplyGlobalWarRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageApplyGlobalWarRequest::MergeFrom(const CMessageApplyGlobalWarRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_repetionindex(from.repetionindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageApplyGlobalWarRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageApplyGlobalWarRequest::CopyFrom(const CMessageApplyGlobalWarRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageApplyGlobalWarRequest::Swap(CMessageApplyGlobalWarRequest* other) {
  if (other != this) {
    std::swap(repetionindex_, other->repetionindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageApplyGlobalWarRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageApplyGlobalWarRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageApplyGlobalWarRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageApplyGlobalWarRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageApplyGlobalWarResponse::kErrcodeFieldNumber;
const int CMessageApplyGlobalWarResponse::kMinLevelFieldNumber;
const int CMessageApplyGlobalWarResponse::kMaxLevelFieldNumber;
#endif  // !_MSC_VER

CMessageApplyGlobalWarResponse::CMessageApplyGlobalWarResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageApplyGlobalWarResponse::InitAsDefaultInstance() {}

CMessageApplyGlobalWarResponse::CMessageApplyGlobalWarResponse(const CMessageApplyGlobalWarResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageApplyGlobalWarResponse::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  minlevel_ = 0u;
  maxlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageApplyGlobalWarResponse::~CMessageApplyGlobalWarResponse() {
  SharedDtor();
}

void CMessageApplyGlobalWarResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageApplyGlobalWarResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageApplyGlobalWarResponse_descriptor_;
}

const CMessageApplyGlobalWarResponse& CMessageApplyGlobalWarResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_repetionmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageApplyGlobalWarResponse* CMessageApplyGlobalWarResponse::default_instance_ = NULL;

CMessageApplyGlobalWarResponse* CMessageApplyGlobalWarResponse::New() const {
  return new CMessageApplyGlobalWarResponse;
}

void CMessageApplyGlobalWarResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
    minlevel_ = 0u;
    maxlevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageApplyGlobalWarResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Errcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_MinLevel;
        break;
      }
      
      // optional uint32 MinLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MinLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &minlevel_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_MaxLevel;
        break;
      }
      
      // optional uint32 MaxLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxlevel_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageApplyGlobalWarResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageApplyGlobalWarResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->errcode(), output);
  }
  
  // optional uint32 MinLevel = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->minlevel(), output);
  }
  
  // optional uint32 MaxLevel = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->maxlevel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageApplyGlobalWarResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  // optional uint32 MinLevel = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->minlevel(), target);
  }
  
  // optional uint32 MaxLevel = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->maxlevel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageApplyGlobalWarResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional uint32 MinLevel = 2;
    if (has_minlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->minlevel());
    }
    
    // optional uint32 MaxLevel = 3;
    if (has_maxlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxlevel());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageApplyGlobalWarResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageApplyGlobalWarResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageApplyGlobalWarResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageApplyGlobalWarResponse::MergeFrom(const CMessageApplyGlobalWarResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(1)) {
      set_minlevel(from.minlevel());
    }
    if (from._has_bit(2)) {
      set_maxlevel(from.maxlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageApplyGlobalWarResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageApplyGlobalWarResponse::CopyFrom(const CMessageApplyGlobalWarResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageApplyGlobalWarResponse::Swap(CMessageApplyGlobalWarResponse* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(minlevel_, other->minlevel_);
    std::swap(maxlevel_, other->maxlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageApplyGlobalWarResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageApplyGlobalWarResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageApplyGlobalWarResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageApplyGlobalWarResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageEnterGlobalWarRequest::kRepetionIndexFieldNumber;
#endif  // !_MSC_VER

CMessageEnterGlobalWarRequest::CMessageEnterGlobalWarRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageEnterGlobalWarRequest::InitAsDefaultInstance() {}

CMessageEnterGlobalWarRequest::CMessageEnterGlobalWarRequest(const CMessageEnterGlobalWarRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageEnterGlobalWarRequest::SharedCtor() {
  _cached_size_ = 0;
  repetionindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageEnterGlobalWarRequest::~CMessageEnterGlobalWarRequest() {
  SharedDtor();
}

void CMessageEnterGlobalWarRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageEnterGlobalWarRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageEnterGlobalWarRequest_descriptor_;
}

const CMessageEnterGlobalWarRequest& CMessageEnterGlobalWarRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_repetionmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageEnterGlobalWarRequest* CMessageEnterGlobalWarRequest::default_instance_ = NULL;

CMessageEnterGlobalWarRequest* CMessageEnterGlobalWarRequest::New() const {
  return new CMessageEnterGlobalWarRequest;
}

void CMessageEnterGlobalWarRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    repetionindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageEnterGlobalWarRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RepetionIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &repetionindex_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageEnterGlobalWarRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageEnterGlobalWarRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RepetionIndex = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->repetionindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageEnterGlobalWarRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RepetionIndex = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->repetionindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageEnterGlobalWarRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RepetionIndex = 1;
    if (has_repetionindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->repetionindex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageEnterGlobalWarRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageEnterGlobalWarRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageEnterGlobalWarRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageEnterGlobalWarRequest::MergeFrom(const CMessageEnterGlobalWarRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_repetionindex(from.repetionindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageEnterGlobalWarRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageEnterGlobalWarRequest::CopyFrom(const CMessageEnterGlobalWarRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageEnterGlobalWarRequest::Swap(CMessageEnterGlobalWarRequest* other) {
  if (other != this) {
    std::swap(repetionindex_, other->repetionindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageEnterGlobalWarRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageEnterGlobalWarRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageEnterGlobalWarRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageEnterGlobalWarRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageEnterGlobalWarResponse::kErrcodeFieldNumber;
#endif  // !_MSC_VER

CMessageEnterGlobalWarResponse::CMessageEnterGlobalWarResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageEnterGlobalWarResponse::InitAsDefaultInstance() {}

CMessageEnterGlobalWarResponse::CMessageEnterGlobalWarResponse(const CMessageEnterGlobalWarResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageEnterGlobalWarResponse::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageEnterGlobalWarResponse::~CMessageEnterGlobalWarResponse() {
  SharedDtor();
}

void CMessageEnterGlobalWarResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageEnterGlobalWarResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageEnterGlobalWarResponse_descriptor_;
}

const CMessageEnterGlobalWarResponse& CMessageEnterGlobalWarResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_repetionmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageEnterGlobalWarResponse* CMessageEnterGlobalWarResponse::default_instance_ = NULL;

CMessageEnterGlobalWarResponse* CMessageEnterGlobalWarResponse::New() const {
  return new CMessageEnterGlobalWarResponse;
}

void CMessageEnterGlobalWarResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageEnterGlobalWarResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Errcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageEnterGlobalWarResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageEnterGlobalWarResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageEnterGlobalWarResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageEnterGlobalWarResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageEnterGlobalWarResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageEnterGlobalWarResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageEnterGlobalWarResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageEnterGlobalWarResponse::MergeFrom(const CMessageEnterGlobalWarResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageEnterGlobalWarResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageEnterGlobalWarResponse::CopyFrom(const CMessageEnterGlobalWarResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageEnterGlobalWarResponse::Swap(CMessageEnterGlobalWarResponse* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageEnterGlobalWarResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageEnterGlobalWarResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageEnterGlobalWarResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageEnterGlobalWarResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCanEnterGlobalWarNotify::kRepetionIndexFieldNumber;
#endif  // !_MSC_VER

CMessageCanEnterGlobalWarNotify::CMessageCanEnterGlobalWarNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCanEnterGlobalWarNotify::InitAsDefaultInstance() {}

CMessageCanEnterGlobalWarNotify::CMessageCanEnterGlobalWarNotify(const CMessageCanEnterGlobalWarNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCanEnterGlobalWarNotify::SharedCtor() {
  _cached_size_ = 0;
  repetionindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCanEnterGlobalWarNotify::~CMessageCanEnterGlobalWarNotify() {
  SharedDtor();
}

void CMessageCanEnterGlobalWarNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCanEnterGlobalWarNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCanEnterGlobalWarNotify_descriptor_;
}

const CMessageCanEnterGlobalWarNotify& CMessageCanEnterGlobalWarNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_repetionmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCanEnterGlobalWarNotify* CMessageCanEnterGlobalWarNotify::default_instance_ = NULL;

CMessageCanEnterGlobalWarNotify* CMessageCanEnterGlobalWarNotify::New() const {
  return new CMessageCanEnterGlobalWarNotify;
}

void CMessageCanEnterGlobalWarNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    repetionindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCanEnterGlobalWarNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RepetionIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &repetionindex_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCanEnterGlobalWarNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCanEnterGlobalWarNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RepetionIndex = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->repetionindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCanEnterGlobalWarNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RepetionIndex = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->repetionindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCanEnterGlobalWarNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RepetionIndex = 1;
    if (has_repetionindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->repetionindex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCanEnterGlobalWarNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCanEnterGlobalWarNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCanEnterGlobalWarNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCanEnterGlobalWarNotify::MergeFrom(const CMessageCanEnterGlobalWarNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_repetionindex(from.repetionindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCanEnterGlobalWarNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCanEnterGlobalWarNotify::CopyFrom(const CMessageCanEnterGlobalWarNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCanEnterGlobalWarNotify::Swap(CMessageCanEnterGlobalWarNotify* other) {
  if (other != this) {
    std::swap(repetionindex_, other->repetionindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCanEnterGlobalWarNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCanEnterGlobalWarNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCanEnterGlobalWarNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCanEnterGlobalWarNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessagePlayerLeaveGlobalWarRequest::kRepetionIndexFieldNumber;
#endif  // !_MSC_VER

CMessagePlayerLeaveGlobalWarRequest::CMessagePlayerLeaveGlobalWarRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePlayerLeaveGlobalWarRequest::InitAsDefaultInstance() {}

CMessagePlayerLeaveGlobalWarRequest::CMessagePlayerLeaveGlobalWarRequest(const CMessagePlayerLeaveGlobalWarRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePlayerLeaveGlobalWarRequest::SharedCtor() {
  _cached_size_ = 0;
  repetionindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePlayerLeaveGlobalWarRequest::~CMessagePlayerLeaveGlobalWarRequest() {
  SharedDtor();
}

void CMessagePlayerLeaveGlobalWarRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessagePlayerLeaveGlobalWarRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerLeaveGlobalWarRequest_descriptor_;
}

const CMessagePlayerLeaveGlobalWarRequest& CMessagePlayerLeaveGlobalWarRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_repetionmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePlayerLeaveGlobalWarRequest* CMessagePlayerLeaveGlobalWarRequest::default_instance_ = NULL;

CMessagePlayerLeaveGlobalWarRequest* CMessagePlayerLeaveGlobalWarRequest::New() const {
  return new CMessagePlayerLeaveGlobalWarRequest;
}

void CMessagePlayerLeaveGlobalWarRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    repetionindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePlayerLeaveGlobalWarRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RepetionIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &repetionindex_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePlayerLeaveGlobalWarRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePlayerLeaveGlobalWarRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RepetionIndex = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->repetionindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePlayerLeaveGlobalWarRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RepetionIndex = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->repetionindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePlayerLeaveGlobalWarRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RepetionIndex = 1;
    if (has_repetionindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->repetionindex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePlayerLeaveGlobalWarRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePlayerLeaveGlobalWarRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePlayerLeaveGlobalWarRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePlayerLeaveGlobalWarRequest::MergeFrom(const CMessagePlayerLeaveGlobalWarRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_repetionindex(from.repetionindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePlayerLeaveGlobalWarRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerLeaveGlobalWarRequest::CopyFrom(const CMessagePlayerLeaveGlobalWarRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerLeaveGlobalWarRequest::Swap(CMessagePlayerLeaveGlobalWarRequest* other) {
  if (other != this) {
    std::swap(repetionindex_, other->repetionindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePlayerLeaveGlobalWarRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePlayerLeaveGlobalWarRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePlayerLeaveGlobalWarRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerLeaveGlobalWarRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessagePlayerLeaveGlobalWarResponse::kErrCodeFieldNumber;
#endif  // !_MSC_VER

CMessagePlayerLeaveGlobalWarResponse::CMessagePlayerLeaveGlobalWarResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePlayerLeaveGlobalWarResponse::InitAsDefaultInstance() {}

CMessagePlayerLeaveGlobalWarResponse::CMessagePlayerLeaveGlobalWarResponse(const CMessagePlayerLeaveGlobalWarResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePlayerLeaveGlobalWarResponse::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePlayerLeaveGlobalWarResponse::~CMessagePlayerLeaveGlobalWarResponse() {
  SharedDtor();
}

void CMessagePlayerLeaveGlobalWarResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessagePlayerLeaveGlobalWarResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerLeaveGlobalWarResponse_descriptor_;
}

const CMessagePlayerLeaveGlobalWarResponse& CMessagePlayerLeaveGlobalWarResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_repetionmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePlayerLeaveGlobalWarResponse* CMessagePlayerLeaveGlobalWarResponse::default_instance_ = NULL;

CMessagePlayerLeaveGlobalWarResponse* CMessagePlayerLeaveGlobalWarResponse::New() const {
  return new CMessagePlayerLeaveGlobalWarResponse;
}

void CMessagePlayerLeaveGlobalWarResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePlayerLeaveGlobalWarResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ErrCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePlayerLeaveGlobalWarResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePlayerLeaveGlobalWarResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ErrCode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePlayerLeaveGlobalWarResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ErrCode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePlayerLeaveGlobalWarResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ErrCode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePlayerLeaveGlobalWarResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePlayerLeaveGlobalWarResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePlayerLeaveGlobalWarResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePlayerLeaveGlobalWarResponse::MergeFrom(const CMessagePlayerLeaveGlobalWarResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePlayerLeaveGlobalWarResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerLeaveGlobalWarResponse::CopyFrom(const CMessagePlayerLeaveGlobalWarResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerLeaveGlobalWarResponse::Swap(CMessagePlayerLeaveGlobalWarResponse* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePlayerLeaveGlobalWarResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePlayerLeaveGlobalWarResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePlayerLeaveGlobalWarResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerLeaveGlobalWarResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageKickCampPlayerRequest::kEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageKickCampPlayerRequest::CMessageKickCampPlayerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageKickCampPlayerRequest::InitAsDefaultInstance() {}

CMessageKickCampPlayerRequest::CMessageKickCampPlayerRequest(const CMessageKickCampPlayerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageKickCampPlayerRequest::SharedCtor() {
  _cached_size_ = 0;
  entityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageKickCampPlayerRequest::~CMessageKickCampPlayerRequest() {
  SharedDtor();
}

void CMessageKickCampPlayerRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageKickCampPlayerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageKickCampPlayerRequest_descriptor_;
}

const CMessageKickCampPlayerRequest& CMessageKickCampPlayerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_repetionmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageKickCampPlayerRequest* CMessageKickCampPlayerRequest::default_instance_ = NULL;

CMessageKickCampPlayerRequest* CMessageKickCampPlayerRequest::New() const {
  return new CMessageKickCampPlayerRequest;
}

void CMessageKickCampPlayerRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageKickCampPlayerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 EntityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageKickCampPlayerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageKickCampPlayerRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->entityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageKickCampPlayerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->entityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageKickCampPlayerRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 EntityID = 1;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageKickCampPlayerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageKickCampPlayerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageKickCampPlayerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageKickCampPlayerRequest::MergeFrom(const CMessageKickCampPlayerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_entityid(from.entityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageKickCampPlayerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageKickCampPlayerRequest::CopyFrom(const CMessageKickCampPlayerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageKickCampPlayerRequest::Swap(CMessageKickCampPlayerRequest* other) {
  if (other != this) {
    std::swap(entityid_, other->entityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageKickCampPlayerRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageKickCampPlayerRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageKickCampPlayerRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageKickCampPlayerRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageKickCampPlayerResponse::kErrCodeFieldNumber;
#endif  // !_MSC_VER

CMessageKickCampPlayerResponse::CMessageKickCampPlayerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageKickCampPlayerResponse::InitAsDefaultInstance() {}

CMessageKickCampPlayerResponse::CMessageKickCampPlayerResponse(const CMessageKickCampPlayerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageKickCampPlayerResponse::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageKickCampPlayerResponse::~CMessageKickCampPlayerResponse() {
  SharedDtor();
}

void CMessageKickCampPlayerResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageKickCampPlayerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageKickCampPlayerResponse_descriptor_;
}

const CMessageKickCampPlayerResponse& CMessageKickCampPlayerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_repetionmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageKickCampPlayerResponse* CMessageKickCampPlayerResponse::default_instance_ = NULL;

CMessageKickCampPlayerResponse* CMessageKickCampPlayerResponse::New() const {
  return new CMessageKickCampPlayerResponse;
}

void CMessageKickCampPlayerResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageKickCampPlayerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ErrCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageKickCampPlayerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageKickCampPlayerResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ErrCode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageKickCampPlayerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ErrCode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageKickCampPlayerResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ErrCode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageKickCampPlayerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageKickCampPlayerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageKickCampPlayerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageKickCampPlayerResponse::MergeFrom(const CMessageKickCampPlayerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageKickCampPlayerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageKickCampPlayerResponse::CopyFrom(const CMessageKickCampPlayerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageKickCampPlayerResponse::Swap(CMessageKickCampPlayerResponse* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageKickCampPlayerResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageKickCampPlayerResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageKickCampPlayerResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageKickCampPlayerResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageKickCampPlayerNotify::_default_sponsorrolename_;
const ::std::string CMessageKickCampPlayerNotify::_default_rolename_;
#ifndef _MSC_VER
const int CMessageKickCampPlayerNotify::kSponsorRoleNameFieldNumber;
const int CMessageKickCampPlayerNotify::kRoleNameFieldNumber;
const int CMessageKickCampPlayerNotify::kEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageKickCampPlayerNotify::CMessageKickCampPlayerNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageKickCampPlayerNotify::InitAsDefaultInstance() {}

CMessageKickCampPlayerNotify::CMessageKickCampPlayerNotify(const CMessageKickCampPlayerNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageKickCampPlayerNotify::SharedCtor() {
  _cached_size_ = 0;
  sponsorrolename_ = const_cast< ::std::string*>(&_default_sponsorrolename_);
  rolename_ = const_cast< ::std::string*>(&_default_rolename_);
  entityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageKickCampPlayerNotify::~CMessageKickCampPlayerNotify() {
  SharedDtor();
}

void CMessageKickCampPlayerNotify::SharedDtor() {
  if (sponsorrolename_ != &_default_sponsorrolename_) {
    delete sponsorrolename_;
  }
  if (rolename_ != &_default_rolename_) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageKickCampPlayerNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageKickCampPlayerNotify_descriptor_;
}

const CMessageKickCampPlayerNotify& CMessageKickCampPlayerNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_repetionmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageKickCampPlayerNotify* CMessageKickCampPlayerNotify::default_instance_ = NULL;

CMessageKickCampPlayerNotify* CMessageKickCampPlayerNotify::New() const {
  return new CMessageKickCampPlayerNotify;
}

void CMessageKickCampPlayerNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (sponsorrolename_ != &_default_sponsorrolename_) {
        sponsorrolename_->clear();
      }
    }
    if (_has_bit(1)) {
      if (rolename_ != &_default_rolename_) {
        rolename_->clear();
      }
    }
    entityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageKickCampPlayerNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string SponsorRoleName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_sponsorrolename()));
        if (input->ExpectTag(18)) goto parse_RoleName;
        break;
      }
      
      // optional string RoleName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RoleName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_rolename()));
        if (input->ExpectTag(24)) goto parse_EntityID;
        break;
      }
      
      // optional uint32 EntityID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageKickCampPlayerNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageKickCampPlayerNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string SponsorRoleName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->sponsorrolename(), output);
  }
  
  // optional string RoleName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->rolename(), output);
  }
  
  // optional uint32 EntityID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->entityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageKickCampPlayerNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string SponsorRoleName = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->sponsorrolename(), target);
  }
  
  // optional string RoleName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->rolename(), target);
  }
  
  // optional uint32 EntityID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->entityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageKickCampPlayerNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string SponsorRoleName = 1;
    if (has_sponsorrolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->sponsorrolename());
    }
    
    // optional string RoleName = 2;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->rolename());
    }
    
    // optional uint32 EntityID = 3;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageKickCampPlayerNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageKickCampPlayerNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageKickCampPlayerNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageKickCampPlayerNotify::MergeFrom(const CMessageKickCampPlayerNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sponsorrolename(from.sponsorrolename());
    }
    if (from._has_bit(1)) {
      set_rolename(from.rolename());
    }
    if (from._has_bit(2)) {
      set_entityid(from.entityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageKickCampPlayerNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageKickCampPlayerNotify::CopyFrom(const CMessageKickCampPlayerNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageKickCampPlayerNotify::Swap(CMessageKickCampPlayerNotify* other) {
  if (other != this) {
    std::swap(sponsorrolename_, other->sponsorrolename_);
    std::swap(rolename_, other->rolename_);
    std::swap(entityid_, other->entityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageKickCampPlayerNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageKickCampPlayerNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageKickCampPlayerNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageKickCampPlayerNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageVoteToKickPlayerRequest::kEntityIDFieldNumber;
const int CMessageVoteToKickPlayerRequest::kResultFieldNumber;
#endif  // !_MSC_VER

CMessageVoteToKickPlayerRequest::CMessageVoteToKickPlayerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageVoteToKickPlayerRequest::InitAsDefaultInstance() {}

CMessageVoteToKickPlayerRequest::CMessageVoteToKickPlayerRequest(const CMessageVoteToKickPlayerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageVoteToKickPlayerRequest::SharedCtor() {
  _cached_size_ = 0;
  entityid_ = 0u;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageVoteToKickPlayerRequest::~CMessageVoteToKickPlayerRequest() {
  SharedDtor();
}

void CMessageVoteToKickPlayerRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageVoteToKickPlayerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageVoteToKickPlayerRequest_descriptor_;
}

const CMessageVoteToKickPlayerRequest& CMessageVoteToKickPlayerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_repetionmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageVoteToKickPlayerRequest* CMessageVoteToKickPlayerRequest::default_instance_ = NULL;

CMessageVoteToKickPlayerRequest* CMessageVoteToKickPlayerRequest::New() const {
  return new CMessageVoteToKickPlayerRequest;
}

void CMessageVoteToKickPlayerRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entityid_ = 0u;
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageVoteToKickPlayerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 EntityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageVoteToKickPlayerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageVoteToKickPlayerRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->entityid(), output);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageVoteToKickPlayerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->entityid(), target);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageVoteToKickPlayerRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 EntityID = 1;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
    // optional uint32 Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageVoteToKickPlayerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageVoteToKickPlayerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageVoteToKickPlayerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageVoteToKickPlayerRequest::MergeFrom(const CMessageVoteToKickPlayerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_entityid(from.entityid());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageVoteToKickPlayerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageVoteToKickPlayerRequest::CopyFrom(const CMessageVoteToKickPlayerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageVoteToKickPlayerRequest::Swap(CMessageVoteToKickPlayerRequest* other) {
  if (other != this) {
    std::swap(entityid_, other->entityid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageVoteToKickPlayerRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageVoteToKickPlayerRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageVoteToKickPlayerRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageVoteToKickPlayerRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageVoteToKickPlayerResponse::kErrcodeFieldNumber;
#endif  // !_MSC_VER

CMessageVoteToKickPlayerResponse::CMessageVoteToKickPlayerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageVoteToKickPlayerResponse::InitAsDefaultInstance() {}

CMessageVoteToKickPlayerResponse::CMessageVoteToKickPlayerResponse(const CMessageVoteToKickPlayerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageVoteToKickPlayerResponse::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageVoteToKickPlayerResponse::~CMessageVoteToKickPlayerResponse() {
  SharedDtor();
}

void CMessageVoteToKickPlayerResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageVoteToKickPlayerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageVoteToKickPlayerResponse_descriptor_;
}

const CMessageVoteToKickPlayerResponse& CMessageVoteToKickPlayerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_repetionmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageVoteToKickPlayerResponse* CMessageVoteToKickPlayerResponse::default_instance_ = NULL;

CMessageVoteToKickPlayerResponse* CMessageVoteToKickPlayerResponse::New() const {
  return new CMessageVoteToKickPlayerResponse;
}

void CMessageVoteToKickPlayerResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageVoteToKickPlayerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Errcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageVoteToKickPlayerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageVoteToKickPlayerResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageVoteToKickPlayerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageVoteToKickPlayerResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageVoteToKickPlayerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageVoteToKickPlayerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageVoteToKickPlayerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageVoteToKickPlayerResponse::MergeFrom(const CMessageVoteToKickPlayerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageVoteToKickPlayerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageVoteToKickPlayerResponse::CopyFrom(const CMessageVoteToKickPlayerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageVoteToKickPlayerResponse::Swap(CMessageVoteToKickPlayerResponse* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageVoteToKickPlayerResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageVoteToKickPlayerResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageVoteToKickPlayerResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageVoteToKickPlayerResponse_reflection_;
}

// ===================================================================

const ::std::string CMesssageKickResultNoitfy::_default_kickedrolename_;
#ifndef _MSC_VER
const int CMesssageKickResultNoitfy::kSponsorRoleIDFieldNumber;
const int CMesssageKickResultNoitfy::kKickedRoleIDFieldNumber;
const int CMesssageKickResultNoitfy::kKickedRoleNameFieldNumber;
const int CMesssageKickResultNoitfy::kResultFieldNumber;
#endif  // !_MSC_VER

CMesssageKickResultNoitfy::CMesssageKickResultNoitfy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMesssageKickResultNoitfy::InitAsDefaultInstance() {}

CMesssageKickResultNoitfy::CMesssageKickResultNoitfy(const CMesssageKickResultNoitfy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMesssageKickResultNoitfy::SharedCtor() {
  _cached_size_ = 0;
  sponsorroleid_ = 0u;
  kickedroleid_ = 0u;
  kickedrolename_ = const_cast< ::std::string*>(&_default_kickedrolename_);
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMesssageKickResultNoitfy::~CMesssageKickResultNoitfy() {
  SharedDtor();
}

void CMesssageKickResultNoitfy::SharedDtor() {
  if (kickedrolename_ != &_default_kickedrolename_) {
    delete kickedrolename_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMesssageKickResultNoitfy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMesssageKickResultNoitfy_descriptor_;
}

const CMesssageKickResultNoitfy& CMesssageKickResultNoitfy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_repetionmessage_5fpb_2ehxx();  return *default_instance_;
}

CMesssageKickResultNoitfy* CMesssageKickResultNoitfy::default_instance_ = NULL;

CMesssageKickResultNoitfy* CMesssageKickResultNoitfy::New() const {
  return new CMesssageKickResultNoitfy;
}

void CMesssageKickResultNoitfy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sponsorroleid_ = 0u;
    kickedroleid_ = 0u;
    if (_has_bit(2)) {
      if (kickedrolename_ != &_default_kickedrolename_) {
        kickedrolename_->clear();
      }
    }
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMesssageKickResultNoitfy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 SponsorRoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sponsorroleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_KickedRoleID;
        break;
      }
      
      // optional uint32 KickedRoleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_KickedRoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &kickedroleid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_KickedRoleName;
        break;
      }
      
      // optional string KickedRoleName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_KickedRoleName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_kickedrolename()));
        if (input->ExpectTag(32)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMesssageKickResultNoitfy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMesssageKickResultNoitfy::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 SponsorRoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->sponsorroleid(), output);
  }
  
  // optional uint32 KickedRoleID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->kickedroleid(), output);
  }
  
  // optional string KickedRoleName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->kickedrolename(), output);
  }
  
  // optional uint32 Result = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMesssageKickResultNoitfy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 SponsorRoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->sponsorroleid(), target);
  }
  
  // optional uint32 KickedRoleID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->kickedroleid(), target);
  }
  
  // optional string KickedRoleName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->kickedrolename(), target);
  }
  
  // optional uint32 Result = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMesssageKickResultNoitfy::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SponsorRoleID = 1;
    if (has_sponsorroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sponsorroleid());
    }
    
    // optional uint32 KickedRoleID = 2;
    if (has_kickedroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->kickedroleid());
    }
    
    // optional string KickedRoleName = 3;
    if (has_kickedrolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->kickedrolename());
    }
    
    // optional uint32 Result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMesssageKickResultNoitfy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMesssageKickResultNoitfy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMesssageKickResultNoitfy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMesssageKickResultNoitfy::MergeFrom(const CMesssageKickResultNoitfy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sponsorroleid(from.sponsorroleid());
    }
    if (from._has_bit(1)) {
      set_kickedroleid(from.kickedroleid());
    }
    if (from._has_bit(2)) {
      set_kickedrolename(from.kickedrolename());
    }
    if (from._has_bit(3)) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMesssageKickResultNoitfy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMesssageKickResultNoitfy::CopyFrom(const CMesssageKickResultNoitfy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMesssageKickResultNoitfy::Swap(CMesssageKickResultNoitfy* other) {
  if (other != this) {
    std::swap(sponsorroleid_, other->sponsorroleid_);
    std::swap(kickedroleid_, other->kickedroleid_);
    std::swap(kickedrolename_, other->kickedrolename_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMesssageKickResultNoitfy::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMesssageKickResultNoitfy::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMesssageKickResultNoitfy::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMesssageKickResultNoitfy_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageIntoCorpsBossRepetionRequest::kBattleIDFieldNumber;
#endif  // !_MSC_VER

CMessageIntoCorpsBossRepetionRequest::CMessageIntoCorpsBossRepetionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageIntoCorpsBossRepetionRequest::InitAsDefaultInstance() {}

CMessageIntoCorpsBossRepetionRequest::CMessageIntoCorpsBossRepetionRequest(const CMessageIntoCorpsBossRepetionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageIntoCorpsBossRepetionRequest::SharedCtor() {
  _cached_size_ = 0;
  battleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageIntoCorpsBossRepetionRequest::~CMessageIntoCorpsBossRepetionRequest() {
  SharedDtor();
}

void CMessageIntoCorpsBossRepetionRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageIntoCorpsBossRepetionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageIntoCorpsBossRepetionRequest_descriptor_;
}

const CMessageIntoCorpsBossRepetionRequest& CMessageIntoCorpsBossRepetionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_repetionmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageIntoCorpsBossRepetionRequest* CMessageIntoCorpsBossRepetionRequest::default_instance_ = NULL;

CMessageIntoCorpsBossRepetionRequest* CMessageIntoCorpsBossRepetionRequest::New() const {
  return new CMessageIntoCorpsBossRepetionRequest;
}

void CMessageIntoCorpsBossRepetionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battleid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageIntoCorpsBossRepetionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 BattleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &battleid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageIntoCorpsBossRepetionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageIntoCorpsBossRepetionRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 BattleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->battleid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageIntoCorpsBossRepetionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 BattleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->battleid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageIntoCorpsBossRepetionRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BattleID = 1;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->battleid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageIntoCorpsBossRepetionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageIntoCorpsBossRepetionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageIntoCorpsBossRepetionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageIntoCorpsBossRepetionRequest::MergeFrom(const CMessageIntoCorpsBossRepetionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_battleid(from.battleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageIntoCorpsBossRepetionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageIntoCorpsBossRepetionRequest::CopyFrom(const CMessageIntoCorpsBossRepetionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageIntoCorpsBossRepetionRequest::Swap(CMessageIntoCorpsBossRepetionRequest* other) {
  if (other != this) {
    std::swap(battleid_, other->battleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageIntoCorpsBossRepetionRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageIntoCorpsBossRepetionRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageIntoCorpsBossRepetionRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageIntoCorpsBossRepetionRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageEnterLastReptionRequest::kIndexFieldNumber;
const int CMessageEnterLastReptionRequest::kRoleIDFieldNumber;
#endif  // !_MSC_VER

CMessageEnterLastReptionRequest::CMessageEnterLastReptionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageEnterLastReptionRequest::InitAsDefaultInstance() {}

CMessageEnterLastReptionRequest::CMessageEnterLastReptionRequest(const CMessageEnterLastReptionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageEnterLastReptionRequest::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  roleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageEnterLastReptionRequest::~CMessageEnterLastReptionRequest() {
  SharedDtor();
}

void CMessageEnterLastReptionRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageEnterLastReptionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageEnterLastReptionRequest_descriptor_;
}

const CMessageEnterLastReptionRequest& CMessageEnterLastReptionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_repetionmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageEnterLastReptionRequest* CMessageEnterLastReptionRequest::default_instance_ = NULL;

CMessageEnterLastReptionRequest* CMessageEnterLastReptionRequest::New() const {
  return new CMessageEnterLastReptionRequest;
}

void CMessageEnterLastReptionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    roleid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageEnterLastReptionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &index_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageEnterLastReptionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageEnterLastReptionRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Index = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->index(), output);
  }
  
  // optional uint32 RoleID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->roleid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageEnterLastReptionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Index = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->index(), target);
  }
  
  // optional uint32 RoleID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->roleid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageEnterLastReptionRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->index());
    }
    
    // optional uint32 RoleID = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageEnterLastReptionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageEnterLastReptionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageEnterLastReptionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageEnterLastReptionRequest::MergeFrom(const CMessageEnterLastReptionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_index(from.index());
    }
    if (from._has_bit(1)) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageEnterLastReptionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageEnterLastReptionRequest::CopyFrom(const CMessageEnterLastReptionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageEnterLastReptionRequest::Swap(CMessageEnterLastReptionRequest* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageEnterLastReptionRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageEnterLastReptionRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageEnterLastReptionRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageEnterLastReptionRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageEnterLastReptionResponse::kErrcodeFieldNumber;
#endif  // !_MSC_VER

CMessageEnterLastReptionResponse::CMessageEnterLastReptionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageEnterLastReptionResponse::InitAsDefaultInstance() {}

CMessageEnterLastReptionResponse::CMessageEnterLastReptionResponse(const CMessageEnterLastReptionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageEnterLastReptionResponse::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageEnterLastReptionResponse::~CMessageEnterLastReptionResponse() {
  SharedDtor();
}

void CMessageEnterLastReptionResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageEnterLastReptionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageEnterLastReptionResponse_descriptor_;
}

const CMessageEnterLastReptionResponse& CMessageEnterLastReptionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_repetionmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageEnterLastReptionResponse* CMessageEnterLastReptionResponse::default_instance_ = NULL;

CMessageEnterLastReptionResponse* CMessageEnterLastReptionResponse::New() const {
  return new CMessageEnterLastReptionResponse;
}

void CMessageEnterLastReptionResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageEnterLastReptionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Errcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageEnterLastReptionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageEnterLastReptionResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageEnterLastReptionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageEnterLastReptionResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageEnterLastReptionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageEnterLastReptionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageEnterLastReptionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageEnterLastReptionResponse::MergeFrom(const CMessageEnterLastReptionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageEnterLastReptionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageEnterLastReptionResponse::CopyFrom(const CMessageEnterLastReptionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageEnterLastReptionResponse::Swap(CMessageEnterLastReptionResponse* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageEnterLastReptionResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageEnterLastReptionResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageEnterLastReptionResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageEnterLastReptionResponse_reflection_;
}
