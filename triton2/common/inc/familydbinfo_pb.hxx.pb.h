// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_familydbinfo_5fpb_2ehxx__INCLUDED
#define PROTOBUF_familydbinfo_5fpb_2ehxx__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_familydbinfo_5fpb_2ehxx();
void protobuf_AssignDesc_familydbinfo_5fpb_2ehxx();
void protobuf_ShutdownFile_familydbinfo_5fpb_2ehxx();

class ApplyInfo;
class PBApplyList;
class FamilyData;
class PBFamilyList;
class FamilyMemberInfo;
class PBFamilyMemberList;
class PBFamilyOrganInfo;
class PBFamilyOrganList;
class PBFamilyPropery;
class PBFamilyMemberInfo;
class PBFamilyMemberInfoList;
class PBGoodItemInfo;
class PBLeagueShopInfo;
class PBLeagueShopsListInfo;

// ===================================================================

class ApplyInfo : public ::google::protobuf::Message {
 public:
  ApplyInfo();
  virtual ~ApplyInfo();
  
  ApplyInfo(const ApplyInfo& from);
  
  inline ApplyInfo& operator=(const ApplyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ApplyInfo& default_instance();
  void Swap(ApplyInfo* other);
  
  // implements Message ----------------------------------------------
  
  ApplyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ApplyInfo& from);
  void MergeFrom(const ApplyInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string PlayerName = 1;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayerNameFieldNumber = 1;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  
  // optional uint32 PlayerLevel = 2;
  inline bool has_playerlevel() const;
  inline void clear_playerlevel();
  static const int kPlayerLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 playerlevel() const;
  inline void set_playerlevel(::google::protobuf::uint32 value);
  
  // optional uint32 FaceType = 3;
  inline bool has_facetype() const;
  inline void clear_facetype();
  static const int kFaceTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 facetype() const;
  inline void set_facetype(::google::protobuf::uint32 value);
  
  // optional uint32 LineID = 4;
  inline bool has_lineid() const;
  inline void clear_lineid();
  static const int kLineIDFieldNumber = 4;
  inline ::google::protobuf::uint32 lineid() const;
  inline void set_lineid(::google::protobuf::uint32 value);
  
  // optional uint32 PlayerCharID = 5;
  inline bool has_playercharid() const;
  inline void clear_playercharid();
  static const int kPlayerCharIDFieldNumber = 5;
  inline ::google::protobuf::uint32 playercharid() const;
  inline void set_playercharid(::google::protobuf::uint32 value);
  
  // optional uint32 PlayerOnLine = 6;
  inline bool has_playeronline() const;
  inline void clear_playeronline();
  static const int kPlayerOnLineFieldNumber = 6;
  inline ::google::protobuf::uint32 playeronline() const;
  inline void set_playeronline(::google::protobuf::uint32 value);
  
  // optional uint32 PlayerMetier = 7;
  inline bool has_playermetier() const;
  inline void clear_playermetier();
  static const int kPlayerMetierFieldNumber = 7;
  inline ::google::protobuf::uint32 playermetier() const;
  inline void set_playermetier(::google::protobuf::uint32 value);
  
  // optional uint32 MapID = 8;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIDFieldNumber = 8;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);
  
  // optional uint32 PlayerSex = 9;
  inline bool has_playersex() const;
  inline void clear_playersex();
  static const int kPlayerSexFieldNumber = 9;
  inline ::google::protobuf::uint32 playersex() const;
  inline void set_playersex(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* playername_;
  static const ::std::string _default_playername_;
  ::google::protobuf::uint32 playerlevel_;
  ::google::protobuf::uint32 facetype_;
  ::google::protobuf::uint32 lineid_;
  ::google::protobuf::uint32 playercharid_;
  ::google::protobuf::uint32 playeronline_;
  ::google::protobuf::uint32 playermetier_;
  ::google::protobuf::uint32 mapid_;
  ::google::protobuf::uint32 playersex_;
  friend void  protobuf_AddDesc_familydbinfo_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familydbinfo_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familydbinfo_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ApplyInfo* default_instance_;
};
// -------------------------------------------------------------------

class PBApplyList : public ::google::protobuf::Message {
 public:
  PBApplyList();
  virtual ~PBApplyList();
  
  PBApplyList(const PBApplyList& from);
  
  inline PBApplyList& operator=(const PBApplyList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBApplyList& default_instance();
  void Swap(PBApplyList* other);
  
  // implements Message ----------------------------------------------
  
  PBApplyList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBApplyList& from);
  void MergeFrom(const PBApplyList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .ApplyInfo ApplyData = 1;
  inline int applydata_size() const;
  inline void clear_applydata();
  static const int kApplyDataFieldNumber = 1;
  inline const ::google::protobuf::RepeatedPtrField< ::ApplyInfo >& applydata() const;
  inline ::google::protobuf::RepeatedPtrField< ::ApplyInfo >* mutable_applydata();
  inline const ::ApplyInfo& applydata(int index) const;
  inline ::ApplyInfo* mutable_applydata(int index);
  inline ::ApplyInfo* add_applydata();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::ApplyInfo > applydata_;
  friend void  protobuf_AddDesc_familydbinfo_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familydbinfo_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familydbinfo_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PBApplyList* default_instance_;
};
// -------------------------------------------------------------------

class FamilyData : public ::google::protobuf::Message {
 public:
  FamilyData();
  virtual ~FamilyData();
  
  FamilyData(const FamilyData& from);
  
  inline FamilyData& operator=(const FamilyData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FamilyData& default_instance();
  void Swap(FamilyData* other);
  
  // implements Message ----------------------------------------------
  
  FamilyData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FamilyData& from);
  void MergeFrom(const FamilyData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string FamilyName = 1;
  inline bool has_familyname() const;
  inline void clear_familyname();
  static const int kFamilyNameFieldNumber = 1;
  inline const ::std::string& familyname() const;
  inline void set_familyname(const ::std::string& value);
  inline void set_familyname(const char* value);
  inline void set_familyname(const char* value, size_t size);
  inline ::std::string* mutable_familyname();
  
  // optional uint32 FamilyID = 2;
  inline bool has_familyid() const;
  inline void clear_familyid();
  static const int kFamilyIDFieldNumber = 2;
  inline ::google::protobuf::uint32 familyid() const;
  inline void set_familyid(::google::protobuf::uint32 value);
  
  // optional string HeaderName = 3;
  inline bool has_headername() const;
  inline void clear_headername();
  static const int kHeaderNameFieldNumber = 3;
  inline const ::std::string& headername() const;
  inline void set_headername(const ::std::string& value);
  inline void set_headername(const char* value);
  inline void set_headername(const char* value, size_t size);
  inline ::std::string* mutable_headername();
  
  // optional uint32 HeaderRoleID = 4;
  inline bool has_headerroleid() const;
  inline void clear_headerroleid();
  static const int kHeaderRoleIDFieldNumber = 4;
  inline ::google::protobuf::uint32 headerroleid() const;
  inline void set_headerroleid(::google::protobuf::uint32 value);
  
  // optional uint32 MemberNum = 5;
  inline bool has_membernum() const;
  inline void clear_membernum();
  static const int kMemberNumFieldNumber = 5;
  inline ::google::protobuf::uint32 membernum() const;
  inline void set_membernum(::google::protobuf::uint32 value);
  
  // optional uint32 FamilyLevel = 6;
  inline bool has_familylevel() const;
  inline void clear_familylevel();
  static const int kFamilyLevelFieldNumber = 6;
  inline ::google::protobuf::uint32 familylevel() const;
  inline void set_familylevel(::google::protobuf::uint32 value);
  
  // optional uint32 FamilyGlory = 7;
  inline bool has_familyglory() const;
  inline void clear_familyglory();
  static const int kFamilyGloryFieldNumber = 7;
  inline ::google::protobuf::uint32 familyglory() const;
  inline void set_familyglory(::google::protobuf::uint32 value);
  
  // optional uint32 FamilyDevelop = 8;
  inline bool has_familydevelop() const;
  inline void clear_familydevelop();
  static const int kFamilyDevelopFieldNumber = 8;
  inline ::google::protobuf::uint32 familydevelop() const;
  inline void set_familydevelop(::google::protobuf::uint32 value);
  
  // optional uint32 NpcID = 9;
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcIDFieldNumber = 9;
  inline ::google::protobuf::uint32 npcid() const;
  inline void set_npcid(::google::protobuf::uint32 value);
  
  // optional uint32 BidMoney = 10;
  inline bool has_bidmoney() const;
  inline void clear_bidmoney();
  static const int kBidMoneyFieldNumber = 10;
  inline ::google::protobuf::uint32 bidmoney() const;
  inline void set_bidmoney(::google::protobuf::uint32 value);
  
  // optional uint32 BidTime = 11;
  inline bool has_bidtime() const;
  inline void clear_bidtime();
  static const int kBidTimeFieldNumber = 11;
  inline ::google::protobuf::uint32 bidtime() const;
  inline void set_bidtime(::google::protobuf::uint32 value);
  
  // optional uint32 WarNpcStatus = 12;
  inline bool has_warnpcstatus() const;
  inline void clear_warnpcstatus();
  static const int kWarNpcStatusFieldNumber = 12;
  inline ::google::protobuf::uint32 warnpcstatus() const;
  inline void set_warnpcstatus(::google::protobuf::uint32 value);
  
  // optional uint32 WarRank = 13;
  inline bool has_warrank() const;
  inline void clear_warrank();
  static const int kWarRankFieldNumber = 13;
  inline ::google::protobuf::uint32 warrank() const;
  inline void set_warrank(::google::protobuf::uint32 value);
  
  // optional uint32 WarWinNum = 14;
  inline bool has_warwinnum() const;
  inline void clear_warwinnum();
  static const int kWarWinNumFieldNumber = 14;
  inline ::google::protobuf::uint32 warwinnum() const;
  inline void set_warwinnum(::google::protobuf::uint32 value);
  
  // optional uint32 WarLostNum = 15;
  inline bool has_warlostnum() const;
  inline void clear_warlostnum();
  static const int kWarLostNumFieldNumber = 15;
  inline ::google::protobuf::uint32 warlostnum() const;
  inline void set_warlostnum(::google::protobuf::uint32 value);
  
  // optional uint32 FamilyStarLevel = 16;
  inline bool has_familystarlevel() const;
  inline void clear_familystarlevel();
  static const int kFamilyStarLevelFieldNumber = 16;
  inline ::google::protobuf::uint32 familystarlevel() const;
  inline void set_familystarlevel(::google::protobuf::uint32 value);
  
  // optional uint32 WarExp = 17;
  inline bool has_warexp() const;
  inline void clear_warexp();
  static const int kWarExpFieldNumber = 17;
  inline ::google::protobuf::uint32 warexp() const;
  inline void set_warexp(::google::protobuf::uint32 value);
  
  // optional uint32 WarMaxExp = 18;
  inline bool has_warmaxexp() const;
  inline void clear_warmaxexp();
  static const int kWarMaxExpFieldNumber = 18;
  inline ::google::protobuf::uint32 warmaxexp() const;
  inline void set_warmaxexp(::google::protobuf::uint32 value);
  
  // optional string EnemyFamilyName = 19;
  inline bool has_enemyfamilyname() const;
  inline void clear_enemyfamilyname();
  static const int kEnemyFamilyNameFieldNumber = 19;
  inline const ::std::string& enemyfamilyname() const;
  inline void set_enemyfamilyname(const ::std::string& value);
  inline void set_enemyfamilyname(const char* value);
  inline void set_enemyfamilyname(const char* value, size_t size);
  inline ::std::string* mutable_enemyfamilyname();
  
  // optional uint32 WarStatus = 20;
  inline bool has_warstatus() const;
  inline void clear_warstatus();
  static const int kWarStatusFieldNumber = 20;
  inline ::google::protobuf::uint32 warstatus() const;
  inline void set_warstatus(::google::protobuf::uint32 value);
  
  // optional uint32 FamilyNpcNum = 21;
  inline bool has_familynpcnum() const;
  inline void clear_familynpcnum();
  static const int kFamilyNpcNumFieldNumber = 21;
  inline ::google::protobuf::uint32 familynpcnum() const;
  inline void set_familynpcnum(::google::protobuf::uint32 value);
  
  // optional uint32 MaxMemberNum = 22;
  inline bool has_maxmembernum() const;
  inline void clear_maxmembernum();
  static const int kMaxMemberNumFieldNumber = 22;
  inline ::google::protobuf::uint32 maxmembernum() const;
  inline void set_maxmembernum(::google::protobuf::uint32 value);
  
  // optional string CorpsName = 23;
  inline bool has_corpsname() const;
  inline void clear_corpsname();
  static const int kCorpsNameFieldNumber = 23;
  inline const ::std::string& corpsname() const;
  inline void set_corpsname(const ::std::string& value);
  inline void set_corpsname(const char* value);
  inline void set_corpsname(const char* value, size_t size);
  inline ::std::string* mutable_corpsname();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* familyname_;
  static const ::std::string _default_familyname_;
  ::google::protobuf::uint32 familyid_;
  ::std::string* headername_;
  static const ::std::string _default_headername_;
  ::google::protobuf::uint32 headerroleid_;
  ::google::protobuf::uint32 membernum_;
  ::google::protobuf::uint32 familylevel_;
  ::google::protobuf::uint32 familyglory_;
  ::google::protobuf::uint32 familydevelop_;
  ::google::protobuf::uint32 npcid_;
  ::google::protobuf::uint32 bidmoney_;
  ::google::protobuf::uint32 bidtime_;
  ::google::protobuf::uint32 warnpcstatus_;
  ::google::protobuf::uint32 warrank_;
  ::google::protobuf::uint32 warwinnum_;
  ::google::protobuf::uint32 warlostnum_;
  ::google::protobuf::uint32 familystarlevel_;
  ::google::protobuf::uint32 warexp_;
  ::google::protobuf::uint32 warmaxexp_;
  ::std::string* enemyfamilyname_;
  static const ::std::string _default_enemyfamilyname_;
  ::google::protobuf::uint32 warstatus_;
  ::google::protobuf::uint32 familynpcnum_;
  ::google::protobuf::uint32 maxmembernum_;
  ::std::string* corpsname_;
  static const ::std::string _default_corpsname_;
  friend void  protobuf_AddDesc_familydbinfo_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familydbinfo_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familydbinfo_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(23 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static FamilyData* default_instance_;
};
// -------------------------------------------------------------------

class PBFamilyList : public ::google::protobuf::Message {
 public:
  PBFamilyList();
  virtual ~PBFamilyList();
  
  PBFamilyList(const PBFamilyList& from);
  
  inline PBFamilyList& operator=(const PBFamilyList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBFamilyList& default_instance();
  void Swap(PBFamilyList* other);
  
  // implements Message ----------------------------------------------
  
  PBFamilyList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBFamilyList& from);
  void MergeFrom(const PBFamilyList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .FamilyData FamilyInfo = 1;
  inline int familyinfo_size() const;
  inline void clear_familyinfo();
  static const int kFamilyInfoFieldNumber = 1;
  inline const ::google::protobuf::RepeatedPtrField< ::FamilyData >& familyinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::FamilyData >* mutable_familyinfo();
  inline const ::FamilyData& familyinfo(int index) const;
  inline ::FamilyData* mutable_familyinfo(int index);
  inline ::FamilyData* add_familyinfo();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::FamilyData > familyinfo_;
  friend void  protobuf_AddDesc_familydbinfo_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familydbinfo_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familydbinfo_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PBFamilyList* default_instance_;
};
// -------------------------------------------------------------------

class FamilyMemberInfo : public ::google::protobuf::Message {
 public:
  FamilyMemberInfo();
  virtual ~FamilyMemberInfo();
  
  FamilyMemberInfo(const FamilyMemberInfo& from);
  
  inline FamilyMemberInfo& operator=(const FamilyMemberInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FamilyMemberInfo& default_instance();
  void Swap(FamilyMemberInfo* other);
  
  // implements Message ----------------------------------------------
  
  FamilyMemberInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FamilyMemberInfo& from);
  void MergeFrom(const FamilyMemberInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 FaceID = 1;
  inline bool has_faceid() const;
  inline void clear_faceid();
  static const int kFaceIDFieldNumber = 1;
  inline ::google::protobuf::uint32 faceid() const;
  inline void set_faceid(::google::protobuf::uint32 value);
  
  // optional uint32 LineID = 2;
  inline bool has_lineid() const;
  inline void clear_lineid();
  static const int kLineIDFieldNumber = 2;
  inline ::google::protobuf::uint32 lineid() const;
  inline void set_lineid(::google::protobuf::uint32 value);
  
  // optional uint32 PlayerLevel = 3;
  inline bool has_playerlevel() const;
  inline void clear_playerlevel();
  static const int kPlayerLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 playerlevel() const;
  inline void set_playerlevel(::google::protobuf::uint32 value);
  
  // optional uint32 PlayerPost = 4;
  inline bool has_playerpost() const;
  inline void clear_playerpost();
  static const int kPlayerPostFieldNumber = 4;
  inline ::google::protobuf::uint32 playerpost() const;
  inline void set_playerpost(::google::protobuf::uint32 value);
  
  // optional uint32 PlayerCharID = 5;
  inline bool has_playercharid() const;
  inline void clear_playercharid();
  static const int kPlayerCharIDFieldNumber = 5;
  inline ::google::protobuf::uint32 playercharid() const;
  inline void set_playercharid(::google::protobuf::uint32 value);
  
  // optional uint32 RoleSex = 6;
  inline bool has_rolesex() const;
  inline void clear_rolesex();
  static const int kRoleSexFieldNumber = 6;
  inline ::google::protobuf::uint32 rolesex() const;
  inline void set_rolesex(::google::protobuf::uint32 value);
  
  // optional string PlayerName = 7;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayerNameFieldNumber = 7;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  
  // optional uint32 MetierID = 8;
  inline bool has_metierid() const;
  inline void clear_metierid();
  static const int kMetierIDFieldNumber = 8;
  inline ::google::protobuf::uint32 metierid() const;
  inline void set_metierid(::google::protobuf::uint32 value);
  
  // optional uint32 Online = 9;
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 9;
  inline ::google::protobuf::uint32 online() const;
  inline void set_online(::google::protobuf::uint32 value);
  
  // optional uint32 MapID = 10;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIDFieldNumber = 10;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);
  
  // optional uint32 FamilyWar = 11;
  inline bool has_familywar() const;
  inline void clear_familywar();
  static const int kFamilyWarFieldNumber = 11;
  inline ::google::protobuf::uint32 familywar() const;
  inline void set_familywar(::google::protobuf::uint32 value);
  
  // optional uint32 Contribute = 12;
  inline bool has_contribute() const;
  inline void clear_contribute();
  static const int kContributeFieldNumber = 12;
  inline ::google::protobuf::uint32 contribute() const;
  inline void set_contribute(::google::protobuf::uint32 value);
  
  // optional uint32 CorpsContribute = 13;
  inline bool has_corpscontribute() const;
  inline void clear_corpscontribute();
  static const int kCorpsContributeFieldNumber = 13;
  inline ::google::protobuf::uint32 corpscontribute() const;
  inline void set_corpscontribute(::google::protobuf::uint32 value);
  
  // optional uint32 CorpsWar = 14;
  inline bool has_corpswar() const;
  inline void clear_corpswar();
  static const int kCorpsWarFieldNumber = 14;
  inline ::google::protobuf::uint32 corpswar() const;
  inline void set_corpswar(::google::protobuf::uint32 value);
  
  // optional string CorpsTitle = 15;
  inline bool has_corpstitle() const;
  inline void clear_corpstitle();
  static const int kCorpsTitleFieldNumber = 15;
  inline const ::std::string& corpstitle() const;
  inline void set_corpstitle(const ::std::string& value);
  inline void set_corpstitle(const char* value);
  inline void set_corpstitle(const char* value, size_t size);
  inline ::std::string* mutable_corpstitle();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 faceid_;
  ::google::protobuf::uint32 lineid_;
  ::google::protobuf::uint32 playerlevel_;
  ::google::protobuf::uint32 playerpost_;
  ::google::protobuf::uint32 playercharid_;
  ::google::protobuf::uint32 rolesex_;
  ::std::string* playername_;
  static const ::std::string _default_playername_;
  ::google::protobuf::uint32 metierid_;
  ::google::protobuf::uint32 online_;
  ::google::protobuf::uint32 mapid_;
  ::google::protobuf::uint32 familywar_;
  ::google::protobuf::uint32 contribute_;
  ::google::protobuf::uint32 corpscontribute_;
  ::google::protobuf::uint32 corpswar_;
  ::std::string* corpstitle_;
  static const ::std::string _default_corpstitle_;
  friend void  protobuf_AddDesc_familydbinfo_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familydbinfo_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familydbinfo_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static FamilyMemberInfo* default_instance_;
};
// -------------------------------------------------------------------

class PBFamilyMemberList : public ::google::protobuf::Message {
 public:
  PBFamilyMemberList();
  virtual ~PBFamilyMemberList();
  
  PBFamilyMemberList(const PBFamilyMemberList& from);
  
  inline PBFamilyMemberList& operator=(const PBFamilyMemberList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBFamilyMemberList& default_instance();
  void Swap(PBFamilyMemberList* other);
  
  // implements Message ----------------------------------------------
  
  PBFamilyMemberList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBFamilyMemberList& from);
  void MergeFrom(const PBFamilyMemberList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .FamilyMemberInfo Members = 1;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 1;
  inline const ::google::protobuf::RepeatedPtrField< ::FamilyMemberInfo >& members() const;
  inline ::google::protobuf::RepeatedPtrField< ::FamilyMemberInfo >* mutable_members();
  inline const ::FamilyMemberInfo& members(int index) const;
  inline ::FamilyMemberInfo* mutable_members(int index);
  inline ::FamilyMemberInfo* add_members();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::FamilyMemberInfo > members_;
  friend void  protobuf_AddDesc_familydbinfo_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familydbinfo_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familydbinfo_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PBFamilyMemberList* default_instance_;
};
// -------------------------------------------------------------------

class PBFamilyOrganInfo : public ::google::protobuf::Message {
 public:
  PBFamilyOrganInfo();
  virtual ~PBFamilyOrganInfo();
  
  PBFamilyOrganInfo(const PBFamilyOrganInfo& from);
  
  inline PBFamilyOrganInfo& operator=(const PBFamilyOrganInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBFamilyOrganInfo& default_instance();
  void Swap(PBFamilyOrganInfo* other);
  
  // implements Message ----------------------------------------------
  
  PBFamilyOrganInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBFamilyOrganInfo& from);
  void MergeFrom(const PBFamilyOrganInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 Rights = 1;
  inline bool has_rights() const;
  inline void clear_rights();
  static const int kRightsFieldNumber = 1;
  inline ::google::protobuf::uint32 rights() const;
  inline void set_rights(::google::protobuf::uint32 value);
  
  // optional string OrganName = 2;
  inline bool has_organname() const;
  inline void clear_organname();
  static const int kOrganNameFieldNumber = 2;
  inline const ::std::string& organname() const;
  inline void set_organname(const ::std::string& value);
  inline void set_organname(const char* value);
  inline void set_organname(const char* value, size_t size);
  inline ::std::string* mutable_organname();
  
  // optional uint32 ID = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 3;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 rights_;
  ::std::string* organname_;
  static const ::std::string _default_organname_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_familydbinfo_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familydbinfo_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familydbinfo_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PBFamilyOrganInfo* default_instance_;
};
// -------------------------------------------------------------------

class PBFamilyOrganList : public ::google::protobuf::Message {
 public:
  PBFamilyOrganList();
  virtual ~PBFamilyOrganList();
  
  PBFamilyOrganList(const PBFamilyOrganList& from);
  
  inline PBFamilyOrganList& operator=(const PBFamilyOrganList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBFamilyOrganList& default_instance();
  void Swap(PBFamilyOrganList* other);
  
  // implements Message ----------------------------------------------
  
  PBFamilyOrganList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBFamilyOrganList& from);
  void MergeFrom(const PBFamilyOrganList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .PBFamilyOrganInfo Organes = 1;
  inline int organes_size() const;
  inline void clear_organes();
  static const int kOrganesFieldNumber = 1;
  inline const ::google::protobuf::RepeatedPtrField< ::PBFamilyOrganInfo >& organes() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBFamilyOrganInfo >* mutable_organes();
  inline const ::PBFamilyOrganInfo& organes(int index) const;
  inline ::PBFamilyOrganInfo* mutable_organes(int index);
  inline ::PBFamilyOrganInfo* add_organes();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::PBFamilyOrganInfo > organes_;
  friend void  protobuf_AddDesc_familydbinfo_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familydbinfo_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familydbinfo_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PBFamilyOrganList* default_instance_;
};
// -------------------------------------------------------------------

class PBFamilyPropery : public ::google::protobuf::Message {
 public:
  PBFamilyPropery();
  virtual ~PBFamilyPropery();
  
  PBFamilyPropery(const PBFamilyPropery& from);
  
  inline PBFamilyPropery& operator=(const PBFamilyPropery& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBFamilyPropery& default_instance();
  void Swap(PBFamilyPropery* other);
  
  // implements Message ----------------------------------------------
  
  PBFamilyPropery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBFamilyPropery& from);
  void MergeFrom(const PBFamilyPropery& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 FamilyHeaderID = 1;
  inline bool has_familyheaderid() const;
  inline void clear_familyheaderid();
  static const int kFamilyHeaderIDFieldNumber = 1;
  inline ::google::protobuf::uint32 familyheaderid() const;
  inline void set_familyheaderid(::google::protobuf::uint32 value);
  
  // optional uint32 FamilyMoney = 2;
  inline bool has_familymoney() const;
  inline void clear_familymoney();
  static const int kFamilyMoneyFieldNumber = 2;
  inline ::google::protobuf::uint32 familymoney() const;
  inline void set_familymoney(::google::protobuf::uint32 value);
  
  // optional uint32 FamilyLevel = 3;
  inline bool has_familylevel() const;
  inline void clear_familylevel();
  static const int kFamilyLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 familylevel() const;
  inline void set_familylevel(::google::protobuf::uint32 value);
  
  // optional string FamilyNotice = 4;
  inline bool has_familynotice() const;
  inline void clear_familynotice();
  static const int kFamilyNoticeFieldNumber = 4;
  inline const ::std::string& familynotice() const;
  inline void set_familynotice(const ::std::string& value);
  inline void set_familynotice(const char* value);
  inline void set_familynotice(const char* value, size_t size);
  inline ::std::string* mutable_familynotice();
  
  // optional string FamilyHeaderName = 5;
  inline bool has_familyheadername() const;
  inline void clear_familyheadername();
  static const int kFamilyHeaderNameFieldNumber = 5;
  inline const ::std::string& familyheadername() const;
  inline void set_familyheadername(const ::std::string& value);
  inline void set_familyheadername(const char* value);
  inline void set_familyheadername(const char* value, size_t size);
  inline ::std::string* mutable_familyheadername();
  
  // optional uint32 MemberNum = 6;
  inline bool has_membernum() const;
  inline void clear_membernum();
  static const int kMemberNumFieldNumber = 6;
  inline ::google::protobuf::uint32 membernum() const;
  inline void set_membernum(::google::protobuf::uint32 value);
  
  // optional uint32 FamilyID = 7;
  inline bool has_familyid() const;
  inline void clear_familyid();
  static const int kFamilyIDFieldNumber = 7;
  inline ::google::protobuf::uint32 familyid() const;
  inline void set_familyid(::google::protobuf::uint32 value);
  
  // optional uint32 NpcID = 8;
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcIDFieldNumber = 8;
  inline ::google::protobuf::uint32 npcid() const;
  inline void set_npcid(::google::protobuf::uint32 value);
  
  // optional uint32 BidMoney = 9;
  inline bool has_bidmoney() const;
  inline void clear_bidmoney();
  static const int kBidMoneyFieldNumber = 9;
  inline ::google::protobuf::uint32 bidmoney() const;
  inline void set_bidmoney(::google::protobuf::uint32 value);
  
  // optional uint32 BidTime = 10;
  inline bool has_bidtime() const;
  inline void clear_bidtime();
  static const int kBidTimeFieldNumber = 10;
  inline ::google::protobuf::uint32 bidtime() const;
  inline void set_bidtime(::google::protobuf::uint32 value);
  
  // optional uint32 WarNpc = 11;
  inline bool has_warnpc() const;
  inline void clear_warnpc();
  static const int kWarNpcFieldNumber = 11;
  inline ::google::protobuf::uint32 warnpc() const;
  inline void set_warnpc(::google::protobuf::uint32 value);
  
  // optional uint32 WarNpcStatus = 12;
  inline bool has_warnpcstatus() const;
  inline void clear_warnpcstatus();
  static const int kWarNpcStatusFieldNumber = 12;
  inline ::google::protobuf::uint32 warnpcstatus() const;
  inline void set_warnpcstatus(::google::protobuf::uint32 value);
  
  // optional uint32 WarRank = 13;
  inline bool has_warrank() const;
  inline void clear_warrank();
  static const int kWarRankFieldNumber = 13;
  inline ::google::protobuf::uint32 warrank() const;
  inline void set_warrank(::google::protobuf::uint32 value);
  
  // optional uint32 WarWinNum = 14;
  inline bool has_warwinnum() const;
  inline void clear_warwinnum();
  static const int kWarWinNumFieldNumber = 14;
  inline ::google::protobuf::uint32 warwinnum() const;
  inline void set_warwinnum(::google::protobuf::uint32 value);
  
  // optional uint32 WarLostNum = 15;
  inline bool has_warlostnum() const;
  inline void clear_warlostnum();
  static const int kWarLostNumFieldNumber = 15;
  inline ::google::protobuf::uint32 warlostnum() const;
  inline void set_warlostnum(::google::protobuf::uint32 value);
  
  // optional uint32 FamilyStarLevel = 16;
  inline bool has_familystarlevel() const;
  inline void clear_familystarlevel();
  static const int kFamilyStarLevelFieldNumber = 16;
  inline ::google::protobuf::uint32 familystarlevel() const;
  inline void set_familystarlevel(::google::protobuf::uint32 value);
  
  // optional uint32 WarExp = 17;
  inline bool has_warexp() const;
  inline void clear_warexp();
  static const int kWarExpFieldNumber = 17;
  inline ::google::protobuf::uint32 warexp() const;
  inline void set_warexp(::google::protobuf::uint32 value);
  
  // optional uint32 WarMaxExp = 18;
  inline bool has_warmaxexp() const;
  inline void clear_warmaxexp();
  static const int kWarMaxExpFieldNumber = 18;
  inline ::google::protobuf::uint32 warmaxexp() const;
  inline void set_warmaxexp(::google::protobuf::uint32 value);
  
  // optional string EnemyFamilyName = 19;
  inline bool has_enemyfamilyname() const;
  inline void clear_enemyfamilyname();
  static const int kEnemyFamilyNameFieldNumber = 19;
  inline const ::std::string& enemyfamilyname() const;
  inline void set_enemyfamilyname(const ::std::string& value);
  inline void set_enemyfamilyname(const char* value);
  inline void set_enemyfamilyname(const char* value, size_t size);
  inline ::std::string* mutable_enemyfamilyname();
  
  // repeated uint32 TaskID = 20;
  inline int taskid_size() const;
  inline void clear_taskid();
  static const int kTaskIDFieldNumber = 20;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >& taskid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >* mutable_taskid();
  inline ::google::protobuf::uint32 taskid(int index) const;
  inline void set_taskid(int index, ::google::protobuf::uint32 value);
  inline void add_taskid(::google::protobuf::uint32 value);
  
  // optional uint32 FamilyGlory = 21;
  inline bool has_familyglory() const;
  inline void clear_familyglory();
  static const int kFamilyGloryFieldNumber = 21;
  inline ::google::protobuf::uint32 familyglory() const;
  inline void set_familyglory(::google::protobuf::uint32 value);
  
  // optional uint32 FamilyDevelop = 22;
  inline bool has_familydevelop() const;
  inline void clear_familydevelop();
  static const int kFamilyDevelopFieldNumber = 22;
  inline ::google::protobuf::uint32 familydevelop() const;
  inline void set_familydevelop(::google::protobuf::uint32 value);
  
  // optional uint32 WarStatus = 23;
  inline bool has_warstatus() const;
  inline void clear_warstatus();
  static const int kWarStatusFieldNumber = 23;
  inline ::google::protobuf::uint32 warstatus() const;
  inline void set_warstatus(::google::protobuf::uint32 value);
  
  // optional uint32 ChallengeStatus = 24;
  inline bool has_challengestatus() const;
  inline void clear_challengestatus();
  static const int kChallengeStatusFieldNumber = 24;
  inline ::google::protobuf::uint32 challengestatus() const;
  inline void set_challengestatus(::google::protobuf::uint32 value);
  
  // optional uint32 ChallengeMoney = 25;
  inline bool has_challengemoney() const;
  inline void clear_challengemoney();
  static const int kChallengeMoneyFieldNumber = 25;
  inline ::google::protobuf::uint32 challengemoney() const;
  inline void set_challengemoney(::google::protobuf::uint32 value);
  
  // optional string ChallengeStarted = 26;
  inline bool has_challengestarted() const;
  inline void clear_challengestarted();
  static const int kChallengeStartedFieldNumber = 26;
  inline const ::std::string& challengestarted() const;
  inline void set_challengestarted(const ::std::string& value);
  inline void set_challengestarted(const char* value);
  inline void set_challengestarted(const char* value, size_t size);
  inline ::std::string* mutable_challengestarted();
  
  // optional string ChallengeReceived = 27;
  inline bool has_challengereceived() const;
  inline void clear_challengereceived();
  static const int kChallengeReceivedFieldNumber = 27;
  inline const ::std::string& challengereceived() const;
  inline void set_challengereceived(const ::std::string& value);
  inline void set_challengereceived(const char* value);
  inline void set_challengereceived(const char* value, size_t size);
  inline ::std::string* mutable_challengereceived();
  
  // optional uint32 MaxMemberNum = 28;
  inline bool has_maxmembernum() const;
  inline void clear_maxmembernum();
  static const int kMaxMemberNumFieldNumber = 28;
  inline ::google::protobuf::uint32 maxmembernum() const;
  inline void set_maxmembernum(::google::protobuf::uint32 value);
  
  // optional uint32 CanLevelUp = 29;
  inline bool has_canlevelup() const;
  inline void clear_canlevelup();
  static const int kCanLevelUpFieldNumber = 29;
  inline ::google::protobuf::uint32 canlevelup() const;
  inline void set_canlevelup(::google::protobuf::uint32 value);
  
  // optional uint32 MaxPresbyterNum = 30;
  inline bool has_maxpresbyternum() const;
  inline void clear_maxpresbyternum();
  static const int kMaxPresbyterNumFieldNumber = 30;
  inline ::google::protobuf::uint32 maxpresbyternum() const;
  inline void set_maxpresbyternum(::google::protobuf::uint32 value);
  
  // optional uint32 GloryLimit = 31;
  inline bool has_glorylimit() const;
  inline void clear_glorylimit();
  static const int kGloryLimitFieldNumber = 31;
  inline ::google::protobuf::uint32 glorylimit() const;
  inline void set_glorylimit(::google::protobuf::uint32 value);
  
  // optional uint32 LevelMoney = 32;
  inline bool has_levelmoney() const;
  inline void clear_levelmoney();
  static const int kLevelMoneyFieldNumber = 32;
  inline ::google::protobuf::uint32 levelmoney() const;
  inline void set_levelmoney(::google::protobuf::uint32 value);
  
  // optional uint32 Stability = 33;
  inline bool has_stability() const;
  inline void clear_stability();
  static const int kStabilityFieldNumber = 33;
  inline ::google::protobuf::uint32 stability() const;
  inline void set_stability(::google::protobuf::uint32 value);
  
  // optional uint32 ReduceStability = 34;
  inline bool has_reducestability() const;
  inline void clear_reducestability();
  static const int kReduceStabilityFieldNumber = 34;
  inline ::google::protobuf::uint32 reducestability() const;
  inline void set_reducestability(::google::protobuf::uint32 value);
  
  // optional uint32 ExtraRedstonExp = 35;
  inline bool has_extraredstonexp() const;
  inline void clear_extraredstonexp();
  static const int kExtraRedstonExpFieldNumber = 35;
  inline ::google::protobuf::uint32 extraredstonexp() const;
  inline void set_extraredstonexp(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 familyheaderid_;
  ::google::protobuf::uint32 familymoney_;
  ::google::protobuf::uint32 familylevel_;
  ::std::string* familynotice_;
  static const ::std::string _default_familynotice_;
  ::std::string* familyheadername_;
  static const ::std::string _default_familyheadername_;
  ::google::protobuf::uint32 membernum_;
  ::google::protobuf::uint32 familyid_;
  ::google::protobuf::uint32 npcid_;
  ::google::protobuf::uint32 bidmoney_;
  ::google::protobuf::uint32 bidtime_;
  ::google::protobuf::uint32 warnpc_;
  ::google::protobuf::uint32 warnpcstatus_;
  ::google::protobuf::uint32 warrank_;
  ::google::protobuf::uint32 warwinnum_;
  ::google::protobuf::uint32 warlostnum_;
  ::google::protobuf::uint32 familystarlevel_;
  ::google::protobuf::uint32 warexp_;
  ::google::protobuf::uint32 warmaxexp_;
  ::std::string* enemyfamilyname_;
  static const ::std::string _default_enemyfamilyname_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > taskid_;
  ::google::protobuf::uint32 familyglory_;
  ::google::protobuf::uint32 familydevelop_;
  ::google::protobuf::uint32 warstatus_;
  ::google::protobuf::uint32 challengestatus_;
  ::google::protobuf::uint32 challengemoney_;
  ::std::string* challengestarted_;
  static const ::std::string _default_challengestarted_;
  ::std::string* challengereceived_;
  static const ::std::string _default_challengereceived_;
  ::google::protobuf::uint32 maxmembernum_;
  ::google::protobuf::uint32 canlevelup_;
  ::google::protobuf::uint32 maxpresbyternum_;
  ::google::protobuf::uint32 glorylimit_;
  ::google::protobuf::uint32 levelmoney_;
  ::google::protobuf::uint32 stability_;
  ::google::protobuf::uint32 reducestability_;
  ::google::protobuf::uint32 extraredstonexp_;
  friend void  protobuf_AddDesc_familydbinfo_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familydbinfo_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familydbinfo_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(35 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PBFamilyPropery* default_instance_;
};
// -------------------------------------------------------------------

class PBFamilyMemberInfo : public ::google::protobuf::Message {
 public:
  PBFamilyMemberInfo();
  virtual ~PBFamilyMemberInfo();
  
  PBFamilyMemberInfo(const PBFamilyMemberInfo& from);
  
  inline PBFamilyMemberInfo& operator=(const PBFamilyMemberInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBFamilyMemberInfo& default_instance();
  void Swap(PBFamilyMemberInfo* other);
  
  // implements Message ----------------------------------------------
  
  PBFamilyMemberInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBFamilyMemberInfo& from);
  void MergeFrom(const PBFamilyMemberInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 RoleID = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIDFieldNumber = 1;
  inline ::google::protobuf::uint32 roleid() const;
  inline void set_roleid(::google::protobuf::uint32 value);
  
  // optional uint32 FamilyPost = 2;
  inline bool has_familypost() const;
  inline void clear_familypost();
  static const int kFamilyPostFieldNumber = 2;
  inline ::google::protobuf::uint32 familypost() const;
  inline void set_familypost(::google::protobuf::uint32 value);
  
  // optional uint32 FamilyContribute = 3;
  inline bool has_familycontribute() const;
  inline void clear_familycontribute();
  static const int kFamilyContributeFieldNumber = 3;
  inline ::google::protobuf::uint32 familycontribute() const;
  inline void set_familycontribute(::google::protobuf::uint32 value);
  
  // optional uint32 CorpsContribute = 4;
  inline bool has_corpscontribute() const;
  inline void clear_corpscontribute();
  static const int kCorpsContributeFieldNumber = 4;
  inline ::google::protobuf::uint32 corpscontribute() const;
  inline void set_corpscontribute(::google::protobuf::uint32 value);
  
  // optional uint32 CorpsPost = 5;
  inline bool has_corpspost() const;
  inline void clear_corpspost();
  static const int kCorpsPostFieldNumber = 5;
  inline ::google::protobuf::uint32 corpspost() const;
  inline void set_corpspost(::google::protobuf::uint32 value);
  
  // optional string CorpsTitle = 6;
  inline bool has_corpstitle() const;
  inline void clear_corpstitle();
  static const int kCorpsTitleFieldNumber = 6;
  inline const ::std::string& corpstitle() const;
  inline void set_corpstitle(const ::std::string& value);
  inline void set_corpstitle(const char* value);
  inline void set_corpstitle(const char* value, size_t size);
  inline ::std::string* mutable_corpstitle();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 roleid_;
  ::google::protobuf::uint32 familypost_;
  ::google::protobuf::uint32 familycontribute_;
  ::google::protobuf::uint32 corpscontribute_;
  ::google::protobuf::uint32 corpspost_;
  ::std::string* corpstitle_;
  static const ::std::string _default_corpstitle_;
  friend void  protobuf_AddDesc_familydbinfo_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familydbinfo_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familydbinfo_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PBFamilyMemberInfo* default_instance_;
};
// -------------------------------------------------------------------

class PBFamilyMemberInfoList : public ::google::protobuf::Message {
 public:
  PBFamilyMemberInfoList();
  virtual ~PBFamilyMemberInfoList();
  
  PBFamilyMemberInfoList(const PBFamilyMemberInfoList& from);
  
  inline PBFamilyMemberInfoList& operator=(const PBFamilyMemberInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBFamilyMemberInfoList& default_instance();
  void Swap(PBFamilyMemberInfoList* other);
  
  // implements Message ----------------------------------------------
  
  PBFamilyMemberInfoList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBFamilyMemberInfoList& from);
  void MergeFrom(const PBFamilyMemberInfoList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .PBFamilyMemberInfo MemberInfo = 1;
  inline int memberinfo_size() const;
  inline void clear_memberinfo();
  static const int kMemberInfoFieldNumber = 1;
  inline const ::google::protobuf::RepeatedPtrField< ::PBFamilyMemberInfo >& memberinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBFamilyMemberInfo >* mutable_memberinfo();
  inline const ::PBFamilyMemberInfo& memberinfo(int index) const;
  inline ::PBFamilyMemberInfo* mutable_memberinfo(int index);
  inline ::PBFamilyMemberInfo* add_memberinfo();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::PBFamilyMemberInfo > memberinfo_;
  friend void  protobuf_AddDesc_familydbinfo_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familydbinfo_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familydbinfo_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PBFamilyMemberInfoList* default_instance_;
};
// -------------------------------------------------------------------

class PBGoodItemInfo : public ::google::protobuf::Message {
 public:
  PBGoodItemInfo();
  virtual ~PBGoodItemInfo();
  
  PBGoodItemInfo(const PBGoodItemInfo& from);
  
  inline PBGoodItemInfo& operator=(const PBGoodItemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBGoodItemInfo& default_instance();
  void Swap(PBGoodItemInfo* other);
  
  // implements Message ----------------------------------------------
  
  PBGoodItemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBGoodItemInfo& from);
  void MergeFrom(const PBGoodItemInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 ItemID = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);
  
  // optional uint32 ItemNum = 2;
  inline bool has_itemnum() const;
  inline void clear_itemnum();
  static const int kItemNumFieldNumber = 2;
  inline ::google::protobuf::uint32 itemnum() const;
  inline void set_itemnum(::google::protobuf::uint32 value);
  
  // optional uint32 ComposeID = 3;
  inline bool has_composeid() const;
  inline void clear_composeid();
  static const int kComposeIDFieldNumber = 3;
  inline ::google::protobuf::uint32 composeid() const;
  inline void set_composeid(::google::protobuf::uint32 value);
  
  // optional uint32 PurcharseTime = 4;
  inline bool has_purcharsetime() const;
  inline void clear_purcharsetime();
  static const int kPurcharseTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 purcharsetime() const;
  inline void set_purcharsetime(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 itemnum_;
  ::google::protobuf::uint32 composeid_;
  ::google::protobuf::uint32 purcharsetime_;
  friend void  protobuf_AddDesc_familydbinfo_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familydbinfo_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familydbinfo_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PBGoodItemInfo* default_instance_;
};
// -------------------------------------------------------------------

class PBLeagueShopInfo : public ::google::protobuf::Message {
 public:
  PBLeagueShopInfo();
  virtual ~PBLeagueShopInfo();
  
  PBLeagueShopInfo(const PBLeagueShopInfo& from);
  
  inline PBLeagueShopInfo& operator=(const PBLeagueShopInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBLeagueShopInfo& default_instance();
  void Swap(PBLeagueShopInfo* other);
  
  // implements Message ----------------------------------------------
  
  PBLeagueShopInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBLeagueShopInfo& from);
  void MergeFrom(const PBLeagueShopInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 ShopID = 1;
  inline bool has_shopid() const;
  inline void clear_shopid();
  static const int kShopIDFieldNumber = 1;
  inline ::google::protobuf::uint32 shopid() const;
  inline void set_shopid(::google::protobuf::uint32 value);
  
  // optional uint32 ShopType = 2;
  inline bool has_shoptype() const;
  inline void clear_shoptype();
  static const int kShopTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 shoptype() const;
  inline void set_shoptype(::google::protobuf::uint32 value);
  
  // repeated .PBGoodItemInfo ItemInfo = 3;
  inline int iteminfo_size() const;
  inline void clear_iteminfo();
  static const int kItemInfoFieldNumber = 3;
  inline const ::google::protobuf::RepeatedPtrField< ::PBGoodItemInfo >& iteminfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBGoodItemInfo >* mutable_iteminfo();
  inline const ::PBGoodItemInfo& iteminfo(int index) const;
  inline ::PBGoodItemInfo* mutable_iteminfo(int index);
  inline ::PBGoodItemInfo* add_iteminfo();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 shopid_;
  ::google::protobuf::uint32 shoptype_;
  ::google::protobuf::RepeatedPtrField< ::PBGoodItemInfo > iteminfo_;
  friend void  protobuf_AddDesc_familydbinfo_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familydbinfo_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familydbinfo_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PBLeagueShopInfo* default_instance_;
};
// -------------------------------------------------------------------

class PBLeagueShopsListInfo : public ::google::protobuf::Message {
 public:
  PBLeagueShopsListInfo();
  virtual ~PBLeagueShopsListInfo();
  
  PBLeagueShopsListInfo(const PBLeagueShopsListInfo& from);
  
  inline PBLeagueShopsListInfo& operator=(const PBLeagueShopsListInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBLeagueShopsListInfo& default_instance();
  void Swap(PBLeagueShopsListInfo* other);
  
  // implements Message ----------------------------------------------
  
  PBLeagueShopsListInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBLeagueShopsListInfo& from);
  void MergeFrom(const PBLeagueShopsListInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .PBLeagueShopInfo LeagueShopInfo = 1;
  inline int leagueshopinfo_size() const;
  inline void clear_leagueshopinfo();
  static const int kLeagueShopInfoFieldNumber = 1;
  inline const ::google::protobuf::RepeatedPtrField< ::PBLeagueShopInfo >& leagueshopinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBLeagueShopInfo >* mutable_leagueshopinfo();
  inline const ::PBLeagueShopInfo& leagueshopinfo(int index) const;
  inline ::PBLeagueShopInfo* mutable_leagueshopinfo(int index);
  inline ::PBLeagueShopInfo* add_leagueshopinfo();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::PBLeagueShopInfo > leagueshopinfo_;
  friend void  protobuf_AddDesc_familydbinfo_5fpb_2ehxx();
  friend void protobuf_AssignDesc_familydbinfo_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_familydbinfo_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PBLeagueShopsListInfo* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// ApplyInfo

// optional string PlayerName = 1;
inline bool ApplyInfo::has_playername() const {
  return _has_bit(0);
}
inline void ApplyInfo::clear_playername() {
  if (playername_ != &_default_playername_) {
    playername_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& ApplyInfo::playername() const {
  return *playername_;
}
inline void ApplyInfo::set_playername(const ::std::string& value) {
  _set_bit(0);
  if (playername_ == &_default_playername_) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void ApplyInfo::set_playername(const char* value) {
  _set_bit(0);
  if (playername_ == &_default_playername_) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void ApplyInfo::set_playername(const char* value, size_t size) {
  _set_bit(0);
  if (playername_ == &_default_playername_) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ApplyInfo::mutable_playername() {
  _set_bit(0);
  if (playername_ == &_default_playername_) {
    playername_ = new ::std::string;
  }
  return playername_;
}

// optional uint32 PlayerLevel = 2;
inline bool ApplyInfo::has_playerlevel() const {
  return _has_bit(1);
}
inline void ApplyInfo::clear_playerlevel() {
  playerlevel_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 ApplyInfo::playerlevel() const {
  return playerlevel_;
}
inline void ApplyInfo::set_playerlevel(::google::protobuf::uint32 value) {
  _set_bit(1);
  playerlevel_ = value;
}

// optional uint32 FaceType = 3;
inline bool ApplyInfo::has_facetype() const {
  return _has_bit(2);
}
inline void ApplyInfo::clear_facetype() {
  facetype_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 ApplyInfo::facetype() const {
  return facetype_;
}
inline void ApplyInfo::set_facetype(::google::protobuf::uint32 value) {
  _set_bit(2);
  facetype_ = value;
}

// optional uint32 LineID = 4;
inline bool ApplyInfo::has_lineid() const {
  return _has_bit(3);
}
inline void ApplyInfo::clear_lineid() {
  lineid_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 ApplyInfo::lineid() const {
  return lineid_;
}
inline void ApplyInfo::set_lineid(::google::protobuf::uint32 value) {
  _set_bit(3);
  lineid_ = value;
}

// optional uint32 PlayerCharID = 5;
inline bool ApplyInfo::has_playercharid() const {
  return _has_bit(4);
}
inline void ApplyInfo::clear_playercharid() {
  playercharid_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 ApplyInfo::playercharid() const {
  return playercharid_;
}
inline void ApplyInfo::set_playercharid(::google::protobuf::uint32 value) {
  _set_bit(4);
  playercharid_ = value;
}

// optional uint32 PlayerOnLine = 6;
inline bool ApplyInfo::has_playeronline() const {
  return _has_bit(5);
}
inline void ApplyInfo::clear_playeronline() {
  playeronline_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 ApplyInfo::playeronline() const {
  return playeronline_;
}
inline void ApplyInfo::set_playeronline(::google::protobuf::uint32 value) {
  _set_bit(5);
  playeronline_ = value;
}

// optional uint32 PlayerMetier = 7;
inline bool ApplyInfo::has_playermetier() const {
  return _has_bit(6);
}
inline void ApplyInfo::clear_playermetier() {
  playermetier_ = 0u;
  _clear_bit(6);
}
inline ::google::protobuf::uint32 ApplyInfo::playermetier() const {
  return playermetier_;
}
inline void ApplyInfo::set_playermetier(::google::protobuf::uint32 value) {
  _set_bit(6);
  playermetier_ = value;
}

// optional uint32 MapID = 8;
inline bool ApplyInfo::has_mapid() const {
  return _has_bit(7);
}
inline void ApplyInfo::clear_mapid() {
  mapid_ = 0u;
  _clear_bit(7);
}
inline ::google::protobuf::uint32 ApplyInfo::mapid() const {
  return mapid_;
}
inline void ApplyInfo::set_mapid(::google::protobuf::uint32 value) {
  _set_bit(7);
  mapid_ = value;
}

// optional uint32 PlayerSex = 9;
inline bool ApplyInfo::has_playersex() const {
  return _has_bit(8);
}
inline void ApplyInfo::clear_playersex() {
  playersex_ = 0u;
  _clear_bit(8);
}
inline ::google::protobuf::uint32 ApplyInfo::playersex() const {
  return playersex_;
}
inline void ApplyInfo::set_playersex(::google::protobuf::uint32 value) {
  _set_bit(8);
  playersex_ = value;
}

// -------------------------------------------------------------------

// PBApplyList

// repeated .ApplyInfo ApplyData = 1;
inline int PBApplyList::applydata_size() const {
  return applydata_.size();
}
inline void PBApplyList::clear_applydata() {
  applydata_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::ApplyInfo >&
PBApplyList::applydata() const {
  return applydata_;
}
inline ::google::protobuf::RepeatedPtrField< ::ApplyInfo >*
PBApplyList::mutable_applydata() {
  return &applydata_;
}
inline const ::ApplyInfo& PBApplyList::applydata(int index) const {
  return applydata_.Get(index);
}
inline ::ApplyInfo* PBApplyList::mutable_applydata(int index) {
  return applydata_.Mutable(index);
}
inline ::ApplyInfo* PBApplyList::add_applydata() {
  return applydata_.Add();
}

// -------------------------------------------------------------------

// FamilyData

// optional string FamilyName = 1;
inline bool FamilyData::has_familyname() const {
  return _has_bit(0);
}
inline void FamilyData::clear_familyname() {
  if (familyname_ != &_default_familyname_) {
    familyname_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& FamilyData::familyname() const {
  return *familyname_;
}
inline void FamilyData::set_familyname(const ::std::string& value) {
  _set_bit(0);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  familyname_->assign(value);
}
inline void FamilyData::set_familyname(const char* value) {
  _set_bit(0);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  familyname_->assign(value);
}
inline void FamilyData::set_familyname(const char* value, size_t size) {
  _set_bit(0);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  familyname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FamilyData::mutable_familyname() {
  _set_bit(0);
  if (familyname_ == &_default_familyname_) {
    familyname_ = new ::std::string;
  }
  return familyname_;
}

// optional uint32 FamilyID = 2;
inline bool FamilyData::has_familyid() const {
  return _has_bit(1);
}
inline void FamilyData::clear_familyid() {
  familyid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 FamilyData::familyid() const {
  return familyid_;
}
inline void FamilyData::set_familyid(::google::protobuf::uint32 value) {
  _set_bit(1);
  familyid_ = value;
}

// optional string HeaderName = 3;
inline bool FamilyData::has_headername() const {
  return _has_bit(2);
}
inline void FamilyData::clear_headername() {
  if (headername_ != &_default_headername_) {
    headername_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& FamilyData::headername() const {
  return *headername_;
}
inline void FamilyData::set_headername(const ::std::string& value) {
  _set_bit(2);
  if (headername_ == &_default_headername_) {
    headername_ = new ::std::string;
  }
  headername_->assign(value);
}
inline void FamilyData::set_headername(const char* value) {
  _set_bit(2);
  if (headername_ == &_default_headername_) {
    headername_ = new ::std::string;
  }
  headername_->assign(value);
}
inline void FamilyData::set_headername(const char* value, size_t size) {
  _set_bit(2);
  if (headername_ == &_default_headername_) {
    headername_ = new ::std::string;
  }
  headername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FamilyData::mutable_headername() {
  _set_bit(2);
  if (headername_ == &_default_headername_) {
    headername_ = new ::std::string;
  }
  return headername_;
}

// optional uint32 HeaderRoleID = 4;
inline bool FamilyData::has_headerroleid() const {
  return _has_bit(3);
}
inline void FamilyData::clear_headerroleid() {
  headerroleid_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 FamilyData::headerroleid() const {
  return headerroleid_;
}
inline void FamilyData::set_headerroleid(::google::protobuf::uint32 value) {
  _set_bit(3);
  headerroleid_ = value;
}

// optional uint32 MemberNum = 5;
inline bool FamilyData::has_membernum() const {
  return _has_bit(4);
}
inline void FamilyData::clear_membernum() {
  membernum_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 FamilyData::membernum() const {
  return membernum_;
}
inline void FamilyData::set_membernum(::google::protobuf::uint32 value) {
  _set_bit(4);
  membernum_ = value;
}

// optional uint32 FamilyLevel = 6;
inline bool FamilyData::has_familylevel() const {
  return _has_bit(5);
}
inline void FamilyData::clear_familylevel() {
  familylevel_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 FamilyData::familylevel() const {
  return familylevel_;
}
inline void FamilyData::set_familylevel(::google::protobuf::uint32 value) {
  _set_bit(5);
  familylevel_ = value;
}

// optional uint32 FamilyGlory = 7;
inline bool FamilyData::has_familyglory() const {
  return _has_bit(6);
}
inline void FamilyData::clear_familyglory() {
  familyglory_ = 0u;
  _clear_bit(6);
}
inline ::google::protobuf::uint32 FamilyData::familyglory() const {
  return familyglory_;
}
inline void FamilyData::set_familyglory(::google::protobuf::uint32 value) {
  _set_bit(6);
  familyglory_ = value;
}

// optional uint32 FamilyDevelop = 8;
inline bool FamilyData::has_familydevelop() const {
  return _has_bit(7);
}
inline void FamilyData::clear_familydevelop() {
  familydevelop_ = 0u;
  _clear_bit(7);
}
inline ::google::protobuf::uint32 FamilyData::familydevelop() const {
  return familydevelop_;
}
inline void FamilyData::set_familydevelop(::google::protobuf::uint32 value) {
  _set_bit(7);
  familydevelop_ = value;
}

// optional uint32 NpcID = 9;
inline bool FamilyData::has_npcid() const {
  return _has_bit(8);
}
inline void FamilyData::clear_npcid() {
  npcid_ = 0u;
  _clear_bit(8);
}
inline ::google::protobuf::uint32 FamilyData::npcid() const {
  return npcid_;
}
inline void FamilyData::set_npcid(::google::protobuf::uint32 value) {
  _set_bit(8);
  npcid_ = value;
}

// optional uint32 BidMoney = 10;
inline bool FamilyData::has_bidmoney() const {
  return _has_bit(9);
}
inline void FamilyData::clear_bidmoney() {
  bidmoney_ = 0u;
  _clear_bit(9);
}
inline ::google::protobuf::uint32 FamilyData::bidmoney() const {
  return bidmoney_;
}
inline void FamilyData::set_bidmoney(::google::protobuf::uint32 value) {
  _set_bit(9);
  bidmoney_ = value;
}

// optional uint32 BidTime = 11;
inline bool FamilyData::has_bidtime() const {
  return _has_bit(10);
}
inline void FamilyData::clear_bidtime() {
  bidtime_ = 0u;
  _clear_bit(10);
}
inline ::google::protobuf::uint32 FamilyData::bidtime() const {
  return bidtime_;
}
inline void FamilyData::set_bidtime(::google::protobuf::uint32 value) {
  _set_bit(10);
  bidtime_ = value;
}

// optional uint32 WarNpcStatus = 12;
inline bool FamilyData::has_warnpcstatus() const {
  return _has_bit(11);
}
inline void FamilyData::clear_warnpcstatus() {
  warnpcstatus_ = 0u;
  _clear_bit(11);
}
inline ::google::protobuf::uint32 FamilyData::warnpcstatus() const {
  return warnpcstatus_;
}
inline void FamilyData::set_warnpcstatus(::google::protobuf::uint32 value) {
  _set_bit(11);
  warnpcstatus_ = value;
}

// optional uint32 WarRank = 13;
inline bool FamilyData::has_warrank() const {
  return _has_bit(12);
}
inline void FamilyData::clear_warrank() {
  warrank_ = 0u;
  _clear_bit(12);
}
inline ::google::protobuf::uint32 FamilyData::warrank() const {
  return warrank_;
}
inline void FamilyData::set_warrank(::google::protobuf::uint32 value) {
  _set_bit(12);
  warrank_ = value;
}

// optional uint32 WarWinNum = 14;
inline bool FamilyData::has_warwinnum() const {
  return _has_bit(13);
}
inline void FamilyData::clear_warwinnum() {
  warwinnum_ = 0u;
  _clear_bit(13);
}
inline ::google::protobuf::uint32 FamilyData::warwinnum() const {
  return warwinnum_;
}
inline void FamilyData::set_warwinnum(::google::protobuf::uint32 value) {
  _set_bit(13);
  warwinnum_ = value;
}

// optional uint32 WarLostNum = 15;
inline bool FamilyData::has_warlostnum() const {
  return _has_bit(14);
}
inline void FamilyData::clear_warlostnum() {
  warlostnum_ = 0u;
  _clear_bit(14);
}
inline ::google::protobuf::uint32 FamilyData::warlostnum() const {
  return warlostnum_;
}
inline void FamilyData::set_warlostnum(::google::protobuf::uint32 value) {
  _set_bit(14);
  warlostnum_ = value;
}

// optional uint32 FamilyStarLevel = 16;
inline bool FamilyData::has_familystarlevel() const {
  return _has_bit(15);
}
inline void FamilyData::clear_familystarlevel() {
  familystarlevel_ = 0u;
  _clear_bit(15);
}
inline ::google::protobuf::uint32 FamilyData::familystarlevel() const {
  return familystarlevel_;
}
inline void FamilyData::set_familystarlevel(::google::protobuf::uint32 value) {
  _set_bit(15);
  familystarlevel_ = value;
}

// optional uint32 WarExp = 17;
inline bool FamilyData::has_warexp() const {
  return _has_bit(16);
}
inline void FamilyData::clear_warexp() {
  warexp_ = 0u;
  _clear_bit(16);
}
inline ::google::protobuf::uint32 FamilyData::warexp() const {
  return warexp_;
}
inline void FamilyData::set_warexp(::google::protobuf::uint32 value) {
  _set_bit(16);
  warexp_ = value;
}

// optional uint32 WarMaxExp = 18;
inline bool FamilyData::has_warmaxexp() const {
  return _has_bit(17);
}
inline void FamilyData::clear_warmaxexp() {
  warmaxexp_ = 0u;
  _clear_bit(17);
}
inline ::google::protobuf::uint32 FamilyData::warmaxexp() const {
  return warmaxexp_;
}
inline void FamilyData::set_warmaxexp(::google::protobuf::uint32 value) {
  _set_bit(17);
  warmaxexp_ = value;
}

// optional string EnemyFamilyName = 19;
inline bool FamilyData::has_enemyfamilyname() const {
  return _has_bit(18);
}
inline void FamilyData::clear_enemyfamilyname() {
  if (enemyfamilyname_ != &_default_enemyfamilyname_) {
    enemyfamilyname_->clear();
  }
  _clear_bit(18);
}
inline const ::std::string& FamilyData::enemyfamilyname() const {
  return *enemyfamilyname_;
}
inline void FamilyData::set_enemyfamilyname(const ::std::string& value) {
  _set_bit(18);
  if (enemyfamilyname_ == &_default_enemyfamilyname_) {
    enemyfamilyname_ = new ::std::string;
  }
  enemyfamilyname_->assign(value);
}
inline void FamilyData::set_enemyfamilyname(const char* value) {
  _set_bit(18);
  if (enemyfamilyname_ == &_default_enemyfamilyname_) {
    enemyfamilyname_ = new ::std::string;
  }
  enemyfamilyname_->assign(value);
}
inline void FamilyData::set_enemyfamilyname(const char* value, size_t size) {
  _set_bit(18);
  if (enemyfamilyname_ == &_default_enemyfamilyname_) {
    enemyfamilyname_ = new ::std::string;
  }
  enemyfamilyname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FamilyData::mutable_enemyfamilyname() {
  _set_bit(18);
  if (enemyfamilyname_ == &_default_enemyfamilyname_) {
    enemyfamilyname_ = new ::std::string;
  }
  return enemyfamilyname_;
}

// optional uint32 WarStatus = 20;
inline bool FamilyData::has_warstatus() const {
  return _has_bit(19);
}
inline void FamilyData::clear_warstatus() {
  warstatus_ = 0u;
  _clear_bit(19);
}
inline ::google::protobuf::uint32 FamilyData::warstatus() const {
  return warstatus_;
}
inline void FamilyData::set_warstatus(::google::protobuf::uint32 value) {
  _set_bit(19);
  warstatus_ = value;
}

// optional uint32 FamilyNpcNum = 21;
inline bool FamilyData::has_familynpcnum() const {
  return _has_bit(20);
}
inline void FamilyData::clear_familynpcnum() {
  familynpcnum_ = 0u;
  _clear_bit(20);
}
inline ::google::protobuf::uint32 FamilyData::familynpcnum() const {
  return familynpcnum_;
}
inline void FamilyData::set_familynpcnum(::google::protobuf::uint32 value) {
  _set_bit(20);
  familynpcnum_ = value;
}

// optional uint32 MaxMemberNum = 22;
inline bool FamilyData::has_maxmembernum() const {
  return _has_bit(21);
}
inline void FamilyData::clear_maxmembernum() {
  maxmembernum_ = 0u;
  _clear_bit(21);
}
inline ::google::protobuf::uint32 FamilyData::maxmembernum() const {
  return maxmembernum_;
}
inline void FamilyData::set_maxmembernum(::google::protobuf::uint32 value) {
  _set_bit(21);
  maxmembernum_ = value;
}

// optional string CorpsName = 23;
inline bool FamilyData::has_corpsname() const {
  return _has_bit(22);
}
inline void FamilyData::clear_corpsname() {
  if (corpsname_ != &_default_corpsname_) {
    corpsname_->clear();
  }
  _clear_bit(22);
}
inline const ::std::string& FamilyData::corpsname() const {
  return *corpsname_;
}
inline void FamilyData::set_corpsname(const ::std::string& value) {
  _set_bit(22);
  if (corpsname_ == &_default_corpsname_) {
    corpsname_ = new ::std::string;
  }
  corpsname_->assign(value);
}
inline void FamilyData::set_corpsname(const char* value) {
  _set_bit(22);
  if (corpsname_ == &_default_corpsname_) {
    corpsname_ = new ::std::string;
  }
  corpsname_->assign(value);
}
inline void FamilyData::set_corpsname(const char* value, size_t size) {
  _set_bit(22);
  if (corpsname_ == &_default_corpsname_) {
    corpsname_ = new ::std::string;
  }
  corpsname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FamilyData::mutable_corpsname() {
  _set_bit(22);
  if (corpsname_ == &_default_corpsname_) {
    corpsname_ = new ::std::string;
  }
  return corpsname_;
}

// -------------------------------------------------------------------

// PBFamilyList

// repeated .FamilyData FamilyInfo = 1;
inline int PBFamilyList::familyinfo_size() const {
  return familyinfo_.size();
}
inline void PBFamilyList::clear_familyinfo() {
  familyinfo_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::FamilyData >&
PBFamilyList::familyinfo() const {
  return familyinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::FamilyData >*
PBFamilyList::mutable_familyinfo() {
  return &familyinfo_;
}
inline const ::FamilyData& PBFamilyList::familyinfo(int index) const {
  return familyinfo_.Get(index);
}
inline ::FamilyData* PBFamilyList::mutable_familyinfo(int index) {
  return familyinfo_.Mutable(index);
}
inline ::FamilyData* PBFamilyList::add_familyinfo() {
  return familyinfo_.Add();
}

// -------------------------------------------------------------------

// FamilyMemberInfo

// optional uint32 FaceID = 1;
inline bool FamilyMemberInfo::has_faceid() const {
  return _has_bit(0);
}
inline void FamilyMemberInfo::clear_faceid() {
  faceid_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 FamilyMemberInfo::faceid() const {
  return faceid_;
}
inline void FamilyMemberInfo::set_faceid(::google::protobuf::uint32 value) {
  _set_bit(0);
  faceid_ = value;
}

// optional uint32 LineID = 2;
inline bool FamilyMemberInfo::has_lineid() const {
  return _has_bit(1);
}
inline void FamilyMemberInfo::clear_lineid() {
  lineid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 FamilyMemberInfo::lineid() const {
  return lineid_;
}
inline void FamilyMemberInfo::set_lineid(::google::protobuf::uint32 value) {
  _set_bit(1);
  lineid_ = value;
}

// optional uint32 PlayerLevel = 3;
inline bool FamilyMemberInfo::has_playerlevel() const {
  return _has_bit(2);
}
inline void FamilyMemberInfo::clear_playerlevel() {
  playerlevel_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 FamilyMemberInfo::playerlevel() const {
  return playerlevel_;
}
inline void FamilyMemberInfo::set_playerlevel(::google::protobuf::uint32 value) {
  _set_bit(2);
  playerlevel_ = value;
}

// optional uint32 PlayerPost = 4;
inline bool FamilyMemberInfo::has_playerpost() const {
  return _has_bit(3);
}
inline void FamilyMemberInfo::clear_playerpost() {
  playerpost_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 FamilyMemberInfo::playerpost() const {
  return playerpost_;
}
inline void FamilyMemberInfo::set_playerpost(::google::protobuf::uint32 value) {
  _set_bit(3);
  playerpost_ = value;
}

// optional uint32 PlayerCharID = 5;
inline bool FamilyMemberInfo::has_playercharid() const {
  return _has_bit(4);
}
inline void FamilyMemberInfo::clear_playercharid() {
  playercharid_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 FamilyMemberInfo::playercharid() const {
  return playercharid_;
}
inline void FamilyMemberInfo::set_playercharid(::google::protobuf::uint32 value) {
  _set_bit(4);
  playercharid_ = value;
}

// optional uint32 RoleSex = 6;
inline bool FamilyMemberInfo::has_rolesex() const {
  return _has_bit(5);
}
inline void FamilyMemberInfo::clear_rolesex() {
  rolesex_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 FamilyMemberInfo::rolesex() const {
  return rolesex_;
}
inline void FamilyMemberInfo::set_rolesex(::google::protobuf::uint32 value) {
  _set_bit(5);
  rolesex_ = value;
}

// optional string PlayerName = 7;
inline bool FamilyMemberInfo::has_playername() const {
  return _has_bit(6);
}
inline void FamilyMemberInfo::clear_playername() {
  if (playername_ != &_default_playername_) {
    playername_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& FamilyMemberInfo::playername() const {
  return *playername_;
}
inline void FamilyMemberInfo::set_playername(const ::std::string& value) {
  _set_bit(6);
  if (playername_ == &_default_playername_) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void FamilyMemberInfo::set_playername(const char* value) {
  _set_bit(6);
  if (playername_ == &_default_playername_) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void FamilyMemberInfo::set_playername(const char* value, size_t size) {
  _set_bit(6);
  if (playername_ == &_default_playername_) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FamilyMemberInfo::mutable_playername() {
  _set_bit(6);
  if (playername_ == &_default_playername_) {
    playername_ = new ::std::string;
  }
  return playername_;
}

// optional uint32 MetierID = 8;
inline bool FamilyMemberInfo::has_metierid() const {
  return _has_bit(7);
}
inline void FamilyMemberInfo::clear_metierid() {
  metierid_ = 0u;
  _clear_bit(7);
}
inline ::google::protobuf::uint32 FamilyMemberInfo::metierid() const {
  return metierid_;
}
inline void FamilyMemberInfo::set_metierid(::google::protobuf::uint32 value) {
  _set_bit(7);
  metierid_ = value;
}

// optional uint32 Online = 9;
inline bool FamilyMemberInfo::has_online() const {
  return _has_bit(8);
}
inline void FamilyMemberInfo::clear_online() {
  online_ = 0u;
  _clear_bit(8);
}
inline ::google::protobuf::uint32 FamilyMemberInfo::online() const {
  return online_;
}
inline void FamilyMemberInfo::set_online(::google::protobuf::uint32 value) {
  _set_bit(8);
  online_ = value;
}

// optional uint32 MapID = 10;
inline bool FamilyMemberInfo::has_mapid() const {
  return _has_bit(9);
}
inline void FamilyMemberInfo::clear_mapid() {
  mapid_ = 0u;
  _clear_bit(9);
}
inline ::google::protobuf::uint32 FamilyMemberInfo::mapid() const {
  return mapid_;
}
inline void FamilyMemberInfo::set_mapid(::google::protobuf::uint32 value) {
  _set_bit(9);
  mapid_ = value;
}

// optional uint32 FamilyWar = 11;
inline bool FamilyMemberInfo::has_familywar() const {
  return _has_bit(10);
}
inline void FamilyMemberInfo::clear_familywar() {
  familywar_ = 0u;
  _clear_bit(10);
}
inline ::google::protobuf::uint32 FamilyMemberInfo::familywar() const {
  return familywar_;
}
inline void FamilyMemberInfo::set_familywar(::google::protobuf::uint32 value) {
  _set_bit(10);
  familywar_ = value;
}

// optional uint32 Contribute = 12;
inline bool FamilyMemberInfo::has_contribute() const {
  return _has_bit(11);
}
inline void FamilyMemberInfo::clear_contribute() {
  contribute_ = 0u;
  _clear_bit(11);
}
inline ::google::protobuf::uint32 FamilyMemberInfo::contribute() const {
  return contribute_;
}
inline void FamilyMemberInfo::set_contribute(::google::protobuf::uint32 value) {
  _set_bit(11);
  contribute_ = value;
}

// optional uint32 CorpsContribute = 13;
inline bool FamilyMemberInfo::has_corpscontribute() const {
  return _has_bit(12);
}
inline void FamilyMemberInfo::clear_corpscontribute() {
  corpscontribute_ = 0u;
  _clear_bit(12);
}
inline ::google::protobuf::uint32 FamilyMemberInfo::corpscontribute() const {
  return corpscontribute_;
}
inline void FamilyMemberInfo::set_corpscontribute(::google::protobuf::uint32 value) {
  _set_bit(12);
  corpscontribute_ = value;
}

// optional uint32 CorpsWar = 14;
inline bool FamilyMemberInfo::has_corpswar() const {
  return _has_bit(13);
}
inline void FamilyMemberInfo::clear_corpswar() {
  corpswar_ = 0u;
  _clear_bit(13);
}
inline ::google::protobuf::uint32 FamilyMemberInfo::corpswar() const {
  return corpswar_;
}
inline void FamilyMemberInfo::set_corpswar(::google::protobuf::uint32 value) {
  _set_bit(13);
  corpswar_ = value;
}

// optional string CorpsTitle = 15;
inline bool FamilyMemberInfo::has_corpstitle() const {
  return _has_bit(14);
}
inline void FamilyMemberInfo::clear_corpstitle() {
  if (corpstitle_ != &_default_corpstitle_) {
    corpstitle_->clear();
  }
  _clear_bit(14);
}
inline const ::std::string& FamilyMemberInfo::corpstitle() const {
  return *corpstitle_;
}
inline void FamilyMemberInfo::set_corpstitle(const ::std::string& value) {
  _set_bit(14);
  if (corpstitle_ == &_default_corpstitle_) {
    corpstitle_ = new ::std::string;
  }
  corpstitle_->assign(value);
}
inline void FamilyMemberInfo::set_corpstitle(const char* value) {
  _set_bit(14);
  if (corpstitle_ == &_default_corpstitle_) {
    corpstitle_ = new ::std::string;
  }
  corpstitle_->assign(value);
}
inline void FamilyMemberInfo::set_corpstitle(const char* value, size_t size) {
  _set_bit(14);
  if (corpstitle_ == &_default_corpstitle_) {
    corpstitle_ = new ::std::string;
  }
  corpstitle_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FamilyMemberInfo::mutable_corpstitle() {
  _set_bit(14);
  if (corpstitle_ == &_default_corpstitle_) {
    corpstitle_ = new ::std::string;
  }
  return corpstitle_;
}

// -------------------------------------------------------------------

// PBFamilyMemberList

// repeated .FamilyMemberInfo Members = 1;
inline int PBFamilyMemberList::members_size() const {
  return members_.size();
}
inline void PBFamilyMemberList::clear_members() {
  members_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::FamilyMemberInfo >&
PBFamilyMemberList::members() const {
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::FamilyMemberInfo >*
PBFamilyMemberList::mutable_members() {
  return &members_;
}
inline const ::FamilyMemberInfo& PBFamilyMemberList::members(int index) const {
  return members_.Get(index);
}
inline ::FamilyMemberInfo* PBFamilyMemberList::mutable_members(int index) {
  return members_.Mutable(index);
}
inline ::FamilyMemberInfo* PBFamilyMemberList::add_members() {
  return members_.Add();
}

// -------------------------------------------------------------------

// PBFamilyOrganInfo

// optional uint32 Rights = 1;
inline bool PBFamilyOrganInfo::has_rights() const {
  return _has_bit(0);
}
inline void PBFamilyOrganInfo::clear_rights() {
  rights_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 PBFamilyOrganInfo::rights() const {
  return rights_;
}
inline void PBFamilyOrganInfo::set_rights(::google::protobuf::uint32 value) {
  _set_bit(0);
  rights_ = value;
}

// optional string OrganName = 2;
inline bool PBFamilyOrganInfo::has_organname() const {
  return _has_bit(1);
}
inline void PBFamilyOrganInfo::clear_organname() {
  if (organname_ != &_default_organname_) {
    organname_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& PBFamilyOrganInfo::organname() const {
  return *organname_;
}
inline void PBFamilyOrganInfo::set_organname(const ::std::string& value) {
  _set_bit(1);
  if (organname_ == &_default_organname_) {
    organname_ = new ::std::string;
  }
  organname_->assign(value);
}
inline void PBFamilyOrganInfo::set_organname(const char* value) {
  _set_bit(1);
  if (organname_ == &_default_organname_) {
    organname_ = new ::std::string;
  }
  organname_->assign(value);
}
inline void PBFamilyOrganInfo::set_organname(const char* value, size_t size) {
  _set_bit(1);
  if (organname_ == &_default_organname_) {
    organname_ = new ::std::string;
  }
  organname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBFamilyOrganInfo::mutable_organname() {
  _set_bit(1);
  if (organname_ == &_default_organname_) {
    organname_ = new ::std::string;
  }
  return organname_;
}

// optional uint32 ID = 3;
inline bool PBFamilyOrganInfo::has_id() const {
  return _has_bit(2);
}
inline void PBFamilyOrganInfo::clear_id() {
  id_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 PBFamilyOrganInfo::id() const {
  return id_;
}
inline void PBFamilyOrganInfo::set_id(::google::protobuf::uint32 value) {
  _set_bit(2);
  id_ = value;
}

// -------------------------------------------------------------------

// PBFamilyOrganList

// repeated .PBFamilyOrganInfo Organes = 1;
inline int PBFamilyOrganList::organes_size() const {
  return organes_.size();
}
inline void PBFamilyOrganList::clear_organes() {
  organes_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBFamilyOrganInfo >&
PBFamilyOrganList::organes() const {
  return organes_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBFamilyOrganInfo >*
PBFamilyOrganList::mutable_organes() {
  return &organes_;
}
inline const ::PBFamilyOrganInfo& PBFamilyOrganList::organes(int index) const {
  return organes_.Get(index);
}
inline ::PBFamilyOrganInfo* PBFamilyOrganList::mutable_organes(int index) {
  return organes_.Mutable(index);
}
inline ::PBFamilyOrganInfo* PBFamilyOrganList::add_organes() {
  return organes_.Add();
}

// -------------------------------------------------------------------

// PBFamilyPropery

// optional uint32 FamilyHeaderID = 1;
inline bool PBFamilyPropery::has_familyheaderid() const {
  return _has_bit(0);
}
inline void PBFamilyPropery::clear_familyheaderid() {
  familyheaderid_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 PBFamilyPropery::familyheaderid() const {
  return familyheaderid_;
}
inline void PBFamilyPropery::set_familyheaderid(::google::protobuf::uint32 value) {
  _set_bit(0);
  familyheaderid_ = value;
}

// optional uint32 FamilyMoney = 2;
inline bool PBFamilyPropery::has_familymoney() const {
  return _has_bit(1);
}
inline void PBFamilyPropery::clear_familymoney() {
  familymoney_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 PBFamilyPropery::familymoney() const {
  return familymoney_;
}
inline void PBFamilyPropery::set_familymoney(::google::protobuf::uint32 value) {
  _set_bit(1);
  familymoney_ = value;
}

// optional uint32 FamilyLevel = 3;
inline bool PBFamilyPropery::has_familylevel() const {
  return _has_bit(2);
}
inline void PBFamilyPropery::clear_familylevel() {
  familylevel_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 PBFamilyPropery::familylevel() const {
  return familylevel_;
}
inline void PBFamilyPropery::set_familylevel(::google::protobuf::uint32 value) {
  _set_bit(2);
  familylevel_ = value;
}

// optional string FamilyNotice = 4;
inline bool PBFamilyPropery::has_familynotice() const {
  return _has_bit(3);
}
inline void PBFamilyPropery::clear_familynotice() {
  if (familynotice_ != &_default_familynotice_) {
    familynotice_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& PBFamilyPropery::familynotice() const {
  return *familynotice_;
}
inline void PBFamilyPropery::set_familynotice(const ::std::string& value) {
  _set_bit(3);
  if (familynotice_ == &_default_familynotice_) {
    familynotice_ = new ::std::string;
  }
  familynotice_->assign(value);
}
inline void PBFamilyPropery::set_familynotice(const char* value) {
  _set_bit(3);
  if (familynotice_ == &_default_familynotice_) {
    familynotice_ = new ::std::string;
  }
  familynotice_->assign(value);
}
inline void PBFamilyPropery::set_familynotice(const char* value, size_t size) {
  _set_bit(3);
  if (familynotice_ == &_default_familynotice_) {
    familynotice_ = new ::std::string;
  }
  familynotice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBFamilyPropery::mutable_familynotice() {
  _set_bit(3);
  if (familynotice_ == &_default_familynotice_) {
    familynotice_ = new ::std::string;
  }
  return familynotice_;
}

// optional string FamilyHeaderName = 5;
inline bool PBFamilyPropery::has_familyheadername() const {
  return _has_bit(4);
}
inline void PBFamilyPropery::clear_familyheadername() {
  if (familyheadername_ != &_default_familyheadername_) {
    familyheadername_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& PBFamilyPropery::familyheadername() const {
  return *familyheadername_;
}
inline void PBFamilyPropery::set_familyheadername(const ::std::string& value) {
  _set_bit(4);
  if (familyheadername_ == &_default_familyheadername_) {
    familyheadername_ = new ::std::string;
  }
  familyheadername_->assign(value);
}
inline void PBFamilyPropery::set_familyheadername(const char* value) {
  _set_bit(4);
  if (familyheadername_ == &_default_familyheadername_) {
    familyheadername_ = new ::std::string;
  }
  familyheadername_->assign(value);
}
inline void PBFamilyPropery::set_familyheadername(const char* value, size_t size) {
  _set_bit(4);
  if (familyheadername_ == &_default_familyheadername_) {
    familyheadername_ = new ::std::string;
  }
  familyheadername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBFamilyPropery::mutable_familyheadername() {
  _set_bit(4);
  if (familyheadername_ == &_default_familyheadername_) {
    familyheadername_ = new ::std::string;
  }
  return familyheadername_;
}

// optional uint32 MemberNum = 6;
inline bool PBFamilyPropery::has_membernum() const {
  return _has_bit(5);
}
inline void PBFamilyPropery::clear_membernum() {
  membernum_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 PBFamilyPropery::membernum() const {
  return membernum_;
}
inline void PBFamilyPropery::set_membernum(::google::protobuf::uint32 value) {
  _set_bit(5);
  membernum_ = value;
}

// optional uint32 FamilyID = 7;
inline bool PBFamilyPropery::has_familyid() const {
  return _has_bit(6);
}
inline void PBFamilyPropery::clear_familyid() {
  familyid_ = 0u;
  _clear_bit(6);
}
inline ::google::protobuf::uint32 PBFamilyPropery::familyid() const {
  return familyid_;
}
inline void PBFamilyPropery::set_familyid(::google::protobuf::uint32 value) {
  _set_bit(6);
  familyid_ = value;
}

// optional uint32 NpcID = 8;
inline bool PBFamilyPropery::has_npcid() const {
  return _has_bit(7);
}
inline void PBFamilyPropery::clear_npcid() {
  npcid_ = 0u;
  _clear_bit(7);
}
inline ::google::protobuf::uint32 PBFamilyPropery::npcid() const {
  return npcid_;
}
inline void PBFamilyPropery::set_npcid(::google::protobuf::uint32 value) {
  _set_bit(7);
  npcid_ = value;
}

// optional uint32 BidMoney = 9;
inline bool PBFamilyPropery::has_bidmoney() const {
  return _has_bit(8);
}
inline void PBFamilyPropery::clear_bidmoney() {
  bidmoney_ = 0u;
  _clear_bit(8);
}
inline ::google::protobuf::uint32 PBFamilyPropery::bidmoney() const {
  return bidmoney_;
}
inline void PBFamilyPropery::set_bidmoney(::google::protobuf::uint32 value) {
  _set_bit(8);
  bidmoney_ = value;
}

// optional uint32 BidTime = 10;
inline bool PBFamilyPropery::has_bidtime() const {
  return _has_bit(9);
}
inline void PBFamilyPropery::clear_bidtime() {
  bidtime_ = 0u;
  _clear_bit(9);
}
inline ::google::protobuf::uint32 PBFamilyPropery::bidtime() const {
  return bidtime_;
}
inline void PBFamilyPropery::set_bidtime(::google::protobuf::uint32 value) {
  _set_bit(9);
  bidtime_ = value;
}

// optional uint32 WarNpc = 11;
inline bool PBFamilyPropery::has_warnpc() const {
  return _has_bit(10);
}
inline void PBFamilyPropery::clear_warnpc() {
  warnpc_ = 0u;
  _clear_bit(10);
}
inline ::google::protobuf::uint32 PBFamilyPropery::warnpc() const {
  return warnpc_;
}
inline void PBFamilyPropery::set_warnpc(::google::protobuf::uint32 value) {
  _set_bit(10);
  warnpc_ = value;
}

// optional uint32 WarNpcStatus = 12;
inline bool PBFamilyPropery::has_warnpcstatus() const {
  return _has_bit(11);
}
inline void PBFamilyPropery::clear_warnpcstatus() {
  warnpcstatus_ = 0u;
  _clear_bit(11);
}
inline ::google::protobuf::uint32 PBFamilyPropery::warnpcstatus() const {
  return warnpcstatus_;
}
inline void PBFamilyPropery::set_warnpcstatus(::google::protobuf::uint32 value) {
  _set_bit(11);
  warnpcstatus_ = value;
}

// optional uint32 WarRank = 13;
inline bool PBFamilyPropery::has_warrank() const {
  return _has_bit(12);
}
inline void PBFamilyPropery::clear_warrank() {
  warrank_ = 0u;
  _clear_bit(12);
}
inline ::google::protobuf::uint32 PBFamilyPropery::warrank() const {
  return warrank_;
}
inline void PBFamilyPropery::set_warrank(::google::protobuf::uint32 value) {
  _set_bit(12);
  warrank_ = value;
}

// optional uint32 WarWinNum = 14;
inline bool PBFamilyPropery::has_warwinnum() const {
  return _has_bit(13);
}
inline void PBFamilyPropery::clear_warwinnum() {
  warwinnum_ = 0u;
  _clear_bit(13);
}
inline ::google::protobuf::uint32 PBFamilyPropery::warwinnum() const {
  return warwinnum_;
}
inline void PBFamilyPropery::set_warwinnum(::google::protobuf::uint32 value) {
  _set_bit(13);
  warwinnum_ = value;
}

// optional uint32 WarLostNum = 15;
inline bool PBFamilyPropery::has_warlostnum() const {
  return _has_bit(14);
}
inline void PBFamilyPropery::clear_warlostnum() {
  warlostnum_ = 0u;
  _clear_bit(14);
}
inline ::google::protobuf::uint32 PBFamilyPropery::warlostnum() const {
  return warlostnum_;
}
inline void PBFamilyPropery::set_warlostnum(::google::protobuf::uint32 value) {
  _set_bit(14);
  warlostnum_ = value;
}

// optional uint32 FamilyStarLevel = 16;
inline bool PBFamilyPropery::has_familystarlevel() const {
  return _has_bit(15);
}
inline void PBFamilyPropery::clear_familystarlevel() {
  familystarlevel_ = 0u;
  _clear_bit(15);
}
inline ::google::protobuf::uint32 PBFamilyPropery::familystarlevel() const {
  return familystarlevel_;
}
inline void PBFamilyPropery::set_familystarlevel(::google::protobuf::uint32 value) {
  _set_bit(15);
  familystarlevel_ = value;
}

// optional uint32 WarExp = 17;
inline bool PBFamilyPropery::has_warexp() const {
  return _has_bit(16);
}
inline void PBFamilyPropery::clear_warexp() {
  warexp_ = 0u;
  _clear_bit(16);
}
inline ::google::protobuf::uint32 PBFamilyPropery::warexp() const {
  return warexp_;
}
inline void PBFamilyPropery::set_warexp(::google::protobuf::uint32 value) {
  _set_bit(16);
  warexp_ = value;
}

// optional uint32 WarMaxExp = 18;
inline bool PBFamilyPropery::has_warmaxexp() const {
  return _has_bit(17);
}
inline void PBFamilyPropery::clear_warmaxexp() {
  warmaxexp_ = 0u;
  _clear_bit(17);
}
inline ::google::protobuf::uint32 PBFamilyPropery::warmaxexp() const {
  return warmaxexp_;
}
inline void PBFamilyPropery::set_warmaxexp(::google::protobuf::uint32 value) {
  _set_bit(17);
  warmaxexp_ = value;
}

// optional string EnemyFamilyName = 19;
inline bool PBFamilyPropery::has_enemyfamilyname() const {
  return _has_bit(18);
}
inline void PBFamilyPropery::clear_enemyfamilyname() {
  if (enemyfamilyname_ != &_default_enemyfamilyname_) {
    enemyfamilyname_->clear();
  }
  _clear_bit(18);
}
inline const ::std::string& PBFamilyPropery::enemyfamilyname() const {
  return *enemyfamilyname_;
}
inline void PBFamilyPropery::set_enemyfamilyname(const ::std::string& value) {
  _set_bit(18);
  if (enemyfamilyname_ == &_default_enemyfamilyname_) {
    enemyfamilyname_ = new ::std::string;
  }
  enemyfamilyname_->assign(value);
}
inline void PBFamilyPropery::set_enemyfamilyname(const char* value) {
  _set_bit(18);
  if (enemyfamilyname_ == &_default_enemyfamilyname_) {
    enemyfamilyname_ = new ::std::string;
  }
  enemyfamilyname_->assign(value);
}
inline void PBFamilyPropery::set_enemyfamilyname(const char* value, size_t size) {
  _set_bit(18);
  if (enemyfamilyname_ == &_default_enemyfamilyname_) {
    enemyfamilyname_ = new ::std::string;
  }
  enemyfamilyname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBFamilyPropery::mutable_enemyfamilyname() {
  _set_bit(18);
  if (enemyfamilyname_ == &_default_enemyfamilyname_) {
    enemyfamilyname_ = new ::std::string;
  }
  return enemyfamilyname_;
}

// repeated uint32 TaskID = 20;
inline int PBFamilyPropery::taskid_size() const {
  return taskid_.size();
}
inline void PBFamilyPropery::clear_taskid() {
  taskid_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PBFamilyPropery::taskid() const {
  return taskid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PBFamilyPropery::mutable_taskid() {
  return &taskid_;
}
inline ::google::protobuf::uint32 PBFamilyPropery::taskid(int index) const {
  return taskid_.Get(index);
}
inline void PBFamilyPropery::set_taskid(int index, ::google::protobuf::uint32 value) {
  taskid_.Set(index, value);
}
inline void PBFamilyPropery::add_taskid(::google::protobuf::uint32 value) {
  taskid_.Add(value);
}

// optional uint32 FamilyGlory = 21;
inline bool PBFamilyPropery::has_familyglory() const {
  return _has_bit(20);
}
inline void PBFamilyPropery::clear_familyglory() {
  familyglory_ = 0u;
  _clear_bit(20);
}
inline ::google::protobuf::uint32 PBFamilyPropery::familyglory() const {
  return familyglory_;
}
inline void PBFamilyPropery::set_familyglory(::google::protobuf::uint32 value) {
  _set_bit(20);
  familyglory_ = value;
}

// optional uint32 FamilyDevelop = 22;
inline bool PBFamilyPropery::has_familydevelop() const {
  return _has_bit(21);
}
inline void PBFamilyPropery::clear_familydevelop() {
  familydevelop_ = 0u;
  _clear_bit(21);
}
inline ::google::protobuf::uint32 PBFamilyPropery::familydevelop() const {
  return familydevelop_;
}
inline void PBFamilyPropery::set_familydevelop(::google::protobuf::uint32 value) {
  _set_bit(21);
  familydevelop_ = value;
}

// optional uint32 WarStatus = 23;
inline bool PBFamilyPropery::has_warstatus() const {
  return _has_bit(22);
}
inline void PBFamilyPropery::clear_warstatus() {
  warstatus_ = 0u;
  _clear_bit(22);
}
inline ::google::protobuf::uint32 PBFamilyPropery::warstatus() const {
  return warstatus_;
}
inline void PBFamilyPropery::set_warstatus(::google::protobuf::uint32 value) {
  _set_bit(22);
  warstatus_ = value;
}

// optional uint32 ChallengeStatus = 24;
inline bool PBFamilyPropery::has_challengestatus() const {
  return _has_bit(23);
}
inline void PBFamilyPropery::clear_challengestatus() {
  challengestatus_ = 0u;
  _clear_bit(23);
}
inline ::google::protobuf::uint32 PBFamilyPropery::challengestatus() const {
  return challengestatus_;
}
inline void PBFamilyPropery::set_challengestatus(::google::protobuf::uint32 value) {
  _set_bit(23);
  challengestatus_ = value;
}

// optional uint32 ChallengeMoney = 25;
inline bool PBFamilyPropery::has_challengemoney() const {
  return _has_bit(24);
}
inline void PBFamilyPropery::clear_challengemoney() {
  challengemoney_ = 0u;
  _clear_bit(24);
}
inline ::google::protobuf::uint32 PBFamilyPropery::challengemoney() const {
  return challengemoney_;
}
inline void PBFamilyPropery::set_challengemoney(::google::protobuf::uint32 value) {
  _set_bit(24);
  challengemoney_ = value;
}

// optional string ChallengeStarted = 26;
inline bool PBFamilyPropery::has_challengestarted() const {
  return _has_bit(25);
}
inline void PBFamilyPropery::clear_challengestarted() {
  if (challengestarted_ != &_default_challengestarted_) {
    challengestarted_->clear();
  }
  _clear_bit(25);
}
inline const ::std::string& PBFamilyPropery::challengestarted() const {
  return *challengestarted_;
}
inline void PBFamilyPropery::set_challengestarted(const ::std::string& value) {
  _set_bit(25);
  if (challengestarted_ == &_default_challengestarted_) {
    challengestarted_ = new ::std::string;
  }
  challengestarted_->assign(value);
}
inline void PBFamilyPropery::set_challengestarted(const char* value) {
  _set_bit(25);
  if (challengestarted_ == &_default_challengestarted_) {
    challengestarted_ = new ::std::string;
  }
  challengestarted_->assign(value);
}
inline void PBFamilyPropery::set_challengestarted(const char* value, size_t size) {
  _set_bit(25);
  if (challengestarted_ == &_default_challengestarted_) {
    challengestarted_ = new ::std::string;
  }
  challengestarted_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBFamilyPropery::mutable_challengestarted() {
  _set_bit(25);
  if (challengestarted_ == &_default_challengestarted_) {
    challengestarted_ = new ::std::string;
  }
  return challengestarted_;
}

// optional string ChallengeReceived = 27;
inline bool PBFamilyPropery::has_challengereceived() const {
  return _has_bit(26);
}
inline void PBFamilyPropery::clear_challengereceived() {
  if (challengereceived_ != &_default_challengereceived_) {
    challengereceived_->clear();
  }
  _clear_bit(26);
}
inline const ::std::string& PBFamilyPropery::challengereceived() const {
  return *challengereceived_;
}
inline void PBFamilyPropery::set_challengereceived(const ::std::string& value) {
  _set_bit(26);
  if (challengereceived_ == &_default_challengereceived_) {
    challengereceived_ = new ::std::string;
  }
  challengereceived_->assign(value);
}
inline void PBFamilyPropery::set_challengereceived(const char* value) {
  _set_bit(26);
  if (challengereceived_ == &_default_challengereceived_) {
    challengereceived_ = new ::std::string;
  }
  challengereceived_->assign(value);
}
inline void PBFamilyPropery::set_challengereceived(const char* value, size_t size) {
  _set_bit(26);
  if (challengereceived_ == &_default_challengereceived_) {
    challengereceived_ = new ::std::string;
  }
  challengereceived_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBFamilyPropery::mutable_challengereceived() {
  _set_bit(26);
  if (challengereceived_ == &_default_challengereceived_) {
    challengereceived_ = new ::std::string;
  }
  return challengereceived_;
}

// optional uint32 MaxMemberNum = 28;
inline bool PBFamilyPropery::has_maxmembernum() const {
  return _has_bit(27);
}
inline void PBFamilyPropery::clear_maxmembernum() {
  maxmembernum_ = 0u;
  _clear_bit(27);
}
inline ::google::protobuf::uint32 PBFamilyPropery::maxmembernum() const {
  return maxmembernum_;
}
inline void PBFamilyPropery::set_maxmembernum(::google::protobuf::uint32 value) {
  _set_bit(27);
  maxmembernum_ = value;
}

// optional uint32 CanLevelUp = 29;
inline bool PBFamilyPropery::has_canlevelup() const {
  return _has_bit(28);
}
inline void PBFamilyPropery::clear_canlevelup() {
  canlevelup_ = 0u;
  _clear_bit(28);
}
inline ::google::protobuf::uint32 PBFamilyPropery::canlevelup() const {
  return canlevelup_;
}
inline void PBFamilyPropery::set_canlevelup(::google::protobuf::uint32 value) {
  _set_bit(28);
  canlevelup_ = value;
}

// optional uint32 MaxPresbyterNum = 30;
inline bool PBFamilyPropery::has_maxpresbyternum() const {
  return _has_bit(29);
}
inline void PBFamilyPropery::clear_maxpresbyternum() {
  maxpresbyternum_ = 0u;
  _clear_bit(29);
}
inline ::google::protobuf::uint32 PBFamilyPropery::maxpresbyternum() const {
  return maxpresbyternum_;
}
inline void PBFamilyPropery::set_maxpresbyternum(::google::protobuf::uint32 value) {
  _set_bit(29);
  maxpresbyternum_ = value;
}

// optional uint32 GloryLimit = 31;
inline bool PBFamilyPropery::has_glorylimit() const {
  return _has_bit(30);
}
inline void PBFamilyPropery::clear_glorylimit() {
  glorylimit_ = 0u;
  _clear_bit(30);
}
inline ::google::protobuf::uint32 PBFamilyPropery::glorylimit() const {
  return glorylimit_;
}
inline void PBFamilyPropery::set_glorylimit(::google::protobuf::uint32 value) {
  _set_bit(30);
  glorylimit_ = value;
}

// optional uint32 LevelMoney = 32;
inline bool PBFamilyPropery::has_levelmoney() const {
  return _has_bit(31);
}
inline void PBFamilyPropery::clear_levelmoney() {
  levelmoney_ = 0u;
  _clear_bit(31);
}
inline ::google::protobuf::uint32 PBFamilyPropery::levelmoney() const {
  return levelmoney_;
}
inline void PBFamilyPropery::set_levelmoney(::google::protobuf::uint32 value) {
  _set_bit(31);
  levelmoney_ = value;
}

// optional uint32 Stability = 33;
inline bool PBFamilyPropery::has_stability() const {
  return _has_bit(32);
}
inline void PBFamilyPropery::clear_stability() {
  stability_ = 0u;
  _clear_bit(32);
}
inline ::google::protobuf::uint32 PBFamilyPropery::stability() const {
  return stability_;
}
inline void PBFamilyPropery::set_stability(::google::protobuf::uint32 value) {
  _set_bit(32);
  stability_ = value;
}

// optional uint32 ReduceStability = 34;
inline bool PBFamilyPropery::has_reducestability() const {
  return _has_bit(33);
}
inline void PBFamilyPropery::clear_reducestability() {
  reducestability_ = 0u;
  _clear_bit(33);
}
inline ::google::protobuf::uint32 PBFamilyPropery::reducestability() const {
  return reducestability_;
}
inline void PBFamilyPropery::set_reducestability(::google::protobuf::uint32 value) {
  _set_bit(33);
  reducestability_ = value;
}

// optional uint32 ExtraRedstonExp = 35;
inline bool PBFamilyPropery::has_extraredstonexp() const {
  return _has_bit(34);
}
inline void PBFamilyPropery::clear_extraredstonexp() {
  extraredstonexp_ = 0u;
  _clear_bit(34);
}
inline ::google::protobuf::uint32 PBFamilyPropery::extraredstonexp() const {
  return extraredstonexp_;
}
inline void PBFamilyPropery::set_extraredstonexp(::google::protobuf::uint32 value) {
  _set_bit(34);
  extraredstonexp_ = value;
}

// -------------------------------------------------------------------

// PBFamilyMemberInfo

// optional uint32 RoleID = 1;
inline bool PBFamilyMemberInfo::has_roleid() const {
  return _has_bit(0);
}
inline void PBFamilyMemberInfo::clear_roleid() {
  roleid_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 PBFamilyMemberInfo::roleid() const {
  return roleid_;
}
inline void PBFamilyMemberInfo::set_roleid(::google::protobuf::uint32 value) {
  _set_bit(0);
  roleid_ = value;
}

// optional uint32 FamilyPost = 2;
inline bool PBFamilyMemberInfo::has_familypost() const {
  return _has_bit(1);
}
inline void PBFamilyMemberInfo::clear_familypost() {
  familypost_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 PBFamilyMemberInfo::familypost() const {
  return familypost_;
}
inline void PBFamilyMemberInfo::set_familypost(::google::protobuf::uint32 value) {
  _set_bit(1);
  familypost_ = value;
}

// optional uint32 FamilyContribute = 3;
inline bool PBFamilyMemberInfo::has_familycontribute() const {
  return _has_bit(2);
}
inline void PBFamilyMemberInfo::clear_familycontribute() {
  familycontribute_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 PBFamilyMemberInfo::familycontribute() const {
  return familycontribute_;
}
inline void PBFamilyMemberInfo::set_familycontribute(::google::protobuf::uint32 value) {
  _set_bit(2);
  familycontribute_ = value;
}

// optional uint32 CorpsContribute = 4;
inline bool PBFamilyMemberInfo::has_corpscontribute() const {
  return _has_bit(3);
}
inline void PBFamilyMemberInfo::clear_corpscontribute() {
  corpscontribute_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 PBFamilyMemberInfo::corpscontribute() const {
  return corpscontribute_;
}
inline void PBFamilyMemberInfo::set_corpscontribute(::google::protobuf::uint32 value) {
  _set_bit(3);
  corpscontribute_ = value;
}

// optional uint32 CorpsPost = 5;
inline bool PBFamilyMemberInfo::has_corpspost() const {
  return _has_bit(4);
}
inline void PBFamilyMemberInfo::clear_corpspost() {
  corpspost_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 PBFamilyMemberInfo::corpspost() const {
  return corpspost_;
}
inline void PBFamilyMemberInfo::set_corpspost(::google::protobuf::uint32 value) {
  _set_bit(4);
  corpspost_ = value;
}

// optional string CorpsTitle = 6;
inline bool PBFamilyMemberInfo::has_corpstitle() const {
  return _has_bit(5);
}
inline void PBFamilyMemberInfo::clear_corpstitle() {
  if (corpstitle_ != &_default_corpstitle_) {
    corpstitle_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& PBFamilyMemberInfo::corpstitle() const {
  return *corpstitle_;
}
inline void PBFamilyMemberInfo::set_corpstitle(const ::std::string& value) {
  _set_bit(5);
  if (corpstitle_ == &_default_corpstitle_) {
    corpstitle_ = new ::std::string;
  }
  corpstitle_->assign(value);
}
inline void PBFamilyMemberInfo::set_corpstitle(const char* value) {
  _set_bit(5);
  if (corpstitle_ == &_default_corpstitle_) {
    corpstitle_ = new ::std::string;
  }
  corpstitle_->assign(value);
}
inline void PBFamilyMemberInfo::set_corpstitle(const char* value, size_t size) {
  _set_bit(5);
  if (corpstitle_ == &_default_corpstitle_) {
    corpstitle_ = new ::std::string;
  }
  corpstitle_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBFamilyMemberInfo::mutable_corpstitle() {
  _set_bit(5);
  if (corpstitle_ == &_default_corpstitle_) {
    corpstitle_ = new ::std::string;
  }
  return corpstitle_;
}

// -------------------------------------------------------------------

// PBFamilyMemberInfoList

// repeated .PBFamilyMemberInfo MemberInfo = 1;
inline int PBFamilyMemberInfoList::memberinfo_size() const {
  return memberinfo_.size();
}
inline void PBFamilyMemberInfoList::clear_memberinfo() {
  memberinfo_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBFamilyMemberInfo >&
PBFamilyMemberInfoList::memberinfo() const {
  return memberinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBFamilyMemberInfo >*
PBFamilyMemberInfoList::mutable_memberinfo() {
  return &memberinfo_;
}
inline const ::PBFamilyMemberInfo& PBFamilyMemberInfoList::memberinfo(int index) const {
  return memberinfo_.Get(index);
}
inline ::PBFamilyMemberInfo* PBFamilyMemberInfoList::mutable_memberinfo(int index) {
  return memberinfo_.Mutable(index);
}
inline ::PBFamilyMemberInfo* PBFamilyMemberInfoList::add_memberinfo() {
  return memberinfo_.Add();
}

// -------------------------------------------------------------------

// PBGoodItemInfo

// optional uint32 ItemID = 1;
inline bool PBGoodItemInfo::has_itemid() const {
  return _has_bit(0);
}
inline void PBGoodItemInfo::clear_itemid() {
  itemid_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 PBGoodItemInfo::itemid() const {
  return itemid_;
}
inline void PBGoodItemInfo::set_itemid(::google::protobuf::uint32 value) {
  _set_bit(0);
  itemid_ = value;
}

// optional uint32 ItemNum = 2;
inline bool PBGoodItemInfo::has_itemnum() const {
  return _has_bit(1);
}
inline void PBGoodItemInfo::clear_itemnum() {
  itemnum_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 PBGoodItemInfo::itemnum() const {
  return itemnum_;
}
inline void PBGoodItemInfo::set_itemnum(::google::protobuf::uint32 value) {
  _set_bit(1);
  itemnum_ = value;
}

// optional uint32 ComposeID = 3;
inline bool PBGoodItemInfo::has_composeid() const {
  return _has_bit(2);
}
inline void PBGoodItemInfo::clear_composeid() {
  composeid_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 PBGoodItemInfo::composeid() const {
  return composeid_;
}
inline void PBGoodItemInfo::set_composeid(::google::protobuf::uint32 value) {
  _set_bit(2);
  composeid_ = value;
}

// optional uint32 PurcharseTime = 4;
inline bool PBGoodItemInfo::has_purcharsetime() const {
  return _has_bit(3);
}
inline void PBGoodItemInfo::clear_purcharsetime() {
  purcharsetime_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 PBGoodItemInfo::purcharsetime() const {
  return purcharsetime_;
}
inline void PBGoodItemInfo::set_purcharsetime(::google::protobuf::uint32 value) {
  _set_bit(3);
  purcharsetime_ = value;
}

// -------------------------------------------------------------------

// PBLeagueShopInfo

// optional uint32 ShopID = 1;
inline bool PBLeagueShopInfo::has_shopid() const {
  return _has_bit(0);
}
inline void PBLeagueShopInfo::clear_shopid() {
  shopid_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 PBLeagueShopInfo::shopid() const {
  return shopid_;
}
inline void PBLeagueShopInfo::set_shopid(::google::protobuf::uint32 value) {
  _set_bit(0);
  shopid_ = value;
}

// optional uint32 ShopType = 2;
inline bool PBLeagueShopInfo::has_shoptype() const {
  return _has_bit(1);
}
inline void PBLeagueShopInfo::clear_shoptype() {
  shoptype_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 PBLeagueShopInfo::shoptype() const {
  return shoptype_;
}
inline void PBLeagueShopInfo::set_shoptype(::google::protobuf::uint32 value) {
  _set_bit(1);
  shoptype_ = value;
}

// repeated .PBGoodItemInfo ItemInfo = 3;
inline int PBLeagueShopInfo::iteminfo_size() const {
  return iteminfo_.size();
}
inline void PBLeagueShopInfo::clear_iteminfo() {
  iteminfo_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBGoodItemInfo >&
PBLeagueShopInfo::iteminfo() const {
  return iteminfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBGoodItemInfo >*
PBLeagueShopInfo::mutable_iteminfo() {
  return &iteminfo_;
}
inline const ::PBGoodItemInfo& PBLeagueShopInfo::iteminfo(int index) const {
  return iteminfo_.Get(index);
}
inline ::PBGoodItemInfo* PBLeagueShopInfo::mutable_iteminfo(int index) {
  return iteminfo_.Mutable(index);
}
inline ::PBGoodItemInfo* PBLeagueShopInfo::add_iteminfo() {
  return iteminfo_.Add();
}

// -------------------------------------------------------------------

// PBLeagueShopsListInfo

// repeated .PBLeagueShopInfo LeagueShopInfo = 1;
inline int PBLeagueShopsListInfo::leagueshopinfo_size() const {
  return leagueshopinfo_.size();
}
inline void PBLeagueShopsListInfo::clear_leagueshopinfo() {
  leagueshopinfo_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBLeagueShopInfo >&
PBLeagueShopsListInfo::leagueshopinfo() const {
  return leagueshopinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBLeagueShopInfo >*
PBLeagueShopsListInfo::mutable_leagueshopinfo() {
  return &leagueshopinfo_;
}
inline const ::PBLeagueShopInfo& PBLeagueShopsListInfo::leagueshopinfo(int index) const {
  return leagueshopinfo_.Get(index);
}
inline ::PBLeagueShopInfo* PBLeagueShopsListInfo::mutable_leagueshopinfo(int index) {
  return leagueshopinfo_.Mutable(index);
}
inline ::PBLeagueShopInfo* PBLeagueShopsListInfo::add_leagueshopinfo() {
  return leagueshopinfo_.Add();
}

#endif  // PROTOBUF_familydbinfo_5fpb_2ehxx__INCLUDED
