// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "taskmessage_pb.hxx.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>
#ifdef LEAK_CHK_DEBUG_NEW
#include "debug_new.h"
#endif

namespace {

const ::google::protobuf::Descriptor* TaskStruct_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskStruct_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageObtainTaskRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageObtainTaskRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTaskEndRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTaskEndRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTaskRefreshRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTaskRefreshRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoopTaskStruct_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoopTaskStruct_reflection_ = NULL;
const ::google::protobuf::Descriptor* StorageTaskStruct_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StorageTaskStruct_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageObtainTaskNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageObtainTaskNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTaskCompleteNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTaskCompleteNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTaskEndNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTaskEndNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUpdateTaskNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUpdateTaskNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageResetTaskNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageResetTaskNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageAbortTaskRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageAbortTaskRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTaskListNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTaskListNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* NpcTaskList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NpcTaskList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageNpcTaskListNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageNpcTaskListNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageNpcTaskTipNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageNpcTaskTipNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePlayerSearchRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePlayerSearchRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePlayerSearchResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePlayerSearchResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePlayerInviteTaskRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePlayerInviteTaskRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePlayerInviteTaskNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePlayerInviteTaskNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePlayerInviteTaskResponseRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePlayerInviteTaskResponseRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePlayerInviteTaskResponseNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePlayerInviteTaskResponseNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageDoPlayerInviteTaskMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageDoPlayerInviteTaskMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePlayerInviteTaskErrorMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePlayerInviteTaskErrorMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageAbortTaskNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageAbortTaskNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTaskFailNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTaskFailNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUnFinishTaskTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUnFinishTaskTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTaskOprFailNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTaskOprFailNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTaskUnRefreshNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTaskUnRefreshNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTaskRefreshResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTaskRefreshResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRmoveTaskColor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRmoveTaskColor_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTaskRefreshFailNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTaskRefreshFailNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUnReaccpetTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUnReaccpetTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageNpcStorageTaskListNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageNpcStorageTaskListNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageObtainScrollTaskRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageObtainScrollTaskRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTragedyTaskUpdateNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTragedyTaskUpdateNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetTipRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetTipRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageEndTalkRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageEndTalkRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageNpcTalkStateChangeNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageNpcTalkStateChangeNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLockBaggageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLockBaggageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLockBaggageResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLockBaggageResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskCondition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskCondition_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUpdateTaskConditions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUpdateTaskConditions_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageClearTaskNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageClearTaskNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTakeOffItemRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTakeOffItemRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetFamilyTaskRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetFamilyTaskRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleFamilyTaskResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleFamilyTaskResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetFamilyTaskResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetFamilyTaskResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetCorpsTaskRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetCorpsTaskRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetCorpsTaskResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetCorpsTaskResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetCountryTaskRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetCountryTaskRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetCountryTaskResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetCountryTaskResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetCampTaskRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetCampTaskRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetCampTaskResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetCampTaskResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetChairManTaskRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetChairManTaskRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetChairManTaskResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetChairManTaskResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetTeamLoopErrNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetTeamLoopErrNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPubslishList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPubslishList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCheckGroupPublishRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCheckGroupPublishRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePublishGroupTaskRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePublishGroupTaskRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCheckGroupPublishResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCheckGroupPublishResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePublishGroupTaskResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePublishGroupTaskResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePlayerCheckSinglePublish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePlayerCheckSinglePublish_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePlayerSinglePublishTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePlayerSinglePublishTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRefreshSingleTaskRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRefreshSingleTaskRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePlayerGetPublishTaskRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePlayerGetPublishTaskRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePlayerGetAwardsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePlayerGetAwardsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSingleColorRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSingleColorRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCheckSinglePublishResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCheckSinglePublishResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePlayerSinglePublishResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePlayerSinglePublishResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRefreshSingleTaskResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRefreshSingleTaskResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TASK_MSG_ID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_taskmessage_5fpb_2ehxx() {
  protobuf_AddDesc_taskmessage_5fpb_2ehxx();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "taskmessage_pb.hxx");
  GOOGLE_CHECK(file != NULL);
  TaskStruct_descriptor_ = file->message_type(0);
  static const int TaskStruct_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStruct, timer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStruct, taskdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStruct, taskprogress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStruct, talkednpcs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStruct, taskid_),
  };
  TaskStruct_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskStruct_descriptor_,
      TaskStruct::default_instance_,
      TaskStruct_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStruct, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStruct, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskStruct));
  CMessageObtainTaskRequest_descriptor_ = file->message_type(1);
  static const int CMessageObtainTaskRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainTaskRequest, npcentityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainTaskRequest, taskid_),
  };
  CMessageObtainTaskRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageObtainTaskRequest_descriptor_,
      CMessageObtainTaskRequest::default_instance_,
      CMessageObtainTaskRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainTaskRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainTaskRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageObtainTaskRequest));
  CMessageTaskEndRequest_descriptor_ = file->message_type(2);
  static const int CMessageTaskEndRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTaskEndRequest, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTaskEndRequest, npcentityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTaskEndRequest, selectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTaskEndRequest, bagindex_),
  };
  CMessageTaskEndRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTaskEndRequest_descriptor_,
      CMessageTaskEndRequest::default_instance_,
      CMessageTaskEndRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTaskEndRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTaskEndRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTaskEndRequest));
  CMessageTaskRefreshRequest_descriptor_ = file->message_type(3);
  static const int CMessageTaskRefreshRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTaskRefreshRequest, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTaskRefreshRequest, npcentityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTaskRefreshRequest, selectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTaskRefreshRequest, refreshitemindex_),
  };
  CMessageTaskRefreshRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTaskRefreshRequest_descriptor_,
      CMessageTaskRefreshRequest::default_instance_,
      CMessageTaskRefreshRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTaskRefreshRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTaskRefreshRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTaskRefreshRequest));
  LoopTaskStruct_descriptor_ = file->message_type(4);
  static const int LoopTaskStruct_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoopTaskStruct, todaymultiloops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoopTaskStruct, weekmultiloops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoopTaskStruct, totalmultiloops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoopTaskStruct, looptaskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoopTaskStruct, completedloops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoopTaskStruct, nextloopid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoopTaskStruct, loopid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoopTaskStruct, weektotalmultiloops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoopTaskStruct, awardmultipletoday_),
  };
  LoopTaskStruct_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoopTaskStruct_descriptor_,
      LoopTaskStruct::default_instance_,
      LoopTaskStruct_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoopTaskStruct, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoopTaskStruct, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoopTaskStruct));
  StorageTaskStruct_descriptor_ = file->message_type(5);
  static const int StorageTaskStruct_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageTaskStruct, todaycompletes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageTaskStruct, totalmultiloops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageTaskStruct, awardmultipletoday_),
  };
  StorageTaskStruct_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StorageTaskStruct_descriptor_,
      StorageTaskStruct::default_instance_,
      StorageTaskStruct_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageTaskStruct, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageTaskStruct, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StorageTaskStruct));
  CMessageObtainTaskNotice_descriptor_ = file->message_type(6);
  static const int CMessageObtainTaskNotice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainTaskNotice, task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainTaskNotice, looptask_),
  };
  CMessageObtainTaskNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageObtainTaskNotice_descriptor_,
      CMessageObtainTaskNotice::default_instance_,
      CMessageObtainTaskNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainTaskNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainTaskNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageObtainTaskNotice));
  CMessageTaskCompleteNotice_descriptor_ = file->message_type(7);
  static const int CMessageTaskCompleteNotice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTaskCompleteNotice, taskid_),
  };
  CMessageTaskCompleteNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTaskCompleteNotice_descriptor_,
      CMessageTaskCompleteNotice::default_instance_,
      CMessageTaskCompleteNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTaskCompleteNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTaskCompleteNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTaskCompleteNotice));
  CMessageTaskEndNotice_descriptor_ = file->message_type(8);
  static const int CMessageTaskEndNotice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTaskEndNotice, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTaskEndNotice, storagetask_),
  };
  CMessageTaskEndNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTaskEndNotice_descriptor_,
      CMessageTaskEndNotice::default_instance_,
      CMessageTaskEndNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTaskEndNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTaskEndNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTaskEndNotice));
  CMessageUpdateTaskNotice_descriptor_ = file->message_type(9);
  static const int CMessageUpdateTaskNotice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateTaskNotice, task_),
  };
  CMessageUpdateTaskNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUpdateTaskNotice_descriptor_,
      CMessageUpdateTaskNotice::default_instance_,
      CMessageUpdateTaskNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateTaskNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateTaskNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUpdateTaskNotice));
  CMessageResetTaskNotice_descriptor_ = file->message_type(10);
  static const int CMessageResetTaskNotice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageResetTaskNotice, taskid_),
  };
  CMessageResetTaskNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageResetTaskNotice_descriptor_,
      CMessageResetTaskNotice::default_instance_,
      CMessageResetTaskNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageResetTaskNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageResetTaskNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageResetTaskNotice));
  CMessageAbortTaskRequest_descriptor_ = file->message_type(11);
  static const int CMessageAbortTaskRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortTaskRequest, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortTaskRequest, npcentityid_),
  };
  CMessageAbortTaskRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageAbortTaskRequest_descriptor_,
      CMessageAbortTaskRequest::default_instance_,
      CMessageAbortTaskRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortTaskRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortTaskRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageAbortTaskRequest));
  CMessageTaskListNotice_descriptor_ = file->message_type(12);
  static const int CMessageTaskListNotice_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTaskListNotice, completedbuf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTaskListNotice, tasknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTaskListNotice, looptask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTaskListNotice, tasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTaskListNotice, completedtasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTaskListNotice, storagetask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTaskListNotice, chairmansectionids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTaskListNotice, repeatetasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTaskListNotice, endtime_),
  };
  CMessageTaskListNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTaskListNotice_descriptor_,
      CMessageTaskListNotice::default_instance_,
      CMessageTaskListNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTaskListNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTaskListNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTaskListNotice));
  NpcTaskList_descriptor_ = file->message_type(13);
  static const int NpcTaskList_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcTaskList, extendtaskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcTaskList, callbacknumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcTaskList, extendnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcTaskList, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcTaskList, callbacktaskid_),
  };
  NpcTaskList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NpcTaskList_descriptor_,
      NpcTaskList::default_instance_,
      NpcTaskList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcTaskList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcTaskList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NpcTaskList));
  CMessageNpcTaskListNotice_descriptor_ = file->message_type(14);
  static const int CMessageNpcTaskListNotice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNpcTaskListNotice, list_),
  };
  CMessageNpcTaskListNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageNpcTaskListNotice_descriptor_,
      CMessageNpcTaskListNotice::default_instance_,
      CMessageNpcTaskListNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNpcTaskListNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNpcTaskListNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageNpcTaskListNotice));
  CMessageNpcTaskTipNotice_descriptor_ = file->message_type(15);
  static const int CMessageNpcTaskTipNotice_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNpcTaskTipNotice, npcentityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNpcTaskTipNotice, tip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNpcTaskTipNotice, idtype_),
  };
  CMessageNpcTaskTipNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageNpcTaskTipNotice_descriptor_,
      CMessageNpcTaskTipNotice::default_instance_,
      CMessageNpcTaskTipNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNpcTaskTipNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNpcTaskTipNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageNpcTaskTipNotice));
  CMessagePlayerSearchRequest_descriptor_ = file->message_type(16);
  static const int CMessagePlayerSearchRequest_offsets_[1] = {
  };
  CMessagePlayerSearchRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePlayerSearchRequest_descriptor_,
      CMessagePlayerSearchRequest::default_instance_,
      CMessagePlayerSearchRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerSearchRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerSearchRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePlayerSearchRequest));
  CMessagePlayerSearchResponse_descriptor_ = file->message_type(17);
  static const int CMessagePlayerSearchResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerSearchResponse, taskids_),
  };
  CMessagePlayerSearchResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePlayerSearchResponse_descriptor_,
      CMessagePlayerSearchResponse::default_instance_,
      CMessagePlayerSearchResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerSearchResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerSearchResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePlayerSearchResponse));
  CMessagePlayerInviteTaskRequest_descriptor_ = file->message_type(18);
  static const int CMessagePlayerInviteTaskRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInviteTaskRequest, playernames_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInviteTaskRequest, taskid_),
  };
  CMessagePlayerInviteTaskRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePlayerInviteTaskRequest_descriptor_,
      CMessagePlayerInviteTaskRequest::default_instance_,
      CMessagePlayerInviteTaskRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInviteTaskRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInviteTaskRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePlayerInviteTaskRequest));
  CMessagePlayerInviteTaskNotice_descriptor_ = file->message_type(19);
  static const int CMessagePlayerInviteTaskNotice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInviteTaskNotice, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInviteTaskNotice, srcplayername_),
  };
  CMessagePlayerInviteTaskNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePlayerInviteTaskNotice_descriptor_,
      CMessagePlayerInviteTaskNotice::default_instance_,
      CMessagePlayerInviteTaskNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInviteTaskNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInviteTaskNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePlayerInviteTaskNotice));
  CMessagePlayerInviteTaskResponseRequest_descriptor_ = file->message_type(20);
  static const int CMessagePlayerInviteTaskResponseRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInviteTaskResponseRequest, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInviteTaskResponseRequest, agreeflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInviteTaskResponseRequest, srcplayername_),
  };
  CMessagePlayerInviteTaskResponseRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePlayerInviteTaskResponseRequest_descriptor_,
      CMessagePlayerInviteTaskResponseRequest::default_instance_,
      CMessagePlayerInviteTaskResponseRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInviteTaskResponseRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInviteTaskResponseRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePlayerInviteTaskResponseRequest));
  CMessagePlayerInviteTaskResponseNotice_descriptor_ = file->message_type(21);
  static const int CMessagePlayerInviteTaskResponseNotice_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInviteTaskResponseNotice, router_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInviteTaskResponseNotice, srcplayername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInviteTaskResponseNotice, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInviteTaskResponseNotice, agreeflag_),
  };
  CMessagePlayerInviteTaskResponseNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePlayerInviteTaskResponseNotice_descriptor_,
      CMessagePlayerInviteTaskResponseNotice::default_instance_,
      CMessagePlayerInviteTaskResponseNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInviteTaskResponseNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInviteTaskResponseNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePlayerInviteTaskResponseNotice));
  CMessageDoPlayerInviteTaskMsg_descriptor_ = file->message_type(22);
  static const int CMessageDoPlayerInviteTaskMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDoPlayerInviteTaskMsg, router_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDoPlayerInviteTaskMsg, taskid_),
  };
  CMessageDoPlayerInviteTaskMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageDoPlayerInviteTaskMsg_descriptor_,
      CMessageDoPlayerInviteTaskMsg::default_instance_,
      CMessageDoPlayerInviteTaskMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDoPlayerInviteTaskMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDoPlayerInviteTaskMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageDoPlayerInviteTaskMsg));
  CMessagePlayerInviteTaskErrorMsg_descriptor_ = file->message_type(23);
  static const int CMessagePlayerInviteTaskErrorMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInviteTaskErrorMsg, router_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInviteTaskErrorMsg, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInviteTaskErrorMsg, typeid__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInviteTaskErrorMsg, myname_),
  };
  CMessagePlayerInviteTaskErrorMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePlayerInviteTaskErrorMsg_descriptor_,
      CMessagePlayerInviteTaskErrorMsg::default_instance_,
      CMessagePlayerInviteTaskErrorMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInviteTaskErrorMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInviteTaskErrorMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePlayerInviteTaskErrorMsg));
  CMessageAbortTaskNotice_descriptor_ = file->message_type(24);
  static const int CMessageAbortTaskNotice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortTaskNotice, taskid_),
  };
  CMessageAbortTaskNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageAbortTaskNotice_descriptor_,
      CMessageAbortTaskNotice::default_instance_,
      CMessageAbortTaskNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortTaskNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAbortTaskNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageAbortTaskNotice));
  CMessageTaskFailNotice_descriptor_ = file->message_type(25);
  static const int CMessageTaskFailNotice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTaskFailNotice, taskid_),
  };
  CMessageTaskFailNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTaskFailNotice_descriptor_,
      CMessageTaskFailNotice::default_instance_,
      CMessageTaskFailNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTaskFailNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTaskFailNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTaskFailNotice));
  CMessageUnFinishTaskTime_descriptor_ = file->message_type(26);
  static const int CMessageUnFinishTaskTime_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnFinishTaskTime, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnFinishTaskTime, needtime_),
  };
  CMessageUnFinishTaskTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUnFinishTaskTime_descriptor_,
      CMessageUnFinishTaskTime::default_instance_,
      CMessageUnFinishTaskTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnFinishTaskTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnFinishTaskTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUnFinishTaskTime));
  CMessageTaskOprFailNotice_descriptor_ = file->message_type(27);
  static const int CMessageTaskOprFailNotice_offsets_[1] = {
  };
  CMessageTaskOprFailNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTaskOprFailNotice_descriptor_,
      CMessageTaskOprFailNotice::default_instance_,
      CMessageTaskOprFailNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTaskOprFailNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTaskOprFailNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTaskOprFailNotice));
  CMessageTaskUnRefreshNotice_descriptor_ = file->message_type(28);
  static const int CMessageTaskUnRefreshNotice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTaskUnRefreshNotice, taskid_),
  };
  CMessageTaskUnRefreshNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTaskUnRefreshNotice_descriptor_,
      CMessageTaskUnRefreshNotice::default_instance_,
      CMessageTaskUnRefreshNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTaskUnRefreshNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTaskUnRefreshNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTaskUnRefreshNotice));
  CMessageTaskRefreshResult_descriptor_ = file->message_type(29);
  static const int CMessageTaskRefreshResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTaskRefreshResult, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTaskRefreshResult, taskcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTaskRefreshResult, tasknumber_),
  };
  CMessageTaskRefreshResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTaskRefreshResult_descriptor_,
      CMessageTaskRefreshResult::default_instance_,
      CMessageTaskRefreshResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTaskRefreshResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTaskRefreshResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTaskRefreshResult));
  CMessageRmoveTaskColor_descriptor_ = file->message_type(30);
  static const int CMessageRmoveTaskColor_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRmoveTaskColor, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRmoveTaskColor, taskcolor_),
  };
  CMessageRmoveTaskColor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRmoveTaskColor_descriptor_,
      CMessageRmoveTaskColor::default_instance_,
      CMessageRmoveTaskColor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRmoveTaskColor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRmoveTaskColor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRmoveTaskColor));
  CMessageTaskRefreshFailNotice_descriptor_ = file->message_type(31);
  static const int CMessageTaskRefreshFailNotice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTaskRefreshFailNotice, taskid_),
  };
  CMessageTaskRefreshFailNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTaskRefreshFailNotice_descriptor_,
      CMessageTaskRefreshFailNotice::default_instance_,
      CMessageTaskRefreshFailNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTaskRefreshFailNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTaskRefreshFailNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTaskRefreshFailNotice));
  CMessageUnReaccpetTask_descriptor_ = file->message_type(32);
  static const int CMessageUnReaccpetTask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnReaccpetTask, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnReaccpetTask, needtime_),
  };
  CMessageUnReaccpetTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUnReaccpetTask_descriptor_,
      CMessageUnReaccpetTask::default_instance_,
      CMessageUnReaccpetTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnReaccpetTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUnReaccpetTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUnReaccpetTask));
  CMessageNpcStorageTaskListNotice_descriptor_ = file->message_type(33);
  static const int CMessageNpcStorageTaskListNotice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNpcStorageTaskListNotice, list_),
  };
  CMessageNpcStorageTaskListNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageNpcStorageTaskListNotice_descriptor_,
      CMessageNpcStorageTaskListNotice::default_instance_,
      CMessageNpcStorageTaskListNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNpcStorageTaskListNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNpcStorageTaskListNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageNpcStorageTaskListNotice));
  CMessageObtainScrollTaskRequest_descriptor_ = file->message_type(34);
  static const int CMessageObtainScrollTaskRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainScrollTaskRequest, scrollid_),
  };
  CMessageObtainScrollTaskRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageObtainScrollTaskRequest_descriptor_,
      CMessageObtainScrollTaskRequest::default_instance_,
      CMessageObtainScrollTaskRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainScrollTaskRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainScrollTaskRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageObtainScrollTaskRequest));
  CMessageTragedyTaskUpdateNotice_descriptor_ = file->message_type(35);
  static const int CMessageTragedyTaskUpdateNotice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTragedyTaskUpdateNotice, tragedyinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTragedyTaskUpdateNotice, islogin_),
  };
  CMessageTragedyTaskUpdateNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTragedyTaskUpdateNotice_descriptor_,
      CMessageTragedyTaskUpdateNotice::default_instance_,
      CMessageTragedyTaskUpdateNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTragedyTaskUpdateNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTragedyTaskUpdateNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTragedyTaskUpdateNotice));
  CMessageGetTipRequest_descriptor_ = file->message_type(36);
  static const int CMessageGetTipRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetTipRequest, npcentityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetTipRequest, idtype_),
  };
  CMessageGetTipRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetTipRequest_descriptor_,
      CMessageGetTipRequest::default_instance_,
      CMessageGetTipRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetTipRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetTipRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetTipRequest));
  CMessageEndTalkRequest_descriptor_ = file->message_type(37);
  static const int CMessageEndTalkRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEndTalkRequest, npcentityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEndTalkRequest, taskid_),
  };
  CMessageEndTalkRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageEndTalkRequest_descriptor_,
      CMessageEndTalkRequest::default_instance_,
      CMessageEndTalkRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEndTalkRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEndTalkRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageEndTalkRequest));
  CMessageNpcTalkStateChangeNotice_descriptor_ = file->message_type(38);
  static const int CMessageNpcTalkStateChangeNotice_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNpcTalkStateChangeNotice, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNpcTalkStateChangeNotice, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNpcTalkStateChangeNotice, npctempid_),
  };
  CMessageNpcTalkStateChangeNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageNpcTalkStateChangeNotice_descriptor_,
      CMessageNpcTalkStateChangeNotice::default_instance_,
      CMessageNpcTalkStateChangeNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNpcTalkStateChangeNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNpcTalkStateChangeNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageNpcTalkStateChangeNotice));
  CMessageLockBaggageRequest_descriptor_ = file->message_type(39);
  static const int CMessageLockBaggageRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLockBaggageRequest, itemindex_),
  };
  CMessageLockBaggageRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLockBaggageRequest_descriptor_,
      CMessageLockBaggageRequest::default_instance_,
      CMessageLockBaggageRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLockBaggageRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLockBaggageRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLockBaggageRequest));
  CMessageLockBaggageResponse_descriptor_ = file->message_type(40);
  static const int CMessageLockBaggageResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLockBaggageResponse, itemindex_),
  };
  CMessageLockBaggageResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLockBaggageResponse_descriptor_,
      CMessageLockBaggageResponse::default_instance_,
      CMessageLockBaggageResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLockBaggageResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLockBaggageResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLockBaggageResponse));
  TaskCondition_descriptor_ = file->message_type(41);
  static const int TaskCondition_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskCondition, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskCondition, condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskCondition, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskCondition, num_),
  };
  TaskCondition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskCondition_descriptor_,
      TaskCondition::default_instance_,
      TaskCondition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskCondition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskCondition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskCondition));
  CMessageUpdateTaskConditions_descriptor_ = file->message_type(42);
  static const int CMessageUpdateTaskConditions_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateTaskConditions, contions_),
  };
  CMessageUpdateTaskConditions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUpdateTaskConditions_descriptor_,
      CMessageUpdateTaskConditions::default_instance_,
      CMessageUpdateTaskConditions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateTaskConditions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateTaskConditions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUpdateTaskConditions));
  CMessageClearTaskNotify_descriptor_ = file->message_type(43);
  static const int CMessageClearTaskNotify_offsets_[1] = {
  };
  CMessageClearTaskNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageClearTaskNotify_descriptor_,
      CMessageClearTaskNotify::default_instance_,
      CMessageClearTaskNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageClearTaskNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageClearTaskNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageClearTaskNotify));
  CMessageTakeOffItemRequest_descriptor_ = file->message_type(44);
  static const int CMessageTakeOffItemRequest_offsets_[1] = {
  };
  CMessageTakeOffItemRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTakeOffItemRequest_descriptor_,
      CMessageTakeOffItemRequest::default_instance_,
      CMessageTakeOffItemRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTakeOffItemRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTakeOffItemRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTakeOffItemRequest));
  CMessageGetFamilyTaskRequest_descriptor_ = file->message_type(45);
  static const int CMessageGetFamilyTaskRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyTaskRequest, tasktypes_),
  };
  CMessageGetFamilyTaskRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetFamilyTaskRequest_descriptor_,
      CMessageGetFamilyTaskRequest::default_instance_,
      CMessageGetFamilyTaskRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyTaskRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyTaskRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetFamilyTaskRequest));
  SingleFamilyTaskResponse_descriptor_ = file->message_type(46);
  static const int SingleFamilyTaskResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFamilyTaskResponse, taskids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFamilyTaskResponse, todaytimes_),
  };
  SingleFamilyTaskResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleFamilyTaskResponse_descriptor_,
      SingleFamilyTaskResponse::default_instance_,
      SingleFamilyTaskResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFamilyTaskResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFamilyTaskResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleFamilyTaskResponse));
  CMessageGetFamilyTaskResponse_descriptor_ = file->message_type(47);
  static const int CMessageGetFamilyTaskResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyTaskResponse, tasks_),
  };
  CMessageGetFamilyTaskResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetFamilyTaskResponse_descriptor_,
      CMessageGetFamilyTaskResponse::default_instance_,
      CMessageGetFamilyTaskResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyTaskResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetFamilyTaskResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetFamilyTaskResponse));
  CMessageGetCorpsTaskRequest_descriptor_ = file->message_type(48);
  static const int CMessageGetCorpsTaskRequest_offsets_[1] = {
  };
  CMessageGetCorpsTaskRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetCorpsTaskRequest_descriptor_,
      CMessageGetCorpsTaskRequest::default_instance_,
      CMessageGetCorpsTaskRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsTaskRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsTaskRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetCorpsTaskRequest));
  CMessageGetCorpsTaskResponse_descriptor_ = file->message_type(49);
  static const int CMessageGetCorpsTaskResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsTaskResponse, tasks_),
  };
  CMessageGetCorpsTaskResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetCorpsTaskResponse_descriptor_,
      CMessageGetCorpsTaskResponse::default_instance_,
      CMessageGetCorpsTaskResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsTaskResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCorpsTaskResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetCorpsTaskResponse));
  CMessageGetCountryTaskRequest_descriptor_ = file->message_type(50);
  static const int CMessageGetCountryTaskRequest_offsets_[1] = {
  };
  CMessageGetCountryTaskRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetCountryTaskRequest_descriptor_,
      CMessageGetCountryTaskRequest::default_instance_,
      CMessageGetCountryTaskRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCountryTaskRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCountryTaskRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetCountryTaskRequest));
  CMessageGetCountryTaskResponse_descriptor_ = file->message_type(51);
  static const int CMessageGetCountryTaskResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCountryTaskResponse, tasks_),
  };
  CMessageGetCountryTaskResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetCountryTaskResponse_descriptor_,
      CMessageGetCountryTaskResponse::default_instance_,
      CMessageGetCountryTaskResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCountryTaskResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCountryTaskResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetCountryTaskResponse));
  CMessageGetCampTaskRequest_descriptor_ = file->message_type(52);
  static const int CMessageGetCampTaskRequest_offsets_[1] = {
  };
  CMessageGetCampTaskRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetCampTaskRequest_descriptor_,
      CMessageGetCampTaskRequest::default_instance_,
      CMessageGetCampTaskRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCampTaskRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCampTaskRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetCampTaskRequest));
  CMessageGetCampTaskResponse_descriptor_ = file->message_type(53);
  static const int CMessageGetCampTaskResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCampTaskResponse, tasks_),
  };
  CMessageGetCampTaskResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetCampTaskResponse_descriptor_,
      CMessageGetCampTaskResponse::default_instance_,
      CMessageGetCampTaskResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCampTaskResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCampTaskResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetCampTaskResponse));
  CMessageGetChairManTaskRequest_descriptor_ = file->message_type(54);
  static const int CMessageGetChairManTaskRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetChairManTaskRequest, npcentityid_),
  };
  CMessageGetChairManTaskRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetChairManTaskRequest_descriptor_,
      CMessageGetChairManTaskRequest::default_instance_,
      CMessageGetChairManTaskRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetChairManTaskRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetChairManTaskRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetChairManTaskRequest));
  CMessageGetChairManTaskResponse_descriptor_ = file->message_type(55);
  static const int CMessageGetChairManTaskResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetChairManTaskResponse, taskids_),
  };
  CMessageGetChairManTaskResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetChairManTaskResponse_descriptor_,
      CMessageGetChairManTaskResponse::default_instance_,
      CMessageGetChairManTaskResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetChairManTaskResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetChairManTaskResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetChairManTaskResponse));
  CMessageGetTeamLoopErrNotify_descriptor_ = file->message_type(56);
  static const int CMessageGetTeamLoopErrNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetTeamLoopErrNotify, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetTeamLoopErrNotify, errcode_),
  };
  CMessageGetTeamLoopErrNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetTeamLoopErrNotify_descriptor_,
      CMessageGetTeamLoopErrNotify::default_instance_,
      CMessageGetTeamLoopErrNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetTeamLoopErrNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetTeamLoopErrNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetTeamLoopErrNotify));
  PBPubslishList_descriptor_ = file->message_type(57);
  static const int PBPubslishList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPubslishList, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPubslishList, taskstate_),
  };
  PBPubslishList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPubslishList_descriptor_,
      PBPubslishList::default_instance_,
      PBPubslishList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPubslishList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPubslishList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPubslishList));
  CMessageCheckGroupPublishRequest_descriptor_ = file->message_type(58);
  static const int CMessageCheckGroupPublishRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCheckGroupPublishRequest, publishtype_),
  };
  CMessageCheckGroupPublishRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCheckGroupPublishRequest_descriptor_,
      CMessageCheckGroupPublishRequest::default_instance_,
      CMessageCheckGroupPublishRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCheckGroupPublishRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCheckGroupPublishRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCheckGroupPublishRequest));
  CMessagePublishGroupTaskRequest_descriptor_ = file->message_type(59);
  static const int CMessagePublishGroupTaskRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePublishGroupTaskRequest, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePublishGroupTaskRequest, publishtype_),
  };
  CMessagePublishGroupTaskRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePublishGroupTaskRequest_descriptor_,
      CMessagePublishGroupTaskRequest::default_instance_,
      CMessagePublishGroupTaskRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePublishGroupTaskRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePublishGroupTaskRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePublishGroupTaskRequest));
  CMessageCheckGroupPublishResponse_descriptor_ = file->message_type(60);
  static const int CMessageCheckGroupPublishResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCheckGroupPublishResponse, publishtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCheckGroupPublishResponse, tasks_),
  };
  CMessageCheckGroupPublishResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCheckGroupPublishResponse_descriptor_,
      CMessageCheckGroupPublishResponse::default_instance_,
      CMessageCheckGroupPublishResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCheckGroupPublishResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCheckGroupPublishResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCheckGroupPublishResponse));
  CMessagePublishGroupTaskResponse_descriptor_ = file->message_type(61);
  static const int CMessagePublishGroupTaskResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePublishGroupTaskResponse, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePublishGroupTaskResponse, publishtype_),
  };
  CMessagePublishGroupTaskResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePublishGroupTaskResponse_descriptor_,
      CMessagePublishGroupTaskResponse::default_instance_,
      CMessagePublishGroupTaskResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePublishGroupTaskResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePublishGroupTaskResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePublishGroupTaskResponse));
  CMessagePlayerCheckSinglePublish_descriptor_ = file->message_type(62);
  static const int CMessagePlayerCheckSinglePublish_offsets_[1] = {
  };
  CMessagePlayerCheckSinglePublish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePlayerCheckSinglePublish_descriptor_,
      CMessagePlayerCheckSinglePublish::default_instance_,
      CMessagePlayerCheckSinglePublish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerCheckSinglePublish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerCheckSinglePublish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePlayerCheckSinglePublish));
  CMessagePlayerSinglePublishTask_descriptor_ = file->message_type(63);
  static const int CMessagePlayerSinglePublishTask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerSinglePublishTask, taskcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerSinglePublishTask, itemindex_),
  };
  CMessagePlayerSinglePublishTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePlayerSinglePublishTask_descriptor_,
      CMessagePlayerSinglePublishTask::default_instance_,
      CMessagePlayerSinglePublishTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerSinglePublishTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerSinglePublishTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePlayerSinglePublishTask));
  CMessageRefreshSingleTaskRequest_descriptor_ = file->message_type(64);
  static const int CMessageRefreshSingleTaskRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRefreshSingleTaskRequest, taskcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRefreshSingleTaskRequest, itemindex_),
  };
  CMessageRefreshSingleTaskRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRefreshSingleTaskRequest_descriptor_,
      CMessageRefreshSingleTaskRequest::default_instance_,
      CMessageRefreshSingleTaskRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRefreshSingleTaskRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRefreshSingleTaskRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRefreshSingleTaskRequest));
  CMessagePlayerGetPublishTaskRequest_descriptor_ = file->message_type(65);
  static const int CMessagePlayerGetPublishTaskRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerGetPublishTaskRequest, taskcolor_),
  };
  CMessagePlayerGetPublishTaskRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePlayerGetPublishTaskRequest_descriptor_,
      CMessagePlayerGetPublishTaskRequest::default_instance_,
      CMessagePlayerGetPublishTaskRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerGetPublishTaskRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerGetPublishTaskRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePlayerGetPublishTaskRequest));
  CMessagePlayerGetAwardsRequest_descriptor_ = file->message_type(66);
  static const int CMessagePlayerGetAwardsRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerGetAwardsRequest, taskcolor_),
  };
  CMessagePlayerGetAwardsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePlayerGetAwardsRequest_descriptor_,
      CMessagePlayerGetAwardsRequest::default_instance_,
      CMessagePlayerGetAwardsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerGetAwardsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerGetAwardsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePlayerGetAwardsRequest));
  PBSingleColorRank_descriptor_ = file->message_type(67);
  static const int PBSingleColorRank_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSingleColorRank, pubnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSingleColorRank, recvtasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSingleColorRank, recvawards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSingleColorRank, currenttask_),
  };
  PBSingleColorRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSingleColorRank_descriptor_,
      PBSingleColorRank::default_instance_,
      PBSingleColorRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSingleColorRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSingleColorRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSingleColorRank));
  CMessageCheckSinglePublishResponse_descriptor_ = file->message_type(68);
  static const int CMessageCheckSinglePublishResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCheckSinglePublishResponse, todaypublish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCheckSinglePublishResponse, oncepublish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCheckSinglePublishResponse, totalfinish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCheckSinglePublishResponse, singlerank_),
  };
  CMessageCheckSinglePublishResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCheckSinglePublishResponse_descriptor_,
      CMessageCheckSinglePublishResponse::default_instance_,
      CMessageCheckSinglePublishResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCheckSinglePublishResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCheckSinglePublishResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCheckSinglePublishResponse));
  CMessagePlayerSinglePublishResponse_descriptor_ = file->message_type(69);
  static const int CMessagePlayerSinglePublishResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerSinglePublishResponse, taskcolor_),
  };
  CMessagePlayerSinglePublishResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePlayerSinglePublishResponse_descriptor_,
      CMessagePlayerSinglePublishResponse::default_instance_,
      CMessagePlayerSinglePublishResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerSinglePublishResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerSinglePublishResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePlayerSinglePublishResponse));
  CMessageRefreshSingleTaskResponse_descriptor_ = file->message_type(70);
  static const int CMessageRefreshSingleTaskResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRefreshSingleTaskResponse, taskcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRefreshSingleTaskResponse, taskid_),
  };
  CMessageRefreshSingleTaskResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRefreshSingleTaskResponse_descriptor_,
      CMessageRefreshSingleTaskResponse::default_instance_,
      CMessageRefreshSingleTaskResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRefreshSingleTaskResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRefreshSingleTaskResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRefreshSingleTaskResponse));
  TASK_MSG_ID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_taskmessage_5fpb_2ehxx);
}

void protobuf_RegisterTypes() {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskStruct_descriptor_, &TaskStruct::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageObtainTaskRequest_descriptor_, &CMessageObtainTaskRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTaskEndRequest_descriptor_, &CMessageTaskEndRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTaskRefreshRequest_descriptor_, &CMessageTaskRefreshRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoopTaskStruct_descriptor_, &LoopTaskStruct::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StorageTaskStruct_descriptor_, &StorageTaskStruct::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageObtainTaskNotice_descriptor_, &CMessageObtainTaskNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTaskCompleteNotice_descriptor_, &CMessageTaskCompleteNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTaskEndNotice_descriptor_, &CMessageTaskEndNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUpdateTaskNotice_descriptor_, &CMessageUpdateTaskNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageResetTaskNotice_descriptor_, &CMessageResetTaskNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageAbortTaskRequest_descriptor_, &CMessageAbortTaskRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTaskListNotice_descriptor_, &CMessageTaskListNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NpcTaskList_descriptor_, &NpcTaskList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageNpcTaskListNotice_descriptor_, &CMessageNpcTaskListNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageNpcTaskTipNotice_descriptor_, &CMessageNpcTaskTipNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePlayerSearchRequest_descriptor_, &CMessagePlayerSearchRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePlayerSearchResponse_descriptor_, &CMessagePlayerSearchResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePlayerInviteTaskRequest_descriptor_, &CMessagePlayerInviteTaskRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePlayerInviteTaskNotice_descriptor_, &CMessagePlayerInviteTaskNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePlayerInviteTaskResponseRequest_descriptor_, &CMessagePlayerInviteTaskResponseRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePlayerInviteTaskResponseNotice_descriptor_, &CMessagePlayerInviteTaskResponseNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageDoPlayerInviteTaskMsg_descriptor_, &CMessageDoPlayerInviteTaskMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePlayerInviteTaskErrorMsg_descriptor_, &CMessagePlayerInviteTaskErrorMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageAbortTaskNotice_descriptor_, &CMessageAbortTaskNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTaskFailNotice_descriptor_, &CMessageTaskFailNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUnFinishTaskTime_descriptor_, &CMessageUnFinishTaskTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTaskOprFailNotice_descriptor_, &CMessageTaskOprFailNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTaskUnRefreshNotice_descriptor_, &CMessageTaskUnRefreshNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTaskRefreshResult_descriptor_, &CMessageTaskRefreshResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRmoveTaskColor_descriptor_, &CMessageRmoveTaskColor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTaskRefreshFailNotice_descriptor_, &CMessageTaskRefreshFailNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUnReaccpetTask_descriptor_, &CMessageUnReaccpetTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageNpcStorageTaskListNotice_descriptor_, &CMessageNpcStorageTaskListNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageObtainScrollTaskRequest_descriptor_, &CMessageObtainScrollTaskRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTragedyTaskUpdateNotice_descriptor_, &CMessageTragedyTaskUpdateNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetTipRequest_descriptor_, &CMessageGetTipRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageEndTalkRequest_descriptor_, &CMessageEndTalkRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageNpcTalkStateChangeNotice_descriptor_, &CMessageNpcTalkStateChangeNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLockBaggageRequest_descriptor_, &CMessageLockBaggageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLockBaggageResponse_descriptor_, &CMessageLockBaggageResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskCondition_descriptor_, &TaskCondition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUpdateTaskConditions_descriptor_, &CMessageUpdateTaskConditions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageClearTaskNotify_descriptor_, &CMessageClearTaskNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTakeOffItemRequest_descriptor_, &CMessageTakeOffItemRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetFamilyTaskRequest_descriptor_, &CMessageGetFamilyTaskRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleFamilyTaskResponse_descriptor_, &SingleFamilyTaskResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetFamilyTaskResponse_descriptor_, &CMessageGetFamilyTaskResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetCorpsTaskRequest_descriptor_, &CMessageGetCorpsTaskRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetCorpsTaskResponse_descriptor_, &CMessageGetCorpsTaskResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetCountryTaskRequest_descriptor_, &CMessageGetCountryTaskRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetCountryTaskResponse_descriptor_, &CMessageGetCountryTaskResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetCampTaskRequest_descriptor_, &CMessageGetCampTaskRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetCampTaskResponse_descriptor_, &CMessageGetCampTaskResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetChairManTaskRequest_descriptor_, &CMessageGetChairManTaskRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetChairManTaskResponse_descriptor_, &CMessageGetChairManTaskResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetTeamLoopErrNotify_descriptor_, &CMessageGetTeamLoopErrNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPubslishList_descriptor_, &PBPubslishList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCheckGroupPublishRequest_descriptor_, &CMessageCheckGroupPublishRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePublishGroupTaskRequest_descriptor_, &CMessagePublishGroupTaskRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCheckGroupPublishResponse_descriptor_, &CMessageCheckGroupPublishResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePublishGroupTaskResponse_descriptor_, &CMessagePublishGroupTaskResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePlayerCheckSinglePublish_descriptor_, &CMessagePlayerCheckSinglePublish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePlayerSinglePublishTask_descriptor_, &CMessagePlayerSinglePublishTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRefreshSingleTaskRequest_descriptor_, &CMessageRefreshSingleTaskRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePlayerGetPublishTaskRequest_descriptor_, &CMessagePlayerGetPublishTaskRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePlayerGetAwardsRequest_descriptor_, &CMessagePlayerGetAwardsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSingleColorRank_descriptor_, &PBSingleColorRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCheckSinglePublishResponse_descriptor_, &CMessageCheckSinglePublishResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePlayerSinglePublishResponse_descriptor_, &CMessagePlayerSinglePublishResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRefreshSingleTaskResponse_descriptor_, &CMessageRefreshSingleTaskResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_taskmessage_5fpb_2ehxx() {
  delete TaskStruct::default_instance_;
  delete TaskStruct_reflection_;
  delete CMessageObtainTaskRequest::default_instance_;
  delete CMessageObtainTaskRequest_reflection_;
  delete CMessageTaskEndRequest::default_instance_;
  delete CMessageTaskEndRequest_reflection_;
  delete CMessageTaskRefreshRequest::default_instance_;
  delete CMessageTaskRefreshRequest_reflection_;
  delete LoopTaskStruct::default_instance_;
  delete LoopTaskStruct_reflection_;
  delete StorageTaskStruct::default_instance_;
  delete StorageTaskStruct_reflection_;
  delete CMessageObtainTaskNotice::default_instance_;
  delete CMessageObtainTaskNotice_reflection_;
  delete CMessageTaskCompleteNotice::default_instance_;
  delete CMessageTaskCompleteNotice_reflection_;
  delete CMessageTaskEndNotice::default_instance_;
  delete CMessageTaskEndNotice_reflection_;
  delete CMessageUpdateTaskNotice::default_instance_;
  delete CMessageUpdateTaskNotice_reflection_;
  delete CMessageResetTaskNotice::default_instance_;
  delete CMessageResetTaskNotice_reflection_;
  delete CMessageAbortTaskRequest::default_instance_;
  delete CMessageAbortTaskRequest_reflection_;
  delete CMessageTaskListNotice::default_instance_;
  delete CMessageTaskListNotice_reflection_;
  delete NpcTaskList::default_instance_;
  delete NpcTaskList_reflection_;
  delete CMessageNpcTaskListNotice::default_instance_;
  delete CMessageNpcTaskListNotice_reflection_;
  delete CMessageNpcTaskTipNotice::default_instance_;
  delete CMessageNpcTaskTipNotice_reflection_;
  delete CMessagePlayerSearchRequest::default_instance_;
  delete CMessagePlayerSearchRequest_reflection_;
  delete CMessagePlayerSearchResponse::default_instance_;
  delete CMessagePlayerSearchResponse_reflection_;
  delete CMessagePlayerInviteTaskRequest::default_instance_;
  delete CMessagePlayerInviteTaskRequest_reflection_;
  delete CMessagePlayerInviteTaskNotice::default_instance_;
  delete CMessagePlayerInviteTaskNotice_reflection_;
  delete CMessagePlayerInviteTaskResponseRequest::default_instance_;
  delete CMessagePlayerInviteTaskResponseRequest_reflection_;
  delete CMessagePlayerInviteTaskResponseNotice::default_instance_;
  delete CMessagePlayerInviteTaskResponseNotice_reflection_;
  delete CMessageDoPlayerInviteTaskMsg::default_instance_;
  delete CMessageDoPlayerInviteTaskMsg_reflection_;
  delete CMessagePlayerInviteTaskErrorMsg::default_instance_;
  delete CMessagePlayerInviteTaskErrorMsg_reflection_;
  delete CMessageAbortTaskNotice::default_instance_;
  delete CMessageAbortTaskNotice_reflection_;
  delete CMessageTaskFailNotice::default_instance_;
  delete CMessageTaskFailNotice_reflection_;
  delete CMessageUnFinishTaskTime::default_instance_;
  delete CMessageUnFinishTaskTime_reflection_;
  delete CMessageTaskOprFailNotice::default_instance_;
  delete CMessageTaskOprFailNotice_reflection_;
  delete CMessageTaskUnRefreshNotice::default_instance_;
  delete CMessageTaskUnRefreshNotice_reflection_;
  delete CMessageTaskRefreshResult::default_instance_;
  delete CMessageTaskRefreshResult_reflection_;
  delete CMessageRmoveTaskColor::default_instance_;
  delete CMessageRmoveTaskColor_reflection_;
  delete CMessageTaskRefreshFailNotice::default_instance_;
  delete CMessageTaskRefreshFailNotice_reflection_;
  delete CMessageUnReaccpetTask::default_instance_;
  delete CMessageUnReaccpetTask_reflection_;
  delete CMessageNpcStorageTaskListNotice::default_instance_;
  delete CMessageNpcStorageTaskListNotice_reflection_;
  delete CMessageObtainScrollTaskRequest::default_instance_;
  delete CMessageObtainScrollTaskRequest_reflection_;
  delete CMessageTragedyTaskUpdateNotice::default_instance_;
  delete CMessageTragedyTaskUpdateNotice_reflection_;
  delete CMessageGetTipRequest::default_instance_;
  delete CMessageGetTipRequest_reflection_;
  delete CMessageEndTalkRequest::default_instance_;
  delete CMessageEndTalkRequest_reflection_;
  delete CMessageNpcTalkStateChangeNotice::default_instance_;
  delete CMessageNpcTalkStateChangeNotice_reflection_;
  delete CMessageLockBaggageRequest::default_instance_;
  delete CMessageLockBaggageRequest_reflection_;
  delete CMessageLockBaggageResponse::default_instance_;
  delete CMessageLockBaggageResponse_reflection_;
  delete TaskCondition::default_instance_;
  delete TaskCondition_reflection_;
  delete CMessageUpdateTaskConditions::default_instance_;
  delete CMessageUpdateTaskConditions_reflection_;
  delete CMessageClearTaskNotify::default_instance_;
  delete CMessageClearTaskNotify_reflection_;
  delete CMessageTakeOffItemRequest::default_instance_;
  delete CMessageTakeOffItemRequest_reflection_;
  delete CMessageGetFamilyTaskRequest::default_instance_;
  delete CMessageGetFamilyTaskRequest_reflection_;
  delete SingleFamilyTaskResponse::default_instance_;
  delete SingleFamilyTaskResponse_reflection_;
  delete CMessageGetFamilyTaskResponse::default_instance_;
  delete CMessageGetFamilyTaskResponse_reflection_;
  delete CMessageGetCorpsTaskRequest::default_instance_;
  delete CMessageGetCorpsTaskRequest_reflection_;
  delete CMessageGetCorpsTaskResponse::default_instance_;
  delete CMessageGetCorpsTaskResponse_reflection_;
  delete CMessageGetCountryTaskRequest::default_instance_;
  delete CMessageGetCountryTaskRequest_reflection_;
  delete CMessageGetCountryTaskResponse::default_instance_;
  delete CMessageGetCountryTaskResponse_reflection_;
  delete CMessageGetCampTaskRequest::default_instance_;
  delete CMessageGetCampTaskRequest_reflection_;
  delete CMessageGetCampTaskResponse::default_instance_;
  delete CMessageGetCampTaskResponse_reflection_;
  delete CMessageGetChairManTaskRequest::default_instance_;
  delete CMessageGetChairManTaskRequest_reflection_;
  delete CMessageGetChairManTaskResponse::default_instance_;
  delete CMessageGetChairManTaskResponse_reflection_;
  delete CMessageGetTeamLoopErrNotify::default_instance_;
  delete CMessageGetTeamLoopErrNotify_reflection_;
  delete PBPubslishList::default_instance_;
  delete PBPubslishList_reflection_;
  delete CMessageCheckGroupPublishRequest::default_instance_;
  delete CMessageCheckGroupPublishRequest_reflection_;
  delete CMessagePublishGroupTaskRequest::default_instance_;
  delete CMessagePublishGroupTaskRequest_reflection_;
  delete CMessageCheckGroupPublishResponse::default_instance_;
  delete CMessageCheckGroupPublishResponse_reflection_;
  delete CMessagePublishGroupTaskResponse::default_instance_;
  delete CMessagePublishGroupTaskResponse_reflection_;
  delete CMessagePlayerCheckSinglePublish::default_instance_;
  delete CMessagePlayerCheckSinglePublish_reflection_;
  delete CMessagePlayerSinglePublishTask::default_instance_;
  delete CMessagePlayerSinglePublishTask_reflection_;
  delete CMessageRefreshSingleTaskRequest::default_instance_;
  delete CMessageRefreshSingleTaskRequest_reflection_;
  delete CMessagePlayerGetPublishTaskRequest::default_instance_;
  delete CMessagePlayerGetPublishTaskRequest_reflection_;
  delete CMessagePlayerGetAwardsRequest::default_instance_;
  delete CMessagePlayerGetAwardsRequest_reflection_;
  delete PBSingleColorRank::default_instance_;
  delete PBSingleColorRank_reflection_;
  delete CMessageCheckSinglePublishResponse::default_instance_;
  delete CMessageCheckSinglePublishResponse_reflection_;
  delete CMessagePlayerSinglePublishResponse::default_instance_;
  delete CMessagePlayerSinglePublishResponse_reflection_;
  delete CMessageRefreshSingleTaskResponse::default_instance_;
  delete CMessageRefreshSingleTaskResponse_reflection_;
}

void protobuf_AddDesc_taskmessage_5fpb_2ehxx() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_coremessage_5fpb_2ehxx();
  ::protobuf_AddDesc_property_5fpb_2ehxx();
  #ifndef _NO_PROTOBUF_STR_
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022taskmessage_pb.hxx\032\022coremessage_pb.hxx"
    "\032\017property_pb.hxx\"g\n\nTaskStruct\022\r\n\005Timer"
    "\030\001 \001(\005\022\020\n\010TaskData\030\002 \003(\r\022\024\n\014TaskProgress"
    "\030\003 \001(\r\022\022\n\nTalkedNpcs\030\004 \003(\r\022\016\n\006TaskID\030\005 \001"
    "(\r\"@\n\031CMessageObtainTaskRequest\022\023\n\013NpcEn"
    "tityID\030\001 \001(\r\022\016\n\006TaskID\030\002 \001(\r\"a\n\026CMessage"
    "TaskEndRequest\022\016\n\006TaskID\030\001 \001(\r\022\023\n\013NpcEnt"
    "ityID\030\002 \001(\r\022\020\n\010SelectID\030\003 \001(\r\022\020\n\010BagInde"
    "x\030\004 \001(\r\"m\n\032CMessageTaskRefreshRequest\022\016\n"
    "\006TaskID\030\001 \001(\r\022\023\n\013NpcEntityID\030\002 \001(\r\022\020\n\010Se"
    "lectID\030\003 \001(\r\022\030\n\020RefreshItemIndex\030\004 \001(\r\"\343"
    "\001\n\016LoopTaskStruct\022\027\n\017TodayMultiLoops\030\001 \001"
    "(\r\022\026\n\016WeekMultiLoops\030\002 \001(\r\022\027\n\017TotalMulti"
    "Loops\030\003 \001(\r\022\022\n\nLoopTaskID\030\004 \001(\r\022\026\n\016Compl"
    "etedLoops\030\005 \001(\r\022\022\n\nNextLoopID\030\006 \001(\r\022\016\n\006L"
    "oopID\030\007 \001(\r\022\033\n\023WeekTotalMultiLoops\030\010 \001(\r"
    "\022\032\n\022AwardMultipleToday\030\t \001(\r\"`\n\021StorageT"
    "askStruct\022\026\n\016TodayCompletes\030\001 \001(\r\022\027\n\017Tot"
    "alMultiLoops\030\002 \001(\r\022\032\n\022AwardMultipleToday"
    "\030\003 \001(\r\"X\n\030CMessageObtainTaskNotice\022\031\n\004Ta"
    "sk\030\001 \001(\0132\013.TaskStruct\022!\n\010LoopTask\030\002 \001(\0132"
    "\017.LoopTaskStruct\",\n\032CMessageTaskComplete"
    "Notice\022\016\n\006TaskID\030\001 \001(\r\"P\n\025CMessageTaskEn"
    "dNotice\022\016\n\006TaskID\030\001 \001(\r\022\'\n\013StorageTask\030\002"
    " \001(\0132\022.StorageTaskStruct\"5\n\030CMessageUpda"
    "teTaskNotice\022\031\n\004Task\030\001 \001(\0132\013.TaskStruct\""
    ")\n\027CMessageResetTaskNotice\022\016\n\006TaskID\030\001 \001"
    "(\r\"?\n\030CMessageAbortTaskRequest\022\016\n\006TaskID"
    "\030\001 \001(\r\022\023\n\013NpcEntityID\030\002 \001(\r\"\202\002\n\026CMessage"
    "TaskListNotice\022\024\n\014CompletedBuf\030\001 \001(\014\022\017\n\007"
    "TaskNum\030\002 \001(\r\022!\n\010LoopTask\030\003 \001(\0132\017.LoopTa"
    "skStruct\022\032\n\005Tasks\030\004 \003(\0132\013.TaskStruct\022\026\n\016"
    "CompletedTasks\030\005 \003(\r\022\'\n\013StorageTask\030\006 \001("
    "\0132\022.StorageTaskStruct\022\032\n\022ChairManSection"
    "IDs\030\007 \003(\r\022\024\n\014RepeateTasks\030\010 \003(\r\022\017\n\007EndTi"
    "me\030\t \003(\r\"x\n\013NpcTaskList\022\024\n\014ExtendTaskID\030"
    "\001 \003(\r\022\026\n\016CallbackNumber\030\002 \001(\r\022\024\n\014ExtendN"
    "umber\030\003 \001(\r\022\r\n\005NpcID\030\004 \001(\r\022\026\n\016CallbackTa"
    "skID\030\005 \003(\r\"7\n\031CMessageNpcTaskListNotice\022"
    "\032\n\004List\030\001 \001(\0132\014.NpcTaskList\"L\n\030CMessageN"
    "pcTaskTipNotice\022\023\n\013NpcEntityID\030\001 \003(\r\022\013\n\003"
    "Tip\030\002 \003(\r\022\016\n\006IdType\030\003 \001(\r\"\035\n\033CMessagePla"
    "yerSearchRequest\"/\n\034CMessagePlayerSearch"
    "Response\022\017\n\007TaskIDs\030\001 \003(\r\"F\n\037CMessagePla"
    "yerInviteTaskRequest\022\023\n\013PlayerNames\030\001 \003("
    "\t\022\016\n\006TaskID\030\002 \001(\r\"G\n\036CMessagePlayerInvit"
    "eTaskNotice\022\016\n\006TaskID\030\001 \001(\r\022\025\n\rSrcPlayer"
    "Name\030\002 \001(\t\"c\n\'CMessagePlayerInviteTaskRe"
    "sponseRequest\022\016\n\006TaskID\030\001 \001(\r\022\021\n\tAgreeFl"
    "ag\030\002 \001(\r\022\025\n\rSrcPlayerName\030\003 \001(\t\"\203\001\n&CMes"
    "sagePlayerInviteTaskResponseNotice\022\037\n\006Ro"
    "uter\030\001 \001(\0132\017.CMessageRouter\022\025\n\rSrcPlayer"
    "Name\030\002 \001(\t\022\016\n\006TaskID\030\003 \001(\r\022\021\n\tAgreeFlag\030"
    "\004 \001(\r\"P\n\035CMessageDoPlayerInviteTaskMsg\022\037"
    "\n\006Router\030\001 \001(\0132\017.CMessageRouter\022\016\n\006TaskI"
    "D\030\002 \001(\r\"s\n CMessagePlayerInviteTaskError"
    "Msg\022\037\n\006Router\030\001 \001(\0132\017.CMessageRouter\022\016\n\006"
    "TaskID\030\002 \001(\r\022\016\n\006TypeID\030\003 \001(\r\022\016\n\006MyName\030\004"
    " \001(\t\")\n\027CMessageAbortTaskNotice\022\016\n\006TaskI"
    "D\030\001 \001(\r\"(\n\026CMessageTaskFailNotice\022\016\n\006Tas"
    "kID\030\001 \001(\r\"<\n\030CMessageUnFinishTaskTime\022\016\n"
    "\006TaskID\030\001 \001(\r\022\020\n\010NeedTime\030\002 \001(\r\"\033\n\031CMess"
    "ageTaskOprFailNotice\"-\n\033CMessageTaskUnRe"
    "freshNotice\022\016\n\006TaskID\030\001 \001(\r\"R\n\031CMessageT"
    "askRefreshResult\022\016\n\006TaskID\030\001 \001(\r\022\021\n\tTask"
    "Color\030\002 \001(\r\022\022\n\nTaskNumber\030\003 \001(\r\";\n\026CMess"
    "ageRmoveTaskColor\022\016\n\006TaskID\030\001 \001(\r\022\021\n\tTas"
    "kColor\030\002 \001(\r\"/\n\035CMessageTaskRefreshFailN"
    "otice\022\016\n\006TaskID\030\001 \001(\r\":\n\026CMessageUnReacc"
    "petTask\022\016\n\006TaskID\030\001 \001(\r\022\020\n\010NeedTime\030\002 \001("
    "\r\">\n CMessageNpcStorageTaskListNotice\022\032\n"
    "\004List\030\001 \001(\0132\014.NpcTaskList\"3\n\037CMessageObt"
    "ainScrollTaskRequest\022\020\n\010ScrollID\030\001 \001(\r\"W"
    "\n\037CMessageTragedyTaskUpdateNotice\022#\n\013Tra"
    "gedyInfo\030\001 \003(\0132\016.TragedyStruct\022\017\n\007IsLogi"
    "n\030\002 \001(\r\"<\n\025CMessageGetTipRequest\022\023\n\013NpcE"
    "ntityID\030\001 \003(\r\022\016\n\006IdType\030\002 \001(\r\"=\n\026CMessag"
    "eEndTalkRequest\022\023\n\013NpcEntityID\030\001 \001(\r\022\016\n\006"
    "TaskID\030\002 \001(\r\"T\n CMessageNpcTalkStateChan"
    "geNotice\022\016\n\006TaskID\030\001 \001(\r\022\r\n\005State\030\002 \001(\r\022"
    "\021\n\tNpcTempID\030\003 \001(\r\"/\n\032CMessageLockBaggag"
    "eRequest\022\021\n\tItemIndex\030\001 \001(\r\"0\n\033CMessageL"
    "ockBaggageResponse\022\021\n\tItemIndex\030\001 \001(\r\"O\n"
    "\rTaskCondition\022\016\n\006TaskID\030\001 \001(\007\022\021\n\tCondit"
    "ion\030\002 \001(\007\022\016\n\006TempID\030\003 \001(\007\022\013\n\003Num\030\004 \001(\r\"@"
    "\n\034CMessageUpdateTaskConditions\022 \n\010Contio"
    "ns\030\001 \003(\0132\016.TaskCondition\"\031\n\027CMessageClea"
    "rTaskNotify\"\034\n\032CMessageTakeOffItemReques"
    "t\"1\n\034CMessageGetFamilyTaskRequest\022\021\n\tTas"
    "kTypes\030\001 \003(\r\"?\n\030SingleFamilyTaskResponse"
    "\022\017\n\007TaskIDs\030\001 \001(\r\022\022\n\nTodayTimes\030\002 \001(\r\"I\n"
    "\035CMessageGetFamilyTaskResponse\022(\n\005Tasks\030"
    "\001 \003(\0132\031.SingleFamilyTaskResponse\"\035\n\033CMes"
    "sageGetCorpsTaskRequest\"H\n\034CMessageGetCo"
    "rpsTaskResponse\022(\n\005Tasks\030\001 \003(\0132\031.SingleF"
    "amilyTaskResponse\"\037\n\035CMessageGetCountryT"
    "askRequest\"J\n\036CMessageGetCountryTaskResp"
    "onse\022(\n\005Tasks\030\001 \003(\0132\031.SingleFamilyTaskRe"
    "sponse\"\034\n\032CMessageGetCampTaskRequest\"G\n\033"
    "CMessageGetCampTaskResponse\022(\n\005Tasks\030\001 \003"
    "(\0132\031.SingleFamilyTaskResponse\"5\n\036CMessag"
    "eGetChairManTaskRequest\022\023\n\013NpcEntityID\030\001"
    " \001(\r\"G\n\037CMessageGetChairManTaskResponse\022"
    "$\n\007TaskIDs\030\001 \003(\0132\023.SingleChairManTask\"A\n"
    "\034CMessageGetTeamLoopErrNotify\022\020\n\010CharNam"
    "e\030\001 \001(\t\022\017\n\007ErrCode\030\002 \001(\r\"3\n\016PBPubslishLi"
    "st\022\016\n\006TaskID\030\001 \001(\r\022\021\n\tTaskState\030\002 \001(\r\"7\n"
    " CMessageCheckGroupPublishRequest\022\023\n\013Pub"
    "lishType\030\001 \001(\r\"F\n\037CMessagePublishGroupTa"
    "skRequest\022\016\n\006TaskID\030\001 \001(\r\022\023\n\013PublishType"
    "\030\002 \001(\r\"X\n!CMessageCheckGroupPublishRespo"
    "nse\022\023\n\013PublishType\030\001 \001(\r\022\036\n\005Tasks\030\002 \003(\0132"
    "\017.PBPubslishList\"G\n CMessagePublishGroup"
    "TaskResponse\022\016\n\006TaskID\030\001 \001(\r\022\023\n\013PublishT"
    "ype\030\002 \001(\r\"\"\n CMessagePlayerCheckSinglePu"
    "blish\"G\n\037CMessagePlayerSinglePublishTask"
    "\022\021\n\tTaskColor\030\001 \001(\r\022\021\n\tItemIndex\030\002 \001(\r\"H"
    "\n CMessageRefreshSingleTaskRequest\022\021\n\tTa"
    "skColor\030\001 \001(\r\022\021\n\tItemIndex\030\002 \001(\r\"8\n#CMes"
    "sagePlayerGetPublishTaskRequest\022\021\n\tTaskC"
    "olor\030\001 \001(\r\"3\n\036CMessagePlayerGetAwardsReq"
    "uest\022\021\n\tTaskColor\030\001 \001(\r\"b\n\021PBSingleColor"
    "Rank\022\021\n\tPubNumber\030\001 \001(\r\022\021\n\tRecvTasks\030\002 \001"
    "(\r\022\022\n\nRecvAwards\030\003 \001(\r\022\023\n\013CurrentTask\030\004 "
    "\001(\r\"\214\001\n\"CMessageCheckSinglePublishRespon"
    "se\022\024\n\014TodayPublish\030\001 \001(\r\022\023\n\013OncePublish\030"
    "\002 \001(\r\022\023\n\013TotalFinish\030\003 \001(\r\022&\n\nSingleRank"
    "\030\004 \003(\0132\022.PBSingleColorRank\"8\n#CMessagePl"
    "ayerSinglePublishResponse\022\021\n\tTaskColor\030\001"
    " \001(\r\"F\n!CMessageRefreshSingleTaskRespons"
    "e\022\021\n\tTaskColor\030\001 \001(\r\022\016\n\006TaskID\030\002 \001(\r*\222\021\n"
    "\013TASK_MSG_ID\022\036\n\031ID_C2S_REQUEST_OBTAINTAS"
    "K\020\200 \022\033\n\026ID_C2S_REQUEST_ENDTASK\020\201 \022\035\n\030ID_"
    "S2C_NOTICE_OBTAINTASK\020\202 \022\033\n\026ID_S2C_NOTIC"
    "E_COMPLETE\020\203 \022\032\n\025ID_S2C_NOTICE_TASKEND\020\204"
    " \022\031\n\024ID_S2C_NOTICE_UPDATE\020\205 \022\030\n\023ID_S2C_N"
    "OTICE_RESET\020\206 \022\035\n\030ID_C2S_REQUEST_ABORTTA"
    "SK\020\207 \022\033\n\026ID_S2C_NOTICE_TASKLIST\020\210 \022\036\n\031ID"
    "_S2C_NOTICE_NPCTASKLIST\020\211 \022\035\n\030ID_S2C_NOT"
    "ICE_NPCTASKTIP\020\212 \022\037\n\032ID_C2S_REQUEST_TASK"
    "_SEARCH\020\213 \022\036\n\031ID_S2C_NOTICE_TASK_SEARCH\020"
    "\214 \022\037\n\032ID_C2S_INVITE_TASK_REQUEST\020\215 \022\036\n\031I"
    "D_S2C_INVITE_TASK_NOTICE\020\216 \022(\n#ID_C2S_IN"
    "VITE_TASK_RESPONSE_REQUEST\020\217 \022\'\n\"ID_S2C_"
    "INVITE_TASK_RESPONSE_NOTICE\020\220$\022$\n\037ID_S2S"
    "_DOPLAYER_INVITE_TASK_MSG\020\221$\022(\n#ID_S2C_P"
    "LAYER_INVITE_TASK_ERROR_MSG\020\222$\022\035\n\030ID_S2C"
    "_NOTICE_ABORT_TASK\020\224 \022\033\n\026ID_S2C_NOTICE_T"
    "ASKFAIL\020\225 \022\036\n\031ID_S2C_NOTICE_TASKOPRFAIL\020"
    "\226 \022%\n ID_S2C_NOTICE_NPCSTORAGETASKLIST\020\227"
    " \022$\n\037ID_C2S_REQUEST_OBTAINSCROLLTASK\020\230 \022"
    "$\n\037ID_S2C_NOTICE_TRAGEDYTASKUPDATE\020\231 \022\032\n"
    "\025ID_C2S_REQUEST_GETTIP\020\232 \022\033\n\026ID_C2S_REQU"
    "EST_ENDTALK\020\233 \022 \n\033ID_S2C_NOTICE_NPCTALKC"
    "HANGE\020\234 \022\033\n\026ID_C2S_REQUEST_LOCKBAG\020\235 \022\034\n"
    "\027ID_S2C_LOCKBAG_RESPONSE\020\236 \022\035\n\030ID_S2C_UP"
    "DATE_CONDITIONS\020\237 \022\033\n\026ID_S2C_CLEARTASKNO"
    "TIFY\020\240 \022\037\n\032ID_C2S_REQUEST_TAKEOFFITEM\020\241 "
    "\022!\n\034ID_C2S_REQUEST_GETFAMILYTASK\020\242 \022\"\n\035I"
    "D_S2C_RESPONSE_GETFAMILYTASK\020\243 \022 \n\033ID_C2"
    "S_REQUEST_GETCORPSTASK\020\244 \022!\n\034ID_S2C_RESP"
    "ONSE_GETCORPSTASK\020\245 \022\"\n\035ID_C2S_REQUEST_G"
    "ETCOUNTRYTASK\020\246 \022#\n\036ID_S2C_RESPONSE_GETC"
    "OUNTRYTASK\020\247 \022\037\n\032ID_C2S_REQUEST_GETCAMPT"
    "ASK\020\250 \022 \n\033ID_S2C_RESPONSE_GETCAMPTASK\020\251 "
    "\022#\n\036ID_C2S_REQUEST_GETCHAIRMANTASK\020\252 \022$\n"
    "\037ID_S2C_RESPONSE_GETCHAIRMANTASK\020\253 \022!\n\034I"
    "D_S2C_NOTIFY_GETTEAMLOOPERR\020\254 \022\"\n\035ID_S2C"
    "_NOTIFY_UNFINISHTIMEERR\020\255 \022\037\n\032ID_C2S_REQ"
    "UEST_REFRESHTASK\020\256 \022\"\n\035ID_S2C_NOTICE_TAS"
    "KREFRESHFAIL\020\257 \022\"\n\035ID_S2C_NOTICE_TASKUNR"
    "EFRESHED\020\260 \022$\n\037ID_S2C_NOTICE_TASKREFRESH"
    "RESULT\020\261 \022\"\n\035ID_S2C_NOTICE_REMOVETASKCOL"
    "OR\020\262 \022!\n\034ID_S2C_NOTICE_TASKUNREACCEPT\020\263 "
    "\022&\n!ID_C2S_REQUEST_CHECK_GROUPPUBLISH\020\264 "
    "\022%\n ID_C2S_REQUEST_PLAYERPUBLISHTASK\020\265 \022"
    "\'\n\"ID_S2C_RESPONSE_CHECK_GROUPPUBLISH\020\266 "
    "\022&\n!ID_S2C_RESPONSE_PLAYERPUBLISHTASK\020\267 "
    "\022\'\n\"ID_C2S_REQUEST_CHECK_SINGLEPUBLISH\020\270"
    " \022%\n ID_C2S_REQUEST_SINGLEPUBLISHTASK\020\271 "
    "\022%\n ID_C2S_REQUEST_REFRESHSINGLETASK\020\272 \022"
    "$\n\037ID_C2S_REQUEST_OBTAINSINGLETASK\020\273 \022$\n"
    "\037ID_C2S_REQUEST_RECVSINGLEAWARDS\020\274 \022(\n#I"
    "D_S2C_RESPONSE_CHECK_SINGLEPUBLISH\020\275 \022&\n"
    "!ID_S2C_RESPONSE_SINGLEPUBLISHTASK\020\276 \022\"\n"
    "\035ID_S2C_RESPONSE_REFRESHRESULT\020\277 B\002H\001", 7437);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "taskmessage_pb.hxx", &protobuf_RegisterTypes);
  #endif
  TaskStruct::default_instance_ = new TaskStruct();
  CMessageObtainTaskRequest::default_instance_ = new CMessageObtainTaskRequest();
  CMessageTaskEndRequest::default_instance_ = new CMessageTaskEndRequest();
  CMessageTaskRefreshRequest::default_instance_ = new CMessageTaskRefreshRequest();
  LoopTaskStruct::default_instance_ = new LoopTaskStruct();
  StorageTaskStruct::default_instance_ = new StorageTaskStruct();
  CMessageObtainTaskNotice::default_instance_ = new CMessageObtainTaskNotice();
  CMessageTaskCompleteNotice::default_instance_ = new CMessageTaskCompleteNotice();
  CMessageTaskEndNotice::default_instance_ = new CMessageTaskEndNotice();
  CMessageUpdateTaskNotice::default_instance_ = new CMessageUpdateTaskNotice();
  CMessageResetTaskNotice::default_instance_ = new CMessageResetTaskNotice();
  CMessageAbortTaskRequest::default_instance_ = new CMessageAbortTaskRequest();
  CMessageTaskListNotice::default_instance_ = new CMessageTaskListNotice();
  NpcTaskList::default_instance_ = new NpcTaskList();
  CMessageNpcTaskListNotice::default_instance_ = new CMessageNpcTaskListNotice();
  CMessageNpcTaskTipNotice::default_instance_ = new CMessageNpcTaskTipNotice();
  CMessagePlayerSearchRequest::default_instance_ = new CMessagePlayerSearchRequest();
  CMessagePlayerSearchResponse::default_instance_ = new CMessagePlayerSearchResponse();
  CMessagePlayerInviteTaskRequest::default_instance_ = new CMessagePlayerInviteTaskRequest();
  CMessagePlayerInviteTaskNotice::default_instance_ = new CMessagePlayerInviteTaskNotice();
  CMessagePlayerInviteTaskResponseRequest::default_instance_ = new CMessagePlayerInviteTaskResponseRequest();
  CMessagePlayerInviteTaskResponseNotice::default_instance_ = new CMessagePlayerInviteTaskResponseNotice();
  CMessageDoPlayerInviteTaskMsg::default_instance_ = new CMessageDoPlayerInviteTaskMsg();
  CMessagePlayerInviteTaskErrorMsg::default_instance_ = new CMessagePlayerInviteTaskErrorMsg();
  CMessageAbortTaskNotice::default_instance_ = new CMessageAbortTaskNotice();
  CMessageTaskFailNotice::default_instance_ = new CMessageTaskFailNotice();
  CMessageUnFinishTaskTime::default_instance_ = new CMessageUnFinishTaskTime();
  CMessageTaskOprFailNotice::default_instance_ = new CMessageTaskOprFailNotice();
  CMessageTaskUnRefreshNotice::default_instance_ = new CMessageTaskUnRefreshNotice();
  CMessageTaskRefreshResult::default_instance_ = new CMessageTaskRefreshResult();
  CMessageRmoveTaskColor::default_instance_ = new CMessageRmoveTaskColor();
  CMessageTaskRefreshFailNotice::default_instance_ = new CMessageTaskRefreshFailNotice();
  CMessageUnReaccpetTask::default_instance_ = new CMessageUnReaccpetTask();
  CMessageNpcStorageTaskListNotice::default_instance_ = new CMessageNpcStorageTaskListNotice();
  CMessageObtainScrollTaskRequest::default_instance_ = new CMessageObtainScrollTaskRequest();
  CMessageTragedyTaskUpdateNotice::default_instance_ = new CMessageTragedyTaskUpdateNotice();
  CMessageGetTipRequest::default_instance_ = new CMessageGetTipRequest();
  CMessageEndTalkRequest::default_instance_ = new CMessageEndTalkRequest();
  CMessageNpcTalkStateChangeNotice::default_instance_ = new CMessageNpcTalkStateChangeNotice();
  CMessageLockBaggageRequest::default_instance_ = new CMessageLockBaggageRequest();
  CMessageLockBaggageResponse::default_instance_ = new CMessageLockBaggageResponse();
  TaskCondition::default_instance_ = new TaskCondition();
  CMessageUpdateTaskConditions::default_instance_ = new CMessageUpdateTaskConditions();
  CMessageClearTaskNotify::default_instance_ = new CMessageClearTaskNotify();
  CMessageTakeOffItemRequest::default_instance_ = new CMessageTakeOffItemRequest();
  CMessageGetFamilyTaskRequest::default_instance_ = new CMessageGetFamilyTaskRequest();
  SingleFamilyTaskResponse::default_instance_ = new SingleFamilyTaskResponse();
  CMessageGetFamilyTaskResponse::default_instance_ = new CMessageGetFamilyTaskResponse();
  CMessageGetCorpsTaskRequest::default_instance_ = new CMessageGetCorpsTaskRequest();
  CMessageGetCorpsTaskResponse::default_instance_ = new CMessageGetCorpsTaskResponse();
  CMessageGetCountryTaskRequest::default_instance_ = new CMessageGetCountryTaskRequest();
  CMessageGetCountryTaskResponse::default_instance_ = new CMessageGetCountryTaskResponse();
  CMessageGetCampTaskRequest::default_instance_ = new CMessageGetCampTaskRequest();
  CMessageGetCampTaskResponse::default_instance_ = new CMessageGetCampTaskResponse();
  CMessageGetChairManTaskRequest::default_instance_ = new CMessageGetChairManTaskRequest();
  CMessageGetChairManTaskResponse::default_instance_ = new CMessageGetChairManTaskResponse();
  CMessageGetTeamLoopErrNotify::default_instance_ = new CMessageGetTeamLoopErrNotify();
  PBPubslishList::default_instance_ = new PBPubslishList();
  CMessageCheckGroupPublishRequest::default_instance_ = new CMessageCheckGroupPublishRequest();
  CMessagePublishGroupTaskRequest::default_instance_ = new CMessagePublishGroupTaskRequest();
  CMessageCheckGroupPublishResponse::default_instance_ = new CMessageCheckGroupPublishResponse();
  CMessagePublishGroupTaskResponse::default_instance_ = new CMessagePublishGroupTaskResponse();
  CMessagePlayerCheckSinglePublish::default_instance_ = new CMessagePlayerCheckSinglePublish();
  CMessagePlayerSinglePublishTask::default_instance_ = new CMessagePlayerSinglePublishTask();
  CMessageRefreshSingleTaskRequest::default_instance_ = new CMessageRefreshSingleTaskRequest();
  CMessagePlayerGetPublishTaskRequest::default_instance_ = new CMessagePlayerGetPublishTaskRequest();
  CMessagePlayerGetAwardsRequest::default_instance_ = new CMessagePlayerGetAwardsRequest();
  PBSingleColorRank::default_instance_ = new PBSingleColorRank();
  CMessageCheckSinglePublishResponse::default_instance_ = new CMessageCheckSinglePublishResponse();
  CMessagePlayerSinglePublishResponse::default_instance_ = new CMessagePlayerSinglePublishResponse();
  CMessageRefreshSingleTaskResponse::default_instance_ = new CMessageRefreshSingleTaskResponse();
  TaskStruct::default_instance_->InitAsDefaultInstance();
  CMessageObtainTaskRequest::default_instance_->InitAsDefaultInstance();
  CMessageTaskEndRequest::default_instance_->InitAsDefaultInstance();
  CMessageTaskRefreshRequest::default_instance_->InitAsDefaultInstance();
  LoopTaskStruct::default_instance_->InitAsDefaultInstance();
  StorageTaskStruct::default_instance_->InitAsDefaultInstance();
  CMessageObtainTaskNotice::default_instance_->InitAsDefaultInstance();
  CMessageTaskCompleteNotice::default_instance_->InitAsDefaultInstance();
  CMessageTaskEndNotice::default_instance_->InitAsDefaultInstance();
  CMessageUpdateTaskNotice::default_instance_->InitAsDefaultInstance();
  CMessageResetTaskNotice::default_instance_->InitAsDefaultInstance();
  CMessageAbortTaskRequest::default_instance_->InitAsDefaultInstance();
  CMessageTaskListNotice::default_instance_->InitAsDefaultInstance();
  NpcTaskList::default_instance_->InitAsDefaultInstance();
  CMessageNpcTaskListNotice::default_instance_->InitAsDefaultInstance();
  CMessageNpcTaskTipNotice::default_instance_->InitAsDefaultInstance();
  CMessagePlayerSearchRequest::default_instance_->InitAsDefaultInstance();
  CMessagePlayerSearchResponse::default_instance_->InitAsDefaultInstance();
  CMessagePlayerInviteTaskRequest::default_instance_->InitAsDefaultInstance();
  CMessagePlayerInviteTaskNotice::default_instance_->InitAsDefaultInstance();
  CMessagePlayerInviteTaskResponseRequest::default_instance_->InitAsDefaultInstance();
  CMessagePlayerInviteTaskResponseNotice::default_instance_->InitAsDefaultInstance();
  CMessageDoPlayerInviteTaskMsg::default_instance_->InitAsDefaultInstance();
  CMessagePlayerInviteTaskErrorMsg::default_instance_->InitAsDefaultInstance();
  CMessageAbortTaskNotice::default_instance_->InitAsDefaultInstance();
  CMessageTaskFailNotice::default_instance_->InitAsDefaultInstance();
  CMessageUnFinishTaskTime::default_instance_->InitAsDefaultInstance();
  CMessageTaskOprFailNotice::default_instance_->InitAsDefaultInstance();
  CMessageTaskUnRefreshNotice::default_instance_->InitAsDefaultInstance();
  CMessageTaskRefreshResult::default_instance_->InitAsDefaultInstance();
  CMessageRmoveTaskColor::default_instance_->InitAsDefaultInstance();
  CMessageTaskRefreshFailNotice::default_instance_->InitAsDefaultInstance();
  CMessageUnReaccpetTask::default_instance_->InitAsDefaultInstance();
  CMessageNpcStorageTaskListNotice::default_instance_->InitAsDefaultInstance();
  CMessageObtainScrollTaskRequest::default_instance_->InitAsDefaultInstance();
  CMessageTragedyTaskUpdateNotice::default_instance_->InitAsDefaultInstance();
  CMessageGetTipRequest::default_instance_->InitAsDefaultInstance();
  CMessageEndTalkRequest::default_instance_->InitAsDefaultInstance();
  CMessageNpcTalkStateChangeNotice::default_instance_->InitAsDefaultInstance();
  CMessageLockBaggageRequest::default_instance_->InitAsDefaultInstance();
  CMessageLockBaggageResponse::default_instance_->InitAsDefaultInstance();
  TaskCondition::default_instance_->InitAsDefaultInstance();
  CMessageUpdateTaskConditions::default_instance_->InitAsDefaultInstance();
  CMessageClearTaskNotify::default_instance_->InitAsDefaultInstance();
  CMessageTakeOffItemRequest::default_instance_->InitAsDefaultInstance();
  CMessageGetFamilyTaskRequest::default_instance_->InitAsDefaultInstance();
  SingleFamilyTaskResponse::default_instance_->InitAsDefaultInstance();
  CMessageGetFamilyTaskResponse::default_instance_->InitAsDefaultInstance();
  CMessageGetCorpsTaskRequest::default_instance_->InitAsDefaultInstance();
  CMessageGetCorpsTaskResponse::default_instance_->InitAsDefaultInstance();
  CMessageGetCountryTaskRequest::default_instance_->InitAsDefaultInstance();
  CMessageGetCountryTaskResponse::default_instance_->InitAsDefaultInstance();
  CMessageGetCampTaskRequest::default_instance_->InitAsDefaultInstance();
  CMessageGetCampTaskResponse::default_instance_->InitAsDefaultInstance();
  CMessageGetChairManTaskRequest::default_instance_->InitAsDefaultInstance();
  CMessageGetChairManTaskResponse::default_instance_->InitAsDefaultInstance();
  CMessageGetTeamLoopErrNotify::default_instance_->InitAsDefaultInstance();
  PBPubslishList::default_instance_->InitAsDefaultInstance();
  CMessageCheckGroupPublishRequest::default_instance_->InitAsDefaultInstance();
  CMessagePublishGroupTaskRequest::default_instance_->InitAsDefaultInstance();
  CMessageCheckGroupPublishResponse::default_instance_->InitAsDefaultInstance();
  CMessagePublishGroupTaskResponse::default_instance_->InitAsDefaultInstance();
  CMessagePlayerCheckSinglePublish::default_instance_->InitAsDefaultInstance();
  CMessagePlayerSinglePublishTask::default_instance_->InitAsDefaultInstance();
  CMessageRefreshSingleTaskRequest::default_instance_->InitAsDefaultInstance();
  CMessagePlayerGetPublishTaskRequest::default_instance_->InitAsDefaultInstance();
  CMessagePlayerGetAwardsRequest::default_instance_->InitAsDefaultInstance();
  PBSingleColorRank::default_instance_->InitAsDefaultInstance();
  CMessageCheckSinglePublishResponse::default_instance_->InitAsDefaultInstance();
  CMessagePlayerSinglePublishResponse::default_instance_->InitAsDefaultInstance();
  CMessageRefreshSingleTaskResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_taskmessage_5fpb_2ehxx);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_taskmessage_5fpb_2ehxx {
  StaticDescriptorInitializer_taskmessage_5fpb_2ehxx() {
    protobuf_AddDesc_taskmessage_5fpb_2ehxx();
  }
} static_descriptor_initializer_taskmessage_5fpb_2ehxx_;

const ::google::protobuf::EnumDescriptor* TASK_MSG_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TASK_MSG_ID_descriptor_;
}
bool TASK_MSG_ID_IsValid(int value) {
  switch(value) {
    case 4096:
    case 4097:
    case 4098:
    case 4099:
    case 4100:
    case 4101:
    case 4102:
    case 4103:
    case 4104:
    case 4105:
    case 4106:
    case 4107:
    case 4108:
    case 4109:
    case 4110:
    case 4111:
    case 4116:
    case 4117:
    case 4118:
    case 4119:
    case 4120:
    case 4121:
    case 4122:
    case 4123:
    case 4124:
    case 4125:
    case 4126:
    case 4127:
    case 4128:
    case 4129:
    case 4130:
    case 4131:
    case 4132:
    case 4133:
    case 4134:
    case 4135:
    case 4136:
    case 4137:
    case 4138:
    case 4139:
    case 4140:
    case 4141:
    case 4142:
    case 4143:
    case 4144:
    case 4145:
    case 4146:
    case 4147:
    case 4148:
    case 4149:
    case 4150:
    case 4151:
    case 4152:
    case 4153:
    case 4154:
    case 4155:
    case 4156:
    case 4157:
    case 4158:
    case 4159:
    case 4624:
    case 4625:
    case 4626:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TaskStruct::kTimerFieldNumber;
const int TaskStruct::kTaskDataFieldNumber;
const int TaskStruct::kTaskProgressFieldNumber;
const int TaskStruct::kTalkedNpcsFieldNumber;
const int TaskStruct::kTaskIDFieldNumber;
#endif  // !_MSC_VER

TaskStruct::TaskStruct()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TaskStruct::InitAsDefaultInstance() {}

TaskStruct::TaskStruct(const TaskStruct& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TaskStruct::SharedCtor() {
  _cached_size_ = 0;
  timer_ = 0;
  taskprogress_ = 0u;
  taskid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskStruct::~TaskStruct() {
  SharedDtor();
}

void TaskStruct::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* TaskStruct::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskStruct_descriptor_;
}

const TaskStruct& TaskStruct::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

TaskStruct* TaskStruct::default_instance_ = NULL;

TaskStruct* TaskStruct::New() const {
  return new TaskStruct;
}

void TaskStruct::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timer_ = 0;
    taskprogress_ = 0u;
    taskid_ = 0u;
  }
  taskdata_.Clear();
  talkednpcs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskStruct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional int32 Timer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &timer_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_TaskData;
        break;
      }
      
      // repeated uint32 TaskData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TaskData:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_taskdata(value);
        if (input->ExpectTag(16)) goto parse_TaskData;
        if (input->ExpectTag(24)) goto parse_TaskProgress;
        break;
      }
      
      // optional uint32 TaskProgress = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TaskProgress:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskprogress_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_TalkedNpcs;
        break;
      }
      
      // repeated uint32 TalkedNpcs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TalkedNpcs:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_talkednpcs(value);
        if (input->ExpectTag(32)) goto parse_TalkedNpcs;
        if (input->ExpectTag(40)) goto parse_TaskID;
        break;
      }
      
      // optional uint32 TaskID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TaskID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskid_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TaskStruct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    TaskStruct::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 Timer = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(1, this->timer(), output);
  }
  
  // repeated uint32 TaskData = 2;
  for (int i = 0; i < this->taskdata_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->taskdata(i), output);
  }
  
  // optional uint32 TaskProgress = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->taskprogress(), output);
  }
  
  // repeated uint32 TalkedNpcs = 4;
  for (int i = 0; i < this->talkednpcs_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->talkednpcs(i), output);
  }
  
  // optional uint32 TaskID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->taskid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TaskStruct::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Timer = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(1, this->timer(), target);
  }
  
  // repeated uint32 TaskData = 2;
  for (int i = 0; i < this->taskdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->taskdata(i), target);
  }
  
  // optional uint32 TaskProgress = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->taskprogress(), target);
  }
  
  // repeated uint32 TalkedNpcs = 4;
  for (int i = 0; i < this->talkednpcs_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->talkednpcs(i), target);
  }
  
  // optional uint32 TaskID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->taskid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TaskStruct::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Timer = 1;
    if (has_timer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->timer());
    }
    
    // optional uint32 TaskProgress = 3;
    if (has_taskprogress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskprogress());
    }
    
    // optional uint32 TaskID = 5;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskid());
    }
    
  }
  // repeated uint32 TaskData = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->taskdata_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->taskdata(i));
    }
    total_size += 1 * this->taskdata_size() + data_size;
  }
  
  // repeated uint32 TalkedNpcs = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->talkednpcs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->talkednpcs(i));
    }
    total_size += 1 * this->talkednpcs_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void TaskStruct::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskStruct* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskStruct*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskStruct::MergeFrom(const TaskStruct& from) {
  GOOGLE_CHECK_NE(&from, this);
  taskdata_.MergeFrom(from.taskdata_);
  talkednpcs_.MergeFrom(from.talkednpcs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_timer(from.timer());
    }
    if (from._has_bit(2)) {
      set_taskprogress(from.taskprogress());
    }
    if (from._has_bit(4)) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskStruct::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskStruct::CopyFrom(const TaskStruct& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskStruct::Swap(TaskStruct* other) {
  if (other != this) {
    std::swap(timer_, other->timer_);
    taskdata_.Swap(&other->taskdata_);
    std::swap(taskprogress_, other->taskprogress_);
    talkednpcs_.Swap(&other->talkednpcs_);
    std::swap(taskid_, other->taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool TaskStruct::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* TaskStruct::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* TaskStruct::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return TaskStruct_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageObtainTaskRequest::kNpcEntityIDFieldNumber;
const int CMessageObtainTaskRequest::kTaskIDFieldNumber;
#endif  // !_MSC_VER

CMessageObtainTaskRequest::CMessageObtainTaskRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageObtainTaskRequest::InitAsDefaultInstance() {}

CMessageObtainTaskRequest::CMessageObtainTaskRequest(const CMessageObtainTaskRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageObtainTaskRequest::SharedCtor() {
  _cached_size_ = 0;
  npcentityid_ = 0u;
  taskid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageObtainTaskRequest::~CMessageObtainTaskRequest() {
  SharedDtor();
}

void CMessageObtainTaskRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageObtainTaskRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageObtainTaskRequest_descriptor_;
}

const CMessageObtainTaskRequest& CMessageObtainTaskRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageObtainTaskRequest* CMessageObtainTaskRequest::default_instance_ = NULL;

CMessageObtainTaskRequest* CMessageObtainTaskRequest::New() const {
  return new CMessageObtainTaskRequest;
}

void CMessageObtainTaskRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npcentityid_ = 0u;
    taskid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageObtainTaskRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 NpcEntityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcentityid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_TaskID;
        break;
      }
      
      // optional uint32 TaskID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TaskID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageObtainTaskRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageObtainTaskRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 NpcEntityID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->npcentityid(), output);
  }
  
  // optional uint32 TaskID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->taskid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageObtainTaskRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 NpcEntityID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->npcentityid(), target);
  }
  
  // optional uint32 TaskID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->taskid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageObtainTaskRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 NpcEntityID = 1;
    if (has_npcentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcentityid());
    }
    
    // optional uint32 TaskID = 2;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageObtainTaskRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageObtainTaskRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageObtainTaskRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageObtainTaskRequest::MergeFrom(const CMessageObtainTaskRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_npcentityid(from.npcentityid());
    }
    if (from._has_bit(1)) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageObtainTaskRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageObtainTaskRequest::CopyFrom(const CMessageObtainTaskRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageObtainTaskRequest::Swap(CMessageObtainTaskRequest* other) {
  if (other != this) {
    std::swap(npcentityid_, other->npcentityid_);
    std::swap(taskid_, other->taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageObtainTaskRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageObtainTaskRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageObtainTaskRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageObtainTaskRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageTaskEndRequest::kTaskIDFieldNumber;
const int CMessageTaskEndRequest::kNpcEntityIDFieldNumber;
const int CMessageTaskEndRequest::kSelectIDFieldNumber;
const int CMessageTaskEndRequest::kBagIndexFieldNumber;
#endif  // !_MSC_VER

CMessageTaskEndRequest::CMessageTaskEndRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTaskEndRequest::InitAsDefaultInstance() {}

CMessageTaskEndRequest::CMessageTaskEndRequest(const CMessageTaskEndRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTaskEndRequest::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  npcentityid_ = 0u;
  selectid_ = 0u;
  bagindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTaskEndRequest::~CMessageTaskEndRequest() {
  SharedDtor();
}

void CMessageTaskEndRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTaskEndRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTaskEndRequest_descriptor_;
}

const CMessageTaskEndRequest& CMessageTaskEndRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTaskEndRequest* CMessageTaskEndRequest::default_instance_ = NULL;

CMessageTaskEndRequest* CMessageTaskEndRequest::New() const {
  return new CMessageTaskEndRequest;
}

void CMessageTaskEndRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0u;
    npcentityid_ = 0u;
    selectid_ = 0u;
    bagindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTaskEndRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TaskID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_NpcEntityID;
        break;
      }
      
      // optional uint32 NpcEntityID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcEntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcentityid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_SelectID;
        break;
      }
      
      // optional uint32 SelectID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SelectID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &selectid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_BagIndex;
        break;
      }
      
      // optional uint32 BagIndex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BagIndex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &bagindex_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTaskEndRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTaskEndRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->taskid(), output);
  }
  
  // optional uint32 NpcEntityID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->npcentityid(), output);
  }
  
  // optional uint32 SelectID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->selectid(), output);
  }
  
  // optional uint32 BagIndex = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->bagindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTaskEndRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->taskid(), target);
  }
  
  // optional uint32 NpcEntityID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->npcentityid(), target);
  }
  
  // optional uint32 SelectID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->selectid(), target);
  }
  
  // optional uint32 BagIndex = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->bagindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTaskEndRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskid());
    }
    
    // optional uint32 NpcEntityID = 2;
    if (has_npcentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcentityid());
    }
    
    // optional uint32 SelectID = 3;
    if (has_selectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->selectid());
    }
    
    // optional uint32 BagIndex = 4;
    if (has_bagindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->bagindex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTaskEndRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTaskEndRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTaskEndRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTaskEndRequest::MergeFrom(const CMessageTaskEndRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_taskid(from.taskid());
    }
    if (from._has_bit(1)) {
      set_npcentityid(from.npcentityid());
    }
    if (from._has_bit(2)) {
      set_selectid(from.selectid());
    }
    if (from._has_bit(3)) {
      set_bagindex(from.bagindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTaskEndRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTaskEndRequest::CopyFrom(const CMessageTaskEndRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTaskEndRequest::Swap(CMessageTaskEndRequest* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(npcentityid_, other->npcentityid_);
    std::swap(selectid_, other->selectid_);
    std::swap(bagindex_, other->bagindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTaskEndRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTaskEndRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTaskEndRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTaskEndRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageTaskRefreshRequest::kTaskIDFieldNumber;
const int CMessageTaskRefreshRequest::kNpcEntityIDFieldNumber;
const int CMessageTaskRefreshRequest::kSelectIDFieldNumber;
const int CMessageTaskRefreshRequest::kRefreshItemIndexFieldNumber;
#endif  // !_MSC_VER

CMessageTaskRefreshRequest::CMessageTaskRefreshRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTaskRefreshRequest::InitAsDefaultInstance() {}

CMessageTaskRefreshRequest::CMessageTaskRefreshRequest(const CMessageTaskRefreshRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTaskRefreshRequest::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  npcentityid_ = 0u;
  selectid_ = 0u;
  refreshitemindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTaskRefreshRequest::~CMessageTaskRefreshRequest() {
  SharedDtor();
}

void CMessageTaskRefreshRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTaskRefreshRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTaskRefreshRequest_descriptor_;
}

const CMessageTaskRefreshRequest& CMessageTaskRefreshRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTaskRefreshRequest* CMessageTaskRefreshRequest::default_instance_ = NULL;

CMessageTaskRefreshRequest* CMessageTaskRefreshRequest::New() const {
  return new CMessageTaskRefreshRequest;
}

void CMessageTaskRefreshRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0u;
    npcentityid_ = 0u;
    selectid_ = 0u;
    refreshitemindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTaskRefreshRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TaskID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_NpcEntityID;
        break;
      }
      
      // optional uint32 NpcEntityID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcEntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcentityid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_SelectID;
        break;
      }
      
      // optional uint32 SelectID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SelectID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &selectid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_RefreshItemIndex;
        break;
      }
      
      // optional uint32 RefreshItemIndex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RefreshItemIndex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &refreshitemindex_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTaskRefreshRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTaskRefreshRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->taskid(), output);
  }
  
  // optional uint32 NpcEntityID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->npcentityid(), output);
  }
  
  // optional uint32 SelectID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->selectid(), output);
  }
  
  // optional uint32 RefreshItemIndex = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->refreshitemindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTaskRefreshRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->taskid(), target);
  }
  
  // optional uint32 NpcEntityID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->npcentityid(), target);
  }
  
  // optional uint32 SelectID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->selectid(), target);
  }
  
  // optional uint32 RefreshItemIndex = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->refreshitemindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTaskRefreshRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskid());
    }
    
    // optional uint32 NpcEntityID = 2;
    if (has_npcentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcentityid());
    }
    
    // optional uint32 SelectID = 3;
    if (has_selectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->selectid());
    }
    
    // optional uint32 RefreshItemIndex = 4;
    if (has_refreshitemindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->refreshitemindex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTaskRefreshRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTaskRefreshRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTaskRefreshRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTaskRefreshRequest::MergeFrom(const CMessageTaskRefreshRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_taskid(from.taskid());
    }
    if (from._has_bit(1)) {
      set_npcentityid(from.npcentityid());
    }
    if (from._has_bit(2)) {
      set_selectid(from.selectid());
    }
    if (from._has_bit(3)) {
      set_refreshitemindex(from.refreshitemindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTaskRefreshRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTaskRefreshRequest::CopyFrom(const CMessageTaskRefreshRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTaskRefreshRequest::Swap(CMessageTaskRefreshRequest* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(npcentityid_, other->npcentityid_);
    std::swap(selectid_, other->selectid_);
    std::swap(refreshitemindex_, other->refreshitemindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTaskRefreshRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTaskRefreshRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTaskRefreshRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTaskRefreshRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int LoopTaskStruct::kTodayMultiLoopsFieldNumber;
const int LoopTaskStruct::kWeekMultiLoopsFieldNumber;
const int LoopTaskStruct::kTotalMultiLoopsFieldNumber;
const int LoopTaskStruct::kLoopTaskIDFieldNumber;
const int LoopTaskStruct::kCompletedLoopsFieldNumber;
const int LoopTaskStruct::kNextLoopIDFieldNumber;
const int LoopTaskStruct::kLoopIDFieldNumber;
const int LoopTaskStruct::kWeekTotalMultiLoopsFieldNumber;
const int LoopTaskStruct::kAwardMultipleTodayFieldNumber;
#endif  // !_MSC_VER

LoopTaskStruct::LoopTaskStruct()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoopTaskStruct::InitAsDefaultInstance() {}

LoopTaskStruct::LoopTaskStruct(const LoopTaskStruct& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoopTaskStruct::SharedCtor() {
  _cached_size_ = 0;
  todaymultiloops_ = 0u;
  weekmultiloops_ = 0u;
  totalmultiloops_ = 0u;
  looptaskid_ = 0u;
  completedloops_ = 0u;
  nextloopid_ = 0u;
  loopid_ = 0u;
  weektotalmultiloops_ = 0u;
  awardmultipletoday_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoopTaskStruct::~LoopTaskStruct() {
  SharedDtor();
}

void LoopTaskStruct::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* LoopTaskStruct::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoopTaskStruct_descriptor_;
}

const LoopTaskStruct& LoopTaskStruct::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

LoopTaskStruct* LoopTaskStruct::default_instance_ = NULL;

LoopTaskStruct* LoopTaskStruct::New() const {
  return new LoopTaskStruct;
}

void LoopTaskStruct::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    todaymultiloops_ = 0u;
    weekmultiloops_ = 0u;
    totalmultiloops_ = 0u;
    looptaskid_ = 0u;
    completedloops_ = 0u;
    nextloopid_ = 0u;
    loopid_ = 0u;
    weektotalmultiloops_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    awardmultipletoday_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoopTaskStruct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TodayMultiLoops = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &todaymultiloops_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_WeekMultiLoops;
        break;
      }
      
      // optional uint32 WeekMultiLoops = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WeekMultiLoops:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &weekmultiloops_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_TotalMultiLoops;
        break;
      }
      
      // optional uint32 TotalMultiLoops = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TotalMultiLoops:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &totalmultiloops_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_LoopTaskID;
        break;
      }
      
      // optional uint32 LoopTaskID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LoopTaskID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &looptaskid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_CompletedLoops;
        break;
      }
      
      // optional uint32 CompletedLoops = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CompletedLoops:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &completedloops_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_NextLoopID;
        break;
      }
      
      // optional uint32 NextLoopID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NextLoopID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &nextloopid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_LoopID;
        break;
      }
      
      // optional uint32 LoopID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LoopID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &loopid_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_WeekTotalMultiLoops;
        break;
      }
      
      // optional uint32 WeekTotalMultiLoops = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WeekTotalMultiLoops:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &weektotalmultiloops_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_AwardMultipleToday;
        break;
      }
      
      // optional uint32 AwardMultipleToday = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AwardMultipleToday:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &awardmultipletoday_));
        _set_bit(8);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoopTaskStruct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    LoopTaskStruct::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TodayMultiLoops = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->todaymultiloops(), output);
  }
  
  // optional uint32 WeekMultiLoops = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->weekmultiloops(), output);
  }
  
  // optional uint32 TotalMultiLoops = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->totalmultiloops(), output);
  }
  
  // optional uint32 LoopTaskID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->looptaskid(), output);
  }
  
  // optional uint32 CompletedLoops = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->completedloops(), output);
  }
  
  // optional uint32 NextLoopID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->nextloopid(), output);
  }
  
  // optional uint32 LoopID = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->loopid(), output);
  }
  
  // optional uint32 WeekTotalMultiLoops = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->weektotalmultiloops(), output);
  }
  
  // optional uint32 AwardMultipleToday = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->awardmultipletoday(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoopTaskStruct::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TodayMultiLoops = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->todaymultiloops(), target);
  }
  
  // optional uint32 WeekMultiLoops = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->weekmultiloops(), target);
  }
  
  // optional uint32 TotalMultiLoops = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->totalmultiloops(), target);
  }
  
  // optional uint32 LoopTaskID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->looptaskid(), target);
  }
  
  // optional uint32 CompletedLoops = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->completedloops(), target);
  }
  
  // optional uint32 NextLoopID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->nextloopid(), target);
  }
  
  // optional uint32 LoopID = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->loopid(), target);
  }
  
  // optional uint32 WeekTotalMultiLoops = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->weektotalmultiloops(), target);
  }
  
  // optional uint32 AwardMultipleToday = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->awardmultipletoday(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoopTaskStruct::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TodayMultiLoops = 1;
    if (has_todaymultiloops()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->todaymultiloops());
    }
    
    // optional uint32 WeekMultiLoops = 2;
    if (has_weekmultiloops()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->weekmultiloops());
    }
    
    // optional uint32 TotalMultiLoops = 3;
    if (has_totalmultiloops()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->totalmultiloops());
    }
    
    // optional uint32 LoopTaskID = 4;
    if (has_looptaskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->looptaskid());
    }
    
    // optional uint32 CompletedLoops = 5;
    if (has_completedloops()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->completedloops());
    }
    
    // optional uint32 NextLoopID = 6;
    if (has_nextloopid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->nextloopid());
    }
    
    // optional uint32 LoopID = 7;
    if (has_loopid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->loopid());
    }
    
    // optional uint32 WeekTotalMultiLoops = 8;
    if (has_weektotalmultiloops()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->weektotalmultiloops());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 AwardMultipleToday = 9;
    if (has_awardmultipletoday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->awardmultipletoday());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void LoopTaskStruct::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoopTaskStruct* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoopTaskStruct*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoopTaskStruct::MergeFrom(const LoopTaskStruct& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_todaymultiloops(from.todaymultiloops());
    }
    if (from._has_bit(1)) {
      set_weekmultiloops(from.weekmultiloops());
    }
    if (from._has_bit(2)) {
      set_totalmultiloops(from.totalmultiloops());
    }
    if (from._has_bit(3)) {
      set_looptaskid(from.looptaskid());
    }
    if (from._has_bit(4)) {
      set_completedloops(from.completedloops());
    }
    if (from._has_bit(5)) {
      set_nextloopid(from.nextloopid());
    }
    if (from._has_bit(6)) {
      set_loopid(from.loopid());
    }
    if (from._has_bit(7)) {
      set_weektotalmultiloops(from.weektotalmultiloops());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_awardmultipletoday(from.awardmultipletoday());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoopTaskStruct::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoopTaskStruct::CopyFrom(const LoopTaskStruct& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoopTaskStruct::Swap(LoopTaskStruct* other) {
  if (other != this) {
    std::swap(todaymultiloops_, other->todaymultiloops_);
    std::swap(weekmultiloops_, other->weekmultiloops_);
    std::swap(totalmultiloops_, other->totalmultiloops_);
    std::swap(looptaskid_, other->looptaskid_);
    std::swap(completedloops_, other->completedloops_);
    std::swap(nextloopid_, other->nextloopid_);
    std::swap(loopid_, other->loopid_);
    std::swap(weektotalmultiloops_, other->weektotalmultiloops_);
    std::swap(awardmultipletoday_, other->awardmultipletoday_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool LoopTaskStruct::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* LoopTaskStruct::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* LoopTaskStruct::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return LoopTaskStruct_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int StorageTaskStruct::kTodayCompletesFieldNumber;
const int StorageTaskStruct::kTotalMultiLoopsFieldNumber;
const int StorageTaskStruct::kAwardMultipleTodayFieldNumber;
#endif  // !_MSC_VER

StorageTaskStruct::StorageTaskStruct()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StorageTaskStruct::InitAsDefaultInstance() {}

StorageTaskStruct::StorageTaskStruct(const StorageTaskStruct& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StorageTaskStruct::SharedCtor() {
  _cached_size_ = 0;
  todaycompletes_ = 0u;
  totalmultiloops_ = 0u;
  awardmultipletoday_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StorageTaskStruct::~StorageTaskStruct() {
  SharedDtor();
}

void StorageTaskStruct::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* StorageTaskStruct::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StorageTaskStruct_descriptor_;
}

const StorageTaskStruct& StorageTaskStruct::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

StorageTaskStruct* StorageTaskStruct::default_instance_ = NULL;

StorageTaskStruct* StorageTaskStruct::New() const {
  return new StorageTaskStruct;
}

void StorageTaskStruct::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    todaycompletes_ = 0u;
    totalmultiloops_ = 0u;
    awardmultipletoday_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StorageTaskStruct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TodayCompletes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &todaycompletes_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_TotalMultiLoops;
        break;
      }
      
      // optional uint32 TotalMultiLoops = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TotalMultiLoops:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &totalmultiloops_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_AwardMultipleToday;
        break;
      }
      
      // optional uint32 AwardMultipleToday = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AwardMultipleToday:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &awardmultipletoday_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StorageTaskStruct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    StorageTaskStruct::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TodayCompletes = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->todaycompletes(), output);
  }
  
  // optional uint32 TotalMultiLoops = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->totalmultiloops(), output);
  }
  
  // optional uint32 AwardMultipleToday = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->awardmultipletoday(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StorageTaskStruct::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TodayCompletes = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->todaycompletes(), target);
  }
  
  // optional uint32 TotalMultiLoops = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->totalmultiloops(), target);
  }
  
  // optional uint32 AwardMultipleToday = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->awardmultipletoday(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StorageTaskStruct::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TodayCompletes = 1;
    if (has_todaycompletes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->todaycompletes());
    }
    
    // optional uint32 TotalMultiLoops = 2;
    if (has_totalmultiloops()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->totalmultiloops());
    }
    
    // optional uint32 AwardMultipleToday = 3;
    if (has_awardmultipletoday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->awardmultipletoday());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void StorageTaskStruct::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StorageTaskStruct* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StorageTaskStruct*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StorageTaskStruct::MergeFrom(const StorageTaskStruct& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_todaycompletes(from.todaycompletes());
    }
    if (from._has_bit(1)) {
      set_totalmultiloops(from.totalmultiloops());
    }
    if (from._has_bit(2)) {
      set_awardmultipletoday(from.awardmultipletoday());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StorageTaskStruct::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageTaskStruct::CopyFrom(const StorageTaskStruct& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageTaskStruct::Swap(StorageTaskStruct* other) {
  if (other != this) {
    std::swap(todaycompletes_, other->todaycompletes_);
    std::swap(totalmultiloops_, other->totalmultiloops_);
    std::swap(awardmultipletoday_, other->awardmultipletoday_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool StorageTaskStruct::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* StorageTaskStruct::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* StorageTaskStruct::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return StorageTaskStruct_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageObtainTaskNotice::kTaskFieldNumber;
const int CMessageObtainTaskNotice::kLoopTaskFieldNumber;
#endif  // !_MSC_VER

CMessageObtainTaskNotice::CMessageObtainTaskNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageObtainTaskNotice::InitAsDefaultInstance() {  task_ = const_cast< ::TaskStruct*>(&::TaskStruct::default_instance());
  looptask_ = const_cast< ::LoopTaskStruct*>(&::LoopTaskStruct::default_instance());
}

CMessageObtainTaskNotice::CMessageObtainTaskNotice(const CMessageObtainTaskNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageObtainTaskNotice::SharedCtor() {
  _cached_size_ = 0;
  task_ = NULL;
  looptask_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageObtainTaskNotice::~CMessageObtainTaskNotice() {
  SharedDtor();
}

void CMessageObtainTaskNotice::SharedDtor() {
  if (this != default_instance_) {
    delete task_;
    delete looptask_;
  }
}

const ::google::protobuf::Descriptor* CMessageObtainTaskNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageObtainTaskNotice_descriptor_;
}

const CMessageObtainTaskNotice& CMessageObtainTaskNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageObtainTaskNotice* CMessageObtainTaskNotice::default_instance_ = NULL;

CMessageObtainTaskNotice* CMessageObtainTaskNotice::New() const {
  return new CMessageObtainTaskNotice;
}

void CMessageObtainTaskNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (task_ != NULL) task_->::TaskStruct::Clear();
    }
    if (_has_bit(1)) {
      if (looptask_ != NULL) looptask_->::LoopTaskStruct::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageObtainTaskNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .TaskStruct Task = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_task()));
        if (input->ExpectTag(18)) goto parse_LoopTask;
        break;
      }
      
      // optional .LoopTaskStruct LoopTask = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_LoopTask:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_looptask()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageObtainTaskNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageObtainTaskNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .TaskStruct Task = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->task(), output);
  }
  
  // optional .LoopTaskStruct LoopTask = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->looptask(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageObtainTaskNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TaskStruct Task = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->task(), target);
  }
  
  // optional .LoopTaskStruct LoopTask = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->looptask(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageObtainTaskNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TaskStruct Task = 1;
    if (has_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->task());
    }
    
    // optional .LoopTaskStruct LoopTask = 2;
    if (has_looptask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->looptask());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageObtainTaskNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageObtainTaskNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageObtainTaskNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageObtainTaskNotice::MergeFrom(const CMessageObtainTaskNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_task()->::TaskStruct::MergeFrom(from.task());
    }
    if (from._has_bit(1)) {
      mutable_looptask()->::LoopTaskStruct::MergeFrom(from.looptask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageObtainTaskNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageObtainTaskNotice::CopyFrom(const CMessageObtainTaskNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageObtainTaskNotice::Swap(CMessageObtainTaskNotice* other) {
  if (other != this) {
    std::swap(task_, other->task_);
    std::swap(looptask_, other->looptask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageObtainTaskNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageObtainTaskNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageObtainTaskNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageObtainTaskNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageTaskCompleteNotice::kTaskIDFieldNumber;
#endif  // !_MSC_VER

CMessageTaskCompleteNotice::CMessageTaskCompleteNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTaskCompleteNotice::InitAsDefaultInstance() {}

CMessageTaskCompleteNotice::CMessageTaskCompleteNotice(const CMessageTaskCompleteNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTaskCompleteNotice::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTaskCompleteNotice::~CMessageTaskCompleteNotice() {
  SharedDtor();
}

void CMessageTaskCompleteNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTaskCompleteNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTaskCompleteNotice_descriptor_;
}

const CMessageTaskCompleteNotice& CMessageTaskCompleteNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTaskCompleteNotice* CMessageTaskCompleteNotice::default_instance_ = NULL;

CMessageTaskCompleteNotice* CMessageTaskCompleteNotice::New() const {
  return new CMessageTaskCompleteNotice;
}

void CMessageTaskCompleteNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTaskCompleteNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TaskID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTaskCompleteNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTaskCompleteNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->taskid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTaskCompleteNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->taskid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTaskCompleteNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTaskCompleteNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTaskCompleteNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTaskCompleteNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTaskCompleteNotice::MergeFrom(const CMessageTaskCompleteNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTaskCompleteNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTaskCompleteNotice::CopyFrom(const CMessageTaskCompleteNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTaskCompleteNotice::Swap(CMessageTaskCompleteNotice* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTaskCompleteNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTaskCompleteNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTaskCompleteNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTaskCompleteNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageTaskEndNotice::kTaskIDFieldNumber;
const int CMessageTaskEndNotice::kStorageTaskFieldNumber;
#endif  // !_MSC_VER

CMessageTaskEndNotice::CMessageTaskEndNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTaskEndNotice::InitAsDefaultInstance() {  storagetask_ = const_cast< ::StorageTaskStruct*>(&::StorageTaskStruct::default_instance());
}

CMessageTaskEndNotice::CMessageTaskEndNotice(const CMessageTaskEndNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTaskEndNotice::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  storagetask_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTaskEndNotice::~CMessageTaskEndNotice() {
  SharedDtor();
}

void CMessageTaskEndNotice::SharedDtor() {
  if (this != default_instance_) {
    delete storagetask_;
  }
}

const ::google::protobuf::Descriptor* CMessageTaskEndNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTaskEndNotice_descriptor_;
}

const CMessageTaskEndNotice& CMessageTaskEndNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTaskEndNotice* CMessageTaskEndNotice::default_instance_ = NULL;

CMessageTaskEndNotice* CMessageTaskEndNotice::New() const {
  return new CMessageTaskEndNotice;
}

void CMessageTaskEndNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0u;
    if (_has_bit(1)) {
      if (storagetask_ != NULL) storagetask_->::StorageTaskStruct::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTaskEndNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TaskID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_StorageTask;
        break;
      }
      
      // optional .StorageTaskStruct StorageTask = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_StorageTask:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_storagetask()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTaskEndNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTaskEndNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->taskid(), output);
  }
  
  // optional .StorageTaskStruct StorageTask = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->storagetask(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTaskEndNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->taskid(), target);
  }
  
  // optional .StorageTaskStruct StorageTask = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->storagetask(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTaskEndNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskid());
    }
    
    // optional .StorageTaskStruct StorageTask = 2;
    if (has_storagetask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->storagetask());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTaskEndNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTaskEndNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTaskEndNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTaskEndNotice::MergeFrom(const CMessageTaskEndNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_taskid(from.taskid());
    }
    if (from._has_bit(1)) {
      mutable_storagetask()->::StorageTaskStruct::MergeFrom(from.storagetask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTaskEndNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTaskEndNotice::CopyFrom(const CMessageTaskEndNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTaskEndNotice::Swap(CMessageTaskEndNotice* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(storagetask_, other->storagetask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTaskEndNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTaskEndNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTaskEndNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTaskEndNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageUpdateTaskNotice::kTaskFieldNumber;
#endif  // !_MSC_VER

CMessageUpdateTaskNotice::CMessageUpdateTaskNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUpdateTaskNotice::InitAsDefaultInstance() {  task_ = const_cast< ::TaskStruct*>(&::TaskStruct::default_instance());
}

CMessageUpdateTaskNotice::CMessageUpdateTaskNotice(const CMessageUpdateTaskNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUpdateTaskNotice::SharedCtor() {
  _cached_size_ = 0;
  task_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUpdateTaskNotice::~CMessageUpdateTaskNotice() {
  SharedDtor();
}

void CMessageUpdateTaskNotice::SharedDtor() {
  if (this != default_instance_) {
    delete task_;
  }
}

const ::google::protobuf::Descriptor* CMessageUpdateTaskNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUpdateTaskNotice_descriptor_;
}

const CMessageUpdateTaskNotice& CMessageUpdateTaskNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageUpdateTaskNotice* CMessageUpdateTaskNotice::default_instance_ = NULL;

CMessageUpdateTaskNotice* CMessageUpdateTaskNotice::New() const {
  return new CMessageUpdateTaskNotice;
}

void CMessageUpdateTaskNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (task_ != NULL) task_->::TaskStruct::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUpdateTaskNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .TaskStruct Task = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_task()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUpdateTaskNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUpdateTaskNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .TaskStruct Task = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->task(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUpdateTaskNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TaskStruct Task = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->task(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUpdateTaskNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TaskStruct Task = 1;
    if (has_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->task());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUpdateTaskNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUpdateTaskNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUpdateTaskNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUpdateTaskNotice::MergeFrom(const CMessageUpdateTaskNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_task()->::TaskStruct::MergeFrom(from.task());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUpdateTaskNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUpdateTaskNotice::CopyFrom(const CMessageUpdateTaskNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUpdateTaskNotice::Swap(CMessageUpdateTaskNotice* other) {
  if (other != this) {
    std::swap(task_, other->task_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUpdateTaskNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUpdateTaskNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUpdateTaskNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUpdateTaskNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageResetTaskNotice::kTaskIDFieldNumber;
#endif  // !_MSC_VER

CMessageResetTaskNotice::CMessageResetTaskNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageResetTaskNotice::InitAsDefaultInstance() {}

CMessageResetTaskNotice::CMessageResetTaskNotice(const CMessageResetTaskNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageResetTaskNotice::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageResetTaskNotice::~CMessageResetTaskNotice() {
  SharedDtor();
}

void CMessageResetTaskNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageResetTaskNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageResetTaskNotice_descriptor_;
}

const CMessageResetTaskNotice& CMessageResetTaskNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageResetTaskNotice* CMessageResetTaskNotice::default_instance_ = NULL;

CMessageResetTaskNotice* CMessageResetTaskNotice::New() const {
  return new CMessageResetTaskNotice;
}

void CMessageResetTaskNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageResetTaskNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TaskID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageResetTaskNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageResetTaskNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->taskid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageResetTaskNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->taskid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageResetTaskNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageResetTaskNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageResetTaskNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageResetTaskNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageResetTaskNotice::MergeFrom(const CMessageResetTaskNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageResetTaskNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageResetTaskNotice::CopyFrom(const CMessageResetTaskNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageResetTaskNotice::Swap(CMessageResetTaskNotice* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageResetTaskNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageResetTaskNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageResetTaskNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageResetTaskNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageAbortTaskRequest::kTaskIDFieldNumber;
const int CMessageAbortTaskRequest::kNpcEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageAbortTaskRequest::CMessageAbortTaskRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageAbortTaskRequest::InitAsDefaultInstance() {}

CMessageAbortTaskRequest::CMessageAbortTaskRequest(const CMessageAbortTaskRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageAbortTaskRequest::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  npcentityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageAbortTaskRequest::~CMessageAbortTaskRequest() {
  SharedDtor();
}

void CMessageAbortTaskRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageAbortTaskRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageAbortTaskRequest_descriptor_;
}

const CMessageAbortTaskRequest& CMessageAbortTaskRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageAbortTaskRequest* CMessageAbortTaskRequest::default_instance_ = NULL;

CMessageAbortTaskRequest* CMessageAbortTaskRequest::New() const {
  return new CMessageAbortTaskRequest;
}

void CMessageAbortTaskRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0u;
    npcentityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageAbortTaskRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TaskID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_NpcEntityID;
        break;
      }
      
      // optional uint32 NpcEntityID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcEntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcentityid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageAbortTaskRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageAbortTaskRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->taskid(), output);
  }
  
  // optional uint32 NpcEntityID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->npcentityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageAbortTaskRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->taskid(), target);
  }
  
  // optional uint32 NpcEntityID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->npcentityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageAbortTaskRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskid());
    }
    
    // optional uint32 NpcEntityID = 2;
    if (has_npcentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcentityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageAbortTaskRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageAbortTaskRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageAbortTaskRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageAbortTaskRequest::MergeFrom(const CMessageAbortTaskRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_taskid(from.taskid());
    }
    if (from._has_bit(1)) {
      set_npcentityid(from.npcentityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageAbortTaskRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAbortTaskRequest::CopyFrom(const CMessageAbortTaskRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAbortTaskRequest::Swap(CMessageAbortTaskRequest* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(npcentityid_, other->npcentityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageAbortTaskRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageAbortTaskRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageAbortTaskRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageAbortTaskRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageTaskListNotice::_default_completedbuf_;
#ifndef _MSC_VER
const int CMessageTaskListNotice::kCompletedBufFieldNumber;
const int CMessageTaskListNotice::kTaskNumFieldNumber;
const int CMessageTaskListNotice::kLoopTaskFieldNumber;
const int CMessageTaskListNotice::kTasksFieldNumber;
const int CMessageTaskListNotice::kCompletedTasksFieldNumber;
const int CMessageTaskListNotice::kStorageTaskFieldNumber;
const int CMessageTaskListNotice::kChairManSectionIDsFieldNumber;
const int CMessageTaskListNotice::kRepeateTasksFieldNumber;
const int CMessageTaskListNotice::kEndTimeFieldNumber;
#endif  // !_MSC_VER

CMessageTaskListNotice::CMessageTaskListNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTaskListNotice::InitAsDefaultInstance() {  looptask_ = const_cast< ::LoopTaskStruct*>(&::LoopTaskStruct::default_instance());
  storagetask_ = const_cast< ::StorageTaskStruct*>(&::StorageTaskStruct::default_instance());
}

CMessageTaskListNotice::CMessageTaskListNotice(const CMessageTaskListNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTaskListNotice::SharedCtor() {
  _cached_size_ = 0;
  completedbuf_ = const_cast< ::std::string*>(&_default_completedbuf_);
  tasknum_ = 0u;
  looptask_ = NULL;
  storagetask_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTaskListNotice::~CMessageTaskListNotice() {
  SharedDtor();
}

void CMessageTaskListNotice::SharedDtor() {
  if (completedbuf_ != &_default_completedbuf_) {
    delete completedbuf_;
  }
  if (this != default_instance_) {
    delete looptask_;
    delete storagetask_;
  }
}

const ::google::protobuf::Descriptor* CMessageTaskListNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTaskListNotice_descriptor_;
}

const CMessageTaskListNotice& CMessageTaskListNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTaskListNotice* CMessageTaskListNotice::default_instance_ = NULL;

CMessageTaskListNotice* CMessageTaskListNotice::New() const {
  return new CMessageTaskListNotice;
}

void CMessageTaskListNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (completedbuf_ != &_default_completedbuf_) {
        completedbuf_->clear();
      }
    }
    tasknum_ = 0u;
    if (_has_bit(2)) {
      if (looptask_ != NULL) looptask_->::LoopTaskStruct::Clear();
    }
    if (_has_bit(5)) {
      if (storagetask_ != NULL) storagetask_->::StorageTaskStruct::Clear();
    }
  }
  tasks_.Clear();
  completedtasks_.Clear();
  chairmansectionids_.Clear();
  repeatetasks_.Clear();
  endtime_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTaskListNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional bytes CompletedBuf = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_completedbuf()));
        if (input->ExpectTag(16)) goto parse_TaskNum;
        break;
      }
      
      // optional uint32 TaskNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TaskNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tasknum_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_LoopTask;
        break;
      }
      
      // optional .LoopTaskStruct LoopTask = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_LoopTask:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_looptask()));
        if (input->ExpectTag(34)) goto parse_Tasks;
        break;
      }
      
      // repeated .TaskStruct Tasks = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Tasks:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_tasks()));
        if (input->ExpectTag(34)) goto parse_Tasks;
        if (input->ExpectTag(40)) goto parse_CompletedTasks;
        break;
      }
      
      // repeated uint32 CompletedTasks = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CompletedTasks:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_completedtasks(value);
        if (input->ExpectTag(40)) goto parse_CompletedTasks;
        if (input->ExpectTag(50)) goto parse_StorageTask;
        break;
      }
      
      // optional .StorageTaskStruct StorageTask = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_StorageTask:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_storagetask()));
        if (input->ExpectTag(56)) goto parse_ChairManSectionIDs;
        break;
      }
      
      // repeated uint32 ChairManSectionIDs = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ChairManSectionIDs:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_chairmansectionids(value);
        if (input->ExpectTag(56)) goto parse_ChairManSectionIDs;
        if (input->ExpectTag(64)) goto parse_RepeateTasks;
        break;
      }
      
      // repeated uint32 RepeateTasks = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RepeateTasks:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_repeatetasks(value);
        if (input->ExpectTag(64)) goto parse_RepeateTasks;
        if (input->ExpectTag(72)) goto parse_EndTime;
        break;
      }
      
      // repeated uint32 EndTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EndTime:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_endtime(value);
        if (input->ExpectTag(72)) goto parse_EndTime;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTaskListNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTaskListNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional bytes CompletedBuf = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->completedbuf(), output);
  }
  
  // optional uint32 TaskNum = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->tasknum(), output);
  }
  
  // optional .LoopTaskStruct LoopTask = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->looptask(), output);
  }
  
  // repeated .TaskStruct Tasks = 4;
  for (int i = 0; i < this->tasks_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->tasks(i), output);
  }
  
  // repeated uint32 CompletedTasks = 5;
  for (int i = 0; i < this->completedtasks_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->completedtasks(i), output);
  }
  
  // optional .StorageTaskStruct StorageTask = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(6, this->storagetask(), output);
  }
  
  // repeated uint32 ChairManSectionIDs = 7;
  for (int i = 0; i < this->chairmansectionids_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->chairmansectionids(i), output);
  }
  
  // repeated uint32 RepeateTasks = 8;
  for (int i = 0; i < this->repeatetasks_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->repeatetasks(i), output);
  }
  
  // repeated uint32 EndTime = 9;
  for (int i = 0; i < this->endtime_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->endtime(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTaskListNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes CompletedBuf = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->completedbuf(), target);
  }
  
  // optional uint32 TaskNum = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->tasknum(), target);
  }
  
  // optional .LoopTaskStruct LoopTask = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->looptask(), target);
  }
  
  // repeated .TaskStruct Tasks = 4;
  for (int i = 0; i < this->tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(4, this->tasks(i), target);
  }
  
  // repeated uint32 CompletedTasks = 5;
  for (int i = 0; i < this->completedtasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->completedtasks(i), target);
  }
  
  // optional .StorageTaskStruct StorageTask = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(6, this->storagetask(), target);
  }
  
  // repeated uint32 ChairManSectionIDs = 7;
  for (int i = 0; i < this->chairmansectionids_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->chairmansectionids(i), target);
  }
  
  // repeated uint32 RepeateTasks = 8;
  for (int i = 0; i < this->repeatetasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->repeatetasks(i), target);
  }
  
  // repeated uint32 EndTime = 9;
  for (int i = 0; i < this->endtime_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->endtime(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTaskListNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes CompletedBuf = 1;
    if (has_completedbuf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->completedbuf());
    }
    
    // optional uint32 TaskNum = 2;
    if (has_tasknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tasknum());
    }
    
    // optional .LoopTaskStruct LoopTask = 3;
    if (has_looptask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->looptask());
    }
    
    // optional .StorageTaskStruct StorageTask = 6;
    if (has_storagetask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->storagetask());
    }
    
  }
  // repeated .TaskStruct Tasks = 4;
  total_size += 1 * this->tasks_size();
  for (int i = 0; i < this->tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->tasks(i));
  }
  
  // repeated uint32 CompletedTasks = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->completedtasks_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->completedtasks(i));
    }
    total_size += 1 * this->completedtasks_size() + data_size;
  }
  
  // repeated uint32 ChairManSectionIDs = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->chairmansectionids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->chairmansectionids(i));
    }
    total_size += 1 * this->chairmansectionids_size() + data_size;
  }
  
  // repeated uint32 RepeateTasks = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->repeatetasks_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->repeatetasks(i));
    }
    total_size += 1 * this->repeatetasks_size() + data_size;
  }
  
  // repeated uint32 EndTime = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->endtime_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->endtime(i));
    }
    total_size += 1 * this->endtime_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTaskListNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTaskListNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTaskListNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTaskListNotice::MergeFrom(const CMessageTaskListNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  tasks_.MergeFrom(from.tasks_);
  completedtasks_.MergeFrom(from.completedtasks_);
  chairmansectionids_.MergeFrom(from.chairmansectionids_);
  repeatetasks_.MergeFrom(from.repeatetasks_);
  endtime_.MergeFrom(from.endtime_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_completedbuf(from.completedbuf());
    }
    if (from._has_bit(1)) {
      set_tasknum(from.tasknum());
    }
    if (from._has_bit(2)) {
      mutable_looptask()->::LoopTaskStruct::MergeFrom(from.looptask());
    }
    if (from._has_bit(5)) {
      mutable_storagetask()->::StorageTaskStruct::MergeFrom(from.storagetask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTaskListNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTaskListNotice::CopyFrom(const CMessageTaskListNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTaskListNotice::Swap(CMessageTaskListNotice* other) {
  if (other != this) {
    std::swap(completedbuf_, other->completedbuf_);
    std::swap(tasknum_, other->tasknum_);
    std::swap(looptask_, other->looptask_);
    tasks_.Swap(&other->tasks_);
    completedtasks_.Swap(&other->completedtasks_);
    std::swap(storagetask_, other->storagetask_);
    chairmansectionids_.Swap(&other->chairmansectionids_);
    repeatetasks_.Swap(&other->repeatetasks_);
    endtime_.Swap(&other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTaskListNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTaskListNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTaskListNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTaskListNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int NpcTaskList::kExtendTaskIDFieldNumber;
const int NpcTaskList::kCallbackNumberFieldNumber;
const int NpcTaskList::kExtendNumberFieldNumber;
const int NpcTaskList::kNpcIDFieldNumber;
const int NpcTaskList::kCallbackTaskIDFieldNumber;
#endif  // !_MSC_VER

NpcTaskList::NpcTaskList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NpcTaskList::InitAsDefaultInstance() {}

NpcTaskList::NpcTaskList(const NpcTaskList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NpcTaskList::SharedCtor() {
  _cached_size_ = 0;
  callbacknumber_ = 0u;
  extendnumber_ = 0u;
  npcid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NpcTaskList::~NpcTaskList() {
  SharedDtor();
}

void NpcTaskList::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* NpcTaskList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NpcTaskList_descriptor_;
}

const NpcTaskList& NpcTaskList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

NpcTaskList* NpcTaskList::default_instance_ = NULL;

NpcTaskList* NpcTaskList::New() const {
  return new NpcTaskList;
}

void NpcTaskList::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    callbacknumber_ = 0u;
    extendnumber_ = 0u;
    npcid_ = 0u;
  }
  extendtaskid_.Clear();
  callbacktaskid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NpcTaskList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated uint32 ExtendTaskID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExtendTaskID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_extendtaskid(value);
        if (input->ExpectTag(8)) goto parse_ExtendTaskID;
        if (input->ExpectTag(16)) goto parse_CallbackNumber;
        break;
      }
      
      // optional uint32 CallbackNumber = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CallbackNumber:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &callbacknumber_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_ExtendNumber;
        break;
      }
      
      // optional uint32 ExtendNumber = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExtendNumber:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &extendnumber_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_NpcID;
        break;
      }
      
      // optional uint32 NpcID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_CallbackTaskID;
        break;
      }
      
      // repeated uint32 CallbackTaskID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CallbackTaskID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_callbacktaskid(value);
        if (input->ExpectTag(40)) goto parse_CallbackTaskID;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NpcTaskList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    NpcTaskList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated uint32 ExtendTaskID = 1;
  for (int i = 0; i < this->extendtaskid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->extendtaskid(i), output);
  }
  
  // optional uint32 CallbackNumber = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->callbacknumber(), output);
  }
  
  // optional uint32 ExtendNumber = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->extendnumber(), output);
  }
  
  // optional uint32 NpcID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->npcid(), output);
  }
  
  // repeated uint32 CallbackTaskID = 5;
  for (int i = 0; i < this->callbacktaskid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->callbacktaskid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NpcTaskList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 ExtendTaskID = 1;
  for (int i = 0; i < this->extendtaskid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->extendtaskid(i), target);
  }
  
  // optional uint32 CallbackNumber = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->callbacknumber(), target);
  }
  
  // optional uint32 ExtendNumber = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->extendnumber(), target);
  }
  
  // optional uint32 NpcID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->npcid(), target);
  }
  
  // repeated uint32 CallbackTaskID = 5;
  for (int i = 0; i < this->callbacktaskid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->callbacktaskid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NpcTaskList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 CallbackNumber = 2;
    if (has_callbacknumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->callbacknumber());
    }
    
    // optional uint32 ExtendNumber = 3;
    if (has_extendnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->extendnumber());
    }
    
    // optional uint32 NpcID = 4;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
  }
  // repeated uint32 ExtendTaskID = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->extendtaskid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->extendtaskid(i));
    }
    total_size += 1 * this->extendtaskid_size() + data_size;
  }
  
  // repeated uint32 CallbackTaskID = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->callbacktaskid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->callbacktaskid(i));
    }
    total_size += 1 * this->callbacktaskid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void NpcTaskList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NpcTaskList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NpcTaskList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NpcTaskList::MergeFrom(const NpcTaskList& from) {
  GOOGLE_CHECK_NE(&from, this);
  extendtaskid_.MergeFrom(from.extendtaskid_);
  callbacktaskid_.MergeFrom(from.callbacktaskid_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_callbacknumber(from.callbacknumber());
    }
    if (from._has_bit(2)) {
      set_extendnumber(from.extendnumber());
    }
    if (from._has_bit(3)) {
      set_npcid(from.npcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NpcTaskList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NpcTaskList::CopyFrom(const NpcTaskList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NpcTaskList::Swap(NpcTaskList* other) {
  if (other != this) {
    extendtaskid_.Swap(&other->extendtaskid_);
    std::swap(callbacknumber_, other->callbacknumber_);
    std::swap(extendnumber_, other->extendnumber_);
    std::swap(npcid_, other->npcid_);
    callbacktaskid_.Swap(&other->callbacktaskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool NpcTaskList::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* NpcTaskList::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* NpcTaskList::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return NpcTaskList_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageNpcTaskListNotice::kListFieldNumber;
#endif  // !_MSC_VER

CMessageNpcTaskListNotice::CMessageNpcTaskListNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageNpcTaskListNotice::InitAsDefaultInstance() {  list_ = const_cast< ::NpcTaskList*>(&::NpcTaskList::default_instance());
}

CMessageNpcTaskListNotice::CMessageNpcTaskListNotice(const CMessageNpcTaskListNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageNpcTaskListNotice::SharedCtor() {
  _cached_size_ = 0;
  list_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageNpcTaskListNotice::~CMessageNpcTaskListNotice() {
  SharedDtor();
}

void CMessageNpcTaskListNotice::SharedDtor() {
  if (this != default_instance_) {
    delete list_;
  }
}

const ::google::protobuf::Descriptor* CMessageNpcTaskListNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageNpcTaskListNotice_descriptor_;
}

const CMessageNpcTaskListNotice& CMessageNpcTaskListNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageNpcTaskListNotice* CMessageNpcTaskListNotice::default_instance_ = NULL;

CMessageNpcTaskListNotice* CMessageNpcTaskListNotice::New() const {
  return new CMessageNpcTaskListNotice;
}

void CMessageNpcTaskListNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (list_ != NULL) list_->::NpcTaskList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageNpcTaskListNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .NpcTaskList List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_list()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageNpcTaskListNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageNpcTaskListNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .NpcTaskList List = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->list(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageNpcTaskListNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NpcTaskList List = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->list(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageNpcTaskListNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NpcTaskList List = 1;
    if (has_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->list());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageNpcTaskListNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageNpcTaskListNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageNpcTaskListNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageNpcTaskListNotice::MergeFrom(const CMessageNpcTaskListNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_list()->::NpcTaskList::MergeFrom(from.list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageNpcTaskListNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageNpcTaskListNotice::CopyFrom(const CMessageNpcTaskListNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageNpcTaskListNotice::Swap(CMessageNpcTaskListNotice* other) {
  if (other != this) {
    std::swap(list_, other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageNpcTaskListNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageNpcTaskListNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageNpcTaskListNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageNpcTaskListNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageNpcTaskTipNotice::kNpcEntityIDFieldNumber;
const int CMessageNpcTaskTipNotice::kTipFieldNumber;
const int CMessageNpcTaskTipNotice::kIdTypeFieldNumber;
#endif  // !_MSC_VER

CMessageNpcTaskTipNotice::CMessageNpcTaskTipNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageNpcTaskTipNotice::InitAsDefaultInstance() {}

CMessageNpcTaskTipNotice::CMessageNpcTaskTipNotice(const CMessageNpcTaskTipNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageNpcTaskTipNotice::SharedCtor() {
  _cached_size_ = 0;
  idtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageNpcTaskTipNotice::~CMessageNpcTaskTipNotice() {
  SharedDtor();
}

void CMessageNpcTaskTipNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageNpcTaskTipNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageNpcTaskTipNotice_descriptor_;
}

const CMessageNpcTaskTipNotice& CMessageNpcTaskTipNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageNpcTaskTipNotice* CMessageNpcTaskTipNotice::default_instance_ = NULL;

CMessageNpcTaskTipNotice* CMessageNpcTaskTipNotice::New() const {
  return new CMessageNpcTaskTipNotice;
}

void CMessageNpcTaskTipNotice::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    idtype_ = 0u;
  }
  npcentityid_.Clear();
  tip_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageNpcTaskTipNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated uint32 NpcEntityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcEntityID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_npcentityid(value);
        if (input->ExpectTag(8)) goto parse_NpcEntityID;
        if (input->ExpectTag(16)) goto parse_Tip;
        break;
      }
      
      // repeated uint32 Tip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Tip:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_tip(value);
        if (input->ExpectTag(16)) goto parse_Tip;
        if (input->ExpectTag(24)) goto parse_IdType;
        break;
      }
      
      // optional uint32 IdType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IdType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &idtype_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageNpcTaskTipNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageNpcTaskTipNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated uint32 NpcEntityID = 1;
  for (int i = 0; i < this->npcentityid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->npcentityid(i), output);
  }
  
  // repeated uint32 Tip = 2;
  for (int i = 0; i < this->tip_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->tip(i), output);
  }
  
  // optional uint32 IdType = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->idtype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageNpcTaskTipNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 NpcEntityID = 1;
  for (int i = 0; i < this->npcentityid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->npcentityid(i), target);
  }
  
  // repeated uint32 Tip = 2;
  for (int i = 0; i < this->tip_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->tip(i), target);
  }
  
  // optional uint32 IdType = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->idtype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageNpcTaskTipNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 IdType = 3;
    if (has_idtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->idtype());
    }
    
  }
  // repeated uint32 NpcEntityID = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->npcentityid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->npcentityid(i));
    }
    total_size += 1 * this->npcentityid_size() + data_size;
  }
  
  // repeated uint32 Tip = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->tip_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->tip(i));
    }
    total_size += 1 * this->tip_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageNpcTaskTipNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageNpcTaskTipNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageNpcTaskTipNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageNpcTaskTipNotice::MergeFrom(const CMessageNpcTaskTipNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  npcentityid_.MergeFrom(from.npcentityid_);
  tip_.MergeFrom(from.tip_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from._has_bit(2)) {
      set_idtype(from.idtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageNpcTaskTipNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageNpcTaskTipNotice::CopyFrom(const CMessageNpcTaskTipNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageNpcTaskTipNotice::Swap(CMessageNpcTaskTipNotice* other) {
  if (other != this) {
    npcentityid_.Swap(&other->npcentityid_);
    tip_.Swap(&other->tip_);
    std::swap(idtype_, other->idtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageNpcTaskTipNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageNpcTaskTipNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageNpcTaskTipNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageNpcTaskTipNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMessagePlayerSearchRequest::CMessagePlayerSearchRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePlayerSearchRequest::InitAsDefaultInstance() {}

CMessagePlayerSearchRequest::CMessagePlayerSearchRequest(const CMessagePlayerSearchRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePlayerSearchRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePlayerSearchRequest::~CMessagePlayerSearchRequest() {
  SharedDtor();
}

void CMessagePlayerSearchRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessagePlayerSearchRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerSearchRequest_descriptor_;
}

const CMessagePlayerSearchRequest& CMessagePlayerSearchRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePlayerSearchRequest* CMessagePlayerSearchRequest::default_instance_ = NULL;

CMessagePlayerSearchRequest* CMessagePlayerSearchRequest::New() const {
  return new CMessagePlayerSearchRequest;
}

void CMessagePlayerSearchRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePlayerSearchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMessagePlayerSearchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePlayerSearchRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePlayerSearchRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePlayerSearchRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePlayerSearchRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePlayerSearchRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePlayerSearchRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePlayerSearchRequest::MergeFrom(const CMessagePlayerSearchRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePlayerSearchRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerSearchRequest::CopyFrom(const CMessagePlayerSearchRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerSearchRequest::Swap(CMessagePlayerSearchRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePlayerSearchRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePlayerSearchRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePlayerSearchRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerSearchRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessagePlayerSearchResponse::kTaskIDsFieldNumber;
#endif  // !_MSC_VER

CMessagePlayerSearchResponse::CMessagePlayerSearchResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePlayerSearchResponse::InitAsDefaultInstance() {}

CMessagePlayerSearchResponse::CMessagePlayerSearchResponse(const CMessagePlayerSearchResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePlayerSearchResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePlayerSearchResponse::~CMessagePlayerSearchResponse() {
  SharedDtor();
}

void CMessagePlayerSearchResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessagePlayerSearchResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerSearchResponse_descriptor_;
}

const CMessagePlayerSearchResponse& CMessagePlayerSearchResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePlayerSearchResponse* CMessagePlayerSearchResponse::default_instance_ = NULL;

CMessagePlayerSearchResponse* CMessagePlayerSearchResponse::New() const {
  return new CMessagePlayerSearchResponse;
}

void CMessagePlayerSearchResponse::Clear() {
  taskids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePlayerSearchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated uint32 TaskIDs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TaskIDs:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_taskids(value);
        if (input->ExpectTag(8)) goto parse_TaskIDs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePlayerSearchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePlayerSearchResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated uint32 TaskIDs = 1;
  for (int i = 0; i < this->taskids_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->taskids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePlayerSearchResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 TaskIDs = 1;
  for (int i = 0; i < this->taskids_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->taskids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePlayerSearchResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 TaskIDs = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->taskids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->taskids(i));
    }
    total_size += 1 * this->taskids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePlayerSearchResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePlayerSearchResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePlayerSearchResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePlayerSearchResponse::MergeFrom(const CMessagePlayerSearchResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  taskids_.MergeFrom(from.taskids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePlayerSearchResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerSearchResponse::CopyFrom(const CMessagePlayerSearchResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerSearchResponse::Swap(CMessagePlayerSearchResponse* other) {
  if (other != this) {
    taskids_.Swap(&other->taskids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePlayerSearchResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePlayerSearchResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePlayerSearchResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerSearchResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessagePlayerInviteTaskRequest::kPlayerNamesFieldNumber;
const int CMessagePlayerInviteTaskRequest::kTaskIDFieldNumber;
#endif  // !_MSC_VER

CMessagePlayerInviteTaskRequest::CMessagePlayerInviteTaskRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePlayerInviteTaskRequest::InitAsDefaultInstance() {}

CMessagePlayerInviteTaskRequest::CMessagePlayerInviteTaskRequest(const CMessagePlayerInviteTaskRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePlayerInviteTaskRequest::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePlayerInviteTaskRequest::~CMessagePlayerInviteTaskRequest() {
  SharedDtor();
}

void CMessagePlayerInviteTaskRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessagePlayerInviteTaskRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerInviteTaskRequest_descriptor_;
}

const CMessagePlayerInviteTaskRequest& CMessagePlayerInviteTaskRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePlayerInviteTaskRequest* CMessagePlayerInviteTaskRequest::default_instance_ = NULL;

CMessagePlayerInviteTaskRequest* CMessagePlayerInviteTaskRequest::New() const {
  return new CMessagePlayerInviteTaskRequest;
}

void CMessagePlayerInviteTaskRequest::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    taskid_ = 0u;
  }
  playernames_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePlayerInviteTaskRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated string PlayerNames = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_PlayerNames:
        DO_(::google::protobuf::internal::WireFormat::ReadString(
             input, add_playernames()));
        if (input->ExpectTag(10)) goto parse_PlayerNames;
        if (input->ExpectTag(16)) goto parse_TaskID;
        break;
      }
      
      // optional uint32 TaskID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TaskID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePlayerInviteTaskRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePlayerInviteTaskRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated string PlayerNames = 1;
  for (int i = 0; i < this->playernames_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->playernames(i), output);
  }
  
  // optional uint32 TaskID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->taskid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePlayerInviteTaskRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string PlayerNames = 1;
  for (int i = 0; i < this->playernames_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->playernames(i), target);
  }
  
  // optional uint32 TaskID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->taskid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePlayerInviteTaskRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 TaskID = 2;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskid());
    }
    
  }
  // repeated string PlayerNames = 1;
  total_size += 1 * this->playernames_size();
  for (int i = 0; i < this->playernames_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormat::StringSize(
      this->playernames(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePlayerInviteTaskRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePlayerInviteTaskRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePlayerInviteTaskRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePlayerInviteTaskRequest::MergeFrom(const CMessagePlayerInviteTaskRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  playernames_.MergeFrom(from.playernames_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePlayerInviteTaskRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerInviteTaskRequest::CopyFrom(const CMessagePlayerInviteTaskRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerInviteTaskRequest::Swap(CMessagePlayerInviteTaskRequest* other) {
  if (other != this) {
    playernames_.Swap(&other->playernames_);
    std::swap(taskid_, other->taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePlayerInviteTaskRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePlayerInviteTaskRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePlayerInviteTaskRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerInviteTaskRequest_reflection_;
}

// ===================================================================

const ::std::string CMessagePlayerInviteTaskNotice::_default_srcplayername_;
#ifndef _MSC_VER
const int CMessagePlayerInviteTaskNotice::kTaskIDFieldNumber;
const int CMessagePlayerInviteTaskNotice::kSrcPlayerNameFieldNumber;
#endif  // !_MSC_VER

CMessagePlayerInviteTaskNotice::CMessagePlayerInviteTaskNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePlayerInviteTaskNotice::InitAsDefaultInstance() {}

CMessagePlayerInviteTaskNotice::CMessagePlayerInviteTaskNotice(const CMessagePlayerInviteTaskNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePlayerInviteTaskNotice::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  srcplayername_ = const_cast< ::std::string*>(&_default_srcplayername_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePlayerInviteTaskNotice::~CMessagePlayerInviteTaskNotice() {
  SharedDtor();
}

void CMessagePlayerInviteTaskNotice::SharedDtor() {
  if (srcplayername_ != &_default_srcplayername_) {
    delete srcplayername_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessagePlayerInviteTaskNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerInviteTaskNotice_descriptor_;
}

const CMessagePlayerInviteTaskNotice& CMessagePlayerInviteTaskNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePlayerInviteTaskNotice* CMessagePlayerInviteTaskNotice::default_instance_ = NULL;

CMessagePlayerInviteTaskNotice* CMessagePlayerInviteTaskNotice::New() const {
  return new CMessagePlayerInviteTaskNotice;
}

void CMessagePlayerInviteTaskNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0u;
    if (_has_bit(1)) {
      if (srcplayername_ != &_default_srcplayername_) {
        srcplayername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePlayerInviteTaskNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TaskID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_SrcPlayerName;
        break;
      }
      
      // optional string SrcPlayerName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SrcPlayerName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_srcplayername()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePlayerInviteTaskNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePlayerInviteTaskNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->taskid(), output);
  }
  
  // optional string SrcPlayerName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->srcplayername(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePlayerInviteTaskNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->taskid(), target);
  }
  
  // optional string SrcPlayerName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->srcplayername(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePlayerInviteTaskNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskid());
    }
    
    // optional string SrcPlayerName = 2;
    if (has_srcplayername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->srcplayername());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePlayerInviteTaskNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePlayerInviteTaskNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePlayerInviteTaskNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePlayerInviteTaskNotice::MergeFrom(const CMessagePlayerInviteTaskNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_taskid(from.taskid());
    }
    if (from._has_bit(1)) {
      set_srcplayername(from.srcplayername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePlayerInviteTaskNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerInviteTaskNotice::CopyFrom(const CMessagePlayerInviteTaskNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerInviteTaskNotice::Swap(CMessagePlayerInviteTaskNotice* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(srcplayername_, other->srcplayername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePlayerInviteTaskNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePlayerInviteTaskNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePlayerInviteTaskNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerInviteTaskNotice_reflection_;
}

// ===================================================================

const ::std::string CMessagePlayerInviteTaskResponseRequest::_default_srcplayername_;
#ifndef _MSC_VER
const int CMessagePlayerInviteTaskResponseRequest::kTaskIDFieldNumber;
const int CMessagePlayerInviteTaskResponseRequest::kAgreeFlagFieldNumber;
const int CMessagePlayerInviteTaskResponseRequest::kSrcPlayerNameFieldNumber;
#endif  // !_MSC_VER

CMessagePlayerInviteTaskResponseRequest::CMessagePlayerInviteTaskResponseRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePlayerInviteTaskResponseRequest::InitAsDefaultInstance() {}

CMessagePlayerInviteTaskResponseRequest::CMessagePlayerInviteTaskResponseRequest(const CMessagePlayerInviteTaskResponseRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePlayerInviteTaskResponseRequest::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  agreeflag_ = 0u;
  srcplayername_ = const_cast< ::std::string*>(&_default_srcplayername_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePlayerInviteTaskResponseRequest::~CMessagePlayerInviteTaskResponseRequest() {
  SharedDtor();
}

void CMessagePlayerInviteTaskResponseRequest::SharedDtor() {
  if (srcplayername_ != &_default_srcplayername_) {
    delete srcplayername_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessagePlayerInviteTaskResponseRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerInviteTaskResponseRequest_descriptor_;
}

const CMessagePlayerInviteTaskResponseRequest& CMessagePlayerInviteTaskResponseRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePlayerInviteTaskResponseRequest* CMessagePlayerInviteTaskResponseRequest::default_instance_ = NULL;

CMessagePlayerInviteTaskResponseRequest* CMessagePlayerInviteTaskResponseRequest::New() const {
  return new CMessagePlayerInviteTaskResponseRequest;
}

void CMessagePlayerInviteTaskResponseRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0u;
    agreeflag_ = 0u;
    if (_has_bit(2)) {
      if (srcplayername_ != &_default_srcplayername_) {
        srcplayername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePlayerInviteTaskResponseRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TaskID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_AgreeFlag;
        break;
      }
      
      // optional uint32 AgreeFlag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AgreeFlag:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &agreeflag_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_SrcPlayerName;
        break;
      }
      
      // optional string SrcPlayerName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SrcPlayerName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_srcplayername()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePlayerInviteTaskResponseRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePlayerInviteTaskResponseRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->taskid(), output);
  }
  
  // optional uint32 AgreeFlag = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->agreeflag(), output);
  }
  
  // optional string SrcPlayerName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->srcplayername(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePlayerInviteTaskResponseRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->taskid(), target);
  }
  
  // optional uint32 AgreeFlag = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->agreeflag(), target);
  }
  
  // optional string SrcPlayerName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->srcplayername(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePlayerInviteTaskResponseRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskid());
    }
    
    // optional uint32 AgreeFlag = 2;
    if (has_agreeflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->agreeflag());
    }
    
    // optional string SrcPlayerName = 3;
    if (has_srcplayername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->srcplayername());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePlayerInviteTaskResponseRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePlayerInviteTaskResponseRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePlayerInviteTaskResponseRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePlayerInviteTaskResponseRequest::MergeFrom(const CMessagePlayerInviteTaskResponseRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_taskid(from.taskid());
    }
    if (from._has_bit(1)) {
      set_agreeflag(from.agreeflag());
    }
    if (from._has_bit(2)) {
      set_srcplayername(from.srcplayername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePlayerInviteTaskResponseRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerInviteTaskResponseRequest::CopyFrom(const CMessagePlayerInviteTaskResponseRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerInviteTaskResponseRequest::Swap(CMessagePlayerInviteTaskResponseRequest* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(agreeflag_, other->agreeflag_);
    std::swap(srcplayername_, other->srcplayername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePlayerInviteTaskResponseRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePlayerInviteTaskResponseRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePlayerInviteTaskResponseRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerInviteTaskResponseRequest_reflection_;
}

// ===================================================================

const ::std::string CMessagePlayerInviteTaskResponseNotice::_default_srcplayername_;
#ifndef _MSC_VER
const int CMessagePlayerInviteTaskResponseNotice::kRouterFieldNumber;
const int CMessagePlayerInviteTaskResponseNotice::kSrcPlayerNameFieldNumber;
const int CMessagePlayerInviteTaskResponseNotice::kTaskIDFieldNumber;
const int CMessagePlayerInviteTaskResponseNotice::kAgreeFlagFieldNumber;
#endif  // !_MSC_VER

CMessagePlayerInviteTaskResponseNotice::CMessagePlayerInviteTaskResponseNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePlayerInviteTaskResponseNotice::InitAsDefaultInstance() {  router_ = const_cast< ::CMessageRouter*>(&::CMessageRouter::default_instance());
}

CMessagePlayerInviteTaskResponseNotice::CMessagePlayerInviteTaskResponseNotice(const CMessagePlayerInviteTaskResponseNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePlayerInviteTaskResponseNotice::SharedCtor() {
  _cached_size_ = 0;
  router_ = NULL;
  srcplayername_ = const_cast< ::std::string*>(&_default_srcplayername_);
  taskid_ = 0u;
  agreeflag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePlayerInviteTaskResponseNotice::~CMessagePlayerInviteTaskResponseNotice() {
  SharedDtor();
}

void CMessagePlayerInviteTaskResponseNotice::SharedDtor() {
  if (srcplayername_ != &_default_srcplayername_) {
    delete srcplayername_;
  }
  if (this != default_instance_) {
    delete router_;
  }
}

const ::google::protobuf::Descriptor* CMessagePlayerInviteTaskResponseNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerInviteTaskResponseNotice_descriptor_;
}

const CMessagePlayerInviteTaskResponseNotice& CMessagePlayerInviteTaskResponseNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePlayerInviteTaskResponseNotice* CMessagePlayerInviteTaskResponseNotice::default_instance_ = NULL;

CMessagePlayerInviteTaskResponseNotice* CMessagePlayerInviteTaskResponseNotice::New() const {
  return new CMessagePlayerInviteTaskResponseNotice;
}

void CMessagePlayerInviteTaskResponseNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (router_ != NULL) router_->::CMessageRouter::Clear();
    }
    if (_has_bit(1)) {
      if (srcplayername_ != &_default_srcplayername_) {
        srcplayername_->clear();
      }
    }
    taskid_ = 0u;
    agreeflag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePlayerInviteTaskResponseNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CMessageRouter Router = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_router()));
        if (input->ExpectTag(18)) goto parse_SrcPlayerName;
        break;
      }
      
      // optional string SrcPlayerName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SrcPlayerName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_srcplayername()));
        if (input->ExpectTag(24)) goto parse_TaskID;
        break;
      }
      
      // optional uint32 TaskID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TaskID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_AgreeFlag;
        break;
      }
      
      // optional uint32 AgreeFlag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AgreeFlag:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &agreeflag_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePlayerInviteTaskResponseNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePlayerInviteTaskResponseNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->router(), output);
  }
  
  // optional string SrcPlayerName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->srcplayername(), output);
  }
  
  // optional uint32 TaskID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->taskid(), output);
  }
  
  // optional uint32 AgreeFlag = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->agreeflag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePlayerInviteTaskResponseNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->router(), target);
  }
  
  // optional string SrcPlayerName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->srcplayername(), target);
  }
  
  // optional uint32 TaskID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->taskid(), target);
  }
  
  // optional uint32 AgreeFlag = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->agreeflag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePlayerInviteTaskResponseNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMessageRouter Router = 1;
    if (has_router()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->router());
    }
    
    // optional string SrcPlayerName = 2;
    if (has_srcplayername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->srcplayername());
    }
    
    // optional uint32 TaskID = 3;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskid());
    }
    
    // optional uint32 AgreeFlag = 4;
    if (has_agreeflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->agreeflag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePlayerInviteTaskResponseNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePlayerInviteTaskResponseNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePlayerInviteTaskResponseNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePlayerInviteTaskResponseNotice::MergeFrom(const CMessagePlayerInviteTaskResponseNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_router()->::CMessageRouter::MergeFrom(from.router());
    }
    if (from._has_bit(1)) {
      set_srcplayername(from.srcplayername());
    }
    if (from._has_bit(2)) {
      set_taskid(from.taskid());
    }
    if (from._has_bit(3)) {
      set_agreeflag(from.agreeflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePlayerInviteTaskResponseNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerInviteTaskResponseNotice::CopyFrom(const CMessagePlayerInviteTaskResponseNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerInviteTaskResponseNotice::Swap(CMessagePlayerInviteTaskResponseNotice* other) {
  if (other != this) {
    std::swap(router_, other->router_);
    std::swap(srcplayername_, other->srcplayername_);
    std::swap(taskid_, other->taskid_);
    std::swap(agreeflag_, other->agreeflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePlayerInviteTaskResponseNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePlayerInviteTaskResponseNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePlayerInviteTaskResponseNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerInviteTaskResponseNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageDoPlayerInviteTaskMsg::kRouterFieldNumber;
const int CMessageDoPlayerInviteTaskMsg::kTaskIDFieldNumber;
#endif  // !_MSC_VER

CMessageDoPlayerInviteTaskMsg::CMessageDoPlayerInviteTaskMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageDoPlayerInviteTaskMsg::InitAsDefaultInstance() {  router_ = const_cast< ::CMessageRouter*>(&::CMessageRouter::default_instance());
}

CMessageDoPlayerInviteTaskMsg::CMessageDoPlayerInviteTaskMsg(const CMessageDoPlayerInviteTaskMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageDoPlayerInviteTaskMsg::SharedCtor() {
  _cached_size_ = 0;
  router_ = NULL;
  taskid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageDoPlayerInviteTaskMsg::~CMessageDoPlayerInviteTaskMsg() {
  SharedDtor();
}

void CMessageDoPlayerInviteTaskMsg::SharedDtor() {
  if (this != default_instance_) {
    delete router_;
  }
}

const ::google::protobuf::Descriptor* CMessageDoPlayerInviteTaskMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageDoPlayerInviteTaskMsg_descriptor_;
}

const CMessageDoPlayerInviteTaskMsg& CMessageDoPlayerInviteTaskMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageDoPlayerInviteTaskMsg* CMessageDoPlayerInviteTaskMsg::default_instance_ = NULL;

CMessageDoPlayerInviteTaskMsg* CMessageDoPlayerInviteTaskMsg::New() const {
  return new CMessageDoPlayerInviteTaskMsg;
}

void CMessageDoPlayerInviteTaskMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (router_ != NULL) router_->::CMessageRouter::Clear();
    }
    taskid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageDoPlayerInviteTaskMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CMessageRouter Router = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_router()));
        if (input->ExpectTag(16)) goto parse_TaskID;
        break;
      }
      
      // optional uint32 TaskID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TaskID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageDoPlayerInviteTaskMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageDoPlayerInviteTaskMsg::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->router(), output);
  }
  
  // optional uint32 TaskID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->taskid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageDoPlayerInviteTaskMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->router(), target);
  }
  
  // optional uint32 TaskID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->taskid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageDoPlayerInviteTaskMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMessageRouter Router = 1;
    if (has_router()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->router());
    }
    
    // optional uint32 TaskID = 2;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageDoPlayerInviteTaskMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageDoPlayerInviteTaskMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageDoPlayerInviteTaskMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageDoPlayerInviteTaskMsg::MergeFrom(const CMessageDoPlayerInviteTaskMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_router()->::CMessageRouter::MergeFrom(from.router());
    }
    if (from._has_bit(1)) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageDoPlayerInviteTaskMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDoPlayerInviteTaskMsg::CopyFrom(const CMessageDoPlayerInviteTaskMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDoPlayerInviteTaskMsg::Swap(CMessageDoPlayerInviteTaskMsg* other) {
  if (other != this) {
    std::swap(router_, other->router_);
    std::swap(taskid_, other->taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageDoPlayerInviteTaskMsg::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageDoPlayerInviteTaskMsg::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageDoPlayerInviteTaskMsg::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageDoPlayerInviteTaskMsg_reflection_;
}

// ===================================================================

const ::std::string CMessagePlayerInviteTaskErrorMsg::_default_myname_;
#ifndef _MSC_VER
const int CMessagePlayerInviteTaskErrorMsg::kRouterFieldNumber;
const int CMessagePlayerInviteTaskErrorMsg::kTaskIDFieldNumber;
const int CMessagePlayerInviteTaskErrorMsg::kTypeIDFieldNumber;
const int CMessagePlayerInviteTaskErrorMsg::kMyNameFieldNumber;
#endif  // !_MSC_VER

CMessagePlayerInviteTaskErrorMsg::CMessagePlayerInviteTaskErrorMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePlayerInviteTaskErrorMsg::InitAsDefaultInstance() {  router_ = const_cast< ::CMessageRouter*>(&::CMessageRouter::default_instance());
}

CMessagePlayerInviteTaskErrorMsg::CMessagePlayerInviteTaskErrorMsg(const CMessagePlayerInviteTaskErrorMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePlayerInviteTaskErrorMsg::SharedCtor() {
  _cached_size_ = 0;
  router_ = NULL;
  taskid_ = 0u;
  typeid__ = 0u;
  myname_ = const_cast< ::std::string*>(&_default_myname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePlayerInviteTaskErrorMsg::~CMessagePlayerInviteTaskErrorMsg() {
  SharedDtor();
}

void CMessagePlayerInviteTaskErrorMsg::SharedDtor() {
  if (myname_ != &_default_myname_) {
    delete myname_;
  }
  if (this != default_instance_) {
    delete router_;
  }
}

const ::google::protobuf::Descriptor* CMessagePlayerInviteTaskErrorMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerInviteTaskErrorMsg_descriptor_;
}

const CMessagePlayerInviteTaskErrorMsg& CMessagePlayerInviteTaskErrorMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePlayerInviteTaskErrorMsg* CMessagePlayerInviteTaskErrorMsg::default_instance_ = NULL;

CMessagePlayerInviteTaskErrorMsg* CMessagePlayerInviteTaskErrorMsg::New() const {
  return new CMessagePlayerInviteTaskErrorMsg;
}

void CMessagePlayerInviteTaskErrorMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (router_ != NULL) router_->::CMessageRouter::Clear();
    }
    taskid_ = 0u;
    typeid__ = 0u;
    if (_has_bit(3)) {
      if (myname_ != &_default_myname_) {
        myname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePlayerInviteTaskErrorMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CMessageRouter Router = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_router()));
        if (input->ExpectTag(16)) goto parse_TaskID;
        break;
      }
      
      // optional uint32 TaskID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TaskID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_TypeID;
        break;
      }
      
      // optional uint32 TypeID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TypeID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &typeid__));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_MyName;
        break;
      }
      
      // optional string MyName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MyName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_myname()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePlayerInviteTaskErrorMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePlayerInviteTaskErrorMsg::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->router(), output);
  }
  
  // optional uint32 TaskID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->taskid(), output);
  }
  
  // optional uint32 TypeID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->typeid_(), output);
  }
  
  // optional string MyName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->myname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePlayerInviteTaskErrorMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->router(), target);
  }
  
  // optional uint32 TaskID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->taskid(), target);
  }
  
  // optional uint32 TypeID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->typeid_(), target);
  }
  
  // optional string MyName = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->myname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePlayerInviteTaskErrorMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMessageRouter Router = 1;
    if (has_router()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->router());
    }
    
    // optional uint32 TaskID = 2;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskid());
    }
    
    // optional uint32 TypeID = 3;
    if (has_typeid_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->typeid_());
    }
    
    // optional string MyName = 4;
    if (has_myname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->myname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePlayerInviteTaskErrorMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePlayerInviteTaskErrorMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePlayerInviteTaskErrorMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePlayerInviteTaskErrorMsg::MergeFrom(const CMessagePlayerInviteTaskErrorMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_router()->::CMessageRouter::MergeFrom(from.router());
    }
    if (from._has_bit(1)) {
      set_taskid(from.taskid());
    }
    if (from._has_bit(2)) {
      set_typeid_(from.typeid_());
    }
    if (from._has_bit(3)) {
      set_myname(from.myname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePlayerInviteTaskErrorMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerInviteTaskErrorMsg::CopyFrom(const CMessagePlayerInviteTaskErrorMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerInviteTaskErrorMsg::Swap(CMessagePlayerInviteTaskErrorMsg* other) {
  if (other != this) {
    std::swap(router_, other->router_);
    std::swap(taskid_, other->taskid_);
    std::swap(typeid__, other->typeid__);
    std::swap(myname_, other->myname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePlayerInviteTaskErrorMsg::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePlayerInviteTaskErrorMsg::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePlayerInviteTaskErrorMsg::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerInviteTaskErrorMsg_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageAbortTaskNotice::kTaskIDFieldNumber;
#endif  // !_MSC_VER

CMessageAbortTaskNotice::CMessageAbortTaskNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageAbortTaskNotice::InitAsDefaultInstance() {}

CMessageAbortTaskNotice::CMessageAbortTaskNotice(const CMessageAbortTaskNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageAbortTaskNotice::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageAbortTaskNotice::~CMessageAbortTaskNotice() {
  SharedDtor();
}

void CMessageAbortTaskNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageAbortTaskNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageAbortTaskNotice_descriptor_;
}

const CMessageAbortTaskNotice& CMessageAbortTaskNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageAbortTaskNotice* CMessageAbortTaskNotice::default_instance_ = NULL;

CMessageAbortTaskNotice* CMessageAbortTaskNotice::New() const {
  return new CMessageAbortTaskNotice;
}

void CMessageAbortTaskNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageAbortTaskNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TaskID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageAbortTaskNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageAbortTaskNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->taskid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageAbortTaskNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->taskid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageAbortTaskNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageAbortTaskNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageAbortTaskNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageAbortTaskNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageAbortTaskNotice::MergeFrom(const CMessageAbortTaskNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageAbortTaskNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAbortTaskNotice::CopyFrom(const CMessageAbortTaskNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAbortTaskNotice::Swap(CMessageAbortTaskNotice* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageAbortTaskNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageAbortTaskNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageAbortTaskNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageAbortTaskNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageTaskFailNotice::kTaskIDFieldNumber;
#endif  // !_MSC_VER

CMessageTaskFailNotice::CMessageTaskFailNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTaskFailNotice::InitAsDefaultInstance() {}

CMessageTaskFailNotice::CMessageTaskFailNotice(const CMessageTaskFailNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTaskFailNotice::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTaskFailNotice::~CMessageTaskFailNotice() {
  SharedDtor();
}

void CMessageTaskFailNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTaskFailNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTaskFailNotice_descriptor_;
}

const CMessageTaskFailNotice& CMessageTaskFailNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTaskFailNotice* CMessageTaskFailNotice::default_instance_ = NULL;

CMessageTaskFailNotice* CMessageTaskFailNotice::New() const {
  return new CMessageTaskFailNotice;
}

void CMessageTaskFailNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTaskFailNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TaskID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTaskFailNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTaskFailNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->taskid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTaskFailNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->taskid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTaskFailNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTaskFailNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTaskFailNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTaskFailNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTaskFailNotice::MergeFrom(const CMessageTaskFailNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTaskFailNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTaskFailNotice::CopyFrom(const CMessageTaskFailNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTaskFailNotice::Swap(CMessageTaskFailNotice* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTaskFailNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTaskFailNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTaskFailNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTaskFailNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageUnFinishTaskTime::kTaskIDFieldNumber;
const int CMessageUnFinishTaskTime::kNeedTimeFieldNumber;
#endif  // !_MSC_VER

CMessageUnFinishTaskTime::CMessageUnFinishTaskTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUnFinishTaskTime::InitAsDefaultInstance() {}

CMessageUnFinishTaskTime::CMessageUnFinishTaskTime(const CMessageUnFinishTaskTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUnFinishTaskTime::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  needtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUnFinishTaskTime::~CMessageUnFinishTaskTime() {
  SharedDtor();
}

void CMessageUnFinishTaskTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageUnFinishTaskTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUnFinishTaskTime_descriptor_;
}

const CMessageUnFinishTaskTime& CMessageUnFinishTaskTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageUnFinishTaskTime* CMessageUnFinishTaskTime::default_instance_ = NULL;

CMessageUnFinishTaskTime* CMessageUnFinishTaskTime::New() const {
  return new CMessageUnFinishTaskTime;
}

void CMessageUnFinishTaskTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0u;
    needtime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUnFinishTaskTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TaskID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_NeedTime;
        break;
      }
      
      // optional uint32 NeedTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NeedTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &needtime_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUnFinishTaskTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUnFinishTaskTime::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->taskid(), output);
  }
  
  // optional uint32 NeedTime = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->needtime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUnFinishTaskTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->taskid(), target);
  }
  
  // optional uint32 NeedTime = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->needtime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUnFinishTaskTime::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskid());
    }
    
    // optional uint32 NeedTime = 2;
    if (has_needtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->needtime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUnFinishTaskTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUnFinishTaskTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUnFinishTaskTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUnFinishTaskTime::MergeFrom(const CMessageUnFinishTaskTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_taskid(from.taskid());
    }
    if (from._has_bit(1)) {
      set_needtime(from.needtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUnFinishTaskTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUnFinishTaskTime::CopyFrom(const CMessageUnFinishTaskTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUnFinishTaskTime::Swap(CMessageUnFinishTaskTime* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(needtime_, other->needtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUnFinishTaskTime::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUnFinishTaskTime::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUnFinishTaskTime::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUnFinishTaskTime_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMessageTaskOprFailNotice::CMessageTaskOprFailNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTaskOprFailNotice::InitAsDefaultInstance() {}

CMessageTaskOprFailNotice::CMessageTaskOprFailNotice(const CMessageTaskOprFailNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTaskOprFailNotice::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTaskOprFailNotice::~CMessageTaskOprFailNotice() {
  SharedDtor();
}

void CMessageTaskOprFailNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTaskOprFailNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTaskOprFailNotice_descriptor_;
}

const CMessageTaskOprFailNotice& CMessageTaskOprFailNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTaskOprFailNotice* CMessageTaskOprFailNotice::default_instance_ = NULL;

CMessageTaskOprFailNotice* CMessageTaskOprFailNotice::New() const {
  return new CMessageTaskOprFailNotice;
}

void CMessageTaskOprFailNotice::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTaskOprFailNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMessageTaskOprFailNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTaskOprFailNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTaskOprFailNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTaskOprFailNotice::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTaskOprFailNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTaskOprFailNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTaskOprFailNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTaskOprFailNotice::MergeFrom(const CMessageTaskOprFailNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTaskOprFailNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTaskOprFailNotice::CopyFrom(const CMessageTaskOprFailNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTaskOprFailNotice::Swap(CMessageTaskOprFailNotice* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTaskOprFailNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTaskOprFailNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTaskOprFailNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTaskOprFailNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageTaskUnRefreshNotice::kTaskIDFieldNumber;
#endif  // !_MSC_VER

CMessageTaskUnRefreshNotice::CMessageTaskUnRefreshNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTaskUnRefreshNotice::InitAsDefaultInstance() {}

CMessageTaskUnRefreshNotice::CMessageTaskUnRefreshNotice(const CMessageTaskUnRefreshNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTaskUnRefreshNotice::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTaskUnRefreshNotice::~CMessageTaskUnRefreshNotice() {
  SharedDtor();
}

void CMessageTaskUnRefreshNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTaskUnRefreshNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTaskUnRefreshNotice_descriptor_;
}

const CMessageTaskUnRefreshNotice& CMessageTaskUnRefreshNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTaskUnRefreshNotice* CMessageTaskUnRefreshNotice::default_instance_ = NULL;

CMessageTaskUnRefreshNotice* CMessageTaskUnRefreshNotice::New() const {
  return new CMessageTaskUnRefreshNotice;
}

void CMessageTaskUnRefreshNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTaskUnRefreshNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TaskID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTaskUnRefreshNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTaskUnRefreshNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->taskid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTaskUnRefreshNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->taskid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTaskUnRefreshNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTaskUnRefreshNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTaskUnRefreshNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTaskUnRefreshNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTaskUnRefreshNotice::MergeFrom(const CMessageTaskUnRefreshNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTaskUnRefreshNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTaskUnRefreshNotice::CopyFrom(const CMessageTaskUnRefreshNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTaskUnRefreshNotice::Swap(CMessageTaskUnRefreshNotice* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTaskUnRefreshNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTaskUnRefreshNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTaskUnRefreshNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTaskUnRefreshNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageTaskRefreshResult::kTaskIDFieldNumber;
const int CMessageTaskRefreshResult::kTaskColorFieldNumber;
const int CMessageTaskRefreshResult::kTaskNumberFieldNumber;
#endif  // !_MSC_VER

CMessageTaskRefreshResult::CMessageTaskRefreshResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTaskRefreshResult::InitAsDefaultInstance() {}

CMessageTaskRefreshResult::CMessageTaskRefreshResult(const CMessageTaskRefreshResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTaskRefreshResult::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  taskcolor_ = 0u;
  tasknumber_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTaskRefreshResult::~CMessageTaskRefreshResult() {
  SharedDtor();
}

void CMessageTaskRefreshResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTaskRefreshResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTaskRefreshResult_descriptor_;
}

const CMessageTaskRefreshResult& CMessageTaskRefreshResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTaskRefreshResult* CMessageTaskRefreshResult::default_instance_ = NULL;

CMessageTaskRefreshResult* CMessageTaskRefreshResult::New() const {
  return new CMessageTaskRefreshResult;
}

void CMessageTaskRefreshResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0u;
    taskcolor_ = 0u;
    tasknumber_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTaskRefreshResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TaskID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_TaskColor;
        break;
      }
      
      // optional uint32 TaskColor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TaskColor:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskcolor_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_TaskNumber;
        break;
      }
      
      // optional uint32 TaskNumber = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TaskNumber:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tasknumber_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTaskRefreshResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTaskRefreshResult::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->taskid(), output);
  }
  
  // optional uint32 TaskColor = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->taskcolor(), output);
  }
  
  // optional uint32 TaskNumber = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->tasknumber(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTaskRefreshResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->taskid(), target);
  }
  
  // optional uint32 TaskColor = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->taskcolor(), target);
  }
  
  // optional uint32 TaskNumber = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->tasknumber(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTaskRefreshResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskid());
    }
    
    // optional uint32 TaskColor = 2;
    if (has_taskcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskcolor());
    }
    
    // optional uint32 TaskNumber = 3;
    if (has_tasknumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tasknumber());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTaskRefreshResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTaskRefreshResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTaskRefreshResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTaskRefreshResult::MergeFrom(const CMessageTaskRefreshResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_taskid(from.taskid());
    }
    if (from._has_bit(1)) {
      set_taskcolor(from.taskcolor());
    }
    if (from._has_bit(2)) {
      set_tasknumber(from.tasknumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTaskRefreshResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTaskRefreshResult::CopyFrom(const CMessageTaskRefreshResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTaskRefreshResult::Swap(CMessageTaskRefreshResult* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(taskcolor_, other->taskcolor_);
    std::swap(tasknumber_, other->tasknumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTaskRefreshResult::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTaskRefreshResult::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTaskRefreshResult::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTaskRefreshResult_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageRmoveTaskColor::kTaskIDFieldNumber;
const int CMessageRmoveTaskColor::kTaskColorFieldNumber;
#endif  // !_MSC_VER

CMessageRmoveTaskColor::CMessageRmoveTaskColor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRmoveTaskColor::InitAsDefaultInstance() {}

CMessageRmoveTaskColor::CMessageRmoveTaskColor(const CMessageRmoveTaskColor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRmoveTaskColor::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  taskcolor_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRmoveTaskColor::~CMessageRmoveTaskColor() {
  SharedDtor();
}

void CMessageRmoveTaskColor::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageRmoveTaskColor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRmoveTaskColor_descriptor_;
}

const CMessageRmoveTaskColor& CMessageRmoveTaskColor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRmoveTaskColor* CMessageRmoveTaskColor::default_instance_ = NULL;

CMessageRmoveTaskColor* CMessageRmoveTaskColor::New() const {
  return new CMessageRmoveTaskColor;
}

void CMessageRmoveTaskColor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0u;
    taskcolor_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRmoveTaskColor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TaskID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_TaskColor;
        break;
      }
      
      // optional uint32 TaskColor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TaskColor:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskcolor_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageRmoveTaskColor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRmoveTaskColor::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->taskid(), output);
  }
  
  // optional uint32 TaskColor = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->taskcolor(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRmoveTaskColor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->taskid(), target);
  }
  
  // optional uint32 TaskColor = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->taskcolor(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRmoveTaskColor::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskid());
    }
    
    // optional uint32 TaskColor = 2;
    if (has_taskcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskcolor());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRmoveTaskColor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRmoveTaskColor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRmoveTaskColor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRmoveTaskColor::MergeFrom(const CMessageRmoveTaskColor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_taskid(from.taskid());
    }
    if (from._has_bit(1)) {
      set_taskcolor(from.taskcolor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRmoveTaskColor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRmoveTaskColor::CopyFrom(const CMessageRmoveTaskColor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRmoveTaskColor::Swap(CMessageRmoveTaskColor* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(taskcolor_, other->taskcolor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRmoveTaskColor::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRmoveTaskColor::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRmoveTaskColor::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRmoveTaskColor_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageTaskRefreshFailNotice::kTaskIDFieldNumber;
#endif  // !_MSC_VER

CMessageTaskRefreshFailNotice::CMessageTaskRefreshFailNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTaskRefreshFailNotice::InitAsDefaultInstance() {}

CMessageTaskRefreshFailNotice::CMessageTaskRefreshFailNotice(const CMessageTaskRefreshFailNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTaskRefreshFailNotice::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTaskRefreshFailNotice::~CMessageTaskRefreshFailNotice() {
  SharedDtor();
}

void CMessageTaskRefreshFailNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTaskRefreshFailNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTaskRefreshFailNotice_descriptor_;
}

const CMessageTaskRefreshFailNotice& CMessageTaskRefreshFailNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTaskRefreshFailNotice* CMessageTaskRefreshFailNotice::default_instance_ = NULL;

CMessageTaskRefreshFailNotice* CMessageTaskRefreshFailNotice::New() const {
  return new CMessageTaskRefreshFailNotice;
}

void CMessageTaskRefreshFailNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTaskRefreshFailNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TaskID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTaskRefreshFailNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTaskRefreshFailNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->taskid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTaskRefreshFailNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->taskid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTaskRefreshFailNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTaskRefreshFailNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTaskRefreshFailNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTaskRefreshFailNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTaskRefreshFailNotice::MergeFrom(const CMessageTaskRefreshFailNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTaskRefreshFailNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTaskRefreshFailNotice::CopyFrom(const CMessageTaskRefreshFailNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTaskRefreshFailNotice::Swap(CMessageTaskRefreshFailNotice* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTaskRefreshFailNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTaskRefreshFailNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTaskRefreshFailNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTaskRefreshFailNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageUnReaccpetTask::kTaskIDFieldNumber;
const int CMessageUnReaccpetTask::kNeedTimeFieldNumber;
#endif  // !_MSC_VER

CMessageUnReaccpetTask::CMessageUnReaccpetTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUnReaccpetTask::InitAsDefaultInstance() {}

CMessageUnReaccpetTask::CMessageUnReaccpetTask(const CMessageUnReaccpetTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUnReaccpetTask::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  needtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUnReaccpetTask::~CMessageUnReaccpetTask() {
  SharedDtor();
}

void CMessageUnReaccpetTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageUnReaccpetTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUnReaccpetTask_descriptor_;
}

const CMessageUnReaccpetTask& CMessageUnReaccpetTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageUnReaccpetTask* CMessageUnReaccpetTask::default_instance_ = NULL;

CMessageUnReaccpetTask* CMessageUnReaccpetTask::New() const {
  return new CMessageUnReaccpetTask;
}

void CMessageUnReaccpetTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0u;
    needtime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUnReaccpetTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TaskID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_NeedTime;
        break;
      }
      
      // optional uint32 NeedTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NeedTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &needtime_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUnReaccpetTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUnReaccpetTask::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->taskid(), output);
  }
  
  // optional uint32 NeedTime = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->needtime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUnReaccpetTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->taskid(), target);
  }
  
  // optional uint32 NeedTime = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->needtime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUnReaccpetTask::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskid());
    }
    
    // optional uint32 NeedTime = 2;
    if (has_needtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->needtime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUnReaccpetTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUnReaccpetTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUnReaccpetTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUnReaccpetTask::MergeFrom(const CMessageUnReaccpetTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_taskid(from.taskid());
    }
    if (from._has_bit(1)) {
      set_needtime(from.needtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUnReaccpetTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUnReaccpetTask::CopyFrom(const CMessageUnReaccpetTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUnReaccpetTask::Swap(CMessageUnReaccpetTask* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(needtime_, other->needtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUnReaccpetTask::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUnReaccpetTask::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUnReaccpetTask::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUnReaccpetTask_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageNpcStorageTaskListNotice::kListFieldNumber;
#endif  // !_MSC_VER

CMessageNpcStorageTaskListNotice::CMessageNpcStorageTaskListNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageNpcStorageTaskListNotice::InitAsDefaultInstance() {  list_ = const_cast< ::NpcTaskList*>(&::NpcTaskList::default_instance());
}

CMessageNpcStorageTaskListNotice::CMessageNpcStorageTaskListNotice(const CMessageNpcStorageTaskListNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageNpcStorageTaskListNotice::SharedCtor() {
  _cached_size_ = 0;
  list_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageNpcStorageTaskListNotice::~CMessageNpcStorageTaskListNotice() {
  SharedDtor();
}

void CMessageNpcStorageTaskListNotice::SharedDtor() {
  if (this != default_instance_) {
    delete list_;
  }
}

const ::google::protobuf::Descriptor* CMessageNpcStorageTaskListNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageNpcStorageTaskListNotice_descriptor_;
}

const CMessageNpcStorageTaskListNotice& CMessageNpcStorageTaskListNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageNpcStorageTaskListNotice* CMessageNpcStorageTaskListNotice::default_instance_ = NULL;

CMessageNpcStorageTaskListNotice* CMessageNpcStorageTaskListNotice::New() const {
  return new CMessageNpcStorageTaskListNotice;
}

void CMessageNpcStorageTaskListNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (list_ != NULL) list_->::NpcTaskList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageNpcStorageTaskListNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .NpcTaskList List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_list()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageNpcStorageTaskListNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageNpcStorageTaskListNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .NpcTaskList List = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->list(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageNpcStorageTaskListNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NpcTaskList List = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->list(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageNpcStorageTaskListNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NpcTaskList List = 1;
    if (has_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->list());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageNpcStorageTaskListNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageNpcStorageTaskListNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageNpcStorageTaskListNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageNpcStorageTaskListNotice::MergeFrom(const CMessageNpcStorageTaskListNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_list()->::NpcTaskList::MergeFrom(from.list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageNpcStorageTaskListNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageNpcStorageTaskListNotice::CopyFrom(const CMessageNpcStorageTaskListNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageNpcStorageTaskListNotice::Swap(CMessageNpcStorageTaskListNotice* other) {
  if (other != this) {
    std::swap(list_, other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageNpcStorageTaskListNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageNpcStorageTaskListNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageNpcStorageTaskListNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageNpcStorageTaskListNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageObtainScrollTaskRequest::kScrollIDFieldNumber;
#endif  // !_MSC_VER

CMessageObtainScrollTaskRequest::CMessageObtainScrollTaskRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageObtainScrollTaskRequest::InitAsDefaultInstance() {}

CMessageObtainScrollTaskRequest::CMessageObtainScrollTaskRequest(const CMessageObtainScrollTaskRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageObtainScrollTaskRequest::SharedCtor() {
  _cached_size_ = 0;
  scrollid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageObtainScrollTaskRequest::~CMessageObtainScrollTaskRequest() {
  SharedDtor();
}

void CMessageObtainScrollTaskRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageObtainScrollTaskRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageObtainScrollTaskRequest_descriptor_;
}

const CMessageObtainScrollTaskRequest& CMessageObtainScrollTaskRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageObtainScrollTaskRequest* CMessageObtainScrollTaskRequest::default_instance_ = NULL;

CMessageObtainScrollTaskRequest* CMessageObtainScrollTaskRequest::New() const {
  return new CMessageObtainScrollTaskRequest;
}

void CMessageObtainScrollTaskRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scrollid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageObtainScrollTaskRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ScrollID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &scrollid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageObtainScrollTaskRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageObtainScrollTaskRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ScrollID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->scrollid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageObtainScrollTaskRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ScrollID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->scrollid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageObtainScrollTaskRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ScrollID = 1;
    if (has_scrollid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->scrollid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageObtainScrollTaskRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageObtainScrollTaskRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageObtainScrollTaskRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageObtainScrollTaskRequest::MergeFrom(const CMessageObtainScrollTaskRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_scrollid(from.scrollid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageObtainScrollTaskRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageObtainScrollTaskRequest::CopyFrom(const CMessageObtainScrollTaskRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageObtainScrollTaskRequest::Swap(CMessageObtainScrollTaskRequest* other) {
  if (other != this) {
    std::swap(scrollid_, other->scrollid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageObtainScrollTaskRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageObtainScrollTaskRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageObtainScrollTaskRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageObtainScrollTaskRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageTragedyTaskUpdateNotice::kTragedyInfoFieldNumber;
const int CMessageTragedyTaskUpdateNotice::kIsLoginFieldNumber;
#endif  // !_MSC_VER

CMessageTragedyTaskUpdateNotice::CMessageTragedyTaskUpdateNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTragedyTaskUpdateNotice::InitAsDefaultInstance() {}

CMessageTragedyTaskUpdateNotice::CMessageTragedyTaskUpdateNotice(const CMessageTragedyTaskUpdateNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTragedyTaskUpdateNotice::SharedCtor() {
  _cached_size_ = 0;
  islogin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTragedyTaskUpdateNotice::~CMessageTragedyTaskUpdateNotice() {
  SharedDtor();
}

void CMessageTragedyTaskUpdateNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTragedyTaskUpdateNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTragedyTaskUpdateNotice_descriptor_;
}

const CMessageTragedyTaskUpdateNotice& CMessageTragedyTaskUpdateNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTragedyTaskUpdateNotice* CMessageTragedyTaskUpdateNotice::default_instance_ = NULL;

CMessageTragedyTaskUpdateNotice* CMessageTragedyTaskUpdateNotice::New() const {
  return new CMessageTragedyTaskUpdateNotice;
}

void CMessageTragedyTaskUpdateNotice::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    islogin_ = 0u;
  }
  tragedyinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTragedyTaskUpdateNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .TragedyStruct TragedyInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_TragedyInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_tragedyinfo()));
        if (input->ExpectTag(10)) goto parse_TragedyInfo;
        if (input->ExpectTag(16)) goto parse_IsLogin;
        break;
      }
      
      // optional uint32 IsLogin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IsLogin:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &islogin_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTragedyTaskUpdateNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTragedyTaskUpdateNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .TragedyStruct TragedyInfo = 1;
  for (int i = 0; i < this->tragedyinfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->tragedyinfo(i), output);
  }
  
  // optional uint32 IsLogin = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->islogin(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTragedyTaskUpdateNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TragedyStruct TragedyInfo = 1;
  for (int i = 0; i < this->tragedyinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->tragedyinfo(i), target);
  }
  
  // optional uint32 IsLogin = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->islogin(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTragedyTaskUpdateNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 IsLogin = 2;
    if (has_islogin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->islogin());
    }
    
  }
  // repeated .TragedyStruct TragedyInfo = 1;
  total_size += 1 * this->tragedyinfo_size();
  for (int i = 0; i < this->tragedyinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->tragedyinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTragedyTaskUpdateNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTragedyTaskUpdateNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTragedyTaskUpdateNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTragedyTaskUpdateNotice::MergeFrom(const CMessageTragedyTaskUpdateNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  tragedyinfo_.MergeFrom(from.tragedyinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_islogin(from.islogin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTragedyTaskUpdateNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTragedyTaskUpdateNotice::CopyFrom(const CMessageTragedyTaskUpdateNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTragedyTaskUpdateNotice::Swap(CMessageTragedyTaskUpdateNotice* other) {
  if (other != this) {
    tragedyinfo_.Swap(&other->tragedyinfo_);
    std::swap(islogin_, other->islogin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTragedyTaskUpdateNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTragedyTaskUpdateNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTragedyTaskUpdateNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTragedyTaskUpdateNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetTipRequest::kNpcEntityIDFieldNumber;
const int CMessageGetTipRequest::kIdTypeFieldNumber;
#endif  // !_MSC_VER

CMessageGetTipRequest::CMessageGetTipRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetTipRequest::InitAsDefaultInstance() {}

CMessageGetTipRequest::CMessageGetTipRequest(const CMessageGetTipRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetTipRequest::SharedCtor() {
  _cached_size_ = 0;
  idtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetTipRequest::~CMessageGetTipRequest() {
  SharedDtor();
}

void CMessageGetTipRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGetTipRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetTipRequest_descriptor_;
}

const CMessageGetTipRequest& CMessageGetTipRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetTipRequest* CMessageGetTipRequest::default_instance_ = NULL;

CMessageGetTipRequest* CMessageGetTipRequest::New() const {
  return new CMessageGetTipRequest;
}

void CMessageGetTipRequest::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    idtype_ = 0u;
  }
  npcentityid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetTipRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated uint32 NpcEntityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcEntityID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_npcentityid(value);
        if (input->ExpectTag(8)) goto parse_NpcEntityID;
        if (input->ExpectTag(16)) goto parse_IdType;
        break;
      }
      
      // optional uint32 IdType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IdType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &idtype_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetTipRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetTipRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated uint32 NpcEntityID = 1;
  for (int i = 0; i < this->npcentityid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->npcentityid(i), output);
  }
  
  // optional uint32 IdType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->idtype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetTipRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 NpcEntityID = 1;
  for (int i = 0; i < this->npcentityid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->npcentityid(i), target);
  }
  
  // optional uint32 IdType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->idtype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetTipRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 IdType = 2;
    if (has_idtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->idtype());
    }
    
  }
  // repeated uint32 NpcEntityID = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->npcentityid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->npcentityid(i));
    }
    total_size += 1 * this->npcentityid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetTipRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetTipRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetTipRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetTipRequest::MergeFrom(const CMessageGetTipRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  npcentityid_.MergeFrom(from.npcentityid_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_idtype(from.idtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetTipRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetTipRequest::CopyFrom(const CMessageGetTipRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetTipRequest::Swap(CMessageGetTipRequest* other) {
  if (other != this) {
    npcentityid_.Swap(&other->npcentityid_);
    std::swap(idtype_, other->idtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetTipRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetTipRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetTipRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetTipRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageEndTalkRequest::kNpcEntityIDFieldNumber;
const int CMessageEndTalkRequest::kTaskIDFieldNumber;
#endif  // !_MSC_VER

CMessageEndTalkRequest::CMessageEndTalkRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageEndTalkRequest::InitAsDefaultInstance() {}

CMessageEndTalkRequest::CMessageEndTalkRequest(const CMessageEndTalkRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageEndTalkRequest::SharedCtor() {
  _cached_size_ = 0;
  npcentityid_ = 0u;
  taskid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageEndTalkRequest::~CMessageEndTalkRequest() {
  SharedDtor();
}

void CMessageEndTalkRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageEndTalkRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageEndTalkRequest_descriptor_;
}

const CMessageEndTalkRequest& CMessageEndTalkRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageEndTalkRequest* CMessageEndTalkRequest::default_instance_ = NULL;

CMessageEndTalkRequest* CMessageEndTalkRequest::New() const {
  return new CMessageEndTalkRequest;
}

void CMessageEndTalkRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npcentityid_ = 0u;
    taskid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageEndTalkRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 NpcEntityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcentityid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_TaskID;
        break;
      }
      
      // optional uint32 TaskID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TaskID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageEndTalkRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageEndTalkRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 NpcEntityID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->npcentityid(), output);
  }
  
  // optional uint32 TaskID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->taskid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageEndTalkRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 NpcEntityID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->npcentityid(), target);
  }
  
  // optional uint32 TaskID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->taskid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageEndTalkRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 NpcEntityID = 1;
    if (has_npcentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcentityid());
    }
    
    // optional uint32 TaskID = 2;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageEndTalkRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageEndTalkRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageEndTalkRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageEndTalkRequest::MergeFrom(const CMessageEndTalkRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_npcentityid(from.npcentityid());
    }
    if (from._has_bit(1)) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageEndTalkRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageEndTalkRequest::CopyFrom(const CMessageEndTalkRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageEndTalkRequest::Swap(CMessageEndTalkRequest* other) {
  if (other != this) {
    std::swap(npcentityid_, other->npcentityid_);
    std::swap(taskid_, other->taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageEndTalkRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageEndTalkRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageEndTalkRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageEndTalkRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageNpcTalkStateChangeNotice::kTaskIDFieldNumber;
const int CMessageNpcTalkStateChangeNotice::kStateFieldNumber;
const int CMessageNpcTalkStateChangeNotice::kNpcTempIDFieldNumber;
#endif  // !_MSC_VER

CMessageNpcTalkStateChangeNotice::CMessageNpcTalkStateChangeNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageNpcTalkStateChangeNotice::InitAsDefaultInstance() {}

CMessageNpcTalkStateChangeNotice::CMessageNpcTalkStateChangeNotice(const CMessageNpcTalkStateChangeNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageNpcTalkStateChangeNotice::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  state_ = 0u;
  npctempid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageNpcTalkStateChangeNotice::~CMessageNpcTalkStateChangeNotice() {
  SharedDtor();
}

void CMessageNpcTalkStateChangeNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageNpcTalkStateChangeNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageNpcTalkStateChangeNotice_descriptor_;
}

const CMessageNpcTalkStateChangeNotice& CMessageNpcTalkStateChangeNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageNpcTalkStateChangeNotice* CMessageNpcTalkStateChangeNotice::default_instance_ = NULL;

CMessageNpcTalkStateChangeNotice* CMessageNpcTalkStateChangeNotice::New() const {
  return new CMessageNpcTalkStateChangeNotice;
}

void CMessageNpcTalkStateChangeNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0u;
    state_ = 0u;
    npctempid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageNpcTalkStateChangeNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TaskID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_State;
        break;
      }
      
      // optional uint32 State = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_State:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &state_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_NpcTempID;
        break;
      }
      
      // optional uint32 NpcTempID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcTempID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npctempid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageNpcTalkStateChangeNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageNpcTalkStateChangeNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->taskid(), output);
  }
  
  // optional uint32 State = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->state(), output);
  }
  
  // optional uint32 NpcTempID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->npctempid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageNpcTalkStateChangeNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->taskid(), target);
  }
  
  // optional uint32 State = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->state(), target);
  }
  
  // optional uint32 NpcTempID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->npctempid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageNpcTalkStateChangeNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskid());
    }
    
    // optional uint32 State = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->state());
    }
    
    // optional uint32 NpcTempID = 3;
    if (has_npctempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npctempid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageNpcTalkStateChangeNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageNpcTalkStateChangeNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageNpcTalkStateChangeNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageNpcTalkStateChangeNotice::MergeFrom(const CMessageNpcTalkStateChangeNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_taskid(from.taskid());
    }
    if (from._has_bit(1)) {
      set_state(from.state());
    }
    if (from._has_bit(2)) {
      set_npctempid(from.npctempid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageNpcTalkStateChangeNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageNpcTalkStateChangeNotice::CopyFrom(const CMessageNpcTalkStateChangeNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageNpcTalkStateChangeNotice::Swap(CMessageNpcTalkStateChangeNotice* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(state_, other->state_);
    std::swap(npctempid_, other->npctempid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageNpcTalkStateChangeNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageNpcTalkStateChangeNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageNpcTalkStateChangeNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageNpcTalkStateChangeNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLockBaggageRequest::kItemIndexFieldNumber;
#endif  // !_MSC_VER

CMessageLockBaggageRequest::CMessageLockBaggageRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLockBaggageRequest::InitAsDefaultInstance() {}

CMessageLockBaggageRequest::CMessageLockBaggageRequest(const CMessageLockBaggageRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLockBaggageRequest::SharedCtor() {
  _cached_size_ = 0;
  itemindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLockBaggageRequest::~CMessageLockBaggageRequest() {
  SharedDtor();
}

void CMessageLockBaggageRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLockBaggageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLockBaggageRequest_descriptor_;
}

const CMessageLockBaggageRequest& CMessageLockBaggageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageLockBaggageRequest* CMessageLockBaggageRequest::default_instance_ = NULL;

CMessageLockBaggageRequest* CMessageLockBaggageRequest::New() const {
  return new CMessageLockBaggageRequest;
}

void CMessageLockBaggageRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLockBaggageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ItemIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemindex_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLockBaggageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLockBaggageRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ItemIndex = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->itemindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLockBaggageRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ItemIndex = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->itemindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLockBaggageRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ItemIndex = 1;
    if (has_itemindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemindex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLockBaggageRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLockBaggageRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLockBaggageRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLockBaggageRequest::MergeFrom(const CMessageLockBaggageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_itemindex(from.itemindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLockBaggageRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLockBaggageRequest::CopyFrom(const CMessageLockBaggageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLockBaggageRequest::Swap(CMessageLockBaggageRequest* other) {
  if (other != this) {
    std::swap(itemindex_, other->itemindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLockBaggageRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLockBaggageRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLockBaggageRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLockBaggageRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLockBaggageResponse::kItemIndexFieldNumber;
#endif  // !_MSC_VER

CMessageLockBaggageResponse::CMessageLockBaggageResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLockBaggageResponse::InitAsDefaultInstance() {}

CMessageLockBaggageResponse::CMessageLockBaggageResponse(const CMessageLockBaggageResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLockBaggageResponse::SharedCtor() {
  _cached_size_ = 0;
  itemindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLockBaggageResponse::~CMessageLockBaggageResponse() {
  SharedDtor();
}

void CMessageLockBaggageResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLockBaggageResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLockBaggageResponse_descriptor_;
}

const CMessageLockBaggageResponse& CMessageLockBaggageResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageLockBaggageResponse* CMessageLockBaggageResponse::default_instance_ = NULL;

CMessageLockBaggageResponse* CMessageLockBaggageResponse::New() const {
  return new CMessageLockBaggageResponse;
}

void CMessageLockBaggageResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLockBaggageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ItemIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemindex_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLockBaggageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLockBaggageResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ItemIndex = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->itemindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLockBaggageResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ItemIndex = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->itemindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLockBaggageResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ItemIndex = 1;
    if (has_itemindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemindex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLockBaggageResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLockBaggageResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLockBaggageResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLockBaggageResponse::MergeFrom(const CMessageLockBaggageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_itemindex(from.itemindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLockBaggageResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLockBaggageResponse::CopyFrom(const CMessageLockBaggageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLockBaggageResponse::Swap(CMessageLockBaggageResponse* other) {
  if (other != this) {
    std::swap(itemindex_, other->itemindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLockBaggageResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLockBaggageResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLockBaggageResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLockBaggageResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int TaskCondition::kTaskIDFieldNumber;
const int TaskCondition::kConditionFieldNumber;
const int TaskCondition::kTempIDFieldNumber;
const int TaskCondition::kNumFieldNumber;
#endif  // !_MSC_VER

TaskCondition::TaskCondition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TaskCondition::InitAsDefaultInstance() {}

TaskCondition::TaskCondition(const TaskCondition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TaskCondition::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  condition_ = 0u;
  tempid_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskCondition::~TaskCondition() {
  SharedDtor();
}

void TaskCondition::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* TaskCondition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskCondition_descriptor_;
}

const TaskCondition& TaskCondition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

TaskCondition* TaskCondition::default_instance_ = NULL;

TaskCondition* TaskCondition::New() const {
  return new TaskCondition;
}

void TaskCondition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0u;
    condition_ = 0u;
    tempid_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskCondition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional fixed32 TaskID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadFixed32(
              input, &taskid_));
        _set_bit(0);
        if (input->ExpectTag(21)) goto parse_Condition;
        break;
      }
      
      // optional fixed32 Condition = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_Condition:
        DO_(::google::protobuf::internal::WireFormat::ReadFixed32(
              input, &condition_));
        _set_bit(1);
        if (input->ExpectTag(29)) goto parse_TempID;
        break;
      }
      
      // optional fixed32 TempID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_TempID:
        DO_(::google::protobuf::internal::WireFormat::ReadFixed32(
              input, &tempid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Num;
        break;
      }
      
      // optional uint32 Num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Num:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &num_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TaskCondition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    TaskCondition::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional fixed32 TaskID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteFixed32(1, this->taskid(), output);
  }
  
  // optional fixed32 Condition = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteFixed32(2, this->condition(), output);
  }
  
  // optional fixed32 TempID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteFixed32(3, this->tempid(), output);
  }
  
  // optional uint32 Num = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TaskCondition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 TaskID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteFixed32ToArray(1, this->taskid(), target);
  }
  
  // optional fixed32 Condition = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteFixed32ToArray(2, this->condition(), target);
  }
  
  // optional fixed32 TempID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteFixed32ToArray(3, this->tempid(), target);
  }
  
  // optional uint32 Num = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TaskCondition::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 TaskID = 1;
    if (has_taskid()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 Condition = 2;
    if (has_condition()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 TempID = 3;
    if (has_tempid()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 Num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void TaskCondition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskCondition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskCondition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskCondition::MergeFrom(const TaskCondition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_taskid(from.taskid());
    }
    if (from._has_bit(1)) {
      set_condition(from.condition());
    }
    if (from._has_bit(2)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(3)) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskCondition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskCondition::CopyFrom(const TaskCondition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskCondition::Swap(TaskCondition* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(condition_, other->condition_);
    std::swap(tempid_, other->tempid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool TaskCondition::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* TaskCondition::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* TaskCondition::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return TaskCondition_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageUpdateTaskConditions::kContionsFieldNumber;
#endif  // !_MSC_VER

CMessageUpdateTaskConditions::CMessageUpdateTaskConditions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUpdateTaskConditions::InitAsDefaultInstance() {}

CMessageUpdateTaskConditions::CMessageUpdateTaskConditions(const CMessageUpdateTaskConditions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUpdateTaskConditions::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUpdateTaskConditions::~CMessageUpdateTaskConditions() {
  SharedDtor();
}

void CMessageUpdateTaskConditions::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageUpdateTaskConditions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUpdateTaskConditions_descriptor_;
}

const CMessageUpdateTaskConditions& CMessageUpdateTaskConditions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageUpdateTaskConditions* CMessageUpdateTaskConditions::default_instance_ = NULL;

CMessageUpdateTaskConditions* CMessageUpdateTaskConditions::New() const {
  return new CMessageUpdateTaskConditions;
}

void CMessageUpdateTaskConditions::Clear() {
  contions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUpdateTaskConditions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .TaskCondition Contions = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Contions:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_contions()));
        if (input->ExpectTag(10)) goto parse_Contions;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUpdateTaskConditions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUpdateTaskConditions::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .TaskCondition Contions = 1;
  for (int i = 0; i < this->contions_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->contions(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUpdateTaskConditions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TaskCondition Contions = 1;
  for (int i = 0; i < this->contions_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->contions(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUpdateTaskConditions::ByteSize() const {
  int total_size = 0;
  
  // repeated .TaskCondition Contions = 1;
  total_size += 1 * this->contions_size();
  for (int i = 0; i < this->contions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->contions(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUpdateTaskConditions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUpdateTaskConditions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUpdateTaskConditions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUpdateTaskConditions::MergeFrom(const CMessageUpdateTaskConditions& from) {
  GOOGLE_CHECK_NE(&from, this);
  contions_.MergeFrom(from.contions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUpdateTaskConditions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUpdateTaskConditions::CopyFrom(const CMessageUpdateTaskConditions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUpdateTaskConditions::Swap(CMessageUpdateTaskConditions* other) {
  if (other != this) {
    contions_.Swap(&other->contions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUpdateTaskConditions::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUpdateTaskConditions::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUpdateTaskConditions::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUpdateTaskConditions_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMessageClearTaskNotify::CMessageClearTaskNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageClearTaskNotify::InitAsDefaultInstance() {}

CMessageClearTaskNotify::CMessageClearTaskNotify(const CMessageClearTaskNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageClearTaskNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageClearTaskNotify::~CMessageClearTaskNotify() {
  SharedDtor();
}

void CMessageClearTaskNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageClearTaskNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageClearTaskNotify_descriptor_;
}

const CMessageClearTaskNotify& CMessageClearTaskNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageClearTaskNotify* CMessageClearTaskNotify::default_instance_ = NULL;

CMessageClearTaskNotify* CMessageClearTaskNotify::New() const {
  return new CMessageClearTaskNotify;
}

void CMessageClearTaskNotify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageClearTaskNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMessageClearTaskNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageClearTaskNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageClearTaskNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageClearTaskNotify::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageClearTaskNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageClearTaskNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageClearTaskNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageClearTaskNotify::MergeFrom(const CMessageClearTaskNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageClearTaskNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageClearTaskNotify::CopyFrom(const CMessageClearTaskNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageClearTaskNotify::Swap(CMessageClearTaskNotify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageClearTaskNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageClearTaskNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageClearTaskNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageClearTaskNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMessageTakeOffItemRequest::CMessageTakeOffItemRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTakeOffItemRequest::InitAsDefaultInstance() {}

CMessageTakeOffItemRequest::CMessageTakeOffItemRequest(const CMessageTakeOffItemRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTakeOffItemRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTakeOffItemRequest::~CMessageTakeOffItemRequest() {
  SharedDtor();
}

void CMessageTakeOffItemRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTakeOffItemRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTakeOffItemRequest_descriptor_;
}

const CMessageTakeOffItemRequest& CMessageTakeOffItemRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTakeOffItemRequest* CMessageTakeOffItemRequest::default_instance_ = NULL;

CMessageTakeOffItemRequest* CMessageTakeOffItemRequest::New() const {
  return new CMessageTakeOffItemRequest;
}

void CMessageTakeOffItemRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTakeOffItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMessageTakeOffItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTakeOffItemRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTakeOffItemRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTakeOffItemRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTakeOffItemRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTakeOffItemRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTakeOffItemRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTakeOffItemRequest::MergeFrom(const CMessageTakeOffItemRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTakeOffItemRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTakeOffItemRequest::CopyFrom(const CMessageTakeOffItemRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTakeOffItemRequest::Swap(CMessageTakeOffItemRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTakeOffItemRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTakeOffItemRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTakeOffItemRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTakeOffItemRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetFamilyTaskRequest::kTaskTypesFieldNumber;
#endif  // !_MSC_VER

CMessageGetFamilyTaskRequest::CMessageGetFamilyTaskRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetFamilyTaskRequest::InitAsDefaultInstance() {}

CMessageGetFamilyTaskRequest::CMessageGetFamilyTaskRequest(const CMessageGetFamilyTaskRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetFamilyTaskRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetFamilyTaskRequest::~CMessageGetFamilyTaskRequest() {
  SharedDtor();
}

void CMessageGetFamilyTaskRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGetFamilyTaskRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetFamilyTaskRequest_descriptor_;
}

const CMessageGetFamilyTaskRequest& CMessageGetFamilyTaskRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetFamilyTaskRequest* CMessageGetFamilyTaskRequest::default_instance_ = NULL;

CMessageGetFamilyTaskRequest* CMessageGetFamilyTaskRequest::New() const {
  return new CMessageGetFamilyTaskRequest;
}

void CMessageGetFamilyTaskRequest::Clear() {
  tasktypes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetFamilyTaskRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated uint32 TaskTypes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TaskTypes:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_tasktypes(value);
        if (input->ExpectTag(8)) goto parse_TaskTypes;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetFamilyTaskRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetFamilyTaskRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated uint32 TaskTypes = 1;
  for (int i = 0; i < this->tasktypes_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tasktypes(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetFamilyTaskRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 TaskTypes = 1;
  for (int i = 0; i < this->tasktypes_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tasktypes(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetFamilyTaskRequest::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 TaskTypes = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->tasktypes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->tasktypes(i));
    }
    total_size += 1 * this->tasktypes_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetFamilyTaskRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetFamilyTaskRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetFamilyTaskRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetFamilyTaskRequest::MergeFrom(const CMessageGetFamilyTaskRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  tasktypes_.MergeFrom(from.tasktypes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetFamilyTaskRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetFamilyTaskRequest::CopyFrom(const CMessageGetFamilyTaskRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetFamilyTaskRequest::Swap(CMessageGetFamilyTaskRequest* other) {
  if (other != this) {
    tasktypes_.Swap(&other->tasktypes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetFamilyTaskRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetFamilyTaskRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetFamilyTaskRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetFamilyTaskRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int SingleFamilyTaskResponse::kTaskIDsFieldNumber;
const int SingleFamilyTaskResponse::kTodayTimesFieldNumber;
#endif  // !_MSC_VER

SingleFamilyTaskResponse::SingleFamilyTaskResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleFamilyTaskResponse::InitAsDefaultInstance() {}

SingleFamilyTaskResponse::SingleFamilyTaskResponse(const SingleFamilyTaskResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleFamilyTaskResponse::SharedCtor() {
  _cached_size_ = 0;
  taskids_ = 0u;
  todaytimes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleFamilyTaskResponse::~SingleFamilyTaskResponse() {
  SharedDtor();
}

void SingleFamilyTaskResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SingleFamilyTaskResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleFamilyTaskResponse_descriptor_;
}

const SingleFamilyTaskResponse& SingleFamilyTaskResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

SingleFamilyTaskResponse* SingleFamilyTaskResponse::default_instance_ = NULL;

SingleFamilyTaskResponse* SingleFamilyTaskResponse::New() const {
  return new SingleFamilyTaskResponse;
}

void SingleFamilyTaskResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskids_ = 0u;
    todaytimes_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleFamilyTaskResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TaskIDs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskids_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_TodayTimes;
        break;
      }
      
      // optional uint32 TodayTimes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TodayTimes:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &todaytimes_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleFamilyTaskResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SingleFamilyTaskResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TaskIDs = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->taskids(), output);
  }
  
  // optional uint32 TodayTimes = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->todaytimes(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleFamilyTaskResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TaskIDs = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->taskids(), target);
  }
  
  // optional uint32 TodayTimes = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->todaytimes(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleFamilyTaskResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskIDs = 1;
    if (has_taskids()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskids());
    }
    
    // optional uint32 TodayTimes = 2;
    if (has_todaytimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->todaytimes());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SingleFamilyTaskResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleFamilyTaskResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleFamilyTaskResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleFamilyTaskResponse::MergeFrom(const SingleFamilyTaskResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_taskids(from.taskids());
    }
    if (from._has_bit(1)) {
      set_todaytimes(from.todaytimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleFamilyTaskResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleFamilyTaskResponse::CopyFrom(const SingleFamilyTaskResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleFamilyTaskResponse::Swap(SingleFamilyTaskResponse* other) {
  if (other != this) {
    std::swap(taskids_, other->taskids_);
    std::swap(todaytimes_, other->todaytimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool SingleFamilyTaskResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* SingleFamilyTaskResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* SingleFamilyTaskResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return SingleFamilyTaskResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetFamilyTaskResponse::kTasksFieldNumber;
#endif  // !_MSC_VER

CMessageGetFamilyTaskResponse::CMessageGetFamilyTaskResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetFamilyTaskResponse::InitAsDefaultInstance() {}

CMessageGetFamilyTaskResponse::CMessageGetFamilyTaskResponse(const CMessageGetFamilyTaskResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetFamilyTaskResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetFamilyTaskResponse::~CMessageGetFamilyTaskResponse() {
  SharedDtor();
}

void CMessageGetFamilyTaskResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGetFamilyTaskResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetFamilyTaskResponse_descriptor_;
}

const CMessageGetFamilyTaskResponse& CMessageGetFamilyTaskResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetFamilyTaskResponse* CMessageGetFamilyTaskResponse::default_instance_ = NULL;

CMessageGetFamilyTaskResponse* CMessageGetFamilyTaskResponse::New() const {
  return new CMessageGetFamilyTaskResponse;
}

void CMessageGetFamilyTaskResponse::Clear() {
  tasks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetFamilyTaskResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .SingleFamilyTaskResponse Tasks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Tasks:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_tasks()));
        if (input->ExpectTag(10)) goto parse_Tasks;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetFamilyTaskResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetFamilyTaskResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .SingleFamilyTaskResponse Tasks = 1;
  for (int i = 0; i < this->tasks_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->tasks(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetFamilyTaskResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SingleFamilyTaskResponse Tasks = 1;
  for (int i = 0; i < this->tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->tasks(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetFamilyTaskResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .SingleFamilyTaskResponse Tasks = 1;
  total_size += 1 * this->tasks_size();
  for (int i = 0; i < this->tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->tasks(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetFamilyTaskResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetFamilyTaskResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetFamilyTaskResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetFamilyTaskResponse::MergeFrom(const CMessageGetFamilyTaskResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  tasks_.MergeFrom(from.tasks_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetFamilyTaskResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetFamilyTaskResponse::CopyFrom(const CMessageGetFamilyTaskResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetFamilyTaskResponse::Swap(CMessageGetFamilyTaskResponse* other) {
  if (other != this) {
    tasks_.Swap(&other->tasks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetFamilyTaskResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetFamilyTaskResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetFamilyTaskResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetFamilyTaskResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMessageGetCorpsTaskRequest::CMessageGetCorpsTaskRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetCorpsTaskRequest::InitAsDefaultInstance() {}

CMessageGetCorpsTaskRequest::CMessageGetCorpsTaskRequest(const CMessageGetCorpsTaskRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetCorpsTaskRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetCorpsTaskRequest::~CMessageGetCorpsTaskRequest() {
  SharedDtor();
}

void CMessageGetCorpsTaskRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGetCorpsTaskRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCorpsTaskRequest_descriptor_;
}

const CMessageGetCorpsTaskRequest& CMessageGetCorpsTaskRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetCorpsTaskRequest* CMessageGetCorpsTaskRequest::default_instance_ = NULL;

CMessageGetCorpsTaskRequest* CMessageGetCorpsTaskRequest::New() const {
  return new CMessageGetCorpsTaskRequest;
}

void CMessageGetCorpsTaskRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetCorpsTaskRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMessageGetCorpsTaskRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetCorpsTaskRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetCorpsTaskRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetCorpsTaskRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetCorpsTaskRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetCorpsTaskRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetCorpsTaskRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetCorpsTaskRequest::MergeFrom(const CMessageGetCorpsTaskRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetCorpsTaskRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCorpsTaskRequest::CopyFrom(const CMessageGetCorpsTaskRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCorpsTaskRequest::Swap(CMessageGetCorpsTaskRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetCorpsTaskRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetCorpsTaskRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetCorpsTaskRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCorpsTaskRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetCorpsTaskResponse::kTasksFieldNumber;
#endif  // !_MSC_VER

CMessageGetCorpsTaskResponse::CMessageGetCorpsTaskResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetCorpsTaskResponse::InitAsDefaultInstance() {}

CMessageGetCorpsTaskResponse::CMessageGetCorpsTaskResponse(const CMessageGetCorpsTaskResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetCorpsTaskResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetCorpsTaskResponse::~CMessageGetCorpsTaskResponse() {
  SharedDtor();
}

void CMessageGetCorpsTaskResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGetCorpsTaskResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCorpsTaskResponse_descriptor_;
}

const CMessageGetCorpsTaskResponse& CMessageGetCorpsTaskResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetCorpsTaskResponse* CMessageGetCorpsTaskResponse::default_instance_ = NULL;

CMessageGetCorpsTaskResponse* CMessageGetCorpsTaskResponse::New() const {
  return new CMessageGetCorpsTaskResponse;
}

void CMessageGetCorpsTaskResponse::Clear() {
  tasks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetCorpsTaskResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .SingleFamilyTaskResponse Tasks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Tasks:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_tasks()));
        if (input->ExpectTag(10)) goto parse_Tasks;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetCorpsTaskResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetCorpsTaskResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .SingleFamilyTaskResponse Tasks = 1;
  for (int i = 0; i < this->tasks_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->tasks(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetCorpsTaskResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SingleFamilyTaskResponse Tasks = 1;
  for (int i = 0; i < this->tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->tasks(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetCorpsTaskResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .SingleFamilyTaskResponse Tasks = 1;
  total_size += 1 * this->tasks_size();
  for (int i = 0; i < this->tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->tasks(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetCorpsTaskResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetCorpsTaskResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetCorpsTaskResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetCorpsTaskResponse::MergeFrom(const CMessageGetCorpsTaskResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  tasks_.MergeFrom(from.tasks_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetCorpsTaskResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCorpsTaskResponse::CopyFrom(const CMessageGetCorpsTaskResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCorpsTaskResponse::Swap(CMessageGetCorpsTaskResponse* other) {
  if (other != this) {
    tasks_.Swap(&other->tasks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetCorpsTaskResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetCorpsTaskResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetCorpsTaskResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCorpsTaskResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMessageGetCountryTaskRequest::CMessageGetCountryTaskRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetCountryTaskRequest::InitAsDefaultInstance() {}

CMessageGetCountryTaskRequest::CMessageGetCountryTaskRequest(const CMessageGetCountryTaskRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetCountryTaskRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetCountryTaskRequest::~CMessageGetCountryTaskRequest() {
  SharedDtor();
}

void CMessageGetCountryTaskRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGetCountryTaskRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCountryTaskRequest_descriptor_;
}

const CMessageGetCountryTaskRequest& CMessageGetCountryTaskRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetCountryTaskRequest* CMessageGetCountryTaskRequest::default_instance_ = NULL;

CMessageGetCountryTaskRequest* CMessageGetCountryTaskRequest::New() const {
  return new CMessageGetCountryTaskRequest;
}

void CMessageGetCountryTaskRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetCountryTaskRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMessageGetCountryTaskRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetCountryTaskRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetCountryTaskRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetCountryTaskRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetCountryTaskRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetCountryTaskRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetCountryTaskRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetCountryTaskRequest::MergeFrom(const CMessageGetCountryTaskRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetCountryTaskRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCountryTaskRequest::CopyFrom(const CMessageGetCountryTaskRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCountryTaskRequest::Swap(CMessageGetCountryTaskRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetCountryTaskRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetCountryTaskRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetCountryTaskRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCountryTaskRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetCountryTaskResponse::kTasksFieldNumber;
#endif  // !_MSC_VER

CMessageGetCountryTaskResponse::CMessageGetCountryTaskResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetCountryTaskResponse::InitAsDefaultInstance() {}

CMessageGetCountryTaskResponse::CMessageGetCountryTaskResponse(const CMessageGetCountryTaskResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetCountryTaskResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetCountryTaskResponse::~CMessageGetCountryTaskResponse() {
  SharedDtor();
}

void CMessageGetCountryTaskResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGetCountryTaskResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCountryTaskResponse_descriptor_;
}

const CMessageGetCountryTaskResponse& CMessageGetCountryTaskResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetCountryTaskResponse* CMessageGetCountryTaskResponse::default_instance_ = NULL;

CMessageGetCountryTaskResponse* CMessageGetCountryTaskResponse::New() const {
  return new CMessageGetCountryTaskResponse;
}

void CMessageGetCountryTaskResponse::Clear() {
  tasks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetCountryTaskResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .SingleFamilyTaskResponse Tasks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Tasks:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_tasks()));
        if (input->ExpectTag(10)) goto parse_Tasks;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetCountryTaskResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetCountryTaskResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .SingleFamilyTaskResponse Tasks = 1;
  for (int i = 0; i < this->tasks_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->tasks(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetCountryTaskResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SingleFamilyTaskResponse Tasks = 1;
  for (int i = 0; i < this->tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->tasks(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetCountryTaskResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .SingleFamilyTaskResponse Tasks = 1;
  total_size += 1 * this->tasks_size();
  for (int i = 0; i < this->tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->tasks(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetCountryTaskResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetCountryTaskResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetCountryTaskResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetCountryTaskResponse::MergeFrom(const CMessageGetCountryTaskResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  tasks_.MergeFrom(from.tasks_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetCountryTaskResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCountryTaskResponse::CopyFrom(const CMessageGetCountryTaskResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCountryTaskResponse::Swap(CMessageGetCountryTaskResponse* other) {
  if (other != this) {
    tasks_.Swap(&other->tasks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetCountryTaskResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetCountryTaskResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetCountryTaskResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCountryTaskResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMessageGetCampTaskRequest::CMessageGetCampTaskRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetCampTaskRequest::InitAsDefaultInstance() {}

CMessageGetCampTaskRequest::CMessageGetCampTaskRequest(const CMessageGetCampTaskRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetCampTaskRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetCampTaskRequest::~CMessageGetCampTaskRequest() {
  SharedDtor();
}

void CMessageGetCampTaskRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGetCampTaskRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCampTaskRequest_descriptor_;
}

const CMessageGetCampTaskRequest& CMessageGetCampTaskRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetCampTaskRequest* CMessageGetCampTaskRequest::default_instance_ = NULL;

CMessageGetCampTaskRequest* CMessageGetCampTaskRequest::New() const {
  return new CMessageGetCampTaskRequest;
}

void CMessageGetCampTaskRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetCampTaskRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMessageGetCampTaskRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetCampTaskRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetCampTaskRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetCampTaskRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetCampTaskRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetCampTaskRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetCampTaskRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetCampTaskRequest::MergeFrom(const CMessageGetCampTaskRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetCampTaskRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCampTaskRequest::CopyFrom(const CMessageGetCampTaskRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCampTaskRequest::Swap(CMessageGetCampTaskRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetCampTaskRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetCampTaskRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetCampTaskRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCampTaskRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetCampTaskResponse::kTasksFieldNumber;
#endif  // !_MSC_VER

CMessageGetCampTaskResponse::CMessageGetCampTaskResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetCampTaskResponse::InitAsDefaultInstance() {}

CMessageGetCampTaskResponse::CMessageGetCampTaskResponse(const CMessageGetCampTaskResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetCampTaskResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetCampTaskResponse::~CMessageGetCampTaskResponse() {
  SharedDtor();
}

void CMessageGetCampTaskResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGetCampTaskResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCampTaskResponse_descriptor_;
}

const CMessageGetCampTaskResponse& CMessageGetCampTaskResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetCampTaskResponse* CMessageGetCampTaskResponse::default_instance_ = NULL;

CMessageGetCampTaskResponse* CMessageGetCampTaskResponse::New() const {
  return new CMessageGetCampTaskResponse;
}

void CMessageGetCampTaskResponse::Clear() {
  tasks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetCampTaskResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .SingleFamilyTaskResponse Tasks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Tasks:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_tasks()));
        if (input->ExpectTag(10)) goto parse_Tasks;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetCampTaskResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetCampTaskResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .SingleFamilyTaskResponse Tasks = 1;
  for (int i = 0; i < this->tasks_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->tasks(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetCampTaskResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SingleFamilyTaskResponse Tasks = 1;
  for (int i = 0; i < this->tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->tasks(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetCampTaskResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .SingleFamilyTaskResponse Tasks = 1;
  total_size += 1 * this->tasks_size();
  for (int i = 0; i < this->tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->tasks(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetCampTaskResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetCampTaskResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetCampTaskResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetCampTaskResponse::MergeFrom(const CMessageGetCampTaskResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  tasks_.MergeFrom(from.tasks_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetCampTaskResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCampTaskResponse::CopyFrom(const CMessageGetCampTaskResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCampTaskResponse::Swap(CMessageGetCampTaskResponse* other) {
  if (other != this) {
    tasks_.Swap(&other->tasks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetCampTaskResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetCampTaskResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetCampTaskResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCampTaskResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetChairManTaskRequest::kNpcEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageGetChairManTaskRequest::CMessageGetChairManTaskRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetChairManTaskRequest::InitAsDefaultInstance() {}

CMessageGetChairManTaskRequest::CMessageGetChairManTaskRequest(const CMessageGetChairManTaskRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetChairManTaskRequest::SharedCtor() {
  _cached_size_ = 0;
  npcentityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetChairManTaskRequest::~CMessageGetChairManTaskRequest() {
  SharedDtor();
}

void CMessageGetChairManTaskRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGetChairManTaskRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetChairManTaskRequest_descriptor_;
}

const CMessageGetChairManTaskRequest& CMessageGetChairManTaskRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetChairManTaskRequest* CMessageGetChairManTaskRequest::default_instance_ = NULL;

CMessageGetChairManTaskRequest* CMessageGetChairManTaskRequest::New() const {
  return new CMessageGetChairManTaskRequest;
}

void CMessageGetChairManTaskRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npcentityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetChairManTaskRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 NpcEntityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcentityid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetChairManTaskRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetChairManTaskRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 NpcEntityID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->npcentityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetChairManTaskRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 NpcEntityID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->npcentityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetChairManTaskRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 NpcEntityID = 1;
    if (has_npcentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcentityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetChairManTaskRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetChairManTaskRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetChairManTaskRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetChairManTaskRequest::MergeFrom(const CMessageGetChairManTaskRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_npcentityid(from.npcentityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetChairManTaskRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetChairManTaskRequest::CopyFrom(const CMessageGetChairManTaskRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetChairManTaskRequest::Swap(CMessageGetChairManTaskRequest* other) {
  if (other != this) {
    std::swap(npcentityid_, other->npcentityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetChairManTaskRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetChairManTaskRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetChairManTaskRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetChairManTaskRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetChairManTaskResponse::kTaskIDsFieldNumber;
#endif  // !_MSC_VER

CMessageGetChairManTaskResponse::CMessageGetChairManTaskResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetChairManTaskResponse::InitAsDefaultInstance() {}

CMessageGetChairManTaskResponse::CMessageGetChairManTaskResponse(const CMessageGetChairManTaskResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetChairManTaskResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetChairManTaskResponse::~CMessageGetChairManTaskResponse() {
  SharedDtor();
}

void CMessageGetChairManTaskResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGetChairManTaskResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetChairManTaskResponse_descriptor_;
}

const CMessageGetChairManTaskResponse& CMessageGetChairManTaskResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetChairManTaskResponse* CMessageGetChairManTaskResponse::default_instance_ = NULL;

CMessageGetChairManTaskResponse* CMessageGetChairManTaskResponse::New() const {
  return new CMessageGetChairManTaskResponse;
}

void CMessageGetChairManTaskResponse::Clear() {
  taskids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetChairManTaskResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .SingleChairManTask TaskIDs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_TaskIDs:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_taskids()));
        if (input->ExpectTag(10)) goto parse_TaskIDs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetChairManTaskResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetChairManTaskResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .SingleChairManTask TaskIDs = 1;
  for (int i = 0; i < this->taskids_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->taskids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetChairManTaskResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SingleChairManTask TaskIDs = 1;
  for (int i = 0; i < this->taskids_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->taskids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetChairManTaskResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .SingleChairManTask TaskIDs = 1;
  total_size += 1 * this->taskids_size();
  for (int i = 0; i < this->taskids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->taskids(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetChairManTaskResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetChairManTaskResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetChairManTaskResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetChairManTaskResponse::MergeFrom(const CMessageGetChairManTaskResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  taskids_.MergeFrom(from.taskids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetChairManTaskResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetChairManTaskResponse::CopyFrom(const CMessageGetChairManTaskResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetChairManTaskResponse::Swap(CMessageGetChairManTaskResponse* other) {
  if (other != this) {
    taskids_.Swap(&other->taskids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetChairManTaskResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetChairManTaskResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetChairManTaskResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetChairManTaskResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageGetTeamLoopErrNotify::_default_charname_;
#ifndef _MSC_VER
const int CMessageGetTeamLoopErrNotify::kCharNameFieldNumber;
const int CMessageGetTeamLoopErrNotify::kErrCodeFieldNumber;
#endif  // !_MSC_VER

CMessageGetTeamLoopErrNotify::CMessageGetTeamLoopErrNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetTeamLoopErrNotify::InitAsDefaultInstance() {}

CMessageGetTeamLoopErrNotify::CMessageGetTeamLoopErrNotify(const CMessageGetTeamLoopErrNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetTeamLoopErrNotify::SharedCtor() {
  _cached_size_ = 0;
  charname_ = const_cast< ::std::string*>(&_default_charname_);
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetTeamLoopErrNotify::~CMessageGetTeamLoopErrNotify() {
  SharedDtor();
}

void CMessageGetTeamLoopErrNotify::SharedDtor() {
  if (charname_ != &_default_charname_) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGetTeamLoopErrNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetTeamLoopErrNotify_descriptor_;
}

const CMessageGetTeamLoopErrNotify& CMessageGetTeamLoopErrNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetTeamLoopErrNotify* CMessageGetTeamLoopErrNotify::default_instance_ = NULL;

CMessageGetTeamLoopErrNotify* CMessageGetTeamLoopErrNotify::New() const {
  return new CMessageGetTeamLoopErrNotify;
}

void CMessageGetTeamLoopErrNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (charname_ != &_default_charname_) {
        charname_->clear();
      }
    }
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetTeamLoopErrNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string CharName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_charname()));
        if (input->ExpectTag(16)) goto parse_ErrCode;
        break;
      }
      
      // optional uint32 ErrCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ErrCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetTeamLoopErrNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetTeamLoopErrNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string CharName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->charname(), output);
  }
  
  // optional uint32 ErrCode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetTeamLoopErrNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string CharName = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->charname(), target);
  }
  
  // optional uint32 ErrCode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetTeamLoopErrNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string CharName = 1;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->charname());
    }
    
    // optional uint32 ErrCode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetTeamLoopErrNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetTeamLoopErrNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetTeamLoopErrNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetTeamLoopErrNotify::MergeFrom(const CMessageGetTeamLoopErrNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charname(from.charname());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetTeamLoopErrNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetTeamLoopErrNotify::CopyFrom(const CMessageGetTeamLoopErrNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetTeamLoopErrNotify::Swap(CMessageGetTeamLoopErrNotify* other) {
  if (other != this) {
    std::swap(charname_, other->charname_);
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetTeamLoopErrNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetTeamLoopErrNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetTeamLoopErrNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetTeamLoopErrNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBPubslishList::kTaskIDFieldNumber;
const int PBPubslishList::kTaskStateFieldNumber;
#endif  // !_MSC_VER

PBPubslishList::PBPubslishList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPubslishList::InitAsDefaultInstance() {}

PBPubslishList::PBPubslishList(const PBPubslishList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPubslishList::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  taskstate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPubslishList::~PBPubslishList() {
  SharedDtor();
}

void PBPubslishList::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBPubslishList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPubslishList_descriptor_;
}

const PBPubslishList& PBPubslishList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

PBPubslishList* PBPubslishList::default_instance_ = NULL;

PBPubslishList* PBPubslishList::New() const {
  return new PBPubslishList;
}

void PBPubslishList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0u;
    taskstate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPubslishList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TaskID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_TaskState;
        break;
      }
      
      // optional uint32 TaskState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TaskState:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskstate_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPubslishList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBPubslishList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->taskid(), output);
  }
  
  // optional uint32 TaskState = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->taskstate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPubslishList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->taskid(), target);
  }
  
  // optional uint32 TaskState = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->taskstate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPubslishList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskid());
    }
    
    // optional uint32 TaskState = 2;
    if (has_taskstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskstate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBPubslishList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPubslishList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPubslishList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPubslishList::MergeFrom(const PBPubslishList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_taskid(from.taskid());
    }
    if (from._has_bit(1)) {
      set_taskstate(from.taskstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPubslishList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPubslishList::CopyFrom(const PBPubslishList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPubslishList::Swap(PBPubslishList* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(taskstate_, other->taskstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBPubslishList::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBPubslishList::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBPubslishList::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBPubslishList_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCheckGroupPublishRequest::kPublishTypeFieldNumber;
#endif  // !_MSC_VER

CMessageCheckGroupPublishRequest::CMessageCheckGroupPublishRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCheckGroupPublishRequest::InitAsDefaultInstance() {}

CMessageCheckGroupPublishRequest::CMessageCheckGroupPublishRequest(const CMessageCheckGroupPublishRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCheckGroupPublishRequest::SharedCtor() {
  _cached_size_ = 0;
  publishtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCheckGroupPublishRequest::~CMessageCheckGroupPublishRequest() {
  SharedDtor();
}

void CMessageCheckGroupPublishRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCheckGroupPublishRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCheckGroupPublishRequest_descriptor_;
}

const CMessageCheckGroupPublishRequest& CMessageCheckGroupPublishRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCheckGroupPublishRequest* CMessageCheckGroupPublishRequest::default_instance_ = NULL;

CMessageCheckGroupPublishRequest* CMessageCheckGroupPublishRequest::New() const {
  return new CMessageCheckGroupPublishRequest;
}

void CMessageCheckGroupPublishRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    publishtype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCheckGroupPublishRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 PublishType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &publishtype_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCheckGroupPublishRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCheckGroupPublishRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 PublishType = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->publishtype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCheckGroupPublishRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 PublishType = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->publishtype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCheckGroupPublishRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 PublishType = 1;
    if (has_publishtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->publishtype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCheckGroupPublishRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCheckGroupPublishRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCheckGroupPublishRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCheckGroupPublishRequest::MergeFrom(const CMessageCheckGroupPublishRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_publishtype(from.publishtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCheckGroupPublishRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCheckGroupPublishRequest::CopyFrom(const CMessageCheckGroupPublishRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCheckGroupPublishRequest::Swap(CMessageCheckGroupPublishRequest* other) {
  if (other != this) {
    std::swap(publishtype_, other->publishtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCheckGroupPublishRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCheckGroupPublishRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCheckGroupPublishRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCheckGroupPublishRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessagePublishGroupTaskRequest::kTaskIDFieldNumber;
const int CMessagePublishGroupTaskRequest::kPublishTypeFieldNumber;
#endif  // !_MSC_VER

CMessagePublishGroupTaskRequest::CMessagePublishGroupTaskRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePublishGroupTaskRequest::InitAsDefaultInstance() {}

CMessagePublishGroupTaskRequest::CMessagePublishGroupTaskRequest(const CMessagePublishGroupTaskRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePublishGroupTaskRequest::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  publishtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePublishGroupTaskRequest::~CMessagePublishGroupTaskRequest() {
  SharedDtor();
}

void CMessagePublishGroupTaskRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessagePublishGroupTaskRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePublishGroupTaskRequest_descriptor_;
}

const CMessagePublishGroupTaskRequest& CMessagePublishGroupTaskRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePublishGroupTaskRequest* CMessagePublishGroupTaskRequest::default_instance_ = NULL;

CMessagePublishGroupTaskRequest* CMessagePublishGroupTaskRequest::New() const {
  return new CMessagePublishGroupTaskRequest;
}

void CMessagePublishGroupTaskRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0u;
    publishtype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePublishGroupTaskRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TaskID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_PublishType;
        break;
      }
      
      // optional uint32 PublishType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PublishType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &publishtype_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePublishGroupTaskRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePublishGroupTaskRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->taskid(), output);
  }
  
  // optional uint32 PublishType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->publishtype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePublishGroupTaskRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->taskid(), target);
  }
  
  // optional uint32 PublishType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->publishtype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePublishGroupTaskRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskid());
    }
    
    // optional uint32 PublishType = 2;
    if (has_publishtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->publishtype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePublishGroupTaskRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePublishGroupTaskRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePublishGroupTaskRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePublishGroupTaskRequest::MergeFrom(const CMessagePublishGroupTaskRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_taskid(from.taskid());
    }
    if (from._has_bit(1)) {
      set_publishtype(from.publishtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePublishGroupTaskRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePublishGroupTaskRequest::CopyFrom(const CMessagePublishGroupTaskRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePublishGroupTaskRequest::Swap(CMessagePublishGroupTaskRequest* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(publishtype_, other->publishtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePublishGroupTaskRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePublishGroupTaskRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePublishGroupTaskRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePublishGroupTaskRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCheckGroupPublishResponse::kPublishTypeFieldNumber;
const int CMessageCheckGroupPublishResponse::kTasksFieldNumber;
#endif  // !_MSC_VER

CMessageCheckGroupPublishResponse::CMessageCheckGroupPublishResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCheckGroupPublishResponse::InitAsDefaultInstance() {}

CMessageCheckGroupPublishResponse::CMessageCheckGroupPublishResponse(const CMessageCheckGroupPublishResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCheckGroupPublishResponse::SharedCtor() {
  _cached_size_ = 0;
  publishtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCheckGroupPublishResponse::~CMessageCheckGroupPublishResponse() {
  SharedDtor();
}

void CMessageCheckGroupPublishResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCheckGroupPublishResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCheckGroupPublishResponse_descriptor_;
}

const CMessageCheckGroupPublishResponse& CMessageCheckGroupPublishResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCheckGroupPublishResponse* CMessageCheckGroupPublishResponse::default_instance_ = NULL;

CMessageCheckGroupPublishResponse* CMessageCheckGroupPublishResponse::New() const {
  return new CMessageCheckGroupPublishResponse;
}

void CMessageCheckGroupPublishResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    publishtype_ = 0u;
  }
  tasks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCheckGroupPublishResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 PublishType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &publishtype_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Tasks;
        break;
      }
      
      // repeated .PBPubslishList Tasks = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Tasks:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_tasks()));
        if (input->ExpectTag(18)) goto parse_Tasks;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCheckGroupPublishResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCheckGroupPublishResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 PublishType = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->publishtype(), output);
  }
  
  // repeated .PBPubslishList Tasks = 2;
  for (int i = 0; i < this->tasks_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->tasks(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCheckGroupPublishResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 PublishType = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->publishtype(), target);
  }
  
  // repeated .PBPubslishList Tasks = 2;
  for (int i = 0; i < this->tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->tasks(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCheckGroupPublishResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 PublishType = 1;
    if (has_publishtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->publishtype());
    }
    
  }
  // repeated .PBPubslishList Tasks = 2;
  total_size += 1 * this->tasks_size();
  for (int i = 0; i < this->tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->tasks(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCheckGroupPublishResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCheckGroupPublishResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCheckGroupPublishResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCheckGroupPublishResponse::MergeFrom(const CMessageCheckGroupPublishResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  tasks_.MergeFrom(from.tasks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_publishtype(from.publishtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCheckGroupPublishResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCheckGroupPublishResponse::CopyFrom(const CMessageCheckGroupPublishResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCheckGroupPublishResponse::Swap(CMessageCheckGroupPublishResponse* other) {
  if (other != this) {
    std::swap(publishtype_, other->publishtype_);
    tasks_.Swap(&other->tasks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCheckGroupPublishResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCheckGroupPublishResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCheckGroupPublishResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCheckGroupPublishResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessagePublishGroupTaskResponse::kTaskIDFieldNumber;
const int CMessagePublishGroupTaskResponse::kPublishTypeFieldNumber;
#endif  // !_MSC_VER

CMessagePublishGroupTaskResponse::CMessagePublishGroupTaskResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePublishGroupTaskResponse::InitAsDefaultInstance() {}

CMessagePublishGroupTaskResponse::CMessagePublishGroupTaskResponse(const CMessagePublishGroupTaskResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePublishGroupTaskResponse::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  publishtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePublishGroupTaskResponse::~CMessagePublishGroupTaskResponse() {
  SharedDtor();
}

void CMessagePublishGroupTaskResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessagePublishGroupTaskResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePublishGroupTaskResponse_descriptor_;
}

const CMessagePublishGroupTaskResponse& CMessagePublishGroupTaskResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePublishGroupTaskResponse* CMessagePublishGroupTaskResponse::default_instance_ = NULL;

CMessagePublishGroupTaskResponse* CMessagePublishGroupTaskResponse::New() const {
  return new CMessagePublishGroupTaskResponse;
}

void CMessagePublishGroupTaskResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0u;
    publishtype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePublishGroupTaskResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TaskID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_PublishType;
        break;
      }
      
      // optional uint32 PublishType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PublishType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &publishtype_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePublishGroupTaskResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePublishGroupTaskResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->taskid(), output);
  }
  
  // optional uint32 PublishType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->publishtype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePublishGroupTaskResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->taskid(), target);
  }
  
  // optional uint32 PublishType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->publishtype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePublishGroupTaskResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskid());
    }
    
    // optional uint32 PublishType = 2;
    if (has_publishtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->publishtype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePublishGroupTaskResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePublishGroupTaskResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePublishGroupTaskResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePublishGroupTaskResponse::MergeFrom(const CMessagePublishGroupTaskResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_taskid(from.taskid());
    }
    if (from._has_bit(1)) {
      set_publishtype(from.publishtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePublishGroupTaskResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePublishGroupTaskResponse::CopyFrom(const CMessagePublishGroupTaskResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePublishGroupTaskResponse::Swap(CMessagePublishGroupTaskResponse* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(publishtype_, other->publishtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePublishGroupTaskResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePublishGroupTaskResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePublishGroupTaskResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePublishGroupTaskResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMessagePlayerCheckSinglePublish::CMessagePlayerCheckSinglePublish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePlayerCheckSinglePublish::InitAsDefaultInstance() {}

CMessagePlayerCheckSinglePublish::CMessagePlayerCheckSinglePublish(const CMessagePlayerCheckSinglePublish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePlayerCheckSinglePublish::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePlayerCheckSinglePublish::~CMessagePlayerCheckSinglePublish() {
  SharedDtor();
}

void CMessagePlayerCheckSinglePublish::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessagePlayerCheckSinglePublish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerCheckSinglePublish_descriptor_;
}

const CMessagePlayerCheckSinglePublish& CMessagePlayerCheckSinglePublish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePlayerCheckSinglePublish* CMessagePlayerCheckSinglePublish::default_instance_ = NULL;

CMessagePlayerCheckSinglePublish* CMessagePlayerCheckSinglePublish::New() const {
  return new CMessagePlayerCheckSinglePublish;
}

void CMessagePlayerCheckSinglePublish::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePlayerCheckSinglePublish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMessagePlayerCheckSinglePublish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePlayerCheckSinglePublish::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePlayerCheckSinglePublish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePlayerCheckSinglePublish::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePlayerCheckSinglePublish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePlayerCheckSinglePublish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePlayerCheckSinglePublish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePlayerCheckSinglePublish::MergeFrom(const CMessagePlayerCheckSinglePublish& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePlayerCheckSinglePublish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerCheckSinglePublish::CopyFrom(const CMessagePlayerCheckSinglePublish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerCheckSinglePublish::Swap(CMessagePlayerCheckSinglePublish* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePlayerCheckSinglePublish::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePlayerCheckSinglePublish::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePlayerCheckSinglePublish::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerCheckSinglePublish_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessagePlayerSinglePublishTask::kTaskColorFieldNumber;
const int CMessagePlayerSinglePublishTask::kItemIndexFieldNumber;
#endif  // !_MSC_VER

CMessagePlayerSinglePublishTask::CMessagePlayerSinglePublishTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePlayerSinglePublishTask::InitAsDefaultInstance() {}

CMessagePlayerSinglePublishTask::CMessagePlayerSinglePublishTask(const CMessagePlayerSinglePublishTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePlayerSinglePublishTask::SharedCtor() {
  _cached_size_ = 0;
  taskcolor_ = 0u;
  itemindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePlayerSinglePublishTask::~CMessagePlayerSinglePublishTask() {
  SharedDtor();
}

void CMessagePlayerSinglePublishTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessagePlayerSinglePublishTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerSinglePublishTask_descriptor_;
}

const CMessagePlayerSinglePublishTask& CMessagePlayerSinglePublishTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePlayerSinglePublishTask* CMessagePlayerSinglePublishTask::default_instance_ = NULL;

CMessagePlayerSinglePublishTask* CMessagePlayerSinglePublishTask::New() const {
  return new CMessagePlayerSinglePublishTask;
}

void CMessagePlayerSinglePublishTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskcolor_ = 0u;
    itemindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePlayerSinglePublishTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TaskColor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskcolor_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ItemIndex;
        break;
      }
      
      // optional uint32 ItemIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemIndex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemindex_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePlayerSinglePublishTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePlayerSinglePublishTask::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TaskColor = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->taskcolor(), output);
  }
  
  // optional uint32 ItemIndex = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->itemindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePlayerSinglePublishTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TaskColor = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->taskcolor(), target);
  }
  
  // optional uint32 ItemIndex = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->itemindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePlayerSinglePublishTask::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskColor = 1;
    if (has_taskcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskcolor());
    }
    
    // optional uint32 ItemIndex = 2;
    if (has_itemindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemindex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePlayerSinglePublishTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePlayerSinglePublishTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePlayerSinglePublishTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePlayerSinglePublishTask::MergeFrom(const CMessagePlayerSinglePublishTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_taskcolor(from.taskcolor());
    }
    if (from._has_bit(1)) {
      set_itemindex(from.itemindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePlayerSinglePublishTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerSinglePublishTask::CopyFrom(const CMessagePlayerSinglePublishTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerSinglePublishTask::Swap(CMessagePlayerSinglePublishTask* other) {
  if (other != this) {
    std::swap(taskcolor_, other->taskcolor_);
    std::swap(itemindex_, other->itemindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePlayerSinglePublishTask::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePlayerSinglePublishTask::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePlayerSinglePublishTask::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerSinglePublishTask_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageRefreshSingleTaskRequest::kTaskColorFieldNumber;
const int CMessageRefreshSingleTaskRequest::kItemIndexFieldNumber;
#endif  // !_MSC_VER

CMessageRefreshSingleTaskRequest::CMessageRefreshSingleTaskRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRefreshSingleTaskRequest::InitAsDefaultInstance() {}

CMessageRefreshSingleTaskRequest::CMessageRefreshSingleTaskRequest(const CMessageRefreshSingleTaskRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRefreshSingleTaskRequest::SharedCtor() {
  _cached_size_ = 0;
  taskcolor_ = 0u;
  itemindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRefreshSingleTaskRequest::~CMessageRefreshSingleTaskRequest() {
  SharedDtor();
}

void CMessageRefreshSingleTaskRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageRefreshSingleTaskRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRefreshSingleTaskRequest_descriptor_;
}

const CMessageRefreshSingleTaskRequest& CMessageRefreshSingleTaskRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRefreshSingleTaskRequest* CMessageRefreshSingleTaskRequest::default_instance_ = NULL;

CMessageRefreshSingleTaskRequest* CMessageRefreshSingleTaskRequest::New() const {
  return new CMessageRefreshSingleTaskRequest;
}

void CMessageRefreshSingleTaskRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskcolor_ = 0u;
    itemindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRefreshSingleTaskRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TaskColor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskcolor_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ItemIndex;
        break;
      }
      
      // optional uint32 ItemIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemIndex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemindex_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageRefreshSingleTaskRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRefreshSingleTaskRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TaskColor = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->taskcolor(), output);
  }
  
  // optional uint32 ItemIndex = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->itemindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRefreshSingleTaskRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TaskColor = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->taskcolor(), target);
  }
  
  // optional uint32 ItemIndex = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->itemindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRefreshSingleTaskRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskColor = 1;
    if (has_taskcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskcolor());
    }
    
    // optional uint32 ItemIndex = 2;
    if (has_itemindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemindex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRefreshSingleTaskRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRefreshSingleTaskRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRefreshSingleTaskRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRefreshSingleTaskRequest::MergeFrom(const CMessageRefreshSingleTaskRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_taskcolor(from.taskcolor());
    }
    if (from._has_bit(1)) {
      set_itemindex(from.itemindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRefreshSingleTaskRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRefreshSingleTaskRequest::CopyFrom(const CMessageRefreshSingleTaskRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRefreshSingleTaskRequest::Swap(CMessageRefreshSingleTaskRequest* other) {
  if (other != this) {
    std::swap(taskcolor_, other->taskcolor_);
    std::swap(itemindex_, other->itemindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRefreshSingleTaskRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRefreshSingleTaskRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRefreshSingleTaskRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRefreshSingleTaskRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessagePlayerGetPublishTaskRequest::kTaskColorFieldNumber;
#endif  // !_MSC_VER

CMessagePlayerGetPublishTaskRequest::CMessagePlayerGetPublishTaskRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePlayerGetPublishTaskRequest::InitAsDefaultInstance() {}

CMessagePlayerGetPublishTaskRequest::CMessagePlayerGetPublishTaskRequest(const CMessagePlayerGetPublishTaskRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePlayerGetPublishTaskRequest::SharedCtor() {
  _cached_size_ = 0;
  taskcolor_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePlayerGetPublishTaskRequest::~CMessagePlayerGetPublishTaskRequest() {
  SharedDtor();
}

void CMessagePlayerGetPublishTaskRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessagePlayerGetPublishTaskRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerGetPublishTaskRequest_descriptor_;
}

const CMessagePlayerGetPublishTaskRequest& CMessagePlayerGetPublishTaskRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePlayerGetPublishTaskRequest* CMessagePlayerGetPublishTaskRequest::default_instance_ = NULL;

CMessagePlayerGetPublishTaskRequest* CMessagePlayerGetPublishTaskRequest::New() const {
  return new CMessagePlayerGetPublishTaskRequest;
}

void CMessagePlayerGetPublishTaskRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskcolor_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePlayerGetPublishTaskRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TaskColor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskcolor_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePlayerGetPublishTaskRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePlayerGetPublishTaskRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TaskColor = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->taskcolor(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePlayerGetPublishTaskRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TaskColor = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->taskcolor(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePlayerGetPublishTaskRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskColor = 1;
    if (has_taskcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskcolor());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePlayerGetPublishTaskRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePlayerGetPublishTaskRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePlayerGetPublishTaskRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePlayerGetPublishTaskRequest::MergeFrom(const CMessagePlayerGetPublishTaskRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_taskcolor(from.taskcolor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePlayerGetPublishTaskRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerGetPublishTaskRequest::CopyFrom(const CMessagePlayerGetPublishTaskRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerGetPublishTaskRequest::Swap(CMessagePlayerGetPublishTaskRequest* other) {
  if (other != this) {
    std::swap(taskcolor_, other->taskcolor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePlayerGetPublishTaskRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePlayerGetPublishTaskRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePlayerGetPublishTaskRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerGetPublishTaskRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessagePlayerGetAwardsRequest::kTaskColorFieldNumber;
#endif  // !_MSC_VER

CMessagePlayerGetAwardsRequest::CMessagePlayerGetAwardsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePlayerGetAwardsRequest::InitAsDefaultInstance() {}

CMessagePlayerGetAwardsRequest::CMessagePlayerGetAwardsRequest(const CMessagePlayerGetAwardsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePlayerGetAwardsRequest::SharedCtor() {
  _cached_size_ = 0;
  taskcolor_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePlayerGetAwardsRequest::~CMessagePlayerGetAwardsRequest() {
  SharedDtor();
}

void CMessagePlayerGetAwardsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessagePlayerGetAwardsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerGetAwardsRequest_descriptor_;
}

const CMessagePlayerGetAwardsRequest& CMessagePlayerGetAwardsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePlayerGetAwardsRequest* CMessagePlayerGetAwardsRequest::default_instance_ = NULL;

CMessagePlayerGetAwardsRequest* CMessagePlayerGetAwardsRequest::New() const {
  return new CMessagePlayerGetAwardsRequest;
}

void CMessagePlayerGetAwardsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskcolor_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePlayerGetAwardsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TaskColor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskcolor_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePlayerGetAwardsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePlayerGetAwardsRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TaskColor = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->taskcolor(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePlayerGetAwardsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TaskColor = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->taskcolor(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePlayerGetAwardsRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskColor = 1;
    if (has_taskcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskcolor());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePlayerGetAwardsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePlayerGetAwardsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePlayerGetAwardsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePlayerGetAwardsRequest::MergeFrom(const CMessagePlayerGetAwardsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_taskcolor(from.taskcolor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePlayerGetAwardsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerGetAwardsRequest::CopyFrom(const CMessagePlayerGetAwardsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerGetAwardsRequest::Swap(CMessagePlayerGetAwardsRequest* other) {
  if (other != this) {
    std::swap(taskcolor_, other->taskcolor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePlayerGetAwardsRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePlayerGetAwardsRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePlayerGetAwardsRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerGetAwardsRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBSingleColorRank::kPubNumberFieldNumber;
const int PBSingleColorRank::kRecvTasksFieldNumber;
const int PBSingleColorRank::kRecvAwardsFieldNumber;
const int PBSingleColorRank::kCurrentTaskFieldNumber;
#endif  // !_MSC_VER

PBSingleColorRank::PBSingleColorRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSingleColorRank::InitAsDefaultInstance() {}

PBSingleColorRank::PBSingleColorRank(const PBSingleColorRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSingleColorRank::SharedCtor() {
  _cached_size_ = 0;
  pubnumber_ = 0u;
  recvtasks_ = 0u;
  recvawards_ = 0u;
  currenttask_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSingleColorRank::~PBSingleColorRank() {
  SharedDtor();
}

void PBSingleColorRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBSingleColorRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSingleColorRank_descriptor_;
}

const PBSingleColorRank& PBSingleColorRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

PBSingleColorRank* PBSingleColorRank::default_instance_ = NULL;

PBSingleColorRank* PBSingleColorRank::New() const {
  return new PBSingleColorRank;
}

void PBSingleColorRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pubnumber_ = 0u;
    recvtasks_ = 0u;
    recvawards_ = 0u;
    currenttask_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSingleColorRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 PubNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pubnumber_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_RecvTasks;
        break;
      }
      
      // optional uint32 RecvTasks = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RecvTasks:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &recvtasks_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_RecvAwards;
        break;
      }
      
      // optional uint32 RecvAwards = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RecvAwards:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &recvawards_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_CurrentTask;
        break;
      }
      
      // optional uint32 CurrentTask = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CurrentTask:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &currenttask_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSingleColorRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBSingleColorRank::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 PubNumber = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->pubnumber(), output);
  }
  
  // optional uint32 RecvTasks = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->recvtasks(), output);
  }
  
  // optional uint32 RecvAwards = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->recvawards(), output);
  }
  
  // optional uint32 CurrentTask = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->currenttask(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSingleColorRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 PubNumber = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->pubnumber(), target);
  }
  
  // optional uint32 RecvTasks = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->recvtasks(), target);
  }
  
  // optional uint32 RecvAwards = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->recvawards(), target);
  }
  
  // optional uint32 CurrentTask = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->currenttask(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSingleColorRank::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 PubNumber = 1;
    if (has_pubnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pubnumber());
    }
    
    // optional uint32 RecvTasks = 2;
    if (has_recvtasks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->recvtasks());
    }
    
    // optional uint32 RecvAwards = 3;
    if (has_recvawards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->recvawards());
    }
    
    // optional uint32 CurrentTask = 4;
    if (has_currenttask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->currenttask());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBSingleColorRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSingleColorRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSingleColorRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSingleColorRank::MergeFrom(const PBSingleColorRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_pubnumber(from.pubnumber());
    }
    if (from._has_bit(1)) {
      set_recvtasks(from.recvtasks());
    }
    if (from._has_bit(2)) {
      set_recvawards(from.recvawards());
    }
    if (from._has_bit(3)) {
      set_currenttask(from.currenttask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSingleColorRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSingleColorRank::CopyFrom(const PBSingleColorRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSingleColorRank::Swap(PBSingleColorRank* other) {
  if (other != this) {
    std::swap(pubnumber_, other->pubnumber_);
    std::swap(recvtasks_, other->recvtasks_);
    std::swap(recvawards_, other->recvawards_);
    std::swap(currenttask_, other->currenttask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBSingleColorRank::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBSingleColorRank::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBSingleColorRank::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBSingleColorRank_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCheckSinglePublishResponse::kTodayPublishFieldNumber;
const int CMessageCheckSinglePublishResponse::kOncePublishFieldNumber;
const int CMessageCheckSinglePublishResponse::kTotalFinishFieldNumber;
const int CMessageCheckSinglePublishResponse::kSingleRankFieldNumber;
#endif  // !_MSC_VER

CMessageCheckSinglePublishResponse::CMessageCheckSinglePublishResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCheckSinglePublishResponse::InitAsDefaultInstance() {}

CMessageCheckSinglePublishResponse::CMessageCheckSinglePublishResponse(const CMessageCheckSinglePublishResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCheckSinglePublishResponse::SharedCtor() {
  _cached_size_ = 0;
  todaypublish_ = 0u;
  oncepublish_ = 0u;
  totalfinish_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCheckSinglePublishResponse::~CMessageCheckSinglePublishResponse() {
  SharedDtor();
}

void CMessageCheckSinglePublishResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCheckSinglePublishResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCheckSinglePublishResponse_descriptor_;
}

const CMessageCheckSinglePublishResponse& CMessageCheckSinglePublishResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCheckSinglePublishResponse* CMessageCheckSinglePublishResponse::default_instance_ = NULL;

CMessageCheckSinglePublishResponse* CMessageCheckSinglePublishResponse::New() const {
  return new CMessageCheckSinglePublishResponse;
}

void CMessageCheckSinglePublishResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    todaypublish_ = 0u;
    oncepublish_ = 0u;
    totalfinish_ = 0u;
  }
  singlerank_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCheckSinglePublishResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TodayPublish = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &todaypublish_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_OncePublish;
        break;
      }
      
      // optional uint32 OncePublish = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OncePublish:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &oncepublish_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_TotalFinish;
        break;
      }
      
      // optional uint32 TotalFinish = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TotalFinish:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &totalfinish_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_SingleRank;
        break;
      }
      
      // repeated .PBSingleColorRank SingleRank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SingleRank:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_singlerank()));
        if (input->ExpectTag(34)) goto parse_SingleRank;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCheckSinglePublishResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCheckSinglePublishResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TodayPublish = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->todaypublish(), output);
  }
  
  // optional uint32 OncePublish = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->oncepublish(), output);
  }
  
  // optional uint32 TotalFinish = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->totalfinish(), output);
  }
  
  // repeated .PBSingleColorRank SingleRank = 4;
  for (int i = 0; i < this->singlerank_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->singlerank(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCheckSinglePublishResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TodayPublish = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->todaypublish(), target);
  }
  
  // optional uint32 OncePublish = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->oncepublish(), target);
  }
  
  // optional uint32 TotalFinish = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->totalfinish(), target);
  }
  
  // repeated .PBSingleColorRank SingleRank = 4;
  for (int i = 0; i < this->singlerank_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(4, this->singlerank(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCheckSinglePublishResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TodayPublish = 1;
    if (has_todaypublish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->todaypublish());
    }
    
    // optional uint32 OncePublish = 2;
    if (has_oncepublish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->oncepublish());
    }
    
    // optional uint32 TotalFinish = 3;
    if (has_totalfinish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->totalfinish());
    }
    
  }
  // repeated .PBSingleColorRank SingleRank = 4;
  total_size += 1 * this->singlerank_size();
  for (int i = 0; i < this->singlerank_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->singlerank(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCheckSinglePublishResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCheckSinglePublishResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCheckSinglePublishResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCheckSinglePublishResponse::MergeFrom(const CMessageCheckSinglePublishResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  singlerank_.MergeFrom(from.singlerank_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_todaypublish(from.todaypublish());
    }
    if (from._has_bit(1)) {
      set_oncepublish(from.oncepublish());
    }
    if (from._has_bit(2)) {
      set_totalfinish(from.totalfinish());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCheckSinglePublishResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCheckSinglePublishResponse::CopyFrom(const CMessageCheckSinglePublishResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCheckSinglePublishResponse::Swap(CMessageCheckSinglePublishResponse* other) {
  if (other != this) {
    std::swap(todaypublish_, other->todaypublish_);
    std::swap(oncepublish_, other->oncepublish_);
    std::swap(totalfinish_, other->totalfinish_);
    singlerank_.Swap(&other->singlerank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCheckSinglePublishResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCheckSinglePublishResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCheckSinglePublishResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCheckSinglePublishResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessagePlayerSinglePublishResponse::kTaskColorFieldNumber;
#endif  // !_MSC_VER

CMessagePlayerSinglePublishResponse::CMessagePlayerSinglePublishResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePlayerSinglePublishResponse::InitAsDefaultInstance() {}

CMessagePlayerSinglePublishResponse::CMessagePlayerSinglePublishResponse(const CMessagePlayerSinglePublishResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePlayerSinglePublishResponse::SharedCtor() {
  _cached_size_ = 0;
  taskcolor_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePlayerSinglePublishResponse::~CMessagePlayerSinglePublishResponse() {
  SharedDtor();
}

void CMessagePlayerSinglePublishResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessagePlayerSinglePublishResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerSinglePublishResponse_descriptor_;
}

const CMessagePlayerSinglePublishResponse& CMessagePlayerSinglePublishResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePlayerSinglePublishResponse* CMessagePlayerSinglePublishResponse::default_instance_ = NULL;

CMessagePlayerSinglePublishResponse* CMessagePlayerSinglePublishResponse::New() const {
  return new CMessagePlayerSinglePublishResponse;
}

void CMessagePlayerSinglePublishResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskcolor_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePlayerSinglePublishResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TaskColor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskcolor_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePlayerSinglePublishResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePlayerSinglePublishResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TaskColor = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->taskcolor(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePlayerSinglePublishResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TaskColor = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->taskcolor(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePlayerSinglePublishResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskColor = 1;
    if (has_taskcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskcolor());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePlayerSinglePublishResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePlayerSinglePublishResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePlayerSinglePublishResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePlayerSinglePublishResponse::MergeFrom(const CMessagePlayerSinglePublishResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_taskcolor(from.taskcolor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePlayerSinglePublishResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerSinglePublishResponse::CopyFrom(const CMessagePlayerSinglePublishResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerSinglePublishResponse::Swap(CMessagePlayerSinglePublishResponse* other) {
  if (other != this) {
    std::swap(taskcolor_, other->taskcolor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePlayerSinglePublishResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePlayerSinglePublishResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePlayerSinglePublishResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerSinglePublishResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageRefreshSingleTaskResponse::kTaskColorFieldNumber;
const int CMessageRefreshSingleTaskResponse::kTaskIDFieldNumber;
#endif  // !_MSC_VER

CMessageRefreshSingleTaskResponse::CMessageRefreshSingleTaskResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRefreshSingleTaskResponse::InitAsDefaultInstance() {}

CMessageRefreshSingleTaskResponse::CMessageRefreshSingleTaskResponse(const CMessageRefreshSingleTaskResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRefreshSingleTaskResponse::SharedCtor() {
  _cached_size_ = 0;
  taskcolor_ = 0u;
  taskid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRefreshSingleTaskResponse::~CMessageRefreshSingleTaskResponse() {
  SharedDtor();
}

void CMessageRefreshSingleTaskResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageRefreshSingleTaskResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRefreshSingleTaskResponse_descriptor_;
}

const CMessageRefreshSingleTaskResponse& CMessageRefreshSingleTaskResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRefreshSingleTaskResponse* CMessageRefreshSingleTaskResponse::default_instance_ = NULL;

CMessageRefreshSingleTaskResponse* CMessageRefreshSingleTaskResponse::New() const {
  return new CMessageRefreshSingleTaskResponse;
}

void CMessageRefreshSingleTaskResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskcolor_ = 0u;
    taskid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRefreshSingleTaskResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TaskColor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskcolor_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_TaskID;
        break;
      }
      
      // optional uint32 TaskID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TaskID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageRefreshSingleTaskResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRefreshSingleTaskResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TaskColor = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->taskcolor(), output);
  }
  
  // optional uint32 TaskID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->taskid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRefreshSingleTaskResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TaskColor = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->taskcolor(), target);
  }
  
  // optional uint32 TaskID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->taskid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRefreshSingleTaskResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskColor = 1;
    if (has_taskcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskcolor());
    }
    
    // optional uint32 TaskID = 2;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRefreshSingleTaskResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRefreshSingleTaskResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRefreshSingleTaskResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRefreshSingleTaskResponse::MergeFrom(const CMessageRefreshSingleTaskResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_taskcolor(from.taskcolor());
    }
    if (from._has_bit(1)) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRefreshSingleTaskResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRefreshSingleTaskResponse::CopyFrom(const CMessageRefreshSingleTaskResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRefreshSingleTaskResponse::Swap(CMessageRefreshSingleTaskResponse* other) {
  if (other != this) {
    std::swap(taskcolor_, other->taskcolor_);
    std::swap(taskid_, other->taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRefreshSingleTaskResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRefreshSingleTaskResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRefreshSingleTaskResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRefreshSingleTaskResponse_reflection_;
}
